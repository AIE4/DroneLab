
DroneLab.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00013f08  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000760  080140d8  080140d8  000240d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08014838  08014838  000303d8  2**0
                  CONTENTS
  4 .ARM          00000008  08014838  08014838  00024838  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08014840  08014840  000303d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08014840  08014840  00024840  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08014844  08014844  00024844  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000003d8  20000000  08014848  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000200c  200003d8  08014c20  000303d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200023e4  08014c20  000323e4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000303d8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00030784  00000000  00000000  00030408  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000545e  00000000  00000000  00060b8c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000029a0  00000000  00000000  00065ff0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00002710  00000000  00000000  00068990  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00029229  00000000  00000000  0006b0a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002a0c4  00000000  00000000  000942c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e23a0  00000000  00000000  000be38d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001a072d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000c65c  00000000  00000000  001a0780  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200003d8 	.word	0x200003d8
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080140c0 	.word	0x080140c0

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200003dc 	.word	0x200003dc
 800020c:	080140c0 	.word	0x080140c0

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b974 	b.w	8000f88 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f806 	bl	8000cb8 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__udivmoddi4>:
 8000cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cbc:	9d08      	ldr	r5, [sp, #32]
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	468e      	mov	lr, r1
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d14d      	bne.n	8000d62 <__udivmoddi4+0xaa>
 8000cc6:	428a      	cmp	r2, r1
 8000cc8:	4694      	mov	ip, r2
 8000cca:	d969      	bls.n	8000da0 <__udivmoddi4+0xe8>
 8000ccc:	fab2 f282 	clz	r2, r2
 8000cd0:	b152      	cbz	r2, 8000ce8 <__udivmoddi4+0x30>
 8000cd2:	fa01 f302 	lsl.w	r3, r1, r2
 8000cd6:	f1c2 0120 	rsb	r1, r2, #32
 8000cda:	fa20 f101 	lsr.w	r1, r0, r1
 8000cde:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ce2:	ea41 0e03 	orr.w	lr, r1, r3
 8000ce6:	4094      	lsls	r4, r2
 8000ce8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cec:	0c21      	lsrs	r1, r4, #16
 8000cee:	fbbe f6f8 	udiv	r6, lr, r8
 8000cf2:	fa1f f78c 	uxth.w	r7, ip
 8000cf6:	fb08 e316 	mls	r3, r8, r6, lr
 8000cfa:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000cfe:	fb06 f107 	mul.w	r1, r6, r7
 8000d02:	4299      	cmp	r1, r3
 8000d04:	d90a      	bls.n	8000d1c <__udivmoddi4+0x64>
 8000d06:	eb1c 0303 	adds.w	r3, ip, r3
 8000d0a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d0e:	f080 811f 	bcs.w	8000f50 <__udivmoddi4+0x298>
 8000d12:	4299      	cmp	r1, r3
 8000d14:	f240 811c 	bls.w	8000f50 <__udivmoddi4+0x298>
 8000d18:	3e02      	subs	r6, #2
 8000d1a:	4463      	add	r3, ip
 8000d1c:	1a5b      	subs	r3, r3, r1
 8000d1e:	b2a4      	uxth	r4, r4
 8000d20:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d24:	fb08 3310 	mls	r3, r8, r0, r3
 8000d28:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d2c:	fb00 f707 	mul.w	r7, r0, r7
 8000d30:	42a7      	cmp	r7, r4
 8000d32:	d90a      	bls.n	8000d4a <__udivmoddi4+0x92>
 8000d34:	eb1c 0404 	adds.w	r4, ip, r4
 8000d38:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d3c:	f080 810a 	bcs.w	8000f54 <__udivmoddi4+0x29c>
 8000d40:	42a7      	cmp	r7, r4
 8000d42:	f240 8107 	bls.w	8000f54 <__udivmoddi4+0x29c>
 8000d46:	4464      	add	r4, ip
 8000d48:	3802      	subs	r0, #2
 8000d4a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d4e:	1be4      	subs	r4, r4, r7
 8000d50:	2600      	movs	r6, #0
 8000d52:	b11d      	cbz	r5, 8000d5c <__udivmoddi4+0xa4>
 8000d54:	40d4      	lsrs	r4, r2
 8000d56:	2300      	movs	r3, #0
 8000d58:	e9c5 4300 	strd	r4, r3, [r5]
 8000d5c:	4631      	mov	r1, r6
 8000d5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d62:	428b      	cmp	r3, r1
 8000d64:	d909      	bls.n	8000d7a <__udivmoddi4+0xc2>
 8000d66:	2d00      	cmp	r5, #0
 8000d68:	f000 80ef 	beq.w	8000f4a <__udivmoddi4+0x292>
 8000d6c:	2600      	movs	r6, #0
 8000d6e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d72:	4630      	mov	r0, r6
 8000d74:	4631      	mov	r1, r6
 8000d76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d7a:	fab3 f683 	clz	r6, r3
 8000d7e:	2e00      	cmp	r6, #0
 8000d80:	d14a      	bne.n	8000e18 <__udivmoddi4+0x160>
 8000d82:	428b      	cmp	r3, r1
 8000d84:	d302      	bcc.n	8000d8c <__udivmoddi4+0xd4>
 8000d86:	4282      	cmp	r2, r0
 8000d88:	f200 80f9 	bhi.w	8000f7e <__udivmoddi4+0x2c6>
 8000d8c:	1a84      	subs	r4, r0, r2
 8000d8e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d92:	2001      	movs	r0, #1
 8000d94:	469e      	mov	lr, r3
 8000d96:	2d00      	cmp	r5, #0
 8000d98:	d0e0      	beq.n	8000d5c <__udivmoddi4+0xa4>
 8000d9a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d9e:	e7dd      	b.n	8000d5c <__udivmoddi4+0xa4>
 8000da0:	b902      	cbnz	r2, 8000da4 <__udivmoddi4+0xec>
 8000da2:	deff      	udf	#255	; 0xff
 8000da4:	fab2 f282 	clz	r2, r2
 8000da8:	2a00      	cmp	r2, #0
 8000daa:	f040 8092 	bne.w	8000ed2 <__udivmoddi4+0x21a>
 8000dae:	eba1 010c 	sub.w	r1, r1, ip
 8000db2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000db6:	fa1f fe8c 	uxth.w	lr, ip
 8000dba:	2601      	movs	r6, #1
 8000dbc:	0c20      	lsrs	r0, r4, #16
 8000dbe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000dc2:	fb07 1113 	mls	r1, r7, r3, r1
 8000dc6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dca:	fb0e f003 	mul.w	r0, lr, r3
 8000dce:	4288      	cmp	r0, r1
 8000dd0:	d908      	bls.n	8000de4 <__udivmoddi4+0x12c>
 8000dd2:	eb1c 0101 	adds.w	r1, ip, r1
 8000dd6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000dda:	d202      	bcs.n	8000de2 <__udivmoddi4+0x12a>
 8000ddc:	4288      	cmp	r0, r1
 8000dde:	f200 80cb 	bhi.w	8000f78 <__udivmoddi4+0x2c0>
 8000de2:	4643      	mov	r3, r8
 8000de4:	1a09      	subs	r1, r1, r0
 8000de6:	b2a4      	uxth	r4, r4
 8000de8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dec:	fb07 1110 	mls	r1, r7, r0, r1
 8000df0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000df4:	fb0e fe00 	mul.w	lr, lr, r0
 8000df8:	45a6      	cmp	lr, r4
 8000dfa:	d908      	bls.n	8000e0e <__udivmoddi4+0x156>
 8000dfc:	eb1c 0404 	adds.w	r4, ip, r4
 8000e00:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e04:	d202      	bcs.n	8000e0c <__udivmoddi4+0x154>
 8000e06:	45a6      	cmp	lr, r4
 8000e08:	f200 80bb 	bhi.w	8000f82 <__udivmoddi4+0x2ca>
 8000e0c:	4608      	mov	r0, r1
 8000e0e:	eba4 040e 	sub.w	r4, r4, lr
 8000e12:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e16:	e79c      	b.n	8000d52 <__udivmoddi4+0x9a>
 8000e18:	f1c6 0720 	rsb	r7, r6, #32
 8000e1c:	40b3      	lsls	r3, r6
 8000e1e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e22:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e26:	fa20 f407 	lsr.w	r4, r0, r7
 8000e2a:	fa01 f306 	lsl.w	r3, r1, r6
 8000e2e:	431c      	orrs	r4, r3
 8000e30:	40f9      	lsrs	r1, r7
 8000e32:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e36:	fa00 f306 	lsl.w	r3, r0, r6
 8000e3a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e3e:	0c20      	lsrs	r0, r4, #16
 8000e40:	fa1f fe8c 	uxth.w	lr, ip
 8000e44:	fb09 1118 	mls	r1, r9, r8, r1
 8000e48:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e4c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e50:	4288      	cmp	r0, r1
 8000e52:	fa02 f206 	lsl.w	r2, r2, r6
 8000e56:	d90b      	bls.n	8000e70 <__udivmoddi4+0x1b8>
 8000e58:	eb1c 0101 	adds.w	r1, ip, r1
 8000e5c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e60:	f080 8088 	bcs.w	8000f74 <__udivmoddi4+0x2bc>
 8000e64:	4288      	cmp	r0, r1
 8000e66:	f240 8085 	bls.w	8000f74 <__udivmoddi4+0x2bc>
 8000e6a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e6e:	4461      	add	r1, ip
 8000e70:	1a09      	subs	r1, r1, r0
 8000e72:	b2a4      	uxth	r4, r4
 8000e74:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e78:	fb09 1110 	mls	r1, r9, r0, r1
 8000e7c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e80:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e84:	458e      	cmp	lr, r1
 8000e86:	d908      	bls.n	8000e9a <__udivmoddi4+0x1e2>
 8000e88:	eb1c 0101 	adds.w	r1, ip, r1
 8000e8c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e90:	d26c      	bcs.n	8000f6c <__udivmoddi4+0x2b4>
 8000e92:	458e      	cmp	lr, r1
 8000e94:	d96a      	bls.n	8000f6c <__udivmoddi4+0x2b4>
 8000e96:	3802      	subs	r0, #2
 8000e98:	4461      	add	r1, ip
 8000e9a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e9e:	fba0 9402 	umull	r9, r4, r0, r2
 8000ea2:	eba1 010e 	sub.w	r1, r1, lr
 8000ea6:	42a1      	cmp	r1, r4
 8000ea8:	46c8      	mov	r8, r9
 8000eaa:	46a6      	mov	lr, r4
 8000eac:	d356      	bcc.n	8000f5c <__udivmoddi4+0x2a4>
 8000eae:	d053      	beq.n	8000f58 <__udivmoddi4+0x2a0>
 8000eb0:	b15d      	cbz	r5, 8000eca <__udivmoddi4+0x212>
 8000eb2:	ebb3 0208 	subs.w	r2, r3, r8
 8000eb6:	eb61 010e 	sbc.w	r1, r1, lr
 8000eba:	fa01 f707 	lsl.w	r7, r1, r7
 8000ebe:	fa22 f306 	lsr.w	r3, r2, r6
 8000ec2:	40f1      	lsrs	r1, r6
 8000ec4:	431f      	orrs	r7, r3
 8000ec6:	e9c5 7100 	strd	r7, r1, [r5]
 8000eca:	2600      	movs	r6, #0
 8000ecc:	4631      	mov	r1, r6
 8000ece:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ed2:	f1c2 0320 	rsb	r3, r2, #32
 8000ed6:	40d8      	lsrs	r0, r3
 8000ed8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000edc:	fa21 f303 	lsr.w	r3, r1, r3
 8000ee0:	4091      	lsls	r1, r2
 8000ee2:	4301      	orrs	r1, r0
 8000ee4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ee8:	fa1f fe8c 	uxth.w	lr, ip
 8000eec:	fbb3 f0f7 	udiv	r0, r3, r7
 8000ef0:	fb07 3610 	mls	r6, r7, r0, r3
 8000ef4:	0c0b      	lsrs	r3, r1, #16
 8000ef6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000efa:	fb00 f60e 	mul.w	r6, r0, lr
 8000efe:	429e      	cmp	r6, r3
 8000f00:	fa04 f402 	lsl.w	r4, r4, r2
 8000f04:	d908      	bls.n	8000f18 <__udivmoddi4+0x260>
 8000f06:	eb1c 0303 	adds.w	r3, ip, r3
 8000f0a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f0e:	d22f      	bcs.n	8000f70 <__udivmoddi4+0x2b8>
 8000f10:	429e      	cmp	r6, r3
 8000f12:	d92d      	bls.n	8000f70 <__udivmoddi4+0x2b8>
 8000f14:	3802      	subs	r0, #2
 8000f16:	4463      	add	r3, ip
 8000f18:	1b9b      	subs	r3, r3, r6
 8000f1a:	b289      	uxth	r1, r1
 8000f1c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f20:	fb07 3316 	mls	r3, r7, r6, r3
 8000f24:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f28:	fb06 f30e 	mul.w	r3, r6, lr
 8000f2c:	428b      	cmp	r3, r1
 8000f2e:	d908      	bls.n	8000f42 <__udivmoddi4+0x28a>
 8000f30:	eb1c 0101 	adds.w	r1, ip, r1
 8000f34:	f106 38ff 	add.w	r8, r6, #4294967295
 8000f38:	d216      	bcs.n	8000f68 <__udivmoddi4+0x2b0>
 8000f3a:	428b      	cmp	r3, r1
 8000f3c:	d914      	bls.n	8000f68 <__udivmoddi4+0x2b0>
 8000f3e:	3e02      	subs	r6, #2
 8000f40:	4461      	add	r1, ip
 8000f42:	1ac9      	subs	r1, r1, r3
 8000f44:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f48:	e738      	b.n	8000dbc <__udivmoddi4+0x104>
 8000f4a:	462e      	mov	r6, r5
 8000f4c:	4628      	mov	r0, r5
 8000f4e:	e705      	b.n	8000d5c <__udivmoddi4+0xa4>
 8000f50:	4606      	mov	r6, r0
 8000f52:	e6e3      	b.n	8000d1c <__udivmoddi4+0x64>
 8000f54:	4618      	mov	r0, r3
 8000f56:	e6f8      	b.n	8000d4a <__udivmoddi4+0x92>
 8000f58:	454b      	cmp	r3, r9
 8000f5a:	d2a9      	bcs.n	8000eb0 <__udivmoddi4+0x1f8>
 8000f5c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f60:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f64:	3801      	subs	r0, #1
 8000f66:	e7a3      	b.n	8000eb0 <__udivmoddi4+0x1f8>
 8000f68:	4646      	mov	r6, r8
 8000f6a:	e7ea      	b.n	8000f42 <__udivmoddi4+0x28a>
 8000f6c:	4620      	mov	r0, r4
 8000f6e:	e794      	b.n	8000e9a <__udivmoddi4+0x1e2>
 8000f70:	4640      	mov	r0, r8
 8000f72:	e7d1      	b.n	8000f18 <__udivmoddi4+0x260>
 8000f74:	46d0      	mov	r8, sl
 8000f76:	e77b      	b.n	8000e70 <__udivmoddi4+0x1b8>
 8000f78:	3b02      	subs	r3, #2
 8000f7a:	4461      	add	r1, ip
 8000f7c:	e732      	b.n	8000de4 <__udivmoddi4+0x12c>
 8000f7e:	4630      	mov	r0, r6
 8000f80:	e709      	b.n	8000d96 <__udivmoddi4+0xde>
 8000f82:	4464      	add	r4, ip
 8000f84:	3802      	subs	r0, #2
 8000f86:	e742      	b.n	8000e0e <__udivmoddi4+0x156>

08000f88 <__aeabi_idiv0>:
 8000f88:	4770      	bx	lr
 8000f8a:	bf00      	nop
 8000f8c:	0000      	movs	r0, r0
	...

08000f90 <PID_CONTROLLERS_Roll>:
float Yaw_Error;

//setpoint is desired angle in radians - level mode
//time in millisecond elapsed since last PID calcullation
uint16_t PID_CONTROLLERS_Roll(float setpoint, int time)
{
 8000f90:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8000f94:	b084      	sub	sp, #16
 8000f96:	af00      	add	r7, sp, #0
 8000f98:	ed87 0a01 	vstr	s0, [r7, #4]
 8000f9c:	6038      	str	r0, [r7, #0]
	float output;
	float error = setpoint - DATA_ComplementedAngles.X;
 8000f9e:	4b4c      	ldr	r3, [pc, #304]	; (80010d0 <PID_CONTROLLERS_Roll+0x140>)
 8000fa0:	edd3 7a00 	vldr	s15, [r3]
 8000fa4:	ed97 7a01 	vldr	s14, [r7, #4]
 8000fa8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000fac:	edc7 7a03 	vstr	s15, [r7, #12]
	Roll_ITerm += PID_Roll.I * error * time * 0.001; // discrete integration, convert time to seconds
 8000fb0:	4b48      	ldr	r3, [pc, #288]	; (80010d4 <PID_CONTROLLERS_Roll+0x144>)
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	f7ff fae7 	bl	8000588 <__aeabi_f2d>
 8000fba:	4604      	mov	r4, r0
 8000fbc:	460d      	mov	r5, r1
 8000fbe:	4b46      	ldr	r3, [pc, #280]	; (80010d8 <PID_CONTROLLERS_Roll+0x148>)
 8000fc0:	ed93 7a01 	vldr	s14, [r3, #4]
 8000fc4:	edd7 7a03 	vldr	s15, [r7, #12]
 8000fc8:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000fcc:	683b      	ldr	r3, [r7, #0]
 8000fce:	ee07 3a90 	vmov	s15, r3
 8000fd2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000fd6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000fda:	ee17 0a90 	vmov	r0, s15
 8000fde:	f7ff fad3 	bl	8000588 <__aeabi_f2d>
 8000fe2:	a339      	add	r3, pc, #228	; (adr r3, 80010c8 <PID_CONTROLLERS_Roll+0x138>)
 8000fe4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fe8:	f7ff fb26 	bl	8000638 <__aeabi_dmul>
 8000fec:	4602      	mov	r2, r0
 8000fee:	460b      	mov	r3, r1
 8000ff0:	4620      	mov	r0, r4
 8000ff2:	4629      	mov	r1, r5
 8000ff4:	f7ff f96a 	bl	80002cc <__adddf3>
 8000ff8:	4602      	mov	r2, r0
 8000ffa:	460b      	mov	r3, r1
 8000ffc:	4610      	mov	r0, r2
 8000ffe:	4619      	mov	r1, r3
 8001000:	f7ff fdf2 	bl	8000be8 <__aeabi_d2f>
 8001004:	4603      	mov	r3, r0
 8001006:	4a33      	ldr	r2, [pc, #204]	; (80010d4 <PID_CONTROLLERS_Roll+0x144>)
 8001008:	6013      	str	r3, [r2, #0]

	if(Roll_ITerm > CONFIG_MaximumITerm) // to avoid integral windup set check for maximum ITerm
 800100a:	4b32      	ldr	r3, [pc, #200]	; (80010d4 <PID_CONTROLLERS_Roll+0x144>)
 800100c:	edd3 7a00 	vldr	s15, [r3]
 8001010:	ed9f 7a32 	vldr	s14, [pc, #200]	; 80010dc <PID_CONTROLLERS_Roll+0x14c>
 8001014:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001018:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800101c:	dd06      	ble.n	800102c <PID_CONTROLLERS_Roll+0x9c>
	{
		Roll_ITerm = CONFIG_MaximumITerm;
 800101e:	4b2d      	ldr	r3, [pc, #180]	; (80010d4 <PID_CONTROLLERS_Roll+0x144>)
 8001020:	4a2f      	ldr	r2, [pc, #188]	; (80010e0 <PID_CONTROLLERS_Roll+0x150>)
 8001022:	601a      	str	r2, [r3, #0]
		LOGGER_WriteLine("Roll ITerm exceeded maximum value, set to 400", _INFO);
 8001024:	2101      	movs	r1, #1
 8001026:	482f      	ldr	r0, [pc, #188]	; (80010e4 <PID_CONTROLLERS_Roll+0x154>)
 8001028:	f000 fc8a 	bl	8001940 <LOGGER_WriteLine>
	}
	output = error * PID_Roll.P + Roll_ITerm + PID_Roll.D * ((error - Roll_Error))/(time * 0.001);
 800102c:	4b2a      	ldr	r3, [pc, #168]	; (80010d8 <PID_CONTROLLERS_Roll+0x148>)
 800102e:	ed93 7a00 	vldr	s14, [r3]
 8001032:	edd7 7a03 	vldr	s15, [r7, #12]
 8001036:	ee27 7a27 	vmul.f32	s14, s14, s15
 800103a:	4b26      	ldr	r3, [pc, #152]	; (80010d4 <PID_CONTROLLERS_Roll+0x144>)
 800103c:	edd3 7a00 	vldr	s15, [r3]
 8001040:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001044:	ee17 0a90 	vmov	r0, s15
 8001048:	f7ff fa9e 	bl	8000588 <__aeabi_f2d>
 800104c:	4604      	mov	r4, r0
 800104e:	460d      	mov	r5, r1
 8001050:	4b21      	ldr	r3, [pc, #132]	; (80010d8 <PID_CONTROLLERS_Roll+0x148>)
 8001052:	ed93 7a02 	vldr	s14, [r3, #8]
 8001056:	4b24      	ldr	r3, [pc, #144]	; (80010e8 <PID_CONTROLLERS_Roll+0x158>)
 8001058:	edd3 7a00 	vldr	s15, [r3]
 800105c:	edd7 6a03 	vldr	s13, [r7, #12]
 8001060:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001064:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001068:	ee17 0a90 	vmov	r0, s15
 800106c:	f7ff fa8c 	bl	8000588 <__aeabi_f2d>
 8001070:	4680      	mov	r8, r0
 8001072:	4689      	mov	r9, r1
 8001074:	6838      	ldr	r0, [r7, #0]
 8001076:	f7ff fa75 	bl	8000564 <__aeabi_i2d>
 800107a:	a313      	add	r3, pc, #76	; (adr r3, 80010c8 <PID_CONTROLLERS_Roll+0x138>)
 800107c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001080:	f7ff fada 	bl	8000638 <__aeabi_dmul>
 8001084:	4602      	mov	r2, r0
 8001086:	460b      	mov	r3, r1
 8001088:	4640      	mov	r0, r8
 800108a:	4649      	mov	r1, r9
 800108c:	f7ff fbfe 	bl	800088c <__aeabi_ddiv>
 8001090:	4602      	mov	r2, r0
 8001092:	460b      	mov	r3, r1
 8001094:	4620      	mov	r0, r4
 8001096:	4629      	mov	r1, r5
 8001098:	f7ff f918 	bl	80002cc <__adddf3>
 800109c:	4602      	mov	r2, r0
 800109e:	460b      	mov	r3, r1
 80010a0:	4610      	mov	r0, r2
 80010a2:	4619      	mov	r1, r3
 80010a4:	f7ff fda0 	bl	8000be8 <__aeabi_d2f>
 80010a8:	4603      	mov	r3, r0
 80010aa:	60bb      	str	r3, [r7, #8]

	return output;
 80010ac:	edd7 7a02 	vldr	s15, [r7, #8]
 80010b0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80010b4:	ee17 3a90 	vmov	r3, s15
 80010b8:	b29b      	uxth	r3, r3
}
 80010ba:	4618      	mov	r0, r3
 80010bc:	3710      	adds	r7, #16
 80010be:	46bd      	mov	sp, r7
 80010c0:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80010c4:	f3af 8000 	nop.w
 80010c8:	d2f1a9fc 	.word	0xd2f1a9fc
 80010cc:	3f50624d 	.word	0x3f50624d
 80010d0:	20000458 	.word	0x20000458
 80010d4:	200003f4 	.word	0x200003f4
 80010d8:	20000000 	.word	0x20000000
 80010dc:	43c80000 	.word	0x43c80000
 80010e0:	43c80000 	.word	0x43c80000
 80010e4:	080140d8 	.word	0x080140d8
 80010e8:	20000400 	.word	0x20000400
 80010ec:	00000000 	.word	0x00000000

080010f0 <PID_CONTROLLERS_Pitch>:

uint16_t PID_CONTROLLERS_Pitch(float setpoint,  int time)
{
 80010f0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80010f4:	b084      	sub	sp, #16
 80010f6:	af00      	add	r7, sp, #0
 80010f8:	ed87 0a01 	vstr	s0, [r7, #4]
 80010fc:	6038      	str	r0, [r7, #0]
	float output;
	float error = setpoint - DATA_ComplementedAngles.X;
 80010fe:	4b4c      	ldr	r3, [pc, #304]	; (8001230 <PID_CONTROLLERS_Pitch+0x140>)
 8001100:	edd3 7a00 	vldr	s15, [r3]
 8001104:	ed97 7a01 	vldr	s14, [r7, #4]
 8001108:	ee77 7a67 	vsub.f32	s15, s14, s15
 800110c:	edc7 7a03 	vstr	s15, [r7, #12]
	Pitch_ITerm += PID_Pitch.I * error * time * 0.001; // discrete integration, convert time to seconds
 8001110:	4b48      	ldr	r3, [pc, #288]	; (8001234 <PID_CONTROLLERS_Pitch+0x144>)
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	4618      	mov	r0, r3
 8001116:	f7ff fa37 	bl	8000588 <__aeabi_f2d>
 800111a:	4604      	mov	r4, r0
 800111c:	460d      	mov	r5, r1
 800111e:	4b46      	ldr	r3, [pc, #280]	; (8001238 <PID_CONTROLLERS_Pitch+0x148>)
 8001120:	ed93 7a01 	vldr	s14, [r3, #4]
 8001124:	edd7 7a03 	vldr	s15, [r7, #12]
 8001128:	ee27 7a27 	vmul.f32	s14, s14, s15
 800112c:	683b      	ldr	r3, [r7, #0]
 800112e:	ee07 3a90 	vmov	s15, r3
 8001132:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001136:	ee67 7a27 	vmul.f32	s15, s14, s15
 800113a:	ee17 0a90 	vmov	r0, s15
 800113e:	f7ff fa23 	bl	8000588 <__aeabi_f2d>
 8001142:	a339      	add	r3, pc, #228	; (adr r3, 8001228 <PID_CONTROLLERS_Pitch+0x138>)
 8001144:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001148:	f7ff fa76 	bl	8000638 <__aeabi_dmul>
 800114c:	4602      	mov	r2, r0
 800114e:	460b      	mov	r3, r1
 8001150:	4620      	mov	r0, r4
 8001152:	4629      	mov	r1, r5
 8001154:	f7ff f8ba 	bl	80002cc <__adddf3>
 8001158:	4602      	mov	r2, r0
 800115a:	460b      	mov	r3, r1
 800115c:	4610      	mov	r0, r2
 800115e:	4619      	mov	r1, r3
 8001160:	f7ff fd42 	bl	8000be8 <__aeabi_d2f>
 8001164:	4603      	mov	r3, r0
 8001166:	4a33      	ldr	r2, [pc, #204]	; (8001234 <PID_CONTROLLERS_Pitch+0x144>)
 8001168:	6013      	str	r3, [r2, #0]

	if(Pitch_ITerm > CONFIG_MaximumITerm) // to avoid integral windup set check for maximum ITerm
 800116a:	4b32      	ldr	r3, [pc, #200]	; (8001234 <PID_CONTROLLERS_Pitch+0x144>)
 800116c:	edd3 7a00 	vldr	s15, [r3]
 8001170:	ed9f 7a32 	vldr	s14, [pc, #200]	; 800123c <PID_CONTROLLERS_Pitch+0x14c>
 8001174:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001178:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800117c:	dd06      	ble.n	800118c <PID_CONTROLLERS_Pitch+0x9c>
	{
		Roll_ITerm = CONFIG_MaximumITerm;
 800117e:	4b30      	ldr	r3, [pc, #192]	; (8001240 <PID_CONTROLLERS_Pitch+0x150>)
 8001180:	4a30      	ldr	r2, [pc, #192]	; (8001244 <PID_CONTROLLERS_Pitch+0x154>)
 8001182:	601a      	str	r2, [r3, #0]
		LOGGER_WriteLine("Roll ITerm exceeded maximum value, set to 400", _INFO);
 8001184:	2101      	movs	r1, #1
 8001186:	4830      	ldr	r0, [pc, #192]	; (8001248 <PID_CONTROLLERS_Pitch+0x158>)
 8001188:	f000 fbda 	bl	8001940 <LOGGER_WriteLine>
	}
	output = error * PID_Pitch.P + Pitch_ITerm + PID_Pitch.D * ((error - Pitch_Error))/(time * 0.001);
 800118c:	4b2a      	ldr	r3, [pc, #168]	; (8001238 <PID_CONTROLLERS_Pitch+0x148>)
 800118e:	ed93 7a00 	vldr	s14, [r3]
 8001192:	edd7 7a03 	vldr	s15, [r7, #12]
 8001196:	ee27 7a27 	vmul.f32	s14, s14, s15
 800119a:	4b26      	ldr	r3, [pc, #152]	; (8001234 <PID_CONTROLLERS_Pitch+0x144>)
 800119c:	edd3 7a00 	vldr	s15, [r3]
 80011a0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80011a4:	ee17 0a90 	vmov	r0, s15
 80011a8:	f7ff f9ee 	bl	8000588 <__aeabi_f2d>
 80011ac:	4604      	mov	r4, r0
 80011ae:	460d      	mov	r5, r1
 80011b0:	4b21      	ldr	r3, [pc, #132]	; (8001238 <PID_CONTROLLERS_Pitch+0x148>)
 80011b2:	ed93 7a02 	vldr	s14, [r3, #8]
 80011b6:	4b25      	ldr	r3, [pc, #148]	; (800124c <PID_CONTROLLERS_Pitch+0x15c>)
 80011b8:	edd3 7a00 	vldr	s15, [r3]
 80011bc:	edd7 6a03 	vldr	s13, [r7, #12]
 80011c0:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80011c4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80011c8:	ee17 0a90 	vmov	r0, s15
 80011cc:	f7ff f9dc 	bl	8000588 <__aeabi_f2d>
 80011d0:	4680      	mov	r8, r0
 80011d2:	4689      	mov	r9, r1
 80011d4:	6838      	ldr	r0, [r7, #0]
 80011d6:	f7ff f9c5 	bl	8000564 <__aeabi_i2d>
 80011da:	a313      	add	r3, pc, #76	; (adr r3, 8001228 <PID_CONTROLLERS_Pitch+0x138>)
 80011dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011e0:	f7ff fa2a 	bl	8000638 <__aeabi_dmul>
 80011e4:	4602      	mov	r2, r0
 80011e6:	460b      	mov	r3, r1
 80011e8:	4640      	mov	r0, r8
 80011ea:	4649      	mov	r1, r9
 80011ec:	f7ff fb4e 	bl	800088c <__aeabi_ddiv>
 80011f0:	4602      	mov	r2, r0
 80011f2:	460b      	mov	r3, r1
 80011f4:	4620      	mov	r0, r4
 80011f6:	4629      	mov	r1, r5
 80011f8:	f7ff f868 	bl	80002cc <__adddf3>
 80011fc:	4602      	mov	r2, r0
 80011fe:	460b      	mov	r3, r1
 8001200:	4610      	mov	r0, r2
 8001202:	4619      	mov	r1, r3
 8001204:	f7ff fcf0 	bl	8000be8 <__aeabi_d2f>
 8001208:	4603      	mov	r3, r0
 800120a:	60bb      	str	r3, [r7, #8]

	return output;
 800120c:	edd7 7a02 	vldr	s15, [r7, #8]
 8001210:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001214:	ee17 3a90 	vmov	r3, s15
 8001218:	b29b      	uxth	r3, r3
}
 800121a:	4618      	mov	r0, r3
 800121c:	3710      	adds	r7, #16
 800121e:	46bd      	mov	sp, r7
 8001220:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001224:	f3af 8000 	nop.w
 8001228:	d2f1a9fc 	.word	0xd2f1a9fc
 800122c:	3f50624d 	.word	0x3f50624d
 8001230:	20000458 	.word	0x20000458
 8001234:	200003f8 	.word	0x200003f8
 8001238:	2000000c 	.word	0x2000000c
 800123c:	43c80000 	.word	0x43c80000
 8001240:	200003f4 	.word	0x200003f4
 8001244:	43c80000 	.word	0x43c80000
 8001248:	080140d8 	.word	0x080140d8
 800124c:	20000404 	.word	0x20000404

08001250 <PID_CONTROLLERS_Yaw>:

uint16_t PID_CONTROLLERS_Yaw(float setpoint, int time)
{
 8001250:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001254:	b084      	sub	sp, #16
 8001256:	af00      	add	r7, sp, #0
 8001258:	ed87 0a01 	vstr	s0, [r7, #4]
 800125c:	6038      	str	r0, [r7, #0]
	float output;
	float error = setpoint - DATA_ComplementedAngles.X;
 800125e:	4b4c      	ldr	r3, [pc, #304]	; (8001390 <PID_CONTROLLERS_Yaw+0x140>)
 8001260:	edd3 7a00 	vldr	s15, [r3]
 8001264:	ed97 7a01 	vldr	s14, [r7, #4]
 8001268:	ee77 7a67 	vsub.f32	s15, s14, s15
 800126c:	edc7 7a03 	vstr	s15, [r7, #12]
	Yaw_ITerm += PID_Yaw.I * error * time * 0.001; // discrete integration, convert time to seconds
 8001270:	4b48      	ldr	r3, [pc, #288]	; (8001394 <PID_CONTROLLERS_Yaw+0x144>)
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	4618      	mov	r0, r3
 8001276:	f7ff f987 	bl	8000588 <__aeabi_f2d>
 800127a:	4604      	mov	r4, r0
 800127c:	460d      	mov	r5, r1
 800127e:	4b46      	ldr	r3, [pc, #280]	; (8001398 <PID_CONTROLLERS_Yaw+0x148>)
 8001280:	ed93 7a01 	vldr	s14, [r3, #4]
 8001284:	edd7 7a03 	vldr	s15, [r7, #12]
 8001288:	ee27 7a27 	vmul.f32	s14, s14, s15
 800128c:	683b      	ldr	r3, [r7, #0]
 800128e:	ee07 3a90 	vmov	s15, r3
 8001292:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001296:	ee67 7a27 	vmul.f32	s15, s14, s15
 800129a:	ee17 0a90 	vmov	r0, s15
 800129e:	f7ff f973 	bl	8000588 <__aeabi_f2d>
 80012a2:	a339      	add	r3, pc, #228	; (adr r3, 8001388 <PID_CONTROLLERS_Yaw+0x138>)
 80012a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012a8:	f7ff f9c6 	bl	8000638 <__aeabi_dmul>
 80012ac:	4602      	mov	r2, r0
 80012ae:	460b      	mov	r3, r1
 80012b0:	4620      	mov	r0, r4
 80012b2:	4629      	mov	r1, r5
 80012b4:	f7ff f80a 	bl	80002cc <__adddf3>
 80012b8:	4602      	mov	r2, r0
 80012ba:	460b      	mov	r3, r1
 80012bc:	4610      	mov	r0, r2
 80012be:	4619      	mov	r1, r3
 80012c0:	f7ff fc92 	bl	8000be8 <__aeabi_d2f>
 80012c4:	4603      	mov	r3, r0
 80012c6:	4a33      	ldr	r2, [pc, #204]	; (8001394 <PID_CONTROLLERS_Yaw+0x144>)
 80012c8:	6013      	str	r3, [r2, #0]

	if(Yaw_ITerm > CONFIG_MaximumITerm) // to avoid integral windup set check for maximum ITerm
 80012ca:	4b32      	ldr	r3, [pc, #200]	; (8001394 <PID_CONTROLLERS_Yaw+0x144>)
 80012cc:	edd3 7a00 	vldr	s15, [r3]
 80012d0:	ed9f 7a32 	vldr	s14, [pc, #200]	; 800139c <PID_CONTROLLERS_Yaw+0x14c>
 80012d4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80012d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012dc:	dd06      	ble.n	80012ec <PID_CONTROLLERS_Yaw+0x9c>
	{
		Yaw_ITerm = CONFIG_MaximumITerm;
 80012de:	4b2d      	ldr	r3, [pc, #180]	; (8001394 <PID_CONTROLLERS_Yaw+0x144>)
 80012e0:	4a2f      	ldr	r2, [pc, #188]	; (80013a0 <PID_CONTROLLERS_Yaw+0x150>)
 80012e2:	601a      	str	r2, [r3, #0]
		LOGGER_WriteLine("Roll ITerm exceeded maximum value, set to 400", _INFO);
 80012e4:	2101      	movs	r1, #1
 80012e6:	482f      	ldr	r0, [pc, #188]	; (80013a4 <PID_CONTROLLERS_Yaw+0x154>)
 80012e8:	f000 fb2a 	bl	8001940 <LOGGER_WriteLine>
	}
	output = error * PID_Yaw.P + Yaw_ITerm + PID_Yaw.D * ((error - Yaw_Error))/(time * 0.001); // in yaw D term will be probably 0, but this part is kept here, existence of D term is defined in PID values configuration
 80012ec:	4b2a      	ldr	r3, [pc, #168]	; (8001398 <PID_CONTROLLERS_Yaw+0x148>)
 80012ee:	ed93 7a00 	vldr	s14, [r3]
 80012f2:	edd7 7a03 	vldr	s15, [r7, #12]
 80012f6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80012fa:	4b26      	ldr	r3, [pc, #152]	; (8001394 <PID_CONTROLLERS_Yaw+0x144>)
 80012fc:	edd3 7a00 	vldr	s15, [r3]
 8001300:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001304:	ee17 0a90 	vmov	r0, s15
 8001308:	f7ff f93e 	bl	8000588 <__aeabi_f2d>
 800130c:	4604      	mov	r4, r0
 800130e:	460d      	mov	r5, r1
 8001310:	4b21      	ldr	r3, [pc, #132]	; (8001398 <PID_CONTROLLERS_Yaw+0x148>)
 8001312:	ed93 7a02 	vldr	s14, [r3, #8]
 8001316:	4b24      	ldr	r3, [pc, #144]	; (80013a8 <PID_CONTROLLERS_Yaw+0x158>)
 8001318:	edd3 7a00 	vldr	s15, [r3]
 800131c:	edd7 6a03 	vldr	s13, [r7, #12]
 8001320:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001324:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001328:	ee17 0a90 	vmov	r0, s15
 800132c:	f7ff f92c 	bl	8000588 <__aeabi_f2d>
 8001330:	4680      	mov	r8, r0
 8001332:	4689      	mov	r9, r1
 8001334:	6838      	ldr	r0, [r7, #0]
 8001336:	f7ff f915 	bl	8000564 <__aeabi_i2d>
 800133a:	a313      	add	r3, pc, #76	; (adr r3, 8001388 <PID_CONTROLLERS_Yaw+0x138>)
 800133c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001340:	f7ff f97a 	bl	8000638 <__aeabi_dmul>
 8001344:	4602      	mov	r2, r0
 8001346:	460b      	mov	r3, r1
 8001348:	4640      	mov	r0, r8
 800134a:	4649      	mov	r1, r9
 800134c:	f7ff fa9e 	bl	800088c <__aeabi_ddiv>
 8001350:	4602      	mov	r2, r0
 8001352:	460b      	mov	r3, r1
 8001354:	4620      	mov	r0, r4
 8001356:	4629      	mov	r1, r5
 8001358:	f7fe ffb8 	bl	80002cc <__adddf3>
 800135c:	4602      	mov	r2, r0
 800135e:	460b      	mov	r3, r1
 8001360:	4610      	mov	r0, r2
 8001362:	4619      	mov	r1, r3
 8001364:	f7ff fc40 	bl	8000be8 <__aeabi_d2f>
 8001368:	4603      	mov	r3, r0
 800136a:	60bb      	str	r3, [r7, #8]

	return output;
 800136c:	edd7 7a02 	vldr	s15, [r7, #8]
 8001370:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001374:	ee17 3a90 	vmov	r3, s15
 8001378:	b29b      	uxth	r3, r3
}
 800137a:	4618      	mov	r0, r3
 800137c:	3710      	adds	r7, #16
 800137e:	46bd      	mov	sp, r7
 8001380:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001384:	f3af 8000 	nop.w
 8001388:	d2f1a9fc 	.word	0xd2f1a9fc
 800138c:	3f50624d 	.word	0x3f50624d
 8001390:	20000458 	.word	0x20000458
 8001394:	200003fc 	.word	0x200003fc
 8001398:	20000018 	.word	0x20000018
 800139c:	43c80000 	.word	0x43c80000
 80013a0:	43c80000 	.word	0x43c80000
 80013a4:	080140d8 	.word	0x080140d8
 80013a8:	20000408 	.word	0x20000408

080013ac <ACCEL_Init>:
#include "iks01a2_motion_sensors.h"
#include "iks01a2_motion_sensors_ex.h"
//#include "XYZ_Data.h"

void ACCEL_Init()
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	af00      	add	r7, sp, #0
	IKS01A2_MOTION_SENSOR_SetOutputDataRate(IKS01A2_LSM6DSL_0, MOTION_ACCELERO, 208);
 80013b0:	ed9f 0a06 	vldr	s0, [pc, #24]	; 80013cc <ACCEL_Init+0x20>
 80013b4:	2102      	movs	r1, #2
 80013b6:	2000      	movs	r0, #0
 80013b8:	f004 fe04 	bl	8005fc4 <IKS01A2_MOTION_SENSOR_SetOutputDataRate>
	IKS01A2_MOTION_SENSOR_SetFullScale(IKS01A2_LSM6DSL_0, MOTION_ACCELERO, 16);
 80013bc:	2210      	movs	r2, #16
 80013be:	2102      	movs	r1, #2
 80013c0:	2000      	movs	r0, #0
 80013c2:	f004 fe45 	bl	8006050 <IKS01A2_MOTION_SENSOR_SetFullScale>
}
 80013c6:	bf00      	nop
 80013c8:	bd80      	pop	{r7, pc}
 80013ca:	bf00      	nop
 80013cc:	43500000 	.word	0x43500000

080013d0 <ACCEL_GetValues>:

void ACCEL_GetValues(XYZ_Data *values)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b086      	sub	sp, #24
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]
	IKS01A2_MOTION_SENSOR_Axes_t data;
	IKS01A2_MOTION_SENSOR_GetAxes(IKS01A2_LSM6DSL_0, MOTION_ACCELERO, &data);
 80013d8:	f107 030c 	add.w	r3, r7, #12
 80013dc:	461a      	mov	r2, r3
 80013de:	2102      	movs	r1, #2
 80013e0:	2000      	movs	r0, #0
 80013e2:	f004 fdab 	bl	8005f3c <IKS01A2_MOTION_SENSOR_GetAxes>

	values->X = (float)data.x/1000.f;
 80013e6:	68fb      	ldr	r3, [r7, #12]
 80013e8:	ee07 3a90 	vmov	s15, r3
 80013ec:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80013f0:	eddf 6a11 	vldr	s13, [pc, #68]	; 8001438 <ACCEL_GetValues+0x68>
 80013f4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	edc3 7a00 	vstr	s15, [r3]
	values->Y = (float)data.y/1000.f;
 80013fe:	693b      	ldr	r3, [r7, #16]
 8001400:	ee07 3a90 	vmov	s15, r3
 8001404:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001408:	eddf 6a0b 	vldr	s13, [pc, #44]	; 8001438 <ACCEL_GetValues+0x68>
 800140c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	edc3 7a01 	vstr	s15, [r3, #4]
	values->Z = (float)data.z/1000.f;
 8001416:	697b      	ldr	r3, [r7, #20]
 8001418:	ee07 3a90 	vmov	s15, r3
 800141c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001420:	eddf 6a05 	vldr	s13, [pc, #20]	; 8001438 <ACCEL_GetValues+0x68>
 8001424:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	edc3 7a02 	vstr	s15, [r3, #8]
}
 800142e:	bf00      	nop
 8001430:	3718      	adds	r7, #24
 8001432:	46bd      	mov	sp, r7
 8001434:	bd80      	pop	{r7, pc}
 8001436:	bf00      	nop
 8001438:	447a0000 	.word	0x447a0000

0800143c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	b082      	sub	sp, #8
 8001440:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001442:	2300      	movs	r3, #0
 8001444:	607b      	str	r3, [r7, #4]
 8001446:	4b18      	ldr	r3, [pc, #96]	; (80014a8 <MX_DMA_Init+0x6c>)
 8001448:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800144a:	4a17      	ldr	r2, [pc, #92]	; (80014a8 <MX_DMA_Init+0x6c>)
 800144c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001450:	6313      	str	r3, [r2, #48]	; 0x30
 8001452:	4b15      	ldr	r3, [pc, #84]	; (80014a8 <MX_DMA_Init+0x6c>)
 8001454:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001456:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800145a:	607b      	str	r3, [r7, #4]
 800145c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 800145e:	2200      	movs	r2, #0
 8001460:	2100      	movs	r1, #0
 8001462:	200c      	movs	r0, #12
 8001464:	f005 f9ad 	bl	80067c2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8001468:	200c      	movs	r0, #12
 800146a:	f005 f9c6 	bl	80067fa <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 800146e:	2200      	movs	r2, #0
 8001470:	2100      	movs	r1, #0
 8001472:	200e      	movs	r0, #14
 8001474:	f005 f9a5 	bl	80067c2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8001478:	200e      	movs	r0, #14
 800147a:	f005 f9be 	bl	80067fa <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 800147e:	2200      	movs	r2, #0
 8001480:	2100      	movs	r1, #0
 8001482:	200f      	movs	r0, #15
 8001484:	f005 f99d 	bl	80067c2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8001488:	200f      	movs	r0, #15
 800148a:	f005 f9b6 	bl	80067fa <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 800148e:	2200      	movs	r2, #0
 8001490:	2100      	movs	r1, #0
 8001492:	2010      	movs	r0, #16
 8001494:	f005 f995 	bl	80067c2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8001498:	2010      	movs	r0, #16
 800149a:	f005 f9ae 	bl	80067fa <HAL_NVIC_EnableIRQ>

}
 800149e:	bf00      	nop
 80014a0:	3708      	adds	r7, #8
 80014a2:	46bd      	mov	sp, r7
 80014a4:	bd80      	pop	{r7, pc}
 80014a6:	bf00      	nop
 80014a8:	40023800 	.word	0x40023800

080014ac <dshot_init>:
static void dshot_enable_dma_request();


/* Functions */
void dshot_init(dshot_type_e dshot_type)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b082      	sub	sp, #8
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	4603      	mov	r3, r0
 80014b4:	71fb      	strb	r3, [r7, #7]
	dshot_set_timer(dshot_type);
 80014b6:	79fb      	ldrb	r3, [r7, #7]
 80014b8:	4618      	mov	r0, r3
 80014ba:	f000 f825 	bl	8001508 <dshot_set_timer>
	dshot_put_tc_callback_function();
 80014be:	f000 f8c5 	bl	800164c <dshot_put_tc_callback_function>
	dshot_start_pwm();
 80014c2:	f000 f8e1 	bl	8001688 <dshot_start_pwm>
}
 80014c6:	bf00      	nop
 80014c8:	3708      	adds	r7, #8
 80014ca:	46bd      	mov	sp, r7
 80014cc:	bd80      	pop	{r7, pc}
	...

080014d0 <dshot_choose_type>:
}


/* Static functions */
static uint32_t dshot_choose_type(dshot_type_e dshot_type)
{
 80014d0:	b480      	push	{r7}
 80014d2:	b083      	sub	sp, #12
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	4603      	mov	r3, r0
 80014d8:	71fb      	strb	r3, [r7, #7]
	switch (dshot_type)
 80014da:	79fb      	ldrb	r3, [r7, #7]
 80014dc:	2b01      	cmp	r3, #1
 80014de:	d003      	beq.n	80014e8 <dshot_choose_type+0x18>
 80014e0:	2b02      	cmp	r3, #2
 80014e2:	d103      	bne.n	80014ec <dshot_choose_type+0x1c>
	{
		case(DSHOT600):
				return DSHOT600_HZ;
 80014e4:	4b05      	ldr	r3, [pc, #20]	; (80014fc <dshot_choose_type+0x2c>)
 80014e6:	e002      	b.n	80014ee <dshot_choose_type+0x1e>

		case(DSHOT300):
				return DSHOT300_HZ;
 80014e8:	4b05      	ldr	r3, [pc, #20]	; (8001500 <dshot_choose_type+0x30>)
 80014ea:	e000      	b.n	80014ee <dshot_choose_type+0x1e>

		default:
		case(DSHOT150):
				return DSHOT150_HZ;
 80014ec:	4b05      	ldr	r3, [pc, #20]	; (8001504 <dshot_choose_type+0x34>)
	}
}
 80014ee:	4618      	mov	r0, r3
 80014f0:	370c      	adds	r7, #12
 80014f2:	46bd      	mov	sp, r7
 80014f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f8:	4770      	bx	lr
 80014fa:	bf00      	nop
 80014fc:	00b71b00 	.word	0x00b71b00
 8001500:	005b8d80 	.word	0x005b8d80
 8001504:	002dc6c0 	.word	0x002dc6c0

08001508 <dshot_set_timer>:

static void dshot_set_timer(dshot_type_e dshot_type)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	ed2d 8b02 	vpush	{d8}
 800150e:	b084      	sub	sp, #16
 8001510:	af00      	add	r7, sp, #0
 8001512:	4603      	mov	r3, r0
 8001514:	71fb      	strb	r3, [r7, #7]
	uint16_t dshot_prescaler;
	uint32_t timer_clock = TIMER_CLOCK; // all timer clock is same as SystemCoreClock in stm32f411
 8001516:	4b27      	ldr	r3, [pc, #156]	; (80015b4 <dshot_set_timer+0xac>)
 8001518:	60fb      	str	r3, [r7, #12]

	// Calculate prescaler by dshot type
	dshot_prescaler = lrintf((float) timer_clock / dshot_choose_type(dshot_type) + 0.01f) - 1;
 800151a:	68fb      	ldr	r3, [r7, #12]
 800151c:	ee07 3a90 	vmov	s15, r3
 8001520:	eeb8 8a67 	vcvt.f32.u32	s16, s15
 8001524:	79fb      	ldrb	r3, [r7, #7]
 8001526:	4618      	mov	r0, r3
 8001528:	f7ff ffd2 	bl	80014d0 <dshot_choose_type>
 800152c:	ee07 0a90 	vmov	s15, r0
 8001530:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001534:	eec8 7a07 	vdiv.f32	s15, s16, s14
 8001538:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 80015b8 <dshot_set_timer+0xb0>
 800153c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001540:	eeb0 0a67 	vmov.f32	s0, s15
 8001544:	f011 fa60 	bl	8012a08 <lrintf>
 8001548:	4603      	mov	r3, r0
 800154a:	b29b      	uxth	r3, r3
 800154c:	3b01      	subs	r3, #1
 800154e:	817b      	strh	r3, [r7, #10]

	// motor1
	__HAL_TIM_SET_PRESCALER(MOTOR_1_TIM, dshot_prescaler);
 8001550:	4b1a      	ldr	r3, [pc, #104]	; (80015bc <dshot_set_timer+0xb4>)
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	897a      	ldrh	r2, [r7, #10]
 8001556:	629a      	str	r2, [r3, #40]	; 0x28
	__HAL_TIM_SET_AUTORELOAD(MOTOR_1_TIM, MOTOR_BITLENGTH);
 8001558:	4b18      	ldr	r3, [pc, #96]	; (80015bc <dshot_set_timer+0xb4>)
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	2214      	movs	r2, #20
 800155e:	62da      	str	r2, [r3, #44]	; 0x2c
 8001560:	4b16      	ldr	r3, [pc, #88]	; (80015bc <dshot_set_timer+0xb4>)
 8001562:	2214      	movs	r2, #20
 8001564:	60da      	str	r2, [r3, #12]

	// motor2
	__HAL_TIM_SET_PRESCALER(MOTOR_2_TIM, dshot_prescaler);
 8001566:	4b16      	ldr	r3, [pc, #88]	; (80015c0 <dshot_set_timer+0xb8>)
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	897a      	ldrh	r2, [r7, #10]
 800156c:	629a      	str	r2, [r3, #40]	; 0x28
	__HAL_TIM_SET_AUTORELOAD(MOTOR_2_TIM, MOTOR_BITLENGTH);
 800156e:	4b14      	ldr	r3, [pc, #80]	; (80015c0 <dshot_set_timer+0xb8>)
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	2214      	movs	r2, #20
 8001574:	62da      	str	r2, [r3, #44]	; 0x2c
 8001576:	4b12      	ldr	r3, [pc, #72]	; (80015c0 <dshot_set_timer+0xb8>)
 8001578:	2214      	movs	r2, #20
 800157a:	60da      	str	r2, [r3, #12]

	// motor3
	__HAL_TIM_SET_PRESCALER(MOTOR_3_TIM, dshot_prescaler);
 800157c:	4b10      	ldr	r3, [pc, #64]	; (80015c0 <dshot_set_timer+0xb8>)
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	897a      	ldrh	r2, [r7, #10]
 8001582:	629a      	str	r2, [r3, #40]	; 0x28
	__HAL_TIM_SET_AUTORELOAD(MOTOR_3_TIM, MOTOR_BITLENGTH);
 8001584:	4b0e      	ldr	r3, [pc, #56]	; (80015c0 <dshot_set_timer+0xb8>)
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	2214      	movs	r2, #20
 800158a:	62da      	str	r2, [r3, #44]	; 0x2c
 800158c:	4b0c      	ldr	r3, [pc, #48]	; (80015c0 <dshot_set_timer+0xb8>)
 800158e:	2214      	movs	r2, #20
 8001590:	60da      	str	r2, [r3, #12]

	// motor4
	__HAL_TIM_SET_PRESCALER(MOTOR_4_TIM, dshot_prescaler);
 8001592:	4b0a      	ldr	r3, [pc, #40]	; (80015bc <dshot_set_timer+0xb4>)
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	897a      	ldrh	r2, [r7, #10]
 8001598:	629a      	str	r2, [r3, #40]	; 0x28
	__HAL_TIM_SET_AUTORELOAD(MOTOR_4_TIM, MOTOR_BITLENGTH);
 800159a:	4b08      	ldr	r3, [pc, #32]	; (80015bc <dshot_set_timer+0xb4>)
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	2214      	movs	r2, #20
 80015a0:	62da      	str	r2, [r3, #44]	; 0x2c
 80015a2:	4b06      	ldr	r3, [pc, #24]	; (80015bc <dshot_set_timer+0xb4>)
 80015a4:	2214      	movs	r2, #20
 80015a6:	60da      	str	r2, [r3, #12]
}
 80015a8:	bf00      	nop
 80015aa:	3710      	adds	r7, #16
 80015ac:	46bd      	mov	sp, r7
 80015ae:	ecbd 8b02 	vpop	{d8}
 80015b2:	bd80      	pop	{r7, pc}
 80015b4:	05f5e100 	.word	0x05f5e100
 80015b8:	3c23d70a 	.word	0x3c23d70a
 80015bc:	20000514 	.word	0x20000514
 80015c0:	200004cc 	.word	0x200004cc

080015c4 <dshot_dma_tc_callback>:

// __HAL_TIM_DISABLE_DMA is needed to eliminate the delay between different dshot signals
// I don't know why :(
static void dshot_dma_tc_callback(DMA_HandleTypeDef *hdma)
{
 80015c4:	b480      	push	{r7}
 80015c6:	b085      	sub	sp, #20
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	6078      	str	r0, [r7, #4]
	TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80015d0:	60fb      	str	r3, [r7, #12]

	if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80015d2:	68fb      	ldr	r3, [r7, #12]
 80015d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015d6:	687a      	ldr	r2, [r7, #4]
 80015d8:	429a      	cmp	r2, r3
 80015da:	d108      	bne.n	80015ee <dshot_dma_tc_callback+0x2a>
	{
		__HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	68da      	ldr	r2, [r3, #12]
 80015e2:	68fb      	ldr	r3, [r7, #12]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80015ea:	60da      	str	r2, [r3, #12]
	}
	else if(hdma == htim->hdma[TIM_DMA_ID_CC4])
	{
		__HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
	}
}
 80015ec:	e028      	b.n	8001640 <dshot_dma_tc_callback+0x7c>
	else if(hdma == htim->hdma[TIM_DMA_ID_CC2])
 80015ee:	68fb      	ldr	r3, [r7, #12]
 80015f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015f2:	687a      	ldr	r2, [r7, #4]
 80015f4:	429a      	cmp	r2, r3
 80015f6:	d108      	bne.n	800160a <dshot_dma_tc_callback+0x46>
		__HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 80015f8:	68fb      	ldr	r3, [r7, #12]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	68da      	ldr	r2, [r3, #12]
 80015fe:	68fb      	ldr	r3, [r7, #12]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001606:	60da      	str	r2, [r3, #12]
}
 8001608:	e01a      	b.n	8001640 <dshot_dma_tc_callback+0x7c>
	else if(hdma == htim->hdma[TIM_DMA_ID_CC3])
 800160a:	68fb      	ldr	r3, [r7, #12]
 800160c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800160e:	687a      	ldr	r2, [r7, #4]
 8001610:	429a      	cmp	r2, r3
 8001612:	d108      	bne.n	8001626 <dshot_dma_tc_callback+0x62>
		__HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	68da      	ldr	r2, [r3, #12]
 800161a:	68fb      	ldr	r3, [r7, #12]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001622:	60da      	str	r2, [r3, #12]
}
 8001624:	e00c      	b.n	8001640 <dshot_dma_tc_callback+0x7c>
	else if(hdma == htim->hdma[TIM_DMA_ID_CC4])
 8001626:	68fb      	ldr	r3, [r7, #12]
 8001628:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800162a:	687a      	ldr	r2, [r7, #4]
 800162c:	429a      	cmp	r2, r3
 800162e:	d107      	bne.n	8001640 <dshot_dma_tc_callback+0x7c>
		__HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	68da      	ldr	r2, [r3, #12]
 8001636:	68fb      	ldr	r3, [r7, #12]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800163e:	60da      	str	r2, [r3, #12]
}
 8001640:	bf00      	nop
 8001642:	3714      	adds	r7, #20
 8001644:	46bd      	mov	sp, r7
 8001646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164a:	4770      	bx	lr

0800164c <dshot_put_tc_callback_function>:

static void dshot_put_tc_callback_function()
{
 800164c:	b480      	push	{r7}
 800164e:	af00      	add	r7, sp, #0
	// TIM_DMA_ID_CCx depends on timer channel
	MOTOR_1_TIM->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = dshot_dma_tc_callback;
 8001650:	4b0a      	ldr	r3, [pc, #40]	; (800167c <dshot_put_tc_callback_function+0x30>)
 8001652:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001654:	4a0a      	ldr	r2, [pc, #40]	; (8001680 <dshot_put_tc_callback_function+0x34>)
 8001656:	63da      	str	r2, [r3, #60]	; 0x3c
	MOTOR_2_TIM->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = dshot_dma_tc_callback;
 8001658:	4b0a      	ldr	r3, [pc, #40]	; (8001684 <dshot_put_tc_callback_function+0x38>)
 800165a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800165c:	4a08      	ldr	r2, [pc, #32]	; (8001680 <dshot_put_tc_callback_function+0x34>)
 800165e:	63da      	str	r2, [r3, #60]	; 0x3c
	MOTOR_3_TIM->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = dshot_dma_tc_callback;
 8001660:	4b08      	ldr	r3, [pc, #32]	; (8001684 <dshot_put_tc_callback_function+0x38>)
 8001662:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001664:	4a06      	ldr	r2, [pc, #24]	; (8001680 <dshot_put_tc_callback_function+0x34>)
 8001666:	63da      	str	r2, [r3, #60]	; 0x3c
	MOTOR_4_TIM->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = dshot_dma_tc_callback;
 8001668:	4b04      	ldr	r3, [pc, #16]	; (800167c <dshot_put_tc_callback_function+0x30>)
 800166a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800166c:	4a04      	ldr	r2, [pc, #16]	; (8001680 <dshot_put_tc_callback_function+0x34>)
 800166e:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8001670:	bf00      	nop
 8001672:	46bd      	mov	sp, r7
 8001674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001678:	4770      	bx	lr
 800167a:	bf00      	nop
 800167c:	20000514 	.word	0x20000514
 8001680:	080015c5 	.word	0x080015c5
 8001684:	200004cc 	.word	0x200004cc

08001688 <dshot_start_pwm>:

static void dshot_start_pwm()
{
 8001688:	b580      	push	{r7, lr}
 800168a:	af00      	add	r7, sp, #0
	// Start the timer channel now.
    // Enabling/disabling DMA request can restart a new cycle without PWM start/stop.
  	HAL_TIM_PWM_Start(MOTOR_1_TIM, MOTOR_1_TIM_CHANNEL);
 800168c:	210c      	movs	r1, #12
 800168e:	4808      	ldr	r0, [pc, #32]	; (80016b0 <dshot_start_pwm+0x28>)
 8001690:	f009 fa8e 	bl	800abb0 <HAL_TIM_PWM_Start>
  	HAL_TIM_PWM_Start(MOTOR_2_TIM, MOTOR_2_TIM_CHANNEL);
 8001694:	2108      	movs	r1, #8
 8001696:	4807      	ldr	r0, [pc, #28]	; (80016b4 <dshot_start_pwm+0x2c>)
 8001698:	f009 fa8a 	bl	800abb0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(MOTOR_3_TIM, MOTOR_3_TIM_CHANNEL);
 800169c:	2100      	movs	r1, #0
 800169e:	4805      	ldr	r0, [pc, #20]	; (80016b4 <dshot_start_pwm+0x2c>)
 80016a0:	f009 fa86 	bl	800abb0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(MOTOR_4_TIM, MOTOR_4_TIM_CHANNEL);
 80016a4:	2104      	movs	r1, #4
 80016a6:	4802      	ldr	r0, [pc, #8]	; (80016b0 <dshot_start_pwm+0x28>)
 80016a8:	f009 fa82 	bl	800abb0 <HAL_TIM_PWM_Start>
}
 80016ac:	bf00      	nop
 80016ae:	bd80      	pop	{r7, pc}
 80016b0:	20000514 	.word	0x20000514
 80016b4:	200004cc 	.word	0x200004cc

080016b8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	b08a      	sub	sp, #40	; 0x28
 80016bc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016be:	f107 0314 	add.w	r3, r7, #20
 80016c2:	2200      	movs	r2, #0
 80016c4:	601a      	str	r2, [r3, #0]
 80016c6:	605a      	str	r2, [r3, #4]
 80016c8:	609a      	str	r2, [r3, #8]
 80016ca:	60da      	str	r2, [r3, #12]
 80016cc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80016ce:	2300      	movs	r3, #0
 80016d0:	613b      	str	r3, [r7, #16]
 80016d2:	4b2d      	ldr	r3, [pc, #180]	; (8001788 <MX_GPIO_Init+0xd0>)
 80016d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016d6:	4a2c      	ldr	r2, [pc, #176]	; (8001788 <MX_GPIO_Init+0xd0>)
 80016d8:	f043 0304 	orr.w	r3, r3, #4
 80016dc:	6313      	str	r3, [r2, #48]	; 0x30
 80016de:	4b2a      	ldr	r3, [pc, #168]	; (8001788 <MX_GPIO_Init+0xd0>)
 80016e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016e2:	f003 0304 	and.w	r3, r3, #4
 80016e6:	613b      	str	r3, [r7, #16]
 80016e8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80016ea:	2300      	movs	r3, #0
 80016ec:	60fb      	str	r3, [r7, #12]
 80016ee:	4b26      	ldr	r3, [pc, #152]	; (8001788 <MX_GPIO_Init+0xd0>)
 80016f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016f2:	4a25      	ldr	r2, [pc, #148]	; (8001788 <MX_GPIO_Init+0xd0>)
 80016f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80016f8:	6313      	str	r3, [r2, #48]	; 0x30
 80016fa:	4b23      	ldr	r3, [pc, #140]	; (8001788 <MX_GPIO_Init+0xd0>)
 80016fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001702:	60fb      	str	r3, [r7, #12]
 8001704:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001706:	2300      	movs	r3, #0
 8001708:	60bb      	str	r3, [r7, #8]
 800170a:	4b1f      	ldr	r3, [pc, #124]	; (8001788 <MX_GPIO_Init+0xd0>)
 800170c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800170e:	4a1e      	ldr	r2, [pc, #120]	; (8001788 <MX_GPIO_Init+0xd0>)
 8001710:	f043 0301 	orr.w	r3, r3, #1
 8001714:	6313      	str	r3, [r2, #48]	; 0x30
 8001716:	4b1c      	ldr	r3, [pc, #112]	; (8001788 <MX_GPIO_Init+0xd0>)
 8001718:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800171a:	f003 0301 	and.w	r3, r3, #1
 800171e:	60bb      	str	r3, [r7, #8]
 8001720:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001722:	2300      	movs	r3, #0
 8001724:	607b      	str	r3, [r7, #4]
 8001726:	4b18      	ldr	r3, [pc, #96]	; (8001788 <MX_GPIO_Init+0xd0>)
 8001728:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800172a:	4a17      	ldr	r2, [pc, #92]	; (8001788 <MX_GPIO_Init+0xd0>)
 800172c:	f043 0302 	orr.w	r3, r3, #2
 8001730:	6313      	str	r3, [r2, #48]	; 0x30
 8001732:	4b15      	ldr	r3, [pc, #84]	; (8001788 <MX_GPIO_Init+0xd0>)
 8001734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001736:	f003 0302 	and.w	r3, r3, #2
 800173a:	607b      	str	r3, [r7, #4]
 800173c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800173e:	2200      	movs	r2, #0
 8001740:	2120      	movs	r1, #32
 8001742:	4812      	ldr	r0, [pc, #72]	; (800178c <MX_GPIO_Init+0xd4>)
 8001744:	f005 fde6 	bl	8007314 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001748:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800174c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800174e:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001752:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001754:	2300      	movs	r3, #0
 8001756:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001758:	f107 0314 	add.w	r3, r7, #20
 800175c:	4619      	mov	r1, r3
 800175e:	480c      	ldr	r0, [pc, #48]	; (8001790 <MX_GPIO_Init+0xd8>)
 8001760:	f005 fb50 	bl	8006e04 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001764:	2320      	movs	r3, #32
 8001766:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001768:	2301      	movs	r3, #1
 800176a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800176c:	2300      	movs	r3, #0
 800176e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001770:	2300      	movs	r3, #0
 8001772:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001774:	f107 0314 	add.w	r3, r7, #20
 8001778:	4619      	mov	r1, r3
 800177a:	4804      	ldr	r0, [pc, #16]	; (800178c <MX_GPIO_Init+0xd4>)
 800177c:	f005 fb42 	bl	8006e04 <HAL_GPIO_Init>

}
 8001780:	bf00      	nop
 8001782:	3728      	adds	r7, #40	; 0x28
 8001784:	46bd      	mov	sp, r7
 8001786:	bd80      	pop	{r7, pc}
 8001788:	40023800 	.word	0x40023800
 800178c:	40020000 	.word	0x40020000
 8001790:	40020800 	.word	0x40020800

08001794 <GYRO_Init>:
#include "iks01a2_motion_sensors_ex.h"

#include "Data.h"

void GYRO_Init()
{
 8001794:	b580      	push	{r7, lr}
 8001796:	af00      	add	r7, sp, #0
	IKS01A2_MOTION_SENSOR_SetOutputDataRate(IKS01A2_LSM6DSL_0, MOTION_GYRO, 1000);
 8001798:	ed9f 0a06 	vldr	s0, [pc, #24]	; 80017b4 <GYRO_Init+0x20>
 800179c:	2101      	movs	r1, #1
 800179e:	2000      	movs	r0, #0
 80017a0:	f004 fc10 	bl	8005fc4 <IKS01A2_MOTION_SENSOR_SetOutputDataRate>
	IKS01A2_MOTION_SENSOR_SetFullScale(IKS01A2_LSM6DSL_0, MOTION_GYRO, 2000);
 80017a4:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80017a8:	2101      	movs	r1, #1
 80017aa:	2000      	movs	r0, #0
 80017ac:	f004 fc50 	bl	8006050 <IKS01A2_MOTION_SENSOR_SetFullScale>
}
 80017b0:	bf00      	nop
 80017b2:	bd80      	pop	{r7, pc}
 80017b4:	447a0000 	.word	0x447a0000

080017b8 <GYRO_GetValues>:

void GYRO_GetValues(XYZ_Data *values)
{
 80017b8:	b5b0      	push	{r4, r5, r7, lr}
 80017ba:	b086      	sub	sp, #24
 80017bc:	af00      	add	r7, sp, #0
 80017be:	6078      	str	r0, [r7, #4]
	IKS01A2_MOTION_SENSOR_Axes_t data;
	IKS01A2_MOTION_SENSOR_GetAxes(IKS01A2_LSM6DSL_0, MOTION_GYRO, &data);
 80017c0:	f107 030c 	add.w	r3, r7, #12
 80017c4:	461a      	mov	r2, r3
 80017c6:	2101      	movs	r1, #1
 80017c8:	2000      	movs	r0, #0
 80017ca:	f004 fbb7 	bl	8005f3c <IKS01A2_MOTION_SENSOR_GetAxes>
	//XYZ_Data result;

	//float x = ((float)data.x * 0.001 * 3.14159/180);

	//radians per second
	values->X = ((float)data.x * 0.001 * 3.14159/180) - DATA_RadiansPerSecond_Offset.X;
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	ee07 3a90 	vmov	s15, r3
 80017d4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80017d8:	ee17 0a90 	vmov	r0, s15
 80017dc:	f7fe fed4 	bl	8000588 <__aeabi_f2d>
 80017e0:	a351      	add	r3, pc, #324	; (adr r3, 8001928 <GYRO_GetValues+0x170>)
 80017e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017e6:	f7fe ff27 	bl	8000638 <__aeabi_dmul>
 80017ea:	4602      	mov	r2, r0
 80017ec:	460b      	mov	r3, r1
 80017ee:	4610      	mov	r0, r2
 80017f0:	4619      	mov	r1, r3
 80017f2:	a34f      	add	r3, pc, #316	; (adr r3, 8001930 <GYRO_GetValues+0x178>)
 80017f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017f8:	f7fe ff1e 	bl	8000638 <__aeabi_dmul>
 80017fc:	4602      	mov	r2, r0
 80017fe:	460b      	mov	r3, r1
 8001800:	4610      	mov	r0, r2
 8001802:	4619      	mov	r1, r3
 8001804:	f04f 0200 	mov.w	r2, #0
 8001808:	4b4b      	ldr	r3, [pc, #300]	; (8001938 <GYRO_GetValues+0x180>)
 800180a:	f7ff f83f 	bl	800088c <__aeabi_ddiv>
 800180e:	4602      	mov	r2, r0
 8001810:	460b      	mov	r3, r1
 8001812:	4614      	mov	r4, r2
 8001814:	461d      	mov	r5, r3
 8001816:	4b49      	ldr	r3, [pc, #292]	; (800193c <GYRO_GetValues+0x184>)
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	4618      	mov	r0, r3
 800181c:	f7fe feb4 	bl	8000588 <__aeabi_f2d>
 8001820:	4602      	mov	r2, r0
 8001822:	460b      	mov	r3, r1
 8001824:	4620      	mov	r0, r4
 8001826:	4629      	mov	r1, r5
 8001828:	f7fe fd4e 	bl	80002c8 <__aeabi_dsub>
 800182c:	4602      	mov	r2, r0
 800182e:	460b      	mov	r3, r1
 8001830:	4610      	mov	r0, r2
 8001832:	4619      	mov	r1, r3
 8001834:	f7ff f9d8 	bl	8000be8 <__aeabi_d2f>
 8001838:	4602      	mov	r2, r0
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	601a      	str	r2, [r3, #0]
	values->Y = ((float)data.y * 0.001 * 3.14159/180) - DATA_RadiansPerSecond_Offset.Y;
 800183e:	693b      	ldr	r3, [r7, #16]
 8001840:	ee07 3a90 	vmov	s15, r3
 8001844:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001848:	ee17 0a90 	vmov	r0, s15
 800184c:	f7fe fe9c 	bl	8000588 <__aeabi_f2d>
 8001850:	a335      	add	r3, pc, #212	; (adr r3, 8001928 <GYRO_GetValues+0x170>)
 8001852:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001856:	f7fe feef 	bl	8000638 <__aeabi_dmul>
 800185a:	4602      	mov	r2, r0
 800185c:	460b      	mov	r3, r1
 800185e:	4610      	mov	r0, r2
 8001860:	4619      	mov	r1, r3
 8001862:	a333      	add	r3, pc, #204	; (adr r3, 8001930 <GYRO_GetValues+0x178>)
 8001864:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001868:	f7fe fee6 	bl	8000638 <__aeabi_dmul>
 800186c:	4602      	mov	r2, r0
 800186e:	460b      	mov	r3, r1
 8001870:	4610      	mov	r0, r2
 8001872:	4619      	mov	r1, r3
 8001874:	f04f 0200 	mov.w	r2, #0
 8001878:	4b2f      	ldr	r3, [pc, #188]	; (8001938 <GYRO_GetValues+0x180>)
 800187a:	f7ff f807 	bl	800088c <__aeabi_ddiv>
 800187e:	4602      	mov	r2, r0
 8001880:	460b      	mov	r3, r1
 8001882:	4614      	mov	r4, r2
 8001884:	461d      	mov	r5, r3
 8001886:	4b2d      	ldr	r3, [pc, #180]	; (800193c <GYRO_GetValues+0x184>)
 8001888:	685b      	ldr	r3, [r3, #4]
 800188a:	4618      	mov	r0, r3
 800188c:	f7fe fe7c 	bl	8000588 <__aeabi_f2d>
 8001890:	4602      	mov	r2, r0
 8001892:	460b      	mov	r3, r1
 8001894:	4620      	mov	r0, r4
 8001896:	4629      	mov	r1, r5
 8001898:	f7fe fd16 	bl	80002c8 <__aeabi_dsub>
 800189c:	4602      	mov	r2, r0
 800189e:	460b      	mov	r3, r1
 80018a0:	4610      	mov	r0, r2
 80018a2:	4619      	mov	r1, r3
 80018a4:	f7ff f9a0 	bl	8000be8 <__aeabi_d2f>
 80018a8:	4602      	mov	r2, r0
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	605a      	str	r2, [r3, #4]
	values->Z = ((float)data.z * 0.001 * 3.14159/180) - DATA_RadiansPerSecond_Offset.Z;
 80018ae:	697b      	ldr	r3, [r7, #20]
 80018b0:	ee07 3a90 	vmov	s15, r3
 80018b4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80018b8:	ee17 0a90 	vmov	r0, s15
 80018bc:	f7fe fe64 	bl	8000588 <__aeabi_f2d>
 80018c0:	a319      	add	r3, pc, #100	; (adr r3, 8001928 <GYRO_GetValues+0x170>)
 80018c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018c6:	f7fe feb7 	bl	8000638 <__aeabi_dmul>
 80018ca:	4602      	mov	r2, r0
 80018cc:	460b      	mov	r3, r1
 80018ce:	4610      	mov	r0, r2
 80018d0:	4619      	mov	r1, r3
 80018d2:	a317      	add	r3, pc, #92	; (adr r3, 8001930 <GYRO_GetValues+0x178>)
 80018d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018d8:	f7fe feae 	bl	8000638 <__aeabi_dmul>
 80018dc:	4602      	mov	r2, r0
 80018de:	460b      	mov	r3, r1
 80018e0:	4610      	mov	r0, r2
 80018e2:	4619      	mov	r1, r3
 80018e4:	f04f 0200 	mov.w	r2, #0
 80018e8:	4b13      	ldr	r3, [pc, #76]	; (8001938 <GYRO_GetValues+0x180>)
 80018ea:	f7fe ffcf 	bl	800088c <__aeabi_ddiv>
 80018ee:	4602      	mov	r2, r0
 80018f0:	460b      	mov	r3, r1
 80018f2:	4614      	mov	r4, r2
 80018f4:	461d      	mov	r5, r3
 80018f6:	4b11      	ldr	r3, [pc, #68]	; (800193c <GYRO_GetValues+0x184>)
 80018f8:	689b      	ldr	r3, [r3, #8]
 80018fa:	4618      	mov	r0, r3
 80018fc:	f7fe fe44 	bl	8000588 <__aeabi_f2d>
 8001900:	4602      	mov	r2, r0
 8001902:	460b      	mov	r3, r1
 8001904:	4620      	mov	r0, r4
 8001906:	4629      	mov	r1, r5
 8001908:	f7fe fcde 	bl	80002c8 <__aeabi_dsub>
 800190c:	4602      	mov	r2, r0
 800190e:	460b      	mov	r3, r1
 8001910:	4610      	mov	r0, r2
 8001912:	4619      	mov	r1, r3
 8001914:	f7ff f968 	bl	8000be8 <__aeabi_d2f>
 8001918:	4602      	mov	r2, r0
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	609a      	str	r2, [r3, #8]
	values->Y = ((float)data.y * 0.001) - DATA_GyroDegreesPerSecond_Offset.Y;
	values->Z = ((float)data.z * 0.001) - DATA_GyroDegreesPerSecond_Offset.Z;*/
	//values->X -= DATA_RadiansPerSecond_Offset.X;

	//return result;
}
 800191e:	bf00      	nop
 8001920:	3718      	adds	r7, #24
 8001922:	46bd      	mov	sp, r7
 8001924:	bdb0      	pop	{r4, r5, r7, pc}
 8001926:	bf00      	nop
 8001928:	d2f1a9fc 	.word	0xd2f1a9fc
 800192c:	3f50624d 	.word	0x3f50624d
 8001930:	f01b866e 	.word	0xf01b866e
 8001934:	400921f9 	.word	0x400921f9
 8001938:	40668000 	.word	0x40668000
 800193c:	2000044c 	.word	0x2000044c

08001940 <LOGGER_WriteLine>:
	/*fresult = f_open(&fil, "log.txt", FA_OPEN_ALWAYS | FA_WRITE | FA_READ);
	f_lseek(&fil, fil.fptr);*/
}

void LOGGER_WriteLine(char* data, enum LogType logType)
{
 8001940:	b580      	push	{r7, lr}
 8001942:	b084      	sub	sp, #16
 8001944:	af00      	add	r7, sp, #0
 8001946:	6078      	str	r0, [r7, #4]
 8001948:	460b      	mov	r3, r1
 800194a:	70fb      	strb	r3, [r7, #3]
	//fresult = f_puts(data, &fil);
	char* result = LOGGER_PrepareString(data, logType);
 800194c:	78fb      	ldrb	r3, [r7, #3]
 800194e:	4619      	mov	r1, r3
 8001950:	6878      	ldr	r0, [r7, #4]
 8001952:	f000 f80d 	bl	8001970 <LOGGER_PrepareString>
 8001956:	60f8      	str	r0, [r7, #12]
	CDC_Transmit_FS(result, strlen(result));
 8001958:	68f8      	ldr	r0, [r7, #12]
 800195a:	f7fe fc59 	bl	8000210 <strlen>
 800195e:	4603      	mov	r3, r0
 8001960:	4619      	mov	r1, r3
 8001962:	68f8      	ldr	r0, [r7, #12]
 8001964:	f00d fa98 	bl	800ee98 <CDC_Transmit_FS>
}
 8001968:	bf00      	nop
 800196a:	3710      	adds	r7, #16
 800196c:	46bd      	mov	sp, r7
 800196e:	bd80      	pop	{r7, pc}

08001970 <LOGGER_PrepareString>:
{
	/*fresult = f_close(&fil);*/
}

char* LOGGER_PrepareString(char* data, enum LogType logType)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	b084      	sub	sp, #16
 8001974:	af00      	add	r7, sp, #0
 8001976:	6078      	str	r0, [r7, #4]
 8001978:	460b      	mov	r3, r1
 800197a:	70fb      	strb	r3, [r7, #3]
	char* startString = malloc(150);
 800197c:	2096      	movs	r0, #150	; 0x96
 800197e:	f00d ff87 	bl	800f890 <malloc>
 8001982:	4603      	mov	r3, r0
 8001984:	60fb      	str	r3, [r7, #12]

	if(startString == NULL)
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	2b00      	cmp	r3, #0
 800198a:	d101      	bne.n	8001990 <LOGGER_PrepareString+0x20>
	{
		return NULL;
 800198c:	2300      	movs	r3, #0
 800198e:	e07e      	b.n	8001a8e <LOGGER_PrepareString+0x11e>
	}

	strcpy(startString, "[LOG]");
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	4a41      	ldr	r2, [pc, #260]	; (8001a98 <LOGGER_PrepareString+0x128>)
 8001994:	6810      	ldr	r0, [r2, #0]
 8001996:	6018      	str	r0, [r3, #0]
 8001998:	8892      	ldrh	r2, [r2, #4]
 800199a:	809a      	strh	r2, [r3, #4]

	switch(logType)
 800199c:	78fb      	ldrb	r3, [r7, #3]
 800199e:	2b04      	cmp	r3, #4
 80019a0:	d856      	bhi.n	8001a50 <LOGGER_PrepareString+0xe0>
 80019a2:	a201      	add	r2, pc, #4	; (adr r2, 80019a8 <LOGGER_PrepareString+0x38>)
 80019a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019a8:	080019bd 	.word	0x080019bd
 80019ac:	080019d9 	.word	0x080019d9
 80019b0:	080019f7 	.word	0x080019f7
 80019b4:	08001a13 	.word	0x08001a13
 80019b8:	08001a33 	.word	0x08001a33
	{
	case _DEBUG:
		strcat(startString, "(DEBUG)");
 80019bc:	68f8      	ldr	r0, [r7, #12]
 80019be:	f7fe fc27 	bl	8000210 <strlen>
 80019c2:	4603      	mov	r3, r0
 80019c4:	461a      	mov	r2, r3
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	4413      	add	r3, r2
 80019ca:	4934      	ldr	r1, [pc, #208]	; (8001a9c <LOGGER_PrepareString+0x12c>)
 80019cc:	461a      	mov	r2, r3
 80019ce:	460b      	mov	r3, r1
 80019d0:	cb03      	ldmia	r3!, {r0, r1}
 80019d2:	6010      	str	r0, [r2, #0]
 80019d4:	6051      	str	r1, [r2, #4]
		break;
 80019d6:	e049      	b.n	8001a6c <LOGGER_PrepareString+0xfc>
	case _INFO:
		strcat(startString, "(INFO)");
 80019d8:	68f8      	ldr	r0, [r7, #12]
 80019da:	f7fe fc19 	bl	8000210 <strlen>
 80019de:	4603      	mov	r3, r0
 80019e0:	461a      	mov	r2, r3
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	4413      	add	r3, r2
 80019e6:	4a2e      	ldr	r2, [pc, #184]	; (8001aa0 <LOGGER_PrepareString+0x130>)
 80019e8:	6810      	ldr	r0, [r2, #0]
 80019ea:	6018      	str	r0, [r3, #0]
 80019ec:	8891      	ldrh	r1, [r2, #4]
 80019ee:	7992      	ldrb	r2, [r2, #6]
 80019f0:	8099      	strh	r1, [r3, #4]
 80019f2:	719a      	strb	r2, [r3, #6]
		break;
 80019f4:	e03a      	b.n	8001a6c <LOGGER_PrepareString+0xfc>
	case _ERROR:
		strcat(startString, "(ERROR)");
 80019f6:	68f8      	ldr	r0, [r7, #12]
 80019f8:	f7fe fc0a 	bl	8000210 <strlen>
 80019fc:	4603      	mov	r3, r0
 80019fe:	461a      	mov	r2, r3
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	4413      	add	r3, r2
 8001a04:	4927      	ldr	r1, [pc, #156]	; (8001aa4 <LOGGER_PrepareString+0x134>)
 8001a06:	461a      	mov	r2, r3
 8001a08:	460b      	mov	r3, r1
 8001a0a:	cb03      	ldmia	r3!, {r0, r1}
 8001a0c:	6010      	str	r0, [r2, #0]
 8001a0e:	6051      	str	r1, [r2, #4]
		break;
 8001a10:	e02c      	b.n	8001a6c <LOGGER_PrepareString+0xfc>
	case _WARNING:
		strcat(startString, "(WARNING)");
 8001a12:	68f8      	ldr	r0, [r7, #12]
 8001a14:	f7fe fbfc 	bl	8000210 <strlen>
 8001a18:	4603      	mov	r3, r0
 8001a1a:	461a      	mov	r2, r3
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	4413      	add	r3, r2
 8001a20:	4921      	ldr	r1, [pc, #132]	; (8001aa8 <LOGGER_PrepareString+0x138>)
 8001a22:	461a      	mov	r2, r3
 8001a24:	460b      	mov	r3, r1
 8001a26:	cb03      	ldmia	r3!, {r0, r1}
 8001a28:	6010      	str	r0, [r2, #0]
 8001a2a:	6051      	str	r1, [r2, #4]
 8001a2c:	881b      	ldrh	r3, [r3, #0]
 8001a2e:	8113      	strh	r3, [r2, #8]
		break;
 8001a30:	e01c      	b.n	8001a6c <LOGGER_PrepareString+0xfc>
	case _DATA:
			strcat(startString, "(DATA)");
 8001a32:	68f8      	ldr	r0, [r7, #12]
 8001a34:	f7fe fbec 	bl	8000210 <strlen>
 8001a38:	4603      	mov	r3, r0
 8001a3a:	461a      	mov	r2, r3
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	4413      	add	r3, r2
 8001a40:	4a1a      	ldr	r2, [pc, #104]	; (8001aac <LOGGER_PrepareString+0x13c>)
 8001a42:	6810      	ldr	r0, [r2, #0]
 8001a44:	6018      	str	r0, [r3, #0]
 8001a46:	8891      	ldrh	r1, [r2, #4]
 8001a48:	7992      	ldrb	r2, [r2, #6]
 8001a4a:	8099      	strh	r1, [r3, #4]
 8001a4c:	719a      	strb	r2, [r3, #6]
			break;
 8001a4e:	e00d      	b.n	8001a6c <LOGGER_PrepareString+0xfc>
	default:
		strcat(startString, "(\?\?\?\?)");
 8001a50:	68f8      	ldr	r0, [r7, #12]
 8001a52:	f7fe fbdd 	bl	8000210 <strlen>
 8001a56:	4603      	mov	r3, r0
 8001a58:	461a      	mov	r2, r3
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	4413      	add	r3, r2
 8001a5e:	4a14      	ldr	r2, [pc, #80]	; (8001ab0 <LOGGER_PrepareString+0x140>)
 8001a60:	6810      	ldr	r0, [r2, #0]
 8001a62:	6018      	str	r0, [r3, #0]
 8001a64:	8891      	ldrh	r1, [r2, #4]
 8001a66:	7992      	ldrb	r2, [r2, #6]
 8001a68:	8099      	strh	r1, [r3, #4]
 8001a6a:	719a      	strb	r2, [r3, #6]
	}

	strcat(startString, data);
 8001a6c:	6879      	ldr	r1, [r7, #4]
 8001a6e:	68f8      	ldr	r0, [r7, #12]
 8001a70:	f00e fca0 	bl	80103b4 <strcat>
	strcat(startString, "\n\r");
 8001a74:	68f8      	ldr	r0, [r7, #12]
 8001a76:	f7fe fbcb 	bl	8000210 <strlen>
 8001a7a:	4603      	mov	r3, r0
 8001a7c:	461a      	mov	r2, r3
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	4413      	add	r3, r2
 8001a82:	4a0c      	ldr	r2, [pc, #48]	; (8001ab4 <LOGGER_PrepareString+0x144>)
 8001a84:	8811      	ldrh	r1, [r2, #0]
 8001a86:	7892      	ldrb	r2, [r2, #2]
 8001a88:	8019      	strh	r1, [r3, #0]
 8001a8a:	709a      	strb	r2, [r3, #2]

	return startString;
 8001a8c:	68fb      	ldr	r3, [r7, #12]
}
 8001a8e:	4618      	mov	r0, r3
 8001a90:	3710      	adds	r7, #16
 8001a92:	46bd      	mov	sp, r7
 8001a94:	bd80      	pop	{r7, pc}
 8001a96:	bf00      	nop
 8001a98:	08014108 	.word	0x08014108
 8001a9c:	08014110 	.word	0x08014110
 8001aa0:	08014118 	.word	0x08014118
 8001aa4:	08014120 	.word	0x08014120
 8001aa8:	08014128 	.word	0x08014128
 8001aac:	08014134 	.word	0x08014134
 8001ab0:	0801413c 	.word	0x0801413c
 8001ab4:	08014144 	.word	0x08014144

08001ab8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001ab8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001abc:	b0be      	sub	sp, #248	; 0xf8
 8001abe:	af16      	add	r7, sp, #88	; 0x58
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001ac0:	f004 fd0e 	bl	80064e0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001ac4:	f000 f8c6 	bl	8001c54 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001ac8:	f7ff fdf6 	bl	80016b8 <MX_GPIO_Init>
  MX_DMA_Init();
 8001acc:	f7ff fcb6 	bl	800143c <MX_DMA_Init>
  MX_TIM2_Init();
 8001ad0:	f000 ffdc 	bl	8002a8c <MX_TIM2_Init>
  MX_TIM5_Init();
 8001ad4:	f001 f83c 	bl	8002b50 <MX_TIM5_Init>
  MX_USB_DEVICE_Init();
 8001ad8:	f00d f920 	bl	800ed1c <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */

  dshot_init(DSHOT600);
 8001adc:	2002      	movs	r0, #2
 8001ade:	f7ff fce5 	bl	80014ac <dshot_init>

  float setpoints[4] = {1, 1, 1, 1};
 8001ae2:	4b55      	ldr	r3, [pc, #340]	; (8001c38 <main+0x180>)
 8001ae4:	f107 048c 	add.w	r4, r7, #140	; 0x8c
 8001ae8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001aea:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

  int i = 0;
 8001aee:	2300      	movs	r3, #0
 8001af0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

	for(i = 0; i < 15; ++i)
 8001af4:	2300      	movs	r3, #0
 8001af6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8001afa:	e00c      	b.n	8001b16 <main+0x5e>
		  {
			  LOGGER_WriteLine("Starting", _INFO);
 8001afc:	2101      	movs	r1, #1
 8001afe:	484f      	ldr	r0, [pc, #316]	; (8001c3c <main+0x184>)
 8001b00:	f7ff ff1e 	bl	8001940 <LOGGER_WriteLine>
			  HAL_Delay(400);
 8001b04:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8001b08:	f004 fd5c 	bl	80065c4 <HAL_Delay>
	for(i = 0; i < 15; ++i)
 8001b0c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001b10:	3301      	adds	r3, #1
 8001b12:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8001b16:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001b1a:	2b0e      	cmp	r3, #14
 8001b1c:	ddee      	ble.n	8001afc <main+0x44>
		  }

    initSensors();
 8001b1e:	f000 f90b 	bl	8001d38 <initSensors>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	//dshot_write(my_motor_value);
	HAL_Delay(50);
 8001b22:	2032      	movs	r0, #50	; 0x32
 8001b24:	f004 fd4e 	bl	80065c4 <HAL_Delay>

	MOTION_SENSORS_UpdateData();
 8001b28:	f000 f98e 	bl	8001e48 <MOTION_SENSORS_UpdateData>
	MOTOR_MIXER_RunPID(setpoints, 1);
 8001b2c:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8001b30:	2101      	movs	r1, #1
 8001b32:	4618      	mov	r0, r3
 8001b34:	f000 fcaa 	bl	800248c <MOTOR_MIXER_RunPID>

	//sprintf(gyroString, "GYRO: %.2f, %.2f, %.2f ACCEL: %.2f, %.2f, %.2f ANGLES: %.2f, %.2f, %.2f ANGLES: %.2f, %.2f, %.2f\n\r", DATA_RadiansPerSecond.X, DATA_RadiansPerSecond.Y, DATA_RadiansPerSecond.Z, DATA_GForce.X, DATA_GForce.Y, DATA_GForce.Z, DATA_GyroAnglesInWorldFrame.X, DATA_GyroAnglesInWorldFrame.Y, DATA_GyroAnglesInWorldFrame.Z,  DATA_ComplementedAngles.X, DATA_ComplementedAngles.Y, DATA_ComplementedAngles.Z);
	sprintf(gyroString, "%.2f, %.2f, %.2f %.2f, %.2f, %.2f %.2f, %.2f, %.2f %.2f, %.2f, %.2f\n\r", DATA_RadiansPerSecond.X, DATA_RadiansPerSecond.Y, DATA_RadiansPerSecond.Z, DATA_GForce.X, DATA_GForce.Y, DATA_GForce.Z, DATA_GyroAnglesInWorldFrame.X, DATA_GyroAnglesInWorldFrame.Y, DATA_GyroAnglesInWorldFrame.Z,  DATA_ComplementedAngles.X, DATA_ComplementedAngles.Y, DATA_ComplementedAngles.Z);
 8001b38:	4b41      	ldr	r3, [pc, #260]	; (8001c40 <main+0x188>)
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	4618      	mov	r0, r3
 8001b3e:	f7fe fd23 	bl	8000588 <__aeabi_f2d>
 8001b42:	e9c7 010e 	strd	r0, r1, [r7, #56]	; 0x38
 8001b46:	4b3e      	ldr	r3, [pc, #248]	; (8001c40 <main+0x188>)
 8001b48:	685b      	ldr	r3, [r3, #4]
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	f7fe fd1c 	bl	8000588 <__aeabi_f2d>
 8001b50:	e9c7 010c 	strd	r0, r1, [r7, #48]	; 0x30
 8001b54:	4b3a      	ldr	r3, [pc, #232]	; (8001c40 <main+0x188>)
 8001b56:	689b      	ldr	r3, [r3, #8]
 8001b58:	4618      	mov	r0, r3
 8001b5a:	f7fe fd15 	bl	8000588 <__aeabi_f2d>
 8001b5e:	e9c7 010a 	strd	r0, r1, [r7, #40]	; 0x28
 8001b62:	4b38      	ldr	r3, [pc, #224]	; (8001c44 <main+0x18c>)
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	4618      	mov	r0, r3
 8001b68:	f7fe fd0e 	bl	8000588 <__aeabi_f2d>
 8001b6c:	e9c7 0108 	strd	r0, r1, [r7, #32]
 8001b70:	4b34      	ldr	r3, [pc, #208]	; (8001c44 <main+0x18c>)
 8001b72:	685b      	ldr	r3, [r3, #4]
 8001b74:	4618      	mov	r0, r3
 8001b76:	f7fe fd07 	bl	8000588 <__aeabi_f2d>
 8001b7a:	e9c7 0106 	strd	r0, r1, [r7, #24]
 8001b7e:	4b31      	ldr	r3, [pc, #196]	; (8001c44 <main+0x18c>)
 8001b80:	689b      	ldr	r3, [r3, #8]
 8001b82:	4618      	mov	r0, r3
 8001b84:	f7fe fd00 	bl	8000588 <__aeabi_f2d>
 8001b88:	e9c7 0104 	strd	r0, r1, [r7, #16]
 8001b8c:	4b2e      	ldr	r3, [pc, #184]	; (8001c48 <main+0x190>)
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	4618      	mov	r0, r3
 8001b92:	f7fe fcf9 	bl	8000588 <__aeabi_f2d>
 8001b96:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8001b9a:	4b2b      	ldr	r3, [pc, #172]	; (8001c48 <main+0x190>)
 8001b9c:	685b      	ldr	r3, [r3, #4]
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	f7fe fcf2 	bl	8000588 <__aeabi_f2d>
 8001ba4:	e9c7 0100 	strd	r0, r1, [r7]
 8001ba8:	4b27      	ldr	r3, [pc, #156]	; (8001c48 <main+0x190>)
 8001baa:	689b      	ldr	r3, [r3, #8]
 8001bac:	4618      	mov	r0, r3
 8001bae:	f7fe fceb 	bl	8000588 <__aeabi_f2d>
 8001bb2:	4682      	mov	sl, r0
 8001bb4:	468b      	mov	fp, r1
 8001bb6:	4b25      	ldr	r3, [pc, #148]	; (8001c4c <main+0x194>)
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	4618      	mov	r0, r3
 8001bbc:	f7fe fce4 	bl	8000588 <__aeabi_f2d>
 8001bc0:	4680      	mov	r8, r0
 8001bc2:	4689      	mov	r9, r1
 8001bc4:	4b21      	ldr	r3, [pc, #132]	; (8001c4c <main+0x194>)
 8001bc6:	685b      	ldr	r3, [r3, #4]
 8001bc8:	4618      	mov	r0, r3
 8001bca:	f7fe fcdd 	bl	8000588 <__aeabi_f2d>
 8001bce:	4604      	mov	r4, r0
 8001bd0:	460d      	mov	r5, r1
 8001bd2:	4b1e      	ldr	r3, [pc, #120]	; (8001c4c <main+0x194>)
 8001bd4:	689b      	ldr	r3, [r3, #8]
 8001bd6:	4618      	mov	r0, r3
 8001bd8:	f7fe fcd6 	bl	8000588 <__aeabi_f2d>
 8001bdc:	4602      	mov	r2, r0
 8001bde:	460b      	mov	r3, r1
 8001be0:	f107 0040 	add.w	r0, r7, #64	; 0x40
 8001be4:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 8001be8:	e9cd 4512 	strd	r4, r5, [sp, #72]	; 0x48
 8001bec:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 8001bf0:	e9cd ab0e 	strd	sl, fp, [sp, #56]	; 0x38
 8001bf4:	ed97 7b00 	vldr	d7, [r7]
 8001bf8:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 8001bfc:	ed97 7b02 	vldr	d7, [r7, #8]
 8001c00:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8001c04:	ed97 7b04 	vldr	d7, [r7, #16]
 8001c08:	ed8d 7b08 	vstr	d7, [sp, #32]
 8001c0c:	ed97 7b06 	vldr	d7, [r7, #24]
 8001c10:	ed8d 7b06 	vstr	d7, [sp, #24]
 8001c14:	ed97 7b08 	vldr	d7, [r7, #32]
 8001c18:	ed8d 7b04 	vstr	d7, [sp, #16]
 8001c1c:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 8001c20:	ed8d 7b02 	vstr	d7, [sp, #8]
 8001c24:	ed97 7b0c 	vldr	d7, [r7, #48]	; 0x30
 8001c28:	ed8d 7b00 	vstr	d7, [sp]
 8001c2c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8001c30:	4907      	ldr	r1, [pc, #28]	; (8001c50 <main+0x198>)
 8001c32:	f00e fb9f 	bl	8010374 <siprintf>
	HAL_Delay(50);
 8001c36:	e774      	b.n	8001b22 <main+0x6a>
 8001c38:	0801419c 	.word	0x0801419c
 8001c3c:	08014148 	.word	0x08014148
 8001c40:	20000410 	.word	0x20000410
 8001c44:	20000434 	.word	0x20000434
 8001c48:	20000428 	.word	0x20000428
 8001c4c:	20000458 	.word	0x20000458
 8001c50:	08014154 	.word	0x08014154

08001c54 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001c54:	b580      	push	{r7, lr}
 8001c56:	b094      	sub	sp, #80	; 0x50
 8001c58:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001c5a:	f107 031c 	add.w	r3, r7, #28
 8001c5e:	2234      	movs	r2, #52	; 0x34
 8001c60:	2100      	movs	r1, #0
 8001c62:	4618      	mov	r0, r3
 8001c64:	f00d fe24 	bl	800f8b0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001c68:	f107 0308 	add.w	r3, r7, #8
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	601a      	str	r2, [r3, #0]
 8001c70:	605a      	str	r2, [r3, #4]
 8001c72:	609a      	str	r2, [r3, #8]
 8001c74:	60da      	str	r2, [r3, #12]
 8001c76:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c78:	2300      	movs	r3, #0
 8001c7a:	607b      	str	r3, [r7, #4]
 8001c7c:	4b29      	ldr	r3, [pc, #164]	; (8001d24 <SystemClock_Config+0xd0>)
 8001c7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c80:	4a28      	ldr	r2, [pc, #160]	; (8001d24 <SystemClock_Config+0xd0>)
 8001c82:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c86:	6413      	str	r3, [r2, #64]	; 0x40
 8001c88:	4b26      	ldr	r3, [pc, #152]	; (8001d24 <SystemClock_Config+0xd0>)
 8001c8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c8c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c90:	607b      	str	r3, [r7, #4]
 8001c92:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001c94:	2300      	movs	r3, #0
 8001c96:	603b      	str	r3, [r7, #0]
 8001c98:	4b23      	ldr	r3, [pc, #140]	; (8001d28 <SystemClock_Config+0xd4>)
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001ca0:	4a21      	ldr	r2, [pc, #132]	; (8001d28 <SystemClock_Config+0xd4>)
 8001ca2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ca6:	6013      	str	r3, [r2, #0]
 8001ca8:	4b1f      	ldr	r3, [pc, #124]	; (8001d28 <SystemClock_Config+0xd4>)
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001cb0:	603b      	str	r3, [r7, #0]
 8001cb2:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001cb4:	2301      	movs	r3, #1
 8001cb6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001cb8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001cbc:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001cbe:	2302      	movs	r3, #2
 8001cc0:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001cc2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001cc6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001cc8:	2304      	movs	r3, #4
 8001cca:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 72;
 8001ccc:	2348      	movs	r3, #72	; 0x48
 8001cce:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001cd0:	2302      	movs	r3, #2
 8001cd2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8001cd4:	2303      	movs	r3, #3
 8001cd6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001cd8:	2302      	movs	r3, #2
 8001cda:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001cdc:	f107 031c 	add.w	r3, r7, #28
 8001ce0:	4618      	mov	r0, r3
 8001ce2:	f008 fc77 	bl	800a5d4 <HAL_RCC_OscConfig>
 8001ce6:	4603      	mov	r3, r0
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d001      	beq.n	8001cf0 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8001cec:	f000 f81e 	bl	8001d2c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001cf0:	230f      	movs	r3, #15
 8001cf2:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001cf4:	2302      	movs	r3, #2
 8001cf6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001cf8:	2300      	movs	r3, #0
 8001cfa:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001cfc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001d00:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001d02:	2300      	movs	r3, #0
 8001d04:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001d06:	f107 0308 	add.w	r3, r7, #8
 8001d0a:	2102      	movs	r1, #2
 8001d0c:	4618      	mov	r0, r3
 8001d0e:	f007 fe01 	bl	8009914 <HAL_RCC_ClockConfig>
 8001d12:	4603      	mov	r3, r0
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d001      	beq.n	8001d1c <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8001d18:	f000 f808 	bl	8001d2c <Error_Handler>

  /*if (HAL_SYSTICK_Config(SystemCoreClock / 1000000) != HAL_OK)
	{
	  Error_Handler();
	}*/
}
 8001d1c:	bf00      	nop
 8001d1e:	3750      	adds	r7, #80	; 0x50
 8001d20:	46bd      	mov	sp, r7
 8001d22:	bd80      	pop	{r7, pc}
 8001d24:	40023800 	.word	0x40023800
 8001d28:	40007000 	.word	0x40007000

08001d2c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001d2c:	b480      	push	{r7}
 8001d2e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001d30:	b672      	cpsid	i
}
 8001d32:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001d34:	e7fe      	b.n	8001d34 <Error_Handler+0x8>
	...

08001d38 <initSensors>:
XYZ_Data DATA_ComplementedAngles;
XYZ_Data DATA_Angles_Offset;
XYZ_Data DATA_GForce_Offset;

int initSensors()
{
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	b082      	sub	sp, #8
 8001d3c:	af00      	add	r7, sp, #0
#if defined(USE_GYRO) && defined(USE_ACCEL)

	if(IKS01A2_MOTION_SENSOR_Init(IKS01A2_LSM6DSL_0, MOTION_GYRO | MOTION_ACCELERO) == HAL_OK)
 8001d3e:	2103      	movs	r1, #3
 8001d40:	2000      	movs	r0, #0
 8001d42:	f003 ffff 	bl	8005d44 <IKS01A2_MOTION_SENSOR_Init>
 8001d46:	4603      	mov	r3, r0
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d11c      	bne.n	8001d86 <initSensors+0x4e>
	{
		GYRO_Init();
 8001d4c:	f7ff fd22 	bl	8001794 <GYRO_Init>
		ACCEL_Init();
 8001d50:	f7ff fb2c 	bl	80013ac <ACCEL_Init>
		LOGGER_WriteLine("Gyro and Accel initiated", _INFO);
 8001d54:	2101      	movs	r1, #1
 8001d56:	4829      	ldr	r0, [pc, #164]	; (8001dfc <initSensors+0xc4>)
 8001d58:	f7ff fdf2 	bl	8001940 <LOGGER_WriteLine>
#else
	LOGGER_WriteLine("Couldn't find gyro and accel file", _ERROR);

#endif

	uint8_t i = 0;
 8001d5c:	2300      	movs	r3, #0
 8001d5e:	71fb      	strb	r3, [r7, #7]

	//Set start time to current micros
	updateTime = systick_micros;
 8001d60:	4b27      	ldr	r3, [pc, #156]	; (8001e00 <initSensors+0xc8>)
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	4a27      	ldr	r2, [pc, #156]	; (8001e04 <initSensors+0xcc>)
 8001d66:	6013      	str	r3, [r2, #0]


	//Initialize gyro readings data
	DATA_RadiansPerSecond_Offset.X = 0;
 8001d68:	4b27      	ldr	r3, [pc, #156]	; (8001e08 <initSensors+0xd0>)
 8001d6a:	f04f 0200 	mov.w	r2, #0
 8001d6e:	601a      	str	r2, [r3, #0]
	DATA_RadiansPerSecond_Offset.Y = 0;
 8001d70:	4b25      	ldr	r3, [pc, #148]	; (8001e08 <initSensors+0xd0>)
 8001d72:	f04f 0200 	mov.w	r2, #0
 8001d76:	605a      	str	r2, [r3, #4]
	DATA_RadiansPerSecond_Offset.Z = 0;
 8001d78:	4b23      	ldr	r3, [pc, #140]	; (8001e08 <initSensors+0xd0>)
 8001d7a:	f04f 0200 	mov.w	r2, #0
 8001d7e:	609a      	str	r2, [r3, #8]

	//Run data reading few times, to get read of first noisy data
	for(i = 0; i < 15; i ++)
 8001d80:	2300      	movs	r3, #0
 8001d82:	71fb      	strb	r3, [r7, #7]
 8001d84:	e00e      	b.n	8001da4 <initSensors+0x6c>
		LOGGER_WriteLine("Gyro and Accel initialization failed", _ERROR);
 8001d86:	2102      	movs	r1, #2
 8001d88:	4820      	ldr	r0, [pc, #128]	; (8001e0c <initSensors+0xd4>)
 8001d8a:	f7ff fdd9 	bl	8001940 <LOGGER_WriteLine>
		return -1;
 8001d8e:	f04f 33ff 	mov.w	r3, #4294967295
 8001d92:	e02f      	b.n	8001df4 <initSensors+0xbc>
	{
		MOTION_SENSORS_UpdateData();
 8001d94:	f000 f858 	bl	8001e48 <MOTION_SENSORS_UpdateData>
		HAL_Delay(40);
 8001d98:	2028      	movs	r0, #40	; 0x28
 8001d9a:	f004 fc13 	bl	80065c4 <HAL_Delay>
	for(i = 0; i < 15; i ++)
 8001d9e:	79fb      	ldrb	r3, [r7, #7]
 8001da0:	3301      	adds	r3, #1
 8001da2:	71fb      	strb	r3, [r7, #7]
 8001da4:	79fb      	ldrb	r3, [r7, #7]
 8001da6:	2b0e      	cmp	r3, #14
 8001da8:	d9f4      	bls.n	8001d94 <initSensors+0x5c>
	}

	//Set start gyro values as offsets
	DATA_RadiansPerSecond_Offset.X = DATA_RadiansPerSecond.X;
 8001daa:	4b19      	ldr	r3, [pc, #100]	; (8001e10 <initSensors+0xd8>)
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	4a16      	ldr	r2, [pc, #88]	; (8001e08 <initSensors+0xd0>)
 8001db0:	6013      	str	r3, [r2, #0]
	DATA_RadiansPerSecond_Offset.Y = DATA_RadiansPerSecond.Y;
 8001db2:	4b17      	ldr	r3, [pc, #92]	; (8001e10 <initSensors+0xd8>)
 8001db4:	685b      	ldr	r3, [r3, #4]
 8001db6:	4a14      	ldr	r2, [pc, #80]	; (8001e08 <initSensors+0xd0>)
 8001db8:	6053      	str	r3, [r2, #4]
	DATA_RadiansPerSecond_Offset.Z = DATA_RadiansPerSecond.Z;
 8001dba:	4b15      	ldr	r3, [pc, #84]	; (8001e10 <initSensors+0xd8>)
 8001dbc:	689b      	ldr	r3, [r3, #8]
 8001dbe:	4a12      	ldr	r2, [pc, #72]	; (8001e08 <initSensors+0xd0>)
 8001dc0:	6093      	str	r3, [r2, #8]

	//Initialize Euler angles
	DATA_GyroAnglesInWorldFrame.X = 0; //phi
 8001dc2:	4b14      	ldr	r3, [pc, #80]	; (8001e14 <initSensors+0xdc>)
 8001dc4:	f04f 0200 	mov.w	r2, #0
 8001dc8:	601a      	str	r2, [r3, #0]
	DATA_GyroAnglesInWorldFrame.Y = 0; //theta
 8001dca:	4b12      	ldr	r3, [pc, #72]	; (8001e14 <initSensors+0xdc>)
 8001dcc:	f04f 0200 	mov.w	r2, #0
 8001dd0:	605a      	str	r2, [r3, #4]
	DATA_GyroAnglesInWorldFrame.Z = 0; //psi
 8001dd2:	4b10      	ldr	r3, [pc, #64]	; (8001e14 <initSensors+0xdc>)
 8001dd4:	f04f 0200 	mov.w	r2, #0
 8001dd8:	609a      	str	r2, [r3, #8]

	//Initialize complemented angles values
	DATA_ComplementedAngles.X = 0;
 8001dda:	4b0f      	ldr	r3, [pc, #60]	; (8001e18 <initSensors+0xe0>)
 8001ddc:	f04f 0200 	mov.w	r2, #0
 8001de0:	601a      	str	r2, [r3, #0]
	DATA_ComplementedAngles.Y = 0;
 8001de2:	4b0d      	ldr	r3, [pc, #52]	; (8001e18 <initSensors+0xe0>)
 8001de4:	f04f 0200 	mov.w	r2, #0
 8001de8:	605a      	str	r2, [r3, #4]
	DATA_ComplementedAngles.Z = 0;
 8001dea:	4b0b      	ldr	r3, [pc, #44]	; (8001e18 <initSensors+0xe0>)
 8001dec:	f04f 0200 	mov.w	r2, #0
 8001df0:	609a      	str	r2, [r3, #8]

	return 0;
 8001df2:	2300      	movs	r3, #0
}
 8001df4:	4618      	mov	r0, r3
 8001df6:	3708      	adds	r7, #8
 8001df8:	46bd      	mov	sp, r7
 8001dfa:	bd80      	pop	{r7, pc}
 8001dfc:	080141ac 	.word	0x080141ac
 8001e00:	2000046c 	.word	0x2000046c
 8001e04:	2000040c 	.word	0x2000040c
 8001e08:	2000044c 	.word	0x2000044c
 8001e0c:	080141c8 	.word	0x080141c8
 8001e10:	20000410 	.word	0x20000410
 8001e14:	20000428 	.word	0x20000428
 8001e18:	20000458 	.word	0x20000458

08001e1c <MOTION_SENSORS_GetGyro>:
/*
Description:
Gets gyro data and sets it's values to the given pointer
*/
void MOTION_SENSORS_GetGyro(XYZ_Data *values)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	b082      	sub	sp, #8
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]
	GYRO_GetValues(values);
 8001e24:	6878      	ldr	r0, [r7, #4]
 8001e26:	f7ff fcc7 	bl	80017b8 <GYRO_GetValues>
}
 8001e2a:	bf00      	nop
 8001e2c:	3708      	adds	r7, #8
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	bd80      	pop	{r7, pc}

08001e32 <MOTION_SENSORS_GetAccel>:
/*
Description:
Gets accel data and sets it's values to the given pointer
*/
void MOTION_SENSORS_GetAccel(XYZ_Data *values)
{
 8001e32:	b580      	push	{r7, lr}
 8001e34:	b082      	sub	sp, #8
 8001e36:	af00      	add	r7, sp, #0
 8001e38:	6078      	str	r0, [r7, #4]
	ACCEL_GetValues(values);
 8001e3a:	6878      	ldr	r0, [r7, #4]
 8001e3c:	f7ff fac8 	bl	80013d0 <ACCEL_GetValues>
}
 8001e40:	bf00      	nop
 8001e42:	3708      	adds	r7, #8
 8001e44:	46bd      	mov	sp, r7
 8001e46:	bd80      	pop	{r7, pc}

08001e48 <MOTION_SENSORS_UpdateData>:
/*
Description:
Updates data values stored in Data.h (DATA_RadiansPerSecond, DATA_GyroRadiansPerSecondInWorldFrame, DATA_GForce, DATA_AccelAngles, DATA_ComplementedAngles)
*/
void MOTION_SENSORS_UpdateData()
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	af00      	add	r7, sp, #0
	MOTION_SENSORS_GetGyro(&DATA_RadiansPerSecond);
 8001e4c:	480f      	ldr	r0, [pc, #60]	; (8001e8c <MOTION_SENSORS_UpdateData+0x44>)
 8001e4e:	f7ff ffe5 	bl	8001e1c <MOTION_SENSORS_GetGyro>
	ConvertGyroDataToWorldFrame();
 8001e52:	f000 f9d7 	bl	8002204 <ConvertGyroDataToWorldFrame>
	MOTION_SENSORS_GetAccel(&DATA_GForce);
 8001e56:	480e      	ldr	r0, [pc, #56]	; (8001e90 <MOTION_SENSORS_UpdateData+0x48>)
 8001e58:	f7ff ffeb 	bl	8001e32 <MOTION_SENSORS_GetAccel>
	MOTION_SENSORS_CalculateAccelAngles();
 8001e5c:	f000 f8ac 	bl	8001fb8 <MOTION_SENSORS_CalculateAccelAngles>
	MOTION_SENSORS_Integrate(systick_micros - updateTime);
 8001e60:	4b0c      	ldr	r3, [pc, #48]	; (8001e94 <MOTION_SENSORS_UpdateData+0x4c>)
 8001e62:	681a      	ldr	r2, [r3, #0]
 8001e64:	4b0c      	ldr	r3, [pc, #48]	; (8001e98 <MOTION_SENSORS_UpdateData+0x50>)
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	1ad3      	subs	r3, r2, r3
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	f000 f818 	bl	8001ea0 <MOTION_SENSORS_Integrate>
	ApplyComplementaryFilter(systick_micros - updateTime);
 8001e70:	4b08      	ldr	r3, [pc, #32]	; (8001e94 <MOTION_SENSORS_UpdateData+0x4c>)
 8001e72:	681a      	ldr	r2, [r3, #0]
 8001e74:	4b08      	ldr	r3, [pc, #32]	; (8001e98 <MOTION_SENSORS_UpdateData+0x50>)
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	1ad3      	subs	r3, r2, r3
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	f000 fa54 	bl	8002328 <ApplyComplementaryFilter>
	updateTime = systick_micros;
 8001e80:	4b04      	ldr	r3, [pc, #16]	; (8001e94 <MOTION_SENSORS_UpdateData+0x4c>)
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	4a04      	ldr	r2, [pc, #16]	; (8001e98 <MOTION_SENSORS_UpdateData+0x50>)
 8001e86:	6013      	str	r3, [r2, #0]
}
 8001e88:	bf00      	nop
 8001e8a:	bd80      	pop	{r7, pc}
 8001e8c:	20000410 	.word	0x20000410
 8001e90:	20000434 	.word	0x20000434
 8001e94:	2000046c 	.word	0x2000046c
 8001e98:	2000040c 	.word	0x2000040c
 8001e9c:	00000000 	.word	0x00000000

08001ea0 <MOTION_SENSORS_Integrate>:
/*
Description:
Integrates gyro to data to create angles from gyro readings
*/
void MOTION_SENSORS_Integrate(uint32_t time)
{
 8001ea0:	b5b0      	push	{r4, r5, r7, lr}
 8001ea2:	b082      	sub	sp, #8
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	6078      	str	r0, [r7, #4]
	DATA_GyroAnglesInWorldFrame.X += DATA_GyroRadiansPerSecondInWorldFrame.X * time * 0.001;
 8001ea8:	4b41      	ldr	r3, [pc, #260]	; (8001fb0 <MOTION_SENSORS_Integrate+0x110>)
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	4618      	mov	r0, r3
 8001eae:	f7fe fb6b 	bl	8000588 <__aeabi_f2d>
 8001eb2:	4604      	mov	r4, r0
 8001eb4:	460d      	mov	r5, r1
 8001eb6:	4b3f      	ldr	r3, [pc, #252]	; (8001fb4 <MOTION_SENSORS_Integrate+0x114>)
 8001eb8:	ed93 7a00 	vldr	s14, [r3]
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	ee07 3a90 	vmov	s15, r3
 8001ec2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001ec6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001eca:	ee17 0a90 	vmov	r0, s15
 8001ece:	f7fe fb5b 	bl	8000588 <__aeabi_f2d>
 8001ed2:	a335      	add	r3, pc, #212	; (adr r3, 8001fa8 <MOTION_SENSORS_Integrate+0x108>)
 8001ed4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ed8:	f7fe fbae 	bl	8000638 <__aeabi_dmul>
 8001edc:	4602      	mov	r2, r0
 8001ede:	460b      	mov	r3, r1
 8001ee0:	4620      	mov	r0, r4
 8001ee2:	4629      	mov	r1, r5
 8001ee4:	f7fe f9f2 	bl	80002cc <__adddf3>
 8001ee8:	4602      	mov	r2, r0
 8001eea:	460b      	mov	r3, r1
 8001eec:	4610      	mov	r0, r2
 8001eee:	4619      	mov	r1, r3
 8001ef0:	f7fe fe7a 	bl	8000be8 <__aeabi_d2f>
 8001ef4:	4603      	mov	r3, r0
 8001ef6:	4a2e      	ldr	r2, [pc, #184]	; (8001fb0 <MOTION_SENSORS_Integrate+0x110>)
 8001ef8:	6013      	str	r3, [r2, #0]
	DATA_GyroAnglesInWorldFrame.Y += DATA_GyroRadiansPerSecondInWorldFrame.Y * time * 0.001;
 8001efa:	4b2d      	ldr	r3, [pc, #180]	; (8001fb0 <MOTION_SENSORS_Integrate+0x110>)
 8001efc:	685b      	ldr	r3, [r3, #4]
 8001efe:	4618      	mov	r0, r3
 8001f00:	f7fe fb42 	bl	8000588 <__aeabi_f2d>
 8001f04:	4604      	mov	r4, r0
 8001f06:	460d      	mov	r5, r1
 8001f08:	4b2a      	ldr	r3, [pc, #168]	; (8001fb4 <MOTION_SENSORS_Integrate+0x114>)
 8001f0a:	ed93 7a01 	vldr	s14, [r3, #4]
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	ee07 3a90 	vmov	s15, r3
 8001f14:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001f18:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f1c:	ee17 0a90 	vmov	r0, s15
 8001f20:	f7fe fb32 	bl	8000588 <__aeabi_f2d>
 8001f24:	a320      	add	r3, pc, #128	; (adr r3, 8001fa8 <MOTION_SENSORS_Integrate+0x108>)
 8001f26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f2a:	f7fe fb85 	bl	8000638 <__aeabi_dmul>
 8001f2e:	4602      	mov	r2, r0
 8001f30:	460b      	mov	r3, r1
 8001f32:	4620      	mov	r0, r4
 8001f34:	4629      	mov	r1, r5
 8001f36:	f7fe f9c9 	bl	80002cc <__adddf3>
 8001f3a:	4602      	mov	r2, r0
 8001f3c:	460b      	mov	r3, r1
 8001f3e:	4610      	mov	r0, r2
 8001f40:	4619      	mov	r1, r3
 8001f42:	f7fe fe51 	bl	8000be8 <__aeabi_d2f>
 8001f46:	4603      	mov	r3, r0
 8001f48:	4a19      	ldr	r2, [pc, #100]	; (8001fb0 <MOTION_SENSORS_Integrate+0x110>)
 8001f4a:	6053      	str	r3, [r2, #4]
	DATA_GyroAnglesInWorldFrame.Z += DATA_GyroRadiansPerSecondInWorldFrame.Z * time * 0.001;
 8001f4c:	4b18      	ldr	r3, [pc, #96]	; (8001fb0 <MOTION_SENSORS_Integrate+0x110>)
 8001f4e:	689b      	ldr	r3, [r3, #8]
 8001f50:	4618      	mov	r0, r3
 8001f52:	f7fe fb19 	bl	8000588 <__aeabi_f2d>
 8001f56:	4604      	mov	r4, r0
 8001f58:	460d      	mov	r5, r1
 8001f5a:	4b16      	ldr	r3, [pc, #88]	; (8001fb4 <MOTION_SENSORS_Integrate+0x114>)
 8001f5c:	ed93 7a02 	vldr	s14, [r3, #8]
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	ee07 3a90 	vmov	s15, r3
 8001f66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001f6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f6e:	ee17 0a90 	vmov	r0, s15
 8001f72:	f7fe fb09 	bl	8000588 <__aeabi_f2d>
 8001f76:	a30c      	add	r3, pc, #48	; (adr r3, 8001fa8 <MOTION_SENSORS_Integrate+0x108>)
 8001f78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f7c:	f7fe fb5c 	bl	8000638 <__aeabi_dmul>
 8001f80:	4602      	mov	r2, r0
 8001f82:	460b      	mov	r3, r1
 8001f84:	4620      	mov	r0, r4
 8001f86:	4629      	mov	r1, r5
 8001f88:	f7fe f9a0 	bl	80002cc <__adddf3>
 8001f8c:	4602      	mov	r2, r0
 8001f8e:	460b      	mov	r3, r1
 8001f90:	4610      	mov	r0, r2
 8001f92:	4619      	mov	r1, r3
 8001f94:	f7fe fe28 	bl	8000be8 <__aeabi_d2f>
 8001f98:	4603      	mov	r3, r0
 8001f9a:	4a05      	ldr	r2, [pc, #20]	; (8001fb0 <MOTION_SENSORS_Integrate+0x110>)
 8001f9c:	6093      	str	r3, [r2, #8]
}
 8001f9e:	bf00      	nop
 8001fa0:	3708      	adds	r7, #8
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	bdb0      	pop	{r4, r5, r7, pc}
 8001fa6:	bf00      	nop
 8001fa8:	d2f1a9fc 	.word	0xd2f1a9fc
 8001fac:	3f50624d 	.word	0x3f50624d
 8001fb0:	20000428 	.word	0x20000428
 8001fb4:	2000041c 	.word	0x2000041c

08001fb8 <MOTION_SENSORS_CalculateAccelAngles>:
/*
Description:
Calculates and sets angles from accelerometer readings (only X and Y)
*/
void MOTION_SENSORS_CalculateAccelAngles()
{
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	af00      	add	r7, sp, #0
	DATA_AccelAngles.X = atanf(DATA_GForce.Y / DATA_GForce.Z);
 8001fbc:	4b11      	ldr	r3, [pc, #68]	; (8002004 <MOTION_SENSORS_CalculateAccelAngles+0x4c>)
 8001fbe:	ed93 7a01 	vldr	s14, [r3, #4]
 8001fc2:	4b10      	ldr	r3, [pc, #64]	; (8002004 <MOTION_SENSORS_CalculateAccelAngles+0x4c>)
 8001fc4:	edd3 7a02 	vldr	s15, [r3, #8]
 8001fc8:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001fcc:	eeb0 0a66 	vmov.f32	s0, s13
 8001fd0:	f010 fc3e 	bl	8012850 <atanf>
 8001fd4:	eef0 7a40 	vmov.f32	s15, s0
 8001fd8:	4b0b      	ldr	r3, [pc, #44]	; (8002008 <MOTION_SENSORS_CalculateAccelAngles+0x50>)
 8001fda:	edc3 7a00 	vstr	s15, [r3]
	DATA_AccelAngles.Y = asinf(DATA_GForce.X / 9.81f);
 8001fde:	4b09      	ldr	r3, [pc, #36]	; (8002004 <MOTION_SENSORS_CalculateAccelAngles+0x4c>)
 8001fe0:	edd3 7a00 	vldr	s15, [r3]
 8001fe4:	eddf 6a09 	vldr	s13, [pc, #36]	; 800200c <MOTION_SENSORS_CalculateAccelAngles+0x54>
 8001fe8:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001fec:	eeb0 0a47 	vmov.f32	s0, s14
 8001ff0:	f010 fd4a 	bl	8012a88 <asinf>
 8001ff4:	eef0 7a40 	vmov.f32	s15, s0
 8001ff8:	4b03      	ldr	r3, [pc, #12]	; (8002008 <MOTION_SENSORS_CalculateAccelAngles+0x50>)
 8001ffa:	edc3 7a01 	vstr	s15, [r3, #4]
}
 8001ffe:	bf00      	nop
 8002000:	bd80      	pop	{r7, pc}
 8002002:	bf00      	nop
 8002004:	20000434 	.word	0x20000434
 8002008:	20000440 	.word	0x20000440
 800200c:	411cf5c3 	.word	0x411cf5c3

08002010 <GetRotationalMatrix>:

Returns:
pointer to 2D matrix containing rotational matrix
*/
float ** GetRotationalMatrix(float theta, float phi)
{
 8002010:	b5b0      	push	{r4, r5, r7, lr}
 8002012:	b084      	sub	sp, #16
 8002014:	af00      	add	r7, sp, #0
 8002016:	ed87 0a01 	vstr	s0, [r7, #4]
 800201a:	edc7 0a00 	vstr	s1, [r7]
	[0,        cos(phi),             -sin(phi)      ]

	[0,  sin(phi)/cos(theta),   cos(phi)/cos(theta) ]
	*/

	float ** RotationalMatrix = (float**)malloc(3 * sizeof(float*));
 800201e:	200c      	movs	r0, #12
 8002020:	f00d fc36 	bl	800f890 <malloc>
 8002024:	4603      	mov	r3, r0
 8002026:	60bb      	str	r3, [r7, #8]
	for (int i = 0; i < 3; i++) {
 8002028:	2300      	movs	r3, #0
 800202a:	60fb      	str	r3, [r7, #12]
 800202c:	e00b      	b.n	8002046 <GetRotationalMatrix+0x36>
		RotationalMatrix[i] = (float*)malloc(3 * sizeof(float));
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	009b      	lsls	r3, r3, #2
 8002032:	68ba      	ldr	r2, [r7, #8]
 8002034:	18d4      	adds	r4, r2, r3
 8002036:	200c      	movs	r0, #12
 8002038:	f00d fc2a 	bl	800f890 <malloc>
 800203c:	4603      	mov	r3, r0
 800203e:	6023      	str	r3, [r4, #0]
	for (int i = 0; i < 3; i++) {
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	3301      	adds	r3, #1
 8002044:	60fb      	str	r3, [r7, #12]
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	2b02      	cmp	r3, #2
 800204a:	ddf0      	ble.n	800202e <GetRotationalMatrix+0x1e>
	}

	RotationalMatrix[0][0] = 1;
 800204c:	68bb      	ldr	r3, [r7, #8]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8002054:	601a      	str	r2, [r3, #0]
	RotationalMatrix[0][1] = tan(theta) * sin(phi);
 8002056:	6878      	ldr	r0, [r7, #4]
 8002058:	f7fe fa96 	bl	8000588 <__aeabi_f2d>
 800205c:	4602      	mov	r2, r0
 800205e:	460b      	mov	r3, r1
 8002060:	ec43 2b10 	vmov	d0, r2, r3
 8002064:	f010 fbc0 	bl	80127e8 <tan>
 8002068:	ec55 4b10 	vmov	r4, r5, d0
 800206c:	6838      	ldr	r0, [r7, #0]
 800206e:	f7fe fa8b 	bl	8000588 <__aeabi_f2d>
 8002072:	4602      	mov	r2, r0
 8002074:	460b      	mov	r3, r1
 8002076:	ec43 2b10 	vmov	d0, r2, r3
 800207a:	f010 fb5d 	bl	8012738 <sin>
 800207e:	ec53 2b10 	vmov	r2, r3, d0
 8002082:	4620      	mov	r0, r4
 8002084:	4629      	mov	r1, r5
 8002086:	f7fe fad7 	bl	8000638 <__aeabi_dmul>
 800208a:	4602      	mov	r2, r0
 800208c:	460b      	mov	r3, r1
 800208e:	4610      	mov	r0, r2
 8002090:	4619      	mov	r1, r3
 8002092:	68bb      	ldr	r3, [r7, #8]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	1d1c      	adds	r4, r3, #4
 8002098:	f7fe fda6 	bl	8000be8 <__aeabi_d2f>
 800209c:	4603      	mov	r3, r0
 800209e:	6023      	str	r3, [r4, #0]
	RotationalMatrix[0][2] = tan(theta) * cos(phi);
 80020a0:	6878      	ldr	r0, [r7, #4]
 80020a2:	f7fe fa71 	bl	8000588 <__aeabi_f2d>
 80020a6:	4602      	mov	r2, r0
 80020a8:	460b      	mov	r3, r1
 80020aa:	ec43 2b10 	vmov	d0, r2, r3
 80020ae:	f010 fb9b 	bl	80127e8 <tan>
 80020b2:	ec55 4b10 	vmov	r4, r5, d0
 80020b6:	6838      	ldr	r0, [r7, #0]
 80020b8:	f7fe fa66 	bl	8000588 <__aeabi_f2d>
 80020bc:	4602      	mov	r2, r0
 80020be:	460b      	mov	r3, r1
 80020c0:	ec43 2b10 	vmov	d0, r2, r3
 80020c4:	f010 fae4 	bl	8012690 <cos>
 80020c8:	ec53 2b10 	vmov	r2, r3, d0
 80020cc:	4620      	mov	r0, r4
 80020ce:	4629      	mov	r1, r5
 80020d0:	f7fe fab2 	bl	8000638 <__aeabi_dmul>
 80020d4:	4602      	mov	r2, r0
 80020d6:	460b      	mov	r3, r1
 80020d8:	4610      	mov	r0, r2
 80020da:	4619      	mov	r1, r3
 80020dc:	68bb      	ldr	r3, [r7, #8]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	f103 0408 	add.w	r4, r3, #8
 80020e4:	f7fe fd80 	bl	8000be8 <__aeabi_d2f>
 80020e8:	4603      	mov	r3, r0
 80020ea:	6023      	str	r3, [r4, #0]
	RotationalMatrix[1][0] = 0;
 80020ec:	68bb      	ldr	r3, [r7, #8]
 80020ee:	3304      	adds	r3, #4
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	f04f 0200 	mov.w	r2, #0
 80020f6:	601a      	str	r2, [r3, #0]
	RotationalMatrix[1][1] = cos(phi);
 80020f8:	6838      	ldr	r0, [r7, #0]
 80020fa:	f7fe fa45 	bl	8000588 <__aeabi_f2d>
 80020fe:	4602      	mov	r2, r0
 8002100:	460b      	mov	r3, r1
 8002102:	ec43 2b10 	vmov	d0, r2, r3
 8002106:	f010 fac3 	bl	8012690 <cos>
 800210a:	ec51 0b10 	vmov	r0, r1, d0
 800210e:	68bb      	ldr	r3, [r7, #8]
 8002110:	3304      	adds	r3, #4
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	1d1c      	adds	r4, r3, #4
 8002116:	f7fe fd67 	bl	8000be8 <__aeabi_d2f>
 800211a:	4603      	mov	r3, r0
 800211c:	6023      	str	r3, [r4, #0]
	RotationalMatrix[1][2] = -sin(phi);
 800211e:	6838      	ldr	r0, [r7, #0]
 8002120:	f7fe fa32 	bl	8000588 <__aeabi_f2d>
 8002124:	4602      	mov	r2, r0
 8002126:	460b      	mov	r3, r1
 8002128:	ec43 2b10 	vmov	d0, r2, r3
 800212c:	f010 fb04 	bl	8012738 <sin>
 8002130:	ec53 2b10 	vmov	r2, r3, d0
 8002134:	4610      	mov	r0, r2
 8002136:	4619      	mov	r1, r3
 8002138:	f7fe fd56 	bl	8000be8 <__aeabi_d2f>
 800213c:	4602      	mov	r2, r0
 800213e:	68bb      	ldr	r3, [r7, #8]
 8002140:	3304      	adds	r3, #4
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	3308      	adds	r3, #8
 8002146:	ee07 2a90 	vmov	s15, r2
 800214a:	eef1 7a67 	vneg.f32	s15, s15
 800214e:	edc3 7a00 	vstr	s15, [r3]
	RotationalMatrix[2][0] = 0;
 8002152:	68bb      	ldr	r3, [r7, #8]
 8002154:	3308      	adds	r3, #8
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	f04f 0200 	mov.w	r2, #0
 800215c:	601a      	str	r2, [r3, #0]
	RotationalMatrix[2][1] = sin(phi)/cos(theta);
 800215e:	6838      	ldr	r0, [r7, #0]
 8002160:	f7fe fa12 	bl	8000588 <__aeabi_f2d>
 8002164:	4602      	mov	r2, r0
 8002166:	460b      	mov	r3, r1
 8002168:	ec43 2b10 	vmov	d0, r2, r3
 800216c:	f010 fae4 	bl	8012738 <sin>
 8002170:	ec55 4b10 	vmov	r4, r5, d0
 8002174:	6878      	ldr	r0, [r7, #4]
 8002176:	f7fe fa07 	bl	8000588 <__aeabi_f2d>
 800217a:	4602      	mov	r2, r0
 800217c:	460b      	mov	r3, r1
 800217e:	ec43 2b10 	vmov	d0, r2, r3
 8002182:	f010 fa85 	bl	8012690 <cos>
 8002186:	ec53 2b10 	vmov	r2, r3, d0
 800218a:	4620      	mov	r0, r4
 800218c:	4629      	mov	r1, r5
 800218e:	f7fe fb7d 	bl	800088c <__aeabi_ddiv>
 8002192:	4602      	mov	r2, r0
 8002194:	460b      	mov	r3, r1
 8002196:	4610      	mov	r0, r2
 8002198:	4619      	mov	r1, r3
 800219a:	68bb      	ldr	r3, [r7, #8]
 800219c:	3308      	adds	r3, #8
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	1d1c      	adds	r4, r3, #4
 80021a2:	f7fe fd21 	bl	8000be8 <__aeabi_d2f>
 80021a6:	4603      	mov	r3, r0
 80021a8:	6023      	str	r3, [r4, #0]
	RotationalMatrix[2][2] = cos(phi)/cos(theta);
 80021aa:	6838      	ldr	r0, [r7, #0]
 80021ac:	f7fe f9ec 	bl	8000588 <__aeabi_f2d>
 80021b0:	4602      	mov	r2, r0
 80021b2:	460b      	mov	r3, r1
 80021b4:	ec43 2b10 	vmov	d0, r2, r3
 80021b8:	f010 fa6a 	bl	8012690 <cos>
 80021bc:	ec55 4b10 	vmov	r4, r5, d0
 80021c0:	6878      	ldr	r0, [r7, #4]
 80021c2:	f7fe f9e1 	bl	8000588 <__aeabi_f2d>
 80021c6:	4602      	mov	r2, r0
 80021c8:	460b      	mov	r3, r1
 80021ca:	ec43 2b10 	vmov	d0, r2, r3
 80021ce:	f010 fa5f 	bl	8012690 <cos>
 80021d2:	ec53 2b10 	vmov	r2, r3, d0
 80021d6:	4620      	mov	r0, r4
 80021d8:	4629      	mov	r1, r5
 80021da:	f7fe fb57 	bl	800088c <__aeabi_ddiv>
 80021de:	4602      	mov	r2, r0
 80021e0:	460b      	mov	r3, r1
 80021e2:	4610      	mov	r0, r2
 80021e4:	4619      	mov	r1, r3
 80021e6:	68bb      	ldr	r3, [r7, #8]
 80021e8:	3308      	adds	r3, #8
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	f103 0408 	add.w	r4, r3, #8
 80021f0:	f7fe fcfa 	bl	8000be8 <__aeabi_d2f>
 80021f4:	4603      	mov	r3, r0
 80021f6:	6023      	str	r3, [r4, #0]

	return RotationalMatrix;
 80021f8:	68bb      	ldr	r3, [r7, #8]
}
 80021fa:	4618      	mov	r0, r3
 80021fc:	3710      	adds	r7, #16
 80021fe:	46bd      	mov	sp, r7
 8002200:	bdb0      	pop	{r4, r5, r7, pc}
	...

08002204 <ConvertGyroDataToWorldFrame>:
/*
Description:
Converts gyro readings to world fraem using rotatinal matrix and updates the values
*/
void ConvertGyroDataToWorldFrame()
{
 8002204:	b580      	push	{r7, lr}
 8002206:	b082      	sub	sp, #8
 8002208:	af00      	add	r7, sp, #0
	float ** rotationalMatrix = GetRotationalMatrix(DATA_GyroAnglesInWorldFrame.Y, DATA_GyroAnglesInWorldFrame.X);
 800220a:	4b43      	ldr	r3, [pc, #268]	; (8002318 <ConvertGyroDataToWorldFrame+0x114>)
 800220c:	edd3 7a01 	vldr	s15, [r3, #4]
 8002210:	4b41      	ldr	r3, [pc, #260]	; (8002318 <ConvertGyroDataToWorldFrame+0x114>)
 8002212:	ed93 7a00 	vldr	s14, [r3]
 8002216:	eef0 0a47 	vmov.f32	s1, s14
 800221a:	eeb0 0a67 	vmov.f32	s0, s15
 800221e:	f7ff fef7 	bl	8002010 <GetRotationalMatrix>
 8002222:	6078      	str	r0, [r7, #4]

	DATA_GyroRadiansPerSecondInWorldFrame.X = rotationalMatrix[0][0] * DATA_RadiansPerSecond.X + rotationalMatrix[0][1] * DATA_RadiansPerSecond.Y + rotationalMatrix[0][2] * DATA_RadiansPerSecond.Z;
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	ed93 7a00 	vldr	s14, [r3]
 800222c:	4b3b      	ldr	r3, [pc, #236]	; (800231c <ConvertGyroDataToWorldFrame+0x118>)
 800222e:	edd3 7a00 	vldr	s15, [r3]
 8002232:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	3304      	adds	r3, #4
 800223c:	edd3 6a00 	vldr	s13, [r3]
 8002240:	4b36      	ldr	r3, [pc, #216]	; (800231c <ConvertGyroDataToWorldFrame+0x118>)
 8002242:	edd3 7a01 	vldr	s15, [r3, #4]
 8002246:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800224a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	3308      	adds	r3, #8
 8002254:	edd3 6a00 	vldr	s13, [r3]
 8002258:	4b30      	ldr	r3, [pc, #192]	; (800231c <ConvertGyroDataToWorldFrame+0x118>)
 800225a:	edd3 7a02 	vldr	s15, [r3, #8]
 800225e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002262:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002266:	4b2e      	ldr	r3, [pc, #184]	; (8002320 <ConvertGyroDataToWorldFrame+0x11c>)
 8002268:	edc3 7a00 	vstr	s15, [r3]
	DATA_GyroRadiansPerSecondInWorldFrame.Y = rotationalMatrix[1][0] * DATA_RadiansPerSecond.X + rotationalMatrix[1][1] * DATA_RadiansPerSecond.Y + rotationalMatrix[1][2] * DATA_RadiansPerSecond.Z;
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	3304      	adds	r3, #4
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	ed93 7a00 	vldr	s14, [r3]
 8002276:	4b29      	ldr	r3, [pc, #164]	; (800231c <ConvertGyroDataToWorldFrame+0x118>)
 8002278:	edd3 7a00 	vldr	s15, [r3]
 800227c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	3304      	adds	r3, #4
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	3304      	adds	r3, #4
 8002288:	edd3 6a00 	vldr	s13, [r3]
 800228c:	4b23      	ldr	r3, [pc, #140]	; (800231c <ConvertGyroDataToWorldFrame+0x118>)
 800228e:	edd3 7a01 	vldr	s15, [r3, #4]
 8002292:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002296:	ee37 7a27 	vadd.f32	s14, s14, s15
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	3304      	adds	r3, #4
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	3308      	adds	r3, #8
 80022a2:	edd3 6a00 	vldr	s13, [r3]
 80022a6:	4b1d      	ldr	r3, [pc, #116]	; (800231c <ConvertGyroDataToWorldFrame+0x118>)
 80022a8:	edd3 7a02 	vldr	s15, [r3, #8]
 80022ac:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80022b0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80022b4:	4b1a      	ldr	r3, [pc, #104]	; (8002320 <ConvertGyroDataToWorldFrame+0x11c>)
 80022b6:	edc3 7a01 	vstr	s15, [r3, #4]
	DATA_GyroRadiansPerSecondInWorldFrame.Z = rotationalMatrix[2][0] * DATA_RadiansPerSecond.X + rotationalMatrix[2][1] * DATA_RadiansPerSecond.Y + rotationalMatrix[2][2] * DATA_RadiansPerSecond.Z;
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	3308      	adds	r3, #8
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	ed93 7a00 	vldr	s14, [r3]
 80022c4:	4b15      	ldr	r3, [pc, #84]	; (800231c <ConvertGyroDataToWorldFrame+0x118>)
 80022c6:	edd3 7a00 	vldr	s15, [r3]
 80022ca:	ee27 7a27 	vmul.f32	s14, s14, s15
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	3308      	adds	r3, #8
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	3304      	adds	r3, #4
 80022d6:	edd3 6a00 	vldr	s13, [r3]
 80022da:	4b10      	ldr	r3, [pc, #64]	; (800231c <ConvertGyroDataToWorldFrame+0x118>)
 80022dc:	edd3 7a01 	vldr	s15, [r3, #4]
 80022e0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80022e4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	3308      	adds	r3, #8
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	3308      	adds	r3, #8
 80022f0:	edd3 6a00 	vldr	s13, [r3]
 80022f4:	4b09      	ldr	r3, [pc, #36]	; (800231c <ConvertGyroDataToWorldFrame+0x118>)
 80022f6:	edd3 7a02 	vldr	s15, [r3, #8]
 80022fa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80022fe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002302:	4b07      	ldr	r3, [pc, #28]	; (8002320 <ConvertGyroDataToWorldFrame+0x11c>)
 8002304:	edc3 7a02 	vstr	s15, [r3, #8]

	free(rotationalMatrix);
 8002308:	6878      	ldr	r0, [r7, #4]
 800230a:	f00d fac9 	bl	800f8a0 <free>
}
 800230e:	bf00      	nop
 8002310:	3708      	adds	r7, #8
 8002312:	46bd      	mov	sp, r7
 8002314:	bd80      	pop	{r7, pc}
 8002316:	bf00      	nop
 8002318:	20000428 	.word	0x20000428
 800231c:	20000410 	.word	0x20000410
 8002320:	2000041c 	.word	0x2000041c
 8002324:	00000000 	.word	0x00000000

08002328 <ApplyComplementaryFilter>:
/*
Description:
Creates angles using complementary filter from gyro and accel radings and updates the values
*/
void ApplyComplementaryFilter(uint32_t time)
{
 8002328:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800232c:	b082      	sub	sp, #8
 800232e:	af00      	add	r7, sp, #0
 8002330:	6078      	str	r0, [r7, #4]
	DATA_ComplementedAngles.X = CONFIG_COMPLEMENTARY_FILTER_GyroPart * 0.01 * (DATA_ComplementedAngles.X + time * 0.001 * DATA_GyroRadiansPerSecondInWorldFrame.X) + CONFIG_COMPLEMENTARY_FILTER_AccelPart * 0.01 * DATA_AccelAngles.X;
 8002332:	4b53      	ldr	r3, [pc, #332]	; (8002480 <ApplyComplementaryFilter+0x158>)
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	4618      	mov	r0, r3
 8002338:	f7fe f926 	bl	8000588 <__aeabi_f2d>
 800233c:	4604      	mov	r4, r0
 800233e:	460d      	mov	r5, r1
 8002340:	6878      	ldr	r0, [r7, #4]
 8002342:	f7fe f8ff 	bl	8000544 <__aeabi_ui2d>
 8002346:	a348      	add	r3, pc, #288	; (adr r3, 8002468 <ApplyComplementaryFilter+0x140>)
 8002348:	e9d3 2300 	ldrd	r2, r3, [r3]
 800234c:	f7fe f974 	bl	8000638 <__aeabi_dmul>
 8002350:	4602      	mov	r2, r0
 8002352:	460b      	mov	r3, r1
 8002354:	4690      	mov	r8, r2
 8002356:	4699      	mov	r9, r3
 8002358:	4b4a      	ldr	r3, [pc, #296]	; (8002484 <ApplyComplementaryFilter+0x15c>)
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	4618      	mov	r0, r3
 800235e:	f7fe f913 	bl	8000588 <__aeabi_f2d>
 8002362:	4602      	mov	r2, r0
 8002364:	460b      	mov	r3, r1
 8002366:	4640      	mov	r0, r8
 8002368:	4649      	mov	r1, r9
 800236a:	f7fe f965 	bl	8000638 <__aeabi_dmul>
 800236e:	4602      	mov	r2, r0
 8002370:	460b      	mov	r3, r1
 8002372:	4620      	mov	r0, r4
 8002374:	4629      	mov	r1, r5
 8002376:	f7fd ffa9 	bl	80002cc <__adddf3>
 800237a:	4602      	mov	r2, r0
 800237c:	460b      	mov	r3, r1
 800237e:	4610      	mov	r0, r2
 8002380:	4619      	mov	r1, r3
 8002382:	a33b      	add	r3, pc, #236	; (adr r3, 8002470 <ApplyComplementaryFilter+0x148>)
 8002384:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002388:	f7fe f956 	bl	8000638 <__aeabi_dmul>
 800238c:	4602      	mov	r2, r0
 800238e:	460b      	mov	r3, r1
 8002390:	4614      	mov	r4, r2
 8002392:	461d      	mov	r5, r3
 8002394:	4b3c      	ldr	r3, [pc, #240]	; (8002488 <ApplyComplementaryFilter+0x160>)
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	4618      	mov	r0, r3
 800239a:	f7fe f8f5 	bl	8000588 <__aeabi_f2d>
 800239e:	a336      	add	r3, pc, #216	; (adr r3, 8002478 <ApplyComplementaryFilter+0x150>)
 80023a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023a4:	f7fe f948 	bl	8000638 <__aeabi_dmul>
 80023a8:	4602      	mov	r2, r0
 80023aa:	460b      	mov	r3, r1
 80023ac:	4620      	mov	r0, r4
 80023ae:	4629      	mov	r1, r5
 80023b0:	f7fd ff8c 	bl	80002cc <__adddf3>
 80023b4:	4602      	mov	r2, r0
 80023b6:	460b      	mov	r3, r1
 80023b8:	4610      	mov	r0, r2
 80023ba:	4619      	mov	r1, r3
 80023bc:	f7fe fc14 	bl	8000be8 <__aeabi_d2f>
 80023c0:	4603      	mov	r3, r0
 80023c2:	4a2f      	ldr	r2, [pc, #188]	; (8002480 <ApplyComplementaryFilter+0x158>)
 80023c4:	6013      	str	r3, [r2, #0]
	DATA_ComplementedAngles.Y = CONFIG_COMPLEMENTARY_FILTER_GyroPart * 0.01 * (DATA_ComplementedAngles.Y + time * 0.001 * DATA_GyroRadiansPerSecondInWorldFrame.Y) + CONFIG_COMPLEMENTARY_FILTER_AccelPart * 0.01 * DATA_AccelAngles.Y;
 80023c6:	4b2e      	ldr	r3, [pc, #184]	; (8002480 <ApplyComplementaryFilter+0x158>)
 80023c8:	685b      	ldr	r3, [r3, #4]
 80023ca:	4618      	mov	r0, r3
 80023cc:	f7fe f8dc 	bl	8000588 <__aeabi_f2d>
 80023d0:	4604      	mov	r4, r0
 80023d2:	460d      	mov	r5, r1
 80023d4:	6878      	ldr	r0, [r7, #4]
 80023d6:	f7fe f8b5 	bl	8000544 <__aeabi_ui2d>
 80023da:	a323      	add	r3, pc, #140	; (adr r3, 8002468 <ApplyComplementaryFilter+0x140>)
 80023dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023e0:	f7fe f92a 	bl	8000638 <__aeabi_dmul>
 80023e4:	4602      	mov	r2, r0
 80023e6:	460b      	mov	r3, r1
 80023e8:	4690      	mov	r8, r2
 80023ea:	4699      	mov	r9, r3
 80023ec:	4b25      	ldr	r3, [pc, #148]	; (8002484 <ApplyComplementaryFilter+0x15c>)
 80023ee:	685b      	ldr	r3, [r3, #4]
 80023f0:	4618      	mov	r0, r3
 80023f2:	f7fe f8c9 	bl	8000588 <__aeabi_f2d>
 80023f6:	4602      	mov	r2, r0
 80023f8:	460b      	mov	r3, r1
 80023fa:	4640      	mov	r0, r8
 80023fc:	4649      	mov	r1, r9
 80023fe:	f7fe f91b 	bl	8000638 <__aeabi_dmul>
 8002402:	4602      	mov	r2, r0
 8002404:	460b      	mov	r3, r1
 8002406:	4620      	mov	r0, r4
 8002408:	4629      	mov	r1, r5
 800240a:	f7fd ff5f 	bl	80002cc <__adddf3>
 800240e:	4602      	mov	r2, r0
 8002410:	460b      	mov	r3, r1
 8002412:	4610      	mov	r0, r2
 8002414:	4619      	mov	r1, r3
 8002416:	a316      	add	r3, pc, #88	; (adr r3, 8002470 <ApplyComplementaryFilter+0x148>)
 8002418:	e9d3 2300 	ldrd	r2, r3, [r3]
 800241c:	f7fe f90c 	bl	8000638 <__aeabi_dmul>
 8002420:	4602      	mov	r2, r0
 8002422:	460b      	mov	r3, r1
 8002424:	4614      	mov	r4, r2
 8002426:	461d      	mov	r5, r3
 8002428:	4b17      	ldr	r3, [pc, #92]	; (8002488 <ApplyComplementaryFilter+0x160>)
 800242a:	685b      	ldr	r3, [r3, #4]
 800242c:	4618      	mov	r0, r3
 800242e:	f7fe f8ab 	bl	8000588 <__aeabi_f2d>
 8002432:	a311      	add	r3, pc, #68	; (adr r3, 8002478 <ApplyComplementaryFilter+0x150>)
 8002434:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002438:	f7fe f8fe 	bl	8000638 <__aeabi_dmul>
 800243c:	4602      	mov	r2, r0
 800243e:	460b      	mov	r3, r1
 8002440:	4620      	mov	r0, r4
 8002442:	4629      	mov	r1, r5
 8002444:	f7fd ff42 	bl	80002cc <__adddf3>
 8002448:	4602      	mov	r2, r0
 800244a:	460b      	mov	r3, r1
 800244c:	4610      	mov	r0, r2
 800244e:	4619      	mov	r1, r3
 8002450:	f7fe fbca 	bl	8000be8 <__aeabi_d2f>
 8002454:	4603      	mov	r3, r0
 8002456:	4a0a      	ldr	r2, [pc, #40]	; (8002480 <ApplyComplementaryFilter+0x158>)
 8002458:	6053      	str	r3, [r2, #4]
}
 800245a:	bf00      	nop
 800245c:	3708      	adds	r7, #8
 800245e:	46bd      	mov	sp, r7
 8002460:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002464:	f3af 8000 	nop.w
 8002468:	d2f1a9fc 	.word	0xd2f1a9fc
 800246c:	3f50624d 	.word	0x3f50624d
 8002470:	66666667 	.word	0x66666667
 8002474:	3fee6666 	.word	0x3fee6666
 8002478:	9999999a 	.word	0x9999999a
 800247c:	3fa99999 	.word	0x3fa99999
 8002480:	20000458 	.word	0x20000458
 8002484:	2000041c 	.word	0x2000041c
 8002488:	20000440 	.word	0x20000440

0800248c <MOTOR_MIXER_RunPID>:

 propellers on the drone spin outside
*/

void MOTOR_MIXER_RunPID(float *setpoints, int time)
{
 800248c:	b580      	push	{r7, lr}
 800248e:	b082      	sub	sp, #8
 8002490:	af00      	add	r7, sp, #0
 8002492:	6078      	str	r0, [r7, #4]
 8002494:	6039      	str	r1, [r7, #0]
	throttle = 0;
 8002496:	4b17      	ldr	r3, [pc, #92]	; (80024f4 <MOTOR_MIXER_RunPID+0x68>)
 8002498:	2200      	movs	r2, #0
 800249a:	801a      	strh	r2, [r3, #0]
	roll = PID_CONTROLLERS_Roll(setpoints[1], time);
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	3304      	adds	r3, #4
 80024a0:	edd3 7a00 	vldr	s15, [r3]
 80024a4:	6838      	ldr	r0, [r7, #0]
 80024a6:	eeb0 0a67 	vmov.f32	s0, s15
 80024aa:	f7fe fd71 	bl	8000f90 <PID_CONTROLLERS_Roll>
 80024ae:	4603      	mov	r3, r0
 80024b0:	461a      	mov	r2, r3
 80024b2:	4b11      	ldr	r3, [pc, #68]	; (80024f8 <MOTOR_MIXER_RunPID+0x6c>)
 80024b4:	801a      	strh	r2, [r3, #0]
	pitch = PID_CONTROLLERS_Pitch(setpoints[2], time);
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	3308      	adds	r3, #8
 80024ba:	edd3 7a00 	vldr	s15, [r3]
 80024be:	6838      	ldr	r0, [r7, #0]
 80024c0:	eeb0 0a67 	vmov.f32	s0, s15
 80024c4:	f7fe fe14 	bl	80010f0 <PID_CONTROLLERS_Pitch>
 80024c8:	4603      	mov	r3, r0
 80024ca:	461a      	mov	r2, r3
 80024cc:	4b0b      	ldr	r3, [pc, #44]	; (80024fc <MOTOR_MIXER_RunPID+0x70>)
 80024ce:	801a      	strh	r2, [r3, #0]
	yaw = PID_CONTROLLERS_Yaw(setpoints[3], time);
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	330c      	adds	r3, #12
 80024d4:	edd3 7a00 	vldr	s15, [r3]
 80024d8:	6838      	ldr	r0, [r7, #0]
 80024da:	eeb0 0a67 	vmov.f32	s0, s15
 80024de:	f7fe feb7 	bl	8001250 <PID_CONTROLLERS_Yaw>
 80024e2:	4603      	mov	r3, r0
 80024e4:	461a      	mov	r2, r3
 80024e6:	4b06      	ldr	r3, [pc, #24]	; (8002500 <MOTOR_MIXER_RunPID+0x74>)
 80024e8:	801a      	strh	r2, [r3, #0]
}
 80024ea:	bf00      	nop
 80024ec:	3708      	adds	r7, #8
 80024ee:	46bd      	mov	sp, r7
 80024f0:	bd80      	pop	{r7, pc}
 80024f2:	bf00      	nop
 80024f4:	20000024 	.word	0x20000024
 80024f8:	20000464 	.word	0x20000464
 80024fc:	20000466 	.word	0x20000466
 8002500:	20000468 	.word	0x20000468

08002504 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002504:	b580      	push	{r7, lr}
 8002506:	b082      	sub	sp, #8
 8002508:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800250a:	2300      	movs	r3, #0
 800250c:	607b      	str	r3, [r7, #4]
 800250e:	4b10      	ldr	r3, [pc, #64]	; (8002550 <HAL_MspInit+0x4c>)
 8002510:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002512:	4a0f      	ldr	r2, [pc, #60]	; (8002550 <HAL_MspInit+0x4c>)
 8002514:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002518:	6453      	str	r3, [r2, #68]	; 0x44
 800251a:	4b0d      	ldr	r3, [pc, #52]	; (8002550 <HAL_MspInit+0x4c>)
 800251c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800251e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002522:	607b      	str	r3, [r7, #4]
 8002524:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002526:	2300      	movs	r3, #0
 8002528:	603b      	str	r3, [r7, #0]
 800252a:	4b09      	ldr	r3, [pc, #36]	; (8002550 <HAL_MspInit+0x4c>)
 800252c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800252e:	4a08      	ldr	r2, [pc, #32]	; (8002550 <HAL_MspInit+0x4c>)
 8002530:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002534:	6413      	str	r3, [r2, #64]	; 0x40
 8002536:	4b06      	ldr	r3, [pc, #24]	; (8002550 <HAL_MspInit+0x4c>)
 8002538:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800253a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800253e:	603b      	str	r3, [r7, #0]
 8002540:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8002542:	2007      	movs	r0, #7
 8002544:	f004 f932 	bl	80067ac <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002548:	bf00      	nop
 800254a:	3708      	adds	r7, #8
 800254c:	46bd      	mov	sp, r7
 800254e:	bd80      	pop	{r7, pc}
 8002550:	40023800 	.word	0x40023800

08002554 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002554:	b480      	push	{r7}
 8002556:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002558:	e7fe      	b.n	8002558 <NMI_Handler+0x4>

0800255a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800255a:	b480      	push	{r7}
 800255c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800255e:	e7fe      	b.n	800255e <HardFault_Handler+0x4>

08002560 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002560:	b480      	push	{r7}
 8002562:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002564:	e7fe      	b.n	8002564 <MemManage_Handler+0x4>

08002566 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002566:	b480      	push	{r7}
 8002568:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800256a:	e7fe      	b.n	800256a <BusFault_Handler+0x4>

0800256c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800256c:	b480      	push	{r7}
 800256e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002570:	e7fe      	b.n	8002570 <UsageFault_Handler+0x4>

08002572 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002572:	b480      	push	{r7}
 8002574:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002576:	bf00      	nop
 8002578:	46bd      	mov	sp, r7
 800257a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800257e:	4770      	bx	lr

08002580 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002580:	b480      	push	{r7}
 8002582:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002584:	bf00      	nop
 8002586:	46bd      	mov	sp, r7
 8002588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800258c:	4770      	bx	lr

0800258e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800258e:	b480      	push	{r7}
 8002590:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002592:	bf00      	nop
 8002594:	46bd      	mov	sp, r7
 8002596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800259a:	4770      	bx	lr

0800259c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800259c:	b580      	push	{r7, lr}
 800259e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80025a0:	f003 fff0 	bl	8006584 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  systick_micros++;
 80025a4:	4b03      	ldr	r3, [pc, #12]	; (80025b4 <SysTick_Handler+0x18>)
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	3301      	adds	r3, #1
 80025aa:	4a02      	ldr	r2, [pc, #8]	; (80025b4 <SysTick_Handler+0x18>)
 80025ac:	6013      	str	r3, [r2, #0]

  /* USER CODE END SysTick_IRQn 1 */
}
 80025ae:	bf00      	nop
 80025b0:	bd80      	pop	{r7, pc}
 80025b2:	bf00      	nop
 80025b4:	2000046c 	.word	0x2000046c

080025b8 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 80025b8:	b580      	push	{r7, lr}
 80025ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_up_ch3);
 80025bc:	4802      	ldr	r0, [pc, #8]	; (80025c8 <DMA1_Stream1_IRQHandler+0x10>)
 80025be:	f004 f9e5 	bl	800698c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 80025c2:	bf00      	nop
 80025c4:	bd80      	pop	{r7, pc}
 80025c6:	bf00      	nop
 80025c8:	200005bc 	.word	0x200005bc

080025cc <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 80025cc:	b580      	push	{r7, lr}
 80025ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim5_ch4_trig);
 80025d0:	4802      	ldr	r0, [pc, #8]	; (80025dc <DMA1_Stream3_IRQHandler+0x10>)
 80025d2:	f004 f9db 	bl	800698c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 80025d6:	bf00      	nop
 80025d8:	bd80      	pop	{r7, pc}
 80025da:	bf00      	nop
 80025dc:	2000067c 	.word	0x2000067c

080025e0 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 80025e0:	b580      	push	{r7, lr}
 80025e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim5_ch2);
 80025e4:	4802      	ldr	r0, [pc, #8]	; (80025f0 <DMA1_Stream4_IRQHandler+0x10>)
 80025e6:	f004 f9d1 	bl	800698c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 80025ea:	bf00      	nop
 80025ec:	bd80      	pop	{r7, pc}
 80025ee:	bf00      	nop
 80025f0:	2000061c 	.word	0x2000061c

080025f4 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 80025f4:	b580      	push	{r7, lr}
 80025f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch1);
 80025f8:	4802      	ldr	r0, [pc, #8]	; (8002604 <DMA1_Stream5_IRQHandler+0x10>)
 80025fa:	f004 f9c7 	bl	800698c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 80025fe:	bf00      	nop
 8002600:	bd80      	pop	{r7, pc}
 8002602:	bf00      	nop
 8002604:	2000055c 	.word	0x2000055c

08002608 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8002608:	b580      	push	{r7, lr}
 800260a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 800260c:	4802      	ldr	r0, [pc, #8]	; (8002618 <OTG_FS_IRQHandler+0x10>)
 800260e:	f006 f80f 	bl	8008630 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8002612:	bf00      	nop
 8002614:	bd80      	pop	{r7, pc}
 8002616:	bf00      	nop
 8002618:	20001ca8 	.word	0x20001ca8

0800261c <BSP_I2C1_Init>:
/**
  * @brief  Initialize I2C HAL
  * @retval BSP status
  */
int32_t BSP_I2C1_Init(void)
{
 800261c:	b580      	push	{r7, lr}
 800261e:	b082      	sub	sp, #8
 8002620:	af00      	add	r7, sp, #0

  int32_t ret = BSP_ERROR_NONE;
 8002622:	2300      	movs	r3, #0
 8002624:	607b      	str	r3, [r7, #4]

  hi2c1.Instance  = I2C1;
 8002626:	4b13      	ldr	r3, [pc, #76]	; (8002674 <BSP_I2C1_Init+0x58>)
 8002628:	4a13      	ldr	r2, [pc, #76]	; (8002678 <BSP_I2C1_Init+0x5c>)
 800262a:	601a      	str	r2, [r3, #0]

  if(I2C1InitCounter++ == 0)
 800262c:	4b13      	ldr	r3, [pc, #76]	; (800267c <BSP_I2C1_Init+0x60>)
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	1c5a      	adds	r2, r3, #1
 8002632:	4912      	ldr	r1, [pc, #72]	; (800267c <BSP_I2C1_Init+0x60>)
 8002634:	600a      	str	r2, [r1, #0]
 8002636:	2b00      	cmp	r3, #0
 8002638:	d117      	bne.n	800266a <BSP_I2C1_Init+0x4e>
  {
    if (HAL_I2C_GetState(&hi2c1) == HAL_I2C_STATE_RESET)
 800263a:	480e      	ldr	r0, [pc, #56]	; (8002674 <BSP_I2C1_Init+0x58>)
 800263c:	f005 fb2c 	bl	8007c98 <HAL_I2C_GetState>
 8002640:	4603      	mov	r3, r0
 8002642:	2b00      	cmp	r3, #0
 8002644:	d111      	bne.n	800266a <BSP_I2C1_Init+0x4e>
    {
    #if (USE_HAL_I2C_REGISTER_CALLBACKS == 0U)
      /* Init the I2C Msp */
      I2C1_MspInit(&hi2c1);
 8002646:	480b      	ldr	r0, [pc, #44]	; (8002674 <BSP_I2C1_Init+0x58>)
 8002648:	f000 f8e2 	bl	8002810 <I2C1_MspInit>
        {
          return BSP_ERROR_MSP_FAILURE;
        }
      }
    #endif
      if(ret == BSP_ERROR_NONE)
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	2b00      	cmp	r3, #0
 8002650:	d10b      	bne.n	800266a <BSP_I2C1_Init+0x4e>
      {
        /* Init the I2C */
        if(MX_I2C1_Init(&hi2c1) != HAL_OK)
 8002652:	4808      	ldr	r0, [pc, #32]	; (8002674 <BSP_I2C1_Init+0x58>)
 8002654:	f000 f8a8 	bl	80027a8 <MX_I2C1_Init>
 8002658:	4603      	mov	r3, r0
 800265a:	2b00      	cmp	r3, #0
 800265c:	d003      	beq.n	8002666 <BSP_I2C1_Init+0x4a>
        {
          ret = BSP_ERROR_BUS_FAILURE;
 800265e:	f06f 0307 	mvn.w	r3, #7
 8002662:	607b      	str	r3, [r7, #4]
 8002664:	e001      	b.n	800266a <BSP_I2C1_Init+0x4e>
        }
        else
        {
          ret = BSP_ERROR_NONE;
 8002666:	2300      	movs	r3, #0
 8002668:	607b      	str	r3, [r7, #4]
        }
      }
    }
  }
  return ret;
 800266a:	687b      	ldr	r3, [r7, #4]
}
 800266c:	4618      	mov	r0, r3
 800266e:	3708      	adds	r7, #8
 8002670:	46bd      	mov	sp, r7
 8002672:	bd80      	pop	{r7, pc}
 8002674:	20000470 	.word	0x20000470
 8002678:	40005400 	.word	0x40005400
 800267c:	200004c4 	.word	0x200004c4

08002680 <BSP_I2C1_DeInit>:
/**
  * @brief  DeInitialize I2C HAL.
  * @retval BSP status
  */
int32_t BSP_I2C1_DeInit(void)
{
 8002680:	b580      	push	{r7, lr}
 8002682:	b082      	sub	sp, #8
 8002684:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 8002686:	2300      	movs	r3, #0
 8002688:	607b      	str	r3, [r7, #4]

  if (I2C1InitCounter > 0)
 800268a:	4b0f      	ldr	r3, [pc, #60]	; (80026c8 <BSP_I2C1_DeInit+0x48>)
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	2b00      	cmp	r3, #0
 8002690:	d014      	beq.n	80026bc <BSP_I2C1_DeInit+0x3c>
  {
    if (--I2C1InitCounter == 0)
 8002692:	4b0d      	ldr	r3, [pc, #52]	; (80026c8 <BSP_I2C1_DeInit+0x48>)
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	3b01      	subs	r3, #1
 8002698:	4a0b      	ldr	r2, [pc, #44]	; (80026c8 <BSP_I2C1_DeInit+0x48>)
 800269a:	6013      	str	r3, [r2, #0]
 800269c:	4b0a      	ldr	r3, [pc, #40]	; (80026c8 <BSP_I2C1_DeInit+0x48>)
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d10b      	bne.n	80026bc <BSP_I2C1_DeInit+0x3c>
    {
  #if (USE_HAL_I2C_REGISTER_CALLBACKS == 0U)
      /* DeInit the I2C */
      I2C1_MspDeInit(&hi2c1);
 80026a4:	4809      	ldr	r0, [pc, #36]	; (80026cc <BSP_I2C1_DeInit+0x4c>)
 80026a6:	f000 f8fd 	bl	80028a4 <I2C1_MspDeInit>
  #endif
      /* DeInit the I2C */
      if (HAL_I2C_DeInit(&hi2c1) != HAL_OK)
 80026aa:	4808      	ldr	r0, [pc, #32]	; (80026cc <BSP_I2C1_DeInit+0x4c>)
 80026ac:	f004 ff90 	bl	80075d0 <HAL_I2C_DeInit>
 80026b0:	4603      	mov	r3, r0
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d002      	beq.n	80026bc <BSP_I2C1_DeInit+0x3c>
      {
        ret = BSP_ERROR_BUS_FAILURE;
 80026b6:	f06f 0307 	mvn.w	r3, #7
 80026ba:	607b      	str	r3, [r7, #4]
      }
    }
  }
  return ret;
 80026bc:	687b      	ldr	r3, [r7, #4]
}
 80026be:	4618      	mov	r0, r3
 80026c0:	3708      	adds	r7, #8
 80026c2:	46bd      	mov	sp, r7
 80026c4:	bd80      	pop	{r7, pc}
 80026c6:	bf00      	nop
 80026c8:	200004c4 	.word	0x200004c4
 80026cc:	20000470 	.word	0x20000470

080026d0 <BSP_I2C1_WriteReg>:
  * @param  Length Data Length
  * @retval BSP status
  */

int32_t BSP_I2C1_WriteReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 80026d0:	b580      	push	{r7, lr}
 80026d2:	b08a      	sub	sp, #40	; 0x28
 80026d4:	af04      	add	r7, sp, #16
 80026d6:	60ba      	str	r2, [r7, #8]
 80026d8:	461a      	mov	r2, r3
 80026da:	4603      	mov	r3, r0
 80026dc:	81fb      	strh	r3, [r7, #14]
 80026de:	460b      	mov	r3, r1
 80026e0:	81bb      	strh	r3, [r7, #12]
 80026e2:	4613      	mov	r3, r2
 80026e4:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 80026e6:	2300      	movs	r3, #0
 80026e8:	617b      	str	r3, [r7, #20]

  if (HAL_I2C_Mem_Write(&hi2c1, DevAddr,Reg, I2C_MEMADD_SIZE_8BIT,pData, Length, BUS_I2C1_POLL_TIMEOUT) != HAL_OK)
 80026ea:	89ba      	ldrh	r2, [r7, #12]
 80026ec:	89f9      	ldrh	r1, [r7, #14]
 80026ee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80026f2:	9302      	str	r3, [sp, #8]
 80026f4:	88fb      	ldrh	r3, [r7, #6]
 80026f6:	9301      	str	r3, [sp, #4]
 80026f8:	68bb      	ldr	r3, [r7, #8]
 80026fa:	9300      	str	r3, [sp, #0]
 80026fc:	2301      	movs	r3, #1
 80026fe:	480c      	ldr	r0, [pc, #48]	; (8002730 <BSP_I2C1_WriteReg+0x60>)
 8002700:	f004 ffaa 	bl	8007658 <HAL_I2C_Mem_Write>
 8002704:	4603      	mov	r3, r0
 8002706:	2b00      	cmp	r3, #0
 8002708:	d00c      	beq.n	8002724 <BSP_I2C1_WriteReg+0x54>
  {
    if (HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF)
 800270a:	4809      	ldr	r0, [pc, #36]	; (8002730 <BSP_I2C1_WriteReg+0x60>)
 800270c:	f005 fad2 	bl	8007cb4 <HAL_I2C_GetError>
 8002710:	4603      	mov	r3, r0
 8002712:	2b04      	cmp	r3, #4
 8002714:	d103      	bne.n	800271e <BSP_I2C1_WriteReg+0x4e>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 8002716:	f06f 0365 	mvn.w	r3, #101	; 0x65
 800271a:	617b      	str	r3, [r7, #20]
 800271c:	e002      	b.n	8002724 <BSP_I2C1_WriteReg+0x54>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 800271e:	f06f 0303 	mvn.w	r3, #3
 8002722:	617b      	str	r3, [r7, #20]
    }
  }
  return ret;
 8002724:	697b      	ldr	r3, [r7, #20]
}
 8002726:	4618      	mov	r0, r3
 8002728:	3718      	adds	r7, #24
 800272a:	46bd      	mov	sp, r7
 800272c:	bd80      	pop	{r7, pc}
 800272e:	bf00      	nop
 8002730:	20000470 	.word	0x20000470

08002734 <BSP_I2C1_ReadReg>:
  * @param  pData  Pointer to data buffer to read
  * @param  Length Data Length
  * @retval BSP status
  */
int32_t  BSP_I2C1_ReadReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 8002734:	b580      	push	{r7, lr}
 8002736:	b08a      	sub	sp, #40	; 0x28
 8002738:	af04      	add	r7, sp, #16
 800273a:	60ba      	str	r2, [r7, #8]
 800273c:	461a      	mov	r2, r3
 800273e:	4603      	mov	r3, r0
 8002740:	81fb      	strh	r3, [r7, #14]
 8002742:	460b      	mov	r3, r1
 8002744:	81bb      	strh	r3, [r7, #12]
 8002746:	4613      	mov	r3, r2
 8002748:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 800274a:	2300      	movs	r3, #0
 800274c:	617b      	str	r3, [r7, #20]

  if (HAL_I2C_Mem_Read(&hi2c1, DevAddr, Reg, I2C_MEMADD_SIZE_8BIT, pData, Length, BUS_I2C1_POLL_TIMEOUT) != HAL_OK)
 800274e:	89ba      	ldrh	r2, [r7, #12]
 8002750:	89f9      	ldrh	r1, [r7, #14]
 8002752:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002756:	9302      	str	r3, [sp, #8]
 8002758:	88fb      	ldrh	r3, [r7, #6]
 800275a:	9301      	str	r3, [sp, #4]
 800275c:	68bb      	ldr	r3, [r7, #8]
 800275e:	9300      	str	r3, [sp, #0]
 8002760:	2301      	movs	r3, #1
 8002762:	480c      	ldr	r0, [pc, #48]	; (8002794 <BSP_I2C1_ReadReg+0x60>)
 8002764:	f005 f872 	bl	800784c <HAL_I2C_Mem_Read>
 8002768:	4603      	mov	r3, r0
 800276a:	2b00      	cmp	r3, #0
 800276c:	d00c      	beq.n	8002788 <BSP_I2C1_ReadReg+0x54>
  {
    if (HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF)
 800276e:	4809      	ldr	r0, [pc, #36]	; (8002794 <BSP_I2C1_ReadReg+0x60>)
 8002770:	f005 faa0 	bl	8007cb4 <HAL_I2C_GetError>
 8002774:	4603      	mov	r3, r0
 8002776:	2b04      	cmp	r3, #4
 8002778:	d103      	bne.n	8002782 <BSP_I2C1_ReadReg+0x4e>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 800277a:	f06f 0365 	mvn.w	r3, #101	; 0x65
 800277e:	617b      	str	r3, [r7, #20]
 8002780:	e002      	b.n	8002788 <BSP_I2C1_ReadReg+0x54>
    }
    else
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8002782:	f06f 0303 	mvn.w	r3, #3
 8002786:	617b      	str	r3, [r7, #20]
    }
  }
  return ret;
 8002788:	697b      	ldr	r3, [r7, #20]
}
 800278a:	4618      	mov	r0, r3
 800278c:	3718      	adds	r7, #24
 800278e:	46bd      	mov	sp, r7
 8002790:	bd80      	pop	{r7, pc}
 8002792:	bf00      	nop
 8002794:	20000470 	.word	0x20000470

08002798 <BSP_GetTick>:

/**
  * @brief  Return system tick in ms
  * @retval Current HAL time base time stamp
  */
int32_t BSP_GetTick(void) {
 8002798:	b580      	push	{r7, lr}
 800279a:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800279c:	f003 ff06 	bl	80065ac <HAL_GetTick>
 80027a0:	4603      	mov	r3, r0
}
 80027a2:	4618      	mov	r0, r3
 80027a4:	bd80      	pop	{r7, pc}
	...

080027a8 <MX_I2C1_Init>:

/* I2C1 init function */

__weak HAL_StatusTypeDef MX_I2C1_Init(I2C_HandleTypeDef* hi2c)
{
 80027a8:	b580      	push	{r7, lr}
 80027aa:	b084      	sub	sp, #16
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 80027b0:	2300      	movs	r3, #0
 80027b2:	73fb      	strb	r3, [r7, #15]

  hi2c->Instance = I2C1;
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	4a14      	ldr	r2, [pc, #80]	; (8002808 <MX_I2C1_Init+0x60>)
 80027b8:	601a      	str	r2, [r3, #0]
  hi2c->Init.ClockSpeed = 100000;
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	4a13      	ldr	r2, [pc, #76]	; (800280c <MX_I2C1_Init+0x64>)
 80027be:	605a      	str	r2, [r3, #4]
  hi2c->Init.DutyCycle = I2C_DUTYCYCLE_2;
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	2200      	movs	r2, #0
 80027c4:	609a      	str	r2, [r3, #8]
  hi2c->Init.OwnAddress1 = 0;
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	2200      	movs	r2, #0
 80027ca:	60da      	str	r2, [r3, #12]
  hi2c->Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80027d2:	611a      	str	r2, [r3, #16]
  hi2c->Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	2200      	movs	r2, #0
 80027d8:	615a      	str	r2, [r3, #20]
  hi2c->Init.OwnAddress2 = 0;
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	2200      	movs	r2, #0
 80027de:	619a      	str	r2, [r3, #24]
  hi2c->Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	2200      	movs	r2, #0
 80027e4:	61da      	str	r2, [r3, #28]
  hi2c->Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	2200      	movs	r2, #0
 80027ea:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(hi2c) != HAL_OK)
 80027ec:	6878      	ldr	r0, [r7, #4]
 80027ee:	f004 fdab 	bl	8007348 <HAL_I2C_Init>
 80027f2:	4603      	mov	r3, r0
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d001      	beq.n	80027fc <MX_I2C1_Init+0x54>
  {
    ret = HAL_ERROR;
 80027f8:	2301      	movs	r3, #1
 80027fa:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80027fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80027fe:	4618      	mov	r0, r3
 8002800:	3710      	adds	r7, #16
 8002802:	46bd      	mov	sp, r7
 8002804:	bd80      	pop	{r7, pc}
 8002806:	bf00      	nop
 8002808:	40005400 	.word	0x40005400
 800280c:	000186a0 	.word	0x000186a0

08002810 <I2C1_MspInit>:

static void I2C1_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8002810:	b580      	push	{r7, lr}
 8002812:	b08a      	sub	sp, #40	; 0x28
 8002814:	af00      	add	r7, sp, #0
 8002816:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002818:	2300      	movs	r3, #0
 800281a:	613b      	str	r3, [r7, #16]
 800281c:	4b1f      	ldr	r3, [pc, #124]	; (800289c <I2C1_MspInit+0x8c>)
 800281e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002820:	4a1e      	ldr	r2, [pc, #120]	; (800289c <I2C1_MspInit+0x8c>)
 8002822:	f043 0302 	orr.w	r3, r3, #2
 8002826:	6313      	str	r3, [r2, #48]	; 0x30
 8002828:	4b1c      	ldr	r3, [pc, #112]	; (800289c <I2C1_MspInit+0x8c>)
 800282a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800282c:	f003 0302 	and.w	r3, r3, #2
 8002830:	613b      	str	r3, [r7, #16]
 8002832:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = BUS_I2C1_SCL_GPIO_PIN;
 8002834:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002838:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800283a:	2312      	movs	r3, #18
 800283c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800283e:	2300      	movs	r3, #0
 8002840:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002842:	2303      	movs	r3, #3
 8002844:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_I2C1_SCL_GPIO_AF;
 8002846:	2304      	movs	r3, #4
 8002848:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_I2C1_SCL_GPIO_PORT, &GPIO_InitStruct);
 800284a:	f107 0314 	add.w	r3, r7, #20
 800284e:	4619      	mov	r1, r3
 8002850:	4813      	ldr	r0, [pc, #76]	; (80028a0 <I2C1_MspInit+0x90>)
 8002852:	f004 fad7 	bl	8006e04 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_I2C1_SDA_GPIO_PIN;
 8002856:	f44f 7300 	mov.w	r3, #512	; 0x200
 800285a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800285c:	2312      	movs	r3, #18
 800285e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002860:	2300      	movs	r3, #0
 8002862:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002864:	2303      	movs	r3, #3
 8002866:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_I2C1_SDA_GPIO_AF;
 8002868:	2304      	movs	r3, #4
 800286a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_I2C1_SDA_GPIO_PORT, &GPIO_InitStruct);
 800286c:	f107 0314 	add.w	r3, r7, #20
 8002870:	4619      	mov	r1, r3
 8002872:	480b      	ldr	r0, [pc, #44]	; (80028a0 <I2C1_MspInit+0x90>)
 8002874:	f004 fac6 	bl	8006e04 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002878:	2300      	movs	r3, #0
 800287a:	60fb      	str	r3, [r7, #12]
 800287c:	4b07      	ldr	r3, [pc, #28]	; (800289c <I2C1_MspInit+0x8c>)
 800287e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002880:	4a06      	ldr	r2, [pc, #24]	; (800289c <I2C1_MspInit+0x8c>)
 8002882:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002886:	6413      	str	r3, [r2, #64]	; 0x40
 8002888:	4b04      	ldr	r3, [pc, #16]	; (800289c <I2C1_MspInit+0x8c>)
 800288a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800288c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002890:	60fb      	str	r3, [r7, #12]
 8002892:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
}
 8002894:	bf00      	nop
 8002896:	3728      	adds	r7, #40	; 0x28
 8002898:	46bd      	mov	sp, r7
 800289a:	bd80      	pop	{r7, pc}
 800289c:	40023800 	.word	0x40023800
 80028a0:	40020400 	.word	0x40020400

080028a4 <I2C1_MspDeInit>:

static void I2C1_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{
 80028a4:	b580      	push	{r7, lr}
 80028a6:	b082      	sub	sp, #8
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 80028ac:	4b09      	ldr	r3, [pc, #36]	; (80028d4 <I2C1_MspDeInit+0x30>)
 80028ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028b0:	4a08      	ldr	r2, [pc, #32]	; (80028d4 <I2C1_MspDeInit+0x30>)
 80028b2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80028b6:	6413      	str	r3, [r2, #64]	; 0x40

    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(BUS_I2C1_SCL_GPIO_PORT, BUS_I2C1_SCL_GPIO_PIN);
 80028b8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80028bc:	4806      	ldr	r0, [pc, #24]	; (80028d8 <I2C1_MspDeInit+0x34>)
 80028be:	f004 fc35 	bl	800712c <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(BUS_I2C1_SDA_GPIO_PORT, BUS_I2C1_SDA_GPIO_PIN);
 80028c2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80028c6:	4804      	ldr	r0, [pc, #16]	; (80028d8 <I2C1_MspDeInit+0x34>)
 80028c8:	f004 fc30 	bl	800712c <HAL_GPIO_DeInit>

  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
}
 80028cc:	bf00      	nop
 80028ce:	3708      	adds	r7, #8
 80028d0:	46bd      	mov	sp, r7
 80028d2:	bd80      	pop	{r7, pc}
 80028d4:	40023800 	.word	0x40023800
 80028d8:	40020400 	.word	0x40020400

080028dc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80028dc:	b480      	push	{r7}
 80028de:	af00      	add	r7, sp, #0
  return 1;
 80028e0:	2301      	movs	r3, #1
}
 80028e2:	4618      	mov	r0, r3
 80028e4:	46bd      	mov	sp, r7
 80028e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ea:	4770      	bx	lr

080028ec <_kill>:

int _kill(int pid, int sig)
{
 80028ec:	b580      	push	{r7, lr}
 80028ee:	b082      	sub	sp, #8
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	6078      	str	r0, [r7, #4]
 80028f4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80028f6:	f00c ffa1 	bl	800f83c <__errno>
 80028fa:	4603      	mov	r3, r0
 80028fc:	2216      	movs	r2, #22
 80028fe:	601a      	str	r2, [r3, #0]
  return -1;
 8002900:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002904:	4618      	mov	r0, r3
 8002906:	3708      	adds	r7, #8
 8002908:	46bd      	mov	sp, r7
 800290a:	bd80      	pop	{r7, pc}

0800290c <_exit>:

void _exit (int status)
{
 800290c:	b580      	push	{r7, lr}
 800290e:	b082      	sub	sp, #8
 8002910:	af00      	add	r7, sp, #0
 8002912:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002914:	f04f 31ff 	mov.w	r1, #4294967295
 8002918:	6878      	ldr	r0, [r7, #4]
 800291a:	f7ff ffe7 	bl	80028ec <_kill>
  while (1) {}    /* Make sure we hang here */
 800291e:	e7fe      	b.n	800291e <_exit+0x12>

08002920 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002920:	b580      	push	{r7, lr}
 8002922:	b086      	sub	sp, #24
 8002924:	af00      	add	r7, sp, #0
 8002926:	60f8      	str	r0, [r7, #12]
 8002928:	60b9      	str	r1, [r7, #8]
 800292a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800292c:	2300      	movs	r3, #0
 800292e:	617b      	str	r3, [r7, #20]
 8002930:	e00a      	b.n	8002948 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002932:	f3af 8000 	nop.w
 8002936:	4601      	mov	r1, r0
 8002938:	68bb      	ldr	r3, [r7, #8]
 800293a:	1c5a      	adds	r2, r3, #1
 800293c:	60ba      	str	r2, [r7, #8]
 800293e:	b2ca      	uxtb	r2, r1
 8002940:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002942:	697b      	ldr	r3, [r7, #20]
 8002944:	3301      	adds	r3, #1
 8002946:	617b      	str	r3, [r7, #20]
 8002948:	697a      	ldr	r2, [r7, #20]
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	429a      	cmp	r2, r3
 800294e:	dbf0      	blt.n	8002932 <_read+0x12>
  }

  return len;
 8002950:	687b      	ldr	r3, [r7, #4]
}
 8002952:	4618      	mov	r0, r3
 8002954:	3718      	adds	r7, #24
 8002956:	46bd      	mov	sp, r7
 8002958:	bd80      	pop	{r7, pc}

0800295a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800295a:	b580      	push	{r7, lr}
 800295c:	b086      	sub	sp, #24
 800295e:	af00      	add	r7, sp, #0
 8002960:	60f8      	str	r0, [r7, #12]
 8002962:	60b9      	str	r1, [r7, #8]
 8002964:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002966:	2300      	movs	r3, #0
 8002968:	617b      	str	r3, [r7, #20]
 800296a:	e009      	b.n	8002980 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800296c:	68bb      	ldr	r3, [r7, #8]
 800296e:	1c5a      	adds	r2, r3, #1
 8002970:	60ba      	str	r2, [r7, #8]
 8002972:	781b      	ldrb	r3, [r3, #0]
 8002974:	4618      	mov	r0, r3
 8002976:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800297a:	697b      	ldr	r3, [r7, #20]
 800297c:	3301      	adds	r3, #1
 800297e:	617b      	str	r3, [r7, #20]
 8002980:	697a      	ldr	r2, [r7, #20]
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	429a      	cmp	r2, r3
 8002986:	dbf1      	blt.n	800296c <_write+0x12>
  }
  return len;
 8002988:	687b      	ldr	r3, [r7, #4]
}
 800298a:	4618      	mov	r0, r3
 800298c:	3718      	adds	r7, #24
 800298e:	46bd      	mov	sp, r7
 8002990:	bd80      	pop	{r7, pc}

08002992 <_close>:

int _close(int file)
{
 8002992:	b480      	push	{r7}
 8002994:	b083      	sub	sp, #12
 8002996:	af00      	add	r7, sp, #0
 8002998:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800299a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800299e:	4618      	mov	r0, r3
 80029a0:	370c      	adds	r7, #12
 80029a2:	46bd      	mov	sp, r7
 80029a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a8:	4770      	bx	lr

080029aa <_fstat>:


int _fstat(int file, struct stat *st)
{
 80029aa:	b480      	push	{r7}
 80029ac:	b083      	sub	sp, #12
 80029ae:	af00      	add	r7, sp, #0
 80029b0:	6078      	str	r0, [r7, #4]
 80029b2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80029b4:	683b      	ldr	r3, [r7, #0]
 80029b6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80029ba:	605a      	str	r2, [r3, #4]
  return 0;
 80029bc:	2300      	movs	r3, #0
}
 80029be:	4618      	mov	r0, r3
 80029c0:	370c      	adds	r7, #12
 80029c2:	46bd      	mov	sp, r7
 80029c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c8:	4770      	bx	lr

080029ca <_isatty>:

int _isatty(int file)
{
 80029ca:	b480      	push	{r7}
 80029cc:	b083      	sub	sp, #12
 80029ce:	af00      	add	r7, sp, #0
 80029d0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80029d2:	2301      	movs	r3, #1
}
 80029d4:	4618      	mov	r0, r3
 80029d6:	370c      	adds	r7, #12
 80029d8:	46bd      	mov	sp, r7
 80029da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029de:	4770      	bx	lr

080029e0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80029e0:	b480      	push	{r7}
 80029e2:	b085      	sub	sp, #20
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	60f8      	str	r0, [r7, #12]
 80029e8:	60b9      	str	r1, [r7, #8]
 80029ea:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80029ec:	2300      	movs	r3, #0
}
 80029ee:	4618      	mov	r0, r3
 80029f0:	3714      	adds	r7, #20
 80029f2:	46bd      	mov	sp, r7
 80029f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f8:	4770      	bx	lr
	...

080029fc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80029fc:	b580      	push	{r7, lr}
 80029fe:	b086      	sub	sp, #24
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002a04:	4a14      	ldr	r2, [pc, #80]	; (8002a58 <_sbrk+0x5c>)
 8002a06:	4b15      	ldr	r3, [pc, #84]	; (8002a5c <_sbrk+0x60>)
 8002a08:	1ad3      	subs	r3, r2, r3
 8002a0a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002a0c:	697b      	ldr	r3, [r7, #20]
 8002a0e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002a10:	4b13      	ldr	r3, [pc, #76]	; (8002a60 <_sbrk+0x64>)
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d102      	bne.n	8002a1e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002a18:	4b11      	ldr	r3, [pc, #68]	; (8002a60 <_sbrk+0x64>)
 8002a1a:	4a12      	ldr	r2, [pc, #72]	; (8002a64 <_sbrk+0x68>)
 8002a1c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002a1e:	4b10      	ldr	r3, [pc, #64]	; (8002a60 <_sbrk+0x64>)
 8002a20:	681a      	ldr	r2, [r3, #0]
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	4413      	add	r3, r2
 8002a26:	693a      	ldr	r2, [r7, #16]
 8002a28:	429a      	cmp	r2, r3
 8002a2a:	d207      	bcs.n	8002a3c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002a2c:	f00c ff06 	bl	800f83c <__errno>
 8002a30:	4603      	mov	r3, r0
 8002a32:	220c      	movs	r2, #12
 8002a34:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002a36:	f04f 33ff 	mov.w	r3, #4294967295
 8002a3a:	e009      	b.n	8002a50 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002a3c:	4b08      	ldr	r3, [pc, #32]	; (8002a60 <_sbrk+0x64>)
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002a42:	4b07      	ldr	r3, [pc, #28]	; (8002a60 <_sbrk+0x64>)
 8002a44:	681a      	ldr	r2, [r3, #0]
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	4413      	add	r3, r2
 8002a4a:	4a05      	ldr	r2, [pc, #20]	; (8002a60 <_sbrk+0x64>)
 8002a4c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002a4e:	68fb      	ldr	r3, [r7, #12]
}
 8002a50:	4618      	mov	r0, r3
 8002a52:	3718      	adds	r7, #24
 8002a54:	46bd      	mov	sp, r7
 8002a56:	bd80      	pop	{r7, pc}
 8002a58:	20020000 	.word	0x20020000
 8002a5c:	00000400 	.word	0x00000400
 8002a60:	200004c8 	.word	0x200004c8
 8002a64:	200023e8 	.word	0x200023e8

08002a68 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002a68:	b480      	push	{r7}
 8002a6a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002a6c:	4b06      	ldr	r3, [pc, #24]	; (8002a88 <SystemInit+0x20>)
 8002a6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a72:	4a05      	ldr	r2, [pc, #20]	; (8002a88 <SystemInit+0x20>)
 8002a74:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002a78:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002a7c:	bf00      	nop
 8002a7e:	46bd      	mov	sp, r7
 8002a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a84:	4770      	bx	lr
 8002a86:	bf00      	nop
 8002a88:	e000ed00 	.word	0xe000ed00

08002a8c <MX_TIM2_Init>:
DMA_HandleTypeDef hdma_tim5_ch2;
DMA_HandleTypeDef hdma_tim5_ch4_trig;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002a8c:	b580      	push	{r7, lr}
 8002a8e:	b08a      	sub	sp, #40	; 0x28
 8002a90:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002a92:	f107 0320 	add.w	r3, r7, #32
 8002a96:	2200      	movs	r2, #0
 8002a98:	601a      	str	r2, [r3, #0]
 8002a9a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002a9c:	1d3b      	adds	r3, r7, #4
 8002a9e:	2200      	movs	r2, #0
 8002aa0:	601a      	str	r2, [r3, #0]
 8002aa2:	605a      	str	r2, [r3, #4]
 8002aa4:	609a      	str	r2, [r3, #8]
 8002aa6:	60da      	str	r2, [r3, #12]
 8002aa8:	611a      	str	r2, [r3, #16]
 8002aaa:	615a      	str	r2, [r3, #20]
 8002aac:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002aae:	4b27      	ldr	r3, [pc, #156]	; (8002b4c <MX_TIM2_Init+0xc0>)
 8002ab0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002ab4:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8002ab6:	4b25      	ldr	r3, [pc, #148]	; (8002b4c <MX_TIM2_Init+0xc0>)
 8002ab8:	2200      	movs	r2, #0
 8002aba:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002abc:	4b23      	ldr	r3, [pc, #140]	; (8002b4c <MX_TIM2_Init+0xc0>)
 8002abe:	2200      	movs	r2, #0
 8002ac0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0;
 8002ac2:	4b22      	ldr	r3, [pc, #136]	; (8002b4c <MX_TIM2_Init+0xc0>)
 8002ac4:	2200      	movs	r2, #0
 8002ac6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002ac8:	4b20      	ldr	r3, [pc, #128]	; (8002b4c <MX_TIM2_Init+0xc0>)
 8002aca:	2200      	movs	r2, #0
 8002acc:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002ace:	4b1f      	ldr	r3, [pc, #124]	; (8002b4c <MX_TIM2_Init+0xc0>)
 8002ad0:	2200      	movs	r2, #0
 8002ad2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8002ad4:	481d      	ldr	r0, [pc, #116]	; (8002b4c <MX_TIM2_Init+0xc0>)
 8002ad6:	f008 f81b 	bl	800ab10 <HAL_TIM_PWM_Init>
 8002ada:	4603      	mov	r3, r0
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d001      	beq.n	8002ae4 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 8002ae0:	f7ff f924 	bl	8001d2c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002ae4:	2300      	movs	r3, #0
 8002ae6:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002ae8:	2300      	movs	r3, #0
 8002aea:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002aec:	f107 0320 	add.w	r3, r7, #32
 8002af0:	4619      	mov	r1, r3
 8002af2:	4816      	ldr	r0, [pc, #88]	; (8002b4c <MX_TIM2_Init+0xc0>)
 8002af4:	f008 fc5c 	bl	800b3b0 <HAL_TIMEx_MasterConfigSynchronization>
 8002af8:	4603      	mov	r3, r0
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d001      	beq.n	8002b02 <MX_TIM2_Init+0x76>
  {
    Error_Handler();
 8002afe:	f7ff f915 	bl	8001d2c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002b02:	2360      	movs	r3, #96	; 0x60
 8002b04:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002b06:	2300      	movs	r3, #0
 8002b08:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002b0a:	2300      	movs	r3, #0
 8002b0c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002b0e:	2300      	movs	r3, #0
 8002b10:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002b12:	1d3b      	adds	r3, r7, #4
 8002b14:	2200      	movs	r2, #0
 8002b16:	4619      	mov	r1, r3
 8002b18:	480c      	ldr	r0, [pc, #48]	; (8002b4c <MX_TIM2_Init+0xc0>)
 8002b1a:	f008 f911 	bl	800ad40 <HAL_TIM_PWM_ConfigChannel>
 8002b1e:	4603      	mov	r3, r0
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d001      	beq.n	8002b28 <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 8002b24:	f7ff f902 	bl	8001d2c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002b28:	1d3b      	adds	r3, r7, #4
 8002b2a:	2208      	movs	r2, #8
 8002b2c:	4619      	mov	r1, r3
 8002b2e:	4807      	ldr	r0, [pc, #28]	; (8002b4c <MX_TIM2_Init+0xc0>)
 8002b30:	f008 f906 	bl	800ad40 <HAL_TIM_PWM_ConfigChannel>
 8002b34:	4603      	mov	r3, r0
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d001      	beq.n	8002b3e <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8002b3a:	f7ff f8f7 	bl	8001d2c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8002b3e:	4803      	ldr	r0, [pc, #12]	; (8002b4c <MX_TIM2_Init+0xc0>)
 8002b40:	f000 f9a4 	bl	8002e8c <HAL_TIM_MspPostInit>

}
 8002b44:	bf00      	nop
 8002b46:	3728      	adds	r7, #40	; 0x28
 8002b48:	46bd      	mov	sp, r7
 8002b4a:	bd80      	pop	{r7, pc}
 8002b4c:	200004cc 	.word	0x200004cc

08002b50 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8002b50:	b580      	push	{r7, lr}
 8002b52:	b08a      	sub	sp, #40	; 0x28
 8002b54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002b56:	f107 0320 	add.w	r3, r7, #32
 8002b5a:	2200      	movs	r2, #0
 8002b5c:	601a      	str	r2, [r3, #0]
 8002b5e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002b60:	1d3b      	adds	r3, r7, #4
 8002b62:	2200      	movs	r2, #0
 8002b64:	601a      	str	r2, [r3, #0]
 8002b66:	605a      	str	r2, [r3, #4]
 8002b68:	609a      	str	r2, [r3, #8]
 8002b6a:	60da      	str	r2, [r3, #12]
 8002b6c:	611a      	str	r2, [r3, #16]
 8002b6e:	615a      	str	r2, [r3, #20]
 8002b70:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8002b72:	4b27      	ldr	r3, [pc, #156]	; (8002c10 <MX_TIM5_Init+0xc0>)
 8002b74:	4a27      	ldr	r2, [pc, #156]	; (8002c14 <MX_TIM5_Init+0xc4>)
 8002b76:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8002b78:	4b25      	ldr	r3, [pc, #148]	; (8002c10 <MX_TIM5_Init+0xc0>)
 8002b7a:	2200      	movs	r2, #0
 8002b7c:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002b7e:	4b24      	ldr	r3, [pc, #144]	; (8002c10 <MX_TIM5_Init+0xc0>)
 8002b80:	2200      	movs	r2, #0
 8002b82:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 0;
 8002b84:	4b22      	ldr	r3, [pc, #136]	; (8002c10 <MX_TIM5_Init+0xc0>)
 8002b86:	2200      	movs	r2, #0
 8002b88:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002b8a:	4b21      	ldr	r3, [pc, #132]	; (8002c10 <MX_TIM5_Init+0xc0>)
 8002b8c:	2200      	movs	r2, #0
 8002b8e:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002b90:	4b1f      	ldr	r3, [pc, #124]	; (8002c10 <MX_TIM5_Init+0xc0>)
 8002b92:	2200      	movs	r2, #0
 8002b94:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8002b96:	481e      	ldr	r0, [pc, #120]	; (8002c10 <MX_TIM5_Init+0xc0>)
 8002b98:	f007 ffba 	bl	800ab10 <HAL_TIM_PWM_Init>
 8002b9c:	4603      	mov	r3, r0
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d001      	beq.n	8002ba6 <MX_TIM5_Init+0x56>
  {
    Error_Handler();
 8002ba2:	f7ff f8c3 	bl	8001d2c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002ba6:	2300      	movs	r3, #0
 8002ba8:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002baa:	2300      	movs	r3, #0
 8002bac:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8002bae:	f107 0320 	add.w	r3, r7, #32
 8002bb2:	4619      	mov	r1, r3
 8002bb4:	4816      	ldr	r0, [pc, #88]	; (8002c10 <MX_TIM5_Init+0xc0>)
 8002bb6:	f008 fbfb 	bl	800b3b0 <HAL_TIMEx_MasterConfigSynchronization>
 8002bba:	4603      	mov	r3, r0
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d001      	beq.n	8002bc4 <MX_TIM5_Init+0x74>
  {
    Error_Handler();
 8002bc0:	f7ff f8b4 	bl	8001d2c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002bc4:	2360      	movs	r3, #96	; 0x60
 8002bc6:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002bc8:	2300      	movs	r3, #0
 8002bca:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002bcc:	2300      	movs	r3, #0
 8002bce:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002bd0:	2300      	movs	r3, #0
 8002bd2:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002bd4:	1d3b      	adds	r3, r7, #4
 8002bd6:	2204      	movs	r2, #4
 8002bd8:	4619      	mov	r1, r3
 8002bda:	480d      	ldr	r0, [pc, #52]	; (8002c10 <MX_TIM5_Init+0xc0>)
 8002bdc:	f008 f8b0 	bl	800ad40 <HAL_TIM_PWM_ConfigChannel>
 8002be0:	4603      	mov	r3, r0
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d001      	beq.n	8002bea <MX_TIM5_Init+0x9a>
  {
    Error_Handler();
 8002be6:	f7ff f8a1 	bl	8001d2c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002bea:	1d3b      	adds	r3, r7, #4
 8002bec:	220c      	movs	r2, #12
 8002bee:	4619      	mov	r1, r3
 8002bf0:	4807      	ldr	r0, [pc, #28]	; (8002c10 <MX_TIM5_Init+0xc0>)
 8002bf2:	f008 f8a5 	bl	800ad40 <HAL_TIM_PWM_ConfigChannel>
 8002bf6:	4603      	mov	r3, r0
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d001      	beq.n	8002c00 <MX_TIM5_Init+0xb0>
  {
    Error_Handler();
 8002bfc:	f7ff f896 	bl	8001d2c <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8002c00:	4803      	ldr	r0, [pc, #12]	; (8002c10 <MX_TIM5_Init+0xc0>)
 8002c02:	f000 f943 	bl	8002e8c <HAL_TIM_MspPostInit>

}
 8002c06:	bf00      	nop
 8002c08:	3728      	adds	r7, #40	; 0x28
 8002c0a:	46bd      	mov	sp, r7
 8002c0c:	bd80      	pop	{r7, pc}
 8002c0e:	bf00      	nop
 8002c10:	20000514 	.word	0x20000514
 8002c14:	40000c00 	.word	0x40000c00

08002c18 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8002c18:	b580      	push	{r7, lr}
 8002c1a:	b084      	sub	sp, #16
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM2)
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c28:	f040 8089 	bne.w	8002d3e <HAL_TIM_PWM_MspInit+0x126>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002c2c:	2300      	movs	r3, #0
 8002c2e:	60fb      	str	r3, [r7, #12]
 8002c30:	4b8c      	ldr	r3, [pc, #560]	; (8002e64 <HAL_TIM_PWM_MspInit+0x24c>)
 8002c32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c34:	4a8b      	ldr	r2, [pc, #556]	; (8002e64 <HAL_TIM_PWM_MspInit+0x24c>)
 8002c36:	f043 0301 	orr.w	r3, r3, #1
 8002c3a:	6413      	str	r3, [r2, #64]	; 0x40
 8002c3c:	4b89      	ldr	r3, [pc, #548]	; (8002e64 <HAL_TIM_PWM_MspInit+0x24c>)
 8002c3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c40:	f003 0301 	and.w	r3, r3, #1
 8002c44:	60fb      	str	r3, [r7, #12]
 8002c46:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 DMA Init */
    /* TIM2_CH1 Init */
    hdma_tim2_ch1.Instance = DMA1_Stream5;
 8002c48:	4b87      	ldr	r3, [pc, #540]	; (8002e68 <HAL_TIM_PWM_MspInit+0x250>)
 8002c4a:	4a88      	ldr	r2, [pc, #544]	; (8002e6c <HAL_TIM_PWM_MspInit+0x254>)
 8002c4c:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch1.Init.Channel = DMA_CHANNEL_3;
 8002c4e:	4b86      	ldr	r3, [pc, #536]	; (8002e68 <HAL_TIM_PWM_MspInit+0x250>)
 8002c50:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8002c54:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002c56:	4b84      	ldr	r3, [pc, #528]	; (8002e68 <HAL_TIM_PWM_MspInit+0x250>)
 8002c58:	2240      	movs	r2, #64	; 0x40
 8002c5a:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002c5c:	4b82      	ldr	r3, [pc, #520]	; (8002e68 <HAL_TIM_PWM_MspInit+0x250>)
 8002c5e:	2200      	movs	r2, #0
 8002c60:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8002c62:	4b81      	ldr	r3, [pc, #516]	; (8002e68 <HAL_TIM_PWM_MspInit+0x250>)
 8002c64:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002c68:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002c6a:	4b7f      	ldr	r3, [pc, #508]	; (8002e68 <HAL_TIM_PWM_MspInit+0x250>)
 8002c6c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002c70:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002c72:	4b7d      	ldr	r3, [pc, #500]	; (8002e68 <HAL_TIM_PWM_MspInit+0x250>)
 8002c74:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002c78:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch1.Init.Mode = DMA_NORMAL;
 8002c7a:	4b7b      	ldr	r3, [pc, #492]	; (8002e68 <HAL_TIM_PWM_MspInit+0x250>)
 8002c7c:	2200      	movs	r2, #0
 8002c7e:	61da      	str	r2, [r3, #28]
    hdma_tim2_ch1.Init.Priority = DMA_PRIORITY_HIGH;
 8002c80:	4b79      	ldr	r3, [pc, #484]	; (8002e68 <HAL_TIM_PWM_MspInit+0x250>)
 8002c82:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002c86:	621a      	str	r2, [r3, #32]
    hdma_tim2_ch1.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8002c88:	4b77      	ldr	r3, [pc, #476]	; (8002e68 <HAL_TIM_PWM_MspInit+0x250>)
 8002c8a:	2204      	movs	r2, #4
 8002c8c:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_tim2_ch1.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_1QUARTERFULL;
 8002c8e:	4b76      	ldr	r3, [pc, #472]	; (8002e68 <HAL_TIM_PWM_MspInit+0x250>)
 8002c90:	2200      	movs	r2, #0
 8002c92:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_tim2_ch1.Init.MemBurst = DMA_MBURST_SINGLE;
 8002c94:	4b74      	ldr	r3, [pc, #464]	; (8002e68 <HAL_TIM_PWM_MspInit+0x250>)
 8002c96:	2200      	movs	r2, #0
 8002c98:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_tim2_ch1.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8002c9a:	4b73      	ldr	r3, [pc, #460]	; (8002e68 <HAL_TIM_PWM_MspInit+0x250>)
 8002c9c:	2200      	movs	r2, #0
 8002c9e:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_tim2_ch1) != HAL_OK)
 8002ca0:	4871      	ldr	r0, [pc, #452]	; (8002e68 <HAL_TIM_PWM_MspInit+0x250>)
 8002ca2:	f003 fdc5 	bl	8006830 <HAL_DMA_Init>
 8002ca6:	4603      	mov	r3, r0
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d001      	beq.n	8002cb0 <HAL_TIM_PWM_MspInit+0x98>
    {
      Error_Handler();
 8002cac:	f7ff f83e 	bl	8001d2c <Error_Handler>
    }

    __HAL_LINKDMA(tim_pwmHandle,hdma[TIM_DMA_ID_CC1],hdma_tim2_ch1);
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	4a6d      	ldr	r2, [pc, #436]	; (8002e68 <HAL_TIM_PWM_MspInit+0x250>)
 8002cb4:	625a      	str	r2, [r3, #36]	; 0x24
 8002cb6:	4a6c      	ldr	r2, [pc, #432]	; (8002e68 <HAL_TIM_PWM_MspInit+0x250>)
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	6393      	str	r3, [r2, #56]	; 0x38

    /* TIM2_UP_CH3 Init */
    hdma_tim2_up_ch3.Instance = DMA1_Stream1;
 8002cbc:	4b6c      	ldr	r3, [pc, #432]	; (8002e70 <HAL_TIM_PWM_MspInit+0x258>)
 8002cbe:	4a6d      	ldr	r2, [pc, #436]	; (8002e74 <HAL_TIM_PWM_MspInit+0x25c>)
 8002cc0:	601a      	str	r2, [r3, #0]
    hdma_tim2_up_ch3.Init.Channel = DMA_CHANNEL_3;
 8002cc2:	4b6b      	ldr	r3, [pc, #428]	; (8002e70 <HAL_TIM_PWM_MspInit+0x258>)
 8002cc4:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8002cc8:	605a      	str	r2, [r3, #4]
    hdma_tim2_up_ch3.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002cca:	4b69      	ldr	r3, [pc, #420]	; (8002e70 <HAL_TIM_PWM_MspInit+0x258>)
 8002ccc:	2240      	movs	r2, #64	; 0x40
 8002cce:	609a      	str	r2, [r3, #8]
    hdma_tim2_up_ch3.Init.PeriphInc = DMA_PINC_DISABLE;
 8002cd0:	4b67      	ldr	r3, [pc, #412]	; (8002e70 <HAL_TIM_PWM_MspInit+0x258>)
 8002cd2:	2200      	movs	r2, #0
 8002cd4:	60da      	str	r2, [r3, #12]
    hdma_tim2_up_ch3.Init.MemInc = DMA_MINC_ENABLE;
 8002cd6:	4b66      	ldr	r3, [pc, #408]	; (8002e70 <HAL_TIM_PWM_MspInit+0x258>)
 8002cd8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002cdc:	611a      	str	r2, [r3, #16]
    hdma_tim2_up_ch3.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002cde:	4b64      	ldr	r3, [pc, #400]	; (8002e70 <HAL_TIM_PWM_MspInit+0x258>)
 8002ce0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002ce4:	615a      	str	r2, [r3, #20]
    hdma_tim2_up_ch3.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002ce6:	4b62      	ldr	r3, [pc, #392]	; (8002e70 <HAL_TIM_PWM_MspInit+0x258>)
 8002ce8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002cec:	619a      	str	r2, [r3, #24]
    hdma_tim2_up_ch3.Init.Mode = DMA_NORMAL;
 8002cee:	4b60      	ldr	r3, [pc, #384]	; (8002e70 <HAL_TIM_PWM_MspInit+0x258>)
 8002cf0:	2200      	movs	r2, #0
 8002cf2:	61da      	str	r2, [r3, #28]
    hdma_tim2_up_ch3.Init.Priority = DMA_PRIORITY_HIGH;
 8002cf4:	4b5e      	ldr	r3, [pc, #376]	; (8002e70 <HAL_TIM_PWM_MspInit+0x258>)
 8002cf6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002cfa:	621a      	str	r2, [r3, #32]
    hdma_tim2_up_ch3.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8002cfc:	4b5c      	ldr	r3, [pc, #368]	; (8002e70 <HAL_TIM_PWM_MspInit+0x258>)
 8002cfe:	2204      	movs	r2, #4
 8002d00:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_tim2_up_ch3.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_1QUARTERFULL;
 8002d02:	4b5b      	ldr	r3, [pc, #364]	; (8002e70 <HAL_TIM_PWM_MspInit+0x258>)
 8002d04:	2200      	movs	r2, #0
 8002d06:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_tim2_up_ch3.Init.MemBurst = DMA_MBURST_SINGLE;
 8002d08:	4b59      	ldr	r3, [pc, #356]	; (8002e70 <HAL_TIM_PWM_MspInit+0x258>)
 8002d0a:	2200      	movs	r2, #0
 8002d0c:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_tim2_up_ch3.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8002d0e:	4b58      	ldr	r3, [pc, #352]	; (8002e70 <HAL_TIM_PWM_MspInit+0x258>)
 8002d10:	2200      	movs	r2, #0
 8002d12:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_tim2_up_ch3) != HAL_OK)
 8002d14:	4856      	ldr	r0, [pc, #344]	; (8002e70 <HAL_TIM_PWM_MspInit+0x258>)
 8002d16:	f003 fd8b 	bl	8006830 <HAL_DMA_Init>
 8002d1a:	4603      	mov	r3, r0
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d001      	beq.n	8002d24 <HAL_TIM_PWM_MspInit+0x10c>
    {
      Error_Handler();
 8002d20:	f7ff f804 	bl	8001d2c <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one stream to perform all the requested DMAs. */
    __HAL_LINKDMA(tim_pwmHandle,hdma[TIM_DMA_ID_UPDATE],hdma_tim2_up_ch3);
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	4a52      	ldr	r2, [pc, #328]	; (8002e70 <HAL_TIM_PWM_MspInit+0x258>)
 8002d28:	621a      	str	r2, [r3, #32]
 8002d2a:	4a51      	ldr	r2, [pc, #324]	; (8002e70 <HAL_TIM_PWM_MspInit+0x258>)
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(tim_pwmHandle,hdma[TIM_DMA_ID_CC3],hdma_tim2_up_ch3);
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	4a4f      	ldr	r2, [pc, #316]	; (8002e70 <HAL_TIM_PWM_MspInit+0x258>)
 8002d34:	62da      	str	r2, [r3, #44]	; 0x2c
 8002d36:	4a4e      	ldr	r2, [pc, #312]	; (8002e70 <HAL_TIM_PWM_MspInit+0x258>)
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
}
 8002d3c:	e08d      	b.n	8002e5a <HAL_TIM_PWM_MspInit+0x242>
  else if(tim_pwmHandle->Instance==TIM5)
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	4a4d      	ldr	r2, [pc, #308]	; (8002e78 <HAL_TIM_PWM_MspInit+0x260>)
 8002d44:	4293      	cmp	r3, r2
 8002d46:	f040 8088 	bne.w	8002e5a <HAL_TIM_PWM_MspInit+0x242>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8002d4a:	2300      	movs	r3, #0
 8002d4c:	60bb      	str	r3, [r7, #8]
 8002d4e:	4b45      	ldr	r3, [pc, #276]	; (8002e64 <HAL_TIM_PWM_MspInit+0x24c>)
 8002d50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d52:	4a44      	ldr	r2, [pc, #272]	; (8002e64 <HAL_TIM_PWM_MspInit+0x24c>)
 8002d54:	f043 0308 	orr.w	r3, r3, #8
 8002d58:	6413      	str	r3, [r2, #64]	; 0x40
 8002d5a:	4b42      	ldr	r3, [pc, #264]	; (8002e64 <HAL_TIM_PWM_MspInit+0x24c>)
 8002d5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d5e:	f003 0308 	and.w	r3, r3, #8
 8002d62:	60bb      	str	r3, [r7, #8]
 8002d64:	68bb      	ldr	r3, [r7, #8]
    hdma_tim5_ch2.Instance = DMA1_Stream4;
 8002d66:	4b45      	ldr	r3, [pc, #276]	; (8002e7c <HAL_TIM_PWM_MspInit+0x264>)
 8002d68:	4a45      	ldr	r2, [pc, #276]	; (8002e80 <HAL_TIM_PWM_MspInit+0x268>)
 8002d6a:	601a      	str	r2, [r3, #0]
    hdma_tim5_ch2.Init.Channel = DMA_CHANNEL_6;
 8002d6c:	4b43      	ldr	r3, [pc, #268]	; (8002e7c <HAL_TIM_PWM_MspInit+0x264>)
 8002d6e:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 8002d72:	605a      	str	r2, [r3, #4]
    hdma_tim5_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002d74:	4b41      	ldr	r3, [pc, #260]	; (8002e7c <HAL_TIM_PWM_MspInit+0x264>)
 8002d76:	2240      	movs	r2, #64	; 0x40
 8002d78:	609a      	str	r2, [r3, #8]
    hdma_tim5_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 8002d7a:	4b40      	ldr	r3, [pc, #256]	; (8002e7c <HAL_TIM_PWM_MspInit+0x264>)
 8002d7c:	2200      	movs	r2, #0
 8002d7e:	60da      	str	r2, [r3, #12]
    hdma_tim5_ch2.Init.MemInc = DMA_MINC_ENABLE;
 8002d80:	4b3e      	ldr	r3, [pc, #248]	; (8002e7c <HAL_TIM_PWM_MspInit+0x264>)
 8002d82:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002d86:	611a      	str	r2, [r3, #16]
    hdma_tim5_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002d88:	4b3c      	ldr	r3, [pc, #240]	; (8002e7c <HAL_TIM_PWM_MspInit+0x264>)
 8002d8a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002d8e:	615a      	str	r2, [r3, #20]
    hdma_tim5_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002d90:	4b3a      	ldr	r3, [pc, #232]	; (8002e7c <HAL_TIM_PWM_MspInit+0x264>)
 8002d92:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002d96:	619a      	str	r2, [r3, #24]
    hdma_tim5_ch2.Init.Mode = DMA_NORMAL;
 8002d98:	4b38      	ldr	r3, [pc, #224]	; (8002e7c <HAL_TIM_PWM_MspInit+0x264>)
 8002d9a:	2200      	movs	r2, #0
 8002d9c:	61da      	str	r2, [r3, #28]
    hdma_tim5_ch2.Init.Priority = DMA_PRIORITY_HIGH;
 8002d9e:	4b37      	ldr	r3, [pc, #220]	; (8002e7c <HAL_TIM_PWM_MspInit+0x264>)
 8002da0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002da4:	621a      	str	r2, [r3, #32]
    hdma_tim5_ch2.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8002da6:	4b35      	ldr	r3, [pc, #212]	; (8002e7c <HAL_TIM_PWM_MspInit+0x264>)
 8002da8:	2204      	movs	r2, #4
 8002daa:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_tim5_ch2.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_1QUARTERFULL;
 8002dac:	4b33      	ldr	r3, [pc, #204]	; (8002e7c <HAL_TIM_PWM_MspInit+0x264>)
 8002dae:	2200      	movs	r2, #0
 8002db0:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_tim5_ch2.Init.MemBurst = DMA_MBURST_SINGLE;
 8002db2:	4b32      	ldr	r3, [pc, #200]	; (8002e7c <HAL_TIM_PWM_MspInit+0x264>)
 8002db4:	2200      	movs	r2, #0
 8002db6:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_tim5_ch2.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8002db8:	4b30      	ldr	r3, [pc, #192]	; (8002e7c <HAL_TIM_PWM_MspInit+0x264>)
 8002dba:	2200      	movs	r2, #0
 8002dbc:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_tim5_ch2) != HAL_OK)
 8002dbe:	482f      	ldr	r0, [pc, #188]	; (8002e7c <HAL_TIM_PWM_MspInit+0x264>)
 8002dc0:	f003 fd36 	bl	8006830 <HAL_DMA_Init>
 8002dc4:	4603      	mov	r3, r0
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d001      	beq.n	8002dce <HAL_TIM_PWM_MspInit+0x1b6>
      Error_Handler();
 8002dca:	f7fe ffaf 	bl	8001d2c <Error_Handler>
    __HAL_LINKDMA(tim_pwmHandle,hdma[TIM_DMA_ID_CC2],hdma_tim5_ch2);
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	4a2a      	ldr	r2, [pc, #168]	; (8002e7c <HAL_TIM_PWM_MspInit+0x264>)
 8002dd2:	629a      	str	r2, [r3, #40]	; 0x28
 8002dd4:	4a29      	ldr	r2, [pc, #164]	; (8002e7c <HAL_TIM_PWM_MspInit+0x264>)
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_tim5_ch4_trig.Instance = DMA1_Stream3;
 8002dda:	4b2a      	ldr	r3, [pc, #168]	; (8002e84 <HAL_TIM_PWM_MspInit+0x26c>)
 8002ddc:	4a2a      	ldr	r2, [pc, #168]	; (8002e88 <HAL_TIM_PWM_MspInit+0x270>)
 8002dde:	601a      	str	r2, [r3, #0]
    hdma_tim5_ch4_trig.Init.Channel = DMA_CHANNEL_6;
 8002de0:	4b28      	ldr	r3, [pc, #160]	; (8002e84 <HAL_TIM_PWM_MspInit+0x26c>)
 8002de2:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 8002de6:	605a      	str	r2, [r3, #4]
    hdma_tim5_ch4_trig.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002de8:	4b26      	ldr	r3, [pc, #152]	; (8002e84 <HAL_TIM_PWM_MspInit+0x26c>)
 8002dea:	2240      	movs	r2, #64	; 0x40
 8002dec:	609a      	str	r2, [r3, #8]
    hdma_tim5_ch4_trig.Init.PeriphInc = DMA_PINC_DISABLE;
 8002dee:	4b25      	ldr	r3, [pc, #148]	; (8002e84 <HAL_TIM_PWM_MspInit+0x26c>)
 8002df0:	2200      	movs	r2, #0
 8002df2:	60da      	str	r2, [r3, #12]
    hdma_tim5_ch4_trig.Init.MemInc = DMA_MINC_ENABLE;
 8002df4:	4b23      	ldr	r3, [pc, #140]	; (8002e84 <HAL_TIM_PWM_MspInit+0x26c>)
 8002df6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002dfa:	611a      	str	r2, [r3, #16]
    hdma_tim5_ch4_trig.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002dfc:	4b21      	ldr	r3, [pc, #132]	; (8002e84 <HAL_TIM_PWM_MspInit+0x26c>)
 8002dfe:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002e02:	615a      	str	r2, [r3, #20]
    hdma_tim5_ch4_trig.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002e04:	4b1f      	ldr	r3, [pc, #124]	; (8002e84 <HAL_TIM_PWM_MspInit+0x26c>)
 8002e06:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002e0a:	619a      	str	r2, [r3, #24]
    hdma_tim5_ch4_trig.Init.Mode = DMA_NORMAL;
 8002e0c:	4b1d      	ldr	r3, [pc, #116]	; (8002e84 <HAL_TIM_PWM_MspInit+0x26c>)
 8002e0e:	2200      	movs	r2, #0
 8002e10:	61da      	str	r2, [r3, #28]
    hdma_tim5_ch4_trig.Init.Priority = DMA_PRIORITY_HIGH;
 8002e12:	4b1c      	ldr	r3, [pc, #112]	; (8002e84 <HAL_TIM_PWM_MspInit+0x26c>)
 8002e14:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002e18:	621a      	str	r2, [r3, #32]
    hdma_tim5_ch4_trig.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8002e1a:	4b1a      	ldr	r3, [pc, #104]	; (8002e84 <HAL_TIM_PWM_MspInit+0x26c>)
 8002e1c:	2204      	movs	r2, #4
 8002e1e:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_tim5_ch4_trig.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_1QUARTERFULL;
 8002e20:	4b18      	ldr	r3, [pc, #96]	; (8002e84 <HAL_TIM_PWM_MspInit+0x26c>)
 8002e22:	2200      	movs	r2, #0
 8002e24:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_tim5_ch4_trig.Init.MemBurst = DMA_MBURST_SINGLE;
 8002e26:	4b17      	ldr	r3, [pc, #92]	; (8002e84 <HAL_TIM_PWM_MspInit+0x26c>)
 8002e28:	2200      	movs	r2, #0
 8002e2a:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_tim5_ch4_trig.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8002e2c:	4b15      	ldr	r3, [pc, #84]	; (8002e84 <HAL_TIM_PWM_MspInit+0x26c>)
 8002e2e:	2200      	movs	r2, #0
 8002e30:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_tim5_ch4_trig) != HAL_OK)
 8002e32:	4814      	ldr	r0, [pc, #80]	; (8002e84 <HAL_TIM_PWM_MspInit+0x26c>)
 8002e34:	f003 fcfc 	bl	8006830 <HAL_DMA_Init>
 8002e38:	4603      	mov	r3, r0
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d001      	beq.n	8002e42 <HAL_TIM_PWM_MspInit+0x22a>
      Error_Handler();
 8002e3e:	f7fe ff75 	bl	8001d2c <Error_Handler>
    __HAL_LINKDMA(tim_pwmHandle,hdma[TIM_DMA_ID_CC4],hdma_tim5_ch4_trig);
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	4a0f      	ldr	r2, [pc, #60]	; (8002e84 <HAL_TIM_PWM_MspInit+0x26c>)
 8002e46:	631a      	str	r2, [r3, #48]	; 0x30
 8002e48:	4a0e      	ldr	r2, [pc, #56]	; (8002e84 <HAL_TIM_PWM_MspInit+0x26c>)
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(tim_pwmHandle,hdma[TIM_DMA_ID_TRIGGER],hdma_tim5_ch4_trig);
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	4a0c      	ldr	r2, [pc, #48]	; (8002e84 <HAL_TIM_PWM_MspInit+0x26c>)
 8002e52:	639a      	str	r2, [r3, #56]	; 0x38
 8002e54:	4a0b      	ldr	r2, [pc, #44]	; (8002e84 <HAL_TIM_PWM_MspInit+0x26c>)
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	6393      	str	r3, [r2, #56]	; 0x38
}
 8002e5a:	bf00      	nop
 8002e5c:	3710      	adds	r7, #16
 8002e5e:	46bd      	mov	sp, r7
 8002e60:	bd80      	pop	{r7, pc}
 8002e62:	bf00      	nop
 8002e64:	40023800 	.word	0x40023800
 8002e68:	2000055c 	.word	0x2000055c
 8002e6c:	40026088 	.word	0x40026088
 8002e70:	200005bc 	.word	0x200005bc
 8002e74:	40026028 	.word	0x40026028
 8002e78:	40000c00 	.word	0x40000c00
 8002e7c:	2000061c 	.word	0x2000061c
 8002e80:	40026070 	.word	0x40026070
 8002e84:	2000067c 	.word	0x2000067c
 8002e88:	40026058 	.word	0x40026058

08002e8c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002e8c:	b580      	push	{r7, lr}
 8002e8e:	b08a      	sub	sp, #40	; 0x28
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e94:	f107 0314 	add.w	r3, r7, #20
 8002e98:	2200      	movs	r2, #0
 8002e9a:	601a      	str	r2, [r3, #0]
 8002e9c:	605a      	str	r2, [r3, #4]
 8002e9e:	609a      	str	r2, [r3, #8]
 8002ea0:	60da      	str	r2, [r3, #12]
 8002ea2:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002eac:	d11e      	bne.n	8002eec <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002eae:	2300      	movs	r3, #0
 8002eb0:	613b      	str	r3, [r7, #16]
 8002eb2:	4b22      	ldr	r3, [pc, #136]	; (8002f3c <HAL_TIM_MspPostInit+0xb0>)
 8002eb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eb6:	4a21      	ldr	r2, [pc, #132]	; (8002f3c <HAL_TIM_MspPostInit+0xb0>)
 8002eb8:	f043 0301 	orr.w	r3, r3, #1
 8002ebc:	6313      	str	r3, [r2, #48]	; 0x30
 8002ebe:	4b1f      	ldr	r3, [pc, #124]	; (8002f3c <HAL_TIM_MspPostInit+0xb0>)
 8002ec0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ec2:	f003 0301 	and.w	r3, r3, #1
 8002ec6:	613b      	str	r3, [r7, #16]
 8002ec8:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA2     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2;
 8002eca:	2305      	movs	r3, #5
 8002ecc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ece:	2302      	movs	r3, #2
 8002ed0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ed2:	2300      	movs	r3, #0
 8002ed4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ed6:	2300      	movs	r3, #0
 8002ed8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002eda:	2301      	movs	r3, #1
 8002edc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ede:	f107 0314 	add.w	r3, r7, #20
 8002ee2:	4619      	mov	r1, r3
 8002ee4:	4816      	ldr	r0, [pc, #88]	; (8002f40 <HAL_TIM_MspPostInit+0xb4>)
 8002ee6:	f003 ff8d 	bl	8006e04 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 8002eea:	e022      	b.n	8002f32 <HAL_TIM_MspPostInit+0xa6>
  else if(timHandle->Instance==TIM5)
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	4a14      	ldr	r2, [pc, #80]	; (8002f44 <HAL_TIM_MspPostInit+0xb8>)
 8002ef2:	4293      	cmp	r3, r2
 8002ef4:	d11d      	bne.n	8002f32 <HAL_TIM_MspPostInit+0xa6>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ef6:	2300      	movs	r3, #0
 8002ef8:	60fb      	str	r3, [r7, #12]
 8002efa:	4b10      	ldr	r3, [pc, #64]	; (8002f3c <HAL_TIM_MspPostInit+0xb0>)
 8002efc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002efe:	4a0f      	ldr	r2, [pc, #60]	; (8002f3c <HAL_TIM_MspPostInit+0xb0>)
 8002f00:	f043 0301 	orr.w	r3, r3, #1
 8002f04:	6313      	str	r3, [r2, #48]	; 0x30
 8002f06:	4b0d      	ldr	r3, [pc, #52]	; (8002f3c <HAL_TIM_MspPostInit+0xb0>)
 8002f08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f0a:	f003 0301 	and.w	r3, r3, #1
 8002f0e:	60fb      	str	r3, [r7, #12]
 8002f10:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_3;
 8002f12:	230a      	movs	r3, #10
 8002f14:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f16:	2302      	movs	r3, #2
 8002f18:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f1a:	2300      	movs	r3, #0
 8002f1c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f1e:	2300      	movs	r3, #0
 8002f20:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8002f22:	2302      	movs	r3, #2
 8002f24:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f26:	f107 0314 	add.w	r3, r7, #20
 8002f2a:	4619      	mov	r1, r3
 8002f2c:	4804      	ldr	r0, [pc, #16]	; (8002f40 <HAL_TIM_MspPostInit+0xb4>)
 8002f2e:	f003 ff69 	bl	8006e04 <HAL_GPIO_Init>
}
 8002f32:	bf00      	nop
 8002f34:	3728      	adds	r7, #40	; 0x28
 8002f36:	46bd      	mov	sp, r7
 8002f38:	bd80      	pop	{r7, pc}
 8002f3a:	bf00      	nop
 8002f3c:	40023800 	.word	0x40023800
 8002f40:	40020000 	.word	0x40020000
 8002f44:	40000c00 	.word	0x40000c00

08002f48 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002f48:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002f80 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002f4c:	480d      	ldr	r0, [pc, #52]	; (8002f84 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002f4e:	490e      	ldr	r1, [pc, #56]	; (8002f88 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002f50:	4a0e      	ldr	r2, [pc, #56]	; (8002f8c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002f52:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002f54:	e002      	b.n	8002f5c <LoopCopyDataInit>

08002f56 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002f56:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002f58:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002f5a:	3304      	adds	r3, #4

08002f5c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002f5c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002f5e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002f60:	d3f9      	bcc.n	8002f56 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002f62:	4a0b      	ldr	r2, [pc, #44]	; (8002f90 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002f64:	4c0b      	ldr	r4, [pc, #44]	; (8002f94 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002f66:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002f68:	e001      	b.n	8002f6e <LoopFillZerobss>

08002f6a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002f6a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002f6c:	3204      	adds	r2, #4

08002f6e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002f6e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002f70:	d3fb      	bcc.n	8002f6a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002f72:	f7ff fd79 	bl	8002a68 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002f76:	f00c fc67 	bl	800f848 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002f7a:	f7fe fd9d 	bl	8001ab8 <main>
  bx  lr    
 8002f7e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002f80:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002f84:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002f88:	200003d8 	.word	0x200003d8
  ldr r2, =_sidata
 8002f8c:	08014848 	.word	0x08014848
  ldr r2, =_sbss
 8002f90:	200003d8 	.word	0x200003d8
  ldr r4, =_ebss
 8002f94:	200023e4 	.word	0x200023e4

08002f98 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002f98:	e7fe      	b.n	8002f98 <ADC_IRQHandler>
	...

08002f9c <LSM303AGR_ACC_RegisterBusIO>:
  * @brief  Register Component Bus IO operations
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM303AGR_ACC_RegisterBusIO(LSM303AGR_ACC_Object_t *pObj, LSM303AGR_IO_t *pIO)
{
 8002f9c:	b580      	push	{r7, lr}
 8002f9e:	b084      	sub	sp, #16
 8002fa0:	af00      	add	r7, sp, #0
 8002fa2:	6078      	str	r0, [r7, #4]
 8002fa4:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM303AGR_OK;
 8002fa6:	2300      	movs	r3, #0
 8002fa8:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d103      	bne.n	8002fb8 <LSM303AGR_ACC_RegisterBusIO+0x1c>
  {
    ret = LSM303AGR_ERROR;
 8002fb0:	f04f 33ff 	mov.w	r3, #4294967295
 8002fb4:	60fb      	str	r3, [r7, #12]
 8002fb6:	e051      	b.n	800305c <LSM303AGR_ACC_RegisterBusIO+0xc0>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8002fb8:	683b      	ldr	r3, [r7, #0]
 8002fba:	681a      	ldr	r2, [r3, #0]
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8002fc0:	683b      	ldr	r3, [r7, #0]
 8002fc2:	685a      	ldr	r2, [r3, #4]
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 8002fc8:	683b      	ldr	r3, [r7, #0]
 8002fca:	689a      	ldr	r2, [r3, #8]
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 8002fd0:	683b      	ldr	r3, [r7, #0]
 8002fd2:	7b1a      	ldrb	r2, [r3, #12]
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8002fd8:	683b      	ldr	r3, [r7, #0]
 8002fda:	691a      	ldr	r2, [r3, #16]
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8002fe0:	683b      	ldr	r3, [r7, #0]
 8002fe2:	695a      	ldr	r2, [r3, #20]
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 8002fe8:	683b      	ldr	r3, [r7, #0]
 8002fea:	699a      	ldr	r2, [r3, #24]
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadAccRegWrap;
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	4a1d      	ldr	r2, [pc, #116]	; (8003068 <LSM303AGR_ACC_RegisterBusIO+0xcc>)
 8002ff4:	625a      	str	r2, [r3, #36]	; 0x24
    pObj->Ctx.write_reg = WriteAccRegWrap;
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	4a1c      	ldr	r2, [pc, #112]	; (800306c <LSM303AGR_ACC_RegisterBusIO+0xd0>)
 8002ffa:	621a      	str	r2, [r3, #32]
    pObj->Ctx.mdelay    = pIO->Delay;
 8002ffc:	683b      	ldr	r3, [r7, #0]
 8002ffe:	69da      	ldr	r2, [r3, #28]
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	629a      	str	r2, [r3, #40]	; 0x28
    pObj->Ctx.handle    = pObj;
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	687a      	ldr	r2, [r7, #4]
 8003008:	62da      	str	r2, [r3, #44]	; 0x2c

    if (pObj->IO.Init == NULL)
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	2b00      	cmp	r3, #0
 8003010:	d103      	bne.n	800301a <LSM303AGR_ACC_RegisterBusIO+0x7e>
    {
      ret = LSM303AGR_ERROR;
 8003012:	f04f 33ff 	mov.w	r3, #4294967295
 8003016:	60fb      	str	r3, [r7, #12]
 8003018:	e020      	b.n	800305c <LSM303AGR_ACC_RegisterBusIO+0xc0>
    }
    else if (pObj->IO.Init() != LSM303AGR_OK)
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	4798      	blx	r3
 8003020:	4603      	mov	r3, r0
 8003022:	2b00      	cmp	r3, #0
 8003024:	d003      	beq.n	800302e <LSM303AGR_ACC_RegisterBusIO+0x92>
    {
      ret = LSM303AGR_ERROR;
 8003026:	f04f 33ff 	mov.w	r3, #4294967295
 800302a:	60fb      	str	r3, [r7, #12]
 800302c:	e016      	b.n	800305c <LSM303AGR_ACC_RegisterBusIO+0xc0>
    }
    else
    {
      if (pObj->IO.BusType == LSM303AGR_SPI_3WIRES_BUS) /* SPI 3-Wires */
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	689b      	ldr	r3, [r3, #8]
 8003032:	2b01      	cmp	r3, #1
 8003034:	d112      	bne.n	800305c <LSM303AGR_ACC_RegisterBusIO+0xc0>
      {
        /* Enable the SPI 3-Wires support only the first time */
        if (pObj->is_initialized == 0U)
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800303c:	2b00      	cmp	r3, #0
 800303e:	d10d      	bne.n	800305c <LSM303AGR_ACC_RegisterBusIO+0xc0>
        {
          /* Enable SPI 3-Wires on the component */
          uint8_t data = 0x01;
 8003040:	2301      	movs	r3, #1
 8003042:	72fb      	strb	r3, [r7, #11]

          if (LSM303AGR_ACC_Write_Reg(pObj, LSM303AGR_CTRL_REG4_A, data) != LSM303AGR_OK)
 8003044:	7afb      	ldrb	r3, [r7, #11]
 8003046:	461a      	mov	r2, r3
 8003048:	2123      	movs	r1, #35	; 0x23
 800304a:	6878      	ldr	r0, [r7, #4]
 800304c:	f000 fb55 	bl	80036fa <LSM303AGR_ACC_Write_Reg>
 8003050:	4603      	mov	r3, r0
 8003052:	2b00      	cmp	r3, #0
 8003054:	d002      	beq.n	800305c <LSM303AGR_ACC_RegisterBusIO+0xc0>
          {
            return LSM303AGR_ERROR;
 8003056:	f04f 33ff 	mov.w	r3, #4294967295
 800305a:	e000      	b.n	800305e <LSM303AGR_ACC_RegisterBusIO+0xc2>
        }
      }
    }
  }

  return ret;
 800305c:	68fb      	ldr	r3, [r7, #12]
}
 800305e:	4618      	mov	r0, r3
 8003060:	3710      	adds	r7, #16
 8003062:	46bd      	mov	sp, r7
 8003064:	bd80      	pop	{r7, pc}
 8003066:	bf00      	nop
 8003068:	08003f09 	.word	0x08003f09
 800306c:	08003f6b 	.word	0x08003f6b

08003070 <LSM303AGR_ACC_Init>:
  * @brief  Initialize the LSM303AGR sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM303AGR_ACC_Init(LSM303AGR_ACC_Object_t *pObj)
{
 8003070:	b580      	push	{r7, lr}
 8003072:	b082      	sub	sp, #8
 8003074:	af00      	add	r7, sp, #0
 8003076:	6078      	str	r0, [r7, #4]
  /* Enable BDU */
  if (lsm303agr_xl_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM303AGR_OK)
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	3320      	adds	r3, #32
 800307c:	2101      	movs	r1, #1
 800307e:	4618      	mov	r0, r3
 8003080:	f001 f94a 	bl	8004318 <lsm303agr_xl_block_data_update_set>
 8003084:	4603      	mov	r3, r0
 8003086:	2b00      	cmp	r3, #0
 8003088:	d002      	beq.n	8003090 <LSM303AGR_ACC_Init+0x20>
  {
    return LSM303AGR_ERROR;
 800308a:	f04f 33ff 	mov.w	r3, #4294967295
 800308e:	e02c      	b.n	80030ea <LSM303AGR_ACC_Init+0x7a>
  }

  /* FIFO mode selection */
  if (lsm303agr_xl_fifo_mode_set(&(pObj->Ctx), LSM303AGR_BYPASS_MODE) != LSM303AGR_OK)
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	3320      	adds	r3, #32
 8003094:	2100      	movs	r1, #0
 8003096:	4618      	mov	r0, r3
 8003098:	f001 faed 	bl	8004676 <lsm303agr_xl_fifo_mode_set>
 800309c:	4603      	mov	r3, r0
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d002      	beq.n	80030a8 <LSM303AGR_ACC_Init+0x38>
  {
    return LSM303AGR_ERROR;
 80030a2:	f04f 33ff 	mov.w	r3, #4294967295
 80030a6:	e020      	b.n	80030ea <LSM303AGR_ACC_Init+0x7a>
  }

  /* Select default output data rate. */
  pObj->acc_odr = LSM303AGR_XL_ODR_100Hz;
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	2205      	movs	r2, #5
 80030ac:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32

  /* Output data rate selection - power down. */
  if (lsm303agr_xl_data_rate_set(&(pObj->Ctx), LSM303AGR_XL_POWER_DOWN) != LSM303AGR_OK)
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	3320      	adds	r3, #32
 80030b4:	2100      	movs	r1, #0
 80030b6:	4618      	mov	r0, r3
 80030b8:	f001 f84e 	bl	8004158 <lsm303agr_xl_data_rate_set>
 80030bc:	4603      	mov	r3, r0
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d002      	beq.n	80030c8 <LSM303AGR_ACC_Init+0x58>
  {
    return LSM303AGR_ERROR;
 80030c2:	f04f 33ff 	mov.w	r3, #4294967295
 80030c6:	e010      	b.n	80030ea <LSM303AGR_ACC_Init+0x7a>
  }

  /* Full scale selection. */
  if (lsm303agr_xl_full_scale_set(&(pObj->Ctx), LSM303AGR_2g) != LSM303AGR_OK)
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	3320      	adds	r3, #32
 80030cc:	2100      	movs	r1, #0
 80030ce:	4618      	mov	r0, r3
 80030d0:	f001 f8c4 	bl	800425c <lsm303agr_xl_full_scale_set>
 80030d4:	4603      	mov	r3, r0
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d002      	beq.n	80030e0 <LSM303AGR_ACC_Init+0x70>
  {
    return LSM303AGR_ERROR;
 80030da:	f04f 33ff 	mov.w	r3, #4294967295
 80030de:	e004      	b.n	80030ea <LSM303AGR_ACC_Init+0x7a>
  }

  pObj->is_initialized = 1;
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	2201      	movs	r2, #1
 80030e4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return LSM303AGR_OK;
 80030e8:	2300      	movs	r3, #0
}
 80030ea:	4618      	mov	r0, r3
 80030ec:	3708      	adds	r7, #8
 80030ee:	46bd      	mov	sp, r7
 80030f0:	bd80      	pop	{r7, pc}

080030f2 <LSM303AGR_ACC_DeInit>:
  * @brief  Deinitialize the LSM303AGR accelerometer sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM303AGR_ACC_DeInit(LSM303AGR_ACC_Object_t *pObj)
{
 80030f2:	b580      	push	{r7, lr}
 80030f4:	b082      	sub	sp, #8
 80030f6:	af00      	add	r7, sp, #0
 80030f8:	6078      	str	r0, [r7, #4]
  /* Disable the component */
  if (LSM303AGR_ACC_Disable(pObj) != LSM303AGR_OK)
 80030fa:	6878      	ldr	r0, [r7, #4]
 80030fc:	f000 f87c 	bl	80031f8 <LSM303AGR_ACC_Disable>
 8003100:	4603      	mov	r3, r0
 8003102:	2b00      	cmp	r3, #0
 8003104:	d002      	beq.n	800310c <LSM303AGR_ACC_DeInit+0x1a>
  {
    return LSM303AGR_ERROR;
 8003106:	f04f 33ff 	mov.w	r3, #4294967295
 800310a:	e008      	b.n	800311e <LSM303AGR_ACC_DeInit+0x2c>
  }

  /* Reset output data rate. */
  pObj->acc_odr = LSM303AGR_XL_POWER_DOWN;
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	2200      	movs	r2, #0
 8003110:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
  pObj->is_initialized = 0;
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	2200      	movs	r2, #0
 8003118:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return LSM303AGR_OK;
 800311c:	2300      	movs	r3, #0
}
 800311e:	4618      	mov	r0, r3
 8003120:	3708      	adds	r7, #8
 8003122:	46bd      	mov	sp, r7
 8003124:	bd80      	pop	{r7, pc}

08003126 <LSM303AGR_ACC_ReadID>:
  * @param  pObj the device pObj
  * @param  Id the WHO_AM_I value
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM303AGR_ACC_ReadID(LSM303AGR_ACC_Object_t *pObj, uint8_t *Id)
{
 8003126:	b580      	push	{r7, lr}
 8003128:	b082      	sub	sp, #8
 800312a:	af00      	add	r7, sp, #0
 800312c:	6078      	str	r0, [r7, #4]
 800312e:	6039      	str	r1, [r7, #0]
  if (lsm303agr_xl_device_id_get(&(pObj->Ctx), Id) != LSM303AGR_OK)
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	3320      	adds	r3, #32
 8003134:	6839      	ldr	r1, [r7, #0]
 8003136:	4618      	mov	r0, r3
 8003138:	f001 fa55 	bl	80045e6 <lsm303agr_xl_device_id_get>
 800313c:	4603      	mov	r3, r0
 800313e:	2b00      	cmp	r3, #0
 8003140:	d002      	beq.n	8003148 <LSM303AGR_ACC_ReadID+0x22>
  {
    return LSM303AGR_ERROR;
 8003142:	f04f 33ff 	mov.w	r3, #4294967295
 8003146:	e000      	b.n	800314a <LSM303AGR_ACC_ReadID+0x24>
  }

  return LSM303AGR_OK;
 8003148:	2300      	movs	r3, #0
}
 800314a:	4618      	mov	r0, r3
 800314c:	3708      	adds	r7, #8
 800314e:	46bd      	mov	sp, r7
 8003150:	bd80      	pop	{r7, pc}
	...

08003154 <LSM303AGR_ACC_GetCapabilities>:
  * @param  pObj Component object pointer
  * @param  Capabilities pointer to LSM303AGR accelerometer sensor capabilities
  * @retval Component status
  */
int32_t LSM303AGR_ACC_GetCapabilities(LSM303AGR_ACC_Object_t *pObj, LSM303AGR_Capabilities_t *Capabilities)
{
 8003154:	b480      	push	{r7}
 8003156:	b083      	sub	sp, #12
 8003158:	af00      	add	r7, sp, #0
 800315a:	6078      	str	r0, [r7, #4]
 800315c:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Acc          = 1;
 800315e:	683b      	ldr	r3, [r7, #0]
 8003160:	2201      	movs	r2, #1
 8003162:	701a      	strb	r2, [r3, #0]
  Capabilities->Gyro         = 0;
 8003164:	683b      	ldr	r3, [r7, #0]
 8003166:	2200      	movs	r2, #0
 8003168:	705a      	strb	r2, [r3, #1]
  Capabilities->Magneto      = 0;
 800316a:	683b      	ldr	r3, [r7, #0]
 800316c:	2200      	movs	r2, #0
 800316e:	709a      	strb	r2, [r3, #2]
  Capabilities->LowPower     = 0;
 8003170:	683b      	ldr	r3, [r7, #0]
 8003172:	2200      	movs	r2, #0
 8003174:	70da      	strb	r2, [r3, #3]
  Capabilities->GyroMaxFS    = 0;
 8003176:	683b      	ldr	r3, [r7, #0]
 8003178:	2200      	movs	r2, #0
 800317a:	605a      	str	r2, [r3, #4]
  Capabilities->AccMaxFS     = 16;
 800317c:	683b      	ldr	r3, [r7, #0]
 800317e:	2210      	movs	r2, #16
 8003180:	609a      	str	r2, [r3, #8]
  Capabilities->MagMaxFS     = 0;
 8003182:	683b      	ldr	r3, [r7, #0]
 8003184:	2200      	movs	r2, #0
 8003186:	60da      	str	r2, [r3, #12]
  Capabilities->GyroMaxOdr   = 0.0f;
 8003188:	683b      	ldr	r3, [r7, #0]
 800318a:	f04f 0200 	mov.w	r2, #0
 800318e:	611a      	str	r2, [r3, #16]
  Capabilities->AccMaxOdr    = 400.0f;
 8003190:	683b      	ldr	r3, [r7, #0]
 8003192:	4a06      	ldr	r2, [pc, #24]	; (80031ac <LSM303AGR_ACC_GetCapabilities+0x58>)
 8003194:	615a      	str	r2, [r3, #20]
  Capabilities->MagMaxOdr    = 0.0f;
 8003196:	683b      	ldr	r3, [r7, #0]
 8003198:	f04f 0200 	mov.w	r2, #0
 800319c:	619a      	str	r2, [r3, #24]
  return LSM303AGR_OK;
 800319e:	2300      	movs	r3, #0
}
 80031a0:	4618      	mov	r0, r3
 80031a2:	370c      	adds	r7, #12
 80031a4:	46bd      	mov	sp, r7
 80031a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031aa:	4770      	bx	lr
 80031ac:	43c80000 	.word	0x43c80000

080031b0 <LSM303AGR_ACC_Enable>:
  * @brief  Enable the LSM303AGR accelerometer sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM303AGR_ACC_Enable(LSM303AGR_ACC_Object_t *pObj)
{
 80031b0:	b580      	push	{r7, lr}
 80031b2:	b082      	sub	sp, #8
 80031b4:	af00      	add	r7, sp, #0
 80031b6:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->acc_is_enabled == 1U)
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80031be:	2b01      	cmp	r3, #1
 80031c0:	d101      	bne.n	80031c6 <LSM303AGR_ACC_Enable+0x16>
  {
    return LSM303AGR_OK;
 80031c2:	2300      	movs	r3, #0
 80031c4:	e014      	b.n	80031f0 <LSM303AGR_ACC_Enable+0x40>
  }

  /* Output data rate selection. */
  if (lsm303agr_xl_data_rate_set(&(pObj->Ctx), pObj->acc_odr) != LSM303AGR_OK)
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	f103 0220 	add.w	r2, r3, #32
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80031d2:	4619      	mov	r1, r3
 80031d4:	4610      	mov	r0, r2
 80031d6:	f000 ffbf 	bl	8004158 <lsm303agr_xl_data_rate_set>
 80031da:	4603      	mov	r3, r0
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d002      	beq.n	80031e6 <LSM303AGR_ACC_Enable+0x36>
  {
    return LSM303AGR_ERROR;
 80031e0:	f04f 33ff 	mov.w	r3, #4294967295
 80031e4:	e004      	b.n	80031f0 <LSM303AGR_ACC_Enable+0x40>
  }

  pObj->acc_is_enabled = 1;
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	2201      	movs	r2, #1
 80031ea:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  return LSM303AGR_OK;
 80031ee:	2300      	movs	r3, #0
}
 80031f0:	4618      	mov	r0, r3
 80031f2:	3708      	adds	r7, #8
 80031f4:	46bd      	mov	sp, r7
 80031f6:	bd80      	pop	{r7, pc}

080031f8 <LSM303AGR_ACC_Disable>:
  * @brief  Disable the LSM303AGR accelerometer sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM303AGR_ACC_Disable(LSM303AGR_ACC_Object_t *pObj)
{
 80031f8:	b580      	push	{r7, lr}
 80031fa:	b082      	sub	sp, #8
 80031fc:	af00      	add	r7, sp, #0
 80031fe:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->acc_is_enabled == 0U)
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8003206:	2b00      	cmp	r3, #0
 8003208:	d101      	bne.n	800320e <LSM303AGR_ACC_Disable+0x16>
  {
    return LSM303AGR_OK;
 800320a:	2300      	movs	r3, #0
 800320c:	e01f      	b.n	800324e <LSM303AGR_ACC_Disable+0x56>
  }

  /* Get current output data rate. */
  if (lsm303agr_xl_data_rate_get(&(pObj->Ctx), &pObj->acc_odr) != LSM303AGR_OK)
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	f103 0220 	add.w	r2, r3, #32
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	3332      	adds	r3, #50	; 0x32
 8003218:	4619      	mov	r1, r3
 800321a:	4610      	mov	r0, r2
 800321c:	f000 ffc2 	bl	80041a4 <lsm303agr_xl_data_rate_get>
 8003220:	4603      	mov	r3, r0
 8003222:	2b00      	cmp	r3, #0
 8003224:	d002      	beq.n	800322c <LSM303AGR_ACC_Disable+0x34>
  {
    return LSM303AGR_ERROR;
 8003226:	f04f 33ff 	mov.w	r3, #4294967295
 800322a:	e010      	b.n	800324e <LSM303AGR_ACC_Disable+0x56>
  }

  /* Output data rate selection - power down. */
  if (lsm303agr_xl_data_rate_set(&(pObj->Ctx), LSM303AGR_XL_POWER_DOWN) != LSM303AGR_OK)
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	3320      	adds	r3, #32
 8003230:	2100      	movs	r1, #0
 8003232:	4618      	mov	r0, r3
 8003234:	f000 ff90 	bl	8004158 <lsm303agr_xl_data_rate_set>
 8003238:	4603      	mov	r3, r0
 800323a:	2b00      	cmp	r3, #0
 800323c:	d002      	beq.n	8003244 <LSM303AGR_ACC_Disable+0x4c>
  {
    return LSM303AGR_ERROR;
 800323e:	f04f 33ff 	mov.w	r3, #4294967295
 8003242:	e004      	b.n	800324e <LSM303AGR_ACC_Disable+0x56>
  }

  pObj->acc_is_enabled = 0;
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	2200      	movs	r2, #0
 8003248:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  return LSM303AGR_OK;
 800324c:	2300      	movs	r3, #0
}
 800324e:	4618      	mov	r0, r3
 8003250:	3708      	adds	r7, #8
 8003252:	46bd      	mov	sp, r7
 8003254:	bd80      	pop	{r7, pc}

08003256 <LSM303AGR_ACC_GetSensitivity>:
  * @param  pObj the device pObj
  * @param  Sensitivity pointer
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM303AGR_ACC_GetSensitivity(LSM303AGR_ACC_Object_t *pObj, float *Sensitivity)
{
 8003256:	b580      	push	{r7, lr}
 8003258:	b084      	sub	sp, #16
 800325a:	af00      	add	r7, sp, #0
 800325c:	6078      	str	r0, [r7, #4]
 800325e:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM303AGR_OK;
 8003260:	2300      	movs	r3, #0
 8003262:	60fb      	str	r3, [r7, #12]
  lsm303agr_op_md_a_t op_mode;

  /* Read operative mode from sensor. */
  if (lsm303agr_xl_operating_mode_get(&(pObj->Ctx), &op_mode) != LSM303AGR_OK)
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	3320      	adds	r3, #32
 8003268:	f107 020b 	add.w	r2, r7, #11
 800326c:	4611      	mov	r1, r2
 800326e:	4618      	mov	r0, r3
 8003270:	f000 ff3e 	bl	80040f0 <lsm303agr_xl_operating_mode_get>
 8003274:	4603      	mov	r3, r0
 8003276:	2b00      	cmp	r3, #0
 8003278:	d002      	beq.n	8003280 <LSM303AGR_ACC_GetSensitivity+0x2a>
  {
    return LSM303AGR_ERROR;
 800327a:	f04f 33ff 	mov.w	r3, #4294967295
 800327e:	e031      	b.n	80032e4 <LSM303AGR_ACC_GetSensitivity+0x8e>
  }

  /* Store the Sensitivity based on actual full scale. */
  switch (op_mode)
 8003280:	7afb      	ldrb	r3, [r7, #11]
 8003282:	2b02      	cmp	r3, #2
 8003284:	d01a      	beq.n	80032bc <LSM303AGR_ACC_GetSensitivity+0x66>
 8003286:	2b02      	cmp	r3, #2
 8003288:	dc22      	bgt.n	80032d0 <LSM303AGR_ACC_GetSensitivity+0x7a>
 800328a:	2b00      	cmp	r3, #0
 800328c:	d002      	beq.n	8003294 <LSM303AGR_ACC_GetSensitivity+0x3e>
 800328e:	2b01      	cmp	r3, #1
 8003290:	d00a      	beq.n	80032a8 <LSM303AGR_ACC_GetSensitivity+0x52>
 8003292:	e01d      	b.n	80032d0 <LSM303AGR_ACC_GetSensitivity+0x7a>
  {
    case LSM303AGR_HR_12bit:
      if (LSM303AGR_ACC_GetSensitivityHR(pObj, Sensitivity) != LSM303AGR_OK)
 8003294:	6839      	ldr	r1, [r7, #0]
 8003296:	6878      	ldr	r0, [r7, #4]
 8003298:	f000 fca8 	bl	8003bec <LSM303AGR_ACC_GetSensitivityHR>
 800329c:	4603      	mov	r3, r0
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d01a      	beq.n	80032d8 <LSM303AGR_ACC_GetSensitivity+0x82>
      {
        return LSM303AGR_ERROR;
 80032a2:	f04f 33ff 	mov.w	r3, #4294967295
 80032a6:	e01d      	b.n	80032e4 <LSM303AGR_ACC_GetSensitivity+0x8e>
      }
      break;

    case LSM303AGR_NM_10bit:
      if (LSM303AGR_ACC_GetSensitivityNM(pObj, Sensitivity) != LSM303AGR_OK)
 80032a8:	6839      	ldr	r1, [r7, #0]
 80032aa:	6878      	ldr	r0, [r7, #4]
 80032ac:	f000 fce4 	bl	8003c78 <LSM303AGR_ACC_GetSensitivityNM>
 80032b0:	4603      	mov	r3, r0
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d012      	beq.n	80032dc <LSM303AGR_ACC_GetSensitivity+0x86>
      {
        return LSM303AGR_ERROR;
 80032b6:	f04f 33ff 	mov.w	r3, #4294967295
 80032ba:	e013      	b.n	80032e4 <LSM303AGR_ACC_GetSensitivity+0x8e>
      }
      break;

    case LSM303AGR_LP_8bit:
      if (LSM303AGR_ACC_GetSensitivityLP(pObj, Sensitivity) != LSM303AGR_OK)
 80032bc:	6839      	ldr	r1, [r7, #0]
 80032be:	6878      	ldr	r0, [r7, #4]
 80032c0:	f000 fd20 	bl	8003d04 <LSM303AGR_ACC_GetSensitivityLP>
 80032c4:	4603      	mov	r3, r0
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d00a      	beq.n	80032e0 <LSM303AGR_ACC_GetSensitivity+0x8a>
      {
        return LSM303AGR_ERROR;
 80032ca:	f04f 33ff 	mov.w	r3, #4294967295
 80032ce:	e009      	b.n	80032e4 <LSM303AGR_ACC_GetSensitivity+0x8e>
      }
      break;

    default:
      ret = LSM303AGR_ERROR;
 80032d0:	f04f 33ff 	mov.w	r3, #4294967295
 80032d4:	60fb      	str	r3, [r7, #12]
      break;
 80032d6:	e004      	b.n	80032e2 <LSM303AGR_ACC_GetSensitivity+0x8c>
      break;
 80032d8:	bf00      	nop
 80032da:	e002      	b.n	80032e2 <LSM303AGR_ACC_GetSensitivity+0x8c>
      break;
 80032dc:	bf00      	nop
 80032de:	e000      	b.n	80032e2 <LSM303AGR_ACC_GetSensitivity+0x8c>
      break;
 80032e0:	bf00      	nop
  }

  return ret;
 80032e2:	68fb      	ldr	r3, [r7, #12]
}
 80032e4:	4618      	mov	r0, r3
 80032e6:	3710      	adds	r7, #16
 80032e8:	46bd      	mov	sp, r7
 80032ea:	bd80      	pop	{r7, pc}

080032ec <LSM303AGR_ACC_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM303AGR_ACC_GetOutputDataRate(LSM303AGR_ACC_Object_t *pObj, float *Odr)
{
 80032ec:	b580      	push	{r7, lr}
 80032ee:	b084      	sub	sp, #16
 80032f0:	af00      	add	r7, sp, #0
 80032f2:	6078      	str	r0, [r7, #4]
 80032f4:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM303AGR_OK;
 80032f6:	2300      	movs	r3, #0
 80032f8:	60fb      	str	r3, [r7, #12]
  lsm303agr_op_md_a_t op_mode;
  lsm303agr_odr_a_t odr_low_level;

  /* Read operative mode from sensor. */
  if (lsm303agr_xl_operating_mode_get(&(pObj->Ctx), &op_mode) != LSM303AGR_OK)
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	3320      	adds	r3, #32
 80032fe:	f107 020b 	add.w	r2, r7, #11
 8003302:	4611      	mov	r1, r2
 8003304:	4618      	mov	r0, r3
 8003306:	f000 fef3 	bl	80040f0 <lsm303agr_xl_operating_mode_get>
 800330a:	4603      	mov	r3, r0
 800330c:	2b00      	cmp	r3, #0
 800330e:	d002      	beq.n	8003316 <LSM303AGR_ACC_GetOutputDataRate+0x2a>
  {
    return LSM303AGR_ERROR;
 8003310:	f04f 33ff 	mov.w	r3, #4294967295
 8003314:	e09d      	b.n	8003452 <LSM303AGR_ACC_GetOutputDataRate+0x166>
  }

  /* Get current output data rate. */
  if (lsm303agr_xl_data_rate_get(&(pObj->Ctx), &odr_low_level) != LSM303AGR_OK)
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	3320      	adds	r3, #32
 800331a:	f107 020a 	add.w	r2, r7, #10
 800331e:	4611      	mov	r1, r2
 8003320:	4618      	mov	r0, r3
 8003322:	f000 ff3f 	bl	80041a4 <lsm303agr_xl_data_rate_get>
 8003326:	4603      	mov	r3, r0
 8003328:	2b00      	cmp	r3, #0
 800332a:	d002      	beq.n	8003332 <LSM303AGR_ACC_GetOutputDataRate+0x46>
  {
    return LSM303AGR_ERROR;
 800332c:	f04f 33ff 	mov.w	r3, #4294967295
 8003330:	e08f      	b.n	8003452 <LSM303AGR_ACC_GetOutputDataRate+0x166>
  }

  if (op_mode == LSM303AGR_LP_8bit) /* LP mode */
 8003332:	7afb      	ldrb	r3, [r7, #11]
 8003334:	2b02      	cmp	r3, #2
 8003336:	d147      	bne.n	80033c8 <LSM303AGR_ACC_GetOutputDataRate+0xdc>
  {
    switch (odr_low_level)
 8003338:	7abb      	ldrb	r3, [r7, #10]
 800333a:	2b09      	cmp	r3, #9
 800333c:	d840      	bhi.n	80033c0 <LSM303AGR_ACC_GetOutputDataRate+0xd4>
 800333e:	a201      	add	r2, pc, #4	; (adr r2, 8003344 <LSM303AGR_ACC_GetOutputDataRate+0x58>)
 8003340:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003344:	0800336d 	.word	0x0800336d
 8003348:	08003377 	.word	0x08003377
 800334c:	08003381 	.word	0x08003381
 8003350:	08003389 	.word	0x08003389
 8003354:	08003391 	.word	0x08003391
 8003358:	08003399 	.word	0x08003399
 800335c:	080033a1 	.word	0x080033a1
 8003360:	080033a9 	.word	0x080033a9
 8003364:	080033b1 	.word	0x080033b1
 8003368:	080033b9 	.word	0x080033b9
    {
      case LSM303AGR_XL_POWER_DOWN:
        *Odr = 0.0f;
 800336c:	683b      	ldr	r3, [r7, #0]
 800336e:	f04f 0200 	mov.w	r2, #0
 8003372:	601a      	str	r2, [r3, #0]
        break;
 8003374:	e06c      	b.n	8003450 <LSM303AGR_ACC_GetOutputDataRate+0x164>

      case LSM303AGR_XL_ODR_1Hz:
        *Odr = 1.0f;
 8003376:	683b      	ldr	r3, [r7, #0]
 8003378:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800337c:	601a      	str	r2, [r3, #0]
        break;
 800337e:	e067      	b.n	8003450 <LSM303AGR_ACC_GetOutputDataRate+0x164>

      case LSM303AGR_XL_ODR_10Hz:
        *Odr = 10.0f;
 8003380:	683b      	ldr	r3, [r7, #0]
 8003382:	4a36      	ldr	r2, [pc, #216]	; (800345c <LSM303AGR_ACC_GetOutputDataRate+0x170>)
 8003384:	601a      	str	r2, [r3, #0]
        break;
 8003386:	e063      	b.n	8003450 <LSM303AGR_ACC_GetOutputDataRate+0x164>

      case LSM303AGR_XL_ODR_25Hz:
        *Odr = 25.0f;
 8003388:	683b      	ldr	r3, [r7, #0]
 800338a:	4a35      	ldr	r2, [pc, #212]	; (8003460 <LSM303AGR_ACC_GetOutputDataRate+0x174>)
 800338c:	601a      	str	r2, [r3, #0]
        break;
 800338e:	e05f      	b.n	8003450 <LSM303AGR_ACC_GetOutputDataRate+0x164>

      case LSM303AGR_XL_ODR_50Hz:
        *Odr = 50.0f;
 8003390:	683b      	ldr	r3, [r7, #0]
 8003392:	4a34      	ldr	r2, [pc, #208]	; (8003464 <LSM303AGR_ACC_GetOutputDataRate+0x178>)
 8003394:	601a      	str	r2, [r3, #0]
        break;
 8003396:	e05b      	b.n	8003450 <LSM303AGR_ACC_GetOutputDataRate+0x164>

      case LSM303AGR_XL_ODR_100Hz:
        *Odr = 100.0f;
 8003398:	683b      	ldr	r3, [r7, #0]
 800339a:	4a33      	ldr	r2, [pc, #204]	; (8003468 <LSM303AGR_ACC_GetOutputDataRate+0x17c>)
 800339c:	601a      	str	r2, [r3, #0]
        break;
 800339e:	e057      	b.n	8003450 <LSM303AGR_ACC_GetOutputDataRate+0x164>

      case LSM303AGR_XL_ODR_200Hz:
        *Odr = 200.0f;
 80033a0:	683b      	ldr	r3, [r7, #0]
 80033a2:	4a32      	ldr	r2, [pc, #200]	; (800346c <LSM303AGR_ACC_GetOutputDataRate+0x180>)
 80033a4:	601a      	str	r2, [r3, #0]
        break;
 80033a6:	e053      	b.n	8003450 <LSM303AGR_ACC_GetOutputDataRate+0x164>

      case LSM303AGR_XL_ODR_400Hz:
        *Odr = 400.0f;
 80033a8:	683b      	ldr	r3, [r7, #0]
 80033aa:	4a31      	ldr	r2, [pc, #196]	; (8003470 <LSM303AGR_ACC_GetOutputDataRate+0x184>)
 80033ac:	601a      	str	r2, [r3, #0]
        break;
 80033ae:	e04f      	b.n	8003450 <LSM303AGR_ACC_GetOutputDataRate+0x164>

      case LSM303AGR_XL_ODR_1kHz620_LP:
        *Odr = 1620.0f;
 80033b0:	683b      	ldr	r3, [r7, #0]
 80033b2:	4a30      	ldr	r2, [pc, #192]	; (8003474 <LSM303AGR_ACC_GetOutputDataRate+0x188>)
 80033b4:	601a      	str	r2, [r3, #0]
        break;
 80033b6:	e04b      	b.n	8003450 <LSM303AGR_ACC_GetOutputDataRate+0x164>

      case LSM303AGR_XL_ODR_1kHz344_NM_HP_5kHz376_LP:
        *Odr = 5376.0f;
 80033b8:	683b      	ldr	r3, [r7, #0]
 80033ba:	4a2f      	ldr	r2, [pc, #188]	; (8003478 <LSM303AGR_ACC_GetOutputDataRate+0x18c>)
 80033bc:	601a      	str	r2, [r3, #0]
        break;
 80033be:	e047      	b.n	8003450 <LSM303AGR_ACC_GetOutputDataRate+0x164>

      default:
        ret = LSM303AGR_ERROR;
 80033c0:	f04f 33ff 	mov.w	r3, #4294967295
 80033c4:	60fb      	str	r3, [r7, #12]
        break;
 80033c6:	e043      	b.n	8003450 <LSM303AGR_ACC_GetOutputDataRate+0x164>
    }
  }
  else /* HR and NM modes */
  {
    switch (odr_low_level)
 80033c8:	7abb      	ldrb	r3, [r7, #10]
 80033ca:	2b09      	cmp	r3, #9
 80033cc:	d83c      	bhi.n	8003448 <LSM303AGR_ACC_GetOutputDataRate+0x15c>
 80033ce:	a201      	add	r2, pc, #4	; (adr r2, 80033d4 <LSM303AGR_ACC_GetOutputDataRate+0xe8>)
 80033d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033d4:	080033fd 	.word	0x080033fd
 80033d8:	08003407 	.word	0x08003407
 80033dc:	08003411 	.word	0x08003411
 80033e0:	08003419 	.word	0x08003419
 80033e4:	08003421 	.word	0x08003421
 80033e8:	08003429 	.word	0x08003429
 80033ec:	08003431 	.word	0x08003431
 80033f0:	08003439 	.word	0x08003439
 80033f4:	08003449 	.word	0x08003449
 80033f8:	08003441 	.word	0x08003441
    {
      case LSM303AGR_XL_POWER_DOWN:
        *Odr = 0.0f;
 80033fc:	683b      	ldr	r3, [r7, #0]
 80033fe:	f04f 0200 	mov.w	r2, #0
 8003402:	601a      	str	r2, [r3, #0]
        break;
 8003404:	e024      	b.n	8003450 <LSM303AGR_ACC_GetOutputDataRate+0x164>

      case LSM303AGR_XL_ODR_1Hz:
        *Odr = 1.0f;
 8003406:	683b      	ldr	r3, [r7, #0]
 8003408:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800340c:	601a      	str	r2, [r3, #0]
        break;
 800340e:	e01f      	b.n	8003450 <LSM303AGR_ACC_GetOutputDataRate+0x164>

      case LSM303AGR_XL_ODR_10Hz:
        *Odr = 10.0f;
 8003410:	683b      	ldr	r3, [r7, #0]
 8003412:	4a12      	ldr	r2, [pc, #72]	; (800345c <LSM303AGR_ACC_GetOutputDataRate+0x170>)
 8003414:	601a      	str	r2, [r3, #0]
        break;
 8003416:	e01b      	b.n	8003450 <LSM303AGR_ACC_GetOutputDataRate+0x164>

      case LSM303AGR_XL_ODR_25Hz:
        *Odr = 25.0f;
 8003418:	683b      	ldr	r3, [r7, #0]
 800341a:	4a11      	ldr	r2, [pc, #68]	; (8003460 <LSM303AGR_ACC_GetOutputDataRate+0x174>)
 800341c:	601a      	str	r2, [r3, #0]
        break;
 800341e:	e017      	b.n	8003450 <LSM303AGR_ACC_GetOutputDataRate+0x164>

      case LSM303AGR_XL_ODR_50Hz:
        *Odr = 50.0f;
 8003420:	683b      	ldr	r3, [r7, #0]
 8003422:	4a10      	ldr	r2, [pc, #64]	; (8003464 <LSM303AGR_ACC_GetOutputDataRate+0x178>)
 8003424:	601a      	str	r2, [r3, #0]
        break;
 8003426:	e013      	b.n	8003450 <LSM303AGR_ACC_GetOutputDataRate+0x164>

      case LSM303AGR_XL_ODR_100Hz:
        *Odr = 100.0f;
 8003428:	683b      	ldr	r3, [r7, #0]
 800342a:	4a0f      	ldr	r2, [pc, #60]	; (8003468 <LSM303AGR_ACC_GetOutputDataRate+0x17c>)
 800342c:	601a      	str	r2, [r3, #0]
        break;
 800342e:	e00f      	b.n	8003450 <LSM303AGR_ACC_GetOutputDataRate+0x164>

      case LSM303AGR_XL_ODR_200Hz:
        *Odr = 200.0f;
 8003430:	683b      	ldr	r3, [r7, #0]
 8003432:	4a0e      	ldr	r2, [pc, #56]	; (800346c <LSM303AGR_ACC_GetOutputDataRate+0x180>)
 8003434:	601a      	str	r2, [r3, #0]
        break;
 8003436:	e00b      	b.n	8003450 <LSM303AGR_ACC_GetOutputDataRate+0x164>

      case LSM303AGR_XL_ODR_400Hz:
        *Odr = 400.0f;
 8003438:	683b      	ldr	r3, [r7, #0]
 800343a:	4a0d      	ldr	r2, [pc, #52]	; (8003470 <LSM303AGR_ACC_GetOutputDataRate+0x184>)
 800343c:	601a      	str	r2, [r3, #0]
        break;
 800343e:	e007      	b.n	8003450 <LSM303AGR_ACC_GetOutputDataRate+0x164>

      case LSM303AGR_XL_ODR_1kHz344_NM_HP_5kHz376_LP:
        *Odr = 1344.0f;
 8003440:	683b      	ldr	r3, [r7, #0]
 8003442:	4a0e      	ldr	r2, [pc, #56]	; (800347c <LSM303AGR_ACC_GetOutputDataRate+0x190>)
 8003444:	601a      	str	r2, [r3, #0]
        break;
 8003446:	e003      	b.n	8003450 <LSM303AGR_ACC_GetOutputDataRate+0x164>

      default:
        ret = LSM303AGR_ERROR;
 8003448:	f04f 33ff 	mov.w	r3, #4294967295
 800344c:	60fb      	str	r3, [r7, #12]
        break;
 800344e:	bf00      	nop
    }
  }

  return ret;
 8003450:	68fb      	ldr	r3, [r7, #12]
}
 8003452:	4618      	mov	r0, r3
 8003454:	3710      	adds	r7, #16
 8003456:	46bd      	mov	sp, r7
 8003458:	bd80      	pop	{r7, pc}
 800345a:	bf00      	nop
 800345c:	41200000 	.word	0x41200000
 8003460:	41c80000 	.word	0x41c80000
 8003464:	42480000 	.word	0x42480000
 8003468:	42c80000 	.word	0x42c80000
 800346c:	43480000 	.word	0x43480000
 8003470:	43c80000 	.word	0x43c80000
 8003474:	44ca8000 	.word	0x44ca8000
 8003478:	45a80000 	.word	0x45a80000
 800347c:	44a80000 	.word	0x44a80000

08003480 <LSM303AGR_ACC_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM303AGR_ACC_SetOutputDataRate(LSM303AGR_ACC_Object_t *pObj, float Odr)
{
 8003480:	b580      	push	{r7, lr}
 8003482:	b082      	sub	sp, #8
 8003484:	af00      	add	r7, sp, #0
 8003486:	6078      	str	r0, [r7, #4]
 8003488:	ed87 0a00 	vstr	s0, [r7]
  /* Check if the component is enabled */
  if (pObj->acc_is_enabled == 1U)
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8003492:	2b01      	cmp	r3, #1
 8003494:	d106      	bne.n	80034a4 <LSM303AGR_ACC_SetOutputDataRate+0x24>
  {
    return LSM303AGR_ACC_SetOutputDataRate_When_Enabled(pObj, Odr);
 8003496:	ed97 0a00 	vldr	s0, [r7]
 800349a:	6878      	ldr	r0, [r7, #4]
 800349c:	f000 fc78 	bl	8003d90 <LSM303AGR_ACC_SetOutputDataRate_When_Enabled>
 80034a0:	4603      	mov	r3, r0
 80034a2:	e005      	b.n	80034b0 <LSM303AGR_ACC_SetOutputDataRate+0x30>
  }
  else
  {
    return LSM303AGR_ACC_SetOutputDataRate_When_Disabled(pObj, Odr);
 80034a4:	ed97 0a00 	vldr	s0, [r7]
 80034a8:	6878      	ldr	r0, [r7, #4]
 80034aa:	f000 fcd3 	bl	8003e54 <LSM303AGR_ACC_SetOutputDataRate_When_Disabled>
 80034ae:	4603      	mov	r3, r0
  }
}
 80034b0:	4618      	mov	r0, r3
 80034b2:	3708      	adds	r7, #8
 80034b4:	46bd      	mov	sp, r7
 80034b6:	bd80      	pop	{r7, pc}

080034b8 <LSM303AGR_ACC_GetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale pointer where the full scale is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM303AGR_ACC_GetFullScale(LSM303AGR_ACC_Object_t *pObj, int32_t *FullScale)
{
 80034b8:	b580      	push	{r7, lr}
 80034ba:	b084      	sub	sp, #16
 80034bc:	af00      	add	r7, sp, #0
 80034be:	6078      	str	r0, [r7, #4]
 80034c0:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM303AGR_OK;
 80034c2:	2300      	movs	r3, #0
 80034c4:	60fb      	str	r3, [r7, #12]
  lsm303agr_fs_a_t fs_low_level;

  /* Read actual full scale selection from sensor. */
  if (lsm303agr_xl_full_scale_get(&(pObj->Ctx), &fs_low_level) != LSM303AGR_OK)
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	3320      	adds	r3, #32
 80034ca:	f107 020b 	add.w	r2, r7, #11
 80034ce:	4611      	mov	r1, r2
 80034d0:	4618      	mov	r0, r3
 80034d2:	f000 fee9 	bl	80042a8 <lsm303agr_xl_full_scale_get>
 80034d6:	4603      	mov	r3, r0
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d002      	beq.n	80034e2 <LSM303AGR_ACC_GetFullScale+0x2a>
  {
    return LSM303AGR_ERROR;
 80034dc:	f04f 33ff 	mov.w	r3, #4294967295
 80034e0:	e023      	b.n	800352a <LSM303AGR_ACC_GetFullScale+0x72>
  }

  switch (fs_low_level)
 80034e2:	7afb      	ldrb	r3, [r7, #11]
 80034e4:	2b03      	cmp	r3, #3
 80034e6:	d81b      	bhi.n	8003520 <LSM303AGR_ACC_GetFullScale+0x68>
 80034e8:	a201      	add	r2, pc, #4	; (adr r2, 80034f0 <LSM303AGR_ACC_GetFullScale+0x38>)
 80034ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034ee:	bf00      	nop
 80034f0:	08003501 	.word	0x08003501
 80034f4:	08003509 	.word	0x08003509
 80034f8:	08003511 	.word	0x08003511
 80034fc:	08003519 	.word	0x08003519
  {
    case LSM303AGR_2g:
      *FullScale =  2;
 8003500:	683b      	ldr	r3, [r7, #0]
 8003502:	2202      	movs	r2, #2
 8003504:	601a      	str	r2, [r3, #0]
      break;
 8003506:	e00f      	b.n	8003528 <LSM303AGR_ACC_GetFullScale+0x70>

    case LSM303AGR_4g:
      *FullScale =  4;
 8003508:	683b      	ldr	r3, [r7, #0]
 800350a:	2204      	movs	r2, #4
 800350c:	601a      	str	r2, [r3, #0]
      break;
 800350e:	e00b      	b.n	8003528 <LSM303AGR_ACC_GetFullScale+0x70>

    case LSM303AGR_8g:
      *FullScale =  8;
 8003510:	683b      	ldr	r3, [r7, #0]
 8003512:	2208      	movs	r2, #8
 8003514:	601a      	str	r2, [r3, #0]
      break;
 8003516:	e007      	b.n	8003528 <LSM303AGR_ACC_GetFullScale+0x70>

    case LSM303AGR_16g:
      *FullScale = 16;
 8003518:	683b      	ldr	r3, [r7, #0]
 800351a:	2210      	movs	r2, #16
 800351c:	601a      	str	r2, [r3, #0]
      break;
 800351e:	e003      	b.n	8003528 <LSM303AGR_ACC_GetFullScale+0x70>

    default:
      ret = LSM303AGR_ERROR;
 8003520:	f04f 33ff 	mov.w	r3, #4294967295
 8003524:	60fb      	str	r3, [r7, #12]
      break;
 8003526:	bf00      	nop
  }

  return ret;
 8003528:	68fb      	ldr	r3, [r7, #12]
}
 800352a:	4618      	mov	r0, r3
 800352c:	3710      	adds	r7, #16
 800352e:	46bd      	mov	sp, r7
 8003530:	bd80      	pop	{r7, pc}
 8003532:	bf00      	nop

08003534 <LSM303AGR_ACC_SetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale the functional full scale to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM303AGR_ACC_SetFullScale(LSM303AGR_ACC_Object_t *pObj, int32_t FullScale)
{
 8003534:	b580      	push	{r7, lr}
 8003536:	b084      	sub	sp, #16
 8003538:	af00      	add	r7, sp, #0
 800353a:	6078      	str	r0, [r7, #4]
 800353c:	6039      	str	r1, [r7, #0]
  lsm303agr_fs_a_t new_fs;

  new_fs = (FullScale <= 2) ? LSM303AGR_2g
           : (FullScale <= 4) ? LSM303AGR_4g
 800353e:	683b      	ldr	r3, [r7, #0]
 8003540:	2b02      	cmp	r3, #2
 8003542:	dd0b      	ble.n	800355c <LSM303AGR_ACC_SetFullScale+0x28>
 8003544:	683b      	ldr	r3, [r7, #0]
 8003546:	2b04      	cmp	r3, #4
 8003548:	dd06      	ble.n	8003558 <LSM303AGR_ACC_SetFullScale+0x24>
 800354a:	683b      	ldr	r3, [r7, #0]
 800354c:	2b08      	cmp	r3, #8
 800354e:	dc01      	bgt.n	8003554 <LSM303AGR_ACC_SetFullScale+0x20>
 8003550:	2302      	movs	r3, #2
 8003552:	e004      	b.n	800355e <LSM303AGR_ACC_SetFullScale+0x2a>
 8003554:	2303      	movs	r3, #3
 8003556:	e002      	b.n	800355e <LSM303AGR_ACC_SetFullScale+0x2a>
 8003558:	2301      	movs	r3, #1
 800355a:	e000      	b.n	800355e <LSM303AGR_ACC_SetFullScale+0x2a>
 800355c:	2300      	movs	r3, #0
  new_fs = (FullScale <= 2) ? LSM303AGR_2g
 800355e:	73fb      	strb	r3, [r7, #15]
           : (FullScale <= 8) ? LSM303AGR_8g
           :                    LSM303AGR_16g;

  if (lsm303agr_xl_full_scale_set(&(pObj->Ctx), new_fs) != LSM303AGR_OK)
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	3320      	adds	r3, #32
 8003564:	7bfa      	ldrb	r2, [r7, #15]
 8003566:	4611      	mov	r1, r2
 8003568:	4618      	mov	r0, r3
 800356a:	f000 fe77 	bl	800425c <lsm303agr_xl_full_scale_set>
 800356e:	4603      	mov	r3, r0
 8003570:	2b00      	cmp	r3, #0
 8003572:	d002      	beq.n	800357a <LSM303AGR_ACC_SetFullScale+0x46>
  {
    return LSM303AGR_ERROR;
 8003574:	f04f 33ff 	mov.w	r3, #4294967295
 8003578:	e000      	b.n	800357c <LSM303AGR_ACC_SetFullScale+0x48>
  }

  return LSM303AGR_OK;
 800357a:	2300      	movs	r3, #0
}
 800357c:	4618      	mov	r0, r3
 800357e:	3710      	adds	r7, #16
 8003580:	46bd      	mov	sp, r7
 8003582:	bd80      	pop	{r7, pc}

08003584 <LSM303AGR_ACC_GetAxesRaw>:
  * @param  pObj the device pObj
  * @param  Value pointer where the raw values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM303AGR_ACC_GetAxesRaw(LSM303AGR_ACC_Object_t *pObj, LSM303AGR_AxesRaw_t *Value)
{
 8003584:	b580      	push	{r7, lr}
 8003586:	b088      	sub	sp, #32
 8003588:	af00      	add	r7, sp, #0
 800358a:	6078      	str	r0, [r7, #4]
 800358c:	6039      	str	r1, [r7, #0]
  int16_t divisor = 1;
 800358e:	2301      	movs	r3, #1
 8003590:	83fb      	strh	r3, [r7, #30]
  lsm303agr_axis3bit16_t data_raw;
  int32_t ret = LSM303AGR_OK;
 8003592:	2300      	movs	r3, #0
 8003594:	61bb      	str	r3, [r7, #24]
  lsm303agr_op_md_a_t op_mode;

  /* Read operative mode from sensor. */
  if (lsm303agr_xl_operating_mode_get(&(pObj->Ctx), &op_mode) != LSM303AGR_OK)
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	3320      	adds	r3, #32
 800359a:	f107 020f 	add.w	r2, r7, #15
 800359e:	4611      	mov	r1, r2
 80035a0:	4618      	mov	r0, r3
 80035a2:	f000 fda5 	bl	80040f0 <lsm303agr_xl_operating_mode_get>
 80035a6:	4603      	mov	r3, r0
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d002      	beq.n	80035b2 <LSM303AGR_ACC_GetAxesRaw+0x2e>
  {
    return LSM303AGR_ERROR;
 80035ac:	f04f 33ff 	mov.w	r3, #4294967295
 80035b0:	e04a      	b.n	8003648 <LSM303AGR_ACC_GetAxesRaw+0xc4>
  }

  /* Store the sensitivity based on actual full scale. */
  switch (op_mode)
 80035b2:	7bfb      	ldrb	r3, [r7, #15]
 80035b4:	2b02      	cmp	r3, #2
 80035b6:	d00c      	beq.n	80035d2 <LSM303AGR_ACC_GetAxesRaw+0x4e>
 80035b8:	2b02      	cmp	r3, #2
 80035ba:	dc0e      	bgt.n	80035da <LSM303AGR_ACC_GetAxesRaw+0x56>
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d002      	beq.n	80035c6 <LSM303AGR_ACC_GetAxesRaw+0x42>
 80035c0:	2b01      	cmp	r3, #1
 80035c2:	d003      	beq.n	80035cc <LSM303AGR_ACC_GetAxesRaw+0x48>
 80035c4:	e009      	b.n	80035da <LSM303AGR_ACC_GetAxesRaw+0x56>
  {
    case LSM303AGR_HR_12bit:
      divisor = 16;
 80035c6:	2310      	movs	r3, #16
 80035c8:	83fb      	strh	r3, [r7, #30]
      break;
 80035ca:	e00a      	b.n	80035e2 <LSM303AGR_ACC_GetAxesRaw+0x5e>

    case LSM303AGR_NM_10bit:
      divisor = 64;
 80035cc:	2340      	movs	r3, #64	; 0x40
 80035ce:	83fb      	strh	r3, [r7, #30]
      break;
 80035d0:	e007      	b.n	80035e2 <LSM303AGR_ACC_GetAxesRaw+0x5e>

    case LSM303AGR_LP_8bit:
      divisor = 256;
 80035d2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80035d6:	83fb      	strh	r3, [r7, #30]
      break;
 80035d8:	e003      	b.n	80035e2 <LSM303AGR_ACC_GetAxesRaw+0x5e>

    default:
      ret = LSM303AGR_ERROR;
 80035da:	f04f 33ff 	mov.w	r3, #4294967295
 80035de:	61bb      	str	r3, [r7, #24]
      break;
 80035e0:	bf00      	nop
  }

  if (ret == LSM303AGR_ERROR)
 80035e2:	69bb      	ldr	r3, [r7, #24]
 80035e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035e8:	d101      	bne.n	80035ee <LSM303AGR_ACC_GetAxesRaw+0x6a>
  {
    return ret;
 80035ea:	69bb      	ldr	r3, [r7, #24]
 80035ec:	e02c      	b.n	8003648 <LSM303AGR_ACC_GetAxesRaw+0xc4>
  }

  /* Read raw data values. */
  if (lsm303agr_acceleration_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM303AGR_OK)
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	3320      	adds	r3, #32
 80035f2:	f107 0210 	add.w	r2, r7, #16
 80035f6:	4611      	mov	r1, r2
 80035f8:	4618      	mov	r0, r3
 80035fa:	f000 feb3 	bl	8004364 <lsm303agr_acceleration_raw_get>
 80035fe:	4603      	mov	r3, r0
 8003600:	2b00      	cmp	r3, #0
 8003602:	d002      	beq.n	800360a <LSM303AGR_ACC_GetAxesRaw+0x86>
  {
    return LSM303AGR_ERROR;
 8003604:	f04f 33ff 	mov.w	r3, #4294967295
 8003608:	e01e      	b.n	8003648 <LSM303AGR_ACC_GetAxesRaw+0xc4>
  }

  /* Format the data. */
  Value->x = (data_raw.i16bit[0] / divisor);
 800360a:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800360e:	461a      	mov	r2, r3
 8003610:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8003614:	fb92 f3f3 	sdiv	r3, r2, r3
 8003618:	b21a      	sxth	r2, r3
 800361a:	683b      	ldr	r3, [r7, #0]
 800361c:	801a      	strh	r2, [r3, #0]
  Value->y = (data_raw.i16bit[1] / divisor);
 800361e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8003622:	461a      	mov	r2, r3
 8003624:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8003628:	fb92 f3f3 	sdiv	r3, r2, r3
 800362c:	b21a      	sxth	r2, r3
 800362e:	683b      	ldr	r3, [r7, #0]
 8003630:	805a      	strh	r2, [r3, #2]
  Value->z = (data_raw.i16bit[2] / divisor);
 8003632:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8003636:	461a      	mov	r2, r3
 8003638:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800363c:	fb92 f3f3 	sdiv	r3, r2, r3
 8003640:	b21a      	sxth	r2, r3
 8003642:	683b      	ldr	r3, [r7, #0]
 8003644:	809a      	strh	r2, [r3, #4]

  return ret;
 8003646:	69bb      	ldr	r3, [r7, #24]
}
 8003648:	4618      	mov	r0, r3
 800364a:	3720      	adds	r7, #32
 800364c:	46bd      	mov	sp, r7
 800364e:	bd80      	pop	{r7, pc}

08003650 <LSM303AGR_ACC_GetAxes>:
  * @param  pObj the device pObj
  * @param  Acceleration pointer where the values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM303AGR_ACC_GetAxes(LSM303AGR_ACC_Object_t *pObj, LSM303AGR_Axes_t *Acceleration)
{
 8003650:	b580      	push	{r7, lr}
 8003652:	b086      	sub	sp, #24
 8003654:	af00      	add	r7, sp, #0
 8003656:	6078      	str	r0, [r7, #4]
 8003658:	6039      	str	r1, [r7, #0]
  LSM303AGR_AxesRaw_t data_raw;
  float sensitivity = 0.0f;
 800365a:	f04f 0300 	mov.w	r3, #0
 800365e:	60fb      	str	r3, [r7, #12]

  /* Read raw data values. */
  if (LSM303AGR_ACC_GetAxesRaw(pObj, &data_raw) != LSM303AGR_OK)
 8003660:	f107 0310 	add.w	r3, r7, #16
 8003664:	4619      	mov	r1, r3
 8003666:	6878      	ldr	r0, [r7, #4]
 8003668:	f7ff ff8c 	bl	8003584 <LSM303AGR_ACC_GetAxesRaw>
 800366c:	4603      	mov	r3, r0
 800366e:	2b00      	cmp	r3, #0
 8003670:	d002      	beq.n	8003678 <LSM303AGR_ACC_GetAxes+0x28>
  {
    return LSM303AGR_ERROR;
 8003672:	f04f 33ff 	mov.w	r3, #4294967295
 8003676:	e03c      	b.n	80036f2 <LSM303AGR_ACC_GetAxes+0xa2>
  }

  /* Get LSM303AGR actual sensitivity. */
  if (LSM303AGR_ACC_GetSensitivity(pObj, &sensitivity) != LSM303AGR_OK)
 8003678:	f107 030c 	add.w	r3, r7, #12
 800367c:	4619      	mov	r1, r3
 800367e:	6878      	ldr	r0, [r7, #4]
 8003680:	f7ff fde9 	bl	8003256 <LSM303AGR_ACC_GetSensitivity>
 8003684:	4603      	mov	r3, r0
 8003686:	2b00      	cmp	r3, #0
 8003688:	d002      	beq.n	8003690 <LSM303AGR_ACC_GetAxes+0x40>
  {
    return LSM303AGR_ERROR;
 800368a:	f04f 33ff 	mov.w	r3, #4294967295
 800368e:	e030      	b.n	80036f2 <LSM303AGR_ACC_GetAxes+0xa2>
  }

  /* Calculate the data. */
  Acceleration->x = (int32_t)((float)((float)data_raw.x * sensitivity));
 8003690:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8003694:	ee07 3a90 	vmov	s15, r3
 8003698:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800369c:	edd7 7a03 	vldr	s15, [r7, #12]
 80036a0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80036a4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80036a8:	ee17 2a90 	vmov	r2, s15
 80036ac:	683b      	ldr	r3, [r7, #0]
 80036ae:	601a      	str	r2, [r3, #0]
  Acceleration->y = (int32_t)((float)((float)data_raw.y * sensitivity));
 80036b0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80036b4:	ee07 3a90 	vmov	s15, r3
 80036b8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80036bc:	edd7 7a03 	vldr	s15, [r7, #12]
 80036c0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80036c4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80036c8:	ee17 2a90 	vmov	r2, s15
 80036cc:	683b      	ldr	r3, [r7, #0]
 80036ce:	605a      	str	r2, [r3, #4]
  Acceleration->z = (int32_t)((float)((float)data_raw.z * sensitivity));
 80036d0:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80036d4:	ee07 3a90 	vmov	s15, r3
 80036d8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80036dc:	edd7 7a03 	vldr	s15, [r7, #12]
 80036e0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80036e4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80036e8:	ee17 2a90 	vmov	r2, s15
 80036ec:	683b      	ldr	r3, [r7, #0]
 80036ee:	609a      	str	r2, [r3, #8]

  return LSM303AGR_OK;
 80036f0:	2300      	movs	r3, #0
}
 80036f2:	4618      	mov	r0, r3
 80036f4:	3718      	adds	r7, #24
 80036f6:	46bd      	mov	sp, r7
 80036f8:	bd80      	pop	{r7, pc}

080036fa <LSM303AGR_ACC_Write_Reg>:
  * @param  Reg address to be written
  * @param  Data value to be written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM303AGR_ACC_Write_Reg(LSM303AGR_ACC_Object_t *pObj, uint8_t Reg, uint8_t Data)
{
 80036fa:	b580      	push	{r7, lr}
 80036fc:	b082      	sub	sp, #8
 80036fe:	af00      	add	r7, sp, #0
 8003700:	6078      	str	r0, [r7, #4]
 8003702:	460b      	mov	r3, r1
 8003704:	70fb      	strb	r3, [r7, #3]
 8003706:	4613      	mov	r3, r2
 8003708:	70bb      	strb	r3, [r7, #2]
  if (lsm303agr_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LSM303AGR_OK)
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	f103 0020 	add.w	r0, r3, #32
 8003710:	1cba      	adds	r2, r7, #2
 8003712:	78f9      	ldrb	r1, [r7, #3]
 8003714:	2301      	movs	r3, #1
 8003716:	f000 fcd3 	bl	80040c0 <lsm303agr_write_reg>
 800371a:	4603      	mov	r3, r0
 800371c:	2b00      	cmp	r3, #0
 800371e:	d002      	beq.n	8003726 <LSM303AGR_ACC_Write_Reg+0x2c>
  {
    return LSM303AGR_ERROR;
 8003720:	f04f 33ff 	mov.w	r3, #4294967295
 8003724:	e000      	b.n	8003728 <LSM303AGR_ACC_Write_Reg+0x2e>
  }

  return LSM303AGR_OK;
 8003726:	2300      	movs	r3, #0
}
 8003728:	4618      	mov	r0, r3
 800372a:	3708      	adds	r7, #8
 800372c:	46bd      	mov	sp, r7
 800372e:	bd80      	pop	{r7, pc}

08003730 <LSM303AGR_MAG_RegisterBusIO>:
  * @brief  Register Component Bus IO operations
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM303AGR_MAG_RegisterBusIO(LSM303AGR_MAG_Object_t *pObj, LSM303AGR_IO_t *pIO)
{
 8003730:	b580      	push	{r7, lr}
 8003732:	b084      	sub	sp, #16
 8003734:	af00      	add	r7, sp, #0
 8003736:	6078      	str	r0, [r7, #4]
 8003738:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM303AGR_OK;
 800373a:	2300      	movs	r3, #0
 800373c:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	2b00      	cmp	r3, #0
 8003742:	d103      	bne.n	800374c <LSM303AGR_MAG_RegisterBusIO+0x1c>
  {
    ret = LSM303AGR_ERROR;
 8003744:	f04f 33ff 	mov.w	r3, #4294967295
 8003748:	60fb      	str	r3, [r7, #12]
 800374a:	e04b      	b.n	80037e4 <LSM303AGR_MAG_RegisterBusIO+0xb4>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 800374c:	683b      	ldr	r3, [r7, #0]
 800374e:	681a      	ldr	r2, [r3, #0]
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8003754:	683b      	ldr	r3, [r7, #0]
 8003756:	685a      	ldr	r2, [r3, #4]
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 800375c:	683b      	ldr	r3, [r7, #0]
 800375e:	689a      	ldr	r2, [r3, #8]
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 8003764:	683b      	ldr	r3, [r7, #0]
 8003766:	7b1a      	ldrb	r2, [r3, #12]
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 800376c:	683b      	ldr	r3, [r7, #0]
 800376e:	691a      	ldr	r2, [r3, #16]
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8003774:	683b      	ldr	r3, [r7, #0]
 8003776:	695a      	ldr	r2, [r3, #20]
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 800377c:	683b      	ldr	r3, [r7, #0]
 800377e:	699a      	ldr	r2, [r3, #24]
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadMagRegWrap;
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	4a1a      	ldr	r2, [pc, #104]	; (80037f0 <LSM303AGR_MAG_RegisterBusIO+0xc0>)
 8003788:	625a      	str	r2, [r3, #36]	; 0x24
    pObj->Ctx.write_reg = WriteMagRegWrap;
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	4a19      	ldr	r2, [pc, #100]	; (80037f4 <LSM303AGR_MAG_RegisterBusIO+0xc4>)
 800378e:	621a      	str	r2, [r3, #32]
    pObj->Ctx.handle    = pObj;
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	687a      	ldr	r2, [r7, #4]
 8003794:	62da      	str	r2, [r3, #44]	; 0x2c

    if (pObj->IO.Init == NULL)
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	2b00      	cmp	r3, #0
 800379c:	d103      	bne.n	80037a6 <LSM303AGR_MAG_RegisterBusIO+0x76>
    {
      ret = LSM303AGR_ERROR;
 800379e:	f04f 33ff 	mov.w	r3, #4294967295
 80037a2:	60fb      	str	r3, [r7, #12]
 80037a4:	e01e      	b.n	80037e4 <LSM303AGR_MAG_RegisterBusIO+0xb4>
    }
    else if (pObj->IO.Init() != LSM303AGR_OK)
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	4798      	blx	r3
 80037ac:	4603      	mov	r3, r0
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d003      	beq.n	80037ba <LSM303AGR_MAG_RegisterBusIO+0x8a>
    {
      ret = LSM303AGR_ERROR;
 80037b2:	f04f 33ff 	mov.w	r3, #4294967295
 80037b6:	60fb      	str	r3, [r7, #12]
 80037b8:	e014      	b.n	80037e4 <LSM303AGR_MAG_RegisterBusIO+0xb4>
    }
    else
    {
      if (pObj->IO.BusType != LSM303AGR_I2C_BUS) /* If the bus type is not I2C */
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	689b      	ldr	r3, [r3, #8]
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d010      	beq.n	80037e4 <LSM303AGR_MAG_RegisterBusIO+0xb4>
      {
        /* Disable I2C interface support only the first time */
        if (pObj->is_initialized == 0U)
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d10b      	bne.n	80037e4 <LSM303AGR_MAG_RegisterBusIO+0xb4>
        {
          /* Disable I2C interface on the component */
          if (lsm303agr_mag_i2c_interface_set(&(pObj->Ctx), LSM303AGR_I2C_DISABLE) != LSM303AGR_OK)
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	3320      	adds	r3, #32
 80037d0:	2101      	movs	r1, #1
 80037d2:	4618      	mov	r0, r3
 80037d4:	f000 ff75 	bl	80046c2 <lsm303agr_mag_i2c_interface_set>
 80037d8:	4603      	mov	r3, r0
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d002      	beq.n	80037e4 <LSM303AGR_MAG_RegisterBusIO+0xb4>
          {
            return LSM303AGR_ERROR;
 80037de:	f04f 33ff 	mov.w	r3, #4294967295
 80037e2:	e000      	b.n	80037e6 <LSM303AGR_MAG_RegisterBusIO+0xb6>
        }
      }
    }
  }

  return ret;
 80037e4:	68fb      	ldr	r3, [r7, #12]
}
 80037e6:	4618      	mov	r0, r3
 80037e8:	3710      	adds	r7, #16
 80037ea:	46bd      	mov	sp, r7
 80037ec:	bd80      	pop	{r7, pc}
 80037ee:	bf00      	nop
 80037f0:	08003fcd 	.word	0x08003fcd
 80037f4:	0800402f 	.word	0x0800402f

080037f8 <LSM303AGR_MAG_Init>:
  * @brief  Initialize the LSM303AGR sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM303AGR_MAG_Init(LSM303AGR_MAG_Object_t *pObj)
{
 80037f8:	b580      	push	{r7, lr}
 80037fa:	b082      	sub	sp, #8
 80037fc:	af00      	add	r7, sp, #0
 80037fe:	6078      	str	r0, [r7, #4]
  /* Enable BDU */
  if (lsm303agr_mag_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM303AGR_OK)
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	3320      	adds	r3, #32
 8003804:	2101      	movs	r1, #1
 8003806:	4618      	mov	r0, r3
 8003808:	f000 fe7c 	bl	8004504 <lsm303agr_mag_block_data_update_set>
 800380c:	4603      	mov	r3, r0
 800380e:	2b00      	cmp	r3, #0
 8003810:	d002      	beq.n	8003818 <LSM303AGR_MAG_Init+0x20>
  {
    return LSM303AGR_ERROR;
 8003812:	f04f 33ff 	mov.w	r3, #4294967295
 8003816:	e028      	b.n	800386a <LSM303AGR_MAG_Init+0x72>
  }

  /* Operating mode selection - power down */
  if (lsm303agr_mag_operating_mode_set(&(pObj->Ctx), LSM303AGR_POWER_DOWN) != LSM303AGR_OK)
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	3320      	adds	r3, #32
 800381c:	2102      	movs	r1, #2
 800381e:	4618      	mov	r0, r3
 8003820:	f000 fdeb 	bl	80043fa <lsm303agr_mag_operating_mode_set>
 8003824:	4603      	mov	r3, r0
 8003826:	2b00      	cmp	r3, #0
 8003828:	d002      	beq.n	8003830 <LSM303AGR_MAG_Init+0x38>
  {
    return LSM303AGR_ERROR;
 800382a:	f04f 33ff 	mov.w	r3, #4294967295
 800382e:	e01c      	b.n	800386a <LSM303AGR_MAG_Init+0x72>
  }

  /* Output data rate selection */
  if (lsm303agr_mag_data_rate_set(&(pObj->Ctx), LSM303AGR_MG_ODR_100Hz) != LSM303AGR_OK)
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	3320      	adds	r3, #32
 8003834:	2103      	movs	r1, #3
 8003836:	4618      	mov	r0, r3
 8003838:	f000 fe05 	bl	8004446 <lsm303agr_mag_data_rate_set>
 800383c:	4603      	mov	r3, r0
 800383e:	2b00      	cmp	r3, #0
 8003840:	d002      	beq.n	8003848 <LSM303AGR_MAG_Init+0x50>
  {
    return LSM303AGR_ERROR;
 8003842:	f04f 33ff 	mov.w	r3, #4294967295
 8003846:	e010      	b.n	800386a <LSM303AGR_MAG_Init+0x72>
  }

  /* Self Test disabled. */
  if (lsm303agr_mag_self_test_set(&(pObj->Ctx), PROPERTY_DISABLE) != LSM303AGR_OK)
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	3320      	adds	r3, #32
 800384c:	2100      	movs	r1, #0
 800384e:	4618      	mov	r0, r3
 8003850:	f000 feeb 	bl	800462a <lsm303agr_mag_self_test_set>
 8003854:	4603      	mov	r3, r0
 8003856:	2b00      	cmp	r3, #0
 8003858:	d002      	beq.n	8003860 <LSM303AGR_MAG_Init+0x68>
  {
    return LSM303AGR_ERROR;
 800385a:	f04f 33ff 	mov.w	r3, #4294967295
 800385e:	e004      	b.n	800386a <LSM303AGR_MAG_Init+0x72>
  }

  pObj->is_initialized = 1;
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	2201      	movs	r2, #1
 8003864:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return LSM303AGR_OK;
 8003868:	2300      	movs	r3, #0
}
 800386a:	4618      	mov	r0, r3
 800386c:	3708      	adds	r7, #8
 800386e:	46bd      	mov	sp, r7
 8003870:	bd80      	pop	{r7, pc}

08003872 <LSM303AGR_MAG_DeInit>:
  * @brief  Deinitialize the LSM303AGR magnetometer sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM303AGR_MAG_DeInit(LSM303AGR_MAG_Object_t *pObj)
{
 8003872:	b580      	push	{r7, lr}
 8003874:	b082      	sub	sp, #8
 8003876:	af00      	add	r7, sp, #0
 8003878:	6078      	str	r0, [r7, #4]
  /* Disable the component */
  if (LSM303AGR_MAG_Disable(pObj) != LSM303AGR_OK)
 800387a:	6878      	ldr	r0, [r7, #4]
 800387c:	f000 f874 	bl	8003968 <LSM303AGR_MAG_Disable>
 8003880:	4603      	mov	r3, r0
 8003882:	2b00      	cmp	r3, #0
 8003884:	d002      	beq.n	800388c <LSM303AGR_MAG_DeInit+0x1a>
  {
    return LSM303AGR_ERROR;
 8003886:	f04f 33ff 	mov.w	r3, #4294967295
 800388a:	e004      	b.n	8003896 <LSM303AGR_MAG_DeInit+0x24>
  }

  pObj->is_initialized = 0;
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	2200      	movs	r2, #0
 8003890:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return LSM303AGR_OK;
 8003894:	2300      	movs	r3, #0
}
 8003896:	4618      	mov	r0, r3
 8003898:	3708      	adds	r7, #8
 800389a:	46bd      	mov	sp, r7
 800389c:	bd80      	pop	{r7, pc}

0800389e <LSM303AGR_MAG_ReadID>:
  * @param  pObj the device pObj
  * @param  Id the WHO_AM_I value
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM303AGR_MAG_ReadID(LSM303AGR_MAG_Object_t *pObj, uint8_t *Id)
{
 800389e:	b580      	push	{r7, lr}
 80038a0:	b082      	sub	sp, #8
 80038a2:	af00      	add	r7, sp, #0
 80038a4:	6078      	str	r0, [r7, #4]
 80038a6:	6039      	str	r1, [r7, #0]
  if (lsm303agr_mag_device_id_get(&(pObj->Ctx), Id) != LSM303AGR_OK)
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	3320      	adds	r3, #32
 80038ac:	6839      	ldr	r1, [r7, #0]
 80038ae:	4618      	mov	r0, r3
 80038b0:	f000 feaa 	bl	8004608 <lsm303agr_mag_device_id_get>
 80038b4:	4603      	mov	r3, r0
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d002      	beq.n	80038c0 <LSM303AGR_MAG_ReadID+0x22>
  {
    return LSM303AGR_ERROR;
 80038ba:	f04f 33ff 	mov.w	r3, #4294967295
 80038be:	e000      	b.n	80038c2 <LSM303AGR_MAG_ReadID+0x24>
  }

  return LSM303AGR_OK;
 80038c0:	2300      	movs	r3, #0
}
 80038c2:	4618      	mov	r0, r3
 80038c4:	3708      	adds	r7, #8
 80038c6:	46bd      	mov	sp, r7
 80038c8:	bd80      	pop	{r7, pc}
	...

080038cc <LSM303AGR_MAG_GetCapabilities>:
  * @param  pObj Component object pointer
  * @param  Capabilities pointer to LSM303AGR magnetometer sensor capabilities
  * @retval Component status
  */
int32_t LSM303AGR_MAG_GetCapabilities(LSM303AGR_MAG_Object_t *pObj, LSM303AGR_Capabilities_t *Capabilities)
{
 80038cc:	b480      	push	{r7}
 80038ce:	b083      	sub	sp, #12
 80038d0:	af00      	add	r7, sp, #0
 80038d2:	6078      	str	r0, [r7, #4]
 80038d4:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Acc          = 0;
 80038d6:	683b      	ldr	r3, [r7, #0]
 80038d8:	2200      	movs	r2, #0
 80038da:	701a      	strb	r2, [r3, #0]
  Capabilities->Gyro         = 0;
 80038dc:	683b      	ldr	r3, [r7, #0]
 80038de:	2200      	movs	r2, #0
 80038e0:	705a      	strb	r2, [r3, #1]
  Capabilities->Magneto      = 1;
 80038e2:	683b      	ldr	r3, [r7, #0]
 80038e4:	2201      	movs	r2, #1
 80038e6:	709a      	strb	r2, [r3, #2]
  Capabilities->LowPower     = 0;
 80038e8:	683b      	ldr	r3, [r7, #0]
 80038ea:	2200      	movs	r2, #0
 80038ec:	70da      	strb	r2, [r3, #3]
  Capabilities->GyroMaxFS    = 0;
 80038ee:	683b      	ldr	r3, [r7, #0]
 80038f0:	2200      	movs	r2, #0
 80038f2:	605a      	str	r2, [r3, #4]
  Capabilities->AccMaxFS     = 0;
 80038f4:	683b      	ldr	r3, [r7, #0]
 80038f6:	2200      	movs	r2, #0
 80038f8:	609a      	str	r2, [r3, #8]
  Capabilities->MagMaxFS     = 50;
 80038fa:	683b      	ldr	r3, [r7, #0]
 80038fc:	2232      	movs	r2, #50	; 0x32
 80038fe:	60da      	str	r2, [r3, #12]
  Capabilities->GyroMaxOdr   = 0.0f;
 8003900:	683b      	ldr	r3, [r7, #0]
 8003902:	f04f 0200 	mov.w	r2, #0
 8003906:	611a      	str	r2, [r3, #16]
  Capabilities->AccMaxOdr    = 0.0f;
 8003908:	683b      	ldr	r3, [r7, #0]
 800390a:	f04f 0200 	mov.w	r2, #0
 800390e:	615a      	str	r2, [r3, #20]
  Capabilities->MagMaxOdr    = 100.0f;
 8003910:	683b      	ldr	r3, [r7, #0]
 8003912:	4a04      	ldr	r2, [pc, #16]	; (8003924 <LSM303AGR_MAG_GetCapabilities+0x58>)
 8003914:	619a      	str	r2, [r3, #24]
  return LSM303AGR_OK;
 8003916:	2300      	movs	r3, #0
}
 8003918:	4618      	mov	r0, r3
 800391a:	370c      	adds	r7, #12
 800391c:	46bd      	mov	sp, r7
 800391e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003922:	4770      	bx	lr
 8003924:	42c80000 	.word	0x42c80000

08003928 <LSM303AGR_MAG_Enable>:
  * @brief Enable the LSM303AGR magnetometer sensor
  * @param pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM303AGR_MAG_Enable(LSM303AGR_MAG_Object_t *pObj)
{
 8003928:	b580      	push	{r7, lr}
 800392a:	b082      	sub	sp, #8
 800392c:	af00      	add	r7, sp, #0
 800392e:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->mag_is_enabled == 1U)
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8003936:	2b01      	cmp	r3, #1
 8003938:	d101      	bne.n	800393e <LSM303AGR_MAG_Enable+0x16>
  {
    return LSM303AGR_OK;
 800393a:	2300      	movs	r3, #0
 800393c:	e010      	b.n	8003960 <LSM303AGR_MAG_Enable+0x38>
  }

  /* Output data rate selection. */
  if (lsm303agr_mag_operating_mode_set(&(pObj->Ctx), LSM303AGR_CONTINUOUS_MODE) != LSM303AGR_OK)
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	3320      	adds	r3, #32
 8003942:	2100      	movs	r1, #0
 8003944:	4618      	mov	r0, r3
 8003946:	f000 fd58 	bl	80043fa <lsm303agr_mag_operating_mode_set>
 800394a:	4603      	mov	r3, r0
 800394c:	2b00      	cmp	r3, #0
 800394e:	d002      	beq.n	8003956 <LSM303AGR_MAG_Enable+0x2e>
  {
    return LSM303AGR_ERROR;
 8003950:	f04f 33ff 	mov.w	r3, #4294967295
 8003954:	e004      	b.n	8003960 <LSM303AGR_MAG_Enable+0x38>
  }

  pObj->mag_is_enabled = 1;
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	2201      	movs	r2, #1
 800395a:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  return LSM303AGR_OK;
 800395e:	2300      	movs	r3, #0
}
 8003960:	4618      	mov	r0, r3
 8003962:	3708      	adds	r7, #8
 8003964:	46bd      	mov	sp, r7
 8003966:	bd80      	pop	{r7, pc}

08003968 <LSM303AGR_MAG_Disable>:
  * @brief Disable the LSM303AGR magnetometer sensor
  * @param pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM303AGR_MAG_Disable(LSM303AGR_MAG_Object_t *pObj)
{
 8003968:	b580      	push	{r7, lr}
 800396a:	b082      	sub	sp, #8
 800396c:	af00      	add	r7, sp, #0
 800396e:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->mag_is_enabled == 0U)
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8003976:	2b00      	cmp	r3, #0
 8003978:	d101      	bne.n	800397e <LSM303AGR_MAG_Disable+0x16>
  {
    return LSM303AGR_OK;
 800397a:	2300      	movs	r3, #0
 800397c:	e010      	b.n	80039a0 <LSM303AGR_MAG_Disable+0x38>
  }

  /* Output data rate selection - power down. */
  if (lsm303agr_mag_operating_mode_set(&(pObj->Ctx), LSM303AGR_POWER_DOWN) != LSM303AGR_OK)
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	3320      	adds	r3, #32
 8003982:	2102      	movs	r1, #2
 8003984:	4618      	mov	r0, r3
 8003986:	f000 fd38 	bl	80043fa <lsm303agr_mag_operating_mode_set>
 800398a:	4603      	mov	r3, r0
 800398c:	2b00      	cmp	r3, #0
 800398e:	d002      	beq.n	8003996 <LSM303AGR_MAG_Disable+0x2e>
  {
    return LSM303AGR_ERROR;
 8003990:	f04f 33ff 	mov.w	r3, #4294967295
 8003994:	e004      	b.n	80039a0 <LSM303AGR_MAG_Disable+0x38>
  }

  pObj->mag_is_enabled = 0;
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	2200      	movs	r2, #0
 800399a:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  return LSM303AGR_OK;
 800399e:	2300      	movs	r3, #0
}
 80039a0:	4618      	mov	r0, r3
 80039a2:	3708      	adds	r7, #8
 80039a4:	46bd      	mov	sp, r7
 80039a6:	bd80      	pop	{r7, pc}

080039a8 <LSM303AGR_MAG_GetSensitivity>:
  * @param  pObj the device pObj
  * @param  Sensitivity pointer
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM303AGR_MAG_GetSensitivity(LSM303AGR_MAG_Object_t *pObj, float *Sensitivity)
{
 80039a8:	b480      	push	{r7}
 80039aa:	b083      	sub	sp, #12
 80039ac:	af00      	add	r7, sp, #0
 80039ae:	6078      	str	r0, [r7, #4]
 80039b0:	6039      	str	r1, [r7, #0]
  *Sensitivity = LSM303AGR_MAG_SENSITIVITY_FS_50GAUSS;
 80039b2:	683b      	ldr	r3, [r7, #0]
 80039b4:	f04f 527f 	mov.w	r2, #1069547520	; 0x3fc00000
 80039b8:	601a      	str	r2, [r3, #0]

  return LSM303AGR_OK;
 80039ba:	2300      	movs	r3, #0
}
 80039bc:	4618      	mov	r0, r3
 80039be:	370c      	adds	r7, #12
 80039c0:	46bd      	mov	sp, r7
 80039c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c6:	4770      	bx	lr

080039c8 <LSM303AGR_MAG_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM303AGR_MAG_GetOutputDataRate(LSM303AGR_MAG_Object_t *pObj, float *Odr)
{
 80039c8:	b580      	push	{r7, lr}
 80039ca:	b084      	sub	sp, #16
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	6078      	str	r0, [r7, #4]
 80039d0:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM303AGR_OK;
 80039d2:	2300      	movs	r3, #0
 80039d4:	60fb      	str	r3, [r7, #12]
  lsm303agr_mg_odr_m_t odr_low_level;

  /* Get current output data rate. */
  if (lsm303agr_mag_data_rate_get(&(pObj->Ctx), &odr_low_level) != LSM303AGR_OK)
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	3320      	adds	r3, #32
 80039da:	f107 020b 	add.w	r2, r7, #11
 80039de:	4611      	mov	r1, r2
 80039e0:	4618      	mov	r0, r3
 80039e2:	f000 fd57 	bl	8004494 <lsm303agr_mag_data_rate_get>
 80039e6:	4603      	mov	r3, r0
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d002      	beq.n	80039f2 <LSM303AGR_MAG_GetOutputDataRate+0x2a>
  {
    return LSM303AGR_ERROR;
 80039ec:	f04f 33ff 	mov.w	r3, #4294967295
 80039f0:	e023      	b.n	8003a3a <LSM303AGR_MAG_GetOutputDataRate+0x72>
  }

  switch (odr_low_level)
 80039f2:	7afb      	ldrb	r3, [r7, #11]
 80039f4:	2b03      	cmp	r3, #3
 80039f6:	d81b      	bhi.n	8003a30 <LSM303AGR_MAG_GetOutputDataRate+0x68>
 80039f8:	a201      	add	r2, pc, #4	; (adr r2, 8003a00 <LSM303AGR_MAG_GetOutputDataRate+0x38>)
 80039fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039fe:	bf00      	nop
 8003a00:	08003a11 	.word	0x08003a11
 8003a04:	08003a19 	.word	0x08003a19
 8003a08:	08003a21 	.word	0x08003a21
 8003a0c:	08003a29 	.word	0x08003a29
  {
    case LSM303AGR_MG_ODR_10Hz:
      *Odr = 10.0f;
 8003a10:	683b      	ldr	r3, [r7, #0]
 8003a12:	4a0c      	ldr	r2, [pc, #48]	; (8003a44 <LSM303AGR_MAG_GetOutputDataRate+0x7c>)
 8003a14:	601a      	str	r2, [r3, #0]
      break;
 8003a16:	e00f      	b.n	8003a38 <LSM303AGR_MAG_GetOutputDataRate+0x70>

    case LSM303AGR_MG_ODR_20Hz:
      *Odr = 20.0f;
 8003a18:	683b      	ldr	r3, [r7, #0]
 8003a1a:	4a0b      	ldr	r2, [pc, #44]	; (8003a48 <LSM303AGR_MAG_GetOutputDataRate+0x80>)
 8003a1c:	601a      	str	r2, [r3, #0]
      break;
 8003a1e:	e00b      	b.n	8003a38 <LSM303AGR_MAG_GetOutputDataRate+0x70>

    case LSM303AGR_MG_ODR_50Hz:
      *Odr = 50.0f;
 8003a20:	683b      	ldr	r3, [r7, #0]
 8003a22:	4a0a      	ldr	r2, [pc, #40]	; (8003a4c <LSM303AGR_MAG_GetOutputDataRate+0x84>)
 8003a24:	601a      	str	r2, [r3, #0]
      break;
 8003a26:	e007      	b.n	8003a38 <LSM303AGR_MAG_GetOutputDataRate+0x70>

    case LSM303AGR_MG_ODR_100Hz:
      *Odr = 100.0f;
 8003a28:	683b      	ldr	r3, [r7, #0]
 8003a2a:	4a09      	ldr	r2, [pc, #36]	; (8003a50 <LSM303AGR_MAG_GetOutputDataRate+0x88>)
 8003a2c:	601a      	str	r2, [r3, #0]
      break;
 8003a2e:	e003      	b.n	8003a38 <LSM303AGR_MAG_GetOutputDataRate+0x70>

    default:
      ret = LSM303AGR_ERROR;
 8003a30:	f04f 33ff 	mov.w	r3, #4294967295
 8003a34:	60fb      	str	r3, [r7, #12]
      break;
 8003a36:	bf00      	nop
  }

  return ret;
 8003a38:	68fb      	ldr	r3, [r7, #12]
}
 8003a3a:	4618      	mov	r0, r3
 8003a3c:	3710      	adds	r7, #16
 8003a3e:	46bd      	mov	sp, r7
 8003a40:	bd80      	pop	{r7, pc}
 8003a42:	bf00      	nop
 8003a44:	41200000 	.word	0x41200000
 8003a48:	41a00000 	.word	0x41a00000
 8003a4c:	42480000 	.word	0x42480000
 8003a50:	42c80000 	.word	0x42c80000

08003a54 <LSM303AGR_MAG_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM303AGR_MAG_SetOutputDataRate(LSM303AGR_MAG_Object_t *pObj, float Odr)
{
 8003a54:	b580      	push	{r7, lr}
 8003a56:	b084      	sub	sp, #16
 8003a58:	af00      	add	r7, sp, #0
 8003a5a:	6078      	str	r0, [r7, #4]
 8003a5c:	ed87 0a00 	vstr	s0, [r7]
  lsm303agr_mg_odr_m_t new_odr;

  new_odr = (Odr <= 10.000f) ? LSM303AGR_MG_ODR_10Hz
            : (Odr <= 20.000f) ? LSM303AGR_MG_ODR_20Hz
 8003a60:	edd7 7a00 	vldr	s15, [r7]
 8003a64:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8003a68:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003a6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a70:	d801      	bhi.n	8003a76 <LSM303AGR_MAG_SetOutputDataRate+0x22>
 8003a72:	2300      	movs	r3, #0
 8003a74:	e016      	b.n	8003aa4 <LSM303AGR_MAG_SetOutputDataRate+0x50>
 8003a76:	edd7 7a00 	vldr	s15, [r7]
 8003a7a:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8003a7e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003a82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a86:	d801      	bhi.n	8003a8c <LSM303AGR_MAG_SetOutputDataRate+0x38>
 8003a88:	2301      	movs	r3, #1
 8003a8a:	e00b      	b.n	8003aa4 <LSM303AGR_MAG_SetOutputDataRate+0x50>
 8003a8c:	edd7 7a00 	vldr	s15, [r7]
 8003a90:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8003acc <LSM303AGR_MAG_SetOutputDataRate+0x78>
 8003a94:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003a98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a9c:	d801      	bhi.n	8003aa2 <LSM303AGR_MAG_SetOutputDataRate+0x4e>
 8003a9e:	2302      	movs	r3, #2
 8003aa0:	e000      	b.n	8003aa4 <LSM303AGR_MAG_SetOutputDataRate+0x50>
 8003aa2:	2303      	movs	r3, #3
  new_odr = (Odr <= 10.000f) ? LSM303AGR_MG_ODR_10Hz
 8003aa4:	73fb      	strb	r3, [r7, #15]
            : (Odr <= 50.000f) ? LSM303AGR_MG_ODR_50Hz
            :                    LSM303AGR_MG_ODR_100Hz;

  if (lsm303agr_mag_data_rate_set(&(pObj->Ctx), new_odr) != LSM303AGR_OK)
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	3320      	adds	r3, #32
 8003aaa:	7bfa      	ldrb	r2, [r7, #15]
 8003aac:	4611      	mov	r1, r2
 8003aae:	4618      	mov	r0, r3
 8003ab0:	f000 fcc9 	bl	8004446 <lsm303agr_mag_data_rate_set>
 8003ab4:	4603      	mov	r3, r0
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d002      	beq.n	8003ac0 <LSM303AGR_MAG_SetOutputDataRate+0x6c>
  {
    return LSM303AGR_ERROR;
 8003aba:	f04f 33ff 	mov.w	r3, #4294967295
 8003abe:	e000      	b.n	8003ac2 <LSM303AGR_MAG_SetOutputDataRate+0x6e>
  }

  return LSM303AGR_OK;
 8003ac0:	2300      	movs	r3, #0
}
 8003ac2:	4618      	mov	r0, r3
 8003ac4:	3710      	adds	r7, #16
 8003ac6:	46bd      	mov	sp, r7
 8003ac8:	bd80      	pop	{r7, pc}
 8003aca:	bf00      	nop
 8003acc:	42480000 	.word	0x42480000

08003ad0 <LSM303AGR_MAG_GetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale pointer where the full scale is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM303AGR_MAG_GetFullScale(LSM303AGR_MAG_Object_t *pObj, int32_t *FullScale)
{
 8003ad0:	b480      	push	{r7}
 8003ad2:	b083      	sub	sp, #12
 8003ad4:	af00      	add	r7, sp, #0
 8003ad6:	6078      	str	r0, [r7, #4]
 8003ad8:	6039      	str	r1, [r7, #0]
  *FullScale = 50;
 8003ada:	683b      	ldr	r3, [r7, #0]
 8003adc:	2232      	movs	r2, #50	; 0x32
 8003ade:	601a      	str	r2, [r3, #0]

  return LSM303AGR_OK;
 8003ae0:	2300      	movs	r3, #0
}
 8003ae2:	4618      	mov	r0, r3
 8003ae4:	370c      	adds	r7, #12
 8003ae6:	46bd      	mov	sp, r7
 8003ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aec:	4770      	bx	lr

08003aee <LSM303AGR_MAG_SetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale the functional full scale to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM303AGR_MAG_SetFullScale(LSM303AGR_MAG_Object_t *pObj, int32_t FullScale)
{
 8003aee:	b480      	push	{r7}
 8003af0:	b083      	sub	sp, #12
 8003af2:	af00      	add	r7, sp, #0
 8003af4:	6078      	str	r0, [r7, #4]
 8003af6:	6039      	str	r1, [r7, #0]
  return LSM303AGR_OK;
 8003af8:	2300      	movs	r3, #0
}
 8003afa:	4618      	mov	r0, r3
 8003afc:	370c      	adds	r7, #12
 8003afe:	46bd      	mov	sp, r7
 8003b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b04:	4770      	bx	lr

08003b06 <LSM303AGR_MAG_GetAxesRaw>:
  * @param  pObj the device pObj
  * @param  Value pointer where the raw values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM303AGR_MAG_GetAxesRaw(LSM303AGR_MAG_Object_t *pObj, LSM303AGR_AxesRaw_t *Value)
{
 8003b06:	b580      	push	{r7, lr}
 8003b08:	b084      	sub	sp, #16
 8003b0a:	af00      	add	r7, sp, #0
 8003b0c:	6078      	str	r0, [r7, #4]
 8003b0e:	6039      	str	r1, [r7, #0]
  lsm303agr_axis3bit16_t data_raw;

  /* Read raw data values. */
  if (lsm303agr_magnetic_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM303AGR_OK)
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	3320      	adds	r3, #32
 8003b14:	f107 0208 	add.w	r2, r7, #8
 8003b18:	4611      	mov	r1, r2
 8003b1a:	4618      	mov	r0, r3
 8003b1c:	f000 fd18 	bl	8004550 <lsm303agr_magnetic_raw_get>
 8003b20:	4603      	mov	r3, r0
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d002      	beq.n	8003b2c <LSM303AGR_MAG_GetAxesRaw+0x26>
  {
    return LSM303AGR_ERROR;
 8003b26:	f04f 33ff 	mov.w	r3, #4294967295
 8003b2a:	e00c      	b.n	8003b46 <LSM303AGR_MAG_GetAxesRaw+0x40>
  }

  /* Format the data. */
  Value->x = data_raw.i16bit[0];
 8003b2c:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8003b30:	683b      	ldr	r3, [r7, #0]
 8003b32:	801a      	strh	r2, [r3, #0]
  Value->y = data_raw.i16bit[1];
 8003b34:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8003b38:	683b      	ldr	r3, [r7, #0]
 8003b3a:	805a      	strh	r2, [r3, #2]
  Value->z = data_raw.i16bit[2];
 8003b3c:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8003b40:	683b      	ldr	r3, [r7, #0]
 8003b42:	809a      	strh	r2, [r3, #4]

  return LSM303AGR_OK;
 8003b44:	2300      	movs	r3, #0
}
 8003b46:	4618      	mov	r0, r3
 8003b48:	3710      	adds	r7, #16
 8003b4a:	46bd      	mov	sp, r7
 8003b4c:	bd80      	pop	{r7, pc}

08003b4e <LSM303AGR_MAG_GetAxes>:
  * @param  pObj the device pObj
  * @param  MagneticField pointer where the values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM303AGR_MAG_GetAxes(LSM303AGR_MAG_Object_t *pObj, LSM303AGR_Axes_t *MagneticField)
{
 8003b4e:	b580      	push	{r7, lr}
 8003b50:	b086      	sub	sp, #24
 8003b52:	af00      	add	r7, sp, #0
 8003b54:	6078      	str	r0, [r7, #4]
 8003b56:	6039      	str	r1, [r7, #0]
  lsm303agr_axis3bit16_t data_raw;
  float sensitivity;

  /* Read raw data values. */
  if (lsm303agr_magnetic_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM303AGR_OK)
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	3320      	adds	r3, #32
 8003b5c:	f107 0210 	add.w	r2, r7, #16
 8003b60:	4611      	mov	r1, r2
 8003b62:	4618      	mov	r0, r3
 8003b64:	f000 fcf4 	bl	8004550 <lsm303agr_magnetic_raw_get>
 8003b68:	4603      	mov	r3, r0
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d002      	beq.n	8003b74 <LSM303AGR_MAG_GetAxes+0x26>
  {
    return LSM303AGR_ERROR;
 8003b6e:	f04f 33ff 	mov.w	r3, #4294967295
 8003b72:	e036      	b.n	8003be2 <LSM303AGR_MAG_GetAxes+0x94>
  }

  /* Get LSM303AGR actual sensitivity. */
  (void)LSM303AGR_MAG_GetSensitivity(pObj, &sensitivity);
 8003b74:	f107 030c 	add.w	r3, r7, #12
 8003b78:	4619      	mov	r1, r3
 8003b7a:	6878      	ldr	r0, [r7, #4]
 8003b7c:	f7ff ff14 	bl	80039a8 <LSM303AGR_MAG_GetSensitivity>

  /* Calculate the data. */
  MagneticField->x = (int32_t)((float)((float)data_raw.i16bit[0] * sensitivity));
 8003b80:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8003b84:	ee07 3a90 	vmov	s15, r3
 8003b88:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003b8c:	edd7 7a03 	vldr	s15, [r7, #12]
 8003b90:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003b94:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003b98:	ee17 2a90 	vmov	r2, s15
 8003b9c:	683b      	ldr	r3, [r7, #0]
 8003b9e:	601a      	str	r2, [r3, #0]
  MagneticField->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 8003ba0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8003ba4:	ee07 3a90 	vmov	s15, r3
 8003ba8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003bac:	edd7 7a03 	vldr	s15, [r7, #12]
 8003bb0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003bb4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003bb8:	ee17 2a90 	vmov	r2, s15
 8003bbc:	683b      	ldr	r3, [r7, #0]
 8003bbe:	605a      	str	r2, [r3, #4]
  MagneticField->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 8003bc0:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8003bc4:	ee07 3a90 	vmov	s15, r3
 8003bc8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003bcc:	edd7 7a03 	vldr	s15, [r7, #12]
 8003bd0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003bd4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003bd8:	ee17 2a90 	vmov	r2, s15
 8003bdc:	683b      	ldr	r3, [r7, #0]
 8003bde:	609a      	str	r2, [r3, #8]

  return LSM303AGR_OK;
 8003be0:	2300      	movs	r3, #0
}
 8003be2:	4618      	mov	r0, r3
 8003be4:	3718      	adds	r7, #24
 8003be6:	46bd      	mov	sp, r7
 8003be8:	bd80      	pop	{r7, pc}
	...

08003bec <LSM303AGR_ACC_GetSensitivityHR>:
  * @param  pObj the device pObj
  * @param  Sensitivity pointer to sensitivity
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM303AGR_ACC_GetSensitivityHR(LSM303AGR_ACC_Object_t *pObj, float *Sensitivity)
{
 8003bec:	b580      	push	{r7, lr}
 8003bee:	b084      	sub	sp, #16
 8003bf0:	af00      	add	r7, sp, #0
 8003bf2:	6078      	str	r0, [r7, #4]
 8003bf4:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM303AGR_OK;
 8003bf6:	2300      	movs	r3, #0
 8003bf8:	60fb      	str	r3, [r7, #12]
  lsm303agr_fs_a_t fullscale;

  /* Read actual full scale selection from sensor. */
  if (lsm303agr_xl_full_scale_get(&(pObj->Ctx), &fullscale) != LSM303AGR_OK)
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	3320      	adds	r3, #32
 8003bfe:	f107 020b 	add.w	r2, r7, #11
 8003c02:	4611      	mov	r1, r2
 8003c04:	4618      	mov	r0, r3
 8003c06:	f000 fb4f 	bl	80042a8 <lsm303agr_xl_full_scale_get>
 8003c0a:	4603      	mov	r3, r0
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d002      	beq.n	8003c16 <LSM303AGR_ACC_GetSensitivityHR+0x2a>
  {
    return LSM303AGR_ERROR;
 8003c10:	f04f 33ff 	mov.w	r3, #4294967295
 8003c14:	e023      	b.n	8003c5e <LSM303AGR_ACC_GetSensitivityHR+0x72>
  }

  /* Store the sensitivity based on actual full scale. */
  switch (fullscale)
 8003c16:	7afb      	ldrb	r3, [r7, #11]
 8003c18:	2b03      	cmp	r3, #3
 8003c1a:	d81b      	bhi.n	8003c54 <LSM303AGR_ACC_GetSensitivityHR+0x68>
 8003c1c:	a201      	add	r2, pc, #4	; (adr r2, 8003c24 <LSM303AGR_ACC_GetSensitivityHR+0x38>)
 8003c1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c22:	bf00      	nop
 8003c24:	08003c35 	.word	0x08003c35
 8003c28:	08003c3d 	.word	0x08003c3d
 8003c2c:	08003c45 	.word	0x08003c45
 8003c30:	08003c4d 	.word	0x08003c4d
  {
    case LSM303AGR_2g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_2G_HIGH_RESOLUTION_MODE;
 8003c34:	683b      	ldr	r3, [r7, #0]
 8003c36:	4a0c      	ldr	r2, [pc, #48]	; (8003c68 <LSM303AGR_ACC_GetSensitivityHR+0x7c>)
 8003c38:	601a      	str	r2, [r3, #0]
      break;
 8003c3a:	e00f      	b.n	8003c5c <LSM303AGR_ACC_GetSensitivityHR+0x70>

    case LSM303AGR_4g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_4G_HIGH_RESOLUTION_MODE;
 8003c3c:	683b      	ldr	r3, [r7, #0]
 8003c3e:	4a0b      	ldr	r2, [pc, #44]	; (8003c6c <LSM303AGR_ACC_GetSensitivityHR+0x80>)
 8003c40:	601a      	str	r2, [r3, #0]
      break;
 8003c42:	e00b      	b.n	8003c5c <LSM303AGR_ACC_GetSensitivityHR+0x70>

    case LSM303AGR_8g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_8G_HIGH_RESOLUTION_MODE;
 8003c44:	683b      	ldr	r3, [r7, #0]
 8003c46:	4a0a      	ldr	r2, [pc, #40]	; (8003c70 <LSM303AGR_ACC_GetSensitivityHR+0x84>)
 8003c48:	601a      	str	r2, [r3, #0]
      break;
 8003c4a:	e007      	b.n	8003c5c <LSM303AGR_ACC_GetSensitivityHR+0x70>

    case LSM303AGR_16g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_16G_HIGH_RESOLUTION_MODE;
 8003c4c:	683b      	ldr	r3, [r7, #0]
 8003c4e:	4a09      	ldr	r2, [pc, #36]	; (8003c74 <LSM303AGR_ACC_GetSensitivityHR+0x88>)
 8003c50:	601a      	str	r2, [r3, #0]
      break;
 8003c52:	e003      	b.n	8003c5c <LSM303AGR_ACC_GetSensitivityHR+0x70>

    default:
      ret = LSM303AGR_ERROR;
 8003c54:	f04f 33ff 	mov.w	r3, #4294967295
 8003c58:	60fb      	str	r3, [r7, #12]
      break;
 8003c5a:	bf00      	nop
  }

  return ret;
 8003c5c:	68fb      	ldr	r3, [r7, #12]
}
 8003c5e:	4618      	mov	r0, r3
 8003c60:	3710      	adds	r7, #16
 8003c62:	46bd      	mov	sp, r7
 8003c64:	bd80      	pop	{r7, pc}
 8003c66:	bf00      	nop
 8003c68:	3f7ae148 	.word	0x3f7ae148
 8003c6c:	3ff9999a 	.word	0x3ff9999a
 8003c70:	4079999a 	.word	0x4079999a
 8003c74:	413b851f 	.word	0x413b851f

08003c78 <LSM303AGR_ACC_GetSensitivityNM>:
  * @param  pObj the device pObj
  * @param  Sensitivity pointer to sensitivity
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM303AGR_ACC_GetSensitivityNM(LSM303AGR_ACC_Object_t *pObj, float *Sensitivity)
{
 8003c78:	b580      	push	{r7, lr}
 8003c7a:	b084      	sub	sp, #16
 8003c7c:	af00      	add	r7, sp, #0
 8003c7e:	6078      	str	r0, [r7, #4]
 8003c80:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM303AGR_OK;
 8003c82:	2300      	movs	r3, #0
 8003c84:	60fb      	str	r3, [r7, #12]
  lsm303agr_fs_a_t fullscale;

  /* Read actual full scale selection from sensor. */
  if (lsm303agr_xl_full_scale_get(&(pObj->Ctx), &fullscale) != LSM303AGR_OK)
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	3320      	adds	r3, #32
 8003c8a:	f107 020b 	add.w	r2, r7, #11
 8003c8e:	4611      	mov	r1, r2
 8003c90:	4618      	mov	r0, r3
 8003c92:	f000 fb09 	bl	80042a8 <lsm303agr_xl_full_scale_get>
 8003c96:	4603      	mov	r3, r0
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d002      	beq.n	8003ca2 <LSM303AGR_ACC_GetSensitivityNM+0x2a>
  {
    return LSM303AGR_ERROR;
 8003c9c:	f04f 33ff 	mov.w	r3, #4294967295
 8003ca0:	e023      	b.n	8003cea <LSM303AGR_ACC_GetSensitivityNM+0x72>
  }

  /* Store the sensitivity based on actual full scale. */
  switch (fullscale)
 8003ca2:	7afb      	ldrb	r3, [r7, #11]
 8003ca4:	2b03      	cmp	r3, #3
 8003ca6:	d81b      	bhi.n	8003ce0 <LSM303AGR_ACC_GetSensitivityNM+0x68>
 8003ca8:	a201      	add	r2, pc, #4	; (adr r2, 8003cb0 <LSM303AGR_ACC_GetSensitivityNM+0x38>)
 8003caa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cae:	bf00      	nop
 8003cb0:	08003cc1 	.word	0x08003cc1
 8003cb4:	08003cc9 	.word	0x08003cc9
 8003cb8:	08003cd1 	.word	0x08003cd1
 8003cbc:	08003cd9 	.word	0x08003cd9
  {
    case LSM303AGR_2g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_2G_NORMAL_MODE;
 8003cc0:	683b      	ldr	r3, [r7, #0]
 8003cc2:	4a0c      	ldr	r2, [pc, #48]	; (8003cf4 <LSM303AGR_ACC_GetSensitivityNM+0x7c>)
 8003cc4:	601a      	str	r2, [r3, #0]
      break;
 8003cc6:	e00f      	b.n	8003ce8 <LSM303AGR_ACC_GetSensitivityNM+0x70>

    case LSM303AGR_4g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_4G_NORMAL_MODE;
 8003cc8:	683b      	ldr	r3, [r7, #0]
 8003cca:	4a0b      	ldr	r2, [pc, #44]	; (8003cf8 <LSM303AGR_ACC_GetSensitivityNM+0x80>)
 8003ccc:	601a      	str	r2, [r3, #0]
      break;
 8003cce:	e00b      	b.n	8003ce8 <LSM303AGR_ACC_GetSensitivityNM+0x70>

    case LSM303AGR_8g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_8G_NORMAL_MODE;
 8003cd0:	683b      	ldr	r3, [r7, #0]
 8003cd2:	4a0a      	ldr	r2, [pc, #40]	; (8003cfc <LSM303AGR_ACC_GetSensitivityNM+0x84>)
 8003cd4:	601a      	str	r2, [r3, #0]
      break;
 8003cd6:	e007      	b.n	8003ce8 <LSM303AGR_ACC_GetSensitivityNM+0x70>

    case LSM303AGR_16g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_16G_NORMAL_MODE;
 8003cd8:	683b      	ldr	r3, [r7, #0]
 8003cda:	4a09      	ldr	r2, [pc, #36]	; (8003d00 <LSM303AGR_ACC_GetSensitivityNM+0x88>)
 8003cdc:	601a      	str	r2, [r3, #0]
      break;
 8003cde:	e003      	b.n	8003ce8 <LSM303AGR_ACC_GetSensitivityNM+0x70>

    default:
      ret = LSM303AGR_ERROR;
 8003ce0:	f04f 33ff 	mov.w	r3, #4294967295
 8003ce4:	60fb      	str	r3, [r7, #12]
      break;
 8003ce6:	bf00      	nop
  }

  return ret;
 8003ce8:	68fb      	ldr	r3, [r7, #12]
}
 8003cea:	4618      	mov	r0, r3
 8003cec:	3710      	adds	r7, #16
 8003cee:	46bd      	mov	sp, r7
 8003cf0:	bd80      	pop	{r7, pc}
 8003cf2:	bf00      	nop
 8003cf4:	4079999a 	.word	0x4079999a
 8003cf8:	40fa3d71 	.word	0x40fa3d71
 8003cfc:	417a147b 	.word	0x417a147b
 8003d00:	423b999a 	.word	0x423b999a

08003d04 <LSM303AGR_ACC_GetSensitivityLP>:
  * @param  pObj the device pObj
  * @param  Sensitivity pointer to sensitivity
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM303AGR_ACC_GetSensitivityLP(LSM303AGR_ACC_Object_t *pObj, float *Sensitivity)
{
 8003d04:	b580      	push	{r7, lr}
 8003d06:	b084      	sub	sp, #16
 8003d08:	af00      	add	r7, sp, #0
 8003d0a:	6078      	str	r0, [r7, #4]
 8003d0c:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM303AGR_OK;
 8003d0e:	2300      	movs	r3, #0
 8003d10:	60fb      	str	r3, [r7, #12]
  lsm303agr_fs_a_t fullscale;

  /* Read actual full scale selection from sensor. */
  if (lsm303agr_xl_full_scale_get(&(pObj->Ctx), &fullscale) != LSM303AGR_OK)
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	3320      	adds	r3, #32
 8003d16:	f107 020b 	add.w	r2, r7, #11
 8003d1a:	4611      	mov	r1, r2
 8003d1c:	4618      	mov	r0, r3
 8003d1e:	f000 fac3 	bl	80042a8 <lsm303agr_xl_full_scale_get>
 8003d22:	4603      	mov	r3, r0
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d002      	beq.n	8003d2e <LSM303AGR_ACC_GetSensitivityLP+0x2a>
  {
    return LSM303AGR_ERROR;
 8003d28:	f04f 33ff 	mov.w	r3, #4294967295
 8003d2c:	e023      	b.n	8003d76 <LSM303AGR_ACC_GetSensitivityLP+0x72>
  }

  /* Store the sensitivity based on actual full scale. */
  switch (fullscale)
 8003d2e:	7afb      	ldrb	r3, [r7, #11]
 8003d30:	2b03      	cmp	r3, #3
 8003d32:	d81b      	bhi.n	8003d6c <LSM303AGR_ACC_GetSensitivityLP+0x68>
 8003d34:	a201      	add	r2, pc, #4	; (adr r2, 8003d3c <LSM303AGR_ACC_GetSensitivityLP+0x38>)
 8003d36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d3a:	bf00      	nop
 8003d3c:	08003d4d 	.word	0x08003d4d
 8003d40:	08003d55 	.word	0x08003d55
 8003d44:	08003d5d 	.word	0x08003d5d
 8003d48:	08003d65 	.word	0x08003d65
  {
    case LSM303AGR_2g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_2G_LOW_POWER_MODE;
 8003d4c:	683b      	ldr	r3, [r7, #0]
 8003d4e:	4a0c      	ldr	r2, [pc, #48]	; (8003d80 <LSM303AGR_ACC_GetSensitivityLP+0x7c>)
 8003d50:	601a      	str	r2, [r3, #0]
      break;
 8003d52:	e00f      	b.n	8003d74 <LSM303AGR_ACC_GetSensitivityLP+0x70>

    case LSM303AGR_4g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_4G_LOW_POWER_MODE;
 8003d54:	683b      	ldr	r3, [r7, #0]
 8003d56:	4a0b      	ldr	r2, [pc, #44]	; (8003d84 <LSM303AGR_ACC_GetSensitivityLP+0x80>)
 8003d58:	601a      	str	r2, [r3, #0]
      break;
 8003d5a:	e00b      	b.n	8003d74 <LSM303AGR_ACC_GetSensitivityLP+0x70>

    case LSM303AGR_8g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_8G_LOW_POWER_MODE;
 8003d5c:	683b      	ldr	r3, [r7, #0]
 8003d5e:	4a0a      	ldr	r2, [pc, #40]	; (8003d88 <LSM303AGR_ACC_GetSensitivityLP+0x84>)
 8003d60:	601a      	str	r2, [r3, #0]
      break;
 8003d62:	e007      	b.n	8003d74 <LSM303AGR_ACC_GetSensitivityLP+0x70>

    case LSM303AGR_16g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_16G_LOW_POWER_MODE;
 8003d64:	683b      	ldr	r3, [r7, #0]
 8003d66:	4a09      	ldr	r2, [pc, #36]	; (8003d8c <LSM303AGR_ACC_GetSensitivityLP+0x88>)
 8003d68:	601a      	str	r2, [r3, #0]
      break;
 8003d6a:	e003      	b.n	8003d74 <LSM303AGR_ACC_GetSensitivityLP+0x70>

    default:
      ret = LSM303AGR_ERROR;
 8003d6c:	f04f 33ff 	mov.w	r3, #4294967295
 8003d70:	60fb      	str	r3, [r7, #12]
      break;
 8003d72:	bf00      	nop
  }

  return ret;
 8003d74:	68fb      	ldr	r3, [r7, #12]
}
 8003d76:	4618      	mov	r0, r3
 8003d78:	3710      	adds	r7, #16
 8003d7a:	46bd      	mov	sp, r7
 8003d7c:	bd80      	pop	{r7, pc}
 8003d7e:	bf00      	nop
 8003d80:	417a147b 	.word	0x417a147b
 8003d84:	41fa147b 	.word	0x41fa147b
 8003d88:	427a147b 	.word	0x427a147b
 8003d8c:	433b947b 	.word	0x433b947b

08003d90 <LSM303AGR_ACC_SetOutputDataRate_When_Enabled>:
  * @param  pObj the device pObj
  * @param  Odr the functional output data rate to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM303AGR_ACC_SetOutputDataRate_When_Enabled(LSM303AGR_ACC_Object_t *pObj, float Odr)
{
 8003d90:	b580      	push	{r7, lr}
 8003d92:	b084      	sub	sp, #16
 8003d94:	af00      	add	r7, sp, #0
 8003d96:	6078      	str	r0, [r7, #4]
 8003d98:	ed87 0a00 	vstr	s0, [r7]
  lsm303agr_odr_a_t new_odr;

  new_odr = (Odr <=    1.0f) ? LSM303AGR_XL_ODR_1Hz
            : (Odr <=   10.0f) ? LSM303AGR_XL_ODR_10Hz
 8003d9c:	edd7 7a00 	vldr	s15, [r7]
 8003da0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003da4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003da8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003dac:	d801      	bhi.n	8003db2 <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x22>
 8003dae:	2301      	movs	r3, #1
 8003db0:	e037      	b.n	8003e22 <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x92>
 8003db2:	edd7 7a00 	vldr	s15, [r7]
 8003db6:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8003dba:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003dbe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003dc2:	d801      	bhi.n	8003dc8 <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x38>
 8003dc4:	2302      	movs	r3, #2
 8003dc6:	e02c      	b.n	8003e22 <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x92>
 8003dc8:	edd7 7a00 	vldr	s15, [r7]
 8003dcc:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 8003dd0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003dd4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003dd8:	d801      	bhi.n	8003dde <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x4e>
 8003dda:	2303      	movs	r3, #3
 8003ddc:	e021      	b.n	8003e22 <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x92>
 8003dde:	edd7 7a00 	vldr	s15, [r7]
 8003de2:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8003e48 <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0xb8>
 8003de6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003dea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003dee:	d801      	bhi.n	8003df4 <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x64>
 8003df0:	2304      	movs	r3, #4
 8003df2:	e016      	b.n	8003e22 <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x92>
 8003df4:	edd7 7a00 	vldr	s15, [r7]
 8003df8:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8003e4c <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0xbc>
 8003dfc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003e00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003e04:	d801      	bhi.n	8003e0a <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x7a>
 8003e06:	2305      	movs	r3, #5
 8003e08:	e00b      	b.n	8003e22 <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x92>
 8003e0a:	edd7 7a00 	vldr	s15, [r7]
 8003e0e:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8003e50 <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0xc0>
 8003e12:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003e16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003e1a:	d801      	bhi.n	8003e20 <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x90>
 8003e1c:	2306      	movs	r3, #6
 8003e1e:	e000      	b.n	8003e22 <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x92>
 8003e20:	2307      	movs	r3, #7
  new_odr = (Odr <=    1.0f) ? LSM303AGR_XL_ODR_1Hz
 8003e22:	73fb      	strb	r3, [r7, #15]
            : (Odr <=  100.0f) ? LSM303AGR_XL_ODR_100Hz
            : (Odr <=  200.0f) ? LSM303AGR_XL_ODR_200Hz
            :                    LSM303AGR_XL_ODR_400Hz;

  /* Output data rate selection. */
  if (lsm303agr_xl_data_rate_set(&(pObj->Ctx), new_odr) != LSM303AGR_OK)
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	3320      	adds	r3, #32
 8003e28:	7bfa      	ldrb	r2, [r7, #15]
 8003e2a:	4611      	mov	r1, r2
 8003e2c:	4618      	mov	r0, r3
 8003e2e:	f000 f993 	bl	8004158 <lsm303agr_xl_data_rate_set>
 8003e32:	4603      	mov	r3, r0
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d002      	beq.n	8003e3e <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0xae>
  {
    return LSM303AGR_ERROR;
 8003e38:	f04f 33ff 	mov.w	r3, #4294967295
 8003e3c:	e000      	b.n	8003e40 <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0xb0>
  }

  return LSM303AGR_OK;
 8003e3e:	2300      	movs	r3, #0
}
 8003e40:	4618      	mov	r0, r3
 8003e42:	3710      	adds	r7, #16
 8003e44:	46bd      	mov	sp, r7
 8003e46:	bd80      	pop	{r7, pc}
 8003e48:	42480000 	.word	0x42480000
 8003e4c:	42c80000 	.word	0x42c80000
 8003e50:	43480000 	.word	0x43480000

08003e54 <LSM303AGR_ACC_SetOutputDataRate_When_Disabled>:
  * @param  pObj the device pObj
  * @param  Odr the functional output data rate to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM303AGR_ACC_SetOutputDataRate_When_Disabled(LSM303AGR_ACC_Object_t *pObj, float Odr)
{
 8003e54:	b480      	push	{r7}
 8003e56:	b083      	sub	sp, #12
 8003e58:	af00      	add	r7, sp, #0
 8003e5a:	6078      	str	r0, [r7, #4]
 8003e5c:	ed87 0a00 	vstr	s0, [r7]
  pObj->acc_odr = (Odr <=    1.0f) ? LSM303AGR_XL_ODR_1Hz
                  : (Odr <=   10.0f) ? LSM303AGR_XL_ODR_10Hz
 8003e60:	edd7 7a00 	vldr	s15, [r7]
 8003e64:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003e68:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003e6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003e70:	d801      	bhi.n	8003e76 <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0x22>
 8003e72:	2301      	movs	r3, #1
 8003e74:	e037      	b.n	8003ee6 <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0x92>
 8003e76:	edd7 7a00 	vldr	s15, [r7]
 8003e7a:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8003e7e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003e82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003e86:	d801      	bhi.n	8003e8c <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0x38>
 8003e88:	2302      	movs	r3, #2
 8003e8a:	e02c      	b.n	8003ee6 <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0x92>
 8003e8c:	edd7 7a00 	vldr	s15, [r7]
 8003e90:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 8003e94:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003e98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003e9c:	d801      	bhi.n	8003ea2 <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0x4e>
 8003e9e:	2303      	movs	r3, #3
 8003ea0:	e021      	b.n	8003ee6 <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0x92>
 8003ea2:	edd7 7a00 	vldr	s15, [r7]
 8003ea6:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8003efc <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0xa8>
 8003eaa:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003eae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003eb2:	d801      	bhi.n	8003eb8 <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0x64>
 8003eb4:	2304      	movs	r3, #4
 8003eb6:	e016      	b.n	8003ee6 <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0x92>
 8003eb8:	edd7 7a00 	vldr	s15, [r7]
 8003ebc:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8003f00 <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0xac>
 8003ec0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003ec4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003ec8:	d801      	bhi.n	8003ece <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0x7a>
 8003eca:	2305      	movs	r3, #5
 8003ecc:	e00b      	b.n	8003ee6 <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0x92>
 8003ece:	edd7 7a00 	vldr	s15, [r7]
 8003ed2:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8003f04 <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0xb0>
 8003ed6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003eda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003ede:	d801      	bhi.n	8003ee4 <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0x90>
 8003ee0:	2306      	movs	r3, #6
 8003ee2:	e000      	b.n	8003ee6 <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0x92>
 8003ee4:	2307      	movs	r3, #7
  pObj->acc_odr = (Odr <=    1.0f) ? LSM303AGR_XL_ODR_1Hz
 8003ee6:	687a      	ldr	r2, [r7, #4]
 8003ee8:	f882 3032 	strb.w	r3, [r2, #50]	; 0x32
                  : (Odr <=   50.0f) ? LSM303AGR_XL_ODR_50Hz
                  : (Odr <=  100.0f) ? LSM303AGR_XL_ODR_100Hz
                  : (Odr <=  200.0f) ? LSM303AGR_XL_ODR_200Hz
                  :                    LSM303AGR_XL_ODR_400Hz;

  return LSM303AGR_OK;
 8003eec:	2300      	movs	r3, #0
}
 8003eee:	4618      	mov	r0, r3
 8003ef0:	370c      	adds	r7, #12
 8003ef2:	46bd      	mov	sp, r7
 8003ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef8:	4770      	bx	lr
 8003efa:	bf00      	nop
 8003efc:	42480000 	.word	0x42480000
 8003f00:	42c80000 	.word	0x42c80000
 8003f04:	43480000 	.word	0x43480000

08003f08 <ReadAccRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ReadAccRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8003f08:	b590      	push	{r4, r7, lr}
 8003f0a:	b087      	sub	sp, #28
 8003f0c:	af00      	add	r7, sp, #0
 8003f0e:	60f8      	str	r0, [r7, #12]
 8003f10:	607a      	str	r2, [r7, #4]
 8003f12:	461a      	mov	r2, r3
 8003f14:	460b      	mov	r3, r1
 8003f16:	72fb      	strb	r3, [r7, #11]
 8003f18:	4613      	mov	r3, r2
 8003f1a:	813b      	strh	r3, [r7, #8]
  LSM303AGR_ACC_Object_t *pObj = (LSM303AGR_ACC_Object_t *)Handle;
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == LSM303AGR_I2C_BUS) /* I2C */
 8003f20:	697b      	ldr	r3, [r7, #20]
 8003f22:	689b      	ldr	r3, [r3, #8]
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d10e      	bne.n	8003f46 <ReadAccRegWrap+0x3e>
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 8003f28:	697b      	ldr	r3, [r7, #20]
 8003f2a:	695c      	ldr	r4, [r3, #20]
 8003f2c:	697b      	ldr	r3, [r7, #20]
 8003f2e:	7b1b      	ldrb	r3, [r3, #12]
 8003f30:	b298      	uxth	r0, r3
 8003f32:	7afb      	ldrb	r3, [r7, #11]
 8003f34:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003f38:	b2db      	uxtb	r3, r3
 8003f3a:	b299      	uxth	r1, r3
 8003f3c:	893b      	ldrh	r3, [r7, #8]
 8003f3e:	687a      	ldr	r2, [r7, #4]
 8003f40:	47a0      	blx	r4
 8003f42:	4603      	mov	r3, r0
 8003f44:	e00d      	b.n	8003f62 <ReadAccRegWrap+0x5a>
  }
  else   /* SPI 3-Wires */
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 8003f46:	697b      	ldr	r3, [r7, #20]
 8003f48:	695c      	ldr	r4, [r3, #20]
 8003f4a:	697b      	ldr	r3, [r7, #20]
 8003f4c:	7b1b      	ldrb	r3, [r3, #12]
 8003f4e:	b298      	uxth	r0, r3
 8003f50:	7afb      	ldrb	r3, [r7, #11]
 8003f52:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003f56:	b2db      	uxtb	r3, r3
 8003f58:	b299      	uxth	r1, r3
 8003f5a:	893b      	ldrh	r3, [r7, #8]
 8003f5c:	687a      	ldr	r2, [r7, #4]
 8003f5e:	47a0      	blx	r4
 8003f60:	4603      	mov	r3, r0
  }
}
 8003f62:	4618      	mov	r0, r3
 8003f64:	371c      	adds	r7, #28
 8003f66:	46bd      	mov	sp, r7
 8003f68:	bd90      	pop	{r4, r7, pc}

08003f6a <WriteAccRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t WriteAccRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8003f6a:	b590      	push	{r4, r7, lr}
 8003f6c:	b087      	sub	sp, #28
 8003f6e:	af00      	add	r7, sp, #0
 8003f70:	60f8      	str	r0, [r7, #12]
 8003f72:	607a      	str	r2, [r7, #4]
 8003f74:	461a      	mov	r2, r3
 8003f76:	460b      	mov	r3, r1
 8003f78:	72fb      	strb	r3, [r7, #11]
 8003f7a:	4613      	mov	r3, r2
 8003f7c:	813b      	strh	r3, [r7, #8]
  LSM303AGR_ACC_Object_t *pObj = (LSM303AGR_ACC_Object_t *)Handle;
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == LSM303AGR_I2C_BUS) /* I2C */
 8003f82:	697b      	ldr	r3, [r7, #20]
 8003f84:	689b      	ldr	r3, [r3, #8]
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d10e      	bne.n	8003fa8 <WriteAccRegWrap+0x3e>
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 8003f8a:	697b      	ldr	r3, [r7, #20]
 8003f8c:	691c      	ldr	r4, [r3, #16]
 8003f8e:	697b      	ldr	r3, [r7, #20]
 8003f90:	7b1b      	ldrb	r3, [r3, #12]
 8003f92:	b298      	uxth	r0, r3
 8003f94:	7afb      	ldrb	r3, [r7, #11]
 8003f96:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003f9a:	b2db      	uxtb	r3, r3
 8003f9c:	b299      	uxth	r1, r3
 8003f9e:	893b      	ldrh	r3, [r7, #8]
 8003fa0:	687a      	ldr	r2, [r7, #4]
 8003fa2:	47a0      	blx	r4
 8003fa4:	4603      	mov	r3, r0
 8003fa6:	e00d      	b.n	8003fc4 <WriteAccRegWrap+0x5a>
  }
  else   /* SPI 3-Wires */
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 8003fa8:	697b      	ldr	r3, [r7, #20]
 8003faa:	691c      	ldr	r4, [r3, #16]
 8003fac:	697b      	ldr	r3, [r7, #20]
 8003fae:	7b1b      	ldrb	r3, [r3, #12]
 8003fb0:	b298      	uxth	r0, r3
 8003fb2:	7afb      	ldrb	r3, [r7, #11]
 8003fb4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003fb8:	b2db      	uxtb	r3, r3
 8003fba:	b299      	uxth	r1, r3
 8003fbc:	893b      	ldrh	r3, [r7, #8]
 8003fbe:	687a      	ldr	r2, [r7, #4]
 8003fc0:	47a0      	blx	r4
 8003fc2:	4603      	mov	r3, r0
  }
}
 8003fc4:	4618      	mov	r0, r3
 8003fc6:	371c      	adds	r7, #28
 8003fc8:	46bd      	mov	sp, r7
 8003fca:	bd90      	pop	{r4, r7, pc}

08003fcc <ReadMagRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ReadMagRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8003fcc:	b590      	push	{r4, r7, lr}
 8003fce:	b087      	sub	sp, #28
 8003fd0:	af00      	add	r7, sp, #0
 8003fd2:	60f8      	str	r0, [r7, #12]
 8003fd4:	607a      	str	r2, [r7, #4]
 8003fd6:	461a      	mov	r2, r3
 8003fd8:	460b      	mov	r3, r1
 8003fda:	72fb      	strb	r3, [r7, #11]
 8003fdc:	4613      	mov	r3, r2
 8003fde:	813b      	strh	r3, [r7, #8]
  LSM303AGR_MAG_Object_t *pObj = (LSM303AGR_MAG_Object_t *)Handle;
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == LSM303AGR_I2C_BUS) /* I2C */
 8003fe4:	697b      	ldr	r3, [r7, #20]
 8003fe6:	689b      	ldr	r3, [r3, #8]
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d10e      	bne.n	800400a <ReadMagRegWrap+0x3e>
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 8003fec:	697b      	ldr	r3, [r7, #20]
 8003fee:	695c      	ldr	r4, [r3, #20]
 8003ff0:	697b      	ldr	r3, [r7, #20]
 8003ff2:	7b1b      	ldrb	r3, [r3, #12]
 8003ff4:	b298      	uxth	r0, r3
 8003ff6:	7afb      	ldrb	r3, [r7, #11]
 8003ff8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003ffc:	b2db      	uxtb	r3, r3
 8003ffe:	b299      	uxth	r1, r3
 8004000:	893b      	ldrh	r3, [r7, #8]
 8004002:	687a      	ldr	r2, [r7, #4]
 8004004:	47a0      	blx	r4
 8004006:	4603      	mov	r3, r0
 8004008:	e00d      	b.n	8004026 <ReadMagRegWrap+0x5a>
  }
  else   /* SPI 3-Wires */
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 800400a:	697b      	ldr	r3, [r7, #20]
 800400c:	695c      	ldr	r4, [r3, #20]
 800400e:	697b      	ldr	r3, [r7, #20]
 8004010:	7b1b      	ldrb	r3, [r3, #12]
 8004012:	b298      	uxth	r0, r3
 8004014:	7afb      	ldrb	r3, [r7, #11]
 8004016:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800401a:	b2db      	uxtb	r3, r3
 800401c:	b299      	uxth	r1, r3
 800401e:	893b      	ldrh	r3, [r7, #8]
 8004020:	687a      	ldr	r2, [r7, #4]
 8004022:	47a0      	blx	r4
 8004024:	4603      	mov	r3, r0
  }
}
 8004026:	4618      	mov	r0, r3
 8004028:	371c      	adds	r7, #28
 800402a:	46bd      	mov	sp, r7
 800402c:	bd90      	pop	{r4, r7, pc}

0800402e <WriteMagRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t WriteMagRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 800402e:	b590      	push	{r4, r7, lr}
 8004030:	b087      	sub	sp, #28
 8004032:	af00      	add	r7, sp, #0
 8004034:	60f8      	str	r0, [r7, #12]
 8004036:	607a      	str	r2, [r7, #4]
 8004038:	461a      	mov	r2, r3
 800403a:	460b      	mov	r3, r1
 800403c:	72fb      	strb	r3, [r7, #11]
 800403e:	4613      	mov	r3, r2
 8004040:	813b      	strh	r3, [r7, #8]
  LSM303AGR_MAG_Object_t *pObj = (LSM303AGR_MAG_Object_t *)Handle;
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == LSM303AGR_I2C_BUS) /* I2C */
 8004046:	697b      	ldr	r3, [r7, #20]
 8004048:	689b      	ldr	r3, [r3, #8]
 800404a:	2b00      	cmp	r3, #0
 800404c:	d10e      	bne.n	800406c <WriteMagRegWrap+0x3e>
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 800404e:	697b      	ldr	r3, [r7, #20]
 8004050:	691c      	ldr	r4, [r3, #16]
 8004052:	697b      	ldr	r3, [r7, #20]
 8004054:	7b1b      	ldrb	r3, [r3, #12]
 8004056:	b298      	uxth	r0, r3
 8004058:	7afb      	ldrb	r3, [r7, #11]
 800405a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800405e:	b2db      	uxtb	r3, r3
 8004060:	b299      	uxth	r1, r3
 8004062:	893b      	ldrh	r3, [r7, #8]
 8004064:	687a      	ldr	r2, [r7, #4]
 8004066:	47a0      	blx	r4
 8004068:	4603      	mov	r3, r0
 800406a:	e00d      	b.n	8004088 <WriteMagRegWrap+0x5a>
  }
  else   /* SPI 3-Wires */
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 800406c:	697b      	ldr	r3, [r7, #20]
 800406e:	691c      	ldr	r4, [r3, #16]
 8004070:	697b      	ldr	r3, [r7, #20]
 8004072:	7b1b      	ldrb	r3, [r3, #12]
 8004074:	b298      	uxth	r0, r3
 8004076:	7afb      	ldrb	r3, [r7, #11]
 8004078:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800407c:	b2db      	uxtb	r3, r3
 800407e:	b299      	uxth	r1, r3
 8004080:	893b      	ldrh	r3, [r7, #8]
 8004082:	687a      	ldr	r2, [r7, #4]
 8004084:	47a0      	blx	r4
 8004086:	4603      	mov	r3, r0
  }
}
 8004088:	4618      	mov	r0, r3
 800408a:	371c      	adds	r7, #28
 800408c:	46bd      	mov	sp, r7
 800408e:	bd90      	pop	{r4, r7, pc}

08004090 <lsm303agr_read_reg>:
  *
  */
int32_t lsm303agr_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                           uint8_t *data,
                           uint16_t len)
{
 8004090:	b590      	push	{r4, r7, lr}
 8004092:	b087      	sub	sp, #28
 8004094:	af00      	add	r7, sp, #0
 8004096:	60f8      	str	r0, [r7, #12]
 8004098:	607a      	str	r2, [r7, #4]
 800409a:	461a      	mov	r2, r3
 800409c:	460b      	mov	r3, r1
 800409e:	72fb      	strb	r3, [r7, #11]
 80040a0:	4613      	mov	r3, r2
 80040a2:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	685c      	ldr	r4, [r3, #4]
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	68d8      	ldr	r0, [r3, #12]
 80040ac:	893b      	ldrh	r3, [r7, #8]
 80040ae:	7af9      	ldrb	r1, [r7, #11]
 80040b0:	687a      	ldr	r2, [r7, #4]
 80040b2:	47a0      	blx	r4
 80040b4:	6178      	str	r0, [r7, #20]

  return ret;
 80040b6:	697b      	ldr	r3, [r7, #20]
}
 80040b8:	4618      	mov	r0, r3
 80040ba:	371c      	adds	r7, #28
 80040bc:	46bd      	mov	sp, r7
 80040be:	bd90      	pop	{r4, r7, pc}

080040c0 <lsm303agr_write_reg>:
  *
  */
int32_t lsm303agr_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                            uint8_t *data,
                            uint16_t len)
{
 80040c0:	b590      	push	{r4, r7, lr}
 80040c2:	b087      	sub	sp, #28
 80040c4:	af00      	add	r7, sp, #0
 80040c6:	60f8      	str	r0, [r7, #12]
 80040c8:	607a      	str	r2, [r7, #4]
 80040ca:	461a      	mov	r2, r3
 80040cc:	460b      	mov	r3, r1
 80040ce:	72fb      	strb	r3, [r7, #11]
 80040d0:	4613      	mov	r3, r2
 80040d2:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	681c      	ldr	r4, [r3, #0]
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	68d8      	ldr	r0, [r3, #12]
 80040dc:	893b      	ldrh	r3, [r7, #8]
 80040de:	7af9      	ldrb	r1, [r7, #11]
 80040e0:	687a      	ldr	r2, [r7, #4]
 80040e2:	47a0      	blx	r4
 80040e4:	6178      	str	r0, [r7, #20]

  return ret;
 80040e6:	697b      	ldr	r3, [r7, #20]
}
 80040e8:	4618      	mov	r0, r3
 80040ea:	371c      	adds	r7, #28
 80040ec:	46bd      	mov	sp, r7
 80040ee:	bd90      	pop	{r4, r7, pc}

080040f0 <lsm303agr_xl_operating_mode_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_xl_operating_mode_get(stmdev_ctx_t *ctx,
                                        lsm303agr_op_md_a_t *val)
{
 80040f0:	b580      	push	{r7, lr}
 80040f2:	b086      	sub	sp, #24
 80040f4:	af00      	add	r7, sp, #0
 80040f6:	6078      	str	r0, [r7, #4]
 80040f8:	6039      	str	r1, [r7, #0]
  lsm303agr_ctrl_reg4_a_t ctrl_reg4_a;
  lsm303agr_ctrl_reg1_a_t ctrl_reg1_a;
  int32_t ret;

  ret = lsm303agr_read_reg(ctx, LSM303AGR_CTRL_REG1_A,
 80040fa:	f107 020c 	add.w	r2, r7, #12
 80040fe:	2301      	movs	r3, #1
 8004100:	2120      	movs	r1, #32
 8004102:	6878      	ldr	r0, [r7, #4]
 8004104:	f7ff ffc4 	bl	8004090 <lsm303agr_read_reg>
 8004108:	6178      	str	r0, [r7, #20]
                           (uint8_t *)&ctrl_reg1_a, 1);

  if (ret == 0)
 800410a:	697b      	ldr	r3, [r7, #20]
 800410c:	2b00      	cmp	r3, #0
 800410e:	d107      	bne.n	8004120 <lsm303agr_xl_operating_mode_get+0x30>
  {
    ret = lsm303agr_read_reg(ctx, LSM303AGR_CTRL_REG4_A,
 8004110:	f107 0210 	add.w	r2, r7, #16
 8004114:	2301      	movs	r3, #1
 8004116:	2123      	movs	r1, #35	; 0x23
 8004118:	6878      	ldr	r0, [r7, #4]
 800411a:	f7ff ffb9 	bl	8004090 <lsm303agr_read_reg>
 800411e:	6178      	str	r0, [r7, #20]
                             (uint8_t *)&ctrl_reg4_a, 1);
  }

  if (ctrl_reg1_a.lpen != PROPERTY_DISABLE)
 8004120:	7b3b      	ldrb	r3, [r7, #12]
 8004122:	f003 0308 	and.w	r3, r3, #8
 8004126:	b2db      	uxtb	r3, r3
 8004128:	2b00      	cmp	r3, #0
 800412a:	d003      	beq.n	8004134 <lsm303agr_xl_operating_mode_get+0x44>
  {
    *val = LSM303AGR_LP_8bit;
 800412c:	683b      	ldr	r3, [r7, #0]
 800412e:	2202      	movs	r2, #2
 8004130:	701a      	strb	r2, [r3, #0]
 8004132:	e00c      	b.n	800414e <lsm303agr_xl_operating_mode_get+0x5e>
  }

  else if (ctrl_reg4_a.hr  != PROPERTY_DISABLE)
 8004134:	7c3b      	ldrb	r3, [r7, #16]
 8004136:	f003 0308 	and.w	r3, r3, #8
 800413a:	b2db      	uxtb	r3, r3
 800413c:	2b00      	cmp	r3, #0
 800413e:	d003      	beq.n	8004148 <lsm303agr_xl_operating_mode_get+0x58>
  {
    *val = LSM303AGR_HR_12bit;
 8004140:	683b      	ldr	r3, [r7, #0]
 8004142:	2200      	movs	r2, #0
 8004144:	701a      	strb	r2, [r3, #0]
 8004146:	e002      	b.n	800414e <lsm303agr_xl_operating_mode_get+0x5e>
  }

  else
  {
    *val = LSM303AGR_NM_10bit;
 8004148:	683b      	ldr	r3, [r7, #0]
 800414a:	2201      	movs	r2, #1
 800414c:	701a      	strb	r2, [r3, #0]
  }

  return ret;
 800414e:	697b      	ldr	r3, [r7, #20]
}
 8004150:	4618      	mov	r0, r3
 8004152:	3718      	adds	r7, #24
 8004154:	46bd      	mov	sp, r7
 8004156:	bd80      	pop	{r7, pc}

08004158 <lsm303agr_xl_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_xl_data_rate_set(stmdev_ctx_t *ctx,
                                   lsm303agr_odr_a_t val)
{
 8004158:	b580      	push	{r7, lr}
 800415a:	b084      	sub	sp, #16
 800415c:	af00      	add	r7, sp, #0
 800415e:	6078      	str	r0, [r7, #4]
 8004160:	460b      	mov	r3, r1
 8004162:	70fb      	strb	r3, [r7, #3]
  lsm303agr_ctrl_reg1_a_t ctrl_reg1_a;
  int32_t ret;

  ret = lsm303agr_read_reg(ctx, LSM303AGR_CTRL_REG1_A,
 8004164:	f107 0208 	add.w	r2, r7, #8
 8004168:	2301      	movs	r3, #1
 800416a:	2120      	movs	r1, #32
 800416c:	6878      	ldr	r0, [r7, #4]
 800416e:	f7ff ff8f 	bl	8004090 <lsm303agr_read_reg>
 8004172:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&ctrl_reg1_a, 1);

  if (ret == 0)
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	2b00      	cmp	r3, #0
 8004178:	d10f      	bne.n	800419a <lsm303agr_xl_data_rate_set+0x42>
  {
    ctrl_reg1_a.odr = (uint8_t)val;
 800417a:	78fb      	ldrb	r3, [r7, #3]
 800417c:	f003 030f 	and.w	r3, r3, #15
 8004180:	b2da      	uxtb	r2, r3
 8004182:	7a3b      	ldrb	r3, [r7, #8]
 8004184:	f362 1307 	bfi	r3, r2, #4, #4
 8004188:	723b      	strb	r3, [r7, #8]
    ret = lsm303agr_write_reg(ctx, LSM303AGR_CTRL_REG1_A,
 800418a:	f107 0208 	add.w	r2, r7, #8
 800418e:	2301      	movs	r3, #1
 8004190:	2120      	movs	r1, #32
 8004192:	6878      	ldr	r0, [r7, #4]
 8004194:	f7ff ff94 	bl	80040c0 <lsm303agr_write_reg>
 8004198:	60f8      	str	r0, [r7, #12]
                              (uint8_t *)&ctrl_reg1_a, 1);
  }

  return ret;
 800419a:	68fb      	ldr	r3, [r7, #12]
}
 800419c:	4618      	mov	r0, r3
 800419e:	3710      	adds	r7, #16
 80041a0:	46bd      	mov	sp, r7
 80041a2:	bd80      	pop	{r7, pc}

080041a4 <lsm303agr_xl_data_rate_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_xl_data_rate_get(stmdev_ctx_t *ctx,
                                   lsm303agr_odr_a_t *val)
{
 80041a4:	b580      	push	{r7, lr}
 80041a6:	b084      	sub	sp, #16
 80041a8:	af00      	add	r7, sp, #0
 80041aa:	6078      	str	r0, [r7, #4]
 80041ac:	6039      	str	r1, [r7, #0]
  lsm303agr_ctrl_reg1_a_t ctrl_reg1_a;
  int32_t ret;

  ret = lsm303agr_read_reg(ctx, LSM303AGR_CTRL_REG1_A,
 80041ae:	f107 0208 	add.w	r2, r7, #8
 80041b2:	2301      	movs	r3, #1
 80041b4:	2120      	movs	r1, #32
 80041b6:	6878      	ldr	r0, [r7, #4]
 80041b8:	f7ff ff6a 	bl	8004090 <lsm303agr_read_reg>
 80041bc:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&ctrl_reg1_a, 1);

  switch (ctrl_reg1_a.odr)
 80041be:	7a3b      	ldrb	r3, [r7, #8]
 80041c0:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80041c4:	b2db      	uxtb	r3, r3
 80041c6:	2b09      	cmp	r3, #9
 80041c8:	d83e      	bhi.n	8004248 <lsm303agr_xl_data_rate_get+0xa4>
 80041ca:	a201      	add	r2, pc, #4	; (adr r2, 80041d0 <lsm303agr_xl_data_rate_get+0x2c>)
 80041cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041d0:	080041f9 	.word	0x080041f9
 80041d4:	08004201 	.word	0x08004201
 80041d8:	08004209 	.word	0x08004209
 80041dc:	08004211 	.word	0x08004211
 80041e0:	08004219 	.word	0x08004219
 80041e4:	08004221 	.word	0x08004221
 80041e8:	08004229 	.word	0x08004229
 80041ec:	08004231 	.word	0x08004231
 80041f0:	08004239 	.word	0x08004239
 80041f4:	08004241 	.word	0x08004241
  {
    case LSM303AGR_XL_POWER_DOWN:
      *val = LSM303AGR_XL_POWER_DOWN;
 80041f8:	683b      	ldr	r3, [r7, #0]
 80041fa:	2200      	movs	r2, #0
 80041fc:	701a      	strb	r2, [r3, #0]
      break;
 80041fe:	e027      	b.n	8004250 <lsm303agr_xl_data_rate_get+0xac>

    case LSM303AGR_XL_ODR_1Hz:
      *val = LSM303AGR_XL_ODR_1Hz;
 8004200:	683b      	ldr	r3, [r7, #0]
 8004202:	2201      	movs	r2, #1
 8004204:	701a      	strb	r2, [r3, #0]
      break;
 8004206:	e023      	b.n	8004250 <lsm303agr_xl_data_rate_get+0xac>

    case LSM303AGR_XL_ODR_10Hz:
      *val = LSM303AGR_XL_ODR_10Hz;
 8004208:	683b      	ldr	r3, [r7, #0]
 800420a:	2202      	movs	r2, #2
 800420c:	701a      	strb	r2, [r3, #0]
      break;
 800420e:	e01f      	b.n	8004250 <lsm303agr_xl_data_rate_get+0xac>

    case LSM303AGR_XL_ODR_25Hz:
      *val = LSM303AGR_XL_ODR_25Hz;
 8004210:	683b      	ldr	r3, [r7, #0]
 8004212:	2203      	movs	r2, #3
 8004214:	701a      	strb	r2, [r3, #0]
      break;
 8004216:	e01b      	b.n	8004250 <lsm303agr_xl_data_rate_get+0xac>

    case LSM303AGR_XL_ODR_50Hz:
      *val = LSM303AGR_XL_ODR_50Hz;
 8004218:	683b      	ldr	r3, [r7, #0]
 800421a:	2204      	movs	r2, #4
 800421c:	701a      	strb	r2, [r3, #0]
      break;
 800421e:	e017      	b.n	8004250 <lsm303agr_xl_data_rate_get+0xac>

    case LSM303AGR_XL_ODR_100Hz:
      *val = LSM303AGR_XL_ODR_100Hz;
 8004220:	683b      	ldr	r3, [r7, #0]
 8004222:	2205      	movs	r2, #5
 8004224:	701a      	strb	r2, [r3, #0]
      break;
 8004226:	e013      	b.n	8004250 <lsm303agr_xl_data_rate_get+0xac>

    case LSM303AGR_XL_ODR_200Hz:
      *val = LSM303AGR_XL_ODR_200Hz;
 8004228:	683b      	ldr	r3, [r7, #0]
 800422a:	2206      	movs	r2, #6
 800422c:	701a      	strb	r2, [r3, #0]
      break;
 800422e:	e00f      	b.n	8004250 <lsm303agr_xl_data_rate_get+0xac>

    case LSM303AGR_XL_ODR_400Hz:
      *val = LSM303AGR_XL_ODR_400Hz;
 8004230:	683b      	ldr	r3, [r7, #0]
 8004232:	2207      	movs	r2, #7
 8004234:	701a      	strb	r2, [r3, #0]
      break;
 8004236:	e00b      	b.n	8004250 <lsm303agr_xl_data_rate_get+0xac>

    case LSM303AGR_XL_ODR_1kHz620_LP:
      *val = LSM303AGR_XL_ODR_1kHz620_LP;
 8004238:	683b      	ldr	r3, [r7, #0]
 800423a:	2208      	movs	r2, #8
 800423c:	701a      	strb	r2, [r3, #0]
      break;
 800423e:	e007      	b.n	8004250 <lsm303agr_xl_data_rate_get+0xac>

    case LSM303AGR_XL_ODR_1kHz344_NM_HP_5kHz376_LP:
      *val = LSM303AGR_XL_ODR_1kHz344_NM_HP_5kHz376_LP;
 8004240:	683b      	ldr	r3, [r7, #0]
 8004242:	2209      	movs	r2, #9
 8004244:	701a      	strb	r2, [r3, #0]
      break;
 8004246:	e003      	b.n	8004250 <lsm303agr_xl_data_rate_get+0xac>

    default:
      *val = LSM303AGR_XL_POWER_DOWN;
 8004248:	683b      	ldr	r3, [r7, #0]
 800424a:	2200      	movs	r2, #0
 800424c:	701a      	strb	r2, [r3, #0]
      break;
 800424e:	bf00      	nop
  }

  return ret;
 8004250:	68fb      	ldr	r3, [r7, #12]
}
 8004252:	4618      	mov	r0, r3
 8004254:	3710      	adds	r7, #16
 8004256:	46bd      	mov	sp, r7
 8004258:	bd80      	pop	{r7, pc}
 800425a:	bf00      	nop

0800425c <lsm303agr_xl_full_scale_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_xl_full_scale_set(stmdev_ctx_t *ctx,
                                    lsm303agr_fs_a_t val)
{
 800425c:	b580      	push	{r7, lr}
 800425e:	b084      	sub	sp, #16
 8004260:	af00      	add	r7, sp, #0
 8004262:	6078      	str	r0, [r7, #4]
 8004264:	460b      	mov	r3, r1
 8004266:	70fb      	strb	r3, [r7, #3]
  lsm303agr_ctrl_reg4_a_t ctrl_reg4_a;
  int32_t ret;

  ret = lsm303agr_read_reg(ctx, LSM303AGR_CTRL_REG4_A,
 8004268:	f107 0208 	add.w	r2, r7, #8
 800426c:	2301      	movs	r3, #1
 800426e:	2123      	movs	r1, #35	; 0x23
 8004270:	6878      	ldr	r0, [r7, #4]
 8004272:	f7ff ff0d 	bl	8004090 <lsm303agr_read_reg>
 8004276:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&ctrl_reg4_a, 1);

  if (ret == 0)
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	2b00      	cmp	r3, #0
 800427c:	d10f      	bne.n	800429e <lsm303agr_xl_full_scale_set+0x42>
  {
    ctrl_reg4_a.fs = (uint8_t)val;
 800427e:	78fb      	ldrb	r3, [r7, #3]
 8004280:	f003 0303 	and.w	r3, r3, #3
 8004284:	b2da      	uxtb	r2, r3
 8004286:	7a3b      	ldrb	r3, [r7, #8]
 8004288:	f362 1305 	bfi	r3, r2, #4, #2
 800428c:	723b      	strb	r3, [r7, #8]
    ret = lsm303agr_write_reg(ctx, LSM303AGR_CTRL_REG4_A,
 800428e:	f107 0208 	add.w	r2, r7, #8
 8004292:	2301      	movs	r3, #1
 8004294:	2123      	movs	r1, #35	; 0x23
 8004296:	6878      	ldr	r0, [r7, #4]
 8004298:	f7ff ff12 	bl	80040c0 <lsm303agr_write_reg>
 800429c:	60f8      	str	r0, [r7, #12]
                              (uint8_t *)&ctrl_reg4_a, 1);
  }

  return ret;
 800429e:	68fb      	ldr	r3, [r7, #12]
}
 80042a0:	4618      	mov	r0, r3
 80042a2:	3710      	adds	r7, #16
 80042a4:	46bd      	mov	sp, r7
 80042a6:	bd80      	pop	{r7, pc}

080042a8 <lsm303agr_xl_full_scale_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_xl_full_scale_get(stmdev_ctx_t *ctx,
                                    lsm303agr_fs_a_t *val)
{
 80042a8:	b580      	push	{r7, lr}
 80042aa:	b084      	sub	sp, #16
 80042ac:	af00      	add	r7, sp, #0
 80042ae:	6078      	str	r0, [r7, #4]
 80042b0:	6039      	str	r1, [r7, #0]
  lsm303agr_ctrl_reg4_a_t ctrl_reg4_a;
  int32_t ret;

  ret = lsm303agr_read_reg(ctx, LSM303AGR_CTRL_REG4_A,
 80042b2:	f107 0208 	add.w	r2, r7, #8
 80042b6:	2301      	movs	r3, #1
 80042b8:	2123      	movs	r1, #35	; 0x23
 80042ba:	6878      	ldr	r0, [r7, #4]
 80042bc:	f7ff fee8 	bl	8004090 <lsm303agr_read_reg>
 80042c0:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&ctrl_reg4_a, 1);

  switch (ctrl_reg4_a.fs)
 80042c2:	7a3b      	ldrb	r3, [r7, #8]
 80042c4:	f3c3 1301 	ubfx	r3, r3, #4, #2
 80042c8:	b2db      	uxtb	r3, r3
 80042ca:	2b03      	cmp	r3, #3
 80042cc:	d81a      	bhi.n	8004304 <lsm303agr_xl_full_scale_get+0x5c>
 80042ce:	a201      	add	r2, pc, #4	; (adr r2, 80042d4 <lsm303agr_xl_full_scale_get+0x2c>)
 80042d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042d4:	080042e5 	.word	0x080042e5
 80042d8:	080042ed 	.word	0x080042ed
 80042dc:	080042f5 	.word	0x080042f5
 80042e0:	080042fd 	.word	0x080042fd
  {
    case LSM303AGR_2g:
      *val = LSM303AGR_2g;
 80042e4:	683b      	ldr	r3, [r7, #0]
 80042e6:	2200      	movs	r2, #0
 80042e8:	701a      	strb	r2, [r3, #0]
      break;
 80042ea:	e00f      	b.n	800430c <lsm303agr_xl_full_scale_get+0x64>

    case LSM303AGR_4g:
      *val = LSM303AGR_4g;
 80042ec:	683b      	ldr	r3, [r7, #0]
 80042ee:	2201      	movs	r2, #1
 80042f0:	701a      	strb	r2, [r3, #0]
      break;
 80042f2:	e00b      	b.n	800430c <lsm303agr_xl_full_scale_get+0x64>

    case LSM303AGR_8g:
      *val = LSM303AGR_8g;
 80042f4:	683b      	ldr	r3, [r7, #0]
 80042f6:	2202      	movs	r2, #2
 80042f8:	701a      	strb	r2, [r3, #0]
      break;
 80042fa:	e007      	b.n	800430c <lsm303agr_xl_full_scale_get+0x64>

    case LSM303AGR_16g:
      *val = LSM303AGR_16g;
 80042fc:	683b      	ldr	r3, [r7, #0]
 80042fe:	2203      	movs	r2, #3
 8004300:	701a      	strb	r2, [r3, #0]
      break;
 8004302:	e003      	b.n	800430c <lsm303agr_xl_full_scale_get+0x64>

    default:
      *val = LSM303AGR_2g;
 8004304:	683b      	ldr	r3, [r7, #0]
 8004306:	2200      	movs	r2, #0
 8004308:	701a      	strb	r2, [r3, #0]
      break;
 800430a:	bf00      	nop
  }

  return ret;
 800430c:	68fb      	ldr	r3, [r7, #12]
}
 800430e:	4618      	mov	r0, r3
 8004310:	3710      	adds	r7, #16
 8004312:	46bd      	mov	sp, r7
 8004314:	bd80      	pop	{r7, pc}
 8004316:	bf00      	nop

08004318 <lsm303agr_xl_block_data_update_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_xl_block_data_update_set(stmdev_ctx_t *ctx,
                                           uint8_t val)
{
 8004318:	b580      	push	{r7, lr}
 800431a:	b084      	sub	sp, #16
 800431c:	af00      	add	r7, sp, #0
 800431e:	6078      	str	r0, [r7, #4]
 8004320:	460b      	mov	r3, r1
 8004322:	70fb      	strb	r3, [r7, #3]
  lsm303agr_ctrl_reg4_a_t ctrl_reg4_a;
  int32_t ret;

  ret = lsm303agr_read_reg(ctx, LSM303AGR_CTRL_REG4_A,
 8004324:	f107 0208 	add.w	r2, r7, #8
 8004328:	2301      	movs	r3, #1
 800432a:	2123      	movs	r1, #35	; 0x23
 800432c:	6878      	ldr	r0, [r7, #4]
 800432e:	f7ff feaf 	bl	8004090 <lsm303agr_read_reg>
 8004332:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&ctrl_reg4_a, 1);

  if (ret == 0)
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	2b00      	cmp	r3, #0
 8004338:	d10f      	bne.n	800435a <lsm303agr_xl_block_data_update_set+0x42>
  {
    ctrl_reg4_a.bdu = (uint8_t)val;
 800433a:	78fb      	ldrb	r3, [r7, #3]
 800433c:	f003 0301 	and.w	r3, r3, #1
 8004340:	b2da      	uxtb	r2, r3
 8004342:	7a3b      	ldrb	r3, [r7, #8]
 8004344:	f362 13c7 	bfi	r3, r2, #7, #1
 8004348:	723b      	strb	r3, [r7, #8]
    ret = lsm303agr_write_reg(ctx, LSM303AGR_CTRL_REG4_A,
 800434a:	f107 0208 	add.w	r2, r7, #8
 800434e:	2301      	movs	r3, #1
 8004350:	2123      	movs	r1, #35	; 0x23
 8004352:	6878      	ldr	r0, [r7, #4]
 8004354:	f7ff feb4 	bl	80040c0 <lsm303agr_write_reg>
 8004358:	60f8      	str	r0, [r7, #12]
                              (uint8_t *)&ctrl_reg4_a, 1);
  }

  return ret;
 800435a:	68fb      	ldr	r3, [r7, #12]
}
 800435c:	4618      	mov	r0, r3
 800435e:	3710      	adds	r7, #16
 8004360:	46bd      	mov	sp, r7
 8004362:	bd80      	pop	{r7, pc}

08004364 <lsm303agr_acceleration_raw_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_acceleration_raw_get(stmdev_ctx_t *ctx,
                                       int16_t *val)
{
 8004364:	b580      	push	{r7, lr}
 8004366:	b086      	sub	sp, #24
 8004368:	af00      	add	r7, sp, #0
 800436a:	6078      	str	r0, [r7, #4]
 800436c:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lsm303agr_read_reg(ctx, LSM303AGR_OUT_X_L_A, buff, 6);
 800436e:	f107 020c 	add.w	r2, r7, #12
 8004372:	2306      	movs	r3, #6
 8004374:	2128      	movs	r1, #40	; 0x28
 8004376:	6878      	ldr	r0, [r7, #4]
 8004378:	f7ff fe8a 	bl	8004090 <lsm303agr_read_reg>
 800437c:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 800437e:	7b7b      	ldrb	r3, [r7, #13]
 8004380:	b21a      	sxth	r2, r3
 8004382:	683b      	ldr	r3, [r7, #0]
 8004384:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 8004386:	683b      	ldr	r3, [r7, #0]
 8004388:	f9b3 3000 	ldrsh.w	r3, [r3]
 800438c:	b29b      	uxth	r3, r3
 800438e:	021b      	lsls	r3, r3, #8
 8004390:	b29a      	uxth	r2, r3
 8004392:	7b3b      	ldrb	r3, [r7, #12]
 8004394:	b29b      	uxth	r3, r3
 8004396:	4413      	add	r3, r2
 8004398:	b29b      	uxth	r3, r3
 800439a:	b21a      	sxth	r2, r3
 800439c:	683b      	ldr	r3, [r7, #0]
 800439e:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 80043a0:	7bfa      	ldrb	r2, [r7, #15]
 80043a2:	683b      	ldr	r3, [r7, #0]
 80043a4:	3302      	adds	r3, #2
 80043a6:	b212      	sxth	r2, r2
 80043a8:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 80043aa:	683b      	ldr	r3, [r7, #0]
 80043ac:	3302      	adds	r3, #2
 80043ae:	f9b3 3000 	ldrsh.w	r3, [r3]
 80043b2:	b29b      	uxth	r3, r3
 80043b4:	021b      	lsls	r3, r3, #8
 80043b6:	b29a      	uxth	r2, r3
 80043b8:	7bbb      	ldrb	r3, [r7, #14]
 80043ba:	b29b      	uxth	r3, r3
 80043bc:	4413      	add	r3, r2
 80043be:	b29a      	uxth	r2, r3
 80043c0:	683b      	ldr	r3, [r7, #0]
 80043c2:	3302      	adds	r3, #2
 80043c4:	b212      	sxth	r2, r2
 80043c6:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 80043c8:	7c7a      	ldrb	r2, [r7, #17]
 80043ca:	683b      	ldr	r3, [r7, #0]
 80043cc:	3304      	adds	r3, #4
 80043ce:	b212      	sxth	r2, r2
 80043d0:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 80043d2:	683b      	ldr	r3, [r7, #0]
 80043d4:	3304      	adds	r3, #4
 80043d6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80043da:	b29b      	uxth	r3, r3
 80043dc:	021b      	lsls	r3, r3, #8
 80043de:	b29a      	uxth	r2, r3
 80043e0:	7c3b      	ldrb	r3, [r7, #16]
 80043e2:	b29b      	uxth	r3, r3
 80043e4:	4413      	add	r3, r2
 80043e6:	b29a      	uxth	r2, r3
 80043e8:	683b      	ldr	r3, [r7, #0]
 80043ea:	3304      	adds	r3, #4
 80043ec:	b212      	sxth	r2, r2
 80043ee:	801a      	strh	r2, [r3, #0]

  return ret;
 80043f0:	697b      	ldr	r3, [r7, #20]
}
 80043f2:	4618      	mov	r0, r3
 80043f4:	3718      	adds	r7, #24
 80043f6:	46bd      	mov	sp, r7
 80043f8:	bd80      	pop	{r7, pc}

080043fa <lsm303agr_mag_operating_mode_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_mag_operating_mode_set(stmdev_ctx_t *ctx,
                                         lsm303agr_md_m_t val)
{
 80043fa:	b580      	push	{r7, lr}
 80043fc:	b084      	sub	sp, #16
 80043fe:	af00      	add	r7, sp, #0
 8004400:	6078      	str	r0, [r7, #4]
 8004402:	460b      	mov	r3, r1
 8004404:	70fb      	strb	r3, [r7, #3]
  lsm303agr_cfg_reg_a_m_t cfg_reg_a_m;
  int32_t ret;

  ret = lsm303agr_read_reg(ctx, LSM303AGR_CFG_REG_A_M,
 8004406:	f107 0208 	add.w	r2, r7, #8
 800440a:	2301      	movs	r3, #1
 800440c:	2160      	movs	r1, #96	; 0x60
 800440e:	6878      	ldr	r0, [r7, #4]
 8004410:	f7ff fe3e 	bl	8004090 <lsm303agr_read_reg>
 8004414:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&cfg_reg_a_m, 1);

  if (ret == 0)
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	2b00      	cmp	r3, #0
 800441a:	d10f      	bne.n	800443c <lsm303agr_mag_operating_mode_set+0x42>
  {
    cfg_reg_a_m.md = (uint8_t)val;
 800441c:	78fb      	ldrb	r3, [r7, #3]
 800441e:	f003 0303 	and.w	r3, r3, #3
 8004422:	b2da      	uxtb	r2, r3
 8004424:	7a3b      	ldrb	r3, [r7, #8]
 8004426:	f362 0301 	bfi	r3, r2, #0, #2
 800442a:	723b      	strb	r3, [r7, #8]
    ret = lsm303agr_write_reg(ctx, LSM303AGR_CFG_REG_A_M,
 800442c:	f107 0208 	add.w	r2, r7, #8
 8004430:	2301      	movs	r3, #1
 8004432:	2160      	movs	r1, #96	; 0x60
 8004434:	6878      	ldr	r0, [r7, #4]
 8004436:	f7ff fe43 	bl	80040c0 <lsm303agr_write_reg>
 800443a:	60f8      	str	r0, [r7, #12]
                              (uint8_t *)&cfg_reg_a_m, 1);
  }

  return ret;
 800443c:	68fb      	ldr	r3, [r7, #12]
}
 800443e:	4618      	mov	r0, r3
 8004440:	3710      	adds	r7, #16
 8004442:	46bd      	mov	sp, r7
 8004444:	bd80      	pop	{r7, pc}

08004446 <lsm303agr_mag_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_mag_data_rate_set(stmdev_ctx_t *ctx,
                                    lsm303agr_mg_odr_m_t val)
{
 8004446:	b580      	push	{r7, lr}
 8004448:	b084      	sub	sp, #16
 800444a:	af00      	add	r7, sp, #0
 800444c:	6078      	str	r0, [r7, #4]
 800444e:	460b      	mov	r3, r1
 8004450:	70fb      	strb	r3, [r7, #3]
  lsm303agr_cfg_reg_a_m_t cfg_reg_a_m;
  int32_t ret;

  ret = lsm303agr_read_reg(ctx, LSM303AGR_CFG_REG_A_M,
 8004452:	f107 0208 	add.w	r2, r7, #8
 8004456:	2301      	movs	r3, #1
 8004458:	2160      	movs	r1, #96	; 0x60
 800445a:	6878      	ldr	r0, [r7, #4]
 800445c:	f7ff fe18 	bl	8004090 <lsm303agr_read_reg>
 8004460:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&cfg_reg_a_m, 1);

  if (ret == 0)
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	2b00      	cmp	r3, #0
 8004466:	d10f      	bne.n	8004488 <lsm303agr_mag_data_rate_set+0x42>
  {
    cfg_reg_a_m.odr = (uint8_t)val;
 8004468:	78fb      	ldrb	r3, [r7, #3]
 800446a:	f003 0303 	and.w	r3, r3, #3
 800446e:	b2da      	uxtb	r2, r3
 8004470:	7a3b      	ldrb	r3, [r7, #8]
 8004472:	f362 0383 	bfi	r3, r2, #2, #2
 8004476:	723b      	strb	r3, [r7, #8]
    ret = lsm303agr_write_reg(ctx, LSM303AGR_CFG_REG_A_M,
 8004478:	f107 0208 	add.w	r2, r7, #8
 800447c:	2301      	movs	r3, #1
 800447e:	2160      	movs	r1, #96	; 0x60
 8004480:	6878      	ldr	r0, [r7, #4]
 8004482:	f7ff fe1d 	bl	80040c0 <lsm303agr_write_reg>
 8004486:	60f8      	str	r0, [r7, #12]
                              (uint8_t *)&cfg_reg_a_m, 1);
  }

  return ret;
 8004488:	68fb      	ldr	r3, [r7, #12]
}
 800448a:	4618      	mov	r0, r3
 800448c:	3710      	adds	r7, #16
 800448e:	46bd      	mov	sp, r7
 8004490:	bd80      	pop	{r7, pc}
	...

08004494 <lsm303agr_mag_data_rate_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_mag_data_rate_get(stmdev_ctx_t *ctx,
                                    lsm303agr_mg_odr_m_t *val)
{
 8004494:	b580      	push	{r7, lr}
 8004496:	b084      	sub	sp, #16
 8004498:	af00      	add	r7, sp, #0
 800449a:	6078      	str	r0, [r7, #4]
 800449c:	6039      	str	r1, [r7, #0]
  lsm303agr_cfg_reg_a_m_t cfg_reg_a_m;
  int32_t ret;

  ret = lsm303agr_read_reg(ctx, LSM303AGR_CFG_REG_A_M,
 800449e:	f107 0208 	add.w	r2, r7, #8
 80044a2:	2301      	movs	r3, #1
 80044a4:	2160      	movs	r1, #96	; 0x60
 80044a6:	6878      	ldr	r0, [r7, #4]
 80044a8:	f7ff fdf2 	bl	8004090 <lsm303agr_read_reg>
 80044ac:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&cfg_reg_a_m, 1);

  switch (cfg_reg_a_m.odr)
 80044ae:	7a3b      	ldrb	r3, [r7, #8]
 80044b0:	f3c3 0381 	ubfx	r3, r3, #2, #2
 80044b4:	b2db      	uxtb	r3, r3
 80044b6:	2b03      	cmp	r3, #3
 80044b8:	d81a      	bhi.n	80044f0 <lsm303agr_mag_data_rate_get+0x5c>
 80044ba:	a201      	add	r2, pc, #4	; (adr r2, 80044c0 <lsm303agr_mag_data_rate_get+0x2c>)
 80044bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044c0:	080044d1 	.word	0x080044d1
 80044c4:	080044d9 	.word	0x080044d9
 80044c8:	080044e1 	.word	0x080044e1
 80044cc:	080044e9 	.word	0x080044e9
  {
    case LSM303AGR_MG_ODR_10Hz:
      *val = LSM303AGR_MG_ODR_10Hz;
 80044d0:	683b      	ldr	r3, [r7, #0]
 80044d2:	2200      	movs	r2, #0
 80044d4:	701a      	strb	r2, [r3, #0]
      break;
 80044d6:	e00f      	b.n	80044f8 <lsm303agr_mag_data_rate_get+0x64>

    case LSM303AGR_MG_ODR_20Hz:
      *val = LSM303AGR_MG_ODR_20Hz;
 80044d8:	683b      	ldr	r3, [r7, #0]
 80044da:	2201      	movs	r2, #1
 80044dc:	701a      	strb	r2, [r3, #0]
      break;
 80044de:	e00b      	b.n	80044f8 <lsm303agr_mag_data_rate_get+0x64>

    case LSM303AGR_MG_ODR_50Hz:
      *val = LSM303AGR_MG_ODR_50Hz;
 80044e0:	683b      	ldr	r3, [r7, #0]
 80044e2:	2202      	movs	r2, #2
 80044e4:	701a      	strb	r2, [r3, #0]
      break;
 80044e6:	e007      	b.n	80044f8 <lsm303agr_mag_data_rate_get+0x64>

    case LSM303AGR_MG_ODR_100Hz:
      *val = LSM303AGR_MG_ODR_100Hz;
 80044e8:	683b      	ldr	r3, [r7, #0]
 80044ea:	2203      	movs	r2, #3
 80044ec:	701a      	strb	r2, [r3, #0]
      break;
 80044ee:	e003      	b.n	80044f8 <lsm303agr_mag_data_rate_get+0x64>

    default:
      *val = LSM303AGR_MG_ODR_10Hz;
 80044f0:	683b      	ldr	r3, [r7, #0]
 80044f2:	2200      	movs	r2, #0
 80044f4:	701a      	strb	r2, [r3, #0]
      break;
 80044f6:	bf00      	nop
  }

  return ret;
 80044f8:	68fb      	ldr	r3, [r7, #12]
}
 80044fa:	4618      	mov	r0, r3
 80044fc:	3710      	adds	r7, #16
 80044fe:	46bd      	mov	sp, r7
 8004500:	bd80      	pop	{r7, pc}
 8004502:	bf00      	nop

08004504 <lsm303agr_mag_block_data_update_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_mag_block_data_update_set(stmdev_ctx_t *ctx,
                                            uint8_t val)
{
 8004504:	b580      	push	{r7, lr}
 8004506:	b084      	sub	sp, #16
 8004508:	af00      	add	r7, sp, #0
 800450a:	6078      	str	r0, [r7, #4]
 800450c:	460b      	mov	r3, r1
 800450e:	70fb      	strb	r3, [r7, #3]
  lsm303agr_cfg_reg_c_m_t cfg_reg_c_m;
  int32_t ret;

  ret = lsm303agr_read_reg(ctx, LSM303AGR_CFG_REG_C_M,
 8004510:	f107 0208 	add.w	r2, r7, #8
 8004514:	2301      	movs	r3, #1
 8004516:	2162      	movs	r1, #98	; 0x62
 8004518:	6878      	ldr	r0, [r7, #4]
 800451a:	f7ff fdb9 	bl	8004090 <lsm303agr_read_reg>
 800451e:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&cfg_reg_c_m, 1);

  if (ret == 0)
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	2b00      	cmp	r3, #0
 8004524:	d10f      	bne.n	8004546 <lsm303agr_mag_block_data_update_set+0x42>
  {
    cfg_reg_c_m.bdu = (uint8_t)val;
 8004526:	78fb      	ldrb	r3, [r7, #3]
 8004528:	f003 0301 	and.w	r3, r3, #1
 800452c:	b2da      	uxtb	r2, r3
 800452e:	7a3b      	ldrb	r3, [r7, #8]
 8004530:	f362 1304 	bfi	r3, r2, #4, #1
 8004534:	723b      	strb	r3, [r7, #8]
    ret = lsm303agr_write_reg(ctx, LSM303AGR_CFG_REG_C_M,
 8004536:	f107 0208 	add.w	r2, r7, #8
 800453a:	2301      	movs	r3, #1
 800453c:	2162      	movs	r1, #98	; 0x62
 800453e:	6878      	ldr	r0, [r7, #4]
 8004540:	f7ff fdbe 	bl	80040c0 <lsm303agr_write_reg>
 8004544:	60f8      	str	r0, [r7, #12]
                              (uint8_t *)&cfg_reg_c_m, 1);
  }

  return ret;
 8004546:	68fb      	ldr	r3, [r7, #12]
}
 8004548:	4618      	mov	r0, r3
 800454a:	3710      	adds	r7, #16
 800454c:	46bd      	mov	sp, r7
 800454e:	bd80      	pop	{r7, pc}

08004550 <lsm303agr_magnetic_raw_get>:
  * @param  buff   Buffer that stores data read.(ptr)
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_magnetic_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8004550:	b580      	push	{r7, lr}
 8004552:	b086      	sub	sp, #24
 8004554:	af00      	add	r7, sp, #0
 8004556:	6078      	str	r0, [r7, #4]
 8004558:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lsm303agr_read_reg(ctx, LSM303AGR_OUTX_L_REG_M, buff, 6);
 800455a:	f107 020c 	add.w	r2, r7, #12
 800455e:	2306      	movs	r3, #6
 8004560:	2168      	movs	r1, #104	; 0x68
 8004562:	6878      	ldr	r0, [r7, #4]
 8004564:	f7ff fd94 	bl	8004090 <lsm303agr_read_reg>
 8004568:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 800456a:	7b7b      	ldrb	r3, [r7, #13]
 800456c:	b21a      	sxth	r2, r3
 800456e:	683b      	ldr	r3, [r7, #0]
 8004570:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 8004572:	683b      	ldr	r3, [r7, #0]
 8004574:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004578:	b29b      	uxth	r3, r3
 800457a:	021b      	lsls	r3, r3, #8
 800457c:	b29a      	uxth	r2, r3
 800457e:	7b3b      	ldrb	r3, [r7, #12]
 8004580:	b29b      	uxth	r3, r3
 8004582:	4413      	add	r3, r2
 8004584:	b29b      	uxth	r3, r3
 8004586:	b21a      	sxth	r2, r3
 8004588:	683b      	ldr	r3, [r7, #0]
 800458a:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 800458c:	7bfa      	ldrb	r2, [r7, #15]
 800458e:	683b      	ldr	r3, [r7, #0]
 8004590:	3302      	adds	r3, #2
 8004592:	b212      	sxth	r2, r2
 8004594:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8004596:	683b      	ldr	r3, [r7, #0]
 8004598:	3302      	adds	r3, #2
 800459a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800459e:	b29b      	uxth	r3, r3
 80045a0:	021b      	lsls	r3, r3, #8
 80045a2:	b29a      	uxth	r2, r3
 80045a4:	7bbb      	ldrb	r3, [r7, #14]
 80045a6:	b29b      	uxth	r3, r3
 80045a8:	4413      	add	r3, r2
 80045aa:	b29a      	uxth	r2, r3
 80045ac:	683b      	ldr	r3, [r7, #0]
 80045ae:	3302      	adds	r3, #2
 80045b0:	b212      	sxth	r2, r2
 80045b2:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 80045b4:	7c7a      	ldrb	r2, [r7, #17]
 80045b6:	683b      	ldr	r3, [r7, #0]
 80045b8:	3304      	adds	r3, #4
 80045ba:	b212      	sxth	r2, r2
 80045bc:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 80045be:	683b      	ldr	r3, [r7, #0]
 80045c0:	3304      	adds	r3, #4
 80045c2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80045c6:	b29b      	uxth	r3, r3
 80045c8:	021b      	lsls	r3, r3, #8
 80045ca:	b29a      	uxth	r2, r3
 80045cc:	7c3b      	ldrb	r3, [r7, #16]
 80045ce:	b29b      	uxth	r3, r3
 80045d0:	4413      	add	r3, r2
 80045d2:	b29a      	uxth	r2, r3
 80045d4:	683b      	ldr	r3, [r7, #0]
 80045d6:	3304      	adds	r3, #4
 80045d8:	b212      	sxth	r2, r2
 80045da:	801a      	strh	r2, [r3, #0]

  return ret;
 80045dc:	697b      	ldr	r3, [r7, #20]
}
 80045de:	4618      	mov	r0, r3
 80045e0:	3718      	adds	r7, #24
 80045e2:	46bd      	mov	sp, r7
 80045e4:	bd80      	pop	{r7, pc}

080045e6 <lsm303agr_xl_device_id_get>:
  * @param  buff   Buffer that stores data read.(ptr)
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_xl_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 80045e6:	b580      	push	{r7, lr}
 80045e8:	b084      	sub	sp, #16
 80045ea:	af00      	add	r7, sp, #0
 80045ec:	6078      	str	r0, [r7, #4]
 80045ee:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lsm303agr_read_reg(ctx, LSM303AGR_WHO_AM_I_A, buff, 1);
 80045f0:	2301      	movs	r3, #1
 80045f2:	683a      	ldr	r2, [r7, #0]
 80045f4:	210f      	movs	r1, #15
 80045f6:	6878      	ldr	r0, [r7, #4]
 80045f8:	f7ff fd4a 	bl	8004090 <lsm303agr_read_reg>
 80045fc:	60f8      	str	r0, [r7, #12]

  return ret;
 80045fe:	68fb      	ldr	r3, [r7, #12]
}
 8004600:	4618      	mov	r0, r3
 8004602:	3710      	adds	r7, #16
 8004604:	46bd      	mov	sp, r7
 8004606:	bd80      	pop	{r7, pc}

08004608 <lsm303agr_mag_device_id_get>:
  * @param  buff   Buffer that stores data read.(ptr)
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_mag_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8004608:	b580      	push	{r7, lr}
 800460a:	b084      	sub	sp, #16
 800460c:	af00      	add	r7, sp, #0
 800460e:	6078      	str	r0, [r7, #4]
 8004610:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lsm303agr_read_reg(ctx, LSM303AGR_WHO_AM_I_M, buff, 1);
 8004612:	2301      	movs	r3, #1
 8004614:	683a      	ldr	r2, [r7, #0]
 8004616:	214f      	movs	r1, #79	; 0x4f
 8004618:	6878      	ldr	r0, [r7, #4]
 800461a:	f7ff fd39 	bl	8004090 <lsm303agr_read_reg>
 800461e:	60f8      	str	r0, [r7, #12]

  return ret;
 8004620:	68fb      	ldr	r3, [r7, #12]
}
 8004622:	4618      	mov	r0, r3
 8004624:	3710      	adds	r7, #16
 8004626:	46bd      	mov	sp, r7
 8004628:	bd80      	pop	{r7, pc}

0800462a <lsm303agr_mag_self_test_set>:
  * @param  val    Change the values of self_test in reg CFG_REG_C_M
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_mag_self_test_set(stmdev_ctx_t *ctx, uint8_t val)
{
 800462a:	b580      	push	{r7, lr}
 800462c:	b084      	sub	sp, #16
 800462e:	af00      	add	r7, sp, #0
 8004630:	6078      	str	r0, [r7, #4]
 8004632:	460b      	mov	r3, r1
 8004634:	70fb      	strb	r3, [r7, #3]
  lsm303agr_cfg_reg_c_m_t cfg_reg_c_m;
  int32_t ret;

  ret = lsm303agr_read_reg(ctx, LSM303AGR_CFG_REG_C_M,
 8004636:	f107 0208 	add.w	r2, r7, #8
 800463a:	2301      	movs	r3, #1
 800463c:	2162      	movs	r1, #98	; 0x62
 800463e:	6878      	ldr	r0, [r7, #4]
 8004640:	f7ff fd26 	bl	8004090 <lsm303agr_read_reg>
 8004644:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&cfg_reg_c_m, 1);

  if (ret == 0)
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	2b00      	cmp	r3, #0
 800464a:	d10f      	bne.n	800466c <lsm303agr_mag_self_test_set+0x42>
  {
    cfg_reg_c_m.self_test = (uint8_t)val;
 800464c:	78fb      	ldrb	r3, [r7, #3]
 800464e:	f003 0301 	and.w	r3, r3, #1
 8004652:	b2da      	uxtb	r2, r3
 8004654:	7a3b      	ldrb	r3, [r7, #8]
 8004656:	f362 0341 	bfi	r3, r2, #1, #1
 800465a:	723b      	strb	r3, [r7, #8]
    ret = lsm303agr_write_reg(ctx, LSM303AGR_CFG_REG_C_M,
 800465c:	f107 0208 	add.w	r2, r7, #8
 8004660:	2301      	movs	r3, #1
 8004662:	2162      	movs	r1, #98	; 0x62
 8004664:	6878      	ldr	r0, [r7, #4]
 8004666:	f7ff fd2b 	bl	80040c0 <lsm303agr_write_reg>
 800466a:	60f8      	str	r0, [r7, #12]
                              (uint8_t *)&cfg_reg_c_m, 1);
  }

  return ret;
 800466c:	68fb      	ldr	r3, [r7, #12]
}
 800466e:	4618      	mov	r0, r3
 8004670:	3710      	adds	r7, #16
 8004672:	46bd      	mov	sp, r7
 8004674:	bd80      	pop	{r7, pc}

08004676 <lsm303agr_xl_fifo_mode_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_xl_fifo_mode_set(stmdev_ctx_t *ctx,
                                   lsm303agr_fm_a_t val)
{
 8004676:	b580      	push	{r7, lr}
 8004678:	b084      	sub	sp, #16
 800467a:	af00      	add	r7, sp, #0
 800467c:	6078      	str	r0, [r7, #4]
 800467e:	460b      	mov	r3, r1
 8004680:	70fb      	strb	r3, [r7, #3]
  lsm303agr_fifo_ctrl_reg_a_t fifo_ctrl_reg_a;
  int32_t ret;

  ret = lsm303agr_read_reg(ctx, LSM303AGR_FIFO_CTRL_REG_A,
 8004682:	f107 0208 	add.w	r2, r7, #8
 8004686:	2301      	movs	r3, #1
 8004688:	212e      	movs	r1, #46	; 0x2e
 800468a:	6878      	ldr	r0, [r7, #4]
 800468c:	f7ff fd00 	bl	8004090 <lsm303agr_read_reg>
 8004690:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&fifo_ctrl_reg_a, 1);

  if (ret == 0)
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	2b00      	cmp	r3, #0
 8004696:	d10f      	bne.n	80046b8 <lsm303agr_xl_fifo_mode_set+0x42>
  {
    fifo_ctrl_reg_a.fm = (uint8_t)val;
 8004698:	78fb      	ldrb	r3, [r7, #3]
 800469a:	f003 0303 	and.w	r3, r3, #3
 800469e:	b2da      	uxtb	r2, r3
 80046a0:	7a3b      	ldrb	r3, [r7, #8]
 80046a2:	f362 1387 	bfi	r3, r2, #6, #2
 80046a6:	723b      	strb	r3, [r7, #8]
    ret = lsm303agr_write_reg(ctx, LSM303AGR_FIFO_CTRL_REG_A,
 80046a8:	f107 0208 	add.w	r2, r7, #8
 80046ac:	2301      	movs	r3, #1
 80046ae:	212e      	movs	r1, #46	; 0x2e
 80046b0:	6878      	ldr	r0, [r7, #4]
 80046b2:	f7ff fd05 	bl	80040c0 <lsm303agr_write_reg>
 80046b6:	60f8      	str	r0, [r7, #12]
                              (uint8_t *)&fifo_ctrl_reg_a, 1);
  }

  return ret;
 80046b8:	68fb      	ldr	r3, [r7, #12]
}
 80046ba:	4618      	mov	r0, r3
 80046bc:	3710      	adds	r7, #16
 80046be:	46bd      	mov	sp, r7
 80046c0:	bd80      	pop	{r7, pc}

080046c2 <lsm303agr_mag_i2c_interface_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_mag_i2c_interface_set(stmdev_ctx_t *ctx,
                                        lsm303agr_i2c_dis_m_t val)
{
 80046c2:	b580      	push	{r7, lr}
 80046c4:	b084      	sub	sp, #16
 80046c6:	af00      	add	r7, sp, #0
 80046c8:	6078      	str	r0, [r7, #4]
 80046ca:	460b      	mov	r3, r1
 80046cc:	70fb      	strb	r3, [r7, #3]
  lsm303agr_cfg_reg_c_m_t cfg_reg_c_m;
  int32_t ret;

  ret = lsm303agr_read_reg(ctx, LSM303AGR_CFG_REG_C_M,
 80046ce:	f107 0208 	add.w	r2, r7, #8
 80046d2:	2301      	movs	r3, #1
 80046d4:	2162      	movs	r1, #98	; 0x62
 80046d6:	6878      	ldr	r0, [r7, #4]
 80046d8:	f7ff fcda 	bl	8004090 <lsm303agr_read_reg>
 80046dc:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&cfg_reg_c_m, 1);

  if (ret == 0)
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d10f      	bne.n	8004704 <lsm303agr_mag_i2c_interface_set+0x42>
  {
    cfg_reg_c_m.i2c_dis = (uint8_t)val;
 80046e4:	78fb      	ldrb	r3, [r7, #3]
 80046e6:	f003 0301 	and.w	r3, r3, #1
 80046ea:	b2da      	uxtb	r2, r3
 80046ec:	7a3b      	ldrb	r3, [r7, #8]
 80046ee:	f362 1345 	bfi	r3, r2, #5, #1
 80046f2:	723b      	strb	r3, [r7, #8]
    ret = lsm303agr_write_reg(ctx, LSM303AGR_CFG_REG_C_M,
 80046f4:	f107 0208 	add.w	r2, r7, #8
 80046f8:	2301      	movs	r3, #1
 80046fa:	2162      	movs	r1, #98	; 0x62
 80046fc:	6878      	ldr	r0, [r7, #4]
 80046fe:	f7ff fcdf 	bl	80040c0 <lsm303agr_write_reg>
 8004702:	60f8      	str	r0, [r7, #12]
                              (uint8_t *)&cfg_reg_c_m, 1);
  }

  return ret;
 8004704:	68fb      	ldr	r3, [r7, #12]
}
 8004706:	4618      	mov	r0, r3
 8004708:	3710      	adds	r7, #16
 800470a:	46bd      	mov	sp, r7
 800470c:	bd80      	pop	{r7, pc}
	...

08004710 <LSM6DSL_RegisterBusIO>:
  * @brief  Register Component Bus IO operations
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSL_RegisterBusIO(LSM6DSL_Object_t *pObj, LSM6DSL_IO_t *pIO)
{
 8004710:	b580      	push	{r7, lr}
 8004712:	b084      	sub	sp, #16
 8004714:	af00      	add	r7, sp, #0
 8004716:	6078      	str	r0, [r7, #4]
 8004718:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSL_OK;
 800471a:	2300      	movs	r3, #0
 800471c:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	2b00      	cmp	r3, #0
 8004722:	d103      	bne.n	800472c <LSM6DSL_RegisterBusIO+0x1c>
  {
    ret = LSM6DSL_ERROR;
 8004724:	f04f 33ff 	mov.w	r3, #4294967295
 8004728:	60fb      	str	r3, [r7, #12]
 800472a:	e051      	b.n	80047d0 <LSM6DSL_RegisterBusIO+0xc0>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 800472c:	683b      	ldr	r3, [r7, #0]
 800472e:	681a      	ldr	r2, [r3, #0]
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8004734:	683b      	ldr	r3, [r7, #0]
 8004736:	685a      	ldr	r2, [r3, #4]
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 800473c:	683b      	ldr	r3, [r7, #0]
 800473e:	689a      	ldr	r2, [r3, #8]
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 8004744:	683b      	ldr	r3, [r7, #0]
 8004746:	7b1a      	ldrb	r2, [r3, #12]
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 800474c:	683b      	ldr	r3, [r7, #0]
 800474e:	691a      	ldr	r2, [r3, #16]
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8004754:	683b      	ldr	r3, [r7, #0]
 8004756:	695a      	ldr	r2, [r3, #20]
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 800475c:	683b      	ldr	r3, [r7, #0]
 800475e:	699a      	ldr	r2, [r3, #24]
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadRegWrap;
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	4a1d      	ldr	r2, [pc, #116]	; (80047dc <LSM6DSL_RegisterBusIO+0xcc>)
 8004768:	625a      	str	r2, [r3, #36]	; 0x24
    pObj->Ctx.write_reg = WriteRegWrap;
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	4a1c      	ldr	r2, [pc, #112]	; (80047e0 <LSM6DSL_RegisterBusIO+0xd0>)
 800476e:	621a      	str	r2, [r3, #32]
    pObj->Ctx.mdelay    = pIO->Delay;
 8004770:	683b      	ldr	r3, [r7, #0]
 8004772:	69da      	ldr	r2, [r3, #28]
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	629a      	str	r2, [r3, #40]	; 0x28
    pObj->Ctx.handle   = pObj;
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	687a      	ldr	r2, [r7, #4]
 800477c:	62da      	str	r2, [r3, #44]	; 0x2c

    if (pObj->IO.Init == NULL)
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	2b00      	cmp	r3, #0
 8004784:	d103      	bne.n	800478e <LSM6DSL_RegisterBusIO+0x7e>
    {
      ret = LSM6DSL_ERROR;
 8004786:	f04f 33ff 	mov.w	r3, #4294967295
 800478a:	60fb      	str	r3, [r7, #12]
 800478c:	e020      	b.n	80047d0 <LSM6DSL_RegisterBusIO+0xc0>
    }
    else if (pObj->IO.Init() != LSM6DSL_OK)
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	4798      	blx	r3
 8004794:	4603      	mov	r3, r0
 8004796:	2b00      	cmp	r3, #0
 8004798:	d003      	beq.n	80047a2 <LSM6DSL_RegisterBusIO+0x92>
    {
      ret = LSM6DSL_ERROR;
 800479a:	f04f 33ff 	mov.w	r3, #4294967295
 800479e:	60fb      	str	r3, [r7, #12]
 80047a0:	e016      	b.n	80047d0 <LSM6DSL_RegisterBusIO+0xc0>
    }
    else
    {
      if (pObj->IO.BusType == LSM6DSL_SPI_3WIRES_BUS) /* SPI 3-Wires */
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	689b      	ldr	r3, [r3, #8]
 80047a6:	2b02      	cmp	r3, #2
 80047a8:	d112      	bne.n	80047d0 <LSM6DSL_RegisterBusIO+0xc0>
      {
        /* Enable the SPI 3-Wires support only the first time */
        if (pObj->is_initialized == 0U)
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d10d      	bne.n	80047d0 <LSM6DSL_RegisterBusIO+0xc0>
        {
          /* Enable SPI 3-Wires on the component */
          uint8_t data = 0x0C;
 80047b4:	230c      	movs	r3, #12
 80047b6:	72fb      	strb	r3, [r7, #11]

          if (LSM6DSL_Write_Reg(pObj, LSM6DSL_CTRL3_C, data) != LSM6DSL_OK)
 80047b8:	7afb      	ldrb	r3, [r7, #11]
 80047ba:	461a      	mov	r2, r3
 80047bc:	2112      	movs	r1, #18
 80047be:	6878      	ldr	r0, [r7, #4]
 80047c0:	f000 fd2d 	bl	800521e <LSM6DSL_Write_Reg>
 80047c4:	4603      	mov	r3, r0
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d002      	beq.n	80047d0 <LSM6DSL_RegisterBusIO+0xc0>
          {
            ret = LSM6DSL_ERROR;
 80047ca:	f04f 33ff 	mov.w	r3, #4294967295
 80047ce:	60fb      	str	r3, [r7, #12]
        }
      }
    }
  }

  return ret;
 80047d0:	68fb      	ldr	r3, [r7, #12]
}
 80047d2:	4618      	mov	r0, r3
 80047d4:	3710      	adds	r7, #16
 80047d6:	46bd      	mov	sp, r7
 80047d8:	bd80      	pop	{r7, pc}
 80047da:	bf00      	nop
 80047dc:	0800568d 	.word	0x0800568d
 80047e0:	080056c3 	.word	0x080056c3

080047e4 <LSM6DSL_Init>:
  * @brief  Initialize the LSM6DSL sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSL_Init(LSM6DSL_Object_t *pObj)
{
 80047e4:	b580      	push	{r7, lr}
 80047e6:	b082      	sub	sp, #8
 80047e8:	af00      	add	r7, sp, #0
 80047ea:	6078      	str	r0, [r7, #4]
  /* Enable register address automatically incremented during a multiple byte
  access with a serial interface. */
  if (lsm6dsl_auto_increment_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM6DSL_OK)
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	3320      	adds	r3, #32
 80047f0:	2101      	movs	r1, #1
 80047f2:	4618      	mov	r0, r3
 80047f4:	f001 fa59 	bl	8005caa <lsm6dsl_auto_increment_set>
 80047f8:	4603      	mov	r3, r0
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d002      	beq.n	8004804 <LSM6DSL_Init+0x20>
  {
    return LSM6DSL_ERROR;
 80047fe:	f04f 33ff 	mov.w	r3, #4294967295
 8004802:	e054      	b.n	80048ae <LSM6DSL_Init+0xca>
  }

  /* Enable BDU */
  if (lsm6dsl_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM6DSL_OK)
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	3320      	adds	r3, #32
 8004808:	2101      	movs	r1, #1
 800480a:	4618      	mov	r0, r3
 800480c:	f001 f980 	bl	8005b10 <lsm6dsl_block_data_update_set>
 8004810:	4603      	mov	r3, r0
 8004812:	2b00      	cmp	r3, #0
 8004814:	d002      	beq.n	800481c <LSM6DSL_Init+0x38>
  {
    return LSM6DSL_ERROR;
 8004816:	f04f 33ff 	mov.w	r3, #4294967295
 800481a:	e048      	b.n	80048ae <LSM6DSL_Init+0xca>
  }

  /* FIFO mode selection */
  if (lsm6dsl_fifo_mode_set(&(pObj->Ctx), LSM6DSL_BYPASS_MODE) != LSM6DSL_OK)
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	3320      	adds	r3, #32
 8004820:	2100      	movs	r1, #0
 8004822:	4618      	mov	r0, r3
 8004824:	f001 fa67 	bl	8005cf6 <lsm6dsl_fifo_mode_set>
 8004828:	4603      	mov	r3, r0
 800482a:	2b00      	cmp	r3, #0
 800482c:	d002      	beq.n	8004834 <LSM6DSL_Init+0x50>
  {
    return LSM6DSL_ERROR;
 800482e:	f04f 33ff 	mov.w	r3, #4294967295
 8004832:	e03c      	b.n	80048ae <LSM6DSL_Init+0xca>
  }

  /* Select default output data rate. */
  pObj->acc_odr = LSM6DSL_XL_ODR_104Hz;
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	2204      	movs	r2, #4
 8004838:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33

  /* Output data rate selection - power down. */
  if (lsm6dsl_xl_data_rate_set(&(pObj->Ctx), LSM6DSL_XL_ODR_OFF) != LSM6DSL_OK)
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	3320      	adds	r3, #32
 8004840:	2100      	movs	r1, #0
 8004842:	4618      	mov	r0, r3
 8004844:	f000 ffe6 	bl	8005814 <lsm6dsl_xl_data_rate_set>
 8004848:	4603      	mov	r3, r0
 800484a:	2b00      	cmp	r3, #0
 800484c:	d002      	beq.n	8004854 <LSM6DSL_Init+0x70>
  {
    return LSM6DSL_ERROR;
 800484e:	f04f 33ff 	mov.w	r3, #4294967295
 8004852:	e02c      	b.n	80048ae <LSM6DSL_Init+0xca>
  }

  /* Full scale selection. */
  if (lsm6dsl_xl_full_scale_set(&(pObj->Ctx), LSM6DSL_2g) != LSM6DSL_OK)
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	3320      	adds	r3, #32
 8004858:	2100      	movs	r1, #0
 800485a:	4618      	mov	r0, r3
 800485c:	f000 ff7c 	bl	8005758 <lsm6dsl_xl_full_scale_set>
 8004860:	4603      	mov	r3, r0
 8004862:	2b00      	cmp	r3, #0
 8004864:	d002      	beq.n	800486c <LSM6DSL_Init+0x88>
  {
    return LSM6DSL_ERROR;
 8004866:	f04f 33ff 	mov.w	r3, #4294967295
 800486a:	e020      	b.n	80048ae <LSM6DSL_Init+0xca>
  }

  /* Select default output data rate. */
  pObj->gyro_odr = LSM6DSL_GY_ODR_104Hz;
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	2204      	movs	r2, #4
 8004870:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Output data rate selection - power down. */
  if (lsm6dsl_gy_data_rate_set(&(pObj->Ctx), LSM6DSL_GY_ODR_OFF) != LSM6DSL_OK)
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	3320      	adds	r3, #32
 8004878:	2100      	movs	r1, #0
 800487a:	4618      	mov	r0, r3
 800487c:	f001 f8c0 	bl	8005a00 <lsm6dsl_gy_data_rate_set>
 8004880:	4603      	mov	r3, r0
 8004882:	2b00      	cmp	r3, #0
 8004884:	d002      	beq.n	800488c <LSM6DSL_Init+0xa8>
  {
    return LSM6DSL_ERROR;
 8004886:	f04f 33ff 	mov.w	r3, #4294967295
 800488a:	e010      	b.n	80048ae <LSM6DSL_Init+0xca>
  }

  /* Full scale selection. */
  if (lsm6dsl_gy_full_scale_set(&(pObj->Ctx), LSM6DSL_2000dps) != LSM6DSL_OK)
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	3320      	adds	r3, #32
 8004890:	2106      	movs	r1, #6
 8004892:	4618      	mov	r0, r3
 8004894:	f001 f84c 	bl	8005930 <lsm6dsl_gy_full_scale_set>
 8004898:	4603      	mov	r3, r0
 800489a:	2b00      	cmp	r3, #0
 800489c:	d002      	beq.n	80048a4 <LSM6DSL_Init+0xc0>
  {
    return LSM6DSL_ERROR;
 800489e:	f04f 33ff 	mov.w	r3, #4294967295
 80048a2:	e004      	b.n	80048ae <LSM6DSL_Init+0xca>
  }

  pObj->is_initialized = 1;
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	2201      	movs	r2, #1
 80048a8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return LSM6DSL_OK;
 80048ac:	2300      	movs	r3, #0
}
 80048ae:	4618      	mov	r0, r3
 80048b0:	3708      	adds	r7, #8
 80048b2:	46bd      	mov	sp, r7
 80048b4:	bd80      	pop	{r7, pc}

080048b6 <LSM6DSL_DeInit>:
  * @brief  Deinitialize the LSM6DSL sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSL_DeInit(LSM6DSL_Object_t *pObj)
{
 80048b6:	b580      	push	{r7, lr}
 80048b8:	b082      	sub	sp, #8
 80048ba:	af00      	add	r7, sp, #0
 80048bc:	6078      	str	r0, [r7, #4]
  /* Disable the component */
  if (LSM6DSL_ACC_Disable(pObj) != LSM6DSL_OK)
 80048be:	6878      	ldr	r0, [r7, #4]
 80048c0:	f000 f888 	bl	80049d4 <LSM6DSL_ACC_Disable>
 80048c4:	4603      	mov	r3, r0
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d002      	beq.n	80048d0 <LSM6DSL_DeInit+0x1a>
  {
    return LSM6DSL_ERROR;
 80048ca:	f04f 33ff 	mov.w	r3, #4294967295
 80048ce:	e015      	b.n	80048fc <LSM6DSL_DeInit+0x46>
  }

  if (LSM6DSL_GYRO_Disable(pObj) != LSM6DSL_OK)
 80048d0:	6878      	ldr	r0, [r7, #4]
 80048d2:	f000 fa9a 	bl	8004e0a <LSM6DSL_GYRO_Disable>
 80048d6:	4603      	mov	r3, r0
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d002      	beq.n	80048e2 <LSM6DSL_DeInit+0x2c>
  {
    return LSM6DSL_ERROR;
 80048dc:	f04f 33ff 	mov.w	r3, #4294967295
 80048e0:	e00c      	b.n	80048fc <LSM6DSL_DeInit+0x46>
  }

  /* Reset output data rate. */
  pObj->acc_odr = LSM6DSL_XL_ODR_OFF;
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	2200      	movs	r2, #0
 80048e6:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
  pObj->gyro_odr = LSM6DSL_GY_ODR_OFF;
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	2200      	movs	r2, #0
 80048ee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  pObj->is_initialized = 0;
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	2200      	movs	r2, #0
 80048f6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return LSM6DSL_OK;
 80048fa:	2300      	movs	r3, #0
}
 80048fc:	4618      	mov	r0, r3
 80048fe:	3708      	adds	r7, #8
 8004900:	46bd      	mov	sp, r7
 8004902:	bd80      	pop	{r7, pc}

08004904 <LSM6DSL_ReadID>:
  * @param  pObj the device pObj
  * @param  Id the WHO_AM_I value
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSL_ReadID(LSM6DSL_Object_t *pObj, uint8_t *Id)
{
 8004904:	b580      	push	{r7, lr}
 8004906:	b082      	sub	sp, #8
 8004908:	af00      	add	r7, sp, #0
 800490a:	6078      	str	r0, [r7, #4]
 800490c:	6039      	str	r1, [r7, #0]
  if (lsm6dsl_device_id_get(&(pObj->Ctx), Id) != LSM6DSL_OK)
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	3320      	adds	r3, #32
 8004912:	6839      	ldr	r1, [r7, #0]
 8004914:	4618      	mov	r0, r3
 8004916:	f001 f9b7 	bl	8005c88 <lsm6dsl_device_id_get>
 800491a:	4603      	mov	r3, r0
 800491c:	2b00      	cmp	r3, #0
 800491e:	d002      	beq.n	8004926 <LSM6DSL_ReadID+0x22>
  {
    return LSM6DSL_ERROR;
 8004920:	f04f 33ff 	mov.w	r3, #4294967295
 8004924:	e000      	b.n	8004928 <LSM6DSL_ReadID+0x24>
  }

  return LSM6DSL_OK;
 8004926:	2300      	movs	r3, #0
}
 8004928:	4618      	mov	r0, r3
 800492a:	3708      	adds	r7, #8
 800492c:	46bd      	mov	sp, r7
 800492e:	bd80      	pop	{r7, pc}

08004930 <LSM6DSL_GetCapabilities>:
  * @param  pObj Component object pointer
  * @param  Capabilities pointer to LSM6DSL sensor capabilities
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSL_GetCapabilities(LSM6DSL_Object_t *pObj, LSM6DSL_Capabilities_t *Capabilities)
{
 8004930:	b480      	push	{r7}
 8004932:	b083      	sub	sp, #12
 8004934:	af00      	add	r7, sp, #0
 8004936:	6078      	str	r0, [r7, #4]
 8004938:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Acc          = 1;
 800493a:	683b      	ldr	r3, [r7, #0]
 800493c:	2201      	movs	r2, #1
 800493e:	701a      	strb	r2, [r3, #0]
  Capabilities->Gyro         = 1;
 8004940:	683b      	ldr	r3, [r7, #0]
 8004942:	2201      	movs	r2, #1
 8004944:	705a      	strb	r2, [r3, #1]
  Capabilities->Magneto      = 0;
 8004946:	683b      	ldr	r3, [r7, #0]
 8004948:	2200      	movs	r2, #0
 800494a:	709a      	strb	r2, [r3, #2]
  Capabilities->LowPower     = 0;
 800494c:	683b      	ldr	r3, [r7, #0]
 800494e:	2200      	movs	r2, #0
 8004950:	70da      	strb	r2, [r3, #3]
  Capabilities->GyroMaxFS    = 2000;
 8004952:	683b      	ldr	r3, [r7, #0]
 8004954:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8004958:	605a      	str	r2, [r3, #4]
  Capabilities->AccMaxFS     = 16;
 800495a:	683b      	ldr	r3, [r7, #0]
 800495c:	2210      	movs	r2, #16
 800495e:	609a      	str	r2, [r3, #8]
  Capabilities->MagMaxFS     = 0;
 8004960:	683b      	ldr	r3, [r7, #0]
 8004962:	2200      	movs	r2, #0
 8004964:	60da      	str	r2, [r3, #12]
  Capabilities->GyroMaxOdr   = 6660.0f;
 8004966:	683b      	ldr	r3, [r7, #0]
 8004968:	4a07      	ldr	r2, [pc, #28]	; (8004988 <LSM6DSL_GetCapabilities+0x58>)
 800496a:	611a      	str	r2, [r3, #16]
  Capabilities->AccMaxOdr    = 6660.0f;
 800496c:	683b      	ldr	r3, [r7, #0]
 800496e:	4a06      	ldr	r2, [pc, #24]	; (8004988 <LSM6DSL_GetCapabilities+0x58>)
 8004970:	615a      	str	r2, [r3, #20]
  Capabilities->MagMaxOdr    = 0.0f;
 8004972:	683b      	ldr	r3, [r7, #0]
 8004974:	f04f 0200 	mov.w	r2, #0
 8004978:	619a      	str	r2, [r3, #24]
  return LSM6DSL_OK;
 800497a:	2300      	movs	r3, #0
}
 800497c:	4618      	mov	r0, r3
 800497e:	370c      	adds	r7, #12
 8004980:	46bd      	mov	sp, r7
 8004982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004986:	4770      	bx	lr
 8004988:	45d02000 	.word	0x45d02000

0800498c <LSM6DSL_ACC_Enable>:
  * @brief  Enable the LSM6DSL accelerometer sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSL_ACC_Enable(LSM6DSL_Object_t *pObj)
{
 800498c:	b580      	push	{r7, lr}
 800498e:	b082      	sub	sp, #8
 8004990:	af00      	add	r7, sp, #0
 8004992:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->acc_is_enabled == 1U)
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800499a:	2b01      	cmp	r3, #1
 800499c:	d101      	bne.n	80049a2 <LSM6DSL_ACC_Enable+0x16>
  {
    return LSM6DSL_OK;
 800499e:	2300      	movs	r3, #0
 80049a0:	e014      	b.n	80049cc <LSM6DSL_ACC_Enable+0x40>
  }

  /* Output data rate selection. */
  if (lsm6dsl_xl_data_rate_set(&(pObj->Ctx), pObj->acc_odr) != LSM6DSL_OK)
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	f103 0220 	add.w	r2, r3, #32
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 80049ae:	4619      	mov	r1, r3
 80049b0:	4610      	mov	r0, r2
 80049b2:	f000 ff2f 	bl	8005814 <lsm6dsl_xl_data_rate_set>
 80049b6:	4603      	mov	r3, r0
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d002      	beq.n	80049c2 <LSM6DSL_ACC_Enable+0x36>
  {
    return LSM6DSL_ERROR;
 80049bc:	f04f 33ff 	mov.w	r3, #4294967295
 80049c0:	e004      	b.n	80049cc <LSM6DSL_ACC_Enable+0x40>
  }

  pObj->acc_is_enabled = 1;
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	2201      	movs	r2, #1
 80049c6:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  return LSM6DSL_OK;
 80049ca:	2300      	movs	r3, #0
}
 80049cc:	4618      	mov	r0, r3
 80049ce:	3708      	adds	r7, #8
 80049d0:	46bd      	mov	sp, r7
 80049d2:	bd80      	pop	{r7, pc}

080049d4 <LSM6DSL_ACC_Disable>:
  * @brief  Disable the LSM6DSL accelerometer sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSL_ACC_Disable(LSM6DSL_Object_t *pObj)
{
 80049d4:	b580      	push	{r7, lr}
 80049d6:	b082      	sub	sp, #8
 80049d8:	af00      	add	r7, sp, #0
 80049da:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->acc_is_enabled == 0U)
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d101      	bne.n	80049ea <LSM6DSL_ACC_Disable+0x16>
  {
    return LSM6DSL_OK;
 80049e6:	2300      	movs	r3, #0
 80049e8:	e01f      	b.n	8004a2a <LSM6DSL_ACC_Disable+0x56>
  }

  /* Get current output data rate. */
  if (lsm6dsl_xl_data_rate_get(&(pObj->Ctx), &pObj->acc_odr) != LSM6DSL_OK)
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	f103 0220 	add.w	r2, r3, #32
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	3333      	adds	r3, #51	; 0x33
 80049f4:	4619      	mov	r1, r3
 80049f6:	4610      	mov	r0, r2
 80049f8:	f000 ff32 	bl	8005860 <lsm6dsl_xl_data_rate_get>
 80049fc:	4603      	mov	r3, r0
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d002      	beq.n	8004a08 <LSM6DSL_ACC_Disable+0x34>
  {
    return LSM6DSL_ERROR;
 8004a02:	f04f 33ff 	mov.w	r3, #4294967295
 8004a06:	e010      	b.n	8004a2a <LSM6DSL_ACC_Disable+0x56>
  }

  /* Output data rate selection - power down. */
  if (lsm6dsl_xl_data_rate_set(&(pObj->Ctx), LSM6DSL_XL_ODR_OFF) != LSM6DSL_OK)
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	3320      	adds	r3, #32
 8004a0c:	2100      	movs	r1, #0
 8004a0e:	4618      	mov	r0, r3
 8004a10:	f000 ff00 	bl	8005814 <lsm6dsl_xl_data_rate_set>
 8004a14:	4603      	mov	r3, r0
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d002      	beq.n	8004a20 <LSM6DSL_ACC_Disable+0x4c>
  {
    return LSM6DSL_ERROR;
 8004a1a:	f04f 33ff 	mov.w	r3, #4294967295
 8004a1e:	e004      	b.n	8004a2a <LSM6DSL_ACC_Disable+0x56>
  }

  pObj->acc_is_enabled = 0;
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	2200      	movs	r2, #0
 8004a24:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  return LSM6DSL_OK;
 8004a28:	2300      	movs	r3, #0
}
 8004a2a:	4618      	mov	r0, r3
 8004a2c:	3708      	adds	r7, #8
 8004a2e:	46bd      	mov	sp, r7
 8004a30:	bd80      	pop	{r7, pc}
	...

08004a34 <LSM6DSL_ACC_GetSensitivity>:
  * @param  pObj the device pObj
  * @param  Sensitivity pointer
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSL_ACC_GetSensitivity(LSM6DSL_Object_t *pObj, float *Sensitivity)
{
 8004a34:	b580      	push	{r7, lr}
 8004a36:	b084      	sub	sp, #16
 8004a38:	af00      	add	r7, sp, #0
 8004a3a:	6078      	str	r0, [r7, #4]
 8004a3c:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSL_OK;
 8004a3e:	2300      	movs	r3, #0
 8004a40:	60fb      	str	r3, [r7, #12]
  lsm6dsl_fs_xl_t full_scale;

  /* Read actual full scale selection from sensor. */
  if (lsm6dsl_xl_full_scale_get(&(pObj->Ctx), &full_scale) != LSM6DSL_OK)
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	3320      	adds	r3, #32
 8004a46:	f107 020b 	add.w	r2, r7, #11
 8004a4a:	4611      	mov	r1, r2
 8004a4c:	4618      	mov	r0, r3
 8004a4e:	f000 fea9 	bl	80057a4 <lsm6dsl_xl_full_scale_get>
 8004a52:	4603      	mov	r3, r0
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d002      	beq.n	8004a5e <LSM6DSL_ACC_GetSensitivity+0x2a>
  {
    return LSM6DSL_ERROR;
 8004a58:	f04f 33ff 	mov.w	r3, #4294967295
 8004a5c:	e023      	b.n	8004aa6 <LSM6DSL_ACC_GetSensitivity+0x72>
  }

  /* Store the Sensitivity based on actual full scale. */
  switch (full_scale)
 8004a5e:	7afb      	ldrb	r3, [r7, #11]
 8004a60:	2b03      	cmp	r3, #3
 8004a62:	d81b      	bhi.n	8004a9c <LSM6DSL_ACC_GetSensitivity+0x68>
 8004a64:	a201      	add	r2, pc, #4	; (adr r2, 8004a6c <LSM6DSL_ACC_GetSensitivity+0x38>)
 8004a66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a6a:	bf00      	nop
 8004a6c:	08004a7d 	.word	0x08004a7d
 8004a70:	08004a95 	.word	0x08004a95
 8004a74:	08004a85 	.word	0x08004a85
 8004a78:	08004a8d 	.word	0x08004a8d
  {
    case LSM6DSL_2g:
      *Sensitivity = LSM6DSL_ACC_SENSITIVITY_FS_2G;
 8004a7c:	683b      	ldr	r3, [r7, #0]
 8004a7e:	4a0c      	ldr	r2, [pc, #48]	; (8004ab0 <LSM6DSL_ACC_GetSensitivity+0x7c>)
 8004a80:	601a      	str	r2, [r3, #0]
      break;
 8004a82:	e00f      	b.n	8004aa4 <LSM6DSL_ACC_GetSensitivity+0x70>

    case LSM6DSL_4g:
      *Sensitivity = LSM6DSL_ACC_SENSITIVITY_FS_4G;
 8004a84:	683b      	ldr	r3, [r7, #0]
 8004a86:	4a0b      	ldr	r2, [pc, #44]	; (8004ab4 <LSM6DSL_ACC_GetSensitivity+0x80>)
 8004a88:	601a      	str	r2, [r3, #0]
      break;
 8004a8a:	e00b      	b.n	8004aa4 <LSM6DSL_ACC_GetSensitivity+0x70>

    case LSM6DSL_8g:
      *Sensitivity = LSM6DSL_ACC_SENSITIVITY_FS_8G;
 8004a8c:	683b      	ldr	r3, [r7, #0]
 8004a8e:	4a0a      	ldr	r2, [pc, #40]	; (8004ab8 <LSM6DSL_ACC_GetSensitivity+0x84>)
 8004a90:	601a      	str	r2, [r3, #0]
      break;
 8004a92:	e007      	b.n	8004aa4 <LSM6DSL_ACC_GetSensitivity+0x70>

    case LSM6DSL_16g:
      *Sensitivity = LSM6DSL_ACC_SENSITIVITY_FS_16G;
 8004a94:	683b      	ldr	r3, [r7, #0]
 8004a96:	4a09      	ldr	r2, [pc, #36]	; (8004abc <LSM6DSL_ACC_GetSensitivity+0x88>)
 8004a98:	601a      	str	r2, [r3, #0]
      break;
 8004a9a:	e003      	b.n	8004aa4 <LSM6DSL_ACC_GetSensitivity+0x70>

    default:
      ret = LSM6DSL_ERROR;
 8004a9c:	f04f 33ff 	mov.w	r3, #4294967295
 8004aa0:	60fb      	str	r3, [r7, #12]
      break;
 8004aa2:	bf00      	nop
  }

  return ret;
 8004aa4:	68fb      	ldr	r3, [r7, #12]
}
 8004aa6:	4618      	mov	r0, r3
 8004aa8:	3710      	adds	r7, #16
 8004aaa:	46bd      	mov	sp, r7
 8004aac:	bd80      	pop	{r7, pc}
 8004aae:	bf00      	nop
 8004ab0:	3d79db23 	.word	0x3d79db23
 8004ab4:	3df9db23 	.word	0x3df9db23
 8004ab8:	3e79db23 	.word	0x3e79db23
 8004abc:	3ef9db23 	.word	0x3ef9db23

08004ac0 <LSM6DSL_ACC_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSL_ACC_GetOutputDataRate(LSM6DSL_Object_t *pObj, float *Odr)
{
 8004ac0:	b580      	push	{r7, lr}
 8004ac2:	b084      	sub	sp, #16
 8004ac4:	af00      	add	r7, sp, #0
 8004ac6:	6078      	str	r0, [r7, #4]
 8004ac8:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSL_OK;
 8004aca:	2300      	movs	r3, #0
 8004acc:	60fb      	str	r3, [r7, #12]
  lsm6dsl_odr_xl_t odr_low_level;

  /* Get current output data rate. */
  if (lsm6dsl_xl_data_rate_get(&(pObj->Ctx), &odr_low_level) != LSM6DSL_OK)
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	3320      	adds	r3, #32
 8004ad2:	f107 020b 	add.w	r2, r7, #11
 8004ad6:	4611      	mov	r1, r2
 8004ad8:	4618      	mov	r0, r3
 8004ada:	f000 fec1 	bl	8005860 <lsm6dsl_xl_data_rate_get>
 8004ade:	4603      	mov	r3, r0
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d002      	beq.n	8004aea <LSM6DSL_ACC_GetOutputDataRate+0x2a>
  {
    return LSM6DSL_ERROR;
 8004ae4:	f04f 33ff 	mov.w	r3, #4294967295
 8004ae8:	e054      	b.n	8004b94 <LSM6DSL_ACC_GetOutputDataRate+0xd4>
  }

  switch (odr_low_level)
 8004aea:	7afb      	ldrb	r3, [r7, #11]
 8004aec:	2b0b      	cmp	r3, #11
 8004aee:	d84c      	bhi.n	8004b8a <LSM6DSL_ACC_GetOutputDataRate+0xca>
 8004af0:	a201      	add	r2, pc, #4	; (adr r2, 8004af8 <LSM6DSL_ACC_GetOutputDataRate+0x38>)
 8004af2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004af6:	bf00      	nop
 8004af8:	08004b29 	.word	0x08004b29
 8004afc:	08004b3b 	.word	0x08004b3b
 8004b00:	08004b43 	.word	0x08004b43
 8004b04:	08004b4b 	.word	0x08004b4b
 8004b08:	08004b53 	.word	0x08004b53
 8004b0c:	08004b5b 	.word	0x08004b5b
 8004b10:	08004b63 	.word	0x08004b63
 8004b14:	08004b6b 	.word	0x08004b6b
 8004b18:	08004b73 	.word	0x08004b73
 8004b1c:	08004b7b 	.word	0x08004b7b
 8004b20:	08004b83 	.word	0x08004b83
 8004b24:	08004b33 	.word	0x08004b33
  {
    case LSM6DSL_XL_ODR_OFF:
      *Odr = 0.0f;
 8004b28:	683b      	ldr	r3, [r7, #0]
 8004b2a:	f04f 0200 	mov.w	r2, #0
 8004b2e:	601a      	str	r2, [r3, #0]
      break;
 8004b30:	e02f      	b.n	8004b92 <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    case LSM6DSL_XL_ODR_1Hz6:
      *Odr = 1.6f;
 8004b32:	683b      	ldr	r3, [r7, #0]
 8004b34:	4a19      	ldr	r2, [pc, #100]	; (8004b9c <LSM6DSL_ACC_GetOutputDataRate+0xdc>)
 8004b36:	601a      	str	r2, [r3, #0]
      break;
 8004b38:	e02b      	b.n	8004b92 <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    case LSM6DSL_XL_ODR_12Hz5:
      *Odr = 12.5f;
 8004b3a:	683b      	ldr	r3, [r7, #0]
 8004b3c:	4a18      	ldr	r2, [pc, #96]	; (8004ba0 <LSM6DSL_ACC_GetOutputDataRate+0xe0>)
 8004b3e:	601a      	str	r2, [r3, #0]
      break;
 8004b40:	e027      	b.n	8004b92 <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    case LSM6DSL_XL_ODR_26Hz:
      *Odr = 26.0f;
 8004b42:	683b      	ldr	r3, [r7, #0]
 8004b44:	4a17      	ldr	r2, [pc, #92]	; (8004ba4 <LSM6DSL_ACC_GetOutputDataRate+0xe4>)
 8004b46:	601a      	str	r2, [r3, #0]
      break;
 8004b48:	e023      	b.n	8004b92 <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    case LSM6DSL_XL_ODR_52Hz:
      *Odr = 52.0f;
 8004b4a:	683b      	ldr	r3, [r7, #0]
 8004b4c:	4a16      	ldr	r2, [pc, #88]	; (8004ba8 <LSM6DSL_ACC_GetOutputDataRate+0xe8>)
 8004b4e:	601a      	str	r2, [r3, #0]
      break;
 8004b50:	e01f      	b.n	8004b92 <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    case LSM6DSL_XL_ODR_104Hz:
      *Odr = 104.0f;
 8004b52:	683b      	ldr	r3, [r7, #0]
 8004b54:	4a15      	ldr	r2, [pc, #84]	; (8004bac <LSM6DSL_ACC_GetOutputDataRate+0xec>)
 8004b56:	601a      	str	r2, [r3, #0]
      break;
 8004b58:	e01b      	b.n	8004b92 <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    case LSM6DSL_XL_ODR_208Hz:
      *Odr = 208.0f;
 8004b5a:	683b      	ldr	r3, [r7, #0]
 8004b5c:	4a14      	ldr	r2, [pc, #80]	; (8004bb0 <LSM6DSL_ACC_GetOutputDataRate+0xf0>)
 8004b5e:	601a      	str	r2, [r3, #0]
      break;
 8004b60:	e017      	b.n	8004b92 <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    case LSM6DSL_XL_ODR_416Hz:
      *Odr = 416.0f;
 8004b62:	683b      	ldr	r3, [r7, #0]
 8004b64:	4a13      	ldr	r2, [pc, #76]	; (8004bb4 <LSM6DSL_ACC_GetOutputDataRate+0xf4>)
 8004b66:	601a      	str	r2, [r3, #0]
      break;
 8004b68:	e013      	b.n	8004b92 <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    case LSM6DSL_XL_ODR_833Hz:
      *Odr = 833.0f;
 8004b6a:	683b      	ldr	r3, [r7, #0]
 8004b6c:	4a12      	ldr	r2, [pc, #72]	; (8004bb8 <LSM6DSL_ACC_GetOutputDataRate+0xf8>)
 8004b6e:	601a      	str	r2, [r3, #0]
      break;
 8004b70:	e00f      	b.n	8004b92 <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    case LSM6DSL_XL_ODR_1k66Hz:
      *Odr = 1660.0f;
 8004b72:	683b      	ldr	r3, [r7, #0]
 8004b74:	4a11      	ldr	r2, [pc, #68]	; (8004bbc <LSM6DSL_ACC_GetOutputDataRate+0xfc>)
 8004b76:	601a      	str	r2, [r3, #0]
      break;
 8004b78:	e00b      	b.n	8004b92 <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    case LSM6DSL_XL_ODR_3k33Hz:
      *Odr = 3330.0f;
 8004b7a:	683b      	ldr	r3, [r7, #0]
 8004b7c:	4a10      	ldr	r2, [pc, #64]	; (8004bc0 <LSM6DSL_ACC_GetOutputDataRate+0x100>)
 8004b7e:	601a      	str	r2, [r3, #0]
      break;
 8004b80:	e007      	b.n	8004b92 <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    case LSM6DSL_XL_ODR_6k66Hz:
      *Odr = 6660.0f;
 8004b82:	683b      	ldr	r3, [r7, #0]
 8004b84:	4a0f      	ldr	r2, [pc, #60]	; (8004bc4 <LSM6DSL_ACC_GetOutputDataRate+0x104>)
 8004b86:	601a      	str	r2, [r3, #0]
      break;
 8004b88:	e003      	b.n	8004b92 <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    default:
      ret = LSM6DSL_ERROR;
 8004b8a:	f04f 33ff 	mov.w	r3, #4294967295
 8004b8e:	60fb      	str	r3, [r7, #12]
      break;
 8004b90:	bf00      	nop
  }

  return ret;
 8004b92:	68fb      	ldr	r3, [r7, #12]
}
 8004b94:	4618      	mov	r0, r3
 8004b96:	3710      	adds	r7, #16
 8004b98:	46bd      	mov	sp, r7
 8004b9a:	bd80      	pop	{r7, pc}
 8004b9c:	3fcccccd 	.word	0x3fcccccd
 8004ba0:	41480000 	.word	0x41480000
 8004ba4:	41d00000 	.word	0x41d00000
 8004ba8:	42500000 	.word	0x42500000
 8004bac:	42d00000 	.word	0x42d00000
 8004bb0:	43500000 	.word	0x43500000
 8004bb4:	43d00000 	.word	0x43d00000
 8004bb8:	44504000 	.word	0x44504000
 8004bbc:	44cf8000 	.word	0x44cf8000
 8004bc0:	45502000 	.word	0x45502000
 8004bc4:	45d02000 	.word	0x45d02000

08004bc8 <LSM6DSL_ACC_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSL_ACC_SetOutputDataRate(LSM6DSL_Object_t *pObj, float Odr)
{
 8004bc8:	b580      	push	{r7, lr}
 8004bca:	b082      	sub	sp, #8
 8004bcc:	af00      	add	r7, sp, #0
 8004bce:	6078      	str	r0, [r7, #4]
 8004bd0:	ed87 0a00 	vstr	s0, [r7]
  /* Check if the component is enabled */
  if (pObj->acc_is_enabled == 1U)
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8004bda:	2b01      	cmp	r3, #1
 8004bdc:	d106      	bne.n	8004bec <LSM6DSL_ACC_SetOutputDataRate+0x24>
  {
    return LSM6DSL_ACC_SetOutputDataRate_When_Enabled(pObj, Odr);
 8004bde:	ed97 0a00 	vldr	s0, [r7]
 8004be2:	6878      	ldr	r0, [r7, #4]
 8004be4:	f000 fb36 	bl	8005254 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled>
 8004be8:	4603      	mov	r3, r0
 8004bea:	e005      	b.n	8004bf8 <LSM6DSL_ACC_SetOutputDataRate+0x30>
  }
  else
  {
    return LSM6DSL_ACC_SetOutputDataRate_When_Disabled(pObj, Odr);
 8004bec:	ed97 0a00 	vldr	s0, [r7]
 8004bf0:	6878      	ldr	r0, [r7, #4]
 8004bf2:	f000 fbbb 	bl	800536c <LSM6DSL_ACC_SetOutputDataRate_When_Disabled>
 8004bf6:	4603      	mov	r3, r0
  }
}
 8004bf8:	4618      	mov	r0, r3
 8004bfa:	3708      	adds	r7, #8
 8004bfc:	46bd      	mov	sp, r7
 8004bfe:	bd80      	pop	{r7, pc}

08004c00 <LSM6DSL_ACC_GetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale pointer where the full scale is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSL_ACC_GetFullScale(LSM6DSL_Object_t *pObj, int32_t *FullScale)
{
 8004c00:	b580      	push	{r7, lr}
 8004c02:	b084      	sub	sp, #16
 8004c04:	af00      	add	r7, sp, #0
 8004c06:	6078      	str	r0, [r7, #4]
 8004c08:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSL_OK;
 8004c0a:	2300      	movs	r3, #0
 8004c0c:	60fb      	str	r3, [r7, #12]
  lsm6dsl_fs_xl_t fs_low_level;

  /* Read actual full scale selection from sensor. */
  if (lsm6dsl_xl_full_scale_get(&(pObj->Ctx), &fs_low_level) != LSM6DSL_OK)
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	3320      	adds	r3, #32
 8004c12:	f107 020b 	add.w	r2, r7, #11
 8004c16:	4611      	mov	r1, r2
 8004c18:	4618      	mov	r0, r3
 8004c1a:	f000 fdc3 	bl	80057a4 <lsm6dsl_xl_full_scale_get>
 8004c1e:	4603      	mov	r3, r0
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d002      	beq.n	8004c2a <LSM6DSL_ACC_GetFullScale+0x2a>
  {
    return LSM6DSL_ERROR;
 8004c24:	f04f 33ff 	mov.w	r3, #4294967295
 8004c28:	e023      	b.n	8004c72 <LSM6DSL_ACC_GetFullScale+0x72>
  }

  switch (fs_low_level)
 8004c2a:	7afb      	ldrb	r3, [r7, #11]
 8004c2c:	2b03      	cmp	r3, #3
 8004c2e:	d81b      	bhi.n	8004c68 <LSM6DSL_ACC_GetFullScale+0x68>
 8004c30:	a201      	add	r2, pc, #4	; (adr r2, 8004c38 <LSM6DSL_ACC_GetFullScale+0x38>)
 8004c32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c36:	bf00      	nop
 8004c38:	08004c49 	.word	0x08004c49
 8004c3c:	08004c61 	.word	0x08004c61
 8004c40:	08004c51 	.word	0x08004c51
 8004c44:	08004c59 	.word	0x08004c59
  {
    case LSM6DSL_2g:
      *FullScale =  2;
 8004c48:	683b      	ldr	r3, [r7, #0]
 8004c4a:	2202      	movs	r2, #2
 8004c4c:	601a      	str	r2, [r3, #0]
      break;
 8004c4e:	e00f      	b.n	8004c70 <LSM6DSL_ACC_GetFullScale+0x70>

    case LSM6DSL_4g:
      *FullScale =  4;
 8004c50:	683b      	ldr	r3, [r7, #0]
 8004c52:	2204      	movs	r2, #4
 8004c54:	601a      	str	r2, [r3, #0]
      break;
 8004c56:	e00b      	b.n	8004c70 <LSM6DSL_ACC_GetFullScale+0x70>

    case LSM6DSL_8g:
      *FullScale =  8;
 8004c58:	683b      	ldr	r3, [r7, #0]
 8004c5a:	2208      	movs	r2, #8
 8004c5c:	601a      	str	r2, [r3, #0]
      break;
 8004c5e:	e007      	b.n	8004c70 <LSM6DSL_ACC_GetFullScale+0x70>

    case LSM6DSL_16g:
      *FullScale = 16;
 8004c60:	683b      	ldr	r3, [r7, #0]
 8004c62:	2210      	movs	r2, #16
 8004c64:	601a      	str	r2, [r3, #0]
      break;
 8004c66:	e003      	b.n	8004c70 <LSM6DSL_ACC_GetFullScale+0x70>

    default:
      ret = LSM6DSL_ERROR;
 8004c68:	f04f 33ff 	mov.w	r3, #4294967295
 8004c6c:	60fb      	str	r3, [r7, #12]
      break;
 8004c6e:	bf00      	nop
  }

  return ret;
 8004c70:	68fb      	ldr	r3, [r7, #12]
}
 8004c72:	4618      	mov	r0, r3
 8004c74:	3710      	adds	r7, #16
 8004c76:	46bd      	mov	sp, r7
 8004c78:	bd80      	pop	{r7, pc}
 8004c7a:	bf00      	nop

08004c7c <LSM6DSL_ACC_SetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale the functional full scale to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSL_ACC_SetFullScale(LSM6DSL_Object_t *pObj, int32_t FullScale)
{
 8004c7c:	b580      	push	{r7, lr}
 8004c7e:	b084      	sub	sp, #16
 8004c80:	af00      	add	r7, sp, #0
 8004c82:	6078      	str	r0, [r7, #4]
 8004c84:	6039      	str	r1, [r7, #0]
  lsm6dsl_fs_xl_t new_fs;

  /* Seems like MISRA C-2012 rule 14.3a violation but only from single file statical analysis point of view because
     the parameter passed to the function is not known at the moment of analysis */
  new_fs = (FullScale <= 2) ? LSM6DSL_2g
           : (FullScale <= 4) ? LSM6DSL_4g
 8004c86:	683b      	ldr	r3, [r7, #0]
 8004c88:	2b02      	cmp	r3, #2
 8004c8a:	dd0b      	ble.n	8004ca4 <LSM6DSL_ACC_SetFullScale+0x28>
 8004c8c:	683b      	ldr	r3, [r7, #0]
 8004c8e:	2b04      	cmp	r3, #4
 8004c90:	dd06      	ble.n	8004ca0 <LSM6DSL_ACC_SetFullScale+0x24>
 8004c92:	683b      	ldr	r3, [r7, #0]
 8004c94:	2b08      	cmp	r3, #8
 8004c96:	dc01      	bgt.n	8004c9c <LSM6DSL_ACC_SetFullScale+0x20>
 8004c98:	2303      	movs	r3, #3
 8004c9a:	e004      	b.n	8004ca6 <LSM6DSL_ACC_SetFullScale+0x2a>
 8004c9c:	2301      	movs	r3, #1
 8004c9e:	e002      	b.n	8004ca6 <LSM6DSL_ACC_SetFullScale+0x2a>
 8004ca0:	2302      	movs	r3, #2
 8004ca2:	e000      	b.n	8004ca6 <LSM6DSL_ACC_SetFullScale+0x2a>
 8004ca4:	2300      	movs	r3, #0
  new_fs = (FullScale <= 2) ? LSM6DSL_2g
 8004ca6:	73fb      	strb	r3, [r7, #15]
           : (FullScale <= 8) ? LSM6DSL_8g
           :                    LSM6DSL_16g;

  if (lsm6dsl_xl_full_scale_set(&(pObj->Ctx), new_fs) != LSM6DSL_OK)
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	3320      	adds	r3, #32
 8004cac:	7bfa      	ldrb	r2, [r7, #15]
 8004cae:	4611      	mov	r1, r2
 8004cb0:	4618      	mov	r0, r3
 8004cb2:	f000 fd51 	bl	8005758 <lsm6dsl_xl_full_scale_set>
 8004cb6:	4603      	mov	r3, r0
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d002      	beq.n	8004cc2 <LSM6DSL_ACC_SetFullScale+0x46>
  {
    return LSM6DSL_ERROR;
 8004cbc:	f04f 33ff 	mov.w	r3, #4294967295
 8004cc0:	e000      	b.n	8004cc4 <LSM6DSL_ACC_SetFullScale+0x48>
  }

  return LSM6DSL_OK;
 8004cc2:	2300      	movs	r3, #0
}
 8004cc4:	4618      	mov	r0, r3
 8004cc6:	3710      	adds	r7, #16
 8004cc8:	46bd      	mov	sp, r7
 8004cca:	bd80      	pop	{r7, pc}

08004ccc <LSM6DSL_ACC_GetAxesRaw>:
  * @param  pObj the device pObj
  * @param  Value pointer where the raw values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSL_ACC_GetAxesRaw(LSM6DSL_Object_t *pObj, LSM6DSL_AxesRaw_t *Value)
{
 8004ccc:	b580      	push	{r7, lr}
 8004cce:	b084      	sub	sp, #16
 8004cd0:	af00      	add	r7, sp, #0
 8004cd2:	6078      	str	r0, [r7, #4]
 8004cd4:	6039      	str	r1, [r7, #0]
  lsm6dsl_axis3bit16_t data_raw;

  /* Read raw data values. */
  if (lsm6dsl_acceleration_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM6DSL_OK)
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	3320      	adds	r3, #32
 8004cda:	f107 0208 	add.w	r2, r7, #8
 8004cde:	4611      	mov	r1, r2
 8004ce0:	4618      	mov	r0, r3
 8004ce2:	f000 ff86 	bl	8005bf2 <lsm6dsl_acceleration_raw_get>
 8004ce6:	4603      	mov	r3, r0
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d002      	beq.n	8004cf2 <LSM6DSL_ACC_GetAxesRaw+0x26>
  {
    return LSM6DSL_ERROR;
 8004cec:	f04f 33ff 	mov.w	r3, #4294967295
 8004cf0:	e00c      	b.n	8004d0c <LSM6DSL_ACC_GetAxesRaw+0x40>
  }

  /* Format the data. */
  Value->x = data_raw.i16bit[0];
 8004cf2:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8004cf6:	683b      	ldr	r3, [r7, #0]
 8004cf8:	801a      	strh	r2, [r3, #0]
  Value->y = data_raw.i16bit[1];
 8004cfa:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8004cfe:	683b      	ldr	r3, [r7, #0]
 8004d00:	805a      	strh	r2, [r3, #2]
  Value->z = data_raw.i16bit[2];
 8004d02:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8004d06:	683b      	ldr	r3, [r7, #0]
 8004d08:	809a      	strh	r2, [r3, #4]

  return LSM6DSL_OK;
 8004d0a:	2300      	movs	r3, #0
}
 8004d0c:	4618      	mov	r0, r3
 8004d0e:	3710      	adds	r7, #16
 8004d10:	46bd      	mov	sp, r7
 8004d12:	bd80      	pop	{r7, pc}

08004d14 <LSM6DSL_ACC_GetAxes>:
  * @param  pObj the device pObj
  * @param  Acceleration pointer where the values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSL_ACC_GetAxes(LSM6DSL_Object_t *pObj, LSM6DSL_Axes_t *Acceleration)
{
 8004d14:	b580      	push	{r7, lr}
 8004d16:	b086      	sub	sp, #24
 8004d18:	af00      	add	r7, sp, #0
 8004d1a:	6078      	str	r0, [r7, #4]
 8004d1c:	6039      	str	r1, [r7, #0]
  lsm6dsl_axis3bit16_t data_raw;
  float sensitivity = 0.0f;
 8004d1e:	f04f 0300 	mov.w	r3, #0
 8004d22:	60fb      	str	r3, [r7, #12]

  /* Read raw data values. */
  if (lsm6dsl_acceleration_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM6DSL_OK)
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	3320      	adds	r3, #32
 8004d28:	f107 0210 	add.w	r2, r7, #16
 8004d2c:	4611      	mov	r1, r2
 8004d2e:	4618      	mov	r0, r3
 8004d30:	f000 ff5f 	bl	8005bf2 <lsm6dsl_acceleration_raw_get>
 8004d34:	4603      	mov	r3, r0
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d002      	beq.n	8004d40 <LSM6DSL_ACC_GetAxes+0x2c>
  {
    return LSM6DSL_ERROR;
 8004d3a:	f04f 33ff 	mov.w	r3, #4294967295
 8004d3e:	e03c      	b.n	8004dba <LSM6DSL_ACC_GetAxes+0xa6>
  }

  /* Get LSM6DSL actual sensitivity. */
  if (LSM6DSL_ACC_GetSensitivity(pObj, &sensitivity) != LSM6DSL_OK)
 8004d40:	f107 030c 	add.w	r3, r7, #12
 8004d44:	4619      	mov	r1, r3
 8004d46:	6878      	ldr	r0, [r7, #4]
 8004d48:	f7ff fe74 	bl	8004a34 <LSM6DSL_ACC_GetSensitivity>
 8004d4c:	4603      	mov	r3, r0
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d002      	beq.n	8004d58 <LSM6DSL_ACC_GetAxes+0x44>
  {
    return LSM6DSL_ERROR;
 8004d52:	f04f 33ff 	mov.w	r3, #4294967295
 8004d56:	e030      	b.n	8004dba <LSM6DSL_ACC_GetAxes+0xa6>
  }

  /* Calculate the data. */
  Acceleration->x = (int32_t)((float)((float)data_raw.i16bit[0] * sensitivity));
 8004d58:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8004d5c:	ee07 3a90 	vmov	s15, r3
 8004d60:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004d64:	edd7 7a03 	vldr	s15, [r7, #12]
 8004d68:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004d6c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004d70:	ee17 2a90 	vmov	r2, s15
 8004d74:	683b      	ldr	r3, [r7, #0]
 8004d76:	601a      	str	r2, [r3, #0]
  Acceleration->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 8004d78:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8004d7c:	ee07 3a90 	vmov	s15, r3
 8004d80:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004d84:	edd7 7a03 	vldr	s15, [r7, #12]
 8004d88:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004d8c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004d90:	ee17 2a90 	vmov	r2, s15
 8004d94:	683b      	ldr	r3, [r7, #0]
 8004d96:	605a      	str	r2, [r3, #4]
  Acceleration->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 8004d98:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8004d9c:	ee07 3a90 	vmov	s15, r3
 8004da0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004da4:	edd7 7a03 	vldr	s15, [r7, #12]
 8004da8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004dac:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004db0:	ee17 2a90 	vmov	r2, s15
 8004db4:	683b      	ldr	r3, [r7, #0]
 8004db6:	609a      	str	r2, [r3, #8]

  return LSM6DSL_OK;
 8004db8:	2300      	movs	r3, #0
}
 8004dba:	4618      	mov	r0, r3
 8004dbc:	3718      	adds	r7, #24
 8004dbe:	46bd      	mov	sp, r7
 8004dc0:	bd80      	pop	{r7, pc}

08004dc2 <LSM6DSL_GYRO_Enable>:
  * @brief  Enable the LSM6DSL gyroscope sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSL_GYRO_Enable(LSM6DSL_Object_t *pObj)
{
 8004dc2:	b580      	push	{r7, lr}
 8004dc4:	b082      	sub	sp, #8
 8004dc6:	af00      	add	r7, sp, #0
 8004dc8:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->gyro_is_enabled == 1U)
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8004dd0:	2b01      	cmp	r3, #1
 8004dd2:	d101      	bne.n	8004dd8 <LSM6DSL_GYRO_Enable+0x16>
  {
    return LSM6DSL_OK;
 8004dd4:	2300      	movs	r3, #0
 8004dd6:	e014      	b.n	8004e02 <LSM6DSL_GYRO_Enable+0x40>
  }

  /* Output data rate selection. */
  if (lsm6dsl_gy_data_rate_set(&(pObj->Ctx), pObj->gyro_odr) != LSM6DSL_OK)
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	f103 0220 	add.w	r2, r3, #32
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004de4:	4619      	mov	r1, r3
 8004de6:	4610      	mov	r0, r2
 8004de8:	f000 fe0a 	bl	8005a00 <lsm6dsl_gy_data_rate_set>
 8004dec:	4603      	mov	r3, r0
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d002      	beq.n	8004df8 <LSM6DSL_GYRO_Enable+0x36>
  {
    return LSM6DSL_ERROR;
 8004df2:	f04f 33ff 	mov.w	r3, #4294967295
 8004df6:	e004      	b.n	8004e02 <LSM6DSL_GYRO_Enable+0x40>
  }

  pObj->gyro_is_enabled = 1;
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	2201      	movs	r2, #1
 8004dfc:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32

  return LSM6DSL_OK;
 8004e00:	2300      	movs	r3, #0
}
 8004e02:	4618      	mov	r0, r3
 8004e04:	3708      	adds	r7, #8
 8004e06:	46bd      	mov	sp, r7
 8004e08:	bd80      	pop	{r7, pc}

08004e0a <LSM6DSL_GYRO_Disable>:
  * @brief  Disable the LSM6DSL gyroscope sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSL_GYRO_Disable(LSM6DSL_Object_t *pObj)
{
 8004e0a:	b580      	push	{r7, lr}
 8004e0c:	b082      	sub	sp, #8
 8004e0e:	af00      	add	r7, sp, #0
 8004e10:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->gyro_is_enabled == 0U)
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d101      	bne.n	8004e20 <LSM6DSL_GYRO_Disable+0x16>
  {
    return LSM6DSL_OK;
 8004e1c:	2300      	movs	r3, #0
 8004e1e:	e01f      	b.n	8004e60 <LSM6DSL_GYRO_Disable+0x56>
  }

  /* Get current output data rate. */
  if (lsm6dsl_gy_data_rate_get(&(pObj->Ctx), &pObj->gyro_odr) != LSM6DSL_OK)
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	f103 0220 	add.w	r2, r3, #32
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	3334      	adds	r3, #52	; 0x34
 8004e2a:	4619      	mov	r1, r3
 8004e2c:	4610      	mov	r0, r2
 8004e2e:	f000 fe0d 	bl	8005a4c <lsm6dsl_gy_data_rate_get>
 8004e32:	4603      	mov	r3, r0
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d002      	beq.n	8004e3e <LSM6DSL_GYRO_Disable+0x34>
  {
    return LSM6DSL_ERROR;
 8004e38:	f04f 33ff 	mov.w	r3, #4294967295
 8004e3c:	e010      	b.n	8004e60 <LSM6DSL_GYRO_Disable+0x56>
  }

  /* Output data rate selection - power down. */
  if (lsm6dsl_gy_data_rate_set(&(pObj->Ctx), LSM6DSL_GY_ODR_OFF) != LSM6DSL_OK)
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	3320      	adds	r3, #32
 8004e42:	2100      	movs	r1, #0
 8004e44:	4618      	mov	r0, r3
 8004e46:	f000 fddb 	bl	8005a00 <lsm6dsl_gy_data_rate_set>
 8004e4a:	4603      	mov	r3, r0
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d002      	beq.n	8004e56 <LSM6DSL_GYRO_Disable+0x4c>
  {
    return LSM6DSL_ERROR;
 8004e50:	f04f 33ff 	mov.w	r3, #4294967295
 8004e54:	e004      	b.n	8004e60 <LSM6DSL_GYRO_Disable+0x56>
  }

  pObj->gyro_is_enabled = 0;
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	2200      	movs	r2, #0
 8004e5a:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32

  return LSM6DSL_OK;
 8004e5e:	2300      	movs	r3, #0
}
 8004e60:	4618      	mov	r0, r3
 8004e62:	3708      	adds	r7, #8
 8004e64:	46bd      	mov	sp, r7
 8004e66:	bd80      	pop	{r7, pc}

08004e68 <LSM6DSL_GYRO_GetSensitivity>:
  * @param  pObj the device pObj
  * @param  Sensitivity pointer
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSL_GYRO_GetSensitivity(LSM6DSL_Object_t *pObj, float *Sensitivity)
{
 8004e68:	b580      	push	{r7, lr}
 8004e6a:	b084      	sub	sp, #16
 8004e6c:	af00      	add	r7, sp, #0
 8004e6e:	6078      	str	r0, [r7, #4]
 8004e70:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSL_OK;
 8004e72:	2300      	movs	r3, #0
 8004e74:	60fb      	str	r3, [r7, #12]
  lsm6dsl_fs_g_t full_scale;

  /* Read actual full scale selection from sensor. */
  if (lsm6dsl_gy_full_scale_get(&(pObj->Ctx), &full_scale) != LSM6DSL_OK)
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	3320      	adds	r3, #32
 8004e7a:	f107 020b 	add.w	r2, r7, #11
 8004e7e:	4611      	mov	r1, r2
 8004e80:	4618      	mov	r0, r3
 8004e82:	f000 fd7b 	bl	800597c <lsm6dsl_gy_full_scale_get>
 8004e86:	4603      	mov	r3, r0
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d002      	beq.n	8004e92 <LSM6DSL_GYRO_GetSensitivity+0x2a>
  {
    return LSM6DSL_ERROR;
 8004e8c:	f04f 33ff 	mov.w	r3, #4294967295
 8004e90:	e02d      	b.n	8004eee <LSM6DSL_GYRO_GetSensitivity+0x86>
  }

  /* Store the sensitivity based on actual full scale. */
  switch (full_scale)
 8004e92:	7afb      	ldrb	r3, [r7, #11]
 8004e94:	2b06      	cmp	r3, #6
 8004e96:	d825      	bhi.n	8004ee4 <LSM6DSL_GYRO_GetSensitivity+0x7c>
 8004e98:	a201      	add	r2, pc, #4	; (adr r2, 8004ea0 <LSM6DSL_GYRO_GetSensitivity+0x38>)
 8004e9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e9e:	bf00      	nop
 8004ea0:	08004ec5 	.word	0x08004ec5
 8004ea4:	08004ebd 	.word	0x08004ebd
 8004ea8:	08004ecd 	.word	0x08004ecd
 8004eac:	08004ee5 	.word	0x08004ee5
 8004eb0:	08004ed5 	.word	0x08004ed5
 8004eb4:	08004ee5 	.word	0x08004ee5
 8004eb8:	08004edd 	.word	0x08004edd
  {
    case LSM6DSL_125dps:
      *Sensitivity = LSM6DSL_GYRO_SENSITIVITY_FS_125DPS;
 8004ebc:	683b      	ldr	r3, [r7, #0]
 8004ebe:	4a0e      	ldr	r2, [pc, #56]	; (8004ef8 <LSM6DSL_GYRO_GetSensitivity+0x90>)
 8004ec0:	601a      	str	r2, [r3, #0]
      break;
 8004ec2:	e013      	b.n	8004eec <LSM6DSL_GYRO_GetSensitivity+0x84>

    case LSM6DSL_250dps:
      *Sensitivity = LSM6DSL_GYRO_SENSITIVITY_FS_250DPS;
 8004ec4:	683b      	ldr	r3, [r7, #0]
 8004ec6:	4a0d      	ldr	r2, [pc, #52]	; (8004efc <LSM6DSL_GYRO_GetSensitivity+0x94>)
 8004ec8:	601a      	str	r2, [r3, #0]
      break;
 8004eca:	e00f      	b.n	8004eec <LSM6DSL_GYRO_GetSensitivity+0x84>

    case LSM6DSL_500dps:
      *Sensitivity = LSM6DSL_GYRO_SENSITIVITY_FS_500DPS;
 8004ecc:	683b      	ldr	r3, [r7, #0]
 8004ece:	4a0c      	ldr	r2, [pc, #48]	; (8004f00 <LSM6DSL_GYRO_GetSensitivity+0x98>)
 8004ed0:	601a      	str	r2, [r3, #0]
      break;
 8004ed2:	e00b      	b.n	8004eec <LSM6DSL_GYRO_GetSensitivity+0x84>

    case LSM6DSL_1000dps:
      *Sensitivity = LSM6DSL_GYRO_SENSITIVITY_FS_1000DPS;
 8004ed4:	683b      	ldr	r3, [r7, #0]
 8004ed6:	4a0b      	ldr	r2, [pc, #44]	; (8004f04 <LSM6DSL_GYRO_GetSensitivity+0x9c>)
 8004ed8:	601a      	str	r2, [r3, #0]
      break;
 8004eda:	e007      	b.n	8004eec <LSM6DSL_GYRO_GetSensitivity+0x84>

    case LSM6DSL_2000dps:
      *Sensitivity = LSM6DSL_GYRO_SENSITIVITY_FS_2000DPS;
 8004edc:	683b      	ldr	r3, [r7, #0]
 8004ede:	4a0a      	ldr	r2, [pc, #40]	; (8004f08 <LSM6DSL_GYRO_GetSensitivity+0xa0>)
 8004ee0:	601a      	str	r2, [r3, #0]
      break;
 8004ee2:	e003      	b.n	8004eec <LSM6DSL_GYRO_GetSensitivity+0x84>

    default:
      ret = LSM6DSL_ERROR;
 8004ee4:	f04f 33ff 	mov.w	r3, #4294967295
 8004ee8:	60fb      	str	r3, [r7, #12]
      break;
 8004eea:	bf00      	nop
  }

  return ret;
 8004eec:	68fb      	ldr	r3, [r7, #12]
}
 8004eee:	4618      	mov	r0, r3
 8004ef0:	3710      	adds	r7, #16
 8004ef2:	46bd      	mov	sp, r7
 8004ef4:	bd80      	pop	{r7, pc}
 8004ef6:	bf00      	nop
 8004ef8:	408c0000 	.word	0x408c0000
 8004efc:	410c0000 	.word	0x410c0000
 8004f00:	418c0000 	.word	0x418c0000
 8004f04:	420c0000 	.word	0x420c0000
 8004f08:	428c0000 	.word	0x428c0000

08004f0c <LSM6DSL_GYRO_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSL_GYRO_GetOutputDataRate(LSM6DSL_Object_t *pObj, float *Odr)
{
 8004f0c:	b580      	push	{r7, lr}
 8004f0e:	b084      	sub	sp, #16
 8004f10:	af00      	add	r7, sp, #0
 8004f12:	6078      	str	r0, [r7, #4]
 8004f14:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSL_OK;
 8004f16:	2300      	movs	r3, #0
 8004f18:	60fb      	str	r3, [r7, #12]
  lsm6dsl_odr_g_t odr_low_level;

  /* Get current output data rate. */
  if (lsm6dsl_gy_data_rate_get(&(pObj->Ctx), &odr_low_level) != LSM6DSL_OK)
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	3320      	adds	r3, #32
 8004f1e:	f107 020b 	add.w	r2, r7, #11
 8004f22:	4611      	mov	r1, r2
 8004f24:	4618      	mov	r0, r3
 8004f26:	f000 fd91 	bl	8005a4c <lsm6dsl_gy_data_rate_get>
 8004f2a:	4603      	mov	r3, r0
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d002      	beq.n	8004f36 <LSM6DSL_GYRO_GetOutputDataRate+0x2a>
  {
    return LSM6DSL_ERROR;
 8004f30:	f04f 33ff 	mov.w	r3, #4294967295
 8004f34:	e04e      	b.n	8004fd4 <LSM6DSL_GYRO_GetOutputDataRate+0xc8>
  }

  switch (odr_low_level)
 8004f36:	7afb      	ldrb	r3, [r7, #11]
 8004f38:	2b0a      	cmp	r3, #10
 8004f3a:	d846      	bhi.n	8004fca <LSM6DSL_GYRO_GetOutputDataRate+0xbe>
 8004f3c:	a201      	add	r2, pc, #4	; (adr r2, 8004f44 <LSM6DSL_GYRO_GetOutputDataRate+0x38>)
 8004f3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f42:	bf00      	nop
 8004f44:	08004f71 	.word	0x08004f71
 8004f48:	08004f7b 	.word	0x08004f7b
 8004f4c:	08004f83 	.word	0x08004f83
 8004f50:	08004f8b 	.word	0x08004f8b
 8004f54:	08004f93 	.word	0x08004f93
 8004f58:	08004f9b 	.word	0x08004f9b
 8004f5c:	08004fa3 	.word	0x08004fa3
 8004f60:	08004fab 	.word	0x08004fab
 8004f64:	08004fb3 	.word	0x08004fb3
 8004f68:	08004fbb 	.word	0x08004fbb
 8004f6c:	08004fc3 	.word	0x08004fc3
  {
    case LSM6DSL_GY_ODR_OFF:
      *Odr = 0.0f;
 8004f70:	683b      	ldr	r3, [r7, #0]
 8004f72:	f04f 0200 	mov.w	r2, #0
 8004f76:	601a      	str	r2, [r3, #0]
      break;
 8004f78:	e02b      	b.n	8004fd2 <LSM6DSL_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSL_GY_ODR_12Hz5:
      *Odr = 12.5f;
 8004f7a:	683b      	ldr	r3, [r7, #0]
 8004f7c:	4a17      	ldr	r2, [pc, #92]	; (8004fdc <LSM6DSL_GYRO_GetOutputDataRate+0xd0>)
 8004f7e:	601a      	str	r2, [r3, #0]
      break;
 8004f80:	e027      	b.n	8004fd2 <LSM6DSL_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSL_GY_ODR_26Hz:
      *Odr = 26.0f;
 8004f82:	683b      	ldr	r3, [r7, #0]
 8004f84:	4a16      	ldr	r2, [pc, #88]	; (8004fe0 <LSM6DSL_GYRO_GetOutputDataRate+0xd4>)
 8004f86:	601a      	str	r2, [r3, #0]
      break;
 8004f88:	e023      	b.n	8004fd2 <LSM6DSL_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSL_GY_ODR_52Hz:
      *Odr = 52.0f;
 8004f8a:	683b      	ldr	r3, [r7, #0]
 8004f8c:	4a15      	ldr	r2, [pc, #84]	; (8004fe4 <LSM6DSL_GYRO_GetOutputDataRate+0xd8>)
 8004f8e:	601a      	str	r2, [r3, #0]
      break;
 8004f90:	e01f      	b.n	8004fd2 <LSM6DSL_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSL_GY_ODR_104Hz:
      *Odr = 104.0f;
 8004f92:	683b      	ldr	r3, [r7, #0]
 8004f94:	4a14      	ldr	r2, [pc, #80]	; (8004fe8 <LSM6DSL_GYRO_GetOutputDataRate+0xdc>)
 8004f96:	601a      	str	r2, [r3, #0]
      break;
 8004f98:	e01b      	b.n	8004fd2 <LSM6DSL_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSL_GY_ODR_208Hz:
      *Odr = 208.0f;
 8004f9a:	683b      	ldr	r3, [r7, #0]
 8004f9c:	4a13      	ldr	r2, [pc, #76]	; (8004fec <LSM6DSL_GYRO_GetOutputDataRate+0xe0>)
 8004f9e:	601a      	str	r2, [r3, #0]
      break;
 8004fa0:	e017      	b.n	8004fd2 <LSM6DSL_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSL_GY_ODR_416Hz:
      *Odr = 416.0f;
 8004fa2:	683b      	ldr	r3, [r7, #0]
 8004fa4:	4a12      	ldr	r2, [pc, #72]	; (8004ff0 <LSM6DSL_GYRO_GetOutputDataRate+0xe4>)
 8004fa6:	601a      	str	r2, [r3, #0]
      break;
 8004fa8:	e013      	b.n	8004fd2 <LSM6DSL_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSL_GY_ODR_833Hz:
      *Odr = 833.0f;
 8004faa:	683b      	ldr	r3, [r7, #0]
 8004fac:	4a11      	ldr	r2, [pc, #68]	; (8004ff4 <LSM6DSL_GYRO_GetOutputDataRate+0xe8>)
 8004fae:	601a      	str	r2, [r3, #0]
      break;
 8004fb0:	e00f      	b.n	8004fd2 <LSM6DSL_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSL_GY_ODR_1k66Hz:
      *Odr =  1660.0f;
 8004fb2:	683b      	ldr	r3, [r7, #0]
 8004fb4:	4a10      	ldr	r2, [pc, #64]	; (8004ff8 <LSM6DSL_GYRO_GetOutputDataRate+0xec>)
 8004fb6:	601a      	str	r2, [r3, #0]
      break;
 8004fb8:	e00b      	b.n	8004fd2 <LSM6DSL_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSL_GY_ODR_3k33Hz:
      *Odr =  3330.0f;
 8004fba:	683b      	ldr	r3, [r7, #0]
 8004fbc:	4a0f      	ldr	r2, [pc, #60]	; (8004ffc <LSM6DSL_GYRO_GetOutputDataRate+0xf0>)
 8004fbe:	601a      	str	r2, [r3, #0]
      break;
 8004fc0:	e007      	b.n	8004fd2 <LSM6DSL_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSL_GY_ODR_6k66Hz:
      *Odr =  6660.0f;
 8004fc2:	683b      	ldr	r3, [r7, #0]
 8004fc4:	4a0e      	ldr	r2, [pc, #56]	; (8005000 <LSM6DSL_GYRO_GetOutputDataRate+0xf4>)
 8004fc6:	601a      	str	r2, [r3, #0]
      break;
 8004fc8:	e003      	b.n	8004fd2 <LSM6DSL_GYRO_GetOutputDataRate+0xc6>

    default:
      ret = LSM6DSL_ERROR;
 8004fca:	f04f 33ff 	mov.w	r3, #4294967295
 8004fce:	60fb      	str	r3, [r7, #12]
      break;
 8004fd0:	bf00      	nop
  }

  return ret;
 8004fd2:	68fb      	ldr	r3, [r7, #12]
}
 8004fd4:	4618      	mov	r0, r3
 8004fd6:	3710      	adds	r7, #16
 8004fd8:	46bd      	mov	sp, r7
 8004fda:	bd80      	pop	{r7, pc}
 8004fdc:	41480000 	.word	0x41480000
 8004fe0:	41d00000 	.word	0x41d00000
 8004fe4:	42500000 	.word	0x42500000
 8004fe8:	42d00000 	.word	0x42d00000
 8004fec:	43500000 	.word	0x43500000
 8004ff0:	43d00000 	.word	0x43d00000
 8004ff4:	44504000 	.word	0x44504000
 8004ff8:	44cf8000 	.word	0x44cf8000
 8004ffc:	45502000 	.word	0x45502000
 8005000:	45d02000 	.word	0x45d02000

08005004 <LSM6DSL_GYRO_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSL_GYRO_SetOutputDataRate(LSM6DSL_Object_t *pObj, float Odr)
{
 8005004:	b580      	push	{r7, lr}
 8005006:	b082      	sub	sp, #8
 8005008:	af00      	add	r7, sp, #0
 800500a:	6078      	str	r0, [r7, #4]
 800500c:	ed87 0a00 	vstr	s0, [r7]
  /* Check if the component is enabled */
  if (pObj->gyro_is_enabled == 1U)
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8005016:	2b01      	cmp	r3, #1
 8005018:	d106      	bne.n	8005028 <LSM6DSL_GYRO_SetOutputDataRate+0x24>
  {
    return LSM6DSL_GYRO_SetOutputDataRate_When_Enabled(pObj, Odr);
 800501a:	ed97 0a00 	vldr	s0, [r7]
 800501e:	6878      	ldr	r0, [r7, #4]
 8005020:	f000 fa26 	bl	8005470 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled>
 8005024:	4603      	mov	r3, r0
 8005026:	e005      	b.n	8005034 <LSM6DSL_GYRO_SetOutputDataRate+0x30>
  }
  else
  {
    return LSM6DSL_GYRO_SetOutputDataRate_When_Disabled(pObj, Odr);
 8005028:	ed97 0a00 	vldr	s0, [r7]
 800502c:	6878      	ldr	r0, [r7, #4]
 800502e:	f000 faab 	bl	8005588 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled>
 8005032:	4603      	mov	r3, r0
  }
}
 8005034:	4618      	mov	r0, r3
 8005036:	3708      	adds	r7, #8
 8005038:	46bd      	mov	sp, r7
 800503a:	bd80      	pop	{r7, pc}

0800503c <LSM6DSL_GYRO_GetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale pointer where the full scale is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSL_GYRO_GetFullScale(LSM6DSL_Object_t *pObj, int32_t  *FullScale)
{
 800503c:	b580      	push	{r7, lr}
 800503e:	b084      	sub	sp, #16
 8005040:	af00      	add	r7, sp, #0
 8005042:	6078      	str	r0, [r7, #4]
 8005044:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSL_OK;
 8005046:	2300      	movs	r3, #0
 8005048:	60fb      	str	r3, [r7, #12]
  lsm6dsl_fs_g_t fs_low_level;

  /* Read actual full scale selection from sensor. */
  if (lsm6dsl_gy_full_scale_get(&(pObj->Ctx), &fs_low_level) != LSM6DSL_OK)
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	3320      	adds	r3, #32
 800504e:	f107 020b 	add.w	r2, r7, #11
 8005052:	4611      	mov	r1, r2
 8005054:	4618      	mov	r0, r3
 8005056:	f000 fc91 	bl	800597c <lsm6dsl_gy_full_scale_get>
 800505a:	4603      	mov	r3, r0
 800505c:	2b00      	cmp	r3, #0
 800505e:	d002      	beq.n	8005066 <LSM6DSL_GYRO_GetFullScale+0x2a>
  {
    return LSM6DSL_ERROR;
 8005060:	f04f 33ff 	mov.w	r3, #4294967295
 8005064:	e030      	b.n	80050c8 <LSM6DSL_GYRO_GetFullScale+0x8c>
  }

  switch (fs_low_level)
 8005066:	7afb      	ldrb	r3, [r7, #11]
 8005068:	2b06      	cmp	r3, #6
 800506a:	d828      	bhi.n	80050be <LSM6DSL_GYRO_GetFullScale+0x82>
 800506c:	a201      	add	r2, pc, #4	; (adr r2, 8005074 <LSM6DSL_GYRO_GetFullScale+0x38>)
 800506e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005072:	bf00      	nop
 8005074:	08005099 	.word	0x08005099
 8005078:	08005091 	.word	0x08005091
 800507c:	080050a1 	.word	0x080050a1
 8005080:	080050bf 	.word	0x080050bf
 8005084:	080050ab 	.word	0x080050ab
 8005088:	080050bf 	.word	0x080050bf
 800508c:	080050b5 	.word	0x080050b5
  {
    case LSM6DSL_125dps:
      *FullScale =  125;
 8005090:	683b      	ldr	r3, [r7, #0]
 8005092:	227d      	movs	r2, #125	; 0x7d
 8005094:	601a      	str	r2, [r3, #0]
      break;
 8005096:	e016      	b.n	80050c6 <LSM6DSL_GYRO_GetFullScale+0x8a>

    case LSM6DSL_250dps:
      *FullScale =  250;
 8005098:	683b      	ldr	r3, [r7, #0]
 800509a:	22fa      	movs	r2, #250	; 0xfa
 800509c:	601a      	str	r2, [r3, #0]
      break;
 800509e:	e012      	b.n	80050c6 <LSM6DSL_GYRO_GetFullScale+0x8a>

    case LSM6DSL_500dps:
      *FullScale =  500;
 80050a0:	683b      	ldr	r3, [r7, #0]
 80050a2:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80050a6:	601a      	str	r2, [r3, #0]
      break;
 80050a8:	e00d      	b.n	80050c6 <LSM6DSL_GYRO_GetFullScale+0x8a>

    case LSM6DSL_1000dps:
      *FullScale = 1000;
 80050aa:	683b      	ldr	r3, [r7, #0]
 80050ac:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80050b0:	601a      	str	r2, [r3, #0]
      break;
 80050b2:	e008      	b.n	80050c6 <LSM6DSL_GYRO_GetFullScale+0x8a>

    case LSM6DSL_2000dps:
      *FullScale = 2000;
 80050b4:	683b      	ldr	r3, [r7, #0]
 80050b6:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80050ba:	601a      	str	r2, [r3, #0]
      break;
 80050bc:	e003      	b.n	80050c6 <LSM6DSL_GYRO_GetFullScale+0x8a>

    default:
      ret = LSM6DSL_ERROR;
 80050be:	f04f 33ff 	mov.w	r3, #4294967295
 80050c2:	60fb      	str	r3, [r7, #12]
      break;
 80050c4:	bf00      	nop
  }

  return ret;
 80050c6:	68fb      	ldr	r3, [r7, #12]
}
 80050c8:	4618      	mov	r0, r3
 80050ca:	3710      	adds	r7, #16
 80050cc:	46bd      	mov	sp, r7
 80050ce:	bd80      	pop	{r7, pc}

080050d0 <LSM6DSL_GYRO_SetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale the functional full scale to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSL_GYRO_SetFullScale(LSM6DSL_Object_t *pObj, int32_t FullScale)
{
 80050d0:	b580      	push	{r7, lr}
 80050d2:	b084      	sub	sp, #16
 80050d4:	af00      	add	r7, sp, #0
 80050d6:	6078      	str	r0, [r7, #4]
 80050d8:	6039      	str	r1, [r7, #0]
  lsm6dsl_fs_g_t new_fs;

  new_fs = (FullScale <= 125)  ? LSM6DSL_125dps
           : (FullScale <= 250)  ? LSM6DSL_250dps
 80050da:	683b      	ldr	r3, [r7, #0]
 80050dc:	2b7d      	cmp	r3, #125	; 0x7d
 80050de:	dd12      	ble.n	8005106 <LSM6DSL_GYRO_SetFullScale+0x36>
 80050e0:	683b      	ldr	r3, [r7, #0]
 80050e2:	2bfa      	cmp	r3, #250	; 0xfa
 80050e4:	dd0d      	ble.n	8005102 <LSM6DSL_GYRO_SetFullScale+0x32>
 80050e6:	683b      	ldr	r3, [r7, #0]
 80050e8:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80050ec:	dd07      	ble.n	80050fe <LSM6DSL_GYRO_SetFullScale+0x2e>
 80050ee:	683b      	ldr	r3, [r7, #0]
 80050f0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80050f4:	dc01      	bgt.n	80050fa <LSM6DSL_GYRO_SetFullScale+0x2a>
 80050f6:	2304      	movs	r3, #4
 80050f8:	e006      	b.n	8005108 <LSM6DSL_GYRO_SetFullScale+0x38>
 80050fa:	2306      	movs	r3, #6
 80050fc:	e004      	b.n	8005108 <LSM6DSL_GYRO_SetFullScale+0x38>
 80050fe:	2302      	movs	r3, #2
 8005100:	e002      	b.n	8005108 <LSM6DSL_GYRO_SetFullScale+0x38>
 8005102:	2300      	movs	r3, #0
 8005104:	e000      	b.n	8005108 <LSM6DSL_GYRO_SetFullScale+0x38>
 8005106:	2301      	movs	r3, #1
  new_fs = (FullScale <= 125)  ? LSM6DSL_125dps
 8005108:	73fb      	strb	r3, [r7, #15]
           : (FullScale <= 500)  ? LSM6DSL_500dps
           : (FullScale <= 1000) ? LSM6DSL_1000dps
           :                       LSM6DSL_2000dps;

  if (lsm6dsl_gy_full_scale_set(&(pObj->Ctx), new_fs) != LSM6DSL_OK)
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	3320      	adds	r3, #32
 800510e:	7bfa      	ldrb	r2, [r7, #15]
 8005110:	4611      	mov	r1, r2
 8005112:	4618      	mov	r0, r3
 8005114:	f000 fc0c 	bl	8005930 <lsm6dsl_gy_full_scale_set>
 8005118:	4603      	mov	r3, r0
 800511a:	2b00      	cmp	r3, #0
 800511c:	d002      	beq.n	8005124 <LSM6DSL_GYRO_SetFullScale+0x54>
  {
    return LSM6DSL_ERROR;
 800511e:	f04f 33ff 	mov.w	r3, #4294967295
 8005122:	e000      	b.n	8005126 <LSM6DSL_GYRO_SetFullScale+0x56>
  }

  return LSM6DSL_OK;
 8005124:	2300      	movs	r3, #0
}
 8005126:	4618      	mov	r0, r3
 8005128:	3710      	adds	r7, #16
 800512a:	46bd      	mov	sp, r7
 800512c:	bd80      	pop	{r7, pc}

0800512e <LSM6DSL_GYRO_GetAxesRaw>:
  * @param  pObj the device pObj
  * @param  Value pointer where the raw values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSL_GYRO_GetAxesRaw(LSM6DSL_Object_t *pObj, LSM6DSL_AxesRaw_t *Value)
{
 800512e:	b580      	push	{r7, lr}
 8005130:	b084      	sub	sp, #16
 8005132:	af00      	add	r7, sp, #0
 8005134:	6078      	str	r0, [r7, #4]
 8005136:	6039      	str	r1, [r7, #0]
  lsm6dsl_axis3bit16_t data_raw;

  /* Read raw data values. */
  if (lsm6dsl_angular_rate_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM6DSL_OK)
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	3320      	adds	r3, #32
 800513c:	f107 0208 	add.w	r2, r7, #8
 8005140:	4611      	mov	r1, r2
 8005142:	4618      	mov	r0, r3
 8005144:	f000 fd0a 	bl	8005b5c <lsm6dsl_angular_rate_raw_get>
 8005148:	4603      	mov	r3, r0
 800514a:	2b00      	cmp	r3, #0
 800514c:	d002      	beq.n	8005154 <LSM6DSL_GYRO_GetAxesRaw+0x26>
  {
    return LSM6DSL_ERROR;
 800514e:	f04f 33ff 	mov.w	r3, #4294967295
 8005152:	e00c      	b.n	800516e <LSM6DSL_GYRO_GetAxesRaw+0x40>
  }

  /* Format the data. */
  Value->x = data_raw.i16bit[0];
 8005154:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8005158:	683b      	ldr	r3, [r7, #0]
 800515a:	801a      	strh	r2, [r3, #0]
  Value->y = data_raw.i16bit[1];
 800515c:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8005160:	683b      	ldr	r3, [r7, #0]
 8005162:	805a      	strh	r2, [r3, #2]
  Value->z = data_raw.i16bit[2];
 8005164:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8005168:	683b      	ldr	r3, [r7, #0]
 800516a:	809a      	strh	r2, [r3, #4]

  return LSM6DSL_OK;
 800516c:	2300      	movs	r3, #0
}
 800516e:	4618      	mov	r0, r3
 8005170:	3710      	adds	r7, #16
 8005172:	46bd      	mov	sp, r7
 8005174:	bd80      	pop	{r7, pc}

08005176 <LSM6DSL_GYRO_GetAxes>:
  * @param  pObj the device pObj
  * @param  AngularRate pointer where the values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSL_GYRO_GetAxes(LSM6DSL_Object_t *pObj, LSM6DSL_Axes_t *AngularRate)
{
 8005176:	b580      	push	{r7, lr}
 8005178:	b086      	sub	sp, #24
 800517a:	af00      	add	r7, sp, #0
 800517c:	6078      	str	r0, [r7, #4]
 800517e:	6039      	str	r1, [r7, #0]
  lsm6dsl_axis3bit16_t data_raw;
  float sensitivity;

  /* Read raw data values. */
  if (lsm6dsl_angular_rate_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM6DSL_OK)
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	3320      	adds	r3, #32
 8005184:	f107 0210 	add.w	r2, r7, #16
 8005188:	4611      	mov	r1, r2
 800518a:	4618      	mov	r0, r3
 800518c:	f000 fce6 	bl	8005b5c <lsm6dsl_angular_rate_raw_get>
 8005190:	4603      	mov	r3, r0
 8005192:	2b00      	cmp	r3, #0
 8005194:	d002      	beq.n	800519c <LSM6DSL_GYRO_GetAxes+0x26>
  {
    return LSM6DSL_ERROR;
 8005196:	f04f 33ff 	mov.w	r3, #4294967295
 800519a:	e03c      	b.n	8005216 <LSM6DSL_GYRO_GetAxes+0xa0>
  }

  /* Get LSM6DSL actual sensitivity. */
  if (LSM6DSL_GYRO_GetSensitivity(pObj, &sensitivity) != LSM6DSL_OK)
 800519c:	f107 030c 	add.w	r3, r7, #12
 80051a0:	4619      	mov	r1, r3
 80051a2:	6878      	ldr	r0, [r7, #4]
 80051a4:	f7ff fe60 	bl	8004e68 <LSM6DSL_GYRO_GetSensitivity>
 80051a8:	4603      	mov	r3, r0
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d002      	beq.n	80051b4 <LSM6DSL_GYRO_GetAxes+0x3e>
  {
    return LSM6DSL_ERROR;
 80051ae:	f04f 33ff 	mov.w	r3, #4294967295
 80051b2:	e030      	b.n	8005216 <LSM6DSL_GYRO_GetAxes+0xa0>
  }

  /* Calculate the data. */
  AngularRate->x = (int32_t)((float)((float)data_raw.i16bit[0] * sensitivity));
 80051b4:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80051b8:	ee07 3a90 	vmov	s15, r3
 80051bc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80051c0:	edd7 7a03 	vldr	s15, [r7, #12]
 80051c4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80051c8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80051cc:	ee17 2a90 	vmov	r2, s15
 80051d0:	683b      	ldr	r3, [r7, #0]
 80051d2:	601a      	str	r2, [r3, #0]
  AngularRate->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 80051d4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80051d8:	ee07 3a90 	vmov	s15, r3
 80051dc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80051e0:	edd7 7a03 	vldr	s15, [r7, #12]
 80051e4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80051e8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80051ec:	ee17 2a90 	vmov	r2, s15
 80051f0:	683b      	ldr	r3, [r7, #0]
 80051f2:	605a      	str	r2, [r3, #4]
  AngularRate->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 80051f4:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80051f8:	ee07 3a90 	vmov	s15, r3
 80051fc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005200:	edd7 7a03 	vldr	s15, [r7, #12]
 8005204:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005208:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800520c:	ee17 2a90 	vmov	r2, s15
 8005210:	683b      	ldr	r3, [r7, #0]
 8005212:	609a      	str	r2, [r3, #8]

  return LSM6DSL_OK;
 8005214:	2300      	movs	r3, #0
}
 8005216:	4618      	mov	r0, r3
 8005218:	3718      	adds	r7, #24
 800521a:	46bd      	mov	sp, r7
 800521c:	bd80      	pop	{r7, pc}

0800521e <LSM6DSL_Write_Reg>:
  * @param  Reg address to be written
  * @param  Data value to be written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSL_Write_Reg(LSM6DSL_Object_t *pObj, uint8_t Reg, uint8_t Data)
{
 800521e:	b580      	push	{r7, lr}
 8005220:	b082      	sub	sp, #8
 8005222:	af00      	add	r7, sp, #0
 8005224:	6078      	str	r0, [r7, #4]
 8005226:	460b      	mov	r3, r1
 8005228:	70fb      	strb	r3, [r7, #3]
 800522a:	4613      	mov	r3, r2
 800522c:	70bb      	strb	r3, [r7, #2]
  if (lsm6dsl_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LSM6DSL_OK)
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	f103 0020 	add.w	r0, r3, #32
 8005234:	1cba      	adds	r2, r7, #2
 8005236:	78f9      	ldrb	r1, [r7, #3]
 8005238:	2301      	movs	r3, #1
 800523a:	f000 fa75 	bl	8005728 <lsm6dsl_write_reg>
 800523e:	4603      	mov	r3, r0
 8005240:	2b00      	cmp	r3, #0
 8005242:	d002      	beq.n	800524a <LSM6DSL_Write_Reg+0x2c>
  {
    return LSM6DSL_ERROR;
 8005244:	f04f 33ff 	mov.w	r3, #4294967295
 8005248:	e000      	b.n	800524c <LSM6DSL_Write_Reg+0x2e>
  }

  return LSM6DSL_OK;
 800524a:	2300      	movs	r3, #0
}
 800524c:	4618      	mov	r0, r3
 800524e:	3708      	adds	r7, #8
 8005250:	46bd      	mov	sp, r7
 8005252:	bd80      	pop	{r7, pc}

08005254 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled>:
  * @param  pObj the device pObj
  * @param  Odr the functional output data rate to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM6DSL_ACC_SetOutputDataRate_When_Enabled(LSM6DSL_Object_t *pObj, float Odr)
{
 8005254:	b580      	push	{r7, lr}
 8005256:	b084      	sub	sp, #16
 8005258:	af00      	add	r7, sp, #0
 800525a:	6078      	str	r0, [r7, #4]
 800525c:	ed87 0a00 	vstr	s0, [r7]
  lsm6dsl_odr_xl_t new_odr;

  new_odr = (Odr <=   12.5f) ? LSM6DSL_XL_ODR_12Hz5
            : (Odr <=   26.0f) ? LSM6DSL_XL_ODR_26Hz
 8005260:	edd7 7a00 	vldr	s15, [r7]
 8005264:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 8005268:	eef4 7ac7 	vcmpe.f32	s15, s14
 800526c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005270:	d801      	bhi.n	8005276 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x22>
 8005272:	2301      	movs	r3, #1
 8005274:	e058      	b.n	8005328 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 8005276:	edd7 7a00 	vldr	s15, [r7]
 800527a:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 800527e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005282:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005286:	d801      	bhi.n	800528c <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x38>
 8005288:	2302      	movs	r3, #2
 800528a:	e04d      	b.n	8005328 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 800528c:	edd7 7a00 	vldr	s15, [r7]
 8005290:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8005350 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xfc>
 8005294:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005298:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800529c:	d801      	bhi.n	80052a2 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x4e>
 800529e:	2303      	movs	r3, #3
 80052a0:	e042      	b.n	8005328 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 80052a2:	edd7 7a00 	vldr	s15, [r7]
 80052a6:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 8005354 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x100>
 80052aa:	eef4 7ac7 	vcmpe.f32	s15, s14
 80052ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80052b2:	d801      	bhi.n	80052b8 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x64>
 80052b4:	2304      	movs	r3, #4
 80052b6:	e037      	b.n	8005328 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 80052b8:	edd7 7a00 	vldr	s15, [r7]
 80052bc:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8005358 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x104>
 80052c0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80052c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80052c8:	d801      	bhi.n	80052ce <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x7a>
 80052ca:	2305      	movs	r3, #5
 80052cc:	e02c      	b.n	8005328 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 80052ce:	edd7 7a00 	vldr	s15, [r7]
 80052d2:	ed9f 7a22 	vldr	s14, [pc, #136]	; 800535c <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x108>
 80052d6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80052da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80052de:	d801      	bhi.n	80052e4 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x90>
 80052e0:	2306      	movs	r3, #6
 80052e2:	e021      	b.n	8005328 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 80052e4:	edd7 7a00 	vldr	s15, [r7]
 80052e8:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8005360 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x10c>
 80052ec:	eef4 7ac7 	vcmpe.f32	s15, s14
 80052f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80052f4:	d801      	bhi.n	80052fa <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xa6>
 80052f6:	2307      	movs	r3, #7
 80052f8:	e016      	b.n	8005328 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 80052fa:	edd7 7a00 	vldr	s15, [r7]
 80052fe:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8005364 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x110>
 8005302:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005306:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800530a:	d801      	bhi.n	8005310 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xbc>
 800530c:	2308      	movs	r3, #8
 800530e:	e00b      	b.n	8005328 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 8005310:	edd7 7a00 	vldr	s15, [r7]
 8005314:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8005368 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x114>
 8005318:	eef4 7ac7 	vcmpe.f32	s15, s14
 800531c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005320:	d801      	bhi.n	8005326 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd2>
 8005322:	2309      	movs	r3, #9
 8005324:	e000      	b.n	8005328 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 8005326:	230a      	movs	r3, #10
  new_odr = (Odr <=   12.5f) ? LSM6DSL_XL_ODR_12Hz5
 8005328:	73fb      	strb	r3, [r7, #15]
            : (Odr <= 1660.0f) ? LSM6DSL_XL_ODR_1k66Hz
            : (Odr <= 3330.0f) ? LSM6DSL_XL_ODR_3k33Hz
            :                    LSM6DSL_XL_ODR_6k66Hz;

  /* Output data rate selection. */
  if (lsm6dsl_xl_data_rate_set(&(pObj->Ctx), new_odr) != LSM6DSL_OK)
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	3320      	adds	r3, #32
 800532e:	7bfa      	ldrb	r2, [r7, #15]
 8005330:	4611      	mov	r1, r2
 8005332:	4618      	mov	r0, r3
 8005334:	f000 fa6e 	bl	8005814 <lsm6dsl_xl_data_rate_set>
 8005338:	4603      	mov	r3, r0
 800533a:	2b00      	cmp	r3, #0
 800533c:	d002      	beq.n	8005344 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xf0>
  {
    return LSM6DSL_ERROR;
 800533e:	f04f 33ff 	mov.w	r3, #4294967295
 8005342:	e000      	b.n	8005346 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xf2>
  }

  return LSM6DSL_OK;
 8005344:	2300      	movs	r3, #0
}
 8005346:	4618      	mov	r0, r3
 8005348:	3710      	adds	r7, #16
 800534a:	46bd      	mov	sp, r7
 800534c:	bd80      	pop	{r7, pc}
 800534e:	bf00      	nop
 8005350:	42500000 	.word	0x42500000
 8005354:	42d00000 	.word	0x42d00000
 8005358:	43500000 	.word	0x43500000
 800535c:	43d00000 	.word	0x43d00000
 8005360:	44504000 	.word	0x44504000
 8005364:	44cf8000 	.word	0x44cf8000
 8005368:	45502000 	.word	0x45502000

0800536c <LSM6DSL_ACC_SetOutputDataRate_When_Disabled>:
  * @param  pObj the device pObj
  * @param  Odr the functional output data rate to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM6DSL_ACC_SetOutputDataRate_When_Disabled(LSM6DSL_Object_t *pObj, float Odr)
{
 800536c:	b480      	push	{r7}
 800536e:	b083      	sub	sp, #12
 8005370:	af00      	add	r7, sp, #0
 8005372:	6078      	str	r0, [r7, #4]
 8005374:	ed87 0a00 	vstr	s0, [r7]
  pObj->acc_odr = (Odr <=   12.5f) ? LSM6DSL_XL_ODR_12Hz5
                  : (Odr <=   26.0f) ? LSM6DSL_XL_ODR_26Hz
 8005378:	edd7 7a00 	vldr	s15, [r7]
 800537c:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 8005380:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005384:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005388:	d801      	bhi.n	800538e <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0x22>
 800538a:	2301      	movs	r3, #1
 800538c:	e058      	b.n	8005440 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 800538e:	edd7 7a00 	vldr	s15, [r7]
 8005392:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 8005396:	eef4 7ac7 	vcmpe.f32	s15, s14
 800539a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800539e:	d801      	bhi.n	80053a4 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0x38>
 80053a0:	2302      	movs	r3, #2
 80053a2:	e04d      	b.n	8005440 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 80053a4:	edd7 7a00 	vldr	s15, [r7]
 80053a8:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 8005454 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xe8>
 80053ac:	eef4 7ac7 	vcmpe.f32	s15, s14
 80053b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80053b4:	d801      	bhi.n	80053ba <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0x4e>
 80053b6:	2303      	movs	r3, #3
 80053b8:	e042      	b.n	8005440 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 80053ba:	edd7 7a00 	vldr	s15, [r7]
 80053be:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8005458 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xec>
 80053c2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80053c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80053ca:	d801      	bhi.n	80053d0 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0x64>
 80053cc:	2304      	movs	r3, #4
 80053ce:	e037      	b.n	8005440 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 80053d0:	edd7 7a00 	vldr	s15, [r7]
 80053d4:	ed9f 7a21 	vldr	s14, [pc, #132]	; 800545c <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xf0>
 80053d8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80053dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80053e0:	d801      	bhi.n	80053e6 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0x7a>
 80053e2:	2305      	movs	r3, #5
 80053e4:	e02c      	b.n	8005440 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 80053e6:	edd7 7a00 	vldr	s15, [r7]
 80053ea:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8005460 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xf4>
 80053ee:	eef4 7ac7 	vcmpe.f32	s15, s14
 80053f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80053f6:	d801      	bhi.n	80053fc <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0x90>
 80053f8:	2306      	movs	r3, #6
 80053fa:	e021      	b.n	8005440 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 80053fc:	edd7 7a00 	vldr	s15, [r7]
 8005400:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8005464 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xf8>
 8005404:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005408:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800540c:	d801      	bhi.n	8005412 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xa6>
 800540e:	2307      	movs	r3, #7
 8005410:	e016      	b.n	8005440 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8005412:	edd7 7a00 	vldr	s15, [r7]
 8005416:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8005468 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xfc>
 800541a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800541e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005422:	d801      	bhi.n	8005428 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xbc>
 8005424:	2308      	movs	r3, #8
 8005426:	e00b      	b.n	8005440 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8005428:	edd7 7a00 	vldr	s15, [r7]
 800542c:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 800546c <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0x100>
 8005430:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005434:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005438:	d801      	bhi.n	800543e <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd2>
 800543a:	2309      	movs	r3, #9
 800543c:	e000      	b.n	8005440 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 800543e:	230a      	movs	r3, #10
  pObj->acc_odr = (Odr <=   12.5f) ? LSM6DSL_XL_ODR_12Hz5
 8005440:	687a      	ldr	r2, [r7, #4]
 8005442:	f882 3033 	strb.w	r3, [r2, #51]	; 0x33
                  : (Odr <=  833.0f) ? LSM6DSL_XL_ODR_833Hz
                  : (Odr <= 1660.0f) ? LSM6DSL_XL_ODR_1k66Hz
                  : (Odr <= 3330.0f) ? LSM6DSL_XL_ODR_3k33Hz
                  :                    LSM6DSL_XL_ODR_6k66Hz;

  return LSM6DSL_OK;
 8005446:	2300      	movs	r3, #0
}
 8005448:	4618      	mov	r0, r3
 800544a:	370c      	adds	r7, #12
 800544c:	46bd      	mov	sp, r7
 800544e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005452:	4770      	bx	lr
 8005454:	42500000 	.word	0x42500000
 8005458:	42d00000 	.word	0x42d00000
 800545c:	43500000 	.word	0x43500000
 8005460:	43d00000 	.word	0x43d00000
 8005464:	44504000 	.word	0x44504000
 8005468:	44cf8000 	.word	0x44cf8000
 800546c:	45502000 	.word	0x45502000

08005470 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled>:
  * @param  pObj the device pObj
  * @param  Odr the functional output data rate to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM6DSL_GYRO_SetOutputDataRate_When_Enabled(LSM6DSL_Object_t *pObj, float Odr)
{
 8005470:	b580      	push	{r7, lr}
 8005472:	b084      	sub	sp, #16
 8005474:	af00      	add	r7, sp, #0
 8005476:	6078      	str	r0, [r7, #4]
 8005478:	ed87 0a00 	vstr	s0, [r7]
  lsm6dsl_odr_g_t new_odr;

  new_odr = (Odr <=   12.5f) ? LSM6DSL_GY_ODR_12Hz5
            : (Odr <=   26.0f) ? LSM6DSL_GY_ODR_26Hz
 800547c:	edd7 7a00 	vldr	s15, [r7]
 8005480:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 8005484:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005488:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800548c:	d801      	bhi.n	8005492 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x22>
 800548e:	2301      	movs	r3, #1
 8005490:	e058      	b.n	8005544 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8005492:	edd7 7a00 	vldr	s15, [r7]
 8005496:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 800549a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800549e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80054a2:	d801      	bhi.n	80054a8 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x38>
 80054a4:	2302      	movs	r3, #2
 80054a6:	e04d      	b.n	8005544 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 80054a8:	edd7 7a00 	vldr	s15, [r7]
 80054ac:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 800556c <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xfc>
 80054b0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80054b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80054b8:	d801      	bhi.n	80054be <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x4e>
 80054ba:	2303      	movs	r3, #3
 80054bc:	e042      	b.n	8005544 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 80054be:	edd7 7a00 	vldr	s15, [r7]
 80054c2:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 8005570 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x100>
 80054c6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80054ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80054ce:	d801      	bhi.n	80054d4 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x64>
 80054d0:	2304      	movs	r3, #4
 80054d2:	e037      	b.n	8005544 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 80054d4:	edd7 7a00 	vldr	s15, [r7]
 80054d8:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8005574 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x104>
 80054dc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80054e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80054e4:	d801      	bhi.n	80054ea <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x7a>
 80054e6:	2305      	movs	r3, #5
 80054e8:	e02c      	b.n	8005544 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 80054ea:	edd7 7a00 	vldr	s15, [r7]
 80054ee:	ed9f 7a22 	vldr	s14, [pc, #136]	; 8005578 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x108>
 80054f2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80054f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80054fa:	d801      	bhi.n	8005500 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x90>
 80054fc:	2306      	movs	r3, #6
 80054fe:	e021      	b.n	8005544 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8005500:	edd7 7a00 	vldr	s15, [r7]
 8005504:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 800557c <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x10c>
 8005508:	eef4 7ac7 	vcmpe.f32	s15, s14
 800550c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005510:	d801      	bhi.n	8005516 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xa6>
 8005512:	2307      	movs	r3, #7
 8005514:	e016      	b.n	8005544 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8005516:	edd7 7a00 	vldr	s15, [r7]
 800551a:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8005580 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x110>
 800551e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005522:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005526:	d801      	bhi.n	800552c <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xbc>
 8005528:	2308      	movs	r3, #8
 800552a:	e00b      	b.n	8005544 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 800552c:	edd7 7a00 	vldr	s15, [r7]
 8005530:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8005584 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x114>
 8005534:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005538:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800553c:	d801      	bhi.n	8005542 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xd2>
 800553e:	2309      	movs	r3, #9
 8005540:	e000      	b.n	8005544 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8005542:	230a      	movs	r3, #10
  new_odr = (Odr <=   12.5f) ? LSM6DSL_GY_ODR_12Hz5
 8005544:	73fb      	strb	r3, [r7, #15]
            : (Odr <= 1660.0f) ? LSM6DSL_GY_ODR_1k66Hz
            : (Odr <= 3330.0f) ? LSM6DSL_GY_ODR_3k33Hz
            :                    LSM6DSL_GY_ODR_6k66Hz;

  /* Output data rate selection. */
  if (lsm6dsl_gy_data_rate_set(&(pObj->Ctx), new_odr) != LSM6DSL_OK)
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	3320      	adds	r3, #32
 800554a:	7bfa      	ldrb	r2, [r7, #15]
 800554c:	4611      	mov	r1, r2
 800554e:	4618      	mov	r0, r3
 8005550:	f000 fa56 	bl	8005a00 <lsm6dsl_gy_data_rate_set>
 8005554:	4603      	mov	r3, r0
 8005556:	2b00      	cmp	r3, #0
 8005558:	d002      	beq.n	8005560 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xf0>
  {
    return LSM6DSL_ERROR;
 800555a:	f04f 33ff 	mov.w	r3, #4294967295
 800555e:	e000      	b.n	8005562 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xf2>
  }

  return LSM6DSL_OK;
 8005560:	2300      	movs	r3, #0
}
 8005562:	4618      	mov	r0, r3
 8005564:	3710      	adds	r7, #16
 8005566:	46bd      	mov	sp, r7
 8005568:	bd80      	pop	{r7, pc}
 800556a:	bf00      	nop
 800556c:	42500000 	.word	0x42500000
 8005570:	42d00000 	.word	0x42d00000
 8005574:	43500000 	.word	0x43500000
 8005578:	43d00000 	.word	0x43d00000
 800557c:	44504000 	.word	0x44504000
 8005580:	44cf8000 	.word	0x44cf8000
 8005584:	45502000 	.word	0x45502000

08005588 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled>:
  * @param  pObj the device pObj
  * @param  Odr the functional output data rate to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM6DSL_GYRO_SetOutputDataRate_When_Disabled(LSM6DSL_Object_t *pObj, float Odr)
{
 8005588:	b480      	push	{r7}
 800558a:	b083      	sub	sp, #12
 800558c:	af00      	add	r7, sp, #0
 800558e:	6078      	str	r0, [r7, #4]
 8005590:	ed87 0a00 	vstr	s0, [r7]
  pObj->gyro_odr = (Odr <=   12.5f) ? LSM6DSL_GY_ODR_12Hz5
                   : (Odr <=   26.0f) ? LSM6DSL_GY_ODR_26Hz
 8005594:	edd7 7a00 	vldr	s15, [r7]
 8005598:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 800559c:	eef4 7ac7 	vcmpe.f32	s15, s14
 80055a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80055a4:	d801      	bhi.n	80055aa <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0x22>
 80055a6:	2301      	movs	r3, #1
 80055a8:	e058      	b.n	800565c <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 80055aa:	edd7 7a00 	vldr	s15, [r7]
 80055ae:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 80055b2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80055b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80055ba:	d801      	bhi.n	80055c0 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0x38>
 80055bc:	2302      	movs	r3, #2
 80055be:	e04d      	b.n	800565c <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 80055c0:	edd7 7a00 	vldr	s15, [r7]
 80055c4:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 8005670 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xe8>
 80055c8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80055cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80055d0:	d801      	bhi.n	80055d6 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0x4e>
 80055d2:	2303      	movs	r3, #3
 80055d4:	e042      	b.n	800565c <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 80055d6:	edd7 7a00 	vldr	s15, [r7]
 80055da:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8005674 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xec>
 80055de:	eef4 7ac7 	vcmpe.f32	s15, s14
 80055e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80055e6:	d801      	bhi.n	80055ec <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0x64>
 80055e8:	2304      	movs	r3, #4
 80055ea:	e037      	b.n	800565c <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 80055ec:	edd7 7a00 	vldr	s15, [r7]
 80055f0:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8005678 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xf0>
 80055f4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80055f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80055fc:	d801      	bhi.n	8005602 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0x7a>
 80055fe:	2305      	movs	r3, #5
 8005600:	e02c      	b.n	800565c <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8005602:	edd7 7a00 	vldr	s15, [r7]
 8005606:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 800567c <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xf4>
 800560a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800560e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005612:	d801      	bhi.n	8005618 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0x90>
 8005614:	2306      	movs	r3, #6
 8005616:	e021      	b.n	800565c <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8005618:	edd7 7a00 	vldr	s15, [r7]
 800561c:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8005680 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xf8>
 8005620:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005624:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005628:	d801      	bhi.n	800562e <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xa6>
 800562a:	2307      	movs	r3, #7
 800562c:	e016      	b.n	800565c <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 800562e:	edd7 7a00 	vldr	s15, [r7]
 8005632:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8005684 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xfc>
 8005636:	eef4 7ac7 	vcmpe.f32	s15, s14
 800563a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800563e:	d801      	bhi.n	8005644 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xbc>
 8005640:	2308      	movs	r3, #8
 8005642:	e00b      	b.n	800565c <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8005644:	edd7 7a00 	vldr	s15, [r7]
 8005648:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8005688 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0x100>
 800564c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005650:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005654:	d801      	bhi.n	800565a <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xd2>
 8005656:	2309      	movs	r3, #9
 8005658:	e000      	b.n	800565c <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 800565a:	230a      	movs	r3, #10
  pObj->gyro_odr = (Odr <=   12.5f) ? LSM6DSL_GY_ODR_12Hz5
 800565c:	687a      	ldr	r2, [r7, #4]
 800565e:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
                   : (Odr <=  833.0f) ? LSM6DSL_GY_ODR_833Hz
                   : (Odr <= 1660.0f) ? LSM6DSL_GY_ODR_1k66Hz
                   : (Odr <= 3330.0f) ? LSM6DSL_GY_ODR_3k33Hz
                   :                    LSM6DSL_GY_ODR_6k66Hz;

  return LSM6DSL_OK;
 8005662:	2300      	movs	r3, #0
}
 8005664:	4618      	mov	r0, r3
 8005666:	370c      	adds	r7, #12
 8005668:	46bd      	mov	sp, r7
 800566a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800566e:	4770      	bx	lr
 8005670:	42500000 	.word	0x42500000
 8005674:	42d00000 	.word	0x42d00000
 8005678:	43500000 	.word	0x43500000
 800567c:	43d00000 	.word	0x43d00000
 8005680:	44504000 	.word	0x44504000
 8005684:	44cf8000 	.word	0x44cf8000
 8005688:	45502000 	.word	0x45502000

0800568c <ReadRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 800568c:	b590      	push	{r4, r7, lr}
 800568e:	b087      	sub	sp, #28
 8005690:	af00      	add	r7, sp, #0
 8005692:	60f8      	str	r0, [r7, #12]
 8005694:	607a      	str	r2, [r7, #4]
 8005696:	461a      	mov	r2, r3
 8005698:	460b      	mov	r3, r1
 800569a:	72fb      	strb	r3, [r7, #11]
 800569c:	4613      	mov	r3, r2
 800569e:	813b      	strh	r3, [r7, #8]
  LSM6DSL_Object_t *pObj = (LSM6DSL_Object_t *)Handle;
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 80056a4:	697b      	ldr	r3, [r7, #20]
 80056a6:	695c      	ldr	r4, [r3, #20]
 80056a8:	697b      	ldr	r3, [r7, #20]
 80056aa:	7b1b      	ldrb	r3, [r3, #12]
 80056ac:	b298      	uxth	r0, r3
 80056ae:	7afb      	ldrb	r3, [r7, #11]
 80056b0:	b299      	uxth	r1, r3
 80056b2:	893b      	ldrh	r3, [r7, #8]
 80056b4:	687a      	ldr	r2, [r7, #4]
 80056b6:	47a0      	blx	r4
 80056b8:	4603      	mov	r3, r0
}
 80056ba:	4618      	mov	r0, r3
 80056bc:	371c      	adds	r7, #28
 80056be:	46bd      	mov	sp, r7
 80056c0:	bd90      	pop	{r4, r7, pc}

080056c2 <WriteRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 80056c2:	b590      	push	{r4, r7, lr}
 80056c4:	b087      	sub	sp, #28
 80056c6:	af00      	add	r7, sp, #0
 80056c8:	60f8      	str	r0, [r7, #12]
 80056ca:	607a      	str	r2, [r7, #4]
 80056cc:	461a      	mov	r2, r3
 80056ce:	460b      	mov	r3, r1
 80056d0:	72fb      	strb	r3, [r7, #11]
 80056d2:	4613      	mov	r3, r2
 80056d4:	813b      	strh	r3, [r7, #8]
  LSM6DSL_Object_t *pObj = (LSM6DSL_Object_t *)Handle;
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	617b      	str	r3, [r7, #20]

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 80056da:	697b      	ldr	r3, [r7, #20]
 80056dc:	691c      	ldr	r4, [r3, #16]
 80056de:	697b      	ldr	r3, [r7, #20]
 80056e0:	7b1b      	ldrb	r3, [r3, #12]
 80056e2:	b298      	uxth	r0, r3
 80056e4:	7afb      	ldrb	r3, [r7, #11]
 80056e6:	b299      	uxth	r1, r3
 80056e8:	893b      	ldrh	r3, [r7, #8]
 80056ea:	687a      	ldr	r2, [r7, #4]
 80056ec:	47a0      	blx	r4
 80056ee:	4603      	mov	r3, r0
}
 80056f0:	4618      	mov	r0, r3
 80056f2:	371c      	adds	r7, #28
 80056f4:	46bd      	mov	sp, r7
 80056f6:	bd90      	pop	{r4, r7, pc}

080056f8 <lsm6dsl_read_reg>:
  *
  */
int32_t lsm6dsl_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                         uint8_t *data,
                         uint16_t len)
{
 80056f8:	b590      	push	{r4, r7, lr}
 80056fa:	b087      	sub	sp, #28
 80056fc:	af00      	add	r7, sp, #0
 80056fe:	60f8      	str	r0, [r7, #12]
 8005700:	607a      	str	r2, [r7, #4]
 8005702:	461a      	mov	r2, r3
 8005704:	460b      	mov	r3, r1
 8005706:	72fb      	strb	r3, [r7, #11]
 8005708:	4613      	mov	r3, r2
 800570a:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	685c      	ldr	r4, [r3, #4]
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	68d8      	ldr	r0, [r3, #12]
 8005714:	893b      	ldrh	r3, [r7, #8]
 8005716:	7af9      	ldrb	r1, [r7, #11]
 8005718:	687a      	ldr	r2, [r7, #4]
 800571a:	47a0      	blx	r4
 800571c:	6178      	str	r0, [r7, #20]

  return ret;
 800571e:	697b      	ldr	r3, [r7, #20]
}
 8005720:	4618      	mov	r0, r3
 8005722:	371c      	adds	r7, #28
 8005724:	46bd      	mov	sp, r7
 8005726:	bd90      	pop	{r4, r7, pc}

08005728 <lsm6dsl_write_reg>:
  *
  */
int32_t lsm6dsl_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                          uint8_t *data,
                          uint16_t len)
{
 8005728:	b590      	push	{r4, r7, lr}
 800572a:	b087      	sub	sp, #28
 800572c:	af00      	add	r7, sp, #0
 800572e:	60f8      	str	r0, [r7, #12]
 8005730:	607a      	str	r2, [r7, #4]
 8005732:	461a      	mov	r2, r3
 8005734:	460b      	mov	r3, r1
 8005736:	72fb      	strb	r3, [r7, #11]
 8005738:	4613      	mov	r3, r2
 800573a:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	681c      	ldr	r4, [r3, #0]
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	68d8      	ldr	r0, [r3, #12]
 8005744:	893b      	ldrh	r3, [r7, #8]
 8005746:	7af9      	ldrb	r1, [r7, #11]
 8005748:	687a      	ldr	r2, [r7, #4]
 800574a:	47a0      	blx	r4
 800574c:	6178      	str	r0, [r7, #20]

  return ret;
 800574e:	697b      	ldr	r3, [r7, #20]
}
 8005750:	4618      	mov	r0, r3
 8005752:	371c      	adds	r7, #28
 8005754:	46bd      	mov	sp, r7
 8005756:	bd90      	pop	{r4, r7, pc}

08005758 <lsm6dsl_xl_full_scale_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_xl_full_scale_set(stmdev_ctx_t *ctx,
                                  lsm6dsl_fs_xl_t val)
{
 8005758:	b580      	push	{r7, lr}
 800575a:	b084      	sub	sp, #16
 800575c:	af00      	add	r7, sp, #0
 800575e:	6078      	str	r0, [r7, #4]
 8005760:	460b      	mov	r3, r1
 8005762:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl1_xl_t ctrl1_xl;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 8005764:	f107 0208 	add.w	r2, r7, #8
 8005768:	2301      	movs	r3, #1
 800576a:	2110      	movs	r1, #16
 800576c:	6878      	ldr	r0, [r7, #4]
 800576e:	f7ff ffc3 	bl	80056f8 <lsm6dsl_read_reg>
 8005772:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	2b00      	cmp	r3, #0
 8005778:	d10f      	bne.n	800579a <lsm6dsl_xl_full_scale_set+0x42>
  {
    ctrl1_xl.fs_xl = (uint8_t) val;
 800577a:	78fb      	ldrb	r3, [r7, #3]
 800577c:	f003 0303 	and.w	r3, r3, #3
 8005780:	b2da      	uxtb	r2, r3
 8005782:	7a3b      	ldrb	r3, [r7, #8]
 8005784:	f362 0383 	bfi	r3, r2, #2, #2
 8005788:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 800578a:	f107 0208 	add.w	r2, r7, #8
 800578e:	2301      	movs	r3, #1
 8005790:	2110      	movs	r1, #16
 8005792:	6878      	ldr	r0, [r7, #4]
 8005794:	f7ff ffc8 	bl	8005728 <lsm6dsl_write_reg>
 8005798:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800579a:	68fb      	ldr	r3, [r7, #12]
}
 800579c:	4618      	mov	r0, r3
 800579e:	3710      	adds	r7, #16
 80057a0:	46bd      	mov	sp, r7
 80057a2:	bd80      	pop	{r7, pc}

080057a4 <lsm6dsl_xl_full_scale_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_xl_full_scale_get(stmdev_ctx_t *ctx,
                                  lsm6dsl_fs_xl_t *val)
{
 80057a4:	b580      	push	{r7, lr}
 80057a6:	b084      	sub	sp, #16
 80057a8:	af00      	add	r7, sp, #0
 80057aa:	6078      	str	r0, [r7, #4]
 80057ac:	6039      	str	r1, [r7, #0]
  lsm6dsl_ctrl1_xl_t ctrl1_xl;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 80057ae:	f107 0208 	add.w	r2, r7, #8
 80057b2:	2301      	movs	r3, #1
 80057b4:	2110      	movs	r1, #16
 80057b6:	6878      	ldr	r0, [r7, #4]
 80057b8:	f7ff ff9e 	bl	80056f8 <lsm6dsl_read_reg>
 80057bc:	60f8      	str	r0, [r7, #12]

  switch (ctrl1_xl.fs_xl)
 80057be:	7a3b      	ldrb	r3, [r7, #8]
 80057c0:	f3c3 0381 	ubfx	r3, r3, #2, #2
 80057c4:	b2db      	uxtb	r3, r3
 80057c6:	2b03      	cmp	r3, #3
 80057c8:	d81a      	bhi.n	8005800 <lsm6dsl_xl_full_scale_get+0x5c>
 80057ca:	a201      	add	r2, pc, #4	; (adr r2, 80057d0 <lsm6dsl_xl_full_scale_get+0x2c>)
 80057cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057d0:	080057e1 	.word	0x080057e1
 80057d4:	080057e9 	.word	0x080057e9
 80057d8:	080057f1 	.word	0x080057f1
 80057dc:	080057f9 	.word	0x080057f9
  {
    case LSM6DSL_2g:
      *val = LSM6DSL_2g;
 80057e0:	683b      	ldr	r3, [r7, #0]
 80057e2:	2200      	movs	r2, #0
 80057e4:	701a      	strb	r2, [r3, #0]
      break;
 80057e6:	e00f      	b.n	8005808 <lsm6dsl_xl_full_scale_get+0x64>

    case LSM6DSL_16g:
      *val = LSM6DSL_16g;
 80057e8:	683b      	ldr	r3, [r7, #0]
 80057ea:	2201      	movs	r2, #1
 80057ec:	701a      	strb	r2, [r3, #0]
      break;
 80057ee:	e00b      	b.n	8005808 <lsm6dsl_xl_full_scale_get+0x64>

    case LSM6DSL_4g:
      *val = LSM6DSL_4g;
 80057f0:	683b      	ldr	r3, [r7, #0]
 80057f2:	2202      	movs	r2, #2
 80057f4:	701a      	strb	r2, [r3, #0]
      break;
 80057f6:	e007      	b.n	8005808 <lsm6dsl_xl_full_scale_get+0x64>

    case LSM6DSL_8g:
      *val = LSM6DSL_8g;
 80057f8:	683b      	ldr	r3, [r7, #0]
 80057fa:	2203      	movs	r2, #3
 80057fc:	701a      	strb	r2, [r3, #0]
      break;
 80057fe:	e003      	b.n	8005808 <lsm6dsl_xl_full_scale_get+0x64>

    default:
      *val = LSM6DSL_XL_FS_ND;
 8005800:	683b      	ldr	r3, [r7, #0]
 8005802:	2204      	movs	r2, #4
 8005804:	701a      	strb	r2, [r3, #0]
      break;
 8005806:	bf00      	nop
  }

  return ret;
 8005808:	68fb      	ldr	r3, [r7, #12]
}
 800580a:	4618      	mov	r0, r3
 800580c:	3710      	adds	r7, #16
 800580e:	46bd      	mov	sp, r7
 8005810:	bd80      	pop	{r7, pc}
 8005812:	bf00      	nop

08005814 <lsm6dsl_xl_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_xl_data_rate_set(stmdev_ctx_t *ctx,
                                 lsm6dsl_odr_xl_t val)
{
 8005814:	b580      	push	{r7, lr}
 8005816:	b084      	sub	sp, #16
 8005818:	af00      	add	r7, sp, #0
 800581a:	6078      	str	r0, [r7, #4]
 800581c:	460b      	mov	r3, r1
 800581e:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl1_xl_t ctrl1_xl;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 8005820:	f107 0208 	add.w	r2, r7, #8
 8005824:	2301      	movs	r3, #1
 8005826:	2110      	movs	r1, #16
 8005828:	6878      	ldr	r0, [r7, #4]
 800582a:	f7ff ff65 	bl	80056f8 <lsm6dsl_read_reg>
 800582e:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	2b00      	cmp	r3, #0
 8005834:	d10f      	bne.n	8005856 <lsm6dsl_xl_data_rate_set+0x42>
  {
    ctrl1_xl.odr_xl = (uint8_t) val;
 8005836:	78fb      	ldrb	r3, [r7, #3]
 8005838:	f003 030f 	and.w	r3, r3, #15
 800583c:	b2da      	uxtb	r2, r3
 800583e:	7a3b      	ldrb	r3, [r7, #8]
 8005840:	f362 1307 	bfi	r3, r2, #4, #4
 8005844:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 8005846:	f107 0208 	add.w	r2, r7, #8
 800584a:	2301      	movs	r3, #1
 800584c:	2110      	movs	r1, #16
 800584e:	6878      	ldr	r0, [r7, #4]
 8005850:	f7ff ff6a 	bl	8005728 <lsm6dsl_write_reg>
 8005854:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8005856:	68fb      	ldr	r3, [r7, #12]
}
 8005858:	4618      	mov	r0, r3
 800585a:	3710      	adds	r7, #16
 800585c:	46bd      	mov	sp, r7
 800585e:	bd80      	pop	{r7, pc}

08005860 <lsm6dsl_xl_data_rate_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_xl_data_rate_get(stmdev_ctx_t *ctx,
                                 lsm6dsl_odr_xl_t *val)
{
 8005860:	b580      	push	{r7, lr}
 8005862:	b084      	sub	sp, #16
 8005864:	af00      	add	r7, sp, #0
 8005866:	6078      	str	r0, [r7, #4]
 8005868:	6039      	str	r1, [r7, #0]
  lsm6dsl_ctrl1_xl_t ctrl1_xl;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 800586a:	f107 0208 	add.w	r2, r7, #8
 800586e:	2301      	movs	r3, #1
 8005870:	2110      	movs	r1, #16
 8005872:	6878      	ldr	r0, [r7, #4]
 8005874:	f7ff ff40 	bl	80056f8 <lsm6dsl_read_reg>
 8005878:	60f8      	str	r0, [r7, #12]

  switch (ctrl1_xl.odr_xl)
 800587a:	7a3b      	ldrb	r3, [r7, #8]
 800587c:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8005880:	b2db      	uxtb	r3, r3
 8005882:	2b0b      	cmp	r3, #11
 8005884:	d84a      	bhi.n	800591c <lsm6dsl_xl_data_rate_get+0xbc>
 8005886:	a201      	add	r2, pc, #4	; (adr r2, 800588c <lsm6dsl_xl_data_rate_get+0x2c>)
 8005888:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800588c:	080058bd 	.word	0x080058bd
 8005890:	080058c5 	.word	0x080058c5
 8005894:	080058cd 	.word	0x080058cd
 8005898:	080058d5 	.word	0x080058d5
 800589c:	080058dd 	.word	0x080058dd
 80058a0:	080058e5 	.word	0x080058e5
 80058a4:	080058ed 	.word	0x080058ed
 80058a8:	080058f5 	.word	0x080058f5
 80058ac:	080058fd 	.word	0x080058fd
 80058b0:	08005905 	.word	0x08005905
 80058b4:	0800590d 	.word	0x0800590d
 80058b8:	08005915 	.word	0x08005915
  {
    case LSM6DSL_XL_ODR_OFF:
      *val = LSM6DSL_XL_ODR_OFF;
 80058bc:	683b      	ldr	r3, [r7, #0]
 80058be:	2200      	movs	r2, #0
 80058c0:	701a      	strb	r2, [r3, #0]
      break;
 80058c2:	e02f      	b.n	8005924 <lsm6dsl_xl_data_rate_get+0xc4>

    case LSM6DSL_XL_ODR_12Hz5:
      *val = LSM6DSL_XL_ODR_12Hz5;
 80058c4:	683b      	ldr	r3, [r7, #0]
 80058c6:	2201      	movs	r2, #1
 80058c8:	701a      	strb	r2, [r3, #0]
      break;
 80058ca:	e02b      	b.n	8005924 <lsm6dsl_xl_data_rate_get+0xc4>

    case LSM6DSL_XL_ODR_26Hz:
      *val = LSM6DSL_XL_ODR_26Hz;
 80058cc:	683b      	ldr	r3, [r7, #0]
 80058ce:	2202      	movs	r2, #2
 80058d0:	701a      	strb	r2, [r3, #0]
      break;
 80058d2:	e027      	b.n	8005924 <lsm6dsl_xl_data_rate_get+0xc4>

    case LSM6DSL_XL_ODR_52Hz:
      *val = LSM6DSL_XL_ODR_52Hz;
 80058d4:	683b      	ldr	r3, [r7, #0]
 80058d6:	2203      	movs	r2, #3
 80058d8:	701a      	strb	r2, [r3, #0]
      break;
 80058da:	e023      	b.n	8005924 <lsm6dsl_xl_data_rate_get+0xc4>

    case LSM6DSL_XL_ODR_104Hz:
      *val = LSM6DSL_XL_ODR_104Hz;
 80058dc:	683b      	ldr	r3, [r7, #0]
 80058de:	2204      	movs	r2, #4
 80058e0:	701a      	strb	r2, [r3, #0]
      break;
 80058e2:	e01f      	b.n	8005924 <lsm6dsl_xl_data_rate_get+0xc4>

    case LSM6DSL_XL_ODR_208Hz:
      *val = LSM6DSL_XL_ODR_208Hz;
 80058e4:	683b      	ldr	r3, [r7, #0]
 80058e6:	2205      	movs	r2, #5
 80058e8:	701a      	strb	r2, [r3, #0]
      break;
 80058ea:	e01b      	b.n	8005924 <lsm6dsl_xl_data_rate_get+0xc4>

    case LSM6DSL_XL_ODR_416Hz:
      *val = LSM6DSL_XL_ODR_416Hz;
 80058ec:	683b      	ldr	r3, [r7, #0]
 80058ee:	2206      	movs	r2, #6
 80058f0:	701a      	strb	r2, [r3, #0]
      break;
 80058f2:	e017      	b.n	8005924 <lsm6dsl_xl_data_rate_get+0xc4>

    case LSM6DSL_XL_ODR_833Hz:
      *val = LSM6DSL_XL_ODR_833Hz;
 80058f4:	683b      	ldr	r3, [r7, #0]
 80058f6:	2207      	movs	r2, #7
 80058f8:	701a      	strb	r2, [r3, #0]
      break;
 80058fa:	e013      	b.n	8005924 <lsm6dsl_xl_data_rate_get+0xc4>

    case LSM6DSL_XL_ODR_1k66Hz:
      *val = LSM6DSL_XL_ODR_1k66Hz;
 80058fc:	683b      	ldr	r3, [r7, #0]
 80058fe:	2208      	movs	r2, #8
 8005900:	701a      	strb	r2, [r3, #0]
      break;
 8005902:	e00f      	b.n	8005924 <lsm6dsl_xl_data_rate_get+0xc4>

    case LSM6DSL_XL_ODR_3k33Hz:
      *val = LSM6DSL_XL_ODR_3k33Hz;
 8005904:	683b      	ldr	r3, [r7, #0]
 8005906:	2209      	movs	r2, #9
 8005908:	701a      	strb	r2, [r3, #0]
      break;
 800590a:	e00b      	b.n	8005924 <lsm6dsl_xl_data_rate_get+0xc4>

    case LSM6DSL_XL_ODR_6k66Hz:
      *val = LSM6DSL_XL_ODR_6k66Hz;
 800590c:	683b      	ldr	r3, [r7, #0]
 800590e:	220a      	movs	r2, #10
 8005910:	701a      	strb	r2, [r3, #0]
      break;
 8005912:	e007      	b.n	8005924 <lsm6dsl_xl_data_rate_get+0xc4>

    case LSM6DSL_XL_ODR_1Hz6:
      *val = LSM6DSL_XL_ODR_1Hz6;
 8005914:	683b      	ldr	r3, [r7, #0]
 8005916:	220b      	movs	r2, #11
 8005918:	701a      	strb	r2, [r3, #0]
      break;
 800591a:	e003      	b.n	8005924 <lsm6dsl_xl_data_rate_get+0xc4>

    default:
      *val = LSM6DSL_XL_ODR_ND;
 800591c:	683b      	ldr	r3, [r7, #0]
 800591e:	220c      	movs	r2, #12
 8005920:	701a      	strb	r2, [r3, #0]
      break;
 8005922:	bf00      	nop
  }

  return ret;
 8005924:	68fb      	ldr	r3, [r7, #12]
}
 8005926:	4618      	mov	r0, r3
 8005928:	3710      	adds	r7, #16
 800592a:	46bd      	mov	sp, r7
 800592c:	bd80      	pop	{r7, pc}
 800592e:	bf00      	nop

08005930 <lsm6dsl_gy_full_scale_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_gy_full_scale_set(stmdev_ctx_t *ctx,
                                  lsm6dsl_fs_g_t val)
{
 8005930:	b580      	push	{r7, lr}
 8005932:	b084      	sub	sp, #16
 8005934:	af00      	add	r7, sp, #0
 8005936:	6078      	str	r0, [r7, #4]
 8005938:	460b      	mov	r3, r1
 800593a:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl2_g_t ctrl2_g;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 800593c:	f107 0208 	add.w	r2, r7, #8
 8005940:	2301      	movs	r3, #1
 8005942:	2111      	movs	r1, #17
 8005944:	6878      	ldr	r0, [r7, #4]
 8005946:	f7ff fed7 	bl	80056f8 <lsm6dsl_read_reg>
 800594a:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	2b00      	cmp	r3, #0
 8005950:	d10f      	bne.n	8005972 <lsm6dsl_gy_full_scale_set+0x42>
  {
    ctrl2_g.fs_g = (uint8_t) val;
 8005952:	78fb      	ldrb	r3, [r7, #3]
 8005954:	f003 0307 	and.w	r3, r3, #7
 8005958:	b2da      	uxtb	r2, r3
 800595a:	7a3b      	ldrb	r3, [r7, #8]
 800595c:	f362 0343 	bfi	r3, r2, #1, #3
 8005960:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 8005962:	f107 0208 	add.w	r2, r7, #8
 8005966:	2301      	movs	r3, #1
 8005968:	2111      	movs	r1, #17
 800596a:	6878      	ldr	r0, [r7, #4]
 800596c:	f7ff fedc 	bl	8005728 <lsm6dsl_write_reg>
 8005970:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8005972:	68fb      	ldr	r3, [r7, #12]
}
 8005974:	4618      	mov	r0, r3
 8005976:	3710      	adds	r7, #16
 8005978:	46bd      	mov	sp, r7
 800597a:	bd80      	pop	{r7, pc}

0800597c <lsm6dsl_gy_full_scale_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_gy_full_scale_get(stmdev_ctx_t *ctx,
                                  lsm6dsl_fs_g_t *val)
{
 800597c:	b580      	push	{r7, lr}
 800597e:	b084      	sub	sp, #16
 8005980:	af00      	add	r7, sp, #0
 8005982:	6078      	str	r0, [r7, #4]
 8005984:	6039      	str	r1, [r7, #0]
  lsm6dsl_ctrl2_g_t ctrl2_g;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 8005986:	f107 0208 	add.w	r2, r7, #8
 800598a:	2301      	movs	r3, #1
 800598c:	2111      	movs	r1, #17
 800598e:	6878      	ldr	r0, [r7, #4]
 8005990:	f7ff feb2 	bl	80056f8 <lsm6dsl_read_reg>
 8005994:	60f8      	str	r0, [r7, #12]

  switch (ctrl2_g.fs_g)
 8005996:	7a3b      	ldrb	r3, [r7, #8]
 8005998:	f3c3 0342 	ubfx	r3, r3, #1, #3
 800599c:	b2db      	uxtb	r3, r3
 800599e:	2b06      	cmp	r3, #6
 80059a0:	d824      	bhi.n	80059ec <lsm6dsl_gy_full_scale_get+0x70>
 80059a2:	a201      	add	r2, pc, #4	; (adr r2, 80059a8 <lsm6dsl_gy_full_scale_get+0x2c>)
 80059a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059a8:	080059c5 	.word	0x080059c5
 80059ac:	080059cd 	.word	0x080059cd
 80059b0:	080059d5 	.word	0x080059d5
 80059b4:	080059ed 	.word	0x080059ed
 80059b8:	080059dd 	.word	0x080059dd
 80059bc:	080059ed 	.word	0x080059ed
 80059c0:	080059e5 	.word	0x080059e5
  {
    case LSM6DSL_250dps:
      *val = LSM6DSL_250dps;
 80059c4:	683b      	ldr	r3, [r7, #0]
 80059c6:	2200      	movs	r2, #0
 80059c8:	701a      	strb	r2, [r3, #0]
      break;
 80059ca:	e013      	b.n	80059f4 <lsm6dsl_gy_full_scale_get+0x78>

    case LSM6DSL_125dps:
      *val = LSM6DSL_125dps;
 80059cc:	683b      	ldr	r3, [r7, #0]
 80059ce:	2201      	movs	r2, #1
 80059d0:	701a      	strb	r2, [r3, #0]
      break;
 80059d2:	e00f      	b.n	80059f4 <lsm6dsl_gy_full_scale_get+0x78>

    case LSM6DSL_500dps:
      *val = LSM6DSL_500dps;
 80059d4:	683b      	ldr	r3, [r7, #0]
 80059d6:	2202      	movs	r2, #2
 80059d8:	701a      	strb	r2, [r3, #0]
      break;
 80059da:	e00b      	b.n	80059f4 <lsm6dsl_gy_full_scale_get+0x78>

    case LSM6DSL_1000dps:
      *val = LSM6DSL_1000dps;
 80059dc:	683b      	ldr	r3, [r7, #0]
 80059de:	2204      	movs	r2, #4
 80059e0:	701a      	strb	r2, [r3, #0]
      break;
 80059e2:	e007      	b.n	80059f4 <lsm6dsl_gy_full_scale_get+0x78>

    case LSM6DSL_2000dps:
      *val = LSM6DSL_2000dps;
 80059e4:	683b      	ldr	r3, [r7, #0]
 80059e6:	2206      	movs	r2, #6
 80059e8:	701a      	strb	r2, [r3, #0]
      break;
 80059ea:	e003      	b.n	80059f4 <lsm6dsl_gy_full_scale_get+0x78>

    default:
      *val = LSM6DSL_GY_FS_ND;
 80059ec:	683b      	ldr	r3, [r7, #0]
 80059ee:	2207      	movs	r2, #7
 80059f0:	701a      	strb	r2, [r3, #0]
      break;
 80059f2:	bf00      	nop
  }

  return ret;
 80059f4:	68fb      	ldr	r3, [r7, #12]
}
 80059f6:	4618      	mov	r0, r3
 80059f8:	3710      	adds	r7, #16
 80059fa:	46bd      	mov	sp, r7
 80059fc:	bd80      	pop	{r7, pc}
 80059fe:	bf00      	nop

08005a00 <lsm6dsl_gy_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_gy_data_rate_set(stmdev_ctx_t *ctx,
                                 lsm6dsl_odr_g_t val)
{
 8005a00:	b580      	push	{r7, lr}
 8005a02:	b084      	sub	sp, #16
 8005a04:	af00      	add	r7, sp, #0
 8005a06:	6078      	str	r0, [r7, #4]
 8005a08:	460b      	mov	r3, r1
 8005a0a:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl2_g_t ctrl2_g;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 8005a0c:	f107 0208 	add.w	r2, r7, #8
 8005a10:	2301      	movs	r3, #1
 8005a12:	2111      	movs	r1, #17
 8005a14:	6878      	ldr	r0, [r7, #4]
 8005a16:	f7ff fe6f 	bl	80056f8 <lsm6dsl_read_reg>
 8005a1a:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d10f      	bne.n	8005a42 <lsm6dsl_gy_data_rate_set+0x42>
  {
    ctrl2_g.odr_g = (uint8_t) val;
 8005a22:	78fb      	ldrb	r3, [r7, #3]
 8005a24:	f003 030f 	and.w	r3, r3, #15
 8005a28:	b2da      	uxtb	r2, r3
 8005a2a:	7a3b      	ldrb	r3, [r7, #8]
 8005a2c:	f362 1307 	bfi	r3, r2, #4, #4
 8005a30:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 8005a32:	f107 0208 	add.w	r2, r7, #8
 8005a36:	2301      	movs	r3, #1
 8005a38:	2111      	movs	r1, #17
 8005a3a:	6878      	ldr	r0, [r7, #4]
 8005a3c:	f7ff fe74 	bl	8005728 <lsm6dsl_write_reg>
 8005a40:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8005a42:	68fb      	ldr	r3, [r7, #12]
}
 8005a44:	4618      	mov	r0, r3
 8005a46:	3710      	adds	r7, #16
 8005a48:	46bd      	mov	sp, r7
 8005a4a:	bd80      	pop	{r7, pc}

08005a4c <lsm6dsl_gy_data_rate_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_gy_data_rate_get(stmdev_ctx_t *ctx,
                                 lsm6dsl_odr_g_t *val)
{
 8005a4c:	b580      	push	{r7, lr}
 8005a4e:	b084      	sub	sp, #16
 8005a50:	af00      	add	r7, sp, #0
 8005a52:	6078      	str	r0, [r7, #4]
 8005a54:	6039      	str	r1, [r7, #0]
  lsm6dsl_ctrl2_g_t ctrl2_g;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 8005a56:	f107 0208 	add.w	r2, r7, #8
 8005a5a:	2301      	movs	r3, #1
 8005a5c:	2111      	movs	r1, #17
 8005a5e:	6878      	ldr	r0, [r7, #4]
 8005a60:	f7ff fe4a 	bl	80056f8 <lsm6dsl_read_reg>
 8005a64:	60f8      	str	r0, [r7, #12]

  switch (ctrl2_g.odr_g)
 8005a66:	7a3b      	ldrb	r3, [r7, #8]
 8005a68:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8005a6c:	b2db      	uxtb	r3, r3
 8005a6e:	2b0a      	cmp	r3, #10
 8005a70:	d844      	bhi.n	8005afc <lsm6dsl_gy_data_rate_get+0xb0>
 8005a72:	a201      	add	r2, pc, #4	; (adr r2, 8005a78 <lsm6dsl_gy_data_rate_get+0x2c>)
 8005a74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a78:	08005aa5 	.word	0x08005aa5
 8005a7c:	08005aad 	.word	0x08005aad
 8005a80:	08005ab5 	.word	0x08005ab5
 8005a84:	08005abd 	.word	0x08005abd
 8005a88:	08005ac5 	.word	0x08005ac5
 8005a8c:	08005acd 	.word	0x08005acd
 8005a90:	08005ad5 	.word	0x08005ad5
 8005a94:	08005add 	.word	0x08005add
 8005a98:	08005ae5 	.word	0x08005ae5
 8005a9c:	08005aed 	.word	0x08005aed
 8005aa0:	08005af5 	.word	0x08005af5
  {
    case LSM6DSL_GY_ODR_OFF:
      *val = LSM6DSL_GY_ODR_OFF;
 8005aa4:	683b      	ldr	r3, [r7, #0]
 8005aa6:	2200      	movs	r2, #0
 8005aa8:	701a      	strb	r2, [r3, #0]
      break;
 8005aaa:	e02b      	b.n	8005b04 <lsm6dsl_gy_data_rate_get+0xb8>

    case LSM6DSL_GY_ODR_12Hz5:
      *val = LSM6DSL_GY_ODR_12Hz5;
 8005aac:	683b      	ldr	r3, [r7, #0]
 8005aae:	2201      	movs	r2, #1
 8005ab0:	701a      	strb	r2, [r3, #0]
      break;
 8005ab2:	e027      	b.n	8005b04 <lsm6dsl_gy_data_rate_get+0xb8>

    case LSM6DSL_GY_ODR_26Hz:
      *val = LSM6DSL_GY_ODR_26Hz;
 8005ab4:	683b      	ldr	r3, [r7, #0]
 8005ab6:	2202      	movs	r2, #2
 8005ab8:	701a      	strb	r2, [r3, #0]
      break;
 8005aba:	e023      	b.n	8005b04 <lsm6dsl_gy_data_rate_get+0xb8>

    case LSM6DSL_GY_ODR_52Hz:
      *val = LSM6DSL_GY_ODR_52Hz;
 8005abc:	683b      	ldr	r3, [r7, #0]
 8005abe:	2203      	movs	r2, #3
 8005ac0:	701a      	strb	r2, [r3, #0]
      break;
 8005ac2:	e01f      	b.n	8005b04 <lsm6dsl_gy_data_rate_get+0xb8>

    case LSM6DSL_GY_ODR_104Hz:
      *val = LSM6DSL_GY_ODR_104Hz;
 8005ac4:	683b      	ldr	r3, [r7, #0]
 8005ac6:	2204      	movs	r2, #4
 8005ac8:	701a      	strb	r2, [r3, #0]
      break;
 8005aca:	e01b      	b.n	8005b04 <lsm6dsl_gy_data_rate_get+0xb8>

    case LSM6DSL_GY_ODR_208Hz:
      *val = LSM6DSL_GY_ODR_208Hz;
 8005acc:	683b      	ldr	r3, [r7, #0]
 8005ace:	2205      	movs	r2, #5
 8005ad0:	701a      	strb	r2, [r3, #0]
      break;
 8005ad2:	e017      	b.n	8005b04 <lsm6dsl_gy_data_rate_get+0xb8>

    case LSM6DSL_GY_ODR_416Hz:
      *val = LSM6DSL_GY_ODR_416Hz;
 8005ad4:	683b      	ldr	r3, [r7, #0]
 8005ad6:	2206      	movs	r2, #6
 8005ad8:	701a      	strb	r2, [r3, #0]
      break;
 8005ada:	e013      	b.n	8005b04 <lsm6dsl_gy_data_rate_get+0xb8>

    case LSM6DSL_GY_ODR_833Hz:
      *val = LSM6DSL_GY_ODR_833Hz;
 8005adc:	683b      	ldr	r3, [r7, #0]
 8005ade:	2207      	movs	r2, #7
 8005ae0:	701a      	strb	r2, [r3, #0]
      break;
 8005ae2:	e00f      	b.n	8005b04 <lsm6dsl_gy_data_rate_get+0xb8>

    case LSM6DSL_GY_ODR_1k66Hz:
      *val = LSM6DSL_GY_ODR_1k66Hz;
 8005ae4:	683b      	ldr	r3, [r7, #0]
 8005ae6:	2208      	movs	r2, #8
 8005ae8:	701a      	strb	r2, [r3, #0]
      break;
 8005aea:	e00b      	b.n	8005b04 <lsm6dsl_gy_data_rate_get+0xb8>

    case LSM6DSL_GY_ODR_3k33Hz:
      *val = LSM6DSL_GY_ODR_3k33Hz;
 8005aec:	683b      	ldr	r3, [r7, #0]
 8005aee:	2209      	movs	r2, #9
 8005af0:	701a      	strb	r2, [r3, #0]
      break;
 8005af2:	e007      	b.n	8005b04 <lsm6dsl_gy_data_rate_get+0xb8>

    case LSM6DSL_GY_ODR_6k66Hz:
      *val = LSM6DSL_GY_ODR_6k66Hz;
 8005af4:	683b      	ldr	r3, [r7, #0]
 8005af6:	220a      	movs	r2, #10
 8005af8:	701a      	strb	r2, [r3, #0]
      break;
 8005afa:	e003      	b.n	8005b04 <lsm6dsl_gy_data_rate_get+0xb8>

    default:
      *val = LSM6DSL_GY_ODR_ND;
 8005afc:	683b      	ldr	r3, [r7, #0]
 8005afe:	220b      	movs	r2, #11
 8005b00:	701a      	strb	r2, [r3, #0]
      break;
 8005b02:	bf00      	nop
  }

  return ret;
 8005b04:	68fb      	ldr	r3, [r7, #12]
}
 8005b06:	4618      	mov	r0, r3
 8005b08:	3710      	adds	r7, #16
 8005b0a:	46bd      	mov	sp, r7
 8005b0c:	bd80      	pop	{r7, pc}
 8005b0e:	bf00      	nop

08005b10 <lsm6dsl_block_data_update_set>:
  * @param  val    Change the values of bdu in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8005b10:	b580      	push	{r7, lr}
 8005b12:	b084      	sub	sp, #16
 8005b14:	af00      	add	r7, sp, #0
 8005b16:	6078      	str	r0, [r7, #4]
 8005b18:	460b      	mov	r3, r1
 8005b1a:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl3_c_t ctrl3_c;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 8005b1c:	f107 0208 	add.w	r2, r7, #8
 8005b20:	2301      	movs	r3, #1
 8005b22:	2112      	movs	r1, #18
 8005b24:	6878      	ldr	r0, [r7, #4]
 8005b26:	f7ff fde7 	bl	80056f8 <lsm6dsl_read_reg>
 8005b2a:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d10f      	bne.n	8005b52 <lsm6dsl_block_data_update_set+0x42>
  {
    ctrl3_c.bdu = val;
 8005b32:	78fb      	ldrb	r3, [r7, #3]
 8005b34:	f003 0301 	and.w	r3, r3, #1
 8005b38:	b2da      	uxtb	r2, r3
 8005b3a:	7a3b      	ldrb	r3, [r7, #8]
 8005b3c:	f362 1386 	bfi	r3, r2, #6, #1
 8005b40:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 8005b42:	f107 0208 	add.w	r2, r7, #8
 8005b46:	2301      	movs	r3, #1
 8005b48:	2112      	movs	r1, #18
 8005b4a:	6878      	ldr	r0, [r7, #4]
 8005b4c:	f7ff fdec 	bl	8005728 <lsm6dsl_write_reg>
 8005b50:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8005b52:	68fb      	ldr	r3, [r7, #12]
}
 8005b54:	4618      	mov	r0, r3
 8005b56:	3710      	adds	r7, #16
 8005b58:	46bd      	mov	sp, r7
 8005b5a:	bd80      	pop	{r7, pc}

08005b5c <lsm6dsl_angular_rate_raw_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_angular_rate_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8005b5c:	b580      	push	{r7, lr}
 8005b5e:	b086      	sub	sp, #24
 8005b60:	af00      	add	r7, sp, #0
 8005b62:	6078      	str	r0, [r7, #4]
 8005b64:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_OUTX_L_G, buff, 6);
 8005b66:	f107 020c 	add.w	r2, r7, #12
 8005b6a:	2306      	movs	r3, #6
 8005b6c:	2122      	movs	r1, #34	; 0x22
 8005b6e:	6878      	ldr	r0, [r7, #4]
 8005b70:	f7ff fdc2 	bl	80056f8 <lsm6dsl_read_reg>
 8005b74:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 8005b76:	7b7b      	ldrb	r3, [r7, #13]
 8005b78:	b21a      	sxth	r2, r3
 8005b7a:	683b      	ldr	r3, [r7, #0]
 8005b7c:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 8005b7e:	683b      	ldr	r3, [r7, #0]
 8005b80:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005b84:	b29b      	uxth	r3, r3
 8005b86:	021b      	lsls	r3, r3, #8
 8005b88:	b29a      	uxth	r2, r3
 8005b8a:	7b3b      	ldrb	r3, [r7, #12]
 8005b8c:	b29b      	uxth	r3, r3
 8005b8e:	4413      	add	r3, r2
 8005b90:	b29b      	uxth	r3, r3
 8005b92:	b21a      	sxth	r2, r3
 8005b94:	683b      	ldr	r3, [r7, #0]
 8005b96:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 8005b98:	7bfa      	ldrb	r2, [r7, #15]
 8005b9a:	683b      	ldr	r3, [r7, #0]
 8005b9c:	3302      	adds	r3, #2
 8005b9e:	b212      	sxth	r2, r2
 8005ba0:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8005ba2:	683b      	ldr	r3, [r7, #0]
 8005ba4:	3302      	adds	r3, #2
 8005ba6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005baa:	b29b      	uxth	r3, r3
 8005bac:	021b      	lsls	r3, r3, #8
 8005bae:	b29a      	uxth	r2, r3
 8005bb0:	7bbb      	ldrb	r3, [r7, #14]
 8005bb2:	b29b      	uxth	r3, r3
 8005bb4:	4413      	add	r3, r2
 8005bb6:	b29a      	uxth	r2, r3
 8005bb8:	683b      	ldr	r3, [r7, #0]
 8005bba:	3302      	adds	r3, #2
 8005bbc:	b212      	sxth	r2, r2
 8005bbe:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 8005bc0:	7c7a      	ldrb	r2, [r7, #17]
 8005bc2:	683b      	ldr	r3, [r7, #0]
 8005bc4:	3304      	adds	r3, #4
 8005bc6:	b212      	sxth	r2, r2
 8005bc8:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8005bca:	683b      	ldr	r3, [r7, #0]
 8005bcc:	3304      	adds	r3, #4
 8005bce:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005bd2:	b29b      	uxth	r3, r3
 8005bd4:	021b      	lsls	r3, r3, #8
 8005bd6:	b29a      	uxth	r2, r3
 8005bd8:	7c3b      	ldrb	r3, [r7, #16]
 8005bda:	b29b      	uxth	r3, r3
 8005bdc:	4413      	add	r3, r2
 8005bde:	b29a      	uxth	r2, r3
 8005be0:	683b      	ldr	r3, [r7, #0]
 8005be2:	3304      	adds	r3, #4
 8005be4:	b212      	sxth	r2, r2
 8005be6:	801a      	strh	r2, [r3, #0]

  return ret;
 8005be8:	697b      	ldr	r3, [r7, #20]
}
 8005bea:	4618      	mov	r0, r3
 8005bec:	3718      	adds	r7, #24
 8005bee:	46bd      	mov	sp, r7
 8005bf0:	bd80      	pop	{r7, pc}

08005bf2 <lsm6dsl_acceleration_raw_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_acceleration_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8005bf2:	b580      	push	{r7, lr}
 8005bf4:	b086      	sub	sp, #24
 8005bf6:	af00      	add	r7, sp, #0
 8005bf8:	6078      	str	r0, [r7, #4]
 8005bfa:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_OUTX_L_XL, buff, 6);
 8005bfc:	f107 020c 	add.w	r2, r7, #12
 8005c00:	2306      	movs	r3, #6
 8005c02:	2128      	movs	r1, #40	; 0x28
 8005c04:	6878      	ldr	r0, [r7, #4]
 8005c06:	f7ff fd77 	bl	80056f8 <lsm6dsl_read_reg>
 8005c0a:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 8005c0c:	7b7b      	ldrb	r3, [r7, #13]
 8005c0e:	b21a      	sxth	r2, r3
 8005c10:	683b      	ldr	r3, [r7, #0]
 8005c12:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 8005c14:	683b      	ldr	r3, [r7, #0]
 8005c16:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005c1a:	b29b      	uxth	r3, r3
 8005c1c:	021b      	lsls	r3, r3, #8
 8005c1e:	b29a      	uxth	r2, r3
 8005c20:	7b3b      	ldrb	r3, [r7, #12]
 8005c22:	b29b      	uxth	r3, r3
 8005c24:	4413      	add	r3, r2
 8005c26:	b29b      	uxth	r3, r3
 8005c28:	b21a      	sxth	r2, r3
 8005c2a:	683b      	ldr	r3, [r7, #0]
 8005c2c:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 8005c2e:	7bfa      	ldrb	r2, [r7, #15]
 8005c30:	683b      	ldr	r3, [r7, #0]
 8005c32:	3302      	adds	r3, #2
 8005c34:	b212      	sxth	r2, r2
 8005c36:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8005c38:	683b      	ldr	r3, [r7, #0]
 8005c3a:	3302      	adds	r3, #2
 8005c3c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005c40:	b29b      	uxth	r3, r3
 8005c42:	021b      	lsls	r3, r3, #8
 8005c44:	b29a      	uxth	r2, r3
 8005c46:	7bbb      	ldrb	r3, [r7, #14]
 8005c48:	b29b      	uxth	r3, r3
 8005c4a:	4413      	add	r3, r2
 8005c4c:	b29a      	uxth	r2, r3
 8005c4e:	683b      	ldr	r3, [r7, #0]
 8005c50:	3302      	adds	r3, #2
 8005c52:	b212      	sxth	r2, r2
 8005c54:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 8005c56:	7c7a      	ldrb	r2, [r7, #17]
 8005c58:	683b      	ldr	r3, [r7, #0]
 8005c5a:	3304      	adds	r3, #4
 8005c5c:	b212      	sxth	r2, r2
 8005c5e:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8005c60:	683b      	ldr	r3, [r7, #0]
 8005c62:	3304      	adds	r3, #4
 8005c64:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005c68:	b29b      	uxth	r3, r3
 8005c6a:	021b      	lsls	r3, r3, #8
 8005c6c:	b29a      	uxth	r2, r3
 8005c6e:	7c3b      	ldrb	r3, [r7, #16]
 8005c70:	b29b      	uxth	r3, r3
 8005c72:	4413      	add	r3, r2
 8005c74:	b29a      	uxth	r2, r3
 8005c76:	683b      	ldr	r3, [r7, #0]
 8005c78:	3304      	adds	r3, #4
 8005c7a:	b212      	sxth	r2, r2
 8005c7c:	801a      	strh	r2, [r3, #0]

  return ret;
 8005c7e:	697b      	ldr	r3, [r7, #20]
}
 8005c80:	4618      	mov	r0, r3
 8005c82:	3718      	adds	r7, #24
 8005c84:	46bd      	mov	sp, r7
 8005c86:	bd80      	pop	{r7, pc}

08005c88 <lsm6dsl_device_id_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8005c88:	b580      	push	{r7, lr}
 8005c8a:	b084      	sub	sp, #16
 8005c8c:	af00      	add	r7, sp, #0
 8005c8e:	6078      	str	r0, [r7, #4]
 8005c90:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_WHO_AM_I, buff, 1);
 8005c92:	2301      	movs	r3, #1
 8005c94:	683a      	ldr	r2, [r7, #0]
 8005c96:	210f      	movs	r1, #15
 8005c98:	6878      	ldr	r0, [r7, #4]
 8005c9a:	f7ff fd2d 	bl	80056f8 <lsm6dsl_read_reg>
 8005c9e:	60f8      	str	r0, [r7, #12]

  return ret;
 8005ca0:	68fb      	ldr	r3, [r7, #12]
}
 8005ca2:	4618      	mov	r0, r3
 8005ca4:	3710      	adds	r7, #16
 8005ca6:	46bd      	mov	sp, r7
 8005ca8:	bd80      	pop	{r7, pc}

08005caa <lsm6dsl_auto_increment_set>:
  * @param  val    Change the values of if_inc in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_auto_increment_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8005caa:	b580      	push	{r7, lr}
 8005cac:	b084      	sub	sp, #16
 8005cae:	af00      	add	r7, sp, #0
 8005cb0:	6078      	str	r0, [r7, #4]
 8005cb2:	460b      	mov	r3, r1
 8005cb4:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl3_c_t ctrl3_c;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 8005cb6:	f107 0208 	add.w	r2, r7, #8
 8005cba:	2301      	movs	r3, #1
 8005cbc:	2112      	movs	r1, #18
 8005cbe:	6878      	ldr	r0, [r7, #4]
 8005cc0:	f7ff fd1a 	bl	80056f8 <lsm6dsl_read_reg>
 8005cc4:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d10f      	bne.n	8005cec <lsm6dsl_auto_increment_set+0x42>
  {
    ctrl3_c.if_inc = val;
 8005ccc:	78fb      	ldrb	r3, [r7, #3]
 8005cce:	f003 0301 	and.w	r3, r3, #1
 8005cd2:	b2da      	uxtb	r2, r3
 8005cd4:	7a3b      	ldrb	r3, [r7, #8]
 8005cd6:	f362 0382 	bfi	r3, r2, #2, #1
 8005cda:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 8005cdc:	f107 0208 	add.w	r2, r7, #8
 8005ce0:	2301      	movs	r3, #1
 8005ce2:	2112      	movs	r1, #18
 8005ce4:	6878      	ldr	r0, [r7, #4]
 8005ce6:	f7ff fd1f 	bl	8005728 <lsm6dsl_write_reg>
 8005cea:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8005cec:	68fb      	ldr	r3, [r7, #12]
}
 8005cee:	4618      	mov	r0, r3
 8005cf0:	3710      	adds	r7, #16
 8005cf2:	46bd      	mov	sp, r7
 8005cf4:	bd80      	pop	{r7, pc}

08005cf6 <lsm6dsl_fifo_mode_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_fifo_mode_set(stmdev_ctx_t *ctx,
                              lsm6dsl_fifo_mode_t val)
{
 8005cf6:	b580      	push	{r7, lr}
 8005cf8:	b084      	sub	sp, #16
 8005cfa:	af00      	add	r7, sp, #0
 8005cfc:	6078      	str	r0, [r7, #4]
 8005cfe:	460b      	mov	r3, r1
 8005d00:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_fifo_ctrl5_t fifo_ctrl5;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_FIFO_CTRL5,
 8005d02:	f107 0208 	add.w	r2, r7, #8
 8005d06:	2301      	movs	r3, #1
 8005d08:	210a      	movs	r1, #10
 8005d0a:	6878      	ldr	r0, [r7, #4]
 8005d0c:	f7ff fcf4 	bl	80056f8 <lsm6dsl_read_reg>
 8005d10:	60f8      	str	r0, [r7, #12]
                         (uint8_t *)&fifo_ctrl5, 1);

  if (ret == 0)
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d10f      	bne.n	8005d38 <lsm6dsl_fifo_mode_set+0x42>
  {
    fifo_ctrl5.fifo_mode = (uint8_t)val;
 8005d18:	78fb      	ldrb	r3, [r7, #3]
 8005d1a:	f003 0307 	and.w	r3, r3, #7
 8005d1e:	b2da      	uxtb	r2, r3
 8005d20:	7a3b      	ldrb	r3, [r7, #8]
 8005d22:	f362 0302 	bfi	r3, r2, #0, #3
 8005d26:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_FIFO_CTRL5,
 8005d28:	f107 0208 	add.w	r2, r7, #8
 8005d2c:	2301      	movs	r3, #1
 8005d2e:	210a      	movs	r1, #10
 8005d30:	6878      	ldr	r0, [r7, #4]
 8005d32:	f7ff fcf9 	bl	8005728 <lsm6dsl_write_reg>
 8005d36:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&fifo_ctrl5, 1);
  }

  return ret;
 8005d38:	68fb      	ldr	r3, [r7, #12]
}
 8005d3a:	4618      	mov	r0, r3
 8005d3c:	3710      	adds	r7, #16
 8005d3e:	46bd      	mov	sp, r7
 8005d40:	bd80      	pop	{r7, pc}
	...

08005d44 <IKS01A2_MOTION_SENSOR_Init>:
  *         - MOTION_ACCELERO for instance 1
  *         - MOTION_MAGNETO for instance 2
  * @retval BSP status
  */
int32_t IKS01A2_MOTION_SENSOR_Init(uint32_t Instance, uint32_t Functions)
{
 8005d44:	b580      	push	{r7, lr}
 8005d46:	b08e      	sub	sp, #56	; 0x38
 8005d48:	af00      	add	r7, sp, #0
 8005d4a:	6078      	str	r0, [r7, #4]
 8005d4c:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 8005d4e:	2300      	movs	r3, #0
 8005d50:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t function = MOTION_GYRO;
 8005d52:	2301      	movs	r3, #1
 8005d54:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t i;
  uint32_t component_functions = 0;
 8005d56:	2300      	movs	r3, #0
 8005d58:	62bb      	str	r3, [r7, #40]	; 0x28
  IKS01A2_MOTION_SENSOR_Capabilities_t cap;

  switch (Instance)
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	2b02      	cmp	r3, #2
 8005d5e:	d06e      	beq.n	8005e3e <IKS01A2_MOTION_SENSOR_Init+0xfa>
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	2b02      	cmp	r3, #2
 8005d64:	f200 809d 	bhi.w	8005ea2 <IKS01A2_MOTION_SENSOR_Init+0x15e>
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d003      	beq.n	8005d76 <IKS01A2_MOTION_SENSOR_Init+0x32>
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	2b01      	cmp	r3, #1
 8005d72:	d032      	beq.n	8005dda <IKS01A2_MOTION_SENSOR_Init+0x96>
 8005d74:	e095      	b.n	8005ea2 <IKS01A2_MOTION_SENSOR_Init+0x15e>
  {
#if (USE_IKS01A2_MOTION_SENSOR_LSM6DSL_0 == 1)
    case IKS01A2_LSM6DSL_0:
      if (LSM6DSL_0_Probe(Functions) != BSP_ERROR_NONE)
 8005d76:	6838      	ldr	r0, [r7, #0]
 8005d78:	f000 f9ae 	bl	80060d8 <LSM6DSL_0_Probe>
 8005d7c:	4603      	mov	r3, r0
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d002      	beq.n	8005d88 <IKS01A2_MOTION_SENSOR_Init+0x44>
      {
        return BSP_ERROR_NO_INIT;
 8005d82:	f04f 33ff 	mov.w	r3, #4294967295
 8005d86:	e0cc      	b.n	8005f22 <IKS01A2_MOTION_SENSOR_Init+0x1de>
      }
      if (MotionDrv[Instance]->GetCapabilities(MotionCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 8005d88:	4a68      	ldr	r2, [pc, #416]	; (8005f2c <IKS01A2_MOTION_SENSOR_Init+0x1e8>)
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005d90:	68db      	ldr	r3, [r3, #12]
 8005d92:	4967      	ldr	r1, [pc, #412]	; (8005f30 <IKS01A2_MOTION_SENSOR_Init+0x1ec>)
 8005d94:	687a      	ldr	r2, [r7, #4]
 8005d96:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8005d9a:	f107 010c 	add.w	r1, r7, #12
 8005d9e:	4610      	mov	r0, r2
 8005da0:	4798      	blx	r3
 8005da2:	4603      	mov	r3, r0
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d002      	beq.n	8005dae <IKS01A2_MOTION_SENSOR_Init+0x6a>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 8005da8:	f06f 0306 	mvn.w	r3, #6
 8005dac:	e0b9      	b.n	8005f22 <IKS01A2_MOTION_SENSOR_Init+0x1de>
      }
      if (cap.Acc == 1U)
 8005dae:	7b3b      	ldrb	r3, [r7, #12]
 8005db0:	2b01      	cmp	r3, #1
 8005db2:	d103      	bne.n	8005dbc <IKS01A2_MOTION_SENSOR_Init+0x78>
      {
        component_functions |= MOTION_ACCELERO;
 8005db4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005db6:	f043 0302 	orr.w	r3, r3, #2
 8005dba:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if (cap.Gyro == 1U)
 8005dbc:	7b7b      	ldrb	r3, [r7, #13]
 8005dbe:	2b01      	cmp	r3, #1
 8005dc0:	d103      	bne.n	8005dca <IKS01A2_MOTION_SENSOR_Init+0x86>
      {
        component_functions |= MOTION_GYRO;
 8005dc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005dc4:	f043 0301 	orr.w	r3, r3, #1
 8005dc8:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if (cap.Magneto == 1U)
 8005dca:	7bbb      	ldrb	r3, [r7, #14]
 8005dcc:	2b01      	cmp	r3, #1
 8005dce:	d16c      	bne.n	8005eaa <IKS01A2_MOTION_SENSOR_Init+0x166>
      {
        component_functions |= MOTION_MAGNETO;
 8005dd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005dd2:	f043 0304 	orr.w	r3, r3, #4
 8005dd6:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      break;
 8005dd8:	e067      	b.n	8005eaa <IKS01A2_MOTION_SENSOR_Init+0x166>
#endif

#if (USE_IKS01A2_MOTION_SENSOR_LSM303AGR_ACC_0 == 1)
    case IKS01A2_LSM303AGR_ACC_0:
      if (LSM303AGR_ACC_0_Probe(Functions) != BSP_ERROR_NONE)
 8005dda:	6838      	ldr	r0, [r7, #0]
 8005ddc:	f000 fa38 	bl	8006250 <LSM303AGR_ACC_0_Probe>
 8005de0:	4603      	mov	r3, r0
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d002      	beq.n	8005dec <IKS01A2_MOTION_SENSOR_Init+0xa8>
      {
        return BSP_ERROR_NO_INIT;
 8005de6:	f04f 33ff 	mov.w	r3, #4294967295
 8005dea:	e09a      	b.n	8005f22 <IKS01A2_MOTION_SENSOR_Init+0x1de>
      }
      if (MotionDrv[Instance]->GetCapabilities(MotionCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 8005dec:	4a4f      	ldr	r2, [pc, #316]	; (8005f2c <IKS01A2_MOTION_SENSOR_Init+0x1e8>)
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005df4:	68db      	ldr	r3, [r3, #12]
 8005df6:	494e      	ldr	r1, [pc, #312]	; (8005f30 <IKS01A2_MOTION_SENSOR_Init+0x1ec>)
 8005df8:	687a      	ldr	r2, [r7, #4]
 8005dfa:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8005dfe:	f107 010c 	add.w	r1, r7, #12
 8005e02:	4610      	mov	r0, r2
 8005e04:	4798      	blx	r3
 8005e06:	4603      	mov	r3, r0
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d002      	beq.n	8005e12 <IKS01A2_MOTION_SENSOR_Init+0xce>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 8005e0c:	f06f 0306 	mvn.w	r3, #6
 8005e10:	e087      	b.n	8005f22 <IKS01A2_MOTION_SENSOR_Init+0x1de>
      }
      if (cap.Acc == 1U)
 8005e12:	7b3b      	ldrb	r3, [r7, #12]
 8005e14:	2b01      	cmp	r3, #1
 8005e16:	d103      	bne.n	8005e20 <IKS01A2_MOTION_SENSOR_Init+0xdc>
      {
        component_functions |= MOTION_ACCELERO;
 8005e18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e1a:	f043 0302 	orr.w	r3, r3, #2
 8005e1e:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if (cap.Gyro == 1U)
 8005e20:	7b7b      	ldrb	r3, [r7, #13]
 8005e22:	2b01      	cmp	r3, #1
 8005e24:	d103      	bne.n	8005e2e <IKS01A2_MOTION_SENSOR_Init+0xea>
      {
        component_functions |= MOTION_GYRO;
 8005e26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e28:	f043 0301 	orr.w	r3, r3, #1
 8005e2c:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if (cap.Magneto == 1U)
 8005e2e:	7bbb      	ldrb	r3, [r7, #14]
 8005e30:	2b01      	cmp	r3, #1
 8005e32:	d13c      	bne.n	8005eae <IKS01A2_MOTION_SENSOR_Init+0x16a>
      {
        component_functions |= MOTION_MAGNETO;
 8005e34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e36:	f043 0304 	orr.w	r3, r3, #4
 8005e3a:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      break;
 8005e3c:	e037      	b.n	8005eae <IKS01A2_MOTION_SENSOR_Init+0x16a>
#endif

#if (USE_IKS01A2_MOTION_SENSOR_LSM303AGR_MAG_0 == 1)
    case IKS01A2_LSM303AGR_MAG_0:
      if (LSM303AGR_MAG_0_Probe(Functions) != BSP_ERROR_NONE)
 8005e3e:	6838      	ldr	r0, [r7, #0]
 8005e40:	f000 faaa 	bl	8006398 <LSM303AGR_MAG_0_Probe>
 8005e44:	4603      	mov	r3, r0
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d002      	beq.n	8005e50 <IKS01A2_MOTION_SENSOR_Init+0x10c>
      {
        return BSP_ERROR_NO_INIT;
 8005e4a:	f04f 33ff 	mov.w	r3, #4294967295
 8005e4e:	e068      	b.n	8005f22 <IKS01A2_MOTION_SENSOR_Init+0x1de>
      }
      if (MotionDrv[Instance]->GetCapabilities(MotionCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 8005e50:	4a36      	ldr	r2, [pc, #216]	; (8005f2c <IKS01A2_MOTION_SENSOR_Init+0x1e8>)
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005e58:	68db      	ldr	r3, [r3, #12]
 8005e5a:	4935      	ldr	r1, [pc, #212]	; (8005f30 <IKS01A2_MOTION_SENSOR_Init+0x1ec>)
 8005e5c:	687a      	ldr	r2, [r7, #4]
 8005e5e:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8005e62:	f107 010c 	add.w	r1, r7, #12
 8005e66:	4610      	mov	r0, r2
 8005e68:	4798      	blx	r3
 8005e6a:	4603      	mov	r3, r0
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d002      	beq.n	8005e76 <IKS01A2_MOTION_SENSOR_Init+0x132>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 8005e70:	f06f 0306 	mvn.w	r3, #6
 8005e74:	e055      	b.n	8005f22 <IKS01A2_MOTION_SENSOR_Init+0x1de>
      }
      if (cap.Acc == 1U)
 8005e76:	7b3b      	ldrb	r3, [r7, #12]
 8005e78:	2b01      	cmp	r3, #1
 8005e7a:	d103      	bne.n	8005e84 <IKS01A2_MOTION_SENSOR_Init+0x140>
      {
        component_functions |= MOTION_ACCELERO;
 8005e7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e7e:	f043 0302 	orr.w	r3, r3, #2
 8005e82:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if (cap.Gyro == 1U)
 8005e84:	7b7b      	ldrb	r3, [r7, #13]
 8005e86:	2b01      	cmp	r3, #1
 8005e88:	d103      	bne.n	8005e92 <IKS01A2_MOTION_SENSOR_Init+0x14e>
      {
        component_functions |= MOTION_GYRO;
 8005e8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e8c:	f043 0301 	orr.w	r3, r3, #1
 8005e90:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if (cap.Magneto == 1U)
 8005e92:	7bbb      	ldrb	r3, [r7, #14]
 8005e94:	2b01      	cmp	r3, #1
 8005e96:	d10c      	bne.n	8005eb2 <IKS01A2_MOTION_SENSOR_Init+0x16e>
      {
        component_functions |= MOTION_MAGNETO;
 8005e98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e9a:	f043 0304 	orr.w	r3, r3, #4
 8005e9e:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      break;
 8005ea0:	e007      	b.n	8005eb2 <IKS01A2_MOTION_SENSOR_Init+0x16e>
      }
      break;
#endif

    default:
      ret = BSP_ERROR_WRONG_PARAM;
 8005ea2:	f06f 0301 	mvn.w	r3, #1
 8005ea6:	637b      	str	r3, [r7, #52]	; 0x34
      break;
 8005ea8:	e004      	b.n	8005eb4 <IKS01A2_MOTION_SENSOR_Init+0x170>
      break;
 8005eaa:	bf00      	nop
 8005eac:	e002      	b.n	8005eb4 <IKS01A2_MOTION_SENSOR_Init+0x170>
      break;
 8005eae:	bf00      	nop
 8005eb0:	e000      	b.n	8005eb4 <IKS01A2_MOTION_SENSOR_Init+0x170>
      break;
 8005eb2:	bf00      	nop
  }

  if (ret != BSP_ERROR_NONE)
 8005eb4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d001      	beq.n	8005ebe <IKS01A2_MOTION_SENSOR_Init+0x17a>
  {
    return ret;
 8005eba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ebc:	e031      	b.n	8005f22 <IKS01A2_MOTION_SENSOR_Init+0x1de>
  }

  for (i = 0; i < IKS01A2_MOTION_FUNCTIONS_NBR; i++)
 8005ebe:	2300      	movs	r3, #0
 8005ec0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005ec2:	e02a      	b.n	8005f1a <IKS01A2_MOTION_SENSOR_Init+0x1d6>
  {
    if (((Functions & function) == function) && ((component_functions & function) == function))
 8005ec4:	683a      	ldr	r2, [r7, #0]
 8005ec6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ec8:	4013      	ands	r3, r2
 8005eca:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005ecc:	429a      	cmp	r2, r3
 8005ece:	d11e      	bne.n	8005f0e <IKS01A2_MOTION_SENSOR_Init+0x1ca>
 8005ed0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005ed2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ed4:	4013      	ands	r3, r2
 8005ed6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005ed8:	429a      	cmp	r2, r3
 8005eda:	d118      	bne.n	8005f0e <IKS01A2_MOTION_SENSOR_Init+0x1ca>
    {
      if (MotionFuncDrv[Instance][FunctionIndex[function]]->Enable(MotionCompObj[Instance]) != BSP_ERROR_NONE)
 8005edc:	4a15      	ldr	r2, [pc, #84]	; (8005f34 <IKS01A2_MOTION_SENSOR_Init+0x1f0>)
 8005ede:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ee0:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8005ee4:	4814      	ldr	r0, [pc, #80]	; (8005f38 <IKS01A2_MOTION_SENSOR_Init+0x1f4>)
 8005ee6:	687a      	ldr	r2, [r7, #4]
 8005ee8:	4613      	mov	r3, r2
 8005eea:	005b      	lsls	r3, r3, #1
 8005eec:	4413      	add	r3, r2
 8005eee:	440b      	add	r3, r1
 8005ef0:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	490e      	ldr	r1, [pc, #56]	; (8005f30 <IKS01A2_MOTION_SENSOR_Init+0x1ec>)
 8005ef8:	687a      	ldr	r2, [r7, #4]
 8005efa:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8005efe:	4610      	mov	r0, r2
 8005f00:	4798      	blx	r3
 8005f02:	4603      	mov	r3, r0
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d002      	beq.n	8005f0e <IKS01A2_MOTION_SENSOR_Init+0x1ca>
      {
        return BSP_ERROR_COMPONENT_FAILURE;
 8005f08:	f06f 0304 	mvn.w	r3, #4
 8005f0c:	e009      	b.n	8005f22 <IKS01A2_MOTION_SENSOR_Init+0x1de>
      }
    }
    function = function << 1;
 8005f0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f10:	005b      	lsls	r3, r3, #1
 8005f12:	633b      	str	r3, [r7, #48]	; 0x30
  for (i = 0; i < IKS01A2_MOTION_FUNCTIONS_NBR; i++)
 8005f14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f16:	3301      	adds	r3, #1
 8005f18:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005f1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f1c:	2b02      	cmp	r3, #2
 8005f1e:	d9d1      	bls.n	8005ec4 <IKS01A2_MOTION_SENSOR_Init+0x180>
  }

  return ret;
 8005f20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8005f22:	4618      	mov	r0, r3
 8005f24:	3738      	adds	r7, #56	; 0x38
 8005f26:	46bd      	mov	sp, r7
 8005f28:	bd80      	pop	{r7, pc}
 8005f2a:	bf00      	nop
 8005f2c:	2000070c 	.word	0x2000070c
 8005f30:	200006dc 	.word	0x200006dc
 8005f34:	200000ec 	.word	0x200000ec
 8005f38:	200006e8 	.word	0x200006e8

08005f3c <IKS01A2_MOTION_SENSOR_GetAxes>:
  *         - MOTION_MAGNETO for instance 2
  * @param  Axes pointer to axes data structure
  * @retval BSP status
  */
int32_t IKS01A2_MOTION_SENSOR_GetAxes(uint32_t Instance, uint32_t Function, IKS01A2_MOTION_SENSOR_Axes_t *Axes)
{
 8005f3c:	b580      	push	{r7, lr}
 8005f3e:	b086      	sub	sp, #24
 8005f40:	af00      	add	r7, sp, #0
 8005f42:	60f8      	str	r0, [r7, #12]
 8005f44:	60b9      	str	r1, [r7, #8]
 8005f46:	607a      	str	r2, [r7, #4]
  int32_t ret;

  if (Instance >= IKS01A2_MOTION_INSTANCES_NBR)
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	2b02      	cmp	r3, #2
 8005f4c:	d903      	bls.n	8005f56 <IKS01A2_MOTION_SENSOR_GetAxes+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8005f4e:	f06f 0301 	mvn.w	r3, #1
 8005f52:	617b      	str	r3, [r7, #20]
 8005f54:	e029      	b.n	8005faa <IKS01A2_MOTION_SENSOR_GetAxes+0x6e>
  }
  else
  {
    if ((MotionCtx[Instance].Functions & Function) == Function)
 8005f56:	4a17      	ldr	r2, [pc, #92]	; (8005fb4 <IKS01A2_MOTION_SENSOR_GetAxes+0x78>)
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8005f5e:	68bb      	ldr	r3, [r7, #8]
 8005f60:	4013      	ands	r3, r2
 8005f62:	68ba      	ldr	r2, [r7, #8]
 8005f64:	429a      	cmp	r2, r3
 8005f66:	d11d      	bne.n	8005fa4 <IKS01A2_MOTION_SENSOR_GetAxes+0x68>
    {
      if (MotionFuncDrv[Instance][FunctionIndex[Function]]->GetAxes(MotionCompObj[Instance], Axes) != BSP_ERROR_NONE)
 8005f68:	4a13      	ldr	r2, [pc, #76]	; (8005fb8 <IKS01A2_MOTION_SENSOR_GetAxes+0x7c>)
 8005f6a:	68bb      	ldr	r3, [r7, #8]
 8005f6c:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8005f70:	4812      	ldr	r0, [pc, #72]	; (8005fbc <IKS01A2_MOTION_SENSOR_GetAxes+0x80>)
 8005f72:	68fa      	ldr	r2, [r7, #12]
 8005f74:	4613      	mov	r3, r2
 8005f76:	005b      	lsls	r3, r3, #1
 8005f78:	4413      	add	r3, r2
 8005f7a:	440b      	add	r3, r1
 8005f7c:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8005f80:	69db      	ldr	r3, [r3, #28]
 8005f82:	490f      	ldr	r1, [pc, #60]	; (8005fc0 <IKS01A2_MOTION_SENSOR_GetAxes+0x84>)
 8005f84:	68fa      	ldr	r2, [r7, #12]
 8005f86:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8005f8a:	6879      	ldr	r1, [r7, #4]
 8005f8c:	4610      	mov	r0, r2
 8005f8e:	4798      	blx	r3
 8005f90:	4603      	mov	r3, r0
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d003      	beq.n	8005f9e <IKS01A2_MOTION_SENSOR_GetAxes+0x62>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8005f96:	f06f 0304 	mvn.w	r3, #4
 8005f9a:	617b      	str	r3, [r7, #20]
 8005f9c:	e005      	b.n	8005faa <IKS01A2_MOTION_SENSOR_GetAxes+0x6e>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8005f9e:	2300      	movs	r3, #0
 8005fa0:	617b      	str	r3, [r7, #20]
 8005fa2:	e002      	b.n	8005faa <IKS01A2_MOTION_SENSOR_GetAxes+0x6e>
      }
    }
    else
    {
      ret = BSP_ERROR_WRONG_PARAM;
 8005fa4:	f06f 0301 	mvn.w	r3, #1
 8005fa8:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 8005faa:	697b      	ldr	r3, [r7, #20]
}
 8005fac:	4618      	mov	r0, r3
 8005fae:	3718      	adds	r7, #24
 8005fb0:	46bd      	mov	sp, r7
 8005fb2:	bd80      	pop	{r7, pc}
 8005fb4:	20000718 	.word	0x20000718
 8005fb8:	200000ec 	.word	0x200000ec
 8005fbc:	200006e8 	.word	0x200006e8
 8005fc0:	200006dc 	.word	0x200006dc

08005fc4 <IKS01A2_MOTION_SENSOR_SetOutputDataRate>:
  *         - MOTION_MAGNETO for instance 2
  * @param  Odr Output Data Rate value to be set
  * @retval BSP status
  */
int32_t IKS01A2_MOTION_SENSOR_SetOutputDataRate(uint32_t Instance, uint32_t Function, float Odr)
{
 8005fc4:	b580      	push	{r7, lr}
 8005fc6:	b086      	sub	sp, #24
 8005fc8:	af00      	add	r7, sp, #0
 8005fca:	60f8      	str	r0, [r7, #12]
 8005fcc:	60b9      	str	r1, [r7, #8]
 8005fce:	ed87 0a01 	vstr	s0, [r7, #4]
  int32_t ret;

  if (Instance >= IKS01A2_MOTION_INSTANCES_NBR)
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	2b02      	cmp	r3, #2
 8005fd6:	d903      	bls.n	8005fe0 <IKS01A2_MOTION_SENSOR_SetOutputDataRate+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8005fd8:	f06f 0301 	mvn.w	r3, #1
 8005fdc:	617b      	str	r3, [r7, #20]
 8005fde:	e02a      	b.n	8006036 <IKS01A2_MOTION_SENSOR_SetOutputDataRate+0x72>
  }
  else
  {
    if ((MotionCtx[Instance].Functions & Function) == Function)
 8005fe0:	4a17      	ldr	r2, [pc, #92]	; (8006040 <IKS01A2_MOTION_SENSOR_SetOutputDataRate+0x7c>)
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8005fe8:	68bb      	ldr	r3, [r7, #8]
 8005fea:	4013      	ands	r3, r2
 8005fec:	68ba      	ldr	r2, [r7, #8]
 8005fee:	429a      	cmp	r2, r3
 8005ff0:	d11e      	bne.n	8006030 <IKS01A2_MOTION_SENSOR_SetOutputDataRate+0x6c>
    {
      if (MotionFuncDrv[Instance][FunctionIndex[Function]]->SetOutputDataRate(MotionCompObj[Instance], Odr) != BSP_ERROR_NONE)
 8005ff2:	4a14      	ldr	r2, [pc, #80]	; (8006044 <IKS01A2_MOTION_SENSOR_SetOutputDataRate+0x80>)
 8005ff4:	68bb      	ldr	r3, [r7, #8]
 8005ff6:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8005ffa:	4813      	ldr	r0, [pc, #76]	; (8006048 <IKS01A2_MOTION_SENSOR_SetOutputDataRate+0x84>)
 8005ffc:	68fa      	ldr	r2, [r7, #12]
 8005ffe:	4613      	mov	r3, r2
 8006000:	005b      	lsls	r3, r3, #1
 8006002:	4413      	add	r3, r2
 8006004:	440b      	add	r3, r1
 8006006:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800600a:	691b      	ldr	r3, [r3, #16]
 800600c:	490f      	ldr	r1, [pc, #60]	; (800604c <IKS01A2_MOTION_SENSOR_SetOutputDataRate+0x88>)
 800600e:	68fa      	ldr	r2, [r7, #12]
 8006010:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8006014:	ed97 0a01 	vldr	s0, [r7, #4]
 8006018:	4610      	mov	r0, r2
 800601a:	4798      	blx	r3
 800601c:	4603      	mov	r3, r0
 800601e:	2b00      	cmp	r3, #0
 8006020:	d003      	beq.n	800602a <IKS01A2_MOTION_SENSOR_SetOutputDataRate+0x66>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8006022:	f06f 0304 	mvn.w	r3, #4
 8006026:	617b      	str	r3, [r7, #20]
 8006028:	e005      	b.n	8006036 <IKS01A2_MOTION_SENSOR_SetOutputDataRate+0x72>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800602a:	2300      	movs	r3, #0
 800602c:	617b      	str	r3, [r7, #20]
 800602e:	e002      	b.n	8006036 <IKS01A2_MOTION_SENSOR_SetOutputDataRate+0x72>
      }
    }
    else
    {
      ret = BSP_ERROR_WRONG_PARAM;
 8006030:	f06f 0301 	mvn.w	r3, #1
 8006034:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 8006036:	697b      	ldr	r3, [r7, #20]
}
 8006038:	4618      	mov	r0, r3
 800603a:	3718      	adds	r7, #24
 800603c:	46bd      	mov	sp, r7
 800603e:	bd80      	pop	{r7, pc}
 8006040:	20000718 	.word	0x20000718
 8006044:	200000ec 	.word	0x200000ec
 8006048:	200006e8 	.word	0x200006e8
 800604c:	200006dc 	.word	0x200006dc

08006050 <IKS01A2_MOTION_SENSOR_SetFullScale>:
  *         - MOTION_MAGNETO for instance 2
  * @param  Fullscale Fullscale value to be set
  * @retval BSP status
  */
int32_t IKS01A2_MOTION_SENSOR_SetFullScale(uint32_t Instance, uint32_t Function, int32_t Fullscale)
{
 8006050:	b580      	push	{r7, lr}
 8006052:	b086      	sub	sp, #24
 8006054:	af00      	add	r7, sp, #0
 8006056:	60f8      	str	r0, [r7, #12]
 8006058:	60b9      	str	r1, [r7, #8]
 800605a:	607a      	str	r2, [r7, #4]
  int32_t ret;

  if (Instance >= IKS01A2_MOTION_INSTANCES_NBR)
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	2b02      	cmp	r3, #2
 8006060:	d903      	bls.n	800606a <IKS01A2_MOTION_SENSOR_SetFullScale+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8006062:	f06f 0301 	mvn.w	r3, #1
 8006066:	617b      	str	r3, [r7, #20]
 8006068:	e029      	b.n	80060be <IKS01A2_MOTION_SENSOR_SetFullScale+0x6e>
  }
  else
  {
    if ((MotionCtx[Instance].Functions & Function) == Function)
 800606a:	4a17      	ldr	r2, [pc, #92]	; (80060c8 <IKS01A2_MOTION_SENSOR_SetFullScale+0x78>)
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8006072:	68bb      	ldr	r3, [r7, #8]
 8006074:	4013      	ands	r3, r2
 8006076:	68ba      	ldr	r2, [r7, #8]
 8006078:	429a      	cmp	r2, r3
 800607a:	d11d      	bne.n	80060b8 <IKS01A2_MOTION_SENSOR_SetFullScale+0x68>
    {
      if (MotionFuncDrv[Instance][FunctionIndex[Function]]->SetFullScale(MotionCompObj[Instance],
 800607c:	4a13      	ldr	r2, [pc, #76]	; (80060cc <IKS01A2_MOTION_SENSOR_SetFullScale+0x7c>)
 800607e:	68bb      	ldr	r3, [r7, #8]
 8006080:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8006084:	4812      	ldr	r0, [pc, #72]	; (80060d0 <IKS01A2_MOTION_SENSOR_SetFullScale+0x80>)
 8006086:	68fa      	ldr	r2, [r7, #12]
 8006088:	4613      	mov	r3, r2
 800608a:	005b      	lsls	r3, r3, #1
 800608c:	4413      	add	r3, r2
 800608e:	440b      	add	r3, r1
 8006090:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8006094:	699b      	ldr	r3, [r3, #24]
 8006096:	490f      	ldr	r1, [pc, #60]	; (80060d4 <IKS01A2_MOTION_SENSOR_SetFullScale+0x84>)
 8006098:	68fa      	ldr	r2, [r7, #12]
 800609a:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800609e:	6879      	ldr	r1, [r7, #4]
 80060a0:	4610      	mov	r0, r2
 80060a2:	4798      	blx	r3
 80060a4:	4603      	mov	r3, r0
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d003      	beq.n	80060b2 <IKS01A2_MOTION_SENSOR_SetFullScale+0x62>
                                                                         Fullscale) != BSP_ERROR_NONE)
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 80060aa:	f06f 0304 	mvn.w	r3, #4
 80060ae:	617b      	str	r3, [r7, #20]
 80060b0:	e005      	b.n	80060be <IKS01A2_MOTION_SENSOR_SetFullScale+0x6e>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 80060b2:	2300      	movs	r3, #0
 80060b4:	617b      	str	r3, [r7, #20]
 80060b6:	e002      	b.n	80060be <IKS01A2_MOTION_SENSOR_SetFullScale+0x6e>
      }
    }
    else
    {
      ret = BSP_ERROR_WRONG_PARAM;
 80060b8:	f06f 0301 	mvn.w	r3, #1
 80060bc:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 80060be:	697b      	ldr	r3, [r7, #20]
}
 80060c0:	4618      	mov	r0, r3
 80060c2:	3718      	adds	r7, #24
 80060c4:	46bd      	mov	sp, r7
 80060c6:	bd80      	pop	{r7, pc}
 80060c8:	20000718 	.word	0x20000718
 80060cc:	200000ec 	.word	0x200000ec
 80060d0:	200006e8 	.word	0x200006e8
 80060d4:	200006dc 	.word	0x200006dc

080060d8 <LSM6DSL_0_Probe>:
/**
  * @brief  Register Bus IOs for instance 0 if component ID is OK
  * @retval BSP status
  */
static int32_t LSM6DSL_0_Probe(uint32_t Functions)
{
 80060d8:	b580      	push	{r7, lr}
 80060da:	b094      	sub	sp, #80	; 0x50
 80060dc:	af00      	add	r7, sp, #0
 80060de:	6078      	str	r0, [r7, #4]
  LSM6DSL_IO_t            io_ctx;
  uint8_t                 id;
  static LSM6DSL_Object_t lsm6dsl_obj_0;
  LSM6DSL_Capabilities_t  cap;
  int32_t ret = BSP_ERROR_NONE;
 80060e0:	2300      	movs	r3, #0
 80060e2:	64fb      	str	r3, [r7, #76]	; 0x4c

  /* Configure the accelero driver */
  io_ctx.BusType     = LSM6DSL_I2C_BUS; /* I2C */
 80060e4:	2300      	movs	r3, #0
 80060e6:	637b      	str	r3, [r7, #52]	; 0x34
  io_ctx.Address     = LSM6DSL_I2C_ADD_H;
 80060e8:	23d7      	movs	r3, #215	; 0xd7
 80060ea:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  io_ctx.Init        = IKS01A2_I2C_Init;
 80060ee:	4b4a      	ldr	r3, [pc, #296]	; (8006218 <LSM6DSL_0_Probe+0x140>)
 80060f0:	62fb      	str	r3, [r7, #44]	; 0x2c
  io_ctx.DeInit      = IKS01A2_I2C_DeInit;
 80060f2:	4b4a      	ldr	r3, [pc, #296]	; (800621c <LSM6DSL_0_Probe+0x144>)
 80060f4:	633b      	str	r3, [r7, #48]	; 0x30
  io_ctx.ReadReg     = IKS01A2_I2C_ReadReg;
 80060f6:	4b4a      	ldr	r3, [pc, #296]	; (8006220 <LSM6DSL_0_Probe+0x148>)
 80060f8:	643b      	str	r3, [r7, #64]	; 0x40
  io_ctx.WriteReg    = IKS01A2_I2C_WriteReg;
 80060fa:	4b4a      	ldr	r3, [pc, #296]	; (8006224 <LSM6DSL_0_Probe+0x14c>)
 80060fc:	63fb      	str	r3, [r7, #60]	; 0x3c
  io_ctx.GetTick     = IKS01A2_GetTick;
 80060fe:	4b4a      	ldr	r3, [pc, #296]	; (8006228 <LSM6DSL_0_Probe+0x150>)
 8006100:	647b      	str	r3, [r7, #68]	; 0x44

  if (LSM6DSL_RegisterBusIO(&lsm6dsl_obj_0, &io_ctx) != LSM6DSL_OK)
 8006102:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8006106:	4619      	mov	r1, r3
 8006108:	4848      	ldr	r0, [pc, #288]	; (800622c <LSM6DSL_0_Probe+0x154>)
 800610a:	f7fe fb01 	bl	8004710 <LSM6DSL_RegisterBusIO>
 800610e:	4603      	mov	r3, r0
 8006110:	2b00      	cmp	r3, #0
 8006112:	d003      	beq.n	800611c <LSM6DSL_0_Probe+0x44>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8006114:	f06f 0306 	mvn.w	r3, #6
 8006118:	64fb      	str	r3, [r7, #76]	; 0x4c
 800611a:	e077      	b.n	800620c <LSM6DSL_0_Probe+0x134>
  }
  else if (LSM6DSL_ReadID(&lsm6dsl_obj_0, &id) != LSM6DSL_OK)
 800611c:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 8006120:	4619      	mov	r1, r3
 8006122:	4842      	ldr	r0, [pc, #264]	; (800622c <LSM6DSL_0_Probe+0x154>)
 8006124:	f7fe fbee 	bl	8004904 <LSM6DSL_ReadID>
 8006128:	4603      	mov	r3, r0
 800612a:	2b00      	cmp	r3, #0
 800612c:	d003      	beq.n	8006136 <LSM6DSL_0_Probe+0x5e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800612e:	f06f 0306 	mvn.w	r3, #6
 8006132:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006134:	e06a      	b.n	800620c <LSM6DSL_0_Probe+0x134>
  }
  else if (id != LSM6DSL_ID)
 8006136:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800613a:	2b6a      	cmp	r3, #106	; 0x6a
 800613c:	d003      	beq.n	8006146 <LSM6DSL_0_Probe+0x6e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800613e:	f06f 0306 	mvn.w	r3, #6
 8006142:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006144:	e062      	b.n	800620c <LSM6DSL_0_Probe+0x134>
  }
  else
  {
    (void)LSM6DSL_GetCapabilities(&lsm6dsl_obj_0, &cap);
 8006146:	f107 030c 	add.w	r3, r7, #12
 800614a:	4619      	mov	r1, r3
 800614c:	4837      	ldr	r0, [pc, #220]	; (800622c <LSM6DSL_0_Probe+0x154>)
 800614e:	f7fe fbef 	bl	8004930 <LSM6DSL_GetCapabilities>
    MotionCtx[IKS01A2_LSM6DSL_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((uint32_t)cap.Magneto << 2);
 8006152:	7b7b      	ldrb	r3, [r7, #13]
 8006154:	461a      	mov	r2, r3
 8006156:	7b3b      	ldrb	r3, [r7, #12]
 8006158:	005b      	lsls	r3, r3, #1
 800615a:	431a      	orrs	r2, r3
 800615c:	7bbb      	ldrb	r3, [r7, #14]
 800615e:	009b      	lsls	r3, r3, #2
 8006160:	4313      	orrs	r3, r2
 8006162:	4a33      	ldr	r2, [pc, #204]	; (8006230 <LSM6DSL_0_Probe+0x158>)
 8006164:	6013      	str	r3, [r2, #0]

    MotionCompObj[IKS01A2_LSM6DSL_0] = &lsm6dsl_obj_0;
 8006166:	4b33      	ldr	r3, [pc, #204]	; (8006234 <LSM6DSL_0_Probe+0x15c>)
 8006168:	4a30      	ldr	r2, [pc, #192]	; (800622c <LSM6DSL_0_Probe+0x154>)
 800616a:	601a      	str	r2, [r3, #0]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    MotionDrv[IKS01A2_LSM6DSL_0] = (MOTION_SENSOR_CommonDrv_t *)(void *)&LSM6DSL_COMMON_Driver;
 800616c:	4b32      	ldr	r3, [pc, #200]	; (8006238 <LSM6DSL_0_Probe+0x160>)
 800616e:	4a33      	ldr	r2, [pc, #204]	; (800623c <LSM6DSL_0_Probe+0x164>)
 8006170:	601a      	str	r2, [r3, #0]

    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_GYRO) == MOTION_GYRO) && (cap.Gyro == 1U))
 8006172:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006174:	2b00      	cmp	r3, #0
 8006176:	d11d      	bne.n	80061b4 <LSM6DSL_0_Probe+0xdc>
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	f003 0301 	and.w	r3, r3, #1
 800617e:	2b00      	cmp	r3, #0
 8006180:	d018      	beq.n	80061b4 <LSM6DSL_0_Probe+0xdc>
 8006182:	7b7b      	ldrb	r3, [r7, #13]
 8006184:	2b01      	cmp	r3, #1
 8006186:	d115      	bne.n	80061b4 <LSM6DSL_0_Probe+0xdc>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[IKS01A2_LSM6DSL_0][FunctionIndex[MOTION_GYRO]] = (MOTION_SENSOR_FuncDrv_t *)(void *)&LSM6DSL_GYRO_Driver;
 8006188:	4b2d      	ldr	r3, [pc, #180]	; (8006240 <LSM6DSL_0_Probe+0x168>)
 800618a:	685b      	ldr	r3, [r3, #4]
 800618c:	4a2d      	ldr	r2, [pc, #180]	; (8006244 <LSM6DSL_0_Probe+0x16c>)
 800618e:	492e      	ldr	r1, [pc, #184]	; (8006248 <LSM6DSL_0_Probe+0x170>)
 8006190:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

      if (MotionDrv[IKS01A2_LSM6DSL_0]->Init(MotionCompObj[IKS01A2_LSM6DSL_0]) != LSM6DSL_OK)
 8006194:	4b28      	ldr	r3, [pc, #160]	; (8006238 <LSM6DSL_0_Probe+0x160>)
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	4a26      	ldr	r2, [pc, #152]	; (8006234 <LSM6DSL_0_Probe+0x15c>)
 800619c:	6812      	ldr	r2, [r2, #0]
 800619e:	4610      	mov	r0, r2
 80061a0:	4798      	blx	r3
 80061a2:	4603      	mov	r3, r0
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d003      	beq.n	80061b0 <LSM6DSL_0_Probe+0xd8>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 80061a8:	f06f 0304 	mvn.w	r3, #4
 80061ac:	64fb      	str	r3, [r7, #76]	; 0x4c
 80061ae:	e001      	b.n	80061b4 <LSM6DSL_0_Probe+0xdc>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 80061b0:	2300      	movs	r3, #0
 80061b2:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_ACCELERO) == MOTION_ACCELERO) && (cap.Acc == 1U))
 80061b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d11d      	bne.n	80061f6 <LSM6DSL_0_Probe+0x11e>
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	f003 0302 	and.w	r3, r3, #2
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d018      	beq.n	80061f6 <LSM6DSL_0_Probe+0x11e>
 80061c4:	7b3b      	ldrb	r3, [r7, #12]
 80061c6:	2b01      	cmp	r3, #1
 80061c8:	d115      	bne.n	80061f6 <LSM6DSL_0_Probe+0x11e>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[IKS01A2_LSM6DSL_0][FunctionIndex[MOTION_ACCELERO]] = (MOTION_SENSOR_FuncDrv_t *)(
 80061ca:	4b1d      	ldr	r3, [pc, #116]	; (8006240 <LSM6DSL_0_Probe+0x168>)
 80061cc:	689b      	ldr	r3, [r3, #8]
 80061ce:	4a1d      	ldr	r2, [pc, #116]	; (8006244 <LSM6DSL_0_Probe+0x16c>)
 80061d0:	491e      	ldr	r1, [pc, #120]	; (800624c <LSM6DSL_0_Probe+0x174>)
 80061d2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                                                                           void *)&LSM6DSL_ACC_Driver;

      if (MotionDrv[IKS01A2_LSM6DSL_0]->Init(MotionCompObj[IKS01A2_LSM6DSL_0]) != LSM6DSL_OK)
 80061d6:	4b18      	ldr	r3, [pc, #96]	; (8006238 <LSM6DSL_0_Probe+0x160>)
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	4a15      	ldr	r2, [pc, #84]	; (8006234 <LSM6DSL_0_Probe+0x15c>)
 80061de:	6812      	ldr	r2, [r2, #0]
 80061e0:	4610      	mov	r0, r2
 80061e2:	4798      	blx	r3
 80061e4:	4603      	mov	r3, r0
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d003      	beq.n	80061f2 <LSM6DSL_0_Probe+0x11a>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 80061ea:	f06f 0304 	mvn.w	r3, #4
 80061ee:	64fb      	str	r3, [r7, #76]	; 0x4c
 80061f0:	e001      	b.n	80061f6 <LSM6DSL_0_Probe+0x11e>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 80061f2:	2300      	movs	r3, #0
 80061f4:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_MAGNETO) == MOTION_MAGNETO))
 80061f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d107      	bne.n	800620c <LSM6DSL_0_Probe+0x134>
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	f003 0304 	and.w	r3, r3, #4
 8006202:	2b00      	cmp	r3, #0
 8006204:	d002      	beq.n	800620c <LSM6DSL_0_Probe+0x134>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8006206:	f06f 0304 	mvn.w	r3, #4
 800620a:	64fb      	str	r3, [r7, #76]	; 0x4c
    }
  }
  return ret;
 800620c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
}
 800620e:	4618      	mov	r0, r3
 8006210:	3750      	adds	r7, #80	; 0x50
 8006212:	46bd      	mov	sp, r7
 8006214:	bd80      	pop	{r7, pc}
 8006216:	bf00      	nop
 8006218:	0800261d 	.word	0x0800261d
 800621c:	08002681 	.word	0x08002681
 8006220:	08002735 	.word	0x08002735
 8006224:	080026d1 	.word	0x080026d1
 8006228:	08002799 	.word	0x08002799
 800622c:	20000724 	.word	0x20000724
 8006230:	20000718 	.word	0x20000718
 8006234:	200006dc 	.word	0x200006dc
 8006238:	2000070c 	.word	0x2000070c
 800623c:	20000094 	.word	0x20000094
 8006240:	200000ec 	.word	0x200000ec
 8006244:	200006e8 	.word	0x200006e8
 8006248:	200000c8 	.word	0x200000c8
 800624c:	200000a4 	.word	0x200000a4

08006250 <LSM303AGR_ACC_0_Probe>:
/**
  * @brief  Register Bus IOs for instance 1 if component ID is OK
  * @retval error status
  */
static int32_t LSM303AGR_ACC_0_Probe(uint32_t Functions)
{
 8006250:	b580      	push	{r7, lr}
 8006252:	b094      	sub	sp, #80	; 0x50
 8006254:	af00      	add	r7, sp, #0
 8006256:	6078      	str	r0, [r7, #4]
  LSM303AGR_IO_t                io_ctx;
  uint8_t                       id;
  static LSM303AGR_ACC_Object_t lsm303agr_acc_obj_0;
  LSM303AGR_Capabilities_t      cap;
  int32_t ret = BSP_ERROR_NONE;
 8006258:	2300      	movs	r3, #0
 800625a:	64fb      	str	r3, [r7, #76]	; 0x4c

  /* Configure the accelero driver */
  io_ctx.BusType     = LSM303AGR_I2C_BUS; /* I2C */
 800625c:	2300      	movs	r3, #0
 800625e:	637b      	str	r3, [r7, #52]	; 0x34
  io_ctx.Address     = LSM303AGR_I2C_ADD_XL;
 8006260:	2333      	movs	r3, #51	; 0x33
 8006262:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  io_ctx.Init        = IKS01A2_I2C_Init;
 8006266:	4b3f      	ldr	r3, [pc, #252]	; (8006364 <LSM303AGR_ACC_0_Probe+0x114>)
 8006268:	62fb      	str	r3, [r7, #44]	; 0x2c
  io_ctx.DeInit      = IKS01A2_I2C_DeInit;
 800626a:	4b3f      	ldr	r3, [pc, #252]	; (8006368 <LSM303AGR_ACC_0_Probe+0x118>)
 800626c:	633b      	str	r3, [r7, #48]	; 0x30
  io_ctx.ReadReg     = IKS01A2_I2C_ReadReg;
 800626e:	4b3f      	ldr	r3, [pc, #252]	; (800636c <LSM303AGR_ACC_0_Probe+0x11c>)
 8006270:	643b      	str	r3, [r7, #64]	; 0x40
  io_ctx.WriteReg    = IKS01A2_I2C_WriteReg;
 8006272:	4b3f      	ldr	r3, [pc, #252]	; (8006370 <LSM303AGR_ACC_0_Probe+0x120>)
 8006274:	63fb      	str	r3, [r7, #60]	; 0x3c
  io_ctx.GetTick     = IKS01A2_GetTick;
 8006276:	4b3f      	ldr	r3, [pc, #252]	; (8006374 <LSM303AGR_ACC_0_Probe+0x124>)
 8006278:	647b      	str	r3, [r7, #68]	; 0x44

  if (LSM303AGR_ACC_RegisterBusIO(&lsm303agr_acc_obj_0, &io_ctx) != LSM303AGR_OK)
 800627a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800627e:	4619      	mov	r1, r3
 8006280:	483d      	ldr	r0, [pc, #244]	; (8006378 <LSM303AGR_ACC_0_Probe+0x128>)
 8006282:	f7fc fe8b 	bl	8002f9c <LSM303AGR_ACC_RegisterBusIO>
 8006286:	4603      	mov	r3, r0
 8006288:	2b00      	cmp	r3, #0
 800628a:	d003      	beq.n	8006294 <LSM303AGR_ACC_0_Probe+0x44>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800628c:	f06f 0306 	mvn.w	r3, #6
 8006290:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006292:	e062      	b.n	800635a <LSM303AGR_ACC_0_Probe+0x10a>
  }
  else if (LSM303AGR_ACC_ReadID(&lsm303agr_acc_obj_0, &id) != LSM303AGR_OK)
 8006294:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 8006298:	4619      	mov	r1, r3
 800629a:	4837      	ldr	r0, [pc, #220]	; (8006378 <LSM303AGR_ACC_0_Probe+0x128>)
 800629c:	f7fc ff43 	bl	8003126 <LSM303AGR_ACC_ReadID>
 80062a0:	4603      	mov	r3, r0
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d003      	beq.n	80062ae <LSM303AGR_ACC_0_Probe+0x5e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 80062a6:	f06f 0306 	mvn.w	r3, #6
 80062aa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80062ac:	e055      	b.n	800635a <LSM303AGR_ACC_0_Probe+0x10a>
  }
  else if (id != (uint8_t)LSM303AGR_ID_XL)
 80062ae:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80062b2:	2b33      	cmp	r3, #51	; 0x33
 80062b4:	d003      	beq.n	80062be <LSM303AGR_ACC_0_Probe+0x6e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 80062b6:	f06f 0306 	mvn.w	r3, #6
 80062ba:	64fb      	str	r3, [r7, #76]	; 0x4c
 80062bc:	e04d      	b.n	800635a <LSM303AGR_ACC_0_Probe+0x10a>
  }
  else
  {
    (void)LSM303AGR_ACC_GetCapabilities(&lsm303agr_acc_obj_0, &cap);
 80062be:	f107 030c 	add.w	r3, r7, #12
 80062c2:	4619      	mov	r1, r3
 80062c4:	482c      	ldr	r0, [pc, #176]	; (8006378 <LSM303AGR_ACC_0_Probe+0x128>)
 80062c6:	f7fc ff45 	bl	8003154 <LSM303AGR_ACC_GetCapabilities>
    MotionCtx[IKS01A2_LSM303AGR_ACC_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((
 80062ca:	7b7b      	ldrb	r3, [r7, #13]
 80062cc:	461a      	mov	r2, r3
 80062ce:	7b3b      	ldrb	r3, [r7, #12]
 80062d0:	005b      	lsls	r3, r3, #1
 80062d2:	431a      	orrs	r2, r3
                                                     uint32_t)cap.Magneto << 2);
 80062d4:	7bbb      	ldrb	r3, [r7, #14]
 80062d6:	009b      	lsls	r3, r3, #2
    MotionCtx[IKS01A2_LSM303AGR_ACC_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((
 80062d8:	4313      	orrs	r3, r2
 80062da:	4a28      	ldr	r2, [pc, #160]	; (800637c <LSM303AGR_ACC_0_Probe+0x12c>)
 80062dc:	6053      	str	r3, [r2, #4]

    MotionCompObj[IKS01A2_LSM303AGR_ACC_0] = &lsm303agr_acc_obj_0;
 80062de:	4b28      	ldr	r3, [pc, #160]	; (8006380 <LSM303AGR_ACC_0_Probe+0x130>)
 80062e0:	4a25      	ldr	r2, [pc, #148]	; (8006378 <LSM303AGR_ACC_0_Probe+0x128>)
 80062e2:	605a      	str	r2, [r3, #4]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    MotionDrv[IKS01A2_LSM303AGR_ACC_0] = (MOTION_SENSOR_CommonDrv_t *)(void *)&LSM303AGR_ACC_COMMON_Driver;
 80062e4:	4b27      	ldr	r3, [pc, #156]	; (8006384 <LSM303AGR_ACC_0_Probe+0x134>)
 80062e6:	4a28      	ldr	r2, [pc, #160]	; (8006388 <LSM303AGR_ACC_0_Probe+0x138>)
 80062e8:	605a      	str	r2, [r3, #4]

    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_ACCELERO) == MOTION_ACCELERO) && (cap.Acc == 1U))
 80062ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d11e      	bne.n	800632e <LSM303AGR_ACC_0_Probe+0xde>
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	f003 0302 	and.w	r3, r3, #2
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d019      	beq.n	800632e <LSM303AGR_ACC_0_Probe+0xde>
 80062fa:	7b3b      	ldrb	r3, [r7, #12]
 80062fc:	2b01      	cmp	r3, #1
 80062fe:	d116      	bne.n	800632e <LSM303AGR_ACC_0_Probe+0xde>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[IKS01A2_LSM303AGR_ACC_0][FunctionIndex[MOTION_ACCELERO]] = (MOTION_SENSOR_FuncDrv_t *)(
 8006300:	4b22      	ldr	r3, [pc, #136]	; (800638c <LSM303AGR_ACC_0_Probe+0x13c>)
 8006302:	689b      	ldr	r3, [r3, #8]
 8006304:	4a22      	ldr	r2, [pc, #136]	; (8006390 <LSM303AGR_ACC_0_Probe+0x140>)
 8006306:	3303      	adds	r3, #3
 8006308:	4922      	ldr	r1, [pc, #136]	; (8006394 <LSM303AGR_ACC_0_Probe+0x144>)
 800630a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                                                                                 void *)&LSM303AGR_ACC_Driver;

      if (MotionDrv[IKS01A2_LSM303AGR_ACC_0]->Init(MotionCompObj[IKS01A2_LSM303AGR_ACC_0]) != LSM303AGR_OK)
 800630e:	4b1d      	ldr	r3, [pc, #116]	; (8006384 <LSM303AGR_ACC_0_Probe+0x134>)
 8006310:	685b      	ldr	r3, [r3, #4]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	4a1a      	ldr	r2, [pc, #104]	; (8006380 <LSM303AGR_ACC_0_Probe+0x130>)
 8006316:	6852      	ldr	r2, [r2, #4]
 8006318:	4610      	mov	r0, r2
 800631a:	4798      	blx	r3
 800631c:	4603      	mov	r3, r0
 800631e:	2b00      	cmp	r3, #0
 8006320:	d003      	beq.n	800632a <LSM303AGR_ACC_0_Probe+0xda>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8006322:	f06f 0304 	mvn.w	r3, #4
 8006326:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006328:	e001      	b.n	800632e <LSM303AGR_ACC_0_Probe+0xde>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800632a:	2300      	movs	r3, #0
 800632c:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_GYRO) == MOTION_GYRO))
 800632e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006330:	2b00      	cmp	r3, #0
 8006332:	d107      	bne.n	8006344 <LSM303AGR_ACC_0_Probe+0xf4>
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	f003 0301 	and.w	r3, r3, #1
 800633a:	2b00      	cmp	r3, #0
 800633c:	d002      	beq.n	8006344 <LSM303AGR_ACC_0_Probe+0xf4>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800633e:	f06f 0304 	mvn.w	r3, #4
 8006342:	64fb      	str	r3, [r7, #76]	; 0x4c
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_MAGNETO) == MOTION_MAGNETO))
 8006344:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006346:	2b00      	cmp	r3, #0
 8006348:	d107      	bne.n	800635a <LSM303AGR_ACC_0_Probe+0x10a>
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	f003 0304 	and.w	r3, r3, #4
 8006350:	2b00      	cmp	r3, #0
 8006352:	d002      	beq.n	800635a <LSM303AGR_ACC_0_Probe+0x10a>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8006354:	f06f 0304 	mvn.w	r3, #4
 8006358:	64fb      	str	r3, [r7, #76]	; 0x4c
    }
  }

  return ret;
 800635a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
}
 800635c:	4618      	mov	r0, r3
 800635e:	3750      	adds	r7, #80	; 0x50
 8006360:	46bd      	mov	sp, r7
 8006362:	bd80      	pop	{r7, pc}
 8006364:	0800261d 	.word	0x0800261d
 8006368:	08002681 	.word	0x08002681
 800636c:	08002735 	.word	0x08002735
 8006370:	080026d1 	.word	0x080026d1
 8006374:	08002799 	.word	0x08002799
 8006378:	2000075c 	.word	0x2000075c
 800637c:	20000718 	.word	0x20000718
 8006380:	200006dc 	.word	0x200006dc
 8006384:	2000070c 	.word	0x2000070c
 8006388:	2000002c 	.word	0x2000002c
 800638c:	200000ec 	.word	0x200000ec
 8006390:	200006e8 	.word	0x200006e8
 8006394:	2000003c 	.word	0x2000003c

08006398 <LSM303AGR_MAG_0_Probe>:
/**
  * @brief  Register Bus IOs for instance 2 if component ID is OK
  * @retval error status
  */
static int32_t LSM303AGR_MAG_0_Probe(uint32_t Functions)
{
 8006398:	b580      	push	{r7, lr}
 800639a:	b094      	sub	sp, #80	; 0x50
 800639c:	af00      	add	r7, sp, #0
 800639e:	6078      	str	r0, [r7, #4]
  LSM303AGR_IO_t                io_ctx;
  uint8_t                       id;
  static LSM303AGR_MAG_Object_t lsm303agr_mag_obj_0;
  LSM303AGR_Capabilities_t      cap;
  int32_t ret = BSP_ERROR_NONE;
 80063a0:	2300      	movs	r3, #0
 80063a2:	64fb      	str	r3, [r7, #76]	; 0x4c

  /* Configure the magneto driver */
  io_ctx.BusType     = LSM303AGR_I2C_BUS; /* I2C */
 80063a4:	2300      	movs	r3, #0
 80063a6:	637b      	str	r3, [r7, #52]	; 0x34
  io_ctx.Address     = LSM303AGR_I2C_ADD_MG;
 80063a8:	233d      	movs	r3, #61	; 0x3d
 80063aa:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  io_ctx.Init        = IKS01A2_I2C_Init;
 80063ae:	4b3f      	ldr	r3, [pc, #252]	; (80064ac <LSM303AGR_MAG_0_Probe+0x114>)
 80063b0:	62fb      	str	r3, [r7, #44]	; 0x2c
  io_ctx.DeInit      = IKS01A2_I2C_DeInit;
 80063b2:	4b3f      	ldr	r3, [pc, #252]	; (80064b0 <LSM303AGR_MAG_0_Probe+0x118>)
 80063b4:	633b      	str	r3, [r7, #48]	; 0x30
  io_ctx.ReadReg     = IKS01A2_I2C_ReadReg;
 80063b6:	4b3f      	ldr	r3, [pc, #252]	; (80064b4 <LSM303AGR_MAG_0_Probe+0x11c>)
 80063b8:	643b      	str	r3, [r7, #64]	; 0x40
  io_ctx.WriteReg    = IKS01A2_I2C_WriteReg;
 80063ba:	4b3f      	ldr	r3, [pc, #252]	; (80064b8 <LSM303AGR_MAG_0_Probe+0x120>)
 80063bc:	63fb      	str	r3, [r7, #60]	; 0x3c
  io_ctx.GetTick     = IKS01A2_GetTick;
 80063be:	4b3f      	ldr	r3, [pc, #252]	; (80064bc <LSM303AGR_MAG_0_Probe+0x124>)
 80063c0:	647b      	str	r3, [r7, #68]	; 0x44

  if (LSM303AGR_MAG_RegisterBusIO(&lsm303agr_mag_obj_0, &io_ctx) != LSM303AGR_OK)
 80063c2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80063c6:	4619      	mov	r1, r3
 80063c8:	483d      	ldr	r0, [pc, #244]	; (80064c0 <LSM303AGR_MAG_0_Probe+0x128>)
 80063ca:	f7fd f9b1 	bl	8003730 <LSM303AGR_MAG_RegisterBusIO>
 80063ce:	4603      	mov	r3, r0
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d003      	beq.n	80063dc <LSM303AGR_MAG_0_Probe+0x44>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 80063d4:	f06f 0306 	mvn.w	r3, #6
 80063d8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80063da:	e062      	b.n	80064a2 <LSM303AGR_MAG_0_Probe+0x10a>
  }
  else if (LSM303AGR_MAG_ReadID(&lsm303agr_mag_obj_0, &id) != LSM303AGR_OK)
 80063dc:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 80063e0:	4619      	mov	r1, r3
 80063e2:	4837      	ldr	r0, [pc, #220]	; (80064c0 <LSM303AGR_MAG_0_Probe+0x128>)
 80063e4:	f7fd fa5b 	bl	800389e <LSM303AGR_MAG_ReadID>
 80063e8:	4603      	mov	r3, r0
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d003      	beq.n	80063f6 <LSM303AGR_MAG_0_Probe+0x5e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 80063ee:	f06f 0306 	mvn.w	r3, #6
 80063f2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80063f4:	e055      	b.n	80064a2 <LSM303AGR_MAG_0_Probe+0x10a>
  }
  else if (id != (uint8_t)LSM303AGR_ID_MG)
 80063f6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80063fa:	2b40      	cmp	r3, #64	; 0x40
 80063fc:	d003      	beq.n	8006406 <LSM303AGR_MAG_0_Probe+0x6e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 80063fe:	f06f 0306 	mvn.w	r3, #6
 8006402:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006404:	e04d      	b.n	80064a2 <LSM303AGR_MAG_0_Probe+0x10a>
  }
  else
  {
    (void)LSM303AGR_MAG_GetCapabilities(&lsm303agr_mag_obj_0, &cap);
 8006406:	f107 030c 	add.w	r3, r7, #12
 800640a:	4619      	mov	r1, r3
 800640c:	482c      	ldr	r0, [pc, #176]	; (80064c0 <LSM303AGR_MAG_0_Probe+0x128>)
 800640e:	f7fd fa5d 	bl	80038cc <LSM303AGR_MAG_GetCapabilities>
    MotionCtx[IKS01A2_LSM303AGR_MAG_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((
 8006412:	7b7b      	ldrb	r3, [r7, #13]
 8006414:	461a      	mov	r2, r3
 8006416:	7b3b      	ldrb	r3, [r7, #12]
 8006418:	005b      	lsls	r3, r3, #1
 800641a:	431a      	orrs	r2, r3
                                                     uint32_t)cap.Magneto << 2);
 800641c:	7bbb      	ldrb	r3, [r7, #14]
 800641e:	009b      	lsls	r3, r3, #2
    MotionCtx[IKS01A2_LSM303AGR_MAG_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((
 8006420:	4313      	orrs	r3, r2
 8006422:	4a28      	ldr	r2, [pc, #160]	; (80064c4 <LSM303AGR_MAG_0_Probe+0x12c>)
 8006424:	6093      	str	r3, [r2, #8]

    MotionCompObj[IKS01A2_LSM303AGR_MAG_0] = &lsm303agr_mag_obj_0;
 8006426:	4b28      	ldr	r3, [pc, #160]	; (80064c8 <LSM303AGR_MAG_0_Probe+0x130>)
 8006428:	4a25      	ldr	r2, [pc, #148]	; (80064c0 <LSM303AGR_MAG_0_Probe+0x128>)
 800642a:	609a      	str	r2, [r3, #8]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    MotionDrv[IKS01A2_LSM303AGR_MAG_0] = (MOTION_SENSOR_CommonDrv_t *)(void *)&LSM303AGR_MAG_COMMON_Driver;
 800642c:	4b27      	ldr	r3, [pc, #156]	; (80064cc <LSM303AGR_MAG_0_Probe+0x134>)
 800642e:	4a28      	ldr	r2, [pc, #160]	; (80064d0 <LSM303AGR_MAG_0_Probe+0x138>)
 8006430:	609a      	str	r2, [r3, #8]

    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_MAGNETO) == MOTION_MAGNETO) && (cap.Magneto == 1U))
 8006432:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006434:	2b00      	cmp	r3, #0
 8006436:	d11e      	bne.n	8006476 <LSM303AGR_MAG_0_Probe+0xde>
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	f003 0304 	and.w	r3, r3, #4
 800643e:	2b00      	cmp	r3, #0
 8006440:	d019      	beq.n	8006476 <LSM303AGR_MAG_0_Probe+0xde>
 8006442:	7bbb      	ldrb	r3, [r7, #14]
 8006444:	2b01      	cmp	r3, #1
 8006446:	d116      	bne.n	8006476 <LSM303AGR_MAG_0_Probe+0xde>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[IKS01A2_LSM303AGR_MAG_0][FunctionIndex[MOTION_MAGNETO]] = (MOTION_SENSOR_FuncDrv_t *)(
 8006448:	4b22      	ldr	r3, [pc, #136]	; (80064d4 <LSM303AGR_MAG_0_Probe+0x13c>)
 800644a:	691b      	ldr	r3, [r3, #16]
 800644c:	4a22      	ldr	r2, [pc, #136]	; (80064d8 <LSM303AGR_MAG_0_Probe+0x140>)
 800644e:	3306      	adds	r3, #6
 8006450:	4922      	ldr	r1, [pc, #136]	; (80064dc <LSM303AGR_MAG_0_Probe+0x144>)
 8006452:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                                                                                void *)&LSM303AGR_MAG_Driver;

      if (MotionDrv[IKS01A2_LSM303AGR_MAG_0]->Init(MotionCompObj[IKS01A2_LSM303AGR_MAG_0]) != LSM303AGR_OK)
 8006456:	4b1d      	ldr	r3, [pc, #116]	; (80064cc <LSM303AGR_MAG_0_Probe+0x134>)
 8006458:	689b      	ldr	r3, [r3, #8]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	4a1a      	ldr	r2, [pc, #104]	; (80064c8 <LSM303AGR_MAG_0_Probe+0x130>)
 800645e:	6892      	ldr	r2, [r2, #8]
 8006460:	4610      	mov	r0, r2
 8006462:	4798      	blx	r3
 8006464:	4603      	mov	r3, r0
 8006466:	2b00      	cmp	r3, #0
 8006468:	d003      	beq.n	8006472 <LSM303AGR_MAG_0_Probe+0xda>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800646a:	f06f 0304 	mvn.w	r3, #4
 800646e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006470:	e001      	b.n	8006476 <LSM303AGR_MAG_0_Probe+0xde>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8006472:	2300      	movs	r3, #0
 8006474:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_ACCELERO) == MOTION_ACCELERO))
 8006476:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006478:	2b00      	cmp	r3, #0
 800647a:	d107      	bne.n	800648c <LSM303AGR_MAG_0_Probe+0xf4>
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	f003 0302 	and.w	r3, r3, #2
 8006482:	2b00      	cmp	r3, #0
 8006484:	d002      	beq.n	800648c <LSM303AGR_MAG_0_Probe+0xf4>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8006486:	f06f 0304 	mvn.w	r3, #4
 800648a:	64fb      	str	r3, [r7, #76]	; 0x4c
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_GYRO) == MOTION_GYRO))
 800648c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800648e:	2b00      	cmp	r3, #0
 8006490:	d107      	bne.n	80064a2 <LSM303AGR_MAG_0_Probe+0x10a>
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	f003 0301 	and.w	r3, r3, #1
 8006498:	2b00      	cmp	r3, #0
 800649a:	d002      	beq.n	80064a2 <LSM303AGR_MAG_0_Probe+0x10a>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800649c:	f06f 0304 	mvn.w	r3, #4
 80064a0:	64fb      	str	r3, [r7, #76]	; 0x4c
    }
  }

  return ret;
 80064a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
}
 80064a4:	4618      	mov	r0, r3
 80064a6:	3750      	adds	r7, #80	; 0x50
 80064a8:	46bd      	mov	sp, r7
 80064aa:	bd80      	pop	{r7, pc}
 80064ac:	0800261d 	.word	0x0800261d
 80064b0:	08002681 	.word	0x08002681
 80064b4:	08002735 	.word	0x08002735
 80064b8:	080026d1 	.word	0x080026d1
 80064bc:	08002799 	.word	0x08002799
 80064c0:	20000790 	.word	0x20000790
 80064c4:	20000718 	.word	0x20000718
 80064c8:	200006dc 	.word	0x200006dc
 80064cc:	2000070c 	.word	0x2000070c
 80064d0:	20000060 	.word	0x20000060
 80064d4:	200000ec 	.word	0x200000ec
 80064d8:	200006e8 	.word	0x200006e8
 80064dc:	20000070 	.word	0x20000070

080064e0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80064e0:	b580      	push	{r7, lr}
 80064e2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80064e4:	4b0e      	ldr	r3, [pc, #56]	; (8006520 <HAL_Init+0x40>)
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	4a0d      	ldr	r2, [pc, #52]	; (8006520 <HAL_Init+0x40>)
 80064ea:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80064ee:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80064f0:	4b0b      	ldr	r3, [pc, #44]	; (8006520 <HAL_Init+0x40>)
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	4a0a      	ldr	r2, [pc, #40]	; (8006520 <HAL_Init+0x40>)
 80064f6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80064fa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80064fc:	4b08      	ldr	r3, [pc, #32]	; (8006520 <HAL_Init+0x40>)
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	4a07      	ldr	r2, [pc, #28]	; (8006520 <HAL_Init+0x40>)
 8006502:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006506:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8006508:	2003      	movs	r0, #3
 800650a:	f000 f94f 	bl	80067ac <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800650e:	2000      	movs	r0, #0
 8006510:	f000 f808 	bl	8006524 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8006514:	f7fb fff6 	bl	8002504 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8006518:	2300      	movs	r3, #0
}
 800651a:	4618      	mov	r0, r3
 800651c:	bd80      	pop	{r7, pc}
 800651e:	bf00      	nop
 8006520:	40023c00 	.word	0x40023c00

08006524 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8006524:	b580      	push	{r7, lr}
 8006526:	b082      	sub	sp, #8
 8006528:	af00      	add	r7, sp, #0
 800652a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800652c:	4b12      	ldr	r3, [pc, #72]	; (8006578 <HAL_InitTick+0x54>)
 800652e:	681a      	ldr	r2, [r3, #0]
 8006530:	4b12      	ldr	r3, [pc, #72]	; (800657c <HAL_InitTick+0x58>)
 8006532:	781b      	ldrb	r3, [r3, #0]
 8006534:	4619      	mov	r1, r3
 8006536:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800653a:	fbb3 f3f1 	udiv	r3, r3, r1
 800653e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006542:	4618      	mov	r0, r3
 8006544:	f000 f967 	bl	8006816 <HAL_SYSTICK_Config>
 8006548:	4603      	mov	r3, r0
 800654a:	2b00      	cmp	r3, #0
 800654c:	d001      	beq.n	8006552 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800654e:	2301      	movs	r3, #1
 8006550:	e00e      	b.n	8006570 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	2b0f      	cmp	r3, #15
 8006556:	d80a      	bhi.n	800656e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8006558:	2200      	movs	r2, #0
 800655a:	6879      	ldr	r1, [r7, #4]
 800655c:	f04f 30ff 	mov.w	r0, #4294967295
 8006560:	f000 f92f 	bl	80067c2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8006564:	4a06      	ldr	r2, [pc, #24]	; (8006580 <HAL_InitTick+0x5c>)
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800656a:	2300      	movs	r3, #0
 800656c:	e000      	b.n	8006570 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800656e:	2301      	movs	r3, #1
}
 8006570:	4618      	mov	r0, r3
 8006572:	3708      	adds	r7, #8
 8006574:	46bd      	mov	sp, r7
 8006576:	bd80      	pop	{r7, pc}
 8006578:	20000028 	.word	0x20000028
 800657c:	20000104 	.word	0x20000104
 8006580:	20000100 	.word	0x20000100

08006584 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8006584:	b480      	push	{r7}
 8006586:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8006588:	4b06      	ldr	r3, [pc, #24]	; (80065a4 <HAL_IncTick+0x20>)
 800658a:	781b      	ldrb	r3, [r3, #0]
 800658c:	461a      	mov	r2, r3
 800658e:	4b06      	ldr	r3, [pc, #24]	; (80065a8 <HAL_IncTick+0x24>)
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	4413      	add	r3, r2
 8006594:	4a04      	ldr	r2, [pc, #16]	; (80065a8 <HAL_IncTick+0x24>)
 8006596:	6013      	str	r3, [r2, #0]
}
 8006598:	bf00      	nop
 800659a:	46bd      	mov	sp, r7
 800659c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065a0:	4770      	bx	lr
 80065a2:	bf00      	nop
 80065a4:	20000104 	.word	0x20000104
 80065a8:	200007c4 	.word	0x200007c4

080065ac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80065ac:	b480      	push	{r7}
 80065ae:	af00      	add	r7, sp, #0
  return uwTick;
 80065b0:	4b03      	ldr	r3, [pc, #12]	; (80065c0 <HAL_GetTick+0x14>)
 80065b2:	681b      	ldr	r3, [r3, #0]
}
 80065b4:	4618      	mov	r0, r3
 80065b6:	46bd      	mov	sp, r7
 80065b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065bc:	4770      	bx	lr
 80065be:	bf00      	nop
 80065c0:	200007c4 	.word	0x200007c4

080065c4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80065c4:	b580      	push	{r7, lr}
 80065c6:	b084      	sub	sp, #16
 80065c8:	af00      	add	r7, sp, #0
 80065ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80065cc:	f7ff ffee 	bl	80065ac <HAL_GetTick>
 80065d0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065dc:	d005      	beq.n	80065ea <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80065de:	4b0a      	ldr	r3, [pc, #40]	; (8006608 <HAL_Delay+0x44>)
 80065e0:	781b      	ldrb	r3, [r3, #0]
 80065e2:	461a      	mov	r2, r3
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	4413      	add	r3, r2
 80065e8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80065ea:	bf00      	nop
 80065ec:	f7ff ffde 	bl	80065ac <HAL_GetTick>
 80065f0:	4602      	mov	r2, r0
 80065f2:	68bb      	ldr	r3, [r7, #8]
 80065f4:	1ad3      	subs	r3, r2, r3
 80065f6:	68fa      	ldr	r2, [r7, #12]
 80065f8:	429a      	cmp	r2, r3
 80065fa:	d8f7      	bhi.n	80065ec <HAL_Delay+0x28>
  {
  }
}
 80065fc:	bf00      	nop
 80065fe:	bf00      	nop
 8006600:	3710      	adds	r7, #16
 8006602:	46bd      	mov	sp, r7
 8006604:	bd80      	pop	{r7, pc}
 8006606:	bf00      	nop
 8006608:	20000104 	.word	0x20000104

0800660c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800660c:	b480      	push	{r7}
 800660e:	b085      	sub	sp, #20
 8006610:	af00      	add	r7, sp, #0
 8006612:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	f003 0307 	and.w	r3, r3, #7
 800661a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800661c:	4b0c      	ldr	r3, [pc, #48]	; (8006650 <__NVIC_SetPriorityGrouping+0x44>)
 800661e:	68db      	ldr	r3, [r3, #12]
 8006620:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006622:	68ba      	ldr	r2, [r7, #8]
 8006624:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8006628:	4013      	ands	r3, r2
 800662a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006630:	68bb      	ldr	r3, [r7, #8]
 8006632:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8006634:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8006638:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800663c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800663e:	4a04      	ldr	r2, [pc, #16]	; (8006650 <__NVIC_SetPriorityGrouping+0x44>)
 8006640:	68bb      	ldr	r3, [r7, #8]
 8006642:	60d3      	str	r3, [r2, #12]
}
 8006644:	bf00      	nop
 8006646:	3714      	adds	r7, #20
 8006648:	46bd      	mov	sp, r7
 800664a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800664e:	4770      	bx	lr
 8006650:	e000ed00 	.word	0xe000ed00

08006654 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8006654:	b480      	push	{r7}
 8006656:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006658:	4b04      	ldr	r3, [pc, #16]	; (800666c <__NVIC_GetPriorityGrouping+0x18>)
 800665a:	68db      	ldr	r3, [r3, #12]
 800665c:	0a1b      	lsrs	r3, r3, #8
 800665e:	f003 0307 	and.w	r3, r3, #7
}
 8006662:	4618      	mov	r0, r3
 8006664:	46bd      	mov	sp, r7
 8006666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800666a:	4770      	bx	lr
 800666c:	e000ed00 	.word	0xe000ed00

08006670 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006670:	b480      	push	{r7}
 8006672:	b083      	sub	sp, #12
 8006674:	af00      	add	r7, sp, #0
 8006676:	4603      	mov	r3, r0
 8006678:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800667a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800667e:	2b00      	cmp	r3, #0
 8006680:	db0b      	blt.n	800669a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006682:	79fb      	ldrb	r3, [r7, #7]
 8006684:	f003 021f 	and.w	r2, r3, #31
 8006688:	4907      	ldr	r1, [pc, #28]	; (80066a8 <__NVIC_EnableIRQ+0x38>)
 800668a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800668e:	095b      	lsrs	r3, r3, #5
 8006690:	2001      	movs	r0, #1
 8006692:	fa00 f202 	lsl.w	r2, r0, r2
 8006696:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800669a:	bf00      	nop
 800669c:	370c      	adds	r7, #12
 800669e:	46bd      	mov	sp, r7
 80066a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066a4:	4770      	bx	lr
 80066a6:	bf00      	nop
 80066a8:	e000e100 	.word	0xe000e100

080066ac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80066ac:	b480      	push	{r7}
 80066ae:	b083      	sub	sp, #12
 80066b0:	af00      	add	r7, sp, #0
 80066b2:	4603      	mov	r3, r0
 80066b4:	6039      	str	r1, [r7, #0]
 80066b6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80066b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80066bc:	2b00      	cmp	r3, #0
 80066be:	db0a      	blt.n	80066d6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80066c0:	683b      	ldr	r3, [r7, #0]
 80066c2:	b2da      	uxtb	r2, r3
 80066c4:	490c      	ldr	r1, [pc, #48]	; (80066f8 <__NVIC_SetPriority+0x4c>)
 80066c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80066ca:	0112      	lsls	r2, r2, #4
 80066cc:	b2d2      	uxtb	r2, r2
 80066ce:	440b      	add	r3, r1
 80066d0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80066d4:	e00a      	b.n	80066ec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80066d6:	683b      	ldr	r3, [r7, #0]
 80066d8:	b2da      	uxtb	r2, r3
 80066da:	4908      	ldr	r1, [pc, #32]	; (80066fc <__NVIC_SetPriority+0x50>)
 80066dc:	79fb      	ldrb	r3, [r7, #7]
 80066de:	f003 030f 	and.w	r3, r3, #15
 80066e2:	3b04      	subs	r3, #4
 80066e4:	0112      	lsls	r2, r2, #4
 80066e6:	b2d2      	uxtb	r2, r2
 80066e8:	440b      	add	r3, r1
 80066ea:	761a      	strb	r2, [r3, #24]
}
 80066ec:	bf00      	nop
 80066ee:	370c      	adds	r7, #12
 80066f0:	46bd      	mov	sp, r7
 80066f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066f6:	4770      	bx	lr
 80066f8:	e000e100 	.word	0xe000e100
 80066fc:	e000ed00 	.word	0xe000ed00

08006700 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006700:	b480      	push	{r7}
 8006702:	b089      	sub	sp, #36	; 0x24
 8006704:	af00      	add	r7, sp, #0
 8006706:	60f8      	str	r0, [r7, #12]
 8006708:	60b9      	str	r1, [r7, #8]
 800670a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	f003 0307 	and.w	r3, r3, #7
 8006712:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006714:	69fb      	ldr	r3, [r7, #28]
 8006716:	f1c3 0307 	rsb	r3, r3, #7
 800671a:	2b04      	cmp	r3, #4
 800671c:	bf28      	it	cs
 800671e:	2304      	movcs	r3, #4
 8006720:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006722:	69fb      	ldr	r3, [r7, #28]
 8006724:	3304      	adds	r3, #4
 8006726:	2b06      	cmp	r3, #6
 8006728:	d902      	bls.n	8006730 <NVIC_EncodePriority+0x30>
 800672a:	69fb      	ldr	r3, [r7, #28]
 800672c:	3b03      	subs	r3, #3
 800672e:	e000      	b.n	8006732 <NVIC_EncodePriority+0x32>
 8006730:	2300      	movs	r3, #0
 8006732:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006734:	f04f 32ff 	mov.w	r2, #4294967295
 8006738:	69bb      	ldr	r3, [r7, #24]
 800673a:	fa02 f303 	lsl.w	r3, r2, r3
 800673e:	43da      	mvns	r2, r3
 8006740:	68bb      	ldr	r3, [r7, #8]
 8006742:	401a      	ands	r2, r3
 8006744:	697b      	ldr	r3, [r7, #20]
 8006746:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006748:	f04f 31ff 	mov.w	r1, #4294967295
 800674c:	697b      	ldr	r3, [r7, #20]
 800674e:	fa01 f303 	lsl.w	r3, r1, r3
 8006752:	43d9      	mvns	r1, r3
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006758:	4313      	orrs	r3, r2
         );
}
 800675a:	4618      	mov	r0, r3
 800675c:	3724      	adds	r7, #36	; 0x24
 800675e:	46bd      	mov	sp, r7
 8006760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006764:	4770      	bx	lr
	...

08006768 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8006768:	b580      	push	{r7, lr}
 800676a:	b082      	sub	sp, #8
 800676c:	af00      	add	r7, sp, #0
 800676e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	3b01      	subs	r3, #1
 8006774:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006778:	d301      	bcc.n	800677e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800677a:	2301      	movs	r3, #1
 800677c:	e00f      	b.n	800679e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800677e:	4a0a      	ldr	r2, [pc, #40]	; (80067a8 <SysTick_Config+0x40>)
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	3b01      	subs	r3, #1
 8006784:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8006786:	210f      	movs	r1, #15
 8006788:	f04f 30ff 	mov.w	r0, #4294967295
 800678c:	f7ff ff8e 	bl	80066ac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006790:	4b05      	ldr	r3, [pc, #20]	; (80067a8 <SysTick_Config+0x40>)
 8006792:	2200      	movs	r2, #0
 8006794:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006796:	4b04      	ldr	r3, [pc, #16]	; (80067a8 <SysTick_Config+0x40>)
 8006798:	2207      	movs	r2, #7
 800679a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800679c:	2300      	movs	r3, #0
}
 800679e:	4618      	mov	r0, r3
 80067a0:	3708      	adds	r7, #8
 80067a2:	46bd      	mov	sp, r7
 80067a4:	bd80      	pop	{r7, pc}
 80067a6:	bf00      	nop
 80067a8:	e000e010 	.word	0xe000e010

080067ac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80067ac:	b580      	push	{r7, lr}
 80067ae:	b082      	sub	sp, #8
 80067b0:	af00      	add	r7, sp, #0
 80067b2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80067b4:	6878      	ldr	r0, [r7, #4]
 80067b6:	f7ff ff29 	bl	800660c <__NVIC_SetPriorityGrouping>
}
 80067ba:	bf00      	nop
 80067bc:	3708      	adds	r7, #8
 80067be:	46bd      	mov	sp, r7
 80067c0:	bd80      	pop	{r7, pc}

080067c2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80067c2:	b580      	push	{r7, lr}
 80067c4:	b086      	sub	sp, #24
 80067c6:	af00      	add	r7, sp, #0
 80067c8:	4603      	mov	r3, r0
 80067ca:	60b9      	str	r1, [r7, #8]
 80067cc:	607a      	str	r2, [r7, #4]
 80067ce:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80067d0:	2300      	movs	r3, #0
 80067d2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80067d4:	f7ff ff3e 	bl	8006654 <__NVIC_GetPriorityGrouping>
 80067d8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80067da:	687a      	ldr	r2, [r7, #4]
 80067dc:	68b9      	ldr	r1, [r7, #8]
 80067de:	6978      	ldr	r0, [r7, #20]
 80067e0:	f7ff ff8e 	bl	8006700 <NVIC_EncodePriority>
 80067e4:	4602      	mov	r2, r0
 80067e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80067ea:	4611      	mov	r1, r2
 80067ec:	4618      	mov	r0, r3
 80067ee:	f7ff ff5d 	bl	80066ac <__NVIC_SetPriority>
}
 80067f2:	bf00      	nop
 80067f4:	3718      	adds	r7, #24
 80067f6:	46bd      	mov	sp, r7
 80067f8:	bd80      	pop	{r7, pc}

080067fa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80067fa:	b580      	push	{r7, lr}
 80067fc:	b082      	sub	sp, #8
 80067fe:	af00      	add	r7, sp, #0
 8006800:	4603      	mov	r3, r0
 8006802:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006804:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006808:	4618      	mov	r0, r3
 800680a:	f7ff ff31 	bl	8006670 <__NVIC_EnableIRQ>
}
 800680e:	bf00      	nop
 8006810:	3708      	adds	r7, #8
 8006812:	46bd      	mov	sp, r7
 8006814:	bd80      	pop	{r7, pc}

08006816 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8006816:	b580      	push	{r7, lr}
 8006818:	b082      	sub	sp, #8
 800681a:	af00      	add	r7, sp, #0
 800681c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800681e:	6878      	ldr	r0, [r7, #4]
 8006820:	f7ff ffa2 	bl	8006768 <SysTick_Config>
 8006824:	4603      	mov	r3, r0
}
 8006826:	4618      	mov	r0, r3
 8006828:	3708      	adds	r7, #8
 800682a:	46bd      	mov	sp, r7
 800682c:	bd80      	pop	{r7, pc}
	...

08006830 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8006830:	b580      	push	{r7, lr}
 8006832:	b086      	sub	sp, #24
 8006834:	af00      	add	r7, sp, #0
 8006836:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8006838:	2300      	movs	r3, #0
 800683a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800683c:	f7ff feb6 	bl	80065ac <HAL_GetTick>
 8006840:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	2b00      	cmp	r3, #0
 8006846:	d101      	bne.n	800684c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8006848:	2301      	movs	r3, #1
 800684a:	e099      	b.n	8006980 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	2202      	movs	r2, #2
 8006850:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	2200      	movs	r2, #0
 8006858:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	681a      	ldr	r2, [r3, #0]
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	f022 0201 	bic.w	r2, r2, #1
 800686a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800686c:	e00f      	b.n	800688e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800686e:	f7ff fe9d 	bl	80065ac <HAL_GetTick>
 8006872:	4602      	mov	r2, r0
 8006874:	693b      	ldr	r3, [r7, #16]
 8006876:	1ad3      	subs	r3, r2, r3
 8006878:	2b05      	cmp	r3, #5
 800687a:	d908      	bls.n	800688e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	2220      	movs	r2, #32
 8006880:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	2203      	movs	r2, #3
 8006886:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800688a:	2303      	movs	r3, #3
 800688c:	e078      	b.n	8006980 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	f003 0301 	and.w	r3, r3, #1
 8006898:	2b00      	cmp	r3, #0
 800689a:	d1e8      	bne.n	800686e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80068a4:	697a      	ldr	r2, [r7, #20]
 80068a6:	4b38      	ldr	r3, [pc, #224]	; (8006988 <HAL_DMA_Init+0x158>)
 80068a8:	4013      	ands	r3, r2
 80068aa:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	685a      	ldr	r2, [r3, #4]
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	689b      	ldr	r3, [r3, #8]
 80068b4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80068ba:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	691b      	ldr	r3, [r3, #16]
 80068c0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80068c6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	699b      	ldr	r3, [r3, #24]
 80068cc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80068d2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	6a1b      	ldr	r3, [r3, #32]
 80068d8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80068da:	697a      	ldr	r2, [r7, #20]
 80068dc:	4313      	orrs	r3, r2
 80068de:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068e4:	2b04      	cmp	r3, #4
 80068e6:	d107      	bne.n	80068f8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068f0:	4313      	orrs	r3, r2
 80068f2:	697a      	ldr	r2, [r7, #20]
 80068f4:	4313      	orrs	r3, r2
 80068f6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	697a      	ldr	r2, [r7, #20]
 80068fe:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	695b      	ldr	r3, [r3, #20]
 8006906:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8006908:	697b      	ldr	r3, [r7, #20]
 800690a:	f023 0307 	bic.w	r3, r3, #7
 800690e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006914:	697a      	ldr	r2, [r7, #20]
 8006916:	4313      	orrs	r3, r2
 8006918:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800691e:	2b04      	cmp	r3, #4
 8006920:	d117      	bne.n	8006952 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006926:	697a      	ldr	r2, [r7, #20]
 8006928:	4313      	orrs	r3, r2
 800692a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006930:	2b00      	cmp	r3, #0
 8006932:	d00e      	beq.n	8006952 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8006934:	6878      	ldr	r0, [r7, #4]
 8006936:	f000 f9e9 	bl	8006d0c <DMA_CheckFifoParam>
 800693a:	4603      	mov	r3, r0
 800693c:	2b00      	cmp	r3, #0
 800693e:	d008      	beq.n	8006952 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	2240      	movs	r2, #64	; 0x40
 8006944:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	2201      	movs	r2, #1
 800694a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800694e:	2301      	movs	r3, #1
 8006950:	e016      	b.n	8006980 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	697a      	ldr	r2, [r7, #20]
 8006958:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800695a:	6878      	ldr	r0, [r7, #4]
 800695c:	f000 f9a0 	bl	8006ca0 <DMA_CalcBaseAndBitshift>
 8006960:	4603      	mov	r3, r0
 8006962:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006968:	223f      	movs	r2, #63	; 0x3f
 800696a:	409a      	lsls	r2, r3
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	2200      	movs	r2, #0
 8006974:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	2201      	movs	r2, #1
 800697a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800697e:	2300      	movs	r3, #0
}
 8006980:	4618      	mov	r0, r3
 8006982:	3718      	adds	r7, #24
 8006984:	46bd      	mov	sp, r7
 8006986:	bd80      	pop	{r7, pc}
 8006988:	f010803f 	.word	0xf010803f

0800698c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800698c:	b580      	push	{r7, lr}
 800698e:	b086      	sub	sp, #24
 8006990:	af00      	add	r7, sp, #0
 8006992:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8006994:	2300      	movs	r3, #0
 8006996:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8006998:	4b8e      	ldr	r3, [pc, #568]	; (8006bd4 <HAL_DMA_IRQHandler+0x248>)
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	4a8e      	ldr	r2, [pc, #568]	; (8006bd8 <HAL_DMA_IRQHandler+0x24c>)
 800699e:	fba2 2303 	umull	r2, r3, r2, r3
 80069a2:	0a9b      	lsrs	r3, r3, #10
 80069a4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80069aa:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80069ac:	693b      	ldr	r3, [r7, #16]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80069b6:	2208      	movs	r2, #8
 80069b8:	409a      	lsls	r2, r3
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	4013      	ands	r3, r2
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d01a      	beq.n	80069f8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	f003 0304 	and.w	r3, r3, #4
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	d013      	beq.n	80069f8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	681a      	ldr	r2, [r3, #0]
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	f022 0204 	bic.w	r2, r2, #4
 80069de:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80069e4:	2208      	movs	r2, #8
 80069e6:	409a      	lsls	r2, r3
 80069e8:	693b      	ldr	r3, [r7, #16]
 80069ea:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80069f0:	f043 0201 	orr.w	r2, r3, #1
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80069fc:	2201      	movs	r2, #1
 80069fe:	409a      	lsls	r2, r3
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	4013      	ands	r3, r2
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	d012      	beq.n	8006a2e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	695b      	ldr	r3, [r3, #20]
 8006a0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d00b      	beq.n	8006a2e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006a1a:	2201      	movs	r2, #1
 8006a1c:	409a      	lsls	r2, r3
 8006a1e:	693b      	ldr	r3, [r7, #16]
 8006a20:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a26:	f043 0202 	orr.w	r2, r3, #2
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006a32:	2204      	movs	r2, #4
 8006a34:	409a      	lsls	r2, r3
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	4013      	ands	r3, r2
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d012      	beq.n	8006a64 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	f003 0302 	and.w	r3, r3, #2
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d00b      	beq.n	8006a64 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006a50:	2204      	movs	r2, #4
 8006a52:	409a      	lsls	r2, r3
 8006a54:	693b      	ldr	r3, [r7, #16]
 8006a56:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a5c:	f043 0204 	orr.w	r2, r3, #4
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006a68:	2210      	movs	r2, #16
 8006a6a:	409a      	lsls	r2, r3
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	4013      	ands	r3, r2
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d043      	beq.n	8006afc <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	f003 0308 	and.w	r3, r3, #8
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d03c      	beq.n	8006afc <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006a86:	2210      	movs	r2, #16
 8006a88:	409a      	lsls	r2, r3
 8006a8a:	693b      	ldr	r3, [r7, #16]
 8006a8c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d018      	beq.n	8006ace <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d108      	bne.n	8006abc <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d024      	beq.n	8006afc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ab6:	6878      	ldr	r0, [r7, #4]
 8006ab8:	4798      	blx	r3
 8006aba:	e01f      	b.n	8006afc <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d01b      	beq.n	8006afc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006ac8:	6878      	ldr	r0, [r7, #4]
 8006aca:	4798      	blx	r3
 8006acc:	e016      	b.n	8006afc <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d107      	bne.n	8006aec <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	681a      	ldr	r2, [r3, #0]
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	f022 0208 	bic.w	r2, r2, #8
 8006aea:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	d003      	beq.n	8006afc <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006af8:	6878      	ldr	r0, [r7, #4]
 8006afa:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006b00:	2220      	movs	r2, #32
 8006b02:	409a      	lsls	r2, r3
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	4013      	ands	r3, r2
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	f000 808f 	beq.w	8006c2c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	f003 0310 	and.w	r3, r3, #16
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	f000 8087 	beq.w	8006c2c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006b22:	2220      	movs	r2, #32
 8006b24:	409a      	lsls	r2, r3
 8006b26:	693b      	ldr	r3, [r7, #16]
 8006b28:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006b30:	b2db      	uxtb	r3, r3
 8006b32:	2b05      	cmp	r3, #5
 8006b34:	d136      	bne.n	8006ba4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	681a      	ldr	r2, [r3, #0]
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	f022 0216 	bic.w	r2, r2, #22
 8006b44:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	695a      	ldr	r2, [r3, #20]
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006b54:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d103      	bne.n	8006b66 <HAL_DMA_IRQHandler+0x1da>
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d007      	beq.n	8006b76 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	681a      	ldr	r2, [r3, #0]
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	f022 0208 	bic.w	r2, r2, #8
 8006b74:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006b7a:	223f      	movs	r2, #63	; 0x3f
 8006b7c:	409a      	lsls	r2, r3
 8006b7e:	693b      	ldr	r3, [r7, #16]
 8006b80:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	2201      	movs	r2, #1
 8006b86:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	2200      	movs	r2, #0
 8006b8e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d07e      	beq.n	8006c98 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006b9e:	6878      	ldr	r0, [r7, #4]
 8006ba0:	4798      	blx	r3
        }
        return;
 8006ba2:	e079      	b.n	8006c98 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d01d      	beq.n	8006bee <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d10d      	bne.n	8006bdc <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d031      	beq.n	8006c2c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006bcc:	6878      	ldr	r0, [r7, #4]
 8006bce:	4798      	blx	r3
 8006bd0:	e02c      	b.n	8006c2c <HAL_DMA_IRQHandler+0x2a0>
 8006bd2:	bf00      	nop
 8006bd4:	20000028 	.word	0x20000028
 8006bd8:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	d023      	beq.n	8006c2c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006be8:	6878      	ldr	r0, [r7, #4]
 8006bea:	4798      	blx	r3
 8006bec:	e01e      	b.n	8006c2c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	d10f      	bne.n	8006c1c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	681a      	ldr	r2, [r3, #0]
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	f022 0210 	bic.w	r2, r2, #16
 8006c0a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	2201      	movs	r2, #1
 8006c10:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	2200      	movs	r2, #0
 8006c18:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	d003      	beq.n	8006c2c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c28:	6878      	ldr	r0, [r7, #4]
 8006c2a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	d032      	beq.n	8006c9a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c38:	f003 0301 	and.w	r3, r3, #1
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d022      	beq.n	8006c86 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	2205      	movs	r2, #5
 8006c44:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	681a      	ldr	r2, [r3, #0]
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	f022 0201 	bic.w	r2, r2, #1
 8006c56:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8006c58:	68bb      	ldr	r3, [r7, #8]
 8006c5a:	3301      	adds	r3, #1
 8006c5c:	60bb      	str	r3, [r7, #8]
 8006c5e:	697a      	ldr	r2, [r7, #20]
 8006c60:	429a      	cmp	r2, r3
 8006c62:	d307      	bcc.n	8006c74 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	f003 0301 	and.w	r3, r3, #1
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d1f2      	bne.n	8006c58 <HAL_DMA_IRQHandler+0x2cc>
 8006c72:	e000      	b.n	8006c76 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8006c74:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	2201      	movs	r2, #1
 8006c7a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	2200      	movs	r2, #0
 8006c82:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d005      	beq.n	8006c9a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006c92:	6878      	ldr	r0, [r7, #4]
 8006c94:	4798      	blx	r3
 8006c96:	e000      	b.n	8006c9a <HAL_DMA_IRQHandler+0x30e>
        return;
 8006c98:	bf00      	nop
    }
  }
}
 8006c9a:	3718      	adds	r7, #24
 8006c9c:	46bd      	mov	sp, r7
 8006c9e:	bd80      	pop	{r7, pc}

08006ca0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8006ca0:	b480      	push	{r7}
 8006ca2:	b085      	sub	sp, #20
 8006ca4:	af00      	add	r7, sp, #0
 8006ca6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	b2db      	uxtb	r3, r3
 8006cae:	3b10      	subs	r3, #16
 8006cb0:	4a14      	ldr	r2, [pc, #80]	; (8006d04 <DMA_CalcBaseAndBitshift+0x64>)
 8006cb2:	fba2 2303 	umull	r2, r3, r2, r3
 8006cb6:	091b      	lsrs	r3, r3, #4
 8006cb8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8006cba:	4a13      	ldr	r2, [pc, #76]	; (8006d08 <DMA_CalcBaseAndBitshift+0x68>)
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	4413      	add	r3, r2
 8006cc0:	781b      	ldrb	r3, [r3, #0]
 8006cc2:	461a      	mov	r2, r3
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	2b03      	cmp	r3, #3
 8006ccc:	d909      	bls.n	8006ce2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8006cd6:	f023 0303 	bic.w	r3, r3, #3
 8006cda:	1d1a      	adds	r2, r3, #4
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	659a      	str	r2, [r3, #88]	; 0x58
 8006ce0:	e007      	b.n	8006cf2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8006cea:	f023 0303 	bic.w	r3, r3, #3
 8006cee:	687a      	ldr	r2, [r7, #4]
 8006cf0:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8006cf6:	4618      	mov	r0, r3
 8006cf8:	3714      	adds	r7, #20
 8006cfa:	46bd      	mov	sp, r7
 8006cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d00:	4770      	bx	lr
 8006d02:	bf00      	nop
 8006d04:	aaaaaaab 	.word	0xaaaaaaab
 8006d08:	08014250 	.word	0x08014250

08006d0c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8006d0c:	b480      	push	{r7}
 8006d0e:	b085      	sub	sp, #20
 8006d10:	af00      	add	r7, sp, #0
 8006d12:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006d14:	2300      	movs	r3, #0
 8006d16:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d1c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	699b      	ldr	r3, [r3, #24]
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d11f      	bne.n	8006d66 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8006d26:	68bb      	ldr	r3, [r7, #8]
 8006d28:	2b03      	cmp	r3, #3
 8006d2a:	d856      	bhi.n	8006dda <DMA_CheckFifoParam+0xce>
 8006d2c:	a201      	add	r2, pc, #4	; (adr r2, 8006d34 <DMA_CheckFifoParam+0x28>)
 8006d2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d32:	bf00      	nop
 8006d34:	08006d45 	.word	0x08006d45
 8006d38:	08006d57 	.word	0x08006d57
 8006d3c:	08006d45 	.word	0x08006d45
 8006d40:	08006ddb 	.word	0x08006ddb
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d48:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	d046      	beq.n	8006dde <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8006d50:	2301      	movs	r3, #1
 8006d52:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006d54:	e043      	b.n	8006dde <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d5a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8006d5e:	d140      	bne.n	8006de2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8006d60:	2301      	movs	r3, #1
 8006d62:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006d64:	e03d      	b.n	8006de2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	699b      	ldr	r3, [r3, #24]
 8006d6a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006d6e:	d121      	bne.n	8006db4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8006d70:	68bb      	ldr	r3, [r7, #8]
 8006d72:	2b03      	cmp	r3, #3
 8006d74:	d837      	bhi.n	8006de6 <DMA_CheckFifoParam+0xda>
 8006d76:	a201      	add	r2, pc, #4	; (adr r2, 8006d7c <DMA_CheckFifoParam+0x70>)
 8006d78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d7c:	08006d8d 	.word	0x08006d8d
 8006d80:	08006d93 	.word	0x08006d93
 8006d84:	08006d8d 	.word	0x08006d8d
 8006d88:	08006da5 	.word	0x08006da5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8006d8c:	2301      	movs	r3, #1
 8006d8e:	73fb      	strb	r3, [r7, #15]
      break;
 8006d90:	e030      	b.n	8006df4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d96:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d025      	beq.n	8006dea <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8006d9e:	2301      	movs	r3, #1
 8006da0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006da2:	e022      	b.n	8006dea <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006da8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8006dac:	d11f      	bne.n	8006dee <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8006dae:	2301      	movs	r3, #1
 8006db0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8006db2:	e01c      	b.n	8006dee <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8006db4:	68bb      	ldr	r3, [r7, #8]
 8006db6:	2b02      	cmp	r3, #2
 8006db8:	d903      	bls.n	8006dc2 <DMA_CheckFifoParam+0xb6>
 8006dba:	68bb      	ldr	r3, [r7, #8]
 8006dbc:	2b03      	cmp	r3, #3
 8006dbe:	d003      	beq.n	8006dc8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8006dc0:	e018      	b.n	8006df4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8006dc2:	2301      	movs	r3, #1
 8006dc4:	73fb      	strb	r3, [r7, #15]
      break;
 8006dc6:	e015      	b.n	8006df4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006dcc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	d00e      	beq.n	8006df2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8006dd4:	2301      	movs	r3, #1
 8006dd6:	73fb      	strb	r3, [r7, #15]
      break;
 8006dd8:	e00b      	b.n	8006df2 <DMA_CheckFifoParam+0xe6>
      break;
 8006dda:	bf00      	nop
 8006ddc:	e00a      	b.n	8006df4 <DMA_CheckFifoParam+0xe8>
      break;
 8006dde:	bf00      	nop
 8006de0:	e008      	b.n	8006df4 <DMA_CheckFifoParam+0xe8>
      break;
 8006de2:	bf00      	nop
 8006de4:	e006      	b.n	8006df4 <DMA_CheckFifoParam+0xe8>
      break;
 8006de6:	bf00      	nop
 8006de8:	e004      	b.n	8006df4 <DMA_CheckFifoParam+0xe8>
      break;
 8006dea:	bf00      	nop
 8006dec:	e002      	b.n	8006df4 <DMA_CheckFifoParam+0xe8>
      break;   
 8006dee:	bf00      	nop
 8006df0:	e000      	b.n	8006df4 <DMA_CheckFifoParam+0xe8>
      break;
 8006df2:	bf00      	nop
    }
  } 
  
  return status; 
 8006df4:	7bfb      	ldrb	r3, [r7, #15]
}
 8006df6:	4618      	mov	r0, r3
 8006df8:	3714      	adds	r7, #20
 8006dfa:	46bd      	mov	sp, r7
 8006dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e00:	4770      	bx	lr
 8006e02:	bf00      	nop

08006e04 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006e04:	b480      	push	{r7}
 8006e06:	b089      	sub	sp, #36	; 0x24
 8006e08:	af00      	add	r7, sp, #0
 8006e0a:	6078      	str	r0, [r7, #4]
 8006e0c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8006e0e:	2300      	movs	r3, #0
 8006e10:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8006e12:	2300      	movs	r3, #0
 8006e14:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8006e16:	2300      	movs	r3, #0
 8006e18:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006e1a:	2300      	movs	r3, #0
 8006e1c:	61fb      	str	r3, [r7, #28]
 8006e1e:	e165      	b.n	80070ec <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8006e20:	2201      	movs	r2, #1
 8006e22:	69fb      	ldr	r3, [r7, #28]
 8006e24:	fa02 f303 	lsl.w	r3, r2, r3
 8006e28:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8006e2a:	683b      	ldr	r3, [r7, #0]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	697a      	ldr	r2, [r7, #20]
 8006e30:	4013      	ands	r3, r2
 8006e32:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8006e34:	693a      	ldr	r2, [r7, #16]
 8006e36:	697b      	ldr	r3, [r7, #20]
 8006e38:	429a      	cmp	r2, r3
 8006e3a:	f040 8154 	bne.w	80070e6 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8006e3e:	683b      	ldr	r3, [r7, #0]
 8006e40:	685b      	ldr	r3, [r3, #4]
 8006e42:	f003 0303 	and.w	r3, r3, #3
 8006e46:	2b01      	cmp	r3, #1
 8006e48:	d005      	beq.n	8006e56 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006e4a:	683b      	ldr	r3, [r7, #0]
 8006e4c:	685b      	ldr	r3, [r3, #4]
 8006e4e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8006e52:	2b02      	cmp	r3, #2
 8006e54:	d130      	bne.n	8006eb8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	689b      	ldr	r3, [r3, #8]
 8006e5a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8006e5c:	69fb      	ldr	r3, [r7, #28]
 8006e5e:	005b      	lsls	r3, r3, #1
 8006e60:	2203      	movs	r2, #3
 8006e62:	fa02 f303 	lsl.w	r3, r2, r3
 8006e66:	43db      	mvns	r3, r3
 8006e68:	69ba      	ldr	r2, [r7, #24]
 8006e6a:	4013      	ands	r3, r2
 8006e6c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006e6e:	683b      	ldr	r3, [r7, #0]
 8006e70:	68da      	ldr	r2, [r3, #12]
 8006e72:	69fb      	ldr	r3, [r7, #28]
 8006e74:	005b      	lsls	r3, r3, #1
 8006e76:	fa02 f303 	lsl.w	r3, r2, r3
 8006e7a:	69ba      	ldr	r2, [r7, #24]
 8006e7c:	4313      	orrs	r3, r2
 8006e7e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	69ba      	ldr	r2, [r7, #24]
 8006e84:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	685b      	ldr	r3, [r3, #4]
 8006e8a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8006e8c:	2201      	movs	r2, #1
 8006e8e:	69fb      	ldr	r3, [r7, #28]
 8006e90:	fa02 f303 	lsl.w	r3, r2, r3
 8006e94:	43db      	mvns	r3, r3
 8006e96:	69ba      	ldr	r2, [r7, #24]
 8006e98:	4013      	ands	r3, r2
 8006e9a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006e9c:	683b      	ldr	r3, [r7, #0]
 8006e9e:	685b      	ldr	r3, [r3, #4]
 8006ea0:	091b      	lsrs	r3, r3, #4
 8006ea2:	f003 0201 	and.w	r2, r3, #1
 8006ea6:	69fb      	ldr	r3, [r7, #28]
 8006ea8:	fa02 f303 	lsl.w	r3, r2, r3
 8006eac:	69ba      	ldr	r2, [r7, #24]
 8006eae:	4313      	orrs	r3, r2
 8006eb0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	69ba      	ldr	r2, [r7, #24]
 8006eb6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006eb8:	683b      	ldr	r3, [r7, #0]
 8006eba:	685b      	ldr	r3, [r3, #4]
 8006ebc:	f003 0303 	and.w	r3, r3, #3
 8006ec0:	2b03      	cmp	r3, #3
 8006ec2:	d017      	beq.n	8006ef4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	68db      	ldr	r3, [r3, #12]
 8006ec8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8006eca:	69fb      	ldr	r3, [r7, #28]
 8006ecc:	005b      	lsls	r3, r3, #1
 8006ece:	2203      	movs	r2, #3
 8006ed0:	fa02 f303 	lsl.w	r3, r2, r3
 8006ed4:	43db      	mvns	r3, r3
 8006ed6:	69ba      	ldr	r2, [r7, #24]
 8006ed8:	4013      	ands	r3, r2
 8006eda:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006edc:	683b      	ldr	r3, [r7, #0]
 8006ede:	689a      	ldr	r2, [r3, #8]
 8006ee0:	69fb      	ldr	r3, [r7, #28]
 8006ee2:	005b      	lsls	r3, r3, #1
 8006ee4:	fa02 f303 	lsl.w	r3, r2, r3
 8006ee8:	69ba      	ldr	r2, [r7, #24]
 8006eea:	4313      	orrs	r3, r2
 8006eec:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	69ba      	ldr	r2, [r7, #24]
 8006ef2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006ef4:	683b      	ldr	r3, [r7, #0]
 8006ef6:	685b      	ldr	r3, [r3, #4]
 8006ef8:	f003 0303 	and.w	r3, r3, #3
 8006efc:	2b02      	cmp	r3, #2
 8006efe:	d123      	bne.n	8006f48 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006f00:	69fb      	ldr	r3, [r7, #28]
 8006f02:	08da      	lsrs	r2, r3, #3
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	3208      	adds	r2, #8
 8006f08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f0c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8006f0e:	69fb      	ldr	r3, [r7, #28]
 8006f10:	f003 0307 	and.w	r3, r3, #7
 8006f14:	009b      	lsls	r3, r3, #2
 8006f16:	220f      	movs	r2, #15
 8006f18:	fa02 f303 	lsl.w	r3, r2, r3
 8006f1c:	43db      	mvns	r3, r3
 8006f1e:	69ba      	ldr	r2, [r7, #24]
 8006f20:	4013      	ands	r3, r2
 8006f22:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8006f24:	683b      	ldr	r3, [r7, #0]
 8006f26:	691a      	ldr	r2, [r3, #16]
 8006f28:	69fb      	ldr	r3, [r7, #28]
 8006f2a:	f003 0307 	and.w	r3, r3, #7
 8006f2e:	009b      	lsls	r3, r3, #2
 8006f30:	fa02 f303 	lsl.w	r3, r2, r3
 8006f34:	69ba      	ldr	r2, [r7, #24]
 8006f36:	4313      	orrs	r3, r2
 8006f38:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8006f3a:	69fb      	ldr	r3, [r7, #28]
 8006f3c:	08da      	lsrs	r2, r3, #3
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	3208      	adds	r2, #8
 8006f42:	69b9      	ldr	r1, [r7, #24]
 8006f44:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8006f4e:	69fb      	ldr	r3, [r7, #28]
 8006f50:	005b      	lsls	r3, r3, #1
 8006f52:	2203      	movs	r2, #3
 8006f54:	fa02 f303 	lsl.w	r3, r2, r3
 8006f58:	43db      	mvns	r3, r3
 8006f5a:	69ba      	ldr	r2, [r7, #24]
 8006f5c:	4013      	ands	r3, r2
 8006f5e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006f60:	683b      	ldr	r3, [r7, #0]
 8006f62:	685b      	ldr	r3, [r3, #4]
 8006f64:	f003 0203 	and.w	r2, r3, #3
 8006f68:	69fb      	ldr	r3, [r7, #28]
 8006f6a:	005b      	lsls	r3, r3, #1
 8006f6c:	fa02 f303 	lsl.w	r3, r2, r3
 8006f70:	69ba      	ldr	r2, [r7, #24]
 8006f72:	4313      	orrs	r3, r2
 8006f74:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	69ba      	ldr	r2, [r7, #24]
 8006f7a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8006f7c:	683b      	ldr	r3, [r7, #0]
 8006f7e:	685b      	ldr	r3, [r3, #4]
 8006f80:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	f000 80ae 	beq.w	80070e6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006f8a:	2300      	movs	r3, #0
 8006f8c:	60fb      	str	r3, [r7, #12]
 8006f8e:	4b5d      	ldr	r3, [pc, #372]	; (8007104 <HAL_GPIO_Init+0x300>)
 8006f90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f92:	4a5c      	ldr	r2, [pc, #368]	; (8007104 <HAL_GPIO_Init+0x300>)
 8006f94:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006f98:	6453      	str	r3, [r2, #68]	; 0x44
 8006f9a:	4b5a      	ldr	r3, [pc, #360]	; (8007104 <HAL_GPIO_Init+0x300>)
 8006f9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f9e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006fa2:	60fb      	str	r3, [r7, #12]
 8006fa4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8006fa6:	4a58      	ldr	r2, [pc, #352]	; (8007108 <HAL_GPIO_Init+0x304>)
 8006fa8:	69fb      	ldr	r3, [r7, #28]
 8006faa:	089b      	lsrs	r3, r3, #2
 8006fac:	3302      	adds	r3, #2
 8006fae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006fb2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8006fb4:	69fb      	ldr	r3, [r7, #28]
 8006fb6:	f003 0303 	and.w	r3, r3, #3
 8006fba:	009b      	lsls	r3, r3, #2
 8006fbc:	220f      	movs	r2, #15
 8006fbe:	fa02 f303 	lsl.w	r3, r2, r3
 8006fc2:	43db      	mvns	r3, r3
 8006fc4:	69ba      	ldr	r2, [r7, #24]
 8006fc6:	4013      	ands	r3, r2
 8006fc8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	4a4f      	ldr	r2, [pc, #316]	; (800710c <HAL_GPIO_Init+0x308>)
 8006fce:	4293      	cmp	r3, r2
 8006fd0:	d025      	beq.n	800701e <HAL_GPIO_Init+0x21a>
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	4a4e      	ldr	r2, [pc, #312]	; (8007110 <HAL_GPIO_Init+0x30c>)
 8006fd6:	4293      	cmp	r3, r2
 8006fd8:	d01f      	beq.n	800701a <HAL_GPIO_Init+0x216>
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	4a4d      	ldr	r2, [pc, #308]	; (8007114 <HAL_GPIO_Init+0x310>)
 8006fde:	4293      	cmp	r3, r2
 8006fe0:	d019      	beq.n	8007016 <HAL_GPIO_Init+0x212>
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	4a4c      	ldr	r2, [pc, #304]	; (8007118 <HAL_GPIO_Init+0x314>)
 8006fe6:	4293      	cmp	r3, r2
 8006fe8:	d013      	beq.n	8007012 <HAL_GPIO_Init+0x20e>
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	4a4b      	ldr	r2, [pc, #300]	; (800711c <HAL_GPIO_Init+0x318>)
 8006fee:	4293      	cmp	r3, r2
 8006ff0:	d00d      	beq.n	800700e <HAL_GPIO_Init+0x20a>
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	4a4a      	ldr	r2, [pc, #296]	; (8007120 <HAL_GPIO_Init+0x31c>)
 8006ff6:	4293      	cmp	r3, r2
 8006ff8:	d007      	beq.n	800700a <HAL_GPIO_Init+0x206>
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	4a49      	ldr	r2, [pc, #292]	; (8007124 <HAL_GPIO_Init+0x320>)
 8006ffe:	4293      	cmp	r3, r2
 8007000:	d101      	bne.n	8007006 <HAL_GPIO_Init+0x202>
 8007002:	2306      	movs	r3, #6
 8007004:	e00c      	b.n	8007020 <HAL_GPIO_Init+0x21c>
 8007006:	2307      	movs	r3, #7
 8007008:	e00a      	b.n	8007020 <HAL_GPIO_Init+0x21c>
 800700a:	2305      	movs	r3, #5
 800700c:	e008      	b.n	8007020 <HAL_GPIO_Init+0x21c>
 800700e:	2304      	movs	r3, #4
 8007010:	e006      	b.n	8007020 <HAL_GPIO_Init+0x21c>
 8007012:	2303      	movs	r3, #3
 8007014:	e004      	b.n	8007020 <HAL_GPIO_Init+0x21c>
 8007016:	2302      	movs	r3, #2
 8007018:	e002      	b.n	8007020 <HAL_GPIO_Init+0x21c>
 800701a:	2301      	movs	r3, #1
 800701c:	e000      	b.n	8007020 <HAL_GPIO_Init+0x21c>
 800701e:	2300      	movs	r3, #0
 8007020:	69fa      	ldr	r2, [r7, #28]
 8007022:	f002 0203 	and.w	r2, r2, #3
 8007026:	0092      	lsls	r2, r2, #2
 8007028:	4093      	lsls	r3, r2
 800702a:	69ba      	ldr	r2, [r7, #24]
 800702c:	4313      	orrs	r3, r2
 800702e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8007030:	4935      	ldr	r1, [pc, #212]	; (8007108 <HAL_GPIO_Init+0x304>)
 8007032:	69fb      	ldr	r3, [r7, #28]
 8007034:	089b      	lsrs	r3, r3, #2
 8007036:	3302      	adds	r3, #2
 8007038:	69ba      	ldr	r2, [r7, #24]
 800703a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800703e:	4b3a      	ldr	r3, [pc, #232]	; (8007128 <HAL_GPIO_Init+0x324>)
 8007040:	689b      	ldr	r3, [r3, #8]
 8007042:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007044:	693b      	ldr	r3, [r7, #16]
 8007046:	43db      	mvns	r3, r3
 8007048:	69ba      	ldr	r2, [r7, #24]
 800704a:	4013      	ands	r3, r2
 800704c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800704e:	683b      	ldr	r3, [r7, #0]
 8007050:	685b      	ldr	r3, [r3, #4]
 8007052:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007056:	2b00      	cmp	r3, #0
 8007058:	d003      	beq.n	8007062 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800705a:	69ba      	ldr	r2, [r7, #24]
 800705c:	693b      	ldr	r3, [r7, #16]
 800705e:	4313      	orrs	r3, r2
 8007060:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8007062:	4a31      	ldr	r2, [pc, #196]	; (8007128 <HAL_GPIO_Init+0x324>)
 8007064:	69bb      	ldr	r3, [r7, #24]
 8007066:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8007068:	4b2f      	ldr	r3, [pc, #188]	; (8007128 <HAL_GPIO_Init+0x324>)
 800706a:	68db      	ldr	r3, [r3, #12]
 800706c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800706e:	693b      	ldr	r3, [r7, #16]
 8007070:	43db      	mvns	r3, r3
 8007072:	69ba      	ldr	r2, [r7, #24]
 8007074:	4013      	ands	r3, r2
 8007076:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8007078:	683b      	ldr	r3, [r7, #0]
 800707a:	685b      	ldr	r3, [r3, #4]
 800707c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007080:	2b00      	cmp	r3, #0
 8007082:	d003      	beq.n	800708c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8007084:	69ba      	ldr	r2, [r7, #24]
 8007086:	693b      	ldr	r3, [r7, #16]
 8007088:	4313      	orrs	r3, r2
 800708a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800708c:	4a26      	ldr	r2, [pc, #152]	; (8007128 <HAL_GPIO_Init+0x324>)
 800708e:	69bb      	ldr	r3, [r7, #24]
 8007090:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8007092:	4b25      	ldr	r3, [pc, #148]	; (8007128 <HAL_GPIO_Init+0x324>)
 8007094:	685b      	ldr	r3, [r3, #4]
 8007096:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007098:	693b      	ldr	r3, [r7, #16]
 800709a:	43db      	mvns	r3, r3
 800709c:	69ba      	ldr	r2, [r7, #24]
 800709e:	4013      	ands	r3, r2
 80070a0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80070a2:	683b      	ldr	r3, [r7, #0]
 80070a4:	685b      	ldr	r3, [r3, #4]
 80070a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	d003      	beq.n	80070b6 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80070ae:	69ba      	ldr	r2, [r7, #24]
 80070b0:	693b      	ldr	r3, [r7, #16]
 80070b2:	4313      	orrs	r3, r2
 80070b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80070b6:	4a1c      	ldr	r2, [pc, #112]	; (8007128 <HAL_GPIO_Init+0x324>)
 80070b8:	69bb      	ldr	r3, [r7, #24]
 80070ba:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80070bc:	4b1a      	ldr	r3, [pc, #104]	; (8007128 <HAL_GPIO_Init+0x324>)
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80070c2:	693b      	ldr	r3, [r7, #16]
 80070c4:	43db      	mvns	r3, r3
 80070c6:	69ba      	ldr	r2, [r7, #24]
 80070c8:	4013      	ands	r3, r2
 80070ca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80070cc:	683b      	ldr	r3, [r7, #0]
 80070ce:	685b      	ldr	r3, [r3, #4]
 80070d0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	d003      	beq.n	80070e0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80070d8:	69ba      	ldr	r2, [r7, #24]
 80070da:	693b      	ldr	r3, [r7, #16]
 80070dc:	4313      	orrs	r3, r2
 80070de:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80070e0:	4a11      	ldr	r2, [pc, #68]	; (8007128 <HAL_GPIO_Init+0x324>)
 80070e2:	69bb      	ldr	r3, [r7, #24]
 80070e4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80070e6:	69fb      	ldr	r3, [r7, #28]
 80070e8:	3301      	adds	r3, #1
 80070ea:	61fb      	str	r3, [r7, #28]
 80070ec:	69fb      	ldr	r3, [r7, #28]
 80070ee:	2b0f      	cmp	r3, #15
 80070f0:	f67f ae96 	bls.w	8006e20 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80070f4:	bf00      	nop
 80070f6:	bf00      	nop
 80070f8:	3724      	adds	r7, #36	; 0x24
 80070fa:	46bd      	mov	sp, r7
 80070fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007100:	4770      	bx	lr
 8007102:	bf00      	nop
 8007104:	40023800 	.word	0x40023800
 8007108:	40013800 	.word	0x40013800
 800710c:	40020000 	.word	0x40020000
 8007110:	40020400 	.word	0x40020400
 8007114:	40020800 	.word	0x40020800
 8007118:	40020c00 	.word	0x40020c00
 800711c:	40021000 	.word	0x40021000
 8007120:	40021400 	.word	0x40021400
 8007124:	40021800 	.word	0x40021800
 8007128:	40013c00 	.word	0x40013c00

0800712c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800712c:	b480      	push	{r7}
 800712e:	b087      	sub	sp, #28
 8007130:	af00      	add	r7, sp, #0
 8007132:	6078      	str	r0, [r7, #4]
 8007134:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8007136:	2300      	movs	r3, #0
 8007138:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 800713a:	2300      	movs	r3, #0
 800713c:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 800713e:	2300      	movs	r3, #0
 8007140:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8007142:	2300      	movs	r3, #0
 8007144:	617b      	str	r3, [r7, #20]
 8007146:	e0c7      	b.n	80072d8 <HAL_GPIO_DeInit+0x1ac>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8007148:	2201      	movs	r2, #1
 800714a:	697b      	ldr	r3, [r7, #20]
 800714c:	fa02 f303 	lsl.w	r3, r2, r3
 8007150:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8007152:	683a      	ldr	r2, [r7, #0]
 8007154:	693b      	ldr	r3, [r7, #16]
 8007156:	4013      	ands	r3, r2
 8007158:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 800715a:	68fa      	ldr	r2, [r7, #12]
 800715c:	693b      	ldr	r3, [r7, #16]
 800715e:	429a      	cmp	r2, r3
 8007160:	f040 80b7 	bne.w	80072d2 <HAL_GPIO_DeInit+0x1a6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8007164:	4a62      	ldr	r2, [pc, #392]	; (80072f0 <HAL_GPIO_DeInit+0x1c4>)
 8007166:	697b      	ldr	r3, [r7, #20]
 8007168:	089b      	lsrs	r3, r3, #2
 800716a:	3302      	adds	r3, #2
 800716c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007170:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8007172:	697b      	ldr	r3, [r7, #20]
 8007174:	f003 0303 	and.w	r3, r3, #3
 8007178:	009b      	lsls	r3, r3, #2
 800717a:	220f      	movs	r2, #15
 800717c:	fa02 f303 	lsl.w	r3, r2, r3
 8007180:	68ba      	ldr	r2, [r7, #8]
 8007182:	4013      	ands	r3, r2
 8007184:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	4a5a      	ldr	r2, [pc, #360]	; (80072f4 <HAL_GPIO_DeInit+0x1c8>)
 800718a:	4293      	cmp	r3, r2
 800718c:	d025      	beq.n	80071da <HAL_GPIO_DeInit+0xae>
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	4a59      	ldr	r2, [pc, #356]	; (80072f8 <HAL_GPIO_DeInit+0x1cc>)
 8007192:	4293      	cmp	r3, r2
 8007194:	d01f      	beq.n	80071d6 <HAL_GPIO_DeInit+0xaa>
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	4a58      	ldr	r2, [pc, #352]	; (80072fc <HAL_GPIO_DeInit+0x1d0>)
 800719a:	4293      	cmp	r3, r2
 800719c:	d019      	beq.n	80071d2 <HAL_GPIO_DeInit+0xa6>
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	4a57      	ldr	r2, [pc, #348]	; (8007300 <HAL_GPIO_DeInit+0x1d4>)
 80071a2:	4293      	cmp	r3, r2
 80071a4:	d013      	beq.n	80071ce <HAL_GPIO_DeInit+0xa2>
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	4a56      	ldr	r2, [pc, #344]	; (8007304 <HAL_GPIO_DeInit+0x1d8>)
 80071aa:	4293      	cmp	r3, r2
 80071ac:	d00d      	beq.n	80071ca <HAL_GPIO_DeInit+0x9e>
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	4a55      	ldr	r2, [pc, #340]	; (8007308 <HAL_GPIO_DeInit+0x1dc>)
 80071b2:	4293      	cmp	r3, r2
 80071b4:	d007      	beq.n	80071c6 <HAL_GPIO_DeInit+0x9a>
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	4a54      	ldr	r2, [pc, #336]	; (800730c <HAL_GPIO_DeInit+0x1e0>)
 80071ba:	4293      	cmp	r3, r2
 80071bc:	d101      	bne.n	80071c2 <HAL_GPIO_DeInit+0x96>
 80071be:	2306      	movs	r3, #6
 80071c0:	e00c      	b.n	80071dc <HAL_GPIO_DeInit+0xb0>
 80071c2:	2307      	movs	r3, #7
 80071c4:	e00a      	b.n	80071dc <HAL_GPIO_DeInit+0xb0>
 80071c6:	2305      	movs	r3, #5
 80071c8:	e008      	b.n	80071dc <HAL_GPIO_DeInit+0xb0>
 80071ca:	2304      	movs	r3, #4
 80071cc:	e006      	b.n	80071dc <HAL_GPIO_DeInit+0xb0>
 80071ce:	2303      	movs	r3, #3
 80071d0:	e004      	b.n	80071dc <HAL_GPIO_DeInit+0xb0>
 80071d2:	2302      	movs	r3, #2
 80071d4:	e002      	b.n	80071dc <HAL_GPIO_DeInit+0xb0>
 80071d6:	2301      	movs	r3, #1
 80071d8:	e000      	b.n	80071dc <HAL_GPIO_DeInit+0xb0>
 80071da:	2300      	movs	r3, #0
 80071dc:	697a      	ldr	r2, [r7, #20]
 80071de:	f002 0203 	and.w	r2, r2, #3
 80071e2:	0092      	lsls	r2, r2, #2
 80071e4:	4093      	lsls	r3, r2
 80071e6:	68ba      	ldr	r2, [r7, #8]
 80071e8:	429a      	cmp	r2, r3
 80071ea:	d132      	bne.n	8007252 <HAL_GPIO_DeInit+0x126>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 80071ec:	4b48      	ldr	r3, [pc, #288]	; (8007310 <HAL_GPIO_DeInit+0x1e4>)
 80071ee:	681a      	ldr	r2, [r3, #0]
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	43db      	mvns	r3, r3
 80071f4:	4946      	ldr	r1, [pc, #280]	; (8007310 <HAL_GPIO_DeInit+0x1e4>)
 80071f6:	4013      	ands	r3, r2
 80071f8:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 80071fa:	4b45      	ldr	r3, [pc, #276]	; (8007310 <HAL_GPIO_DeInit+0x1e4>)
 80071fc:	685a      	ldr	r2, [r3, #4]
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	43db      	mvns	r3, r3
 8007202:	4943      	ldr	r1, [pc, #268]	; (8007310 <HAL_GPIO_DeInit+0x1e4>)
 8007204:	4013      	ands	r3, r2
 8007206:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8007208:	4b41      	ldr	r3, [pc, #260]	; (8007310 <HAL_GPIO_DeInit+0x1e4>)
 800720a:	68da      	ldr	r2, [r3, #12]
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	43db      	mvns	r3, r3
 8007210:	493f      	ldr	r1, [pc, #252]	; (8007310 <HAL_GPIO_DeInit+0x1e4>)
 8007212:	4013      	ands	r3, r2
 8007214:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8007216:	4b3e      	ldr	r3, [pc, #248]	; (8007310 <HAL_GPIO_DeInit+0x1e4>)
 8007218:	689a      	ldr	r2, [r3, #8]
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	43db      	mvns	r3, r3
 800721e:	493c      	ldr	r1, [pc, #240]	; (8007310 <HAL_GPIO_DeInit+0x1e4>)
 8007220:	4013      	ands	r3, r2
 8007222:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8007224:	697b      	ldr	r3, [r7, #20]
 8007226:	f003 0303 	and.w	r3, r3, #3
 800722a:	009b      	lsls	r3, r3, #2
 800722c:	220f      	movs	r2, #15
 800722e:	fa02 f303 	lsl.w	r3, r2, r3
 8007232:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8007234:	4a2e      	ldr	r2, [pc, #184]	; (80072f0 <HAL_GPIO_DeInit+0x1c4>)
 8007236:	697b      	ldr	r3, [r7, #20]
 8007238:	089b      	lsrs	r3, r3, #2
 800723a:	3302      	adds	r3, #2
 800723c:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8007240:	68bb      	ldr	r3, [r7, #8]
 8007242:	43da      	mvns	r2, r3
 8007244:	482a      	ldr	r0, [pc, #168]	; (80072f0 <HAL_GPIO_DeInit+0x1c4>)
 8007246:	697b      	ldr	r3, [r7, #20]
 8007248:	089b      	lsrs	r3, r3, #2
 800724a:	400a      	ands	r2, r1
 800724c:	3302      	adds	r3, #2
 800724e:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	681a      	ldr	r2, [r3, #0]
 8007256:	697b      	ldr	r3, [r7, #20]
 8007258:	005b      	lsls	r3, r3, #1
 800725a:	2103      	movs	r1, #3
 800725c:	fa01 f303 	lsl.w	r3, r1, r3
 8007260:	43db      	mvns	r3, r3
 8007262:	401a      	ands	r2, r3
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8007268:	697b      	ldr	r3, [r7, #20]
 800726a:	08da      	lsrs	r2, r3, #3
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	3208      	adds	r2, #8
 8007270:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007274:	697b      	ldr	r3, [r7, #20]
 8007276:	f003 0307 	and.w	r3, r3, #7
 800727a:	009b      	lsls	r3, r3, #2
 800727c:	220f      	movs	r2, #15
 800727e:	fa02 f303 	lsl.w	r3, r2, r3
 8007282:	43db      	mvns	r3, r3
 8007284:	697a      	ldr	r2, [r7, #20]
 8007286:	08d2      	lsrs	r2, r2, #3
 8007288:	4019      	ands	r1, r3
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	3208      	adds	r2, #8
 800728e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	68da      	ldr	r2, [r3, #12]
 8007296:	697b      	ldr	r3, [r7, #20]
 8007298:	005b      	lsls	r3, r3, #1
 800729a:	2103      	movs	r1, #3
 800729c:	fa01 f303 	lsl.w	r3, r1, r3
 80072a0:	43db      	mvns	r3, r3
 80072a2:	401a      	ands	r2, r3
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	685a      	ldr	r2, [r3, #4]
 80072ac:	2101      	movs	r1, #1
 80072ae:	697b      	ldr	r3, [r7, #20]
 80072b0:	fa01 f303 	lsl.w	r3, r1, r3
 80072b4:	43db      	mvns	r3, r3
 80072b6:	401a      	ands	r2, r3
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	689a      	ldr	r2, [r3, #8]
 80072c0:	697b      	ldr	r3, [r7, #20]
 80072c2:	005b      	lsls	r3, r3, #1
 80072c4:	2103      	movs	r1, #3
 80072c6:	fa01 f303 	lsl.w	r3, r1, r3
 80072ca:	43db      	mvns	r3, r3
 80072cc:	401a      	ands	r2, r3
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80072d2:	697b      	ldr	r3, [r7, #20]
 80072d4:	3301      	adds	r3, #1
 80072d6:	617b      	str	r3, [r7, #20]
 80072d8:	697b      	ldr	r3, [r7, #20]
 80072da:	2b0f      	cmp	r3, #15
 80072dc:	f67f af34 	bls.w	8007148 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 80072e0:	bf00      	nop
 80072e2:	bf00      	nop
 80072e4:	371c      	adds	r7, #28
 80072e6:	46bd      	mov	sp, r7
 80072e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ec:	4770      	bx	lr
 80072ee:	bf00      	nop
 80072f0:	40013800 	.word	0x40013800
 80072f4:	40020000 	.word	0x40020000
 80072f8:	40020400 	.word	0x40020400
 80072fc:	40020800 	.word	0x40020800
 8007300:	40020c00 	.word	0x40020c00
 8007304:	40021000 	.word	0x40021000
 8007308:	40021400 	.word	0x40021400
 800730c:	40021800 	.word	0x40021800
 8007310:	40013c00 	.word	0x40013c00

08007314 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007314:	b480      	push	{r7}
 8007316:	b083      	sub	sp, #12
 8007318:	af00      	add	r7, sp, #0
 800731a:	6078      	str	r0, [r7, #4]
 800731c:	460b      	mov	r3, r1
 800731e:	807b      	strh	r3, [r7, #2]
 8007320:	4613      	mov	r3, r2
 8007322:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8007324:	787b      	ldrb	r3, [r7, #1]
 8007326:	2b00      	cmp	r3, #0
 8007328:	d003      	beq.n	8007332 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800732a:	887a      	ldrh	r2, [r7, #2]
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8007330:	e003      	b.n	800733a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8007332:	887b      	ldrh	r3, [r7, #2]
 8007334:	041a      	lsls	r2, r3, #16
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	619a      	str	r2, [r3, #24]
}
 800733a:	bf00      	nop
 800733c:	370c      	adds	r7, #12
 800733e:	46bd      	mov	sp, r7
 8007340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007344:	4770      	bx	lr
	...

08007348 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8007348:	b580      	push	{r7, lr}
 800734a:	b084      	sub	sp, #16
 800734c:	af00      	add	r7, sp, #0
 800734e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	2b00      	cmp	r3, #0
 8007354:	d101      	bne.n	800735a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8007356:	2301      	movs	r3, #1
 8007358:	e12b      	b.n	80075b2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007360:	b2db      	uxtb	r3, r3
 8007362:	2b00      	cmp	r3, #0
 8007364:	d106      	bne.n	8007374 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	2200      	movs	r2, #0
 800736a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800736e:	6878      	ldr	r0, [r7, #4]
 8007370:	f000 f95d 	bl	800762e <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	2224      	movs	r2, #36	; 0x24
 8007378:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	681a      	ldr	r2, [r3, #0]
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	f022 0201 	bic.w	r2, r2, #1
 800738a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	681a      	ldr	r2, [r3, #0]
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800739a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	681a      	ldr	r2, [r3, #0]
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80073aa:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80073ac:	f002 fba4 	bl	8009af8 <HAL_RCC_GetPCLK1Freq>
 80073b0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	685b      	ldr	r3, [r3, #4]
 80073b6:	4a81      	ldr	r2, [pc, #516]	; (80075bc <HAL_I2C_Init+0x274>)
 80073b8:	4293      	cmp	r3, r2
 80073ba:	d807      	bhi.n	80073cc <HAL_I2C_Init+0x84>
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	4a80      	ldr	r2, [pc, #512]	; (80075c0 <HAL_I2C_Init+0x278>)
 80073c0:	4293      	cmp	r3, r2
 80073c2:	bf94      	ite	ls
 80073c4:	2301      	movls	r3, #1
 80073c6:	2300      	movhi	r3, #0
 80073c8:	b2db      	uxtb	r3, r3
 80073ca:	e006      	b.n	80073da <HAL_I2C_Init+0x92>
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	4a7d      	ldr	r2, [pc, #500]	; (80075c4 <HAL_I2C_Init+0x27c>)
 80073d0:	4293      	cmp	r3, r2
 80073d2:	bf94      	ite	ls
 80073d4:	2301      	movls	r3, #1
 80073d6:	2300      	movhi	r3, #0
 80073d8:	b2db      	uxtb	r3, r3
 80073da:	2b00      	cmp	r3, #0
 80073dc:	d001      	beq.n	80073e2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80073de:	2301      	movs	r3, #1
 80073e0:	e0e7      	b.n	80075b2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	4a78      	ldr	r2, [pc, #480]	; (80075c8 <HAL_I2C_Init+0x280>)
 80073e6:	fba2 2303 	umull	r2, r3, r2, r3
 80073ea:	0c9b      	lsrs	r3, r3, #18
 80073ec:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	685b      	ldr	r3, [r3, #4]
 80073f4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	68ba      	ldr	r2, [r7, #8]
 80073fe:	430a      	orrs	r2, r1
 8007400:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	6a1b      	ldr	r3, [r3, #32]
 8007408:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	685b      	ldr	r3, [r3, #4]
 8007410:	4a6a      	ldr	r2, [pc, #424]	; (80075bc <HAL_I2C_Init+0x274>)
 8007412:	4293      	cmp	r3, r2
 8007414:	d802      	bhi.n	800741c <HAL_I2C_Init+0xd4>
 8007416:	68bb      	ldr	r3, [r7, #8]
 8007418:	3301      	adds	r3, #1
 800741a:	e009      	b.n	8007430 <HAL_I2C_Init+0xe8>
 800741c:	68bb      	ldr	r3, [r7, #8]
 800741e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8007422:	fb02 f303 	mul.w	r3, r2, r3
 8007426:	4a69      	ldr	r2, [pc, #420]	; (80075cc <HAL_I2C_Init+0x284>)
 8007428:	fba2 2303 	umull	r2, r3, r2, r3
 800742c:	099b      	lsrs	r3, r3, #6
 800742e:	3301      	adds	r3, #1
 8007430:	687a      	ldr	r2, [r7, #4]
 8007432:	6812      	ldr	r2, [r2, #0]
 8007434:	430b      	orrs	r3, r1
 8007436:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	69db      	ldr	r3, [r3, #28]
 800743e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8007442:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	685b      	ldr	r3, [r3, #4]
 800744a:	495c      	ldr	r1, [pc, #368]	; (80075bc <HAL_I2C_Init+0x274>)
 800744c:	428b      	cmp	r3, r1
 800744e:	d819      	bhi.n	8007484 <HAL_I2C_Init+0x13c>
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	1e59      	subs	r1, r3, #1
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	685b      	ldr	r3, [r3, #4]
 8007458:	005b      	lsls	r3, r3, #1
 800745a:	fbb1 f3f3 	udiv	r3, r1, r3
 800745e:	1c59      	adds	r1, r3, #1
 8007460:	f640 73fc 	movw	r3, #4092	; 0xffc
 8007464:	400b      	ands	r3, r1
 8007466:	2b00      	cmp	r3, #0
 8007468:	d00a      	beq.n	8007480 <HAL_I2C_Init+0x138>
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	1e59      	subs	r1, r3, #1
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	685b      	ldr	r3, [r3, #4]
 8007472:	005b      	lsls	r3, r3, #1
 8007474:	fbb1 f3f3 	udiv	r3, r1, r3
 8007478:	3301      	adds	r3, #1
 800747a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800747e:	e051      	b.n	8007524 <HAL_I2C_Init+0x1dc>
 8007480:	2304      	movs	r3, #4
 8007482:	e04f      	b.n	8007524 <HAL_I2C_Init+0x1dc>
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	689b      	ldr	r3, [r3, #8]
 8007488:	2b00      	cmp	r3, #0
 800748a:	d111      	bne.n	80074b0 <HAL_I2C_Init+0x168>
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	1e58      	subs	r0, r3, #1
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	6859      	ldr	r1, [r3, #4]
 8007494:	460b      	mov	r3, r1
 8007496:	005b      	lsls	r3, r3, #1
 8007498:	440b      	add	r3, r1
 800749a:	fbb0 f3f3 	udiv	r3, r0, r3
 800749e:	3301      	adds	r3, #1
 80074a0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	bf0c      	ite	eq
 80074a8:	2301      	moveq	r3, #1
 80074aa:	2300      	movne	r3, #0
 80074ac:	b2db      	uxtb	r3, r3
 80074ae:	e012      	b.n	80074d6 <HAL_I2C_Init+0x18e>
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	1e58      	subs	r0, r3, #1
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	6859      	ldr	r1, [r3, #4]
 80074b8:	460b      	mov	r3, r1
 80074ba:	009b      	lsls	r3, r3, #2
 80074bc:	440b      	add	r3, r1
 80074be:	0099      	lsls	r1, r3, #2
 80074c0:	440b      	add	r3, r1
 80074c2:	fbb0 f3f3 	udiv	r3, r0, r3
 80074c6:	3301      	adds	r3, #1
 80074c8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	bf0c      	ite	eq
 80074d0:	2301      	moveq	r3, #1
 80074d2:	2300      	movne	r3, #0
 80074d4:	b2db      	uxtb	r3, r3
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	d001      	beq.n	80074de <HAL_I2C_Init+0x196>
 80074da:	2301      	movs	r3, #1
 80074dc:	e022      	b.n	8007524 <HAL_I2C_Init+0x1dc>
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	689b      	ldr	r3, [r3, #8]
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	d10e      	bne.n	8007504 <HAL_I2C_Init+0x1bc>
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	1e58      	subs	r0, r3, #1
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	6859      	ldr	r1, [r3, #4]
 80074ee:	460b      	mov	r3, r1
 80074f0:	005b      	lsls	r3, r3, #1
 80074f2:	440b      	add	r3, r1
 80074f4:	fbb0 f3f3 	udiv	r3, r0, r3
 80074f8:	3301      	adds	r3, #1
 80074fa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80074fe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007502:	e00f      	b.n	8007524 <HAL_I2C_Init+0x1dc>
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	1e58      	subs	r0, r3, #1
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	6859      	ldr	r1, [r3, #4]
 800750c:	460b      	mov	r3, r1
 800750e:	009b      	lsls	r3, r3, #2
 8007510:	440b      	add	r3, r1
 8007512:	0099      	lsls	r1, r3, #2
 8007514:	440b      	add	r3, r1
 8007516:	fbb0 f3f3 	udiv	r3, r0, r3
 800751a:	3301      	adds	r3, #1
 800751c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007520:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007524:	6879      	ldr	r1, [r7, #4]
 8007526:	6809      	ldr	r1, [r1, #0]
 8007528:	4313      	orrs	r3, r2
 800752a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	69da      	ldr	r2, [r3, #28]
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	6a1b      	ldr	r3, [r3, #32]
 800753e:	431a      	orrs	r2, r3
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	430a      	orrs	r2, r1
 8007546:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	689b      	ldr	r3, [r3, #8]
 800754e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8007552:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8007556:	687a      	ldr	r2, [r7, #4]
 8007558:	6911      	ldr	r1, [r2, #16]
 800755a:	687a      	ldr	r2, [r7, #4]
 800755c:	68d2      	ldr	r2, [r2, #12]
 800755e:	4311      	orrs	r1, r2
 8007560:	687a      	ldr	r2, [r7, #4]
 8007562:	6812      	ldr	r2, [r2, #0]
 8007564:	430b      	orrs	r3, r1
 8007566:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	68db      	ldr	r3, [r3, #12]
 800756e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	695a      	ldr	r2, [r3, #20]
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	699b      	ldr	r3, [r3, #24]
 800757a:	431a      	orrs	r2, r3
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	430a      	orrs	r2, r1
 8007582:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	681a      	ldr	r2, [r3, #0]
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	f042 0201 	orr.w	r2, r2, #1
 8007592:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	2200      	movs	r2, #0
 8007598:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	2220      	movs	r2, #32
 800759e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	2200      	movs	r2, #0
 80075a6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	2200      	movs	r2, #0
 80075ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80075b0:	2300      	movs	r3, #0
}
 80075b2:	4618      	mov	r0, r3
 80075b4:	3710      	adds	r7, #16
 80075b6:	46bd      	mov	sp, r7
 80075b8:	bd80      	pop	{r7, pc}
 80075ba:	bf00      	nop
 80075bc:	000186a0 	.word	0x000186a0
 80075c0:	001e847f 	.word	0x001e847f
 80075c4:	003d08ff 	.word	0x003d08ff
 80075c8:	431bde83 	.word	0x431bde83
 80075cc:	10624dd3 	.word	0x10624dd3

080075d0 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 80075d0:	b580      	push	{r7, lr}
 80075d2:	b082      	sub	sp, #8
 80075d4:	af00      	add	r7, sp, #0
 80075d6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	2b00      	cmp	r3, #0
 80075dc:	d101      	bne.n	80075e2 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 80075de:	2301      	movs	r3, #1
 80075e0:	e021      	b.n	8007626 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	2224      	movs	r2, #36	; 0x24
 80075e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	681a      	ldr	r2, [r3, #0]
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	f022 0201 	bic.w	r2, r2, #1
 80075f8:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 80075fa:	6878      	ldr	r0, [r7, #4]
 80075fc:	f000 f821 	bl	8007642 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	2200      	movs	r2, #0
 8007604:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	2200      	movs	r2, #0
 800760a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	2200      	movs	r2, #0
 8007612:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	2200      	movs	r2, #0
 8007618:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	2200      	movs	r2, #0
 8007620:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007624:	2300      	movs	r3, #0
}
 8007626:	4618      	mov	r0, r3
 8007628:	3708      	adds	r7, #8
 800762a:	46bd      	mov	sp, r7
 800762c:	bd80      	pop	{r7, pc}

0800762e <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 800762e:	b480      	push	{r7}
 8007630:	b083      	sub	sp, #12
 8007632:	af00      	add	r7, sp, #0
 8007634:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 8007636:	bf00      	nop
 8007638:	370c      	adds	r7, #12
 800763a:	46bd      	mov	sp, r7
 800763c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007640:	4770      	bx	lr

08007642 <HAL_I2C_MspDeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
{
 8007642:	b480      	push	{r7}
 8007644:	b083      	sub	sp, #12
 8007646:	af00      	add	r7, sp, #0
 8007648:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspDeInit could be implemented in the user file
   */
}
 800764a:	bf00      	nop
 800764c:	370c      	adds	r7, #12
 800764e:	46bd      	mov	sp, r7
 8007650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007654:	4770      	bx	lr
	...

08007658 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007658:	b580      	push	{r7, lr}
 800765a:	b088      	sub	sp, #32
 800765c:	af02      	add	r7, sp, #8
 800765e:	60f8      	str	r0, [r7, #12]
 8007660:	4608      	mov	r0, r1
 8007662:	4611      	mov	r1, r2
 8007664:	461a      	mov	r2, r3
 8007666:	4603      	mov	r3, r0
 8007668:	817b      	strh	r3, [r7, #10]
 800766a:	460b      	mov	r3, r1
 800766c:	813b      	strh	r3, [r7, #8]
 800766e:	4613      	mov	r3, r2
 8007670:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8007672:	f7fe ff9b 	bl	80065ac <HAL_GetTick>
 8007676:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800767e:	b2db      	uxtb	r3, r3
 8007680:	2b20      	cmp	r3, #32
 8007682:	f040 80d9 	bne.w	8007838 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8007686:	697b      	ldr	r3, [r7, #20]
 8007688:	9300      	str	r3, [sp, #0]
 800768a:	2319      	movs	r3, #25
 800768c:	2201      	movs	r2, #1
 800768e:	496d      	ldr	r1, [pc, #436]	; (8007844 <HAL_I2C_Mem_Write+0x1ec>)
 8007690:	68f8      	ldr	r0, [r7, #12]
 8007692:	f000 fc99 	bl	8007fc8 <I2C_WaitOnFlagUntilTimeout>
 8007696:	4603      	mov	r3, r0
 8007698:	2b00      	cmp	r3, #0
 800769a:	d001      	beq.n	80076a0 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 800769c:	2302      	movs	r3, #2
 800769e:	e0cc      	b.n	800783a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80076a6:	2b01      	cmp	r3, #1
 80076a8:	d101      	bne.n	80076ae <HAL_I2C_Mem_Write+0x56>
 80076aa:	2302      	movs	r3, #2
 80076ac:	e0c5      	b.n	800783a <HAL_I2C_Mem_Write+0x1e2>
 80076ae:	68fb      	ldr	r3, [r7, #12]
 80076b0:	2201      	movs	r2, #1
 80076b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80076b6:	68fb      	ldr	r3, [r7, #12]
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	f003 0301 	and.w	r3, r3, #1
 80076c0:	2b01      	cmp	r3, #1
 80076c2:	d007      	beq.n	80076d4 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	681a      	ldr	r2, [r3, #0]
 80076ca:	68fb      	ldr	r3, [r7, #12]
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	f042 0201 	orr.w	r2, r2, #1
 80076d2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	681a      	ldr	r2, [r3, #0]
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80076e2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	2221      	movs	r2, #33	; 0x21
 80076e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	2240      	movs	r2, #64	; 0x40
 80076f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	2200      	movs	r2, #0
 80076f8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	6a3a      	ldr	r2, [r7, #32]
 80076fe:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8007704:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800770a:	b29a      	uxth	r2, r3
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	4a4d      	ldr	r2, [pc, #308]	; (8007848 <HAL_I2C_Mem_Write+0x1f0>)
 8007714:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8007716:	88f8      	ldrh	r0, [r7, #6]
 8007718:	893a      	ldrh	r2, [r7, #8]
 800771a:	8979      	ldrh	r1, [r7, #10]
 800771c:	697b      	ldr	r3, [r7, #20]
 800771e:	9301      	str	r3, [sp, #4]
 8007720:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007722:	9300      	str	r3, [sp, #0]
 8007724:	4603      	mov	r3, r0
 8007726:	68f8      	ldr	r0, [r7, #12]
 8007728:	f000 fad0 	bl	8007ccc <I2C_RequestMemoryWrite>
 800772c:	4603      	mov	r3, r0
 800772e:	2b00      	cmp	r3, #0
 8007730:	d052      	beq.n	80077d8 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8007732:	2301      	movs	r3, #1
 8007734:	e081      	b.n	800783a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007736:	697a      	ldr	r2, [r7, #20]
 8007738:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800773a:	68f8      	ldr	r0, [r7, #12]
 800773c:	f000 fd1a 	bl	8008174 <I2C_WaitOnTXEFlagUntilTimeout>
 8007740:	4603      	mov	r3, r0
 8007742:	2b00      	cmp	r3, #0
 8007744:	d00d      	beq.n	8007762 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800774a:	2b04      	cmp	r3, #4
 800774c:	d107      	bne.n	800775e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	681a      	ldr	r2, [r3, #0]
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800775c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800775e:	2301      	movs	r3, #1
 8007760:	e06b      	b.n	800783a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007762:	68fb      	ldr	r3, [r7, #12]
 8007764:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007766:	781a      	ldrb	r2, [r3, #0]
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007772:	1c5a      	adds	r2, r3, #1
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800777c:	3b01      	subs	r3, #1
 800777e:	b29a      	uxth	r2, r3
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007788:	b29b      	uxth	r3, r3
 800778a:	3b01      	subs	r3, #1
 800778c:	b29a      	uxth	r2, r3
 800778e:	68fb      	ldr	r3, [r7, #12]
 8007790:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8007792:	68fb      	ldr	r3, [r7, #12]
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	695b      	ldr	r3, [r3, #20]
 8007798:	f003 0304 	and.w	r3, r3, #4
 800779c:	2b04      	cmp	r3, #4
 800779e:	d11b      	bne.n	80077d8 <HAL_I2C_Mem_Write+0x180>
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	d017      	beq.n	80077d8 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077ac:	781a      	ldrb	r2, [r3, #0]
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077b8:	1c5a      	adds	r2, r3, #1
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80077be:	68fb      	ldr	r3, [r7, #12]
 80077c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80077c2:	3b01      	subs	r3, #1
 80077c4:	b29a      	uxth	r2, r3
 80077c6:	68fb      	ldr	r3, [r7, #12]
 80077c8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80077ca:	68fb      	ldr	r3, [r7, #12]
 80077cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80077ce:	b29b      	uxth	r3, r3
 80077d0:	3b01      	subs	r3, #1
 80077d2:	b29a      	uxth	r2, r3
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80077dc:	2b00      	cmp	r3, #0
 80077de:	d1aa      	bne.n	8007736 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80077e0:	697a      	ldr	r2, [r7, #20]
 80077e2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80077e4:	68f8      	ldr	r0, [r7, #12]
 80077e6:	f000 fd06 	bl	80081f6 <I2C_WaitOnBTFFlagUntilTimeout>
 80077ea:	4603      	mov	r3, r0
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	d00d      	beq.n	800780c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077f4:	2b04      	cmp	r3, #4
 80077f6:	d107      	bne.n	8007808 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	681a      	ldr	r2, [r3, #0]
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007806:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8007808:	2301      	movs	r3, #1
 800780a:	e016      	b.n	800783a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	681a      	ldr	r2, [r3, #0]
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800781a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	2220      	movs	r2, #32
 8007820:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	2200      	movs	r2, #0
 8007828:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	2200      	movs	r2, #0
 8007830:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8007834:	2300      	movs	r3, #0
 8007836:	e000      	b.n	800783a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8007838:	2302      	movs	r3, #2
  }
}
 800783a:	4618      	mov	r0, r3
 800783c:	3718      	adds	r7, #24
 800783e:	46bd      	mov	sp, r7
 8007840:	bd80      	pop	{r7, pc}
 8007842:	bf00      	nop
 8007844:	00100002 	.word	0x00100002
 8007848:	ffff0000 	.word	0xffff0000

0800784c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800784c:	b580      	push	{r7, lr}
 800784e:	b08c      	sub	sp, #48	; 0x30
 8007850:	af02      	add	r7, sp, #8
 8007852:	60f8      	str	r0, [r7, #12]
 8007854:	4608      	mov	r0, r1
 8007856:	4611      	mov	r1, r2
 8007858:	461a      	mov	r2, r3
 800785a:	4603      	mov	r3, r0
 800785c:	817b      	strh	r3, [r7, #10]
 800785e:	460b      	mov	r3, r1
 8007860:	813b      	strh	r3, [r7, #8]
 8007862:	4613      	mov	r3, r2
 8007864:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8007866:	f7fe fea1 	bl	80065ac <HAL_GetTick>
 800786a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007872:	b2db      	uxtb	r3, r3
 8007874:	2b20      	cmp	r3, #32
 8007876:	f040 8208 	bne.w	8007c8a <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800787a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800787c:	9300      	str	r3, [sp, #0]
 800787e:	2319      	movs	r3, #25
 8007880:	2201      	movs	r2, #1
 8007882:	497b      	ldr	r1, [pc, #492]	; (8007a70 <HAL_I2C_Mem_Read+0x224>)
 8007884:	68f8      	ldr	r0, [r7, #12]
 8007886:	f000 fb9f 	bl	8007fc8 <I2C_WaitOnFlagUntilTimeout>
 800788a:	4603      	mov	r3, r0
 800788c:	2b00      	cmp	r3, #0
 800788e:	d001      	beq.n	8007894 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8007890:	2302      	movs	r3, #2
 8007892:	e1fb      	b.n	8007c8c <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800789a:	2b01      	cmp	r3, #1
 800789c:	d101      	bne.n	80078a2 <HAL_I2C_Mem_Read+0x56>
 800789e:	2302      	movs	r3, #2
 80078a0:	e1f4      	b.n	8007c8c <HAL_I2C_Mem_Read+0x440>
 80078a2:	68fb      	ldr	r3, [r7, #12]
 80078a4:	2201      	movs	r2, #1
 80078a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	f003 0301 	and.w	r3, r3, #1
 80078b4:	2b01      	cmp	r3, #1
 80078b6:	d007      	beq.n	80078c8 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	681a      	ldr	r2, [r3, #0]
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	f042 0201 	orr.w	r2, r2, #1
 80078c6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	681a      	ldr	r2, [r3, #0]
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80078d6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80078d8:	68fb      	ldr	r3, [r7, #12]
 80078da:	2222      	movs	r2, #34	; 0x22
 80078dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	2240      	movs	r2, #64	; 0x40
 80078e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	2200      	movs	r2, #0
 80078ec:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80078f2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80078f8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80078fa:	68fb      	ldr	r3, [r7, #12]
 80078fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80078fe:	b29a      	uxth	r2, r3
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	4a5b      	ldr	r2, [pc, #364]	; (8007a74 <HAL_I2C_Mem_Read+0x228>)
 8007908:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800790a:	88f8      	ldrh	r0, [r7, #6]
 800790c:	893a      	ldrh	r2, [r7, #8]
 800790e:	8979      	ldrh	r1, [r7, #10]
 8007910:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007912:	9301      	str	r3, [sp, #4]
 8007914:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007916:	9300      	str	r3, [sp, #0]
 8007918:	4603      	mov	r3, r0
 800791a:	68f8      	ldr	r0, [r7, #12]
 800791c:	f000 fa6c 	bl	8007df8 <I2C_RequestMemoryRead>
 8007920:	4603      	mov	r3, r0
 8007922:	2b00      	cmp	r3, #0
 8007924:	d001      	beq.n	800792a <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8007926:	2301      	movs	r3, #1
 8007928:	e1b0      	b.n	8007c8c <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 800792a:	68fb      	ldr	r3, [r7, #12]
 800792c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800792e:	2b00      	cmp	r3, #0
 8007930:	d113      	bne.n	800795a <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007932:	2300      	movs	r3, #0
 8007934:	623b      	str	r3, [r7, #32]
 8007936:	68fb      	ldr	r3, [r7, #12]
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	695b      	ldr	r3, [r3, #20]
 800793c:	623b      	str	r3, [r7, #32]
 800793e:	68fb      	ldr	r3, [r7, #12]
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	699b      	ldr	r3, [r3, #24]
 8007944:	623b      	str	r3, [r7, #32]
 8007946:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	681a      	ldr	r2, [r3, #0]
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007956:	601a      	str	r2, [r3, #0]
 8007958:	e184      	b.n	8007c64 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800795a:	68fb      	ldr	r3, [r7, #12]
 800795c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800795e:	2b01      	cmp	r3, #1
 8007960:	d11b      	bne.n	800799a <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007962:	68fb      	ldr	r3, [r7, #12]
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	681a      	ldr	r2, [r3, #0]
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007970:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007972:	2300      	movs	r3, #0
 8007974:	61fb      	str	r3, [r7, #28]
 8007976:	68fb      	ldr	r3, [r7, #12]
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	695b      	ldr	r3, [r3, #20]
 800797c:	61fb      	str	r3, [r7, #28]
 800797e:	68fb      	ldr	r3, [r7, #12]
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	699b      	ldr	r3, [r3, #24]
 8007984:	61fb      	str	r3, [r7, #28]
 8007986:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	681a      	ldr	r2, [r3, #0]
 800798e:	68fb      	ldr	r3, [r7, #12]
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007996:	601a      	str	r2, [r3, #0]
 8007998:	e164      	b.n	8007c64 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800799a:	68fb      	ldr	r3, [r7, #12]
 800799c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800799e:	2b02      	cmp	r3, #2
 80079a0:	d11b      	bne.n	80079da <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	681a      	ldr	r2, [r3, #0]
 80079a8:	68fb      	ldr	r3, [r7, #12]
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80079b0:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	681a      	ldr	r2, [r3, #0]
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80079c0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80079c2:	2300      	movs	r3, #0
 80079c4:	61bb      	str	r3, [r7, #24]
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	695b      	ldr	r3, [r3, #20]
 80079cc:	61bb      	str	r3, [r7, #24]
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	699b      	ldr	r3, [r3, #24]
 80079d4:	61bb      	str	r3, [r7, #24]
 80079d6:	69bb      	ldr	r3, [r7, #24]
 80079d8:	e144      	b.n	8007c64 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80079da:	2300      	movs	r3, #0
 80079dc:	617b      	str	r3, [r7, #20]
 80079de:	68fb      	ldr	r3, [r7, #12]
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	695b      	ldr	r3, [r3, #20]
 80079e4:	617b      	str	r3, [r7, #20]
 80079e6:	68fb      	ldr	r3, [r7, #12]
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	699b      	ldr	r3, [r3, #24]
 80079ec:	617b      	str	r3, [r7, #20]
 80079ee:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80079f0:	e138      	b.n	8007c64 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80079f2:	68fb      	ldr	r3, [r7, #12]
 80079f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80079f6:	2b03      	cmp	r3, #3
 80079f8:	f200 80f1 	bhi.w	8007bde <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007a00:	2b01      	cmp	r3, #1
 8007a02:	d123      	bne.n	8007a4c <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007a04:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007a06:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007a08:	68f8      	ldr	r0, [r7, #12]
 8007a0a:	f000 fc35 	bl	8008278 <I2C_WaitOnRXNEFlagUntilTimeout>
 8007a0e:	4603      	mov	r3, r0
 8007a10:	2b00      	cmp	r3, #0
 8007a12:	d001      	beq.n	8007a18 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8007a14:	2301      	movs	r3, #1
 8007a16:	e139      	b.n	8007c8c <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007a18:	68fb      	ldr	r3, [r7, #12]
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	691a      	ldr	r2, [r3, #16]
 8007a1e:	68fb      	ldr	r3, [r7, #12]
 8007a20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a22:	b2d2      	uxtb	r2, r2
 8007a24:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007a26:	68fb      	ldr	r3, [r7, #12]
 8007a28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a2a:	1c5a      	adds	r2, r3, #1
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007a30:	68fb      	ldr	r3, [r7, #12]
 8007a32:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007a34:	3b01      	subs	r3, #1
 8007a36:	b29a      	uxth	r2, r3
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007a3c:	68fb      	ldr	r3, [r7, #12]
 8007a3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007a40:	b29b      	uxth	r3, r3
 8007a42:	3b01      	subs	r3, #1
 8007a44:	b29a      	uxth	r2, r3
 8007a46:	68fb      	ldr	r3, [r7, #12]
 8007a48:	855a      	strh	r2, [r3, #42]	; 0x2a
 8007a4a:	e10b      	b.n	8007c64 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007a50:	2b02      	cmp	r3, #2
 8007a52:	d14e      	bne.n	8007af2 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8007a54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a56:	9300      	str	r3, [sp, #0]
 8007a58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a5a:	2200      	movs	r2, #0
 8007a5c:	4906      	ldr	r1, [pc, #24]	; (8007a78 <HAL_I2C_Mem_Read+0x22c>)
 8007a5e:	68f8      	ldr	r0, [r7, #12]
 8007a60:	f000 fab2 	bl	8007fc8 <I2C_WaitOnFlagUntilTimeout>
 8007a64:	4603      	mov	r3, r0
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	d008      	beq.n	8007a7c <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8007a6a:	2301      	movs	r3, #1
 8007a6c:	e10e      	b.n	8007c8c <HAL_I2C_Mem_Read+0x440>
 8007a6e:	bf00      	nop
 8007a70:	00100002 	.word	0x00100002
 8007a74:	ffff0000 	.word	0xffff0000
 8007a78:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007a7c:	68fb      	ldr	r3, [r7, #12]
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	681a      	ldr	r2, [r3, #0]
 8007a82:	68fb      	ldr	r3, [r7, #12]
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007a8a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	691a      	ldr	r2, [r3, #16]
 8007a92:	68fb      	ldr	r3, [r7, #12]
 8007a94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a96:	b2d2      	uxtb	r2, r2
 8007a98:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007a9a:	68fb      	ldr	r3, [r7, #12]
 8007a9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a9e:	1c5a      	adds	r2, r3, #1
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007aa4:	68fb      	ldr	r3, [r7, #12]
 8007aa6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007aa8:	3b01      	subs	r3, #1
 8007aaa:	b29a      	uxth	r2, r3
 8007aac:	68fb      	ldr	r3, [r7, #12]
 8007aae:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007ab4:	b29b      	uxth	r3, r3
 8007ab6:	3b01      	subs	r3, #1
 8007ab8:	b29a      	uxth	r2, r3
 8007aba:	68fb      	ldr	r3, [r7, #12]
 8007abc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007abe:	68fb      	ldr	r3, [r7, #12]
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	691a      	ldr	r2, [r3, #16]
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ac8:	b2d2      	uxtb	r2, r2
 8007aca:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007acc:	68fb      	ldr	r3, [r7, #12]
 8007ace:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ad0:	1c5a      	adds	r2, r3, #1
 8007ad2:	68fb      	ldr	r3, [r7, #12]
 8007ad4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007ad6:	68fb      	ldr	r3, [r7, #12]
 8007ad8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007ada:	3b01      	subs	r3, #1
 8007adc:	b29a      	uxth	r2, r3
 8007ade:	68fb      	ldr	r3, [r7, #12]
 8007ae0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007ae2:	68fb      	ldr	r3, [r7, #12]
 8007ae4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007ae6:	b29b      	uxth	r3, r3
 8007ae8:	3b01      	subs	r3, #1
 8007aea:	b29a      	uxth	r2, r3
 8007aec:	68fb      	ldr	r3, [r7, #12]
 8007aee:	855a      	strh	r2, [r3, #42]	; 0x2a
 8007af0:	e0b8      	b.n	8007c64 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8007af2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007af4:	9300      	str	r3, [sp, #0]
 8007af6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007af8:	2200      	movs	r2, #0
 8007afa:	4966      	ldr	r1, [pc, #408]	; (8007c94 <HAL_I2C_Mem_Read+0x448>)
 8007afc:	68f8      	ldr	r0, [r7, #12]
 8007afe:	f000 fa63 	bl	8007fc8 <I2C_WaitOnFlagUntilTimeout>
 8007b02:	4603      	mov	r3, r0
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	d001      	beq.n	8007b0c <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8007b08:	2301      	movs	r3, #1
 8007b0a:	e0bf      	b.n	8007c8c <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007b0c:	68fb      	ldr	r3, [r7, #12]
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	681a      	ldr	r2, [r3, #0]
 8007b12:	68fb      	ldr	r3, [r7, #12]
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007b1a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007b1c:	68fb      	ldr	r3, [r7, #12]
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	691a      	ldr	r2, [r3, #16]
 8007b22:	68fb      	ldr	r3, [r7, #12]
 8007b24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b26:	b2d2      	uxtb	r2, r2
 8007b28:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007b2a:	68fb      	ldr	r3, [r7, #12]
 8007b2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b2e:	1c5a      	adds	r2, r3, #1
 8007b30:	68fb      	ldr	r3, [r7, #12]
 8007b32:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007b34:	68fb      	ldr	r3, [r7, #12]
 8007b36:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007b38:	3b01      	subs	r3, #1
 8007b3a:	b29a      	uxth	r2, r3
 8007b3c:	68fb      	ldr	r3, [r7, #12]
 8007b3e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007b40:	68fb      	ldr	r3, [r7, #12]
 8007b42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007b44:	b29b      	uxth	r3, r3
 8007b46:	3b01      	subs	r3, #1
 8007b48:	b29a      	uxth	r2, r3
 8007b4a:	68fb      	ldr	r3, [r7, #12]
 8007b4c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8007b4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b50:	9300      	str	r3, [sp, #0]
 8007b52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b54:	2200      	movs	r2, #0
 8007b56:	494f      	ldr	r1, [pc, #316]	; (8007c94 <HAL_I2C_Mem_Read+0x448>)
 8007b58:	68f8      	ldr	r0, [r7, #12]
 8007b5a:	f000 fa35 	bl	8007fc8 <I2C_WaitOnFlagUntilTimeout>
 8007b5e:	4603      	mov	r3, r0
 8007b60:	2b00      	cmp	r3, #0
 8007b62:	d001      	beq.n	8007b68 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8007b64:	2301      	movs	r3, #1
 8007b66:	e091      	b.n	8007c8c <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	681a      	ldr	r2, [r3, #0]
 8007b6e:	68fb      	ldr	r3, [r7, #12]
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007b76:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007b78:	68fb      	ldr	r3, [r7, #12]
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	691a      	ldr	r2, [r3, #16]
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b82:	b2d2      	uxtb	r2, r2
 8007b84:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b8a:	1c5a      	adds	r2, r3, #1
 8007b8c:	68fb      	ldr	r3, [r7, #12]
 8007b8e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007b90:	68fb      	ldr	r3, [r7, #12]
 8007b92:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007b94:	3b01      	subs	r3, #1
 8007b96:	b29a      	uxth	r2, r3
 8007b98:	68fb      	ldr	r3, [r7, #12]
 8007b9a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007b9c:	68fb      	ldr	r3, [r7, #12]
 8007b9e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007ba0:	b29b      	uxth	r3, r3
 8007ba2:	3b01      	subs	r3, #1
 8007ba4:	b29a      	uxth	r2, r3
 8007ba6:	68fb      	ldr	r3, [r7, #12]
 8007ba8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007baa:	68fb      	ldr	r3, [r7, #12]
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	691a      	ldr	r2, [r3, #16]
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bb4:	b2d2      	uxtb	r2, r2
 8007bb6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007bb8:	68fb      	ldr	r3, [r7, #12]
 8007bba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bbc:	1c5a      	adds	r2, r3, #1
 8007bbe:	68fb      	ldr	r3, [r7, #12]
 8007bc0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007bc6:	3b01      	subs	r3, #1
 8007bc8:	b29a      	uxth	r2, r3
 8007bca:	68fb      	ldr	r3, [r7, #12]
 8007bcc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007bd2:	b29b      	uxth	r3, r3
 8007bd4:	3b01      	subs	r3, #1
 8007bd6:	b29a      	uxth	r2, r3
 8007bd8:	68fb      	ldr	r3, [r7, #12]
 8007bda:	855a      	strh	r2, [r3, #42]	; 0x2a
 8007bdc:	e042      	b.n	8007c64 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007bde:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007be0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007be2:	68f8      	ldr	r0, [r7, #12]
 8007be4:	f000 fb48 	bl	8008278 <I2C_WaitOnRXNEFlagUntilTimeout>
 8007be8:	4603      	mov	r3, r0
 8007bea:	2b00      	cmp	r3, #0
 8007bec:	d001      	beq.n	8007bf2 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8007bee:	2301      	movs	r3, #1
 8007bf0:	e04c      	b.n	8007c8c <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	691a      	ldr	r2, [r3, #16]
 8007bf8:	68fb      	ldr	r3, [r7, #12]
 8007bfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bfc:	b2d2      	uxtb	r2, r2
 8007bfe:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8007c00:	68fb      	ldr	r3, [r7, #12]
 8007c02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c04:	1c5a      	adds	r2, r3, #1
 8007c06:	68fb      	ldr	r3, [r7, #12]
 8007c08:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8007c0a:	68fb      	ldr	r3, [r7, #12]
 8007c0c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007c0e:	3b01      	subs	r3, #1
 8007c10:	b29a      	uxth	r2, r3
 8007c12:	68fb      	ldr	r3, [r7, #12]
 8007c14:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8007c16:	68fb      	ldr	r3, [r7, #12]
 8007c18:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007c1a:	b29b      	uxth	r3, r3
 8007c1c:	3b01      	subs	r3, #1
 8007c1e:	b29a      	uxth	r2, r3
 8007c20:	68fb      	ldr	r3, [r7, #12]
 8007c22:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	695b      	ldr	r3, [r3, #20]
 8007c2a:	f003 0304 	and.w	r3, r3, #4
 8007c2e:	2b04      	cmp	r3, #4
 8007c30:	d118      	bne.n	8007c64 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007c32:	68fb      	ldr	r3, [r7, #12]
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	691a      	ldr	r2, [r3, #16]
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c3c:	b2d2      	uxtb	r2, r2
 8007c3e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c44:	1c5a      	adds	r2, r3, #1
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007c4a:	68fb      	ldr	r3, [r7, #12]
 8007c4c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007c4e:	3b01      	subs	r3, #1
 8007c50:	b29a      	uxth	r2, r3
 8007c52:	68fb      	ldr	r3, [r7, #12]
 8007c54:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007c56:	68fb      	ldr	r3, [r7, #12]
 8007c58:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007c5a:	b29b      	uxth	r3, r3
 8007c5c:	3b01      	subs	r3, #1
 8007c5e:	b29a      	uxth	r2, r3
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8007c64:	68fb      	ldr	r3, [r7, #12]
 8007c66:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007c68:	2b00      	cmp	r3, #0
 8007c6a:	f47f aec2 	bne.w	80079f2 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8007c6e:	68fb      	ldr	r3, [r7, #12]
 8007c70:	2220      	movs	r2, #32
 8007c72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007c76:	68fb      	ldr	r3, [r7, #12]
 8007c78:	2200      	movs	r2, #0
 8007c7a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007c7e:	68fb      	ldr	r3, [r7, #12]
 8007c80:	2200      	movs	r2, #0
 8007c82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8007c86:	2300      	movs	r3, #0
 8007c88:	e000      	b.n	8007c8c <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8007c8a:	2302      	movs	r3, #2
  }
}
 8007c8c:	4618      	mov	r0, r3
 8007c8e:	3728      	adds	r7, #40	; 0x28
 8007c90:	46bd      	mov	sp, r7
 8007c92:	bd80      	pop	{r7, pc}
 8007c94:	00010004 	.word	0x00010004

08007c98 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8007c98:	b480      	push	{r7}
 8007c9a:	b083      	sub	sp, #12
 8007c9c:	af00      	add	r7, sp, #0
 8007c9e:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007ca6:	b2db      	uxtb	r3, r3
}
 8007ca8:	4618      	mov	r0, r3
 8007caa:	370c      	adds	r7, #12
 8007cac:	46bd      	mov	sp, r7
 8007cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cb2:	4770      	bx	lr

08007cb4 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 8007cb4:	b480      	push	{r7}
 8007cb6:	b083      	sub	sp, #12
 8007cb8:	af00      	add	r7, sp, #0
 8007cba:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8007cc0:	4618      	mov	r0, r3
 8007cc2:	370c      	adds	r7, #12
 8007cc4:	46bd      	mov	sp, r7
 8007cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cca:	4770      	bx	lr

08007ccc <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8007ccc:	b580      	push	{r7, lr}
 8007cce:	b088      	sub	sp, #32
 8007cd0:	af02      	add	r7, sp, #8
 8007cd2:	60f8      	str	r0, [r7, #12]
 8007cd4:	4608      	mov	r0, r1
 8007cd6:	4611      	mov	r1, r2
 8007cd8:	461a      	mov	r2, r3
 8007cda:	4603      	mov	r3, r0
 8007cdc:	817b      	strh	r3, [r7, #10]
 8007cde:	460b      	mov	r3, r1
 8007ce0:	813b      	strh	r3, [r7, #8]
 8007ce2:	4613      	mov	r3, r2
 8007ce4:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007ce6:	68fb      	ldr	r3, [r7, #12]
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	681a      	ldr	r2, [r3, #0]
 8007cec:	68fb      	ldr	r3, [r7, #12]
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007cf4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007cf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cf8:	9300      	str	r3, [sp, #0]
 8007cfa:	6a3b      	ldr	r3, [r7, #32]
 8007cfc:	2200      	movs	r2, #0
 8007cfe:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8007d02:	68f8      	ldr	r0, [r7, #12]
 8007d04:	f000 f960 	bl	8007fc8 <I2C_WaitOnFlagUntilTimeout>
 8007d08:	4603      	mov	r3, r0
 8007d0a:	2b00      	cmp	r3, #0
 8007d0c:	d00d      	beq.n	8007d2a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007d0e:	68fb      	ldr	r3, [r7, #12]
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007d18:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007d1c:	d103      	bne.n	8007d26 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007d1e:	68fb      	ldr	r3, [r7, #12]
 8007d20:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007d24:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8007d26:	2303      	movs	r3, #3
 8007d28:	e05f      	b.n	8007dea <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8007d2a:	897b      	ldrh	r3, [r7, #10]
 8007d2c:	b2db      	uxtb	r3, r3
 8007d2e:	461a      	mov	r2, r3
 8007d30:	68fb      	ldr	r3, [r7, #12]
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8007d38:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007d3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d3c:	6a3a      	ldr	r2, [r7, #32]
 8007d3e:	492d      	ldr	r1, [pc, #180]	; (8007df4 <I2C_RequestMemoryWrite+0x128>)
 8007d40:	68f8      	ldr	r0, [r7, #12]
 8007d42:	f000 f998 	bl	8008076 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007d46:	4603      	mov	r3, r0
 8007d48:	2b00      	cmp	r3, #0
 8007d4a:	d001      	beq.n	8007d50 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8007d4c:	2301      	movs	r3, #1
 8007d4e:	e04c      	b.n	8007dea <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007d50:	2300      	movs	r3, #0
 8007d52:	617b      	str	r3, [r7, #20]
 8007d54:	68fb      	ldr	r3, [r7, #12]
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	695b      	ldr	r3, [r3, #20]
 8007d5a:	617b      	str	r3, [r7, #20]
 8007d5c:	68fb      	ldr	r3, [r7, #12]
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	699b      	ldr	r3, [r3, #24]
 8007d62:	617b      	str	r3, [r7, #20]
 8007d64:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007d66:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007d68:	6a39      	ldr	r1, [r7, #32]
 8007d6a:	68f8      	ldr	r0, [r7, #12]
 8007d6c:	f000 fa02 	bl	8008174 <I2C_WaitOnTXEFlagUntilTimeout>
 8007d70:	4603      	mov	r3, r0
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	d00d      	beq.n	8007d92 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007d76:	68fb      	ldr	r3, [r7, #12]
 8007d78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d7a:	2b04      	cmp	r3, #4
 8007d7c:	d107      	bne.n	8007d8e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007d7e:	68fb      	ldr	r3, [r7, #12]
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	681a      	ldr	r2, [r3, #0]
 8007d84:	68fb      	ldr	r3, [r7, #12]
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007d8c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8007d8e:	2301      	movs	r3, #1
 8007d90:	e02b      	b.n	8007dea <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8007d92:	88fb      	ldrh	r3, [r7, #6]
 8007d94:	2b01      	cmp	r3, #1
 8007d96:	d105      	bne.n	8007da4 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007d98:	893b      	ldrh	r3, [r7, #8]
 8007d9a:	b2da      	uxtb	r2, r3
 8007d9c:	68fb      	ldr	r3, [r7, #12]
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	611a      	str	r2, [r3, #16]
 8007da2:	e021      	b.n	8007de8 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8007da4:	893b      	ldrh	r3, [r7, #8]
 8007da6:	0a1b      	lsrs	r3, r3, #8
 8007da8:	b29b      	uxth	r3, r3
 8007daa:	b2da      	uxtb	r2, r3
 8007dac:	68fb      	ldr	r3, [r7, #12]
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007db2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007db4:	6a39      	ldr	r1, [r7, #32]
 8007db6:	68f8      	ldr	r0, [r7, #12]
 8007db8:	f000 f9dc 	bl	8008174 <I2C_WaitOnTXEFlagUntilTimeout>
 8007dbc:	4603      	mov	r3, r0
 8007dbe:	2b00      	cmp	r3, #0
 8007dc0:	d00d      	beq.n	8007dde <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007dc2:	68fb      	ldr	r3, [r7, #12]
 8007dc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007dc6:	2b04      	cmp	r3, #4
 8007dc8:	d107      	bne.n	8007dda <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007dca:	68fb      	ldr	r3, [r7, #12]
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	681a      	ldr	r2, [r3, #0]
 8007dd0:	68fb      	ldr	r3, [r7, #12]
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007dd8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8007dda:	2301      	movs	r3, #1
 8007ddc:	e005      	b.n	8007dea <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007dde:	893b      	ldrh	r3, [r7, #8]
 8007de0:	b2da      	uxtb	r2, r3
 8007de2:	68fb      	ldr	r3, [r7, #12]
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8007de8:	2300      	movs	r3, #0
}
 8007dea:	4618      	mov	r0, r3
 8007dec:	3718      	adds	r7, #24
 8007dee:	46bd      	mov	sp, r7
 8007df0:	bd80      	pop	{r7, pc}
 8007df2:	bf00      	nop
 8007df4:	00010002 	.word	0x00010002

08007df8 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8007df8:	b580      	push	{r7, lr}
 8007dfa:	b088      	sub	sp, #32
 8007dfc:	af02      	add	r7, sp, #8
 8007dfe:	60f8      	str	r0, [r7, #12]
 8007e00:	4608      	mov	r0, r1
 8007e02:	4611      	mov	r1, r2
 8007e04:	461a      	mov	r2, r3
 8007e06:	4603      	mov	r3, r0
 8007e08:	817b      	strh	r3, [r7, #10]
 8007e0a:	460b      	mov	r3, r1
 8007e0c:	813b      	strh	r3, [r7, #8]
 8007e0e:	4613      	mov	r3, r2
 8007e10:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007e12:	68fb      	ldr	r3, [r7, #12]
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	681a      	ldr	r2, [r3, #0]
 8007e18:	68fb      	ldr	r3, [r7, #12]
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007e20:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007e22:	68fb      	ldr	r3, [r7, #12]
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	681a      	ldr	r2, [r3, #0]
 8007e28:	68fb      	ldr	r3, [r7, #12]
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007e30:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007e32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e34:	9300      	str	r3, [sp, #0]
 8007e36:	6a3b      	ldr	r3, [r7, #32]
 8007e38:	2200      	movs	r2, #0
 8007e3a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8007e3e:	68f8      	ldr	r0, [r7, #12]
 8007e40:	f000 f8c2 	bl	8007fc8 <I2C_WaitOnFlagUntilTimeout>
 8007e44:	4603      	mov	r3, r0
 8007e46:	2b00      	cmp	r3, #0
 8007e48:	d00d      	beq.n	8007e66 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007e4a:	68fb      	ldr	r3, [r7, #12]
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007e54:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007e58:	d103      	bne.n	8007e62 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007e5a:	68fb      	ldr	r3, [r7, #12]
 8007e5c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007e60:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8007e62:	2303      	movs	r3, #3
 8007e64:	e0aa      	b.n	8007fbc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8007e66:	897b      	ldrh	r3, [r7, #10]
 8007e68:	b2db      	uxtb	r3, r3
 8007e6a:	461a      	mov	r2, r3
 8007e6c:	68fb      	ldr	r3, [r7, #12]
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8007e74:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007e76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e78:	6a3a      	ldr	r2, [r7, #32]
 8007e7a:	4952      	ldr	r1, [pc, #328]	; (8007fc4 <I2C_RequestMemoryRead+0x1cc>)
 8007e7c:	68f8      	ldr	r0, [r7, #12]
 8007e7e:	f000 f8fa 	bl	8008076 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007e82:	4603      	mov	r3, r0
 8007e84:	2b00      	cmp	r3, #0
 8007e86:	d001      	beq.n	8007e8c <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8007e88:	2301      	movs	r3, #1
 8007e8a:	e097      	b.n	8007fbc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007e8c:	2300      	movs	r3, #0
 8007e8e:	617b      	str	r3, [r7, #20]
 8007e90:	68fb      	ldr	r3, [r7, #12]
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	695b      	ldr	r3, [r3, #20]
 8007e96:	617b      	str	r3, [r7, #20]
 8007e98:	68fb      	ldr	r3, [r7, #12]
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	699b      	ldr	r3, [r3, #24]
 8007e9e:	617b      	str	r3, [r7, #20]
 8007ea0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007ea2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007ea4:	6a39      	ldr	r1, [r7, #32]
 8007ea6:	68f8      	ldr	r0, [r7, #12]
 8007ea8:	f000 f964 	bl	8008174 <I2C_WaitOnTXEFlagUntilTimeout>
 8007eac:	4603      	mov	r3, r0
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	d00d      	beq.n	8007ece <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007eb2:	68fb      	ldr	r3, [r7, #12]
 8007eb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007eb6:	2b04      	cmp	r3, #4
 8007eb8:	d107      	bne.n	8007eca <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007eba:	68fb      	ldr	r3, [r7, #12]
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	681a      	ldr	r2, [r3, #0]
 8007ec0:	68fb      	ldr	r3, [r7, #12]
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007ec8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8007eca:	2301      	movs	r3, #1
 8007ecc:	e076      	b.n	8007fbc <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8007ece:	88fb      	ldrh	r3, [r7, #6]
 8007ed0:	2b01      	cmp	r3, #1
 8007ed2:	d105      	bne.n	8007ee0 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007ed4:	893b      	ldrh	r3, [r7, #8]
 8007ed6:	b2da      	uxtb	r2, r3
 8007ed8:	68fb      	ldr	r3, [r7, #12]
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	611a      	str	r2, [r3, #16]
 8007ede:	e021      	b.n	8007f24 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8007ee0:	893b      	ldrh	r3, [r7, #8]
 8007ee2:	0a1b      	lsrs	r3, r3, #8
 8007ee4:	b29b      	uxth	r3, r3
 8007ee6:	b2da      	uxtb	r2, r3
 8007ee8:	68fb      	ldr	r3, [r7, #12]
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007eee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007ef0:	6a39      	ldr	r1, [r7, #32]
 8007ef2:	68f8      	ldr	r0, [r7, #12]
 8007ef4:	f000 f93e 	bl	8008174 <I2C_WaitOnTXEFlagUntilTimeout>
 8007ef8:	4603      	mov	r3, r0
 8007efa:	2b00      	cmp	r3, #0
 8007efc:	d00d      	beq.n	8007f1a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007efe:	68fb      	ldr	r3, [r7, #12]
 8007f00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f02:	2b04      	cmp	r3, #4
 8007f04:	d107      	bne.n	8007f16 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007f06:	68fb      	ldr	r3, [r7, #12]
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	681a      	ldr	r2, [r3, #0]
 8007f0c:	68fb      	ldr	r3, [r7, #12]
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007f14:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8007f16:	2301      	movs	r3, #1
 8007f18:	e050      	b.n	8007fbc <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007f1a:	893b      	ldrh	r3, [r7, #8]
 8007f1c:	b2da      	uxtb	r2, r3
 8007f1e:	68fb      	ldr	r3, [r7, #12]
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007f24:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007f26:	6a39      	ldr	r1, [r7, #32]
 8007f28:	68f8      	ldr	r0, [r7, #12]
 8007f2a:	f000 f923 	bl	8008174 <I2C_WaitOnTXEFlagUntilTimeout>
 8007f2e:	4603      	mov	r3, r0
 8007f30:	2b00      	cmp	r3, #0
 8007f32:	d00d      	beq.n	8007f50 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007f34:	68fb      	ldr	r3, [r7, #12]
 8007f36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f38:	2b04      	cmp	r3, #4
 8007f3a:	d107      	bne.n	8007f4c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007f3c:	68fb      	ldr	r3, [r7, #12]
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	681a      	ldr	r2, [r3, #0]
 8007f42:	68fb      	ldr	r3, [r7, #12]
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007f4a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8007f4c:	2301      	movs	r3, #1
 8007f4e:	e035      	b.n	8007fbc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007f50:	68fb      	ldr	r3, [r7, #12]
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	681a      	ldr	r2, [r3, #0]
 8007f56:	68fb      	ldr	r3, [r7, #12]
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007f5e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007f60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f62:	9300      	str	r3, [sp, #0]
 8007f64:	6a3b      	ldr	r3, [r7, #32]
 8007f66:	2200      	movs	r2, #0
 8007f68:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8007f6c:	68f8      	ldr	r0, [r7, #12]
 8007f6e:	f000 f82b 	bl	8007fc8 <I2C_WaitOnFlagUntilTimeout>
 8007f72:	4603      	mov	r3, r0
 8007f74:	2b00      	cmp	r3, #0
 8007f76:	d00d      	beq.n	8007f94 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007f78:	68fb      	ldr	r3, [r7, #12]
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007f82:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007f86:	d103      	bne.n	8007f90 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007f88:	68fb      	ldr	r3, [r7, #12]
 8007f8a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007f8e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8007f90:	2303      	movs	r3, #3
 8007f92:	e013      	b.n	8007fbc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8007f94:	897b      	ldrh	r3, [r7, #10]
 8007f96:	b2db      	uxtb	r3, r3
 8007f98:	f043 0301 	orr.w	r3, r3, #1
 8007f9c:	b2da      	uxtb	r2, r3
 8007f9e:	68fb      	ldr	r3, [r7, #12]
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007fa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fa6:	6a3a      	ldr	r2, [r7, #32]
 8007fa8:	4906      	ldr	r1, [pc, #24]	; (8007fc4 <I2C_RequestMemoryRead+0x1cc>)
 8007faa:	68f8      	ldr	r0, [r7, #12]
 8007fac:	f000 f863 	bl	8008076 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007fb0:	4603      	mov	r3, r0
 8007fb2:	2b00      	cmp	r3, #0
 8007fb4:	d001      	beq.n	8007fba <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8007fb6:	2301      	movs	r3, #1
 8007fb8:	e000      	b.n	8007fbc <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8007fba:	2300      	movs	r3, #0
}
 8007fbc:	4618      	mov	r0, r3
 8007fbe:	3718      	adds	r7, #24
 8007fc0:	46bd      	mov	sp, r7
 8007fc2:	bd80      	pop	{r7, pc}
 8007fc4:	00010002 	.word	0x00010002

08007fc8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8007fc8:	b580      	push	{r7, lr}
 8007fca:	b084      	sub	sp, #16
 8007fcc:	af00      	add	r7, sp, #0
 8007fce:	60f8      	str	r0, [r7, #12]
 8007fd0:	60b9      	str	r1, [r7, #8]
 8007fd2:	603b      	str	r3, [r7, #0]
 8007fd4:	4613      	mov	r3, r2
 8007fd6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007fd8:	e025      	b.n	8008026 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007fda:	683b      	ldr	r3, [r7, #0]
 8007fdc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007fe0:	d021      	beq.n	8008026 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007fe2:	f7fe fae3 	bl	80065ac <HAL_GetTick>
 8007fe6:	4602      	mov	r2, r0
 8007fe8:	69bb      	ldr	r3, [r7, #24]
 8007fea:	1ad3      	subs	r3, r2, r3
 8007fec:	683a      	ldr	r2, [r7, #0]
 8007fee:	429a      	cmp	r2, r3
 8007ff0:	d302      	bcc.n	8007ff8 <I2C_WaitOnFlagUntilTimeout+0x30>
 8007ff2:	683b      	ldr	r3, [r7, #0]
 8007ff4:	2b00      	cmp	r3, #0
 8007ff6:	d116      	bne.n	8008026 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8007ff8:	68fb      	ldr	r3, [r7, #12]
 8007ffa:	2200      	movs	r2, #0
 8007ffc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8007ffe:	68fb      	ldr	r3, [r7, #12]
 8008000:	2220      	movs	r2, #32
 8008002:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8008006:	68fb      	ldr	r3, [r7, #12]
 8008008:	2200      	movs	r2, #0
 800800a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800800e:	68fb      	ldr	r3, [r7, #12]
 8008010:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008012:	f043 0220 	orr.w	r2, r3, #32
 8008016:	68fb      	ldr	r3, [r7, #12]
 8008018:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800801a:	68fb      	ldr	r3, [r7, #12]
 800801c:	2200      	movs	r2, #0
 800801e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8008022:	2301      	movs	r3, #1
 8008024:	e023      	b.n	800806e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008026:	68bb      	ldr	r3, [r7, #8]
 8008028:	0c1b      	lsrs	r3, r3, #16
 800802a:	b2db      	uxtb	r3, r3
 800802c:	2b01      	cmp	r3, #1
 800802e:	d10d      	bne.n	800804c <I2C_WaitOnFlagUntilTimeout+0x84>
 8008030:	68fb      	ldr	r3, [r7, #12]
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	695b      	ldr	r3, [r3, #20]
 8008036:	43da      	mvns	r2, r3
 8008038:	68bb      	ldr	r3, [r7, #8]
 800803a:	4013      	ands	r3, r2
 800803c:	b29b      	uxth	r3, r3
 800803e:	2b00      	cmp	r3, #0
 8008040:	bf0c      	ite	eq
 8008042:	2301      	moveq	r3, #1
 8008044:	2300      	movne	r3, #0
 8008046:	b2db      	uxtb	r3, r3
 8008048:	461a      	mov	r2, r3
 800804a:	e00c      	b.n	8008066 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800804c:	68fb      	ldr	r3, [r7, #12]
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	699b      	ldr	r3, [r3, #24]
 8008052:	43da      	mvns	r2, r3
 8008054:	68bb      	ldr	r3, [r7, #8]
 8008056:	4013      	ands	r3, r2
 8008058:	b29b      	uxth	r3, r3
 800805a:	2b00      	cmp	r3, #0
 800805c:	bf0c      	ite	eq
 800805e:	2301      	moveq	r3, #1
 8008060:	2300      	movne	r3, #0
 8008062:	b2db      	uxtb	r3, r3
 8008064:	461a      	mov	r2, r3
 8008066:	79fb      	ldrb	r3, [r7, #7]
 8008068:	429a      	cmp	r2, r3
 800806a:	d0b6      	beq.n	8007fda <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800806c:	2300      	movs	r3, #0
}
 800806e:	4618      	mov	r0, r3
 8008070:	3710      	adds	r7, #16
 8008072:	46bd      	mov	sp, r7
 8008074:	bd80      	pop	{r7, pc}

08008076 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8008076:	b580      	push	{r7, lr}
 8008078:	b084      	sub	sp, #16
 800807a:	af00      	add	r7, sp, #0
 800807c:	60f8      	str	r0, [r7, #12]
 800807e:	60b9      	str	r1, [r7, #8]
 8008080:	607a      	str	r2, [r7, #4]
 8008082:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8008084:	e051      	b.n	800812a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8008086:	68fb      	ldr	r3, [r7, #12]
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	695b      	ldr	r3, [r3, #20]
 800808c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008090:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008094:	d123      	bne.n	80080de <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008096:	68fb      	ldr	r3, [r7, #12]
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	681a      	ldr	r2, [r3, #0]
 800809c:	68fb      	ldr	r3, [r7, #12]
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80080a4:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80080a6:	68fb      	ldr	r3, [r7, #12]
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80080ae:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80080b0:	68fb      	ldr	r3, [r7, #12]
 80080b2:	2200      	movs	r2, #0
 80080b4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80080b6:	68fb      	ldr	r3, [r7, #12]
 80080b8:	2220      	movs	r2, #32
 80080ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80080be:	68fb      	ldr	r3, [r7, #12]
 80080c0:	2200      	movs	r2, #0
 80080c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80080c6:	68fb      	ldr	r3, [r7, #12]
 80080c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080ca:	f043 0204 	orr.w	r2, r3, #4
 80080ce:	68fb      	ldr	r3, [r7, #12]
 80080d0:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80080d2:	68fb      	ldr	r3, [r7, #12]
 80080d4:	2200      	movs	r2, #0
 80080d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80080da:	2301      	movs	r3, #1
 80080dc:	e046      	b.n	800816c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80080e4:	d021      	beq.n	800812a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80080e6:	f7fe fa61 	bl	80065ac <HAL_GetTick>
 80080ea:	4602      	mov	r2, r0
 80080ec:	683b      	ldr	r3, [r7, #0]
 80080ee:	1ad3      	subs	r3, r2, r3
 80080f0:	687a      	ldr	r2, [r7, #4]
 80080f2:	429a      	cmp	r2, r3
 80080f4:	d302      	bcc.n	80080fc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	2b00      	cmp	r3, #0
 80080fa:	d116      	bne.n	800812a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80080fc:	68fb      	ldr	r3, [r7, #12]
 80080fe:	2200      	movs	r2, #0
 8008100:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8008102:	68fb      	ldr	r3, [r7, #12]
 8008104:	2220      	movs	r2, #32
 8008106:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800810a:	68fb      	ldr	r3, [r7, #12]
 800810c:	2200      	movs	r2, #0
 800810e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008112:	68fb      	ldr	r3, [r7, #12]
 8008114:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008116:	f043 0220 	orr.w	r2, r3, #32
 800811a:	68fb      	ldr	r3, [r7, #12]
 800811c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800811e:	68fb      	ldr	r3, [r7, #12]
 8008120:	2200      	movs	r2, #0
 8008122:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8008126:	2301      	movs	r3, #1
 8008128:	e020      	b.n	800816c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800812a:	68bb      	ldr	r3, [r7, #8]
 800812c:	0c1b      	lsrs	r3, r3, #16
 800812e:	b2db      	uxtb	r3, r3
 8008130:	2b01      	cmp	r3, #1
 8008132:	d10c      	bne.n	800814e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8008134:	68fb      	ldr	r3, [r7, #12]
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	695b      	ldr	r3, [r3, #20]
 800813a:	43da      	mvns	r2, r3
 800813c:	68bb      	ldr	r3, [r7, #8]
 800813e:	4013      	ands	r3, r2
 8008140:	b29b      	uxth	r3, r3
 8008142:	2b00      	cmp	r3, #0
 8008144:	bf14      	ite	ne
 8008146:	2301      	movne	r3, #1
 8008148:	2300      	moveq	r3, #0
 800814a:	b2db      	uxtb	r3, r3
 800814c:	e00b      	b.n	8008166 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800814e:	68fb      	ldr	r3, [r7, #12]
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	699b      	ldr	r3, [r3, #24]
 8008154:	43da      	mvns	r2, r3
 8008156:	68bb      	ldr	r3, [r7, #8]
 8008158:	4013      	ands	r3, r2
 800815a:	b29b      	uxth	r3, r3
 800815c:	2b00      	cmp	r3, #0
 800815e:	bf14      	ite	ne
 8008160:	2301      	movne	r3, #1
 8008162:	2300      	moveq	r3, #0
 8008164:	b2db      	uxtb	r3, r3
 8008166:	2b00      	cmp	r3, #0
 8008168:	d18d      	bne.n	8008086 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800816a:	2300      	movs	r3, #0
}
 800816c:	4618      	mov	r0, r3
 800816e:	3710      	adds	r7, #16
 8008170:	46bd      	mov	sp, r7
 8008172:	bd80      	pop	{r7, pc}

08008174 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008174:	b580      	push	{r7, lr}
 8008176:	b084      	sub	sp, #16
 8008178:	af00      	add	r7, sp, #0
 800817a:	60f8      	str	r0, [r7, #12]
 800817c:	60b9      	str	r1, [r7, #8]
 800817e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8008180:	e02d      	b.n	80081de <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8008182:	68f8      	ldr	r0, [r7, #12]
 8008184:	f000 f8ce 	bl	8008324 <I2C_IsAcknowledgeFailed>
 8008188:	4603      	mov	r3, r0
 800818a:	2b00      	cmp	r3, #0
 800818c:	d001      	beq.n	8008192 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800818e:	2301      	movs	r3, #1
 8008190:	e02d      	b.n	80081ee <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008192:	68bb      	ldr	r3, [r7, #8]
 8008194:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008198:	d021      	beq.n	80081de <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800819a:	f7fe fa07 	bl	80065ac <HAL_GetTick>
 800819e:	4602      	mov	r2, r0
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	1ad3      	subs	r3, r2, r3
 80081a4:	68ba      	ldr	r2, [r7, #8]
 80081a6:	429a      	cmp	r2, r3
 80081a8:	d302      	bcc.n	80081b0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80081aa:	68bb      	ldr	r3, [r7, #8]
 80081ac:	2b00      	cmp	r3, #0
 80081ae:	d116      	bne.n	80081de <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80081b0:	68fb      	ldr	r3, [r7, #12]
 80081b2:	2200      	movs	r2, #0
 80081b4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80081b6:	68fb      	ldr	r3, [r7, #12]
 80081b8:	2220      	movs	r2, #32
 80081ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80081be:	68fb      	ldr	r3, [r7, #12]
 80081c0:	2200      	movs	r2, #0
 80081c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80081c6:	68fb      	ldr	r3, [r7, #12]
 80081c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081ca:	f043 0220 	orr.w	r2, r3, #32
 80081ce:	68fb      	ldr	r3, [r7, #12]
 80081d0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80081d2:	68fb      	ldr	r3, [r7, #12]
 80081d4:	2200      	movs	r2, #0
 80081d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80081da:	2301      	movs	r3, #1
 80081dc:	e007      	b.n	80081ee <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80081de:	68fb      	ldr	r3, [r7, #12]
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	695b      	ldr	r3, [r3, #20]
 80081e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80081e8:	2b80      	cmp	r3, #128	; 0x80
 80081ea:	d1ca      	bne.n	8008182 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80081ec:	2300      	movs	r3, #0
}
 80081ee:	4618      	mov	r0, r3
 80081f0:	3710      	adds	r7, #16
 80081f2:	46bd      	mov	sp, r7
 80081f4:	bd80      	pop	{r7, pc}

080081f6 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80081f6:	b580      	push	{r7, lr}
 80081f8:	b084      	sub	sp, #16
 80081fa:	af00      	add	r7, sp, #0
 80081fc:	60f8      	str	r0, [r7, #12]
 80081fe:	60b9      	str	r1, [r7, #8]
 8008200:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8008202:	e02d      	b.n	8008260 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8008204:	68f8      	ldr	r0, [r7, #12]
 8008206:	f000 f88d 	bl	8008324 <I2C_IsAcknowledgeFailed>
 800820a:	4603      	mov	r3, r0
 800820c:	2b00      	cmp	r3, #0
 800820e:	d001      	beq.n	8008214 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8008210:	2301      	movs	r3, #1
 8008212:	e02d      	b.n	8008270 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008214:	68bb      	ldr	r3, [r7, #8]
 8008216:	f1b3 3fff 	cmp.w	r3, #4294967295
 800821a:	d021      	beq.n	8008260 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800821c:	f7fe f9c6 	bl	80065ac <HAL_GetTick>
 8008220:	4602      	mov	r2, r0
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	1ad3      	subs	r3, r2, r3
 8008226:	68ba      	ldr	r2, [r7, #8]
 8008228:	429a      	cmp	r2, r3
 800822a:	d302      	bcc.n	8008232 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800822c:	68bb      	ldr	r3, [r7, #8]
 800822e:	2b00      	cmp	r3, #0
 8008230:	d116      	bne.n	8008260 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8008232:	68fb      	ldr	r3, [r7, #12]
 8008234:	2200      	movs	r2, #0
 8008236:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8008238:	68fb      	ldr	r3, [r7, #12]
 800823a:	2220      	movs	r2, #32
 800823c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008240:	68fb      	ldr	r3, [r7, #12]
 8008242:	2200      	movs	r2, #0
 8008244:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008248:	68fb      	ldr	r3, [r7, #12]
 800824a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800824c:	f043 0220 	orr.w	r2, r3, #32
 8008250:	68fb      	ldr	r3, [r7, #12]
 8008252:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008254:	68fb      	ldr	r3, [r7, #12]
 8008256:	2200      	movs	r2, #0
 8008258:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800825c:	2301      	movs	r3, #1
 800825e:	e007      	b.n	8008270 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8008260:	68fb      	ldr	r3, [r7, #12]
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	695b      	ldr	r3, [r3, #20]
 8008266:	f003 0304 	and.w	r3, r3, #4
 800826a:	2b04      	cmp	r3, #4
 800826c:	d1ca      	bne.n	8008204 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800826e:	2300      	movs	r3, #0
}
 8008270:	4618      	mov	r0, r3
 8008272:	3710      	adds	r7, #16
 8008274:	46bd      	mov	sp, r7
 8008276:	bd80      	pop	{r7, pc}

08008278 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008278:	b580      	push	{r7, lr}
 800827a:	b084      	sub	sp, #16
 800827c:	af00      	add	r7, sp, #0
 800827e:	60f8      	str	r0, [r7, #12]
 8008280:	60b9      	str	r1, [r7, #8]
 8008282:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8008284:	e042      	b.n	800830c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8008286:	68fb      	ldr	r3, [r7, #12]
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	695b      	ldr	r3, [r3, #20]
 800828c:	f003 0310 	and.w	r3, r3, #16
 8008290:	2b10      	cmp	r3, #16
 8008292:	d119      	bne.n	80082c8 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008294:	68fb      	ldr	r3, [r7, #12]
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	f06f 0210 	mvn.w	r2, #16
 800829c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800829e:	68fb      	ldr	r3, [r7, #12]
 80082a0:	2200      	movs	r2, #0
 80082a2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80082a4:	68fb      	ldr	r3, [r7, #12]
 80082a6:	2220      	movs	r2, #32
 80082a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80082ac:	68fb      	ldr	r3, [r7, #12]
 80082ae:	2200      	movs	r2, #0
 80082b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80082b4:	68fb      	ldr	r3, [r7, #12]
 80082b6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80082b8:	68fb      	ldr	r3, [r7, #12]
 80082ba:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80082bc:	68fb      	ldr	r3, [r7, #12]
 80082be:	2200      	movs	r2, #0
 80082c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80082c4:	2301      	movs	r3, #1
 80082c6:	e029      	b.n	800831c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80082c8:	f7fe f970 	bl	80065ac <HAL_GetTick>
 80082cc:	4602      	mov	r2, r0
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	1ad3      	subs	r3, r2, r3
 80082d2:	68ba      	ldr	r2, [r7, #8]
 80082d4:	429a      	cmp	r2, r3
 80082d6:	d302      	bcc.n	80082de <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80082d8:	68bb      	ldr	r3, [r7, #8]
 80082da:	2b00      	cmp	r3, #0
 80082dc:	d116      	bne.n	800830c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80082de:	68fb      	ldr	r3, [r7, #12]
 80082e0:	2200      	movs	r2, #0
 80082e2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80082e4:	68fb      	ldr	r3, [r7, #12]
 80082e6:	2220      	movs	r2, #32
 80082e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80082ec:	68fb      	ldr	r3, [r7, #12]
 80082ee:	2200      	movs	r2, #0
 80082f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80082f4:	68fb      	ldr	r3, [r7, #12]
 80082f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082f8:	f043 0220 	orr.w	r2, r3, #32
 80082fc:	68fb      	ldr	r3, [r7, #12]
 80082fe:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008300:	68fb      	ldr	r3, [r7, #12]
 8008302:	2200      	movs	r2, #0
 8008304:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8008308:	2301      	movs	r3, #1
 800830a:	e007      	b.n	800831c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800830c:	68fb      	ldr	r3, [r7, #12]
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	695b      	ldr	r3, [r3, #20]
 8008312:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008316:	2b40      	cmp	r3, #64	; 0x40
 8008318:	d1b5      	bne.n	8008286 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800831a:	2300      	movs	r3, #0
}
 800831c:	4618      	mov	r0, r3
 800831e:	3710      	adds	r7, #16
 8008320:	46bd      	mov	sp, r7
 8008322:	bd80      	pop	{r7, pc}

08008324 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8008324:	b480      	push	{r7}
 8008326:	b083      	sub	sp, #12
 8008328:	af00      	add	r7, sp, #0
 800832a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	695b      	ldr	r3, [r3, #20]
 8008332:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008336:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800833a:	d11b      	bne.n	8008374 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8008344:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	2200      	movs	r2, #0
 800834a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	2220      	movs	r2, #32
 8008350:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	2200      	movs	r2, #0
 8008358:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008360:	f043 0204 	orr.w	r2, r3, #4
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	2200      	movs	r2, #0
 800836c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8008370:	2301      	movs	r3, #1
 8008372:	e000      	b.n	8008376 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8008374:	2300      	movs	r3, #0
}
 8008376:	4618      	mov	r0, r3
 8008378:	370c      	adds	r7, #12
 800837a:	46bd      	mov	sp, r7
 800837c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008380:	4770      	bx	lr

08008382 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8008382:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008384:	b08f      	sub	sp, #60	; 0x3c
 8008386:	af0a      	add	r7, sp, #40	; 0x28
 8008388:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	2b00      	cmp	r3, #0
 800838e:	d101      	bne.n	8008394 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8008390:	2301      	movs	r3, #1
 8008392:	e116      	b.n	80085c2 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 80083a0:	b2db      	uxtb	r3, r3
 80083a2:	2b00      	cmp	r3, #0
 80083a4:	d106      	bne.n	80083b4 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	2200      	movs	r2, #0
 80083aa:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80083ae:	6878      	ldr	r0, [r7, #4]
 80083b0:	f006 fecc 	bl	800f14c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	2203      	movs	r2, #3
 80083b8:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80083bc:	68bb      	ldr	r3, [r7, #8]
 80083be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80083c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80083c4:	2b00      	cmp	r3, #0
 80083c6:	d102      	bne.n	80083ce <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	2200      	movs	r2, #0
 80083cc:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	4618      	mov	r0, r3
 80083d4:	f003 f97d 	bl	800b6d2 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	603b      	str	r3, [r7, #0]
 80083de:	687e      	ldr	r6, [r7, #4]
 80083e0:	466d      	mov	r5, sp
 80083e2:	f106 0410 	add.w	r4, r6, #16
 80083e6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80083e8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80083ea:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80083ec:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80083ee:	e894 0003 	ldmia.w	r4, {r0, r1}
 80083f2:	e885 0003 	stmia.w	r5, {r0, r1}
 80083f6:	1d33      	adds	r3, r6, #4
 80083f8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80083fa:	6838      	ldr	r0, [r7, #0]
 80083fc:	f003 f854 	bl	800b4a8 <USB_CoreInit>
 8008400:	4603      	mov	r3, r0
 8008402:	2b00      	cmp	r3, #0
 8008404:	d005      	beq.n	8008412 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	2202      	movs	r2, #2
 800840a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800840e:	2301      	movs	r3, #1
 8008410:	e0d7      	b.n	80085c2 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	2100      	movs	r1, #0
 8008418:	4618      	mov	r0, r3
 800841a:	f003 f96b 	bl	800b6f4 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800841e:	2300      	movs	r3, #0
 8008420:	73fb      	strb	r3, [r7, #15]
 8008422:	e04a      	b.n	80084ba <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8008424:	7bfa      	ldrb	r2, [r7, #15]
 8008426:	6879      	ldr	r1, [r7, #4]
 8008428:	4613      	mov	r3, r2
 800842a:	00db      	lsls	r3, r3, #3
 800842c:	4413      	add	r3, r2
 800842e:	009b      	lsls	r3, r3, #2
 8008430:	440b      	add	r3, r1
 8008432:	333d      	adds	r3, #61	; 0x3d
 8008434:	2201      	movs	r2, #1
 8008436:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8008438:	7bfa      	ldrb	r2, [r7, #15]
 800843a:	6879      	ldr	r1, [r7, #4]
 800843c:	4613      	mov	r3, r2
 800843e:	00db      	lsls	r3, r3, #3
 8008440:	4413      	add	r3, r2
 8008442:	009b      	lsls	r3, r3, #2
 8008444:	440b      	add	r3, r1
 8008446:	333c      	adds	r3, #60	; 0x3c
 8008448:	7bfa      	ldrb	r2, [r7, #15]
 800844a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800844c:	7bfa      	ldrb	r2, [r7, #15]
 800844e:	7bfb      	ldrb	r3, [r7, #15]
 8008450:	b298      	uxth	r0, r3
 8008452:	6879      	ldr	r1, [r7, #4]
 8008454:	4613      	mov	r3, r2
 8008456:	00db      	lsls	r3, r3, #3
 8008458:	4413      	add	r3, r2
 800845a:	009b      	lsls	r3, r3, #2
 800845c:	440b      	add	r3, r1
 800845e:	3344      	adds	r3, #68	; 0x44
 8008460:	4602      	mov	r2, r0
 8008462:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8008464:	7bfa      	ldrb	r2, [r7, #15]
 8008466:	6879      	ldr	r1, [r7, #4]
 8008468:	4613      	mov	r3, r2
 800846a:	00db      	lsls	r3, r3, #3
 800846c:	4413      	add	r3, r2
 800846e:	009b      	lsls	r3, r3, #2
 8008470:	440b      	add	r3, r1
 8008472:	3340      	adds	r3, #64	; 0x40
 8008474:	2200      	movs	r2, #0
 8008476:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8008478:	7bfa      	ldrb	r2, [r7, #15]
 800847a:	6879      	ldr	r1, [r7, #4]
 800847c:	4613      	mov	r3, r2
 800847e:	00db      	lsls	r3, r3, #3
 8008480:	4413      	add	r3, r2
 8008482:	009b      	lsls	r3, r3, #2
 8008484:	440b      	add	r3, r1
 8008486:	3348      	adds	r3, #72	; 0x48
 8008488:	2200      	movs	r2, #0
 800848a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800848c:	7bfa      	ldrb	r2, [r7, #15]
 800848e:	6879      	ldr	r1, [r7, #4]
 8008490:	4613      	mov	r3, r2
 8008492:	00db      	lsls	r3, r3, #3
 8008494:	4413      	add	r3, r2
 8008496:	009b      	lsls	r3, r3, #2
 8008498:	440b      	add	r3, r1
 800849a:	334c      	adds	r3, #76	; 0x4c
 800849c:	2200      	movs	r2, #0
 800849e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80084a0:	7bfa      	ldrb	r2, [r7, #15]
 80084a2:	6879      	ldr	r1, [r7, #4]
 80084a4:	4613      	mov	r3, r2
 80084a6:	00db      	lsls	r3, r3, #3
 80084a8:	4413      	add	r3, r2
 80084aa:	009b      	lsls	r3, r3, #2
 80084ac:	440b      	add	r3, r1
 80084ae:	3354      	adds	r3, #84	; 0x54
 80084b0:	2200      	movs	r2, #0
 80084b2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80084b4:	7bfb      	ldrb	r3, [r7, #15]
 80084b6:	3301      	adds	r3, #1
 80084b8:	73fb      	strb	r3, [r7, #15]
 80084ba:	7bfa      	ldrb	r2, [r7, #15]
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	685b      	ldr	r3, [r3, #4]
 80084c0:	429a      	cmp	r2, r3
 80084c2:	d3af      	bcc.n	8008424 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80084c4:	2300      	movs	r3, #0
 80084c6:	73fb      	strb	r3, [r7, #15]
 80084c8:	e044      	b.n	8008554 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80084ca:	7bfa      	ldrb	r2, [r7, #15]
 80084cc:	6879      	ldr	r1, [r7, #4]
 80084ce:	4613      	mov	r3, r2
 80084d0:	00db      	lsls	r3, r3, #3
 80084d2:	4413      	add	r3, r2
 80084d4:	009b      	lsls	r3, r3, #2
 80084d6:	440b      	add	r3, r1
 80084d8:	f203 237d 	addw	r3, r3, #637	; 0x27d
 80084dc:	2200      	movs	r2, #0
 80084de:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80084e0:	7bfa      	ldrb	r2, [r7, #15]
 80084e2:	6879      	ldr	r1, [r7, #4]
 80084e4:	4613      	mov	r3, r2
 80084e6:	00db      	lsls	r3, r3, #3
 80084e8:	4413      	add	r3, r2
 80084ea:	009b      	lsls	r3, r3, #2
 80084ec:	440b      	add	r3, r1
 80084ee:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80084f2:	7bfa      	ldrb	r2, [r7, #15]
 80084f4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80084f6:	7bfa      	ldrb	r2, [r7, #15]
 80084f8:	6879      	ldr	r1, [r7, #4]
 80084fa:	4613      	mov	r3, r2
 80084fc:	00db      	lsls	r3, r3, #3
 80084fe:	4413      	add	r3, r2
 8008500:	009b      	lsls	r3, r3, #2
 8008502:	440b      	add	r3, r1
 8008504:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8008508:	2200      	movs	r2, #0
 800850a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800850c:	7bfa      	ldrb	r2, [r7, #15]
 800850e:	6879      	ldr	r1, [r7, #4]
 8008510:	4613      	mov	r3, r2
 8008512:	00db      	lsls	r3, r3, #3
 8008514:	4413      	add	r3, r2
 8008516:	009b      	lsls	r3, r3, #2
 8008518:	440b      	add	r3, r1
 800851a:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800851e:	2200      	movs	r2, #0
 8008520:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8008522:	7bfa      	ldrb	r2, [r7, #15]
 8008524:	6879      	ldr	r1, [r7, #4]
 8008526:	4613      	mov	r3, r2
 8008528:	00db      	lsls	r3, r3, #3
 800852a:	4413      	add	r3, r2
 800852c:	009b      	lsls	r3, r3, #2
 800852e:	440b      	add	r3, r1
 8008530:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8008534:	2200      	movs	r2, #0
 8008536:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8008538:	7bfa      	ldrb	r2, [r7, #15]
 800853a:	6879      	ldr	r1, [r7, #4]
 800853c:	4613      	mov	r3, r2
 800853e:	00db      	lsls	r3, r3, #3
 8008540:	4413      	add	r3, r2
 8008542:	009b      	lsls	r3, r3, #2
 8008544:	440b      	add	r3, r1
 8008546:	f503 7325 	add.w	r3, r3, #660	; 0x294
 800854a:	2200      	movs	r2, #0
 800854c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800854e:	7bfb      	ldrb	r3, [r7, #15]
 8008550:	3301      	adds	r3, #1
 8008552:	73fb      	strb	r3, [r7, #15]
 8008554:	7bfa      	ldrb	r2, [r7, #15]
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	685b      	ldr	r3, [r3, #4]
 800855a:	429a      	cmp	r2, r3
 800855c:	d3b5      	bcc.n	80084ca <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	603b      	str	r3, [r7, #0]
 8008564:	687e      	ldr	r6, [r7, #4]
 8008566:	466d      	mov	r5, sp
 8008568:	f106 0410 	add.w	r4, r6, #16
 800856c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800856e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8008570:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8008572:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8008574:	e894 0003 	ldmia.w	r4, {r0, r1}
 8008578:	e885 0003 	stmia.w	r5, {r0, r1}
 800857c:	1d33      	adds	r3, r6, #4
 800857e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008580:	6838      	ldr	r0, [r7, #0]
 8008582:	f003 f903 	bl	800b78c <USB_DevInit>
 8008586:	4603      	mov	r3, r0
 8008588:	2b00      	cmp	r3, #0
 800858a:	d005      	beq.n	8008598 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	2202      	movs	r2, #2
 8008590:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8008594:	2301      	movs	r3, #1
 8008596:	e014      	b.n	80085c2 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	2200      	movs	r2, #0
 800859c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	2201      	movs	r2, #1
 80085a4:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085ac:	2b01      	cmp	r3, #1
 80085ae:	d102      	bne.n	80085b6 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80085b0:	6878      	ldr	r0, [r7, #4]
 80085b2:	f001 f98b 	bl	80098cc <HAL_PCDEx_ActivateLPM>
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	4618      	mov	r0, r3
 80085bc:	f004 fa45 	bl	800ca4a <USB_DevDisconnect>

  return HAL_OK;
 80085c0:	2300      	movs	r3, #0
}
 80085c2:	4618      	mov	r0, r3
 80085c4:	3714      	adds	r7, #20
 80085c6:	46bd      	mov	sp, r7
 80085c8:	bdf0      	pop	{r4, r5, r6, r7, pc}

080085ca <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80085ca:	b580      	push	{r7, lr}
 80085cc:	b084      	sub	sp, #16
 80085ce:	af00      	add	r7, sp, #0
 80085d0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	681b      	ldr	r3, [r3, #0]
 80085d6:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80085de:	2b01      	cmp	r3, #1
 80085e0:	d101      	bne.n	80085e6 <HAL_PCD_Start+0x1c>
 80085e2:	2302      	movs	r3, #2
 80085e4:	e020      	b.n	8008628 <HAL_PCD_Start+0x5e>
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	2201      	movs	r2, #1
 80085ea:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80085f2:	2b01      	cmp	r3, #1
 80085f4:	d109      	bne.n	800860a <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80085fa:	2b01      	cmp	r3, #1
 80085fc:	d005      	beq.n	800860a <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80085fe:	68fb      	ldr	r3, [r7, #12]
 8008600:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008602:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8008606:	68fb      	ldr	r3, [r7, #12]
 8008608:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	681b      	ldr	r3, [r3, #0]
 800860e:	4618      	mov	r0, r3
 8008610:	f003 f84e 	bl	800b6b0 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	4618      	mov	r0, r3
 800861a:	f004 f9f5 	bl	800ca08 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	2200      	movs	r2, #0
 8008622:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8008626:	2300      	movs	r3, #0
}
 8008628:	4618      	mov	r0, r3
 800862a:	3710      	adds	r7, #16
 800862c:	46bd      	mov	sp, r7
 800862e:	bd80      	pop	{r7, pc}

08008630 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8008630:	b590      	push	{r4, r7, lr}
 8008632:	b08d      	sub	sp, #52	; 0x34
 8008634:	af00      	add	r7, sp, #0
 8008636:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800863e:	6a3b      	ldr	r3, [r7, #32]
 8008640:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	681b      	ldr	r3, [r3, #0]
 8008646:	4618      	mov	r0, r3
 8008648:	f004 fab3 	bl	800cbb2 <USB_GetMode>
 800864c:	4603      	mov	r3, r0
 800864e:	2b00      	cmp	r3, #0
 8008650:	f040 84b7 	bne.w	8008fc2 <HAL_PCD_IRQHandler+0x992>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	4618      	mov	r0, r3
 800865a:	f004 fa17 	bl	800ca8c <USB_ReadInterrupts>
 800865e:	4603      	mov	r3, r0
 8008660:	2b00      	cmp	r3, #0
 8008662:	f000 84ad 	beq.w	8008fc0 <HAL_PCD_IRQHandler+0x990>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8008666:	69fb      	ldr	r3, [r7, #28]
 8008668:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800866c:	689b      	ldr	r3, [r3, #8]
 800866e:	0a1b      	lsrs	r3, r3, #8
 8008670:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	681b      	ldr	r3, [r3, #0]
 800867e:	4618      	mov	r0, r3
 8008680:	f004 fa04 	bl	800ca8c <USB_ReadInterrupts>
 8008684:	4603      	mov	r3, r0
 8008686:	f003 0302 	and.w	r3, r3, #2
 800868a:	2b02      	cmp	r3, #2
 800868c:	d107      	bne.n	800869e <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	681b      	ldr	r3, [r3, #0]
 8008692:	695a      	ldr	r2, [r3, #20]
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	f002 0202 	and.w	r2, r2, #2
 800869c:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	681b      	ldr	r3, [r3, #0]
 80086a2:	4618      	mov	r0, r3
 80086a4:	f004 f9f2 	bl	800ca8c <USB_ReadInterrupts>
 80086a8:	4603      	mov	r3, r0
 80086aa:	f003 0310 	and.w	r3, r3, #16
 80086ae:	2b10      	cmp	r3, #16
 80086b0:	d161      	bne.n	8008776 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	681b      	ldr	r3, [r3, #0]
 80086b6:	699a      	ldr	r2, [r3, #24]
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	f022 0210 	bic.w	r2, r2, #16
 80086c0:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80086c2:	6a3b      	ldr	r3, [r7, #32]
 80086c4:	6a1b      	ldr	r3, [r3, #32]
 80086c6:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80086c8:	69bb      	ldr	r3, [r7, #24]
 80086ca:	f003 020f 	and.w	r2, r3, #15
 80086ce:	4613      	mov	r3, r2
 80086d0:	00db      	lsls	r3, r3, #3
 80086d2:	4413      	add	r3, r2
 80086d4:	009b      	lsls	r3, r3, #2
 80086d6:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80086da:	687a      	ldr	r2, [r7, #4]
 80086dc:	4413      	add	r3, r2
 80086de:	3304      	adds	r3, #4
 80086e0:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80086e2:	69bb      	ldr	r3, [r7, #24]
 80086e4:	0c5b      	lsrs	r3, r3, #17
 80086e6:	f003 030f 	and.w	r3, r3, #15
 80086ea:	2b02      	cmp	r3, #2
 80086ec:	d124      	bne.n	8008738 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80086ee:	69ba      	ldr	r2, [r7, #24]
 80086f0:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80086f4:	4013      	ands	r3, r2
 80086f6:	2b00      	cmp	r3, #0
 80086f8:	d035      	beq.n	8008766 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80086fa:	697b      	ldr	r3, [r7, #20]
 80086fc:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80086fe:	69bb      	ldr	r3, [r7, #24]
 8008700:	091b      	lsrs	r3, r3, #4
 8008702:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8008704:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008708:	b29b      	uxth	r3, r3
 800870a:	461a      	mov	r2, r3
 800870c:	6a38      	ldr	r0, [r7, #32]
 800870e:	f004 f829 	bl	800c764 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8008712:	697b      	ldr	r3, [r7, #20]
 8008714:	691a      	ldr	r2, [r3, #16]
 8008716:	69bb      	ldr	r3, [r7, #24]
 8008718:	091b      	lsrs	r3, r3, #4
 800871a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800871e:	441a      	add	r2, r3
 8008720:	697b      	ldr	r3, [r7, #20]
 8008722:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8008724:	697b      	ldr	r3, [r7, #20]
 8008726:	6a1a      	ldr	r2, [r3, #32]
 8008728:	69bb      	ldr	r3, [r7, #24]
 800872a:	091b      	lsrs	r3, r3, #4
 800872c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008730:	441a      	add	r2, r3
 8008732:	697b      	ldr	r3, [r7, #20]
 8008734:	621a      	str	r2, [r3, #32]
 8008736:	e016      	b.n	8008766 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8008738:	69bb      	ldr	r3, [r7, #24]
 800873a:	0c5b      	lsrs	r3, r3, #17
 800873c:	f003 030f 	and.w	r3, r3, #15
 8008740:	2b06      	cmp	r3, #6
 8008742:	d110      	bne.n	8008766 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800874a:	2208      	movs	r2, #8
 800874c:	4619      	mov	r1, r3
 800874e:	6a38      	ldr	r0, [r7, #32]
 8008750:	f004 f808 	bl	800c764 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8008754:	697b      	ldr	r3, [r7, #20]
 8008756:	6a1a      	ldr	r2, [r3, #32]
 8008758:	69bb      	ldr	r3, [r7, #24]
 800875a:	091b      	lsrs	r3, r3, #4
 800875c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008760:	441a      	add	r2, r3
 8008762:	697b      	ldr	r3, [r7, #20]
 8008764:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	699a      	ldr	r2, [r3, #24]
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	f042 0210 	orr.w	r2, r2, #16
 8008774:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	681b      	ldr	r3, [r3, #0]
 800877a:	4618      	mov	r0, r3
 800877c:	f004 f986 	bl	800ca8c <USB_ReadInterrupts>
 8008780:	4603      	mov	r3, r0
 8008782:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008786:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800878a:	f040 80a7 	bne.w	80088dc <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 800878e:	2300      	movs	r3, #0
 8008790:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	681b      	ldr	r3, [r3, #0]
 8008796:	4618      	mov	r0, r3
 8008798:	f004 f98b 	bl	800cab2 <USB_ReadDevAllOutEpInterrupt>
 800879c:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 800879e:	e099      	b.n	80088d4 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80087a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087a2:	f003 0301 	and.w	r3, r3, #1
 80087a6:	2b00      	cmp	r3, #0
 80087a8:	f000 808e 	beq.w	80088c8 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80087b2:	b2d2      	uxtb	r2, r2
 80087b4:	4611      	mov	r1, r2
 80087b6:	4618      	mov	r0, r3
 80087b8:	f004 f9af 	bl	800cb1a <USB_ReadDevOutEPInterrupt>
 80087bc:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80087be:	693b      	ldr	r3, [r7, #16]
 80087c0:	f003 0301 	and.w	r3, r3, #1
 80087c4:	2b00      	cmp	r3, #0
 80087c6:	d00c      	beq.n	80087e2 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80087c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087ca:	015a      	lsls	r2, r3, #5
 80087cc:	69fb      	ldr	r3, [r7, #28]
 80087ce:	4413      	add	r3, r2
 80087d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80087d4:	461a      	mov	r2, r3
 80087d6:	2301      	movs	r3, #1
 80087d8:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80087da:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80087dc:	6878      	ldr	r0, [r7, #4]
 80087de:	f000 feef 	bl	80095c0 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80087e2:	693b      	ldr	r3, [r7, #16]
 80087e4:	f003 0308 	and.w	r3, r3, #8
 80087e8:	2b00      	cmp	r3, #0
 80087ea:	d00c      	beq.n	8008806 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80087ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087ee:	015a      	lsls	r2, r3, #5
 80087f0:	69fb      	ldr	r3, [r7, #28]
 80087f2:	4413      	add	r3, r2
 80087f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80087f8:	461a      	mov	r2, r3
 80087fa:	2308      	movs	r3, #8
 80087fc:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80087fe:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008800:	6878      	ldr	r0, [r7, #4]
 8008802:	f000 ffc5 	bl	8009790 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8008806:	693b      	ldr	r3, [r7, #16]
 8008808:	f003 0310 	and.w	r3, r3, #16
 800880c:	2b00      	cmp	r3, #0
 800880e:	d008      	beq.n	8008822 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8008810:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008812:	015a      	lsls	r2, r3, #5
 8008814:	69fb      	ldr	r3, [r7, #28]
 8008816:	4413      	add	r3, r2
 8008818:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800881c:	461a      	mov	r2, r3
 800881e:	2310      	movs	r3, #16
 8008820:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8008822:	693b      	ldr	r3, [r7, #16]
 8008824:	f003 0302 	and.w	r3, r3, #2
 8008828:	2b00      	cmp	r3, #0
 800882a:	d030      	beq.n	800888e <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 800882c:	6a3b      	ldr	r3, [r7, #32]
 800882e:	695b      	ldr	r3, [r3, #20]
 8008830:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008834:	2b80      	cmp	r3, #128	; 0x80
 8008836:	d109      	bne.n	800884c <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8008838:	69fb      	ldr	r3, [r7, #28]
 800883a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800883e:	685b      	ldr	r3, [r3, #4]
 8008840:	69fa      	ldr	r2, [r7, #28]
 8008842:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008846:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800884a:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 800884c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800884e:	4613      	mov	r3, r2
 8008850:	00db      	lsls	r3, r3, #3
 8008852:	4413      	add	r3, r2
 8008854:	009b      	lsls	r3, r3, #2
 8008856:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800885a:	687a      	ldr	r2, [r7, #4]
 800885c:	4413      	add	r3, r2
 800885e:	3304      	adds	r3, #4
 8008860:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8008862:	697b      	ldr	r3, [r7, #20]
 8008864:	78db      	ldrb	r3, [r3, #3]
 8008866:	2b01      	cmp	r3, #1
 8008868:	d108      	bne.n	800887c <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 800886a:	697b      	ldr	r3, [r7, #20]
 800886c:	2200      	movs	r2, #0
 800886e:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8008870:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008872:	b2db      	uxtb	r3, r3
 8008874:	4619      	mov	r1, r3
 8008876:	6878      	ldr	r0, [r7, #4]
 8008878:	f006 fd84 	bl	800f384 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 800887c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800887e:	015a      	lsls	r2, r3, #5
 8008880:	69fb      	ldr	r3, [r7, #28]
 8008882:	4413      	add	r3, r2
 8008884:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008888:	461a      	mov	r2, r3
 800888a:	2302      	movs	r3, #2
 800888c:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800888e:	693b      	ldr	r3, [r7, #16]
 8008890:	f003 0320 	and.w	r3, r3, #32
 8008894:	2b00      	cmp	r3, #0
 8008896:	d008      	beq.n	80088aa <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8008898:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800889a:	015a      	lsls	r2, r3, #5
 800889c:	69fb      	ldr	r3, [r7, #28]
 800889e:	4413      	add	r3, r2
 80088a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80088a4:	461a      	mov	r2, r3
 80088a6:	2320      	movs	r3, #32
 80088a8:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80088aa:	693b      	ldr	r3, [r7, #16]
 80088ac:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80088b0:	2b00      	cmp	r3, #0
 80088b2:	d009      	beq.n	80088c8 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80088b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088b6:	015a      	lsls	r2, r3, #5
 80088b8:	69fb      	ldr	r3, [r7, #28]
 80088ba:	4413      	add	r3, r2
 80088bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80088c0:	461a      	mov	r2, r3
 80088c2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80088c6:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80088c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088ca:	3301      	adds	r3, #1
 80088cc:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80088ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088d0:	085b      	lsrs	r3, r3, #1
 80088d2:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80088d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088d6:	2b00      	cmp	r3, #0
 80088d8:	f47f af62 	bne.w	80087a0 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	4618      	mov	r0, r3
 80088e2:	f004 f8d3 	bl	800ca8c <USB_ReadInterrupts>
 80088e6:	4603      	mov	r3, r0
 80088e8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80088ec:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80088f0:	f040 80db 	bne.w	8008aaa <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	681b      	ldr	r3, [r3, #0]
 80088f8:	4618      	mov	r0, r3
 80088fa:	f004 f8f4 	bl	800cae6 <USB_ReadDevAllInEpInterrupt>
 80088fe:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8008900:	2300      	movs	r3, #0
 8008902:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8008904:	e0cd      	b.n	8008aa2 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8008906:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008908:	f003 0301 	and.w	r3, r3, #1
 800890c:	2b00      	cmp	r3, #0
 800890e:	f000 80c2 	beq.w	8008a96 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	681b      	ldr	r3, [r3, #0]
 8008916:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008918:	b2d2      	uxtb	r2, r2
 800891a:	4611      	mov	r1, r2
 800891c:	4618      	mov	r0, r3
 800891e:	f004 f91a 	bl	800cb56 <USB_ReadDevInEPInterrupt>
 8008922:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8008924:	693b      	ldr	r3, [r7, #16]
 8008926:	f003 0301 	and.w	r3, r3, #1
 800892a:	2b00      	cmp	r3, #0
 800892c:	d057      	beq.n	80089de <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800892e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008930:	f003 030f 	and.w	r3, r3, #15
 8008934:	2201      	movs	r2, #1
 8008936:	fa02 f303 	lsl.w	r3, r2, r3
 800893a:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800893c:	69fb      	ldr	r3, [r7, #28]
 800893e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008942:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008944:	68fb      	ldr	r3, [r7, #12]
 8008946:	43db      	mvns	r3, r3
 8008948:	69f9      	ldr	r1, [r7, #28]
 800894a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800894e:	4013      	ands	r3, r2
 8008950:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8008952:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008954:	015a      	lsls	r2, r3, #5
 8008956:	69fb      	ldr	r3, [r7, #28]
 8008958:	4413      	add	r3, r2
 800895a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800895e:	461a      	mov	r2, r3
 8008960:	2301      	movs	r3, #1
 8008962:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	691b      	ldr	r3, [r3, #16]
 8008968:	2b01      	cmp	r3, #1
 800896a:	d132      	bne.n	80089d2 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800896c:	6879      	ldr	r1, [r7, #4]
 800896e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008970:	4613      	mov	r3, r2
 8008972:	00db      	lsls	r3, r3, #3
 8008974:	4413      	add	r3, r2
 8008976:	009b      	lsls	r3, r3, #2
 8008978:	440b      	add	r3, r1
 800897a:	334c      	adds	r3, #76	; 0x4c
 800897c:	6819      	ldr	r1, [r3, #0]
 800897e:	6878      	ldr	r0, [r7, #4]
 8008980:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008982:	4613      	mov	r3, r2
 8008984:	00db      	lsls	r3, r3, #3
 8008986:	4413      	add	r3, r2
 8008988:	009b      	lsls	r3, r3, #2
 800898a:	4403      	add	r3, r0
 800898c:	3348      	adds	r3, #72	; 0x48
 800898e:	681b      	ldr	r3, [r3, #0]
 8008990:	4419      	add	r1, r3
 8008992:	6878      	ldr	r0, [r7, #4]
 8008994:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008996:	4613      	mov	r3, r2
 8008998:	00db      	lsls	r3, r3, #3
 800899a:	4413      	add	r3, r2
 800899c:	009b      	lsls	r3, r3, #2
 800899e:	4403      	add	r3, r0
 80089a0:	334c      	adds	r3, #76	; 0x4c
 80089a2:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80089a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089a6:	2b00      	cmp	r3, #0
 80089a8:	d113      	bne.n	80089d2 <HAL_PCD_IRQHandler+0x3a2>
 80089aa:	6879      	ldr	r1, [r7, #4]
 80089ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80089ae:	4613      	mov	r3, r2
 80089b0:	00db      	lsls	r3, r3, #3
 80089b2:	4413      	add	r3, r2
 80089b4:	009b      	lsls	r3, r3, #2
 80089b6:	440b      	add	r3, r1
 80089b8:	3354      	adds	r3, #84	; 0x54
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	2b00      	cmp	r3, #0
 80089be:	d108      	bne.n	80089d2 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	6818      	ldr	r0, [r3, #0]
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80089ca:	461a      	mov	r2, r3
 80089cc:	2101      	movs	r1, #1
 80089ce:	f004 f921 	bl	800cc14 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80089d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089d4:	b2db      	uxtb	r3, r3
 80089d6:	4619      	mov	r1, r3
 80089d8:	6878      	ldr	r0, [r7, #4]
 80089da:	f006 fc4e 	bl	800f27a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80089de:	693b      	ldr	r3, [r7, #16]
 80089e0:	f003 0308 	and.w	r3, r3, #8
 80089e4:	2b00      	cmp	r3, #0
 80089e6:	d008      	beq.n	80089fa <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80089e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089ea:	015a      	lsls	r2, r3, #5
 80089ec:	69fb      	ldr	r3, [r7, #28]
 80089ee:	4413      	add	r3, r2
 80089f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80089f4:	461a      	mov	r2, r3
 80089f6:	2308      	movs	r3, #8
 80089f8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80089fa:	693b      	ldr	r3, [r7, #16]
 80089fc:	f003 0310 	and.w	r3, r3, #16
 8008a00:	2b00      	cmp	r3, #0
 8008a02:	d008      	beq.n	8008a16 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8008a04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a06:	015a      	lsls	r2, r3, #5
 8008a08:	69fb      	ldr	r3, [r7, #28]
 8008a0a:	4413      	add	r3, r2
 8008a0c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008a10:	461a      	mov	r2, r3
 8008a12:	2310      	movs	r3, #16
 8008a14:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8008a16:	693b      	ldr	r3, [r7, #16]
 8008a18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008a1c:	2b00      	cmp	r3, #0
 8008a1e:	d008      	beq.n	8008a32 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8008a20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a22:	015a      	lsls	r2, r3, #5
 8008a24:	69fb      	ldr	r3, [r7, #28]
 8008a26:	4413      	add	r3, r2
 8008a28:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008a2c:	461a      	mov	r2, r3
 8008a2e:	2340      	movs	r3, #64	; 0x40
 8008a30:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8008a32:	693b      	ldr	r3, [r7, #16]
 8008a34:	f003 0302 	and.w	r3, r3, #2
 8008a38:	2b00      	cmp	r3, #0
 8008a3a:	d023      	beq.n	8008a84 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8008a3c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008a3e:	6a38      	ldr	r0, [r7, #32]
 8008a40:	f003 f802 	bl	800ba48 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8008a44:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008a46:	4613      	mov	r3, r2
 8008a48:	00db      	lsls	r3, r3, #3
 8008a4a:	4413      	add	r3, r2
 8008a4c:	009b      	lsls	r3, r3, #2
 8008a4e:	3338      	adds	r3, #56	; 0x38
 8008a50:	687a      	ldr	r2, [r7, #4]
 8008a52:	4413      	add	r3, r2
 8008a54:	3304      	adds	r3, #4
 8008a56:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8008a58:	697b      	ldr	r3, [r7, #20]
 8008a5a:	78db      	ldrb	r3, [r3, #3]
 8008a5c:	2b01      	cmp	r3, #1
 8008a5e:	d108      	bne.n	8008a72 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8008a60:	697b      	ldr	r3, [r7, #20]
 8008a62:	2200      	movs	r2, #0
 8008a64:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8008a66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a68:	b2db      	uxtb	r3, r3
 8008a6a:	4619      	mov	r1, r3
 8008a6c:	6878      	ldr	r0, [r7, #4]
 8008a6e:	f006 fc9b 	bl	800f3a8 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8008a72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a74:	015a      	lsls	r2, r3, #5
 8008a76:	69fb      	ldr	r3, [r7, #28]
 8008a78:	4413      	add	r3, r2
 8008a7a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008a7e:	461a      	mov	r2, r3
 8008a80:	2302      	movs	r3, #2
 8008a82:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8008a84:	693b      	ldr	r3, [r7, #16]
 8008a86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008a8a:	2b00      	cmp	r3, #0
 8008a8c:	d003      	beq.n	8008a96 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8008a8e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008a90:	6878      	ldr	r0, [r7, #4]
 8008a92:	f000 fd08 	bl	80094a6 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8008a96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a98:	3301      	adds	r3, #1
 8008a9a:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8008a9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a9e:	085b      	lsrs	r3, r3, #1
 8008aa0:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8008aa2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008aa4:	2b00      	cmp	r3, #0
 8008aa6:	f47f af2e 	bne.w	8008906 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	681b      	ldr	r3, [r3, #0]
 8008aae:	4618      	mov	r0, r3
 8008ab0:	f003 ffec 	bl	800ca8c <USB_ReadInterrupts>
 8008ab4:	4603      	mov	r3, r0
 8008ab6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008aba:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008abe:	d122      	bne.n	8008b06 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8008ac0:	69fb      	ldr	r3, [r7, #28]
 8008ac2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008ac6:	685b      	ldr	r3, [r3, #4]
 8008ac8:	69fa      	ldr	r2, [r7, #28]
 8008aca:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008ace:	f023 0301 	bic.w	r3, r3, #1
 8008ad2:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8008ada:	2b01      	cmp	r3, #1
 8008adc:	d108      	bne.n	8008af0 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	2200      	movs	r2, #0
 8008ae2:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8008ae6:	2100      	movs	r1, #0
 8008ae8:	6878      	ldr	r0, [r7, #4]
 8008aea:	f006 fe15 	bl	800f718 <HAL_PCDEx_LPM_Callback>
 8008aee:	e002      	b.n	8008af6 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8008af0:	6878      	ldr	r0, [r7, #4]
 8008af2:	f006 fc39 	bl	800f368 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	681b      	ldr	r3, [r3, #0]
 8008afa:	695a      	ldr	r2, [r3, #20]
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	681b      	ldr	r3, [r3, #0]
 8008b00:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8008b04:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	681b      	ldr	r3, [r3, #0]
 8008b0a:	4618      	mov	r0, r3
 8008b0c:	f003 ffbe 	bl	800ca8c <USB_ReadInterrupts>
 8008b10:	4603      	mov	r3, r0
 8008b12:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008b16:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008b1a:	d112      	bne.n	8008b42 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8008b1c:	69fb      	ldr	r3, [r7, #28]
 8008b1e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008b22:	689b      	ldr	r3, [r3, #8]
 8008b24:	f003 0301 	and.w	r3, r3, #1
 8008b28:	2b01      	cmp	r3, #1
 8008b2a:	d102      	bne.n	8008b32 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8008b2c:	6878      	ldr	r0, [r7, #4]
 8008b2e:	f006 fbf5 	bl	800f31c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	681b      	ldr	r3, [r3, #0]
 8008b36:	695a      	ldr	r2, [r3, #20]
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	681b      	ldr	r3, [r3, #0]
 8008b3c:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8008b40:	615a      	str	r2, [r3, #20]
    }
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	681b      	ldr	r3, [r3, #0]
 8008b46:	4618      	mov	r0, r3
 8008b48:	f003 ffa0 	bl	800ca8c <USB_ReadInterrupts>
 8008b4c:	4603      	mov	r3, r0
 8008b4e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008b52:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008b56:	d121      	bne.n	8008b9c <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	681b      	ldr	r3, [r3, #0]
 8008b5c:	695a      	ldr	r2, [r3, #20]
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	681b      	ldr	r3, [r3, #0]
 8008b62:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8008b66:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8008b6e:	2b00      	cmp	r3, #0
 8008b70:	d111      	bne.n	8008b96 <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	2201      	movs	r2, #1
 8008b76:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	681b      	ldr	r3, [r3, #0]
 8008b7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008b80:	089b      	lsrs	r3, r3, #2
 8008b82:	f003 020f 	and.w	r2, r3, #15
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8008b8c:	2101      	movs	r1, #1
 8008b8e:	6878      	ldr	r0, [r7, #4]
 8008b90:	f006 fdc2 	bl	800f718 <HAL_PCDEx_LPM_Callback>
 8008b94:	e002      	b.n	8008b9c <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8008b96:	6878      	ldr	r0, [r7, #4]
 8008b98:	f006 fbc0 	bl	800f31c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	681b      	ldr	r3, [r3, #0]
 8008ba0:	4618      	mov	r0, r3
 8008ba2:	f003 ff73 	bl	800ca8c <USB_ReadInterrupts>
 8008ba6:	4603      	mov	r3, r0
 8008ba8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008bac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008bb0:	f040 80b7 	bne.w	8008d22 <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8008bb4:	69fb      	ldr	r3, [r7, #28]
 8008bb6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008bba:	685b      	ldr	r3, [r3, #4]
 8008bbc:	69fa      	ldr	r2, [r7, #28]
 8008bbe:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008bc2:	f023 0301 	bic.w	r3, r3, #1
 8008bc6:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	681b      	ldr	r3, [r3, #0]
 8008bcc:	2110      	movs	r1, #16
 8008bce:	4618      	mov	r0, r3
 8008bd0:	f002 ff3a 	bl	800ba48 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008bd4:	2300      	movs	r3, #0
 8008bd6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008bd8:	e046      	b.n	8008c68 <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8008bda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008bdc:	015a      	lsls	r2, r3, #5
 8008bde:	69fb      	ldr	r3, [r7, #28]
 8008be0:	4413      	add	r3, r2
 8008be2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008be6:	461a      	mov	r2, r3
 8008be8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008bec:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8008bee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008bf0:	015a      	lsls	r2, r3, #5
 8008bf2:	69fb      	ldr	r3, [r7, #28]
 8008bf4:	4413      	add	r3, r2
 8008bf6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008bfa:	681b      	ldr	r3, [r3, #0]
 8008bfc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008bfe:	0151      	lsls	r1, r2, #5
 8008c00:	69fa      	ldr	r2, [r7, #28]
 8008c02:	440a      	add	r2, r1
 8008c04:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008c08:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008c0c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8008c0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c10:	015a      	lsls	r2, r3, #5
 8008c12:	69fb      	ldr	r3, [r7, #28]
 8008c14:	4413      	add	r3, r2
 8008c16:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008c1a:	461a      	mov	r2, r3
 8008c1c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008c20:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8008c22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c24:	015a      	lsls	r2, r3, #5
 8008c26:	69fb      	ldr	r3, [r7, #28]
 8008c28:	4413      	add	r3, r2
 8008c2a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008c2e:	681b      	ldr	r3, [r3, #0]
 8008c30:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008c32:	0151      	lsls	r1, r2, #5
 8008c34:	69fa      	ldr	r2, [r7, #28]
 8008c36:	440a      	add	r2, r1
 8008c38:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008c3c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008c40:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8008c42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c44:	015a      	lsls	r2, r3, #5
 8008c46:	69fb      	ldr	r3, [r7, #28]
 8008c48:	4413      	add	r3, r2
 8008c4a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008c4e:	681b      	ldr	r3, [r3, #0]
 8008c50:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008c52:	0151      	lsls	r1, r2, #5
 8008c54:	69fa      	ldr	r2, [r7, #28]
 8008c56:	440a      	add	r2, r1
 8008c58:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008c5c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8008c60:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008c62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c64:	3301      	adds	r3, #1
 8008c66:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	685b      	ldr	r3, [r3, #4]
 8008c6c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008c6e:	429a      	cmp	r2, r3
 8008c70:	d3b3      	bcc.n	8008bda <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8008c72:	69fb      	ldr	r3, [r7, #28]
 8008c74:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008c78:	69db      	ldr	r3, [r3, #28]
 8008c7a:	69fa      	ldr	r2, [r7, #28]
 8008c7c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008c80:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8008c84:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c8a:	2b00      	cmp	r3, #0
 8008c8c:	d016      	beq.n	8008cbc <HAL_PCD_IRQHandler+0x68c>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8008c8e:	69fb      	ldr	r3, [r7, #28]
 8008c90:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008c94:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008c98:	69fa      	ldr	r2, [r7, #28]
 8008c9a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008c9e:	f043 030b 	orr.w	r3, r3, #11
 8008ca2:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8008ca6:	69fb      	ldr	r3, [r7, #28]
 8008ca8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008cac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008cae:	69fa      	ldr	r2, [r7, #28]
 8008cb0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008cb4:	f043 030b 	orr.w	r3, r3, #11
 8008cb8:	6453      	str	r3, [r2, #68]	; 0x44
 8008cba:	e015      	b.n	8008ce8 <HAL_PCD_IRQHandler+0x6b8>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8008cbc:	69fb      	ldr	r3, [r7, #28]
 8008cbe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008cc2:	695b      	ldr	r3, [r3, #20]
 8008cc4:	69fa      	ldr	r2, [r7, #28]
 8008cc6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008cca:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8008cce:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8008cd2:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8008cd4:	69fb      	ldr	r3, [r7, #28]
 8008cd6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008cda:	691b      	ldr	r3, [r3, #16]
 8008cdc:	69fa      	ldr	r2, [r7, #28]
 8008cde:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008ce2:	f043 030b 	orr.w	r3, r3, #11
 8008ce6:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8008ce8:	69fb      	ldr	r3, [r7, #28]
 8008cea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008cee:	681b      	ldr	r3, [r3, #0]
 8008cf0:	69fa      	ldr	r2, [r7, #28]
 8008cf2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008cf6:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8008cfa:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	6818      	ldr	r0, [r3, #0]
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	691b      	ldr	r3, [r3, #16]
 8008d04:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8008d0c:	461a      	mov	r2, r3
 8008d0e:	f003 ff81 	bl	800cc14 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	681b      	ldr	r3, [r3, #0]
 8008d16:	695a      	ldr	r2, [r3, #20]
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	681b      	ldr	r3, [r3, #0]
 8008d1c:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8008d20:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	681b      	ldr	r3, [r3, #0]
 8008d26:	4618      	mov	r0, r3
 8008d28:	f003 feb0 	bl	800ca8c <USB_ReadInterrupts>
 8008d2c:	4603      	mov	r3, r0
 8008d2e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008d32:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008d36:	d124      	bne.n	8008d82 <HAL_PCD_IRQHandler+0x752>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	681b      	ldr	r3, [r3, #0]
 8008d3c:	4618      	mov	r0, r3
 8008d3e:	f003 ff46 	bl	800cbce <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	681b      	ldr	r3, [r3, #0]
 8008d46:	4618      	mov	r0, r3
 8008d48:	f002 fefb 	bl	800bb42 <USB_GetDevSpeed>
 8008d4c:	4603      	mov	r3, r0
 8008d4e:	461a      	mov	r2, r3
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	681c      	ldr	r4, [r3, #0]
 8008d58:	f000 fec2 	bl	8009ae0 <HAL_RCC_GetHCLKFreq>
 8008d5c:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8008d62:	b2db      	uxtb	r3, r3
 8008d64:	461a      	mov	r2, r3
 8008d66:	4620      	mov	r0, r4
 8008d68:	f002 fc00 	bl	800b56c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8008d6c:	6878      	ldr	r0, [r7, #4]
 8008d6e:	f006 faac 	bl	800f2ca <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	681b      	ldr	r3, [r3, #0]
 8008d76:	695a      	ldr	r2, [r3, #20]
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	681b      	ldr	r3, [r3, #0]
 8008d7c:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8008d80:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	681b      	ldr	r3, [r3, #0]
 8008d86:	4618      	mov	r0, r3
 8008d88:	f003 fe80 	bl	800ca8c <USB_ReadInterrupts>
 8008d8c:	4603      	mov	r3, r0
 8008d8e:	f003 0308 	and.w	r3, r3, #8
 8008d92:	2b08      	cmp	r3, #8
 8008d94:	d10a      	bne.n	8008dac <HAL_PCD_IRQHandler+0x77c>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8008d96:	6878      	ldr	r0, [r7, #4]
 8008d98:	f006 fa89 	bl	800f2ae <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	681b      	ldr	r3, [r3, #0]
 8008da0:	695a      	ldr	r2, [r3, #20]
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	681b      	ldr	r3, [r3, #0]
 8008da6:	f002 0208 	and.w	r2, r2, #8
 8008daa:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	681b      	ldr	r3, [r3, #0]
 8008db0:	4618      	mov	r0, r3
 8008db2:	f003 fe6b 	bl	800ca8c <USB_ReadInterrupts>
 8008db6:	4603      	mov	r3, r0
 8008db8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008dbc:	2b80      	cmp	r3, #128	; 0x80
 8008dbe:	d122      	bne.n	8008e06 <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8008dc0:	6a3b      	ldr	r3, [r7, #32]
 8008dc2:	699b      	ldr	r3, [r3, #24]
 8008dc4:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008dc8:	6a3b      	ldr	r3, [r7, #32]
 8008dca:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8008dcc:	2301      	movs	r3, #1
 8008dce:	627b      	str	r3, [r7, #36]	; 0x24
 8008dd0:	e014      	b.n	8008dfc <HAL_PCD_IRQHandler+0x7cc>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8008dd2:	6879      	ldr	r1, [r7, #4]
 8008dd4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008dd6:	4613      	mov	r3, r2
 8008dd8:	00db      	lsls	r3, r3, #3
 8008dda:	4413      	add	r3, r2
 8008ddc:	009b      	lsls	r3, r3, #2
 8008dde:	440b      	add	r3, r1
 8008de0:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8008de4:	781b      	ldrb	r3, [r3, #0]
 8008de6:	2b01      	cmp	r3, #1
 8008de8:	d105      	bne.n	8008df6 <HAL_PCD_IRQHandler+0x7c6>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8008dea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008dec:	b2db      	uxtb	r3, r3
 8008dee:	4619      	mov	r1, r3
 8008df0:	6878      	ldr	r0, [r7, #4]
 8008df2:	f000 fb27 	bl	8009444 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8008df6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008df8:	3301      	adds	r3, #1
 8008dfa:	627b      	str	r3, [r7, #36]	; 0x24
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	685b      	ldr	r3, [r3, #4]
 8008e00:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008e02:	429a      	cmp	r2, r3
 8008e04:	d3e5      	bcc.n	8008dd2 <HAL_PCD_IRQHandler+0x7a2>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	681b      	ldr	r3, [r3, #0]
 8008e0a:	4618      	mov	r0, r3
 8008e0c:	f003 fe3e 	bl	800ca8c <USB_ReadInterrupts>
 8008e10:	4603      	mov	r3, r0
 8008e12:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008e16:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008e1a:	d13b      	bne.n	8008e94 <HAL_PCD_IRQHandler+0x864>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8008e1c:	2301      	movs	r3, #1
 8008e1e:	627b      	str	r3, [r7, #36]	; 0x24
 8008e20:	e02b      	b.n	8008e7a <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8008e22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e24:	015a      	lsls	r2, r3, #5
 8008e26:	69fb      	ldr	r3, [r7, #28]
 8008e28:	4413      	add	r3, r2
 8008e2a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008e2e:	681b      	ldr	r3, [r3, #0]
 8008e30:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8008e32:	6879      	ldr	r1, [r7, #4]
 8008e34:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008e36:	4613      	mov	r3, r2
 8008e38:	00db      	lsls	r3, r3, #3
 8008e3a:	4413      	add	r3, r2
 8008e3c:	009b      	lsls	r3, r3, #2
 8008e3e:	440b      	add	r3, r1
 8008e40:	3340      	adds	r3, #64	; 0x40
 8008e42:	781b      	ldrb	r3, [r3, #0]
 8008e44:	2b01      	cmp	r3, #1
 8008e46:	d115      	bne.n	8008e74 <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8008e48:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8008e4a:	2b00      	cmp	r3, #0
 8008e4c:	da12      	bge.n	8008e74 <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8008e4e:	6879      	ldr	r1, [r7, #4]
 8008e50:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008e52:	4613      	mov	r3, r2
 8008e54:	00db      	lsls	r3, r3, #3
 8008e56:	4413      	add	r3, r2
 8008e58:	009b      	lsls	r3, r3, #2
 8008e5a:	440b      	add	r3, r1
 8008e5c:	333f      	adds	r3, #63	; 0x3f
 8008e5e:	2201      	movs	r2, #1
 8008e60:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8008e62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e64:	b2db      	uxtb	r3, r3
 8008e66:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8008e6a:	b2db      	uxtb	r3, r3
 8008e6c:	4619      	mov	r1, r3
 8008e6e:	6878      	ldr	r0, [r7, #4]
 8008e70:	f000 fae8 	bl	8009444 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8008e74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e76:	3301      	adds	r3, #1
 8008e78:	627b      	str	r3, [r7, #36]	; 0x24
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	685b      	ldr	r3, [r3, #4]
 8008e7e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008e80:	429a      	cmp	r2, r3
 8008e82:	d3ce      	bcc.n	8008e22 <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	681b      	ldr	r3, [r3, #0]
 8008e88:	695a      	ldr	r2, [r3, #20]
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	681b      	ldr	r3, [r3, #0]
 8008e8e:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8008e92:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	681b      	ldr	r3, [r3, #0]
 8008e98:	4618      	mov	r0, r3
 8008e9a:	f003 fdf7 	bl	800ca8c <USB_ReadInterrupts>
 8008e9e:	4603      	mov	r3, r0
 8008ea0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008ea4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008ea8:	d155      	bne.n	8008f56 <HAL_PCD_IRQHandler+0x926>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8008eaa:	2301      	movs	r3, #1
 8008eac:	627b      	str	r3, [r7, #36]	; 0x24
 8008eae:	e045      	b.n	8008f3c <HAL_PCD_IRQHandler+0x90c>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8008eb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008eb2:	015a      	lsls	r2, r3, #5
 8008eb4:	69fb      	ldr	r3, [r7, #28]
 8008eb6:	4413      	add	r3, r2
 8008eb8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008ebc:	681b      	ldr	r3, [r3, #0]
 8008ebe:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8008ec0:	6879      	ldr	r1, [r7, #4]
 8008ec2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008ec4:	4613      	mov	r3, r2
 8008ec6:	00db      	lsls	r3, r3, #3
 8008ec8:	4413      	add	r3, r2
 8008eca:	009b      	lsls	r3, r3, #2
 8008ecc:	440b      	add	r3, r1
 8008ece:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8008ed2:	781b      	ldrb	r3, [r3, #0]
 8008ed4:	2b01      	cmp	r3, #1
 8008ed6:	d12e      	bne.n	8008f36 <HAL_PCD_IRQHandler+0x906>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8008ed8:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8008eda:	2b00      	cmp	r3, #0
 8008edc:	da2b      	bge.n	8008f36 <HAL_PCD_IRQHandler+0x906>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8008ede:	69bb      	ldr	r3, [r7, #24]
 8008ee0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8008eea:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8008eee:	429a      	cmp	r2, r3
 8008ef0:	d121      	bne.n	8008f36 <HAL_PCD_IRQHandler+0x906>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8008ef2:	6879      	ldr	r1, [r7, #4]
 8008ef4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008ef6:	4613      	mov	r3, r2
 8008ef8:	00db      	lsls	r3, r3, #3
 8008efa:	4413      	add	r3, r2
 8008efc:	009b      	lsls	r3, r3, #2
 8008efe:	440b      	add	r3, r1
 8008f00:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8008f04:	2201      	movs	r2, #1
 8008f06:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8008f08:	6a3b      	ldr	r3, [r7, #32]
 8008f0a:	699b      	ldr	r3, [r3, #24]
 8008f0c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8008f10:	6a3b      	ldr	r3, [r7, #32]
 8008f12:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8008f14:	6a3b      	ldr	r3, [r7, #32]
 8008f16:	695b      	ldr	r3, [r3, #20]
 8008f18:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008f1c:	2b00      	cmp	r3, #0
 8008f1e:	d10a      	bne.n	8008f36 <HAL_PCD_IRQHandler+0x906>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8008f20:	69fb      	ldr	r3, [r7, #28]
 8008f22:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008f26:	685b      	ldr	r3, [r3, #4]
 8008f28:	69fa      	ldr	r2, [r7, #28]
 8008f2a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008f2e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8008f32:	6053      	str	r3, [r2, #4]
            break;
 8008f34:	e007      	b.n	8008f46 <HAL_PCD_IRQHandler+0x916>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8008f36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f38:	3301      	adds	r3, #1
 8008f3a:	627b      	str	r3, [r7, #36]	; 0x24
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	685b      	ldr	r3, [r3, #4]
 8008f40:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008f42:	429a      	cmp	r2, r3
 8008f44:	d3b4      	bcc.n	8008eb0 <HAL_PCD_IRQHandler+0x880>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	681b      	ldr	r3, [r3, #0]
 8008f4a:	695a      	ldr	r2, [r3, #20]
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	681b      	ldr	r3, [r3, #0]
 8008f50:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8008f54:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	681b      	ldr	r3, [r3, #0]
 8008f5a:	4618      	mov	r0, r3
 8008f5c:	f003 fd96 	bl	800ca8c <USB_ReadInterrupts>
 8008f60:	4603      	mov	r3, r0
 8008f62:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8008f66:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008f6a:	d10a      	bne.n	8008f82 <HAL_PCD_IRQHandler+0x952>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8008f6c:	6878      	ldr	r0, [r7, #4]
 8008f6e:	f006 fa2d 	bl	800f3cc <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	681b      	ldr	r3, [r3, #0]
 8008f76:	695a      	ldr	r2, [r3, #20]
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	681b      	ldr	r3, [r3, #0]
 8008f7c:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8008f80:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	681b      	ldr	r3, [r3, #0]
 8008f86:	4618      	mov	r0, r3
 8008f88:	f003 fd80 	bl	800ca8c <USB_ReadInterrupts>
 8008f8c:	4603      	mov	r3, r0
 8008f8e:	f003 0304 	and.w	r3, r3, #4
 8008f92:	2b04      	cmp	r3, #4
 8008f94:	d115      	bne.n	8008fc2 <HAL_PCD_IRQHandler+0x992>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	681b      	ldr	r3, [r3, #0]
 8008f9a:	685b      	ldr	r3, [r3, #4]
 8008f9c:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8008f9e:	69bb      	ldr	r3, [r7, #24]
 8008fa0:	f003 0304 	and.w	r3, r3, #4
 8008fa4:	2b00      	cmp	r3, #0
 8008fa6:	d002      	beq.n	8008fae <HAL_PCD_IRQHandler+0x97e>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8008fa8:	6878      	ldr	r0, [r7, #4]
 8008faa:	f006 fa1d 	bl	800f3e8 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	681b      	ldr	r3, [r3, #0]
 8008fb2:	6859      	ldr	r1, [r3, #4]
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	681b      	ldr	r3, [r3, #0]
 8008fb8:	69ba      	ldr	r2, [r7, #24]
 8008fba:	430a      	orrs	r2, r1
 8008fbc:	605a      	str	r2, [r3, #4]
 8008fbe:	e000      	b.n	8008fc2 <HAL_PCD_IRQHandler+0x992>
      return;
 8008fc0:	bf00      	nop
    }
  }
}
 8008fc2:	3734      	adds	r7, #52	; 0x34
 8008fc4:	46bd      	mov	sp, r7
 8008fc6:	bd90      	pop	{r4, r7, pc}

08008fc8 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8008fc8:	b580      	push	{r7, lr}
 8008fca:	b082      	sub	sp, #8
 8008fcc:	af00      	add	r7, sp, #0
 8008fce:	6078      	str	r0, [r7, #4]
 8008fd0:	460b      	mov	r3, r1
 8008fd2:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8008fda:	2b01      	cmp	r3, #1
 8008fdc:	d101      	bne.n	8008fe2 <HAL_PCD_SetAddress+0x1a>
 8008fde:	2302      	movs	r3, #2
 8008fe0:	e013      	b.n	800900a <HAL_PCD_SetAddress+0x42>
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	2201      	movs	r2, #1
 8008fe6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	78fa      	ldrb	r2, [r7, #3]
 8008fee:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	681b      	ldr	r3, [r3, #0]
 8008ff6:	78fa      	ldrb	r2, [r7, #3]
 8008ff8:	4611      	mov	r1, r2
 8008ffa:	4618      	mov	r0, r3
 8008ffc:	f003 fcde 	bl	800c9bc <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	2200      	movs	r2, #0
 8009004:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8009008:	2300      	movs	r3, #0
}
 800900a:	4618      	mov	r0, r3
 800900c:	3708      	adds	r7, #8
 800900e:	46bd      	mov	sp, r7
 8009010:	bd80      	pop	{r7, pc}

08009012 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8009012:	b580      	push	{r7, lr}
 8009014:	b084      	sub	sp, #16
 8009016:	af00      	add	r7, sp, #0
 8009018:	6078      	str	r0, [r7, #4]
 800901a:	4608      	mov	r0, r1
 800901c:	4611      	mov	r1, r2
 800901e:	461a      	mov	r2, r3
 8009020:	4603      	mov	r3, r0
 8009022:	70fb      	strb	r3, [r7, #3]
 8009024:	460b      	mov	r3, r1
 8009026:	803b      	strh	r3, [r7, #0]
 8009028:	4613      	mov	r3, r2
 800902a:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800902c:	2300      	movs	r3, #0
 800902e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8009030:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009034:	2b00      	cmp	r3, #0
 8009036:	da0f      	bge.n	8009058 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8009038:	78fb      	ldrb	r3, [r7, #3]
 800903a:	f003 020f 	and.w	r2, r3, #15
 800903e:	4613      	mov	r3, r2
 8009040:	00db      	lsls	r3, r3, #3
 8009042:	4413      	add	r3, r2
 8009044:	009b      	lsls	r3, r3, #2
 8009046:	3338      	adds	r3, #56	; 0x38
 8009048:	687a      	ldr	r2, [r7, #4]
 800904a:	4413      	add	r3, r2
 800904c:	3304      	adds	r3, #4
 800904e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8009050:	68fb      	ldr	r3, [r7, #12]
 8009052:	2201      	movs	r2, #1
 8009054:	705a      	strb	r2, [r3, #1]
 8009056:	e00f      	b.n	8009078 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8009058:	78fb      	ldrb	r3, [r7, #3]
 800905a:	f003 020f 	and.w	r2, r3, #15
 800905e:	4613      	mov	r3, r2
 8009060:	00db      	lsls	r3, r3, #3
 8009062:	4413      	add	r3, r2
 8009064:	009b      	lsls	r3, r3, #2
 8009066:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800906a:	687a      	ldr	r2, [r7, #4]
 800906c:	4413      	add	r3, r2
 800906e:	3304      	adds	r3, #4
 8009070:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8009072:	68fb      	ldr	r3, [r7, #12]
 8009074:	2200      	movs	r2, #0
 8009076:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8009078:	78fb      	ldrb	r3, [r7, #3]
 800907a:	f003 030f 	and.w	r3, r3, #15
 800907e:	b2da      	uxtb	r2, r3
 8009080:	68fb      	ldr	r3, [r7, #12]
 8009082:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8009084:	883a      	ldrh	r2, [r7, #0]
 8009086:	68fb      	ldr	r3, [r7, #12]
 8009088:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 800908a:	68fb      	ldr	r3, [r7, #12]
 800908c:	78ba      	ldrb	r2, [r7, #2]
 800908e:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8009090:	68fb      	ldr	r3, [r7, #12]
 8009092:	785b      	ldrb	r3, [r3, #1]
 8009094:	2b00      	cmp	r3, #0
 8009096:	d004      	beq.n	80090a2 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8009098:	68fb      	ldr	r3, [r7, #12]
 800909a:	781b      	ldrb	r3, [r3, #0]
 800909c:	b29a      	uxth	r2, r3
 800909e:	68fb      	ldr	r3, [r7, #12]
 80090a0:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80090a2:	78bb      	ldrb	r3, [r7, #2]
 80090a4:	2b02      	cmp	r3, #2
 80090a6:	d102      	bne.n	80090ae <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80090a8:	68fb      	ldr	r3, [r7, #12]
 80090aa:	2200      	movs	r2, #0
 80090ac:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80090b4:	2b01      	cmp	r3, #1
 80090b6:	d101      	bne.n	80090bc <HAL_PCD_EP_Open+0xaa>
 80090b8:	2302      	movs	r3, #2
 80090ba:	e00e      	b.n	80090da <HAL_PCD_EP_Open+0xc8>
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	2201      	movs	r2, #1
 80090c0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	681b      	ldr	r3, [r3, #0]
 80090c8:	68f9      	ldr	r1, [r7, #12]
 80090ca:	4618      	mov	r0, r3
 80090cc:	f002 fd5e 	bl	800bb8c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	2200      	movs	r2, #0
 80090d4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 80090d8:	7afb      	ldrb	r3, [r7, #11]
}
 80090da:	4618      	mov	r0, r3
 80090dc:	3710      	adds	r7, #16
 80090de:	46bd      	mov	sp, r7
 80090e0:	bd80      	pop	{r7, pc}

080090e2 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80090e2:	b580      	push	{r7, lr}
 80090e4:	b084      	sub	sp, #16
 80090e6:	af00      	add	r7, sp, #0
 80090e8:	6078      	str	r0, [r7, #4]
 80090ea:	460b      	mov	r3, r1
 80090ec:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80090ee:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80090f2:	2b00      	cmp	r3, #0
 80090f4:	da0f      	bge.n	8009116 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80090f6:	78fb      	ldrb	r3, [r7, #3]
 80090f8:	f003 020f 	and.w	r2, r3, #15
 80090fc:	4613      	mov	r3, r2
 80090fe:	00db      	lsls	r3, r3, #3
 8009100:	4413      	add	r3, r2
 8009102:	009b      	lsls	r3, r3, #2
 8009104:	3338      	adds	r3, #56	; 0x38
 8009106:	687a      	ldr	r2, [r7, #4]
 8009108:	4413      	add	r3, r2
 800910a:	3304      	adds	r3, #4
 800910c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800910e:	68fb      	ldr	r3, [r7, #12]
 8009110:	2201      	movs	r2, #1
 8009112:	705a      	strb	r2, [r3, #1]
 8009114:	e00f      	b.n	8009136 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8009116:	78fb      	ldrb	r3, [r7, #3]
 8009118:	f003 020f 	and.w	r2, r3, #15
 800911c:	4613      	mov	r3, r2
 800911e:	00db      	lsls	r3, r3, #3
 8009120:	4413      	add	r3, r2
 8009122:	009b      	lsls	r3, r3, #2
 8009124:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8009128:	687a      	ldr	r2, [r7, #4]
 800912a:	4413      	add	r3, r2
 800912c:	3304      	adds	r3, #4
 800912e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8009130:	68fb      	ldr	r3, [r7, #12]
 8009132:	2200      	movs	r2, #0
 8009134:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8009136:	78fb      	ldrb	r3, [r7, #3]
 8009138:	f003 030f 	and.w	r3, r3, #15
 800913c:	b2da      	uxtb	r2, r3
 800913e:	68fb      	ldr	r3, [r7, #12]
 8009140:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8009148:	2b01      	cmp	r3, #1
 800914a:	d101      	bne.n	8009150 <HAL_PCD_EP_Close+0x6e>
 800914c:	2302      	movs	r3, #2
 800914e:	e00e      	b.n	800916e <HAL_PCD_EP_Close+0x8c>
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	2201      	movs	r2, #1
 8009154:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	681b      	ldr	r3, [r3, #0]
 800915c:	68f9      	ldr	r1, [r7, #12]
 800915e:	4618      	mov	r0, r3
 8009160:	f002 fd9c 	bl	800bc9c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	2200      	movs	r2, #0
 8009168:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 800916c:	2300      	movs	r3, #0
}
 800916e:	4618      	mov	r0, r3
 8009170:	3710      	adds	r7, #16
 8009172:	46bd      	mov	sp, r7
 8009174:	bd80      	pop	{r7, pc}

08009176 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8009176:	b580      	push	{r7, lr}
 8009178:	b086      	sub	sp, #24
 800917a:	af00      	add	r7, sp, #0
 800917c:	60f8      	str	r0, [r7, #12]
 800917e:	607a      	str	r2, [r7, #4]
 8009180:	603b      	str	r3, [r7, #0]
 8009182:	460b      	mov	r3, r1
 8009184:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8009186:	7afb      	ldrb	r3, [r7, #11]
 8009188:	f003 020f 	and.w	r2, r3, #15
 800918c:	4613      	mov	r3, r2
 800918e:	00db      	lsls	r3, r3, #3
 8009190:	4413      	add	r3, r2
 8009192:	009b      	lsls	r3, r3, #2
 8009194:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8009198:	68fa      	ldr	r2, [r7, #12]
 800919a:	4413      	add	r3, r2
 800919c:	3304      	adds	r3, #4
 800919e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80091a0:	697b      	ldr	r3, [r7, #20]
 80091a2:	687a      	ldr	r2, [r7, #4]
 80091a4:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 80091a6:	697b      	ldr	r3, [r7, #20]
 80091a8:	683a      	ldr	r2, [r7, #0]
 80091aa:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80091ac:	697b      	ldr	r3, [r7, #20]
 80091ae:	2200      	movs	r2, #0
 80091b0:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 80091b2:	697b      	ldr	r3, [r7, #20]
 80091b4:	2200      	movs	r2, #0
 80091b6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80091b8:	7afb      	ldrb	r3, [r7, #11]
 80091ba:	f003 030f 	and.w	r3, r3, #15
 80091be:	b2da      	uxtb	r2, r3
 80091c0:	697b      	ldr	r3, [r7, #20]
 80091c2:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80091c4:	68fb      	ldr	r3, [r7, #12]
 80091c6:	691b      	ldr	r3, [r3, #16]
 80091c8:	2b01      	cmp	r3, #1
 80091ca:	d102      	bne.n	80091d2 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80091cc:	687a      	ldr	r2, [r7, #4]
 80091ce:	697b      	ldr	r3, [r7, #20]
 80091d0:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80091d2:	7afb      	ldrb	r3, [r7, #11]
 80091d4:	f003 030f 	and.w	r3, r3, #15
 80091d8:	2b00      	cmp	r3, #0
 80091da:	d109      	bne.n	80091f0 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80091dc:	68fb      	ldr	r3, [r7, #12]
 80091de:	6818      	ldr	r0, [r3, #0]
 80091e0:	68fb      	ldr	r3, [r7, #12]
 80091e2:	691b      	ldr	r3, [r3, #16]
 80091e4:	b2db      	uxtb	r3, r3
 80091e6:	461a      	mov	r2, r3
 80091e8:	6979      	ldr	r1, [r7, #20]
 80091ea:	f003 f87b 	bl	800c2e4 <USB_EP0StartXfer>
 80091ee:	e008      	b.n	8009202 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80091f0:	68fb      	ldr	r3, [r7, #12]
 80091f2:	6818      	ldr	r0, [r3, #0]
 80091f4:	68fb      	ldr	r3, [r7, #12]
 80091f6:	691b      	ldr	r3, [r3, #16]
 80091f8:	b2db      	uxtb	r3, r3
 80091fa:	461a      	mov	r2, r3
 80091fc:	6979      	ldr	r1, [r7, #20]
 80091fe:	f002 fe29 	bl	800be54 <USB_EPStartXfer>
  }

  return HAL_OK;
 8009202:	2300      	movs	r3, #0
}
 8009204:	4618      	mov	r0, r3
 8009206:	3718      	adds	r7, #24
 8009208:	46bd      	mov	sp, r7
 800920a:	bd80      	pop	{r7, pc}

0800920c <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800920c:	b480      	push	{r7}
 800920e:	b083      	sub	sp, #12
 8009210:	af00      	add	r7, sp, #0
 8009212:	6078      	str	r0, [r7, #4]
 8009214:	460b      	mov	r3, r1
 8009216:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8009218:	78fb      	ldrb	r3, [r7, #3]
 800921a:	f003 020f 	and.w	r2, r3, #15
 800921e:	6879      	ldr	r1, [r7, #4]
 8009220:	4613      	mov	r3, r2
 8009222:	00db      	lsls	r3, r3, #3
 8009224:	4413      	add	r3, r2
 8009226:	009b      	lsls	r3, r3, #2
 8009228:	440b      	add	r3, r1
 800922a:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 800922e:	681b      	ldr	r3, [r3, #0]
}
 8009230:	4618      	mov	r0, r3
 8009232:	370c      	adds	r7, #12
 8009234:	46bd      	mov	sp, r7
 8009236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800923a:	4770      	bx	lr

0800923c <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800923c:	b580      	push	{r7, lr}
 800923e:	b086      	sub	sp, #24
 8009240:	af00      	add	r7, sp, #0
 8009242:	60f8      	str	r0, [r7, #12]
 8009244:	607a      	str	r2, [r7, #4]
 8009246:	603b      	str	r3, [r7, #0]
 8009248:	460b      	mov	r3, r1
 800924a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800924c:	7afb      	ldrb	r3, [r7, #11]
 800924e:	f003 020f 	and.w	r2, r3, #15
 8009252:	4613      	mov	r3, r2
 8009254:	00db      	lsls	r3, r3, #3
 8009256:	4413      	add	r3, r2
 8009258:	009b      	lsls	r3, r3, #2
 800925a:	3338      	adds	r3, #56	; 0x38
 800925c:	68fa      	ldr	r2, [r7, #12]
 800925e:	4413      	add	r3, r2
 8009260:	3304      	adds	r3, #4
 8009262:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8009264:	697b      	ldr	r3, [r7, #20]
 8009266:	687a      	ldr	r2, [r7, #4]
 8009268:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 800926a:	697b      	ldr	r3, [r7, #20]
 800926c:	683a      	ldr	r2, [r7, #0]
 800926e:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8009270:	697b      	ldr	r3, [r7, #20]
 8009272:	2200      	movs	r2, #0
 8009274:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8009276:	697b      	ldr	r3, [r7, #20]
 8009278:	2201      	movs	r2, #1
 800927a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800927c:	7afb      	ldrb	r3, [r7, #11]
 800927e:	f003 030f 	and.w	r3, r3, #15
 8009282:	b2da      	uxtb	r2, r3
 8009284:	697b      	ldr	r3, [r7, #20]
 8009286:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8009288:	68fb      	ldr	r3, [r7, #12]
 800928a:	691b      	ldr	r3, [r3, #16]
 800928c:	2b01      	cmp	r3, #1
 800928e:	d102      	bne.n	8009296 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8009290:	687a      	ldr	r2, [r7, #4]
 8009292:	697b      	ldr	r3, [r7, #20]
 8009294:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8009296:	7afb      	ldrb	r3, [r7, #11]
 8009298:	f003 030f 	and.w	r3, r3, #15
 800929c:	2b00      	cmp	r3, #0
 800929e:	d109      	bne.n	80092b4 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80092a0:	68fb      	ldr	r3, [r7, #12]
 80092a2:	6818      	ldr	r0, [r3, #0]
 80092a4:	68fb      	ldr	r3, [r7, #12]
 80092a6:	691b      	ldr	r3, [r3, #16]
 80092a8:	b2db      	uxtb	r3, r3
 80092aa:	461a      	mov	r2, r3
 80092ac:	6979      	ldr	r1, [r7, #20]
 80092ae:	f003 f819 	bl	800c2e4 <USB_EP0StartXfer>
 80092b2:	e008      	b.n	80092c6 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80092b4:	68fb      	ldr	r3, [r7, #12]
 80092b6:	6818      	ldr	r0, [r3, #0]
 80092b8:	68fb      	ldr	r3, [r7, #12]
 80092ba:	691b      	ldr	r3, [r3, #16]
 80092bc:	b2db      	uxtb	r3, r3
 80092be:	461a      	mov	r2, r3
 80092c0:	6979      	ldr	r1, [r7, #20]
 80092c2:	f002 fdc7 	bl	800be54 <USB_EPStartXfer>
  }

  return HAL_OK;
 80092c6:	2300      	movs	r3, #0
}
 80092c8:	4618      	mov	r0, r3
 80092ca:	3718      	adds	r7, #24
 80092cc:	46bd      	mov	sp, r7
 80092ce:	bd80      	pop	{r7, pc}

080092d0 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80092d0:	b580      	push	{r7, lr}
 80092d2:	b084      	sub	sp, #16
 80092d4:	af00      	add	r7, sp, #0
 80092d6:	6078      	str	r0, [r7, #4]
 80092d8:	460b      	mov	r3, r1
 80092da:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80092dc:	78fb      	ldrb	r3, [r7, #3]
 80092de:	f003 020f 	and.w	r2, r3, #15
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	685b      	ldr	r3, [r3, #4]
 80092e6:	429a      	cmp	r2, r3
 80092e8:	d901      	bls.n	80092ee <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80092ea:	2301      	movs	r3, #1
 80092ec:	e050      	b.n	8009390 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80092ee:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80092f2:	2b00      	cmp	r3, #0
 80092f4:	da0f      	bge.n	8009316 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80092f6:	78fb      	ldrb	r3, [r7, #3]
 80092f8:	f003 020f 	and.w	r2, r3, #15
 80092fc:	4613      	mov	r3, r2
 80092fe:	00db      	lsls	r3, r3, #3
 8009300:	4413      	add	r3, r2
 8009302:	009b      	lsls	r3, r3, #2
 8009304:	3338      	adds	r3, #56	; 0x38
 8009306:	687a      	ldr	r2, [r7, #4]
 8009308:	4413      	add	r3, r2
 800930a:	3304      	adds	r3, #4
 800930c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800930e:	68fb      	ldr	r3, [r7, #12]
 8009310:	2201      	movs	r2, #1
 8009312:	705a      	strb	r2, [r3, #1]
 8009314:	e00d      	b.n	8009332 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8009316:	78fa      	ldrb	r2, [r7, #3]
 8009318:	4613      	mov	r3, r2
 800931a:	00db      	lsls	r3, r3, #3
 800931c:	4413      	add	r3, r2
 800931e:	009b      	lsls	r3, r3, #2
 8009320:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8009324:	687a      	ldr	r2, [r7, #4]
 8009326:	4413      	add	r3, r2
 8009328:	3304      	adds	r3, #4
 800932a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800932c:	68fb      	ldr	r3, [r7, #12]
 800932e:	2200      	movs	r2, #0
 8009330:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8009332:	68fb      	ldr	r3, [r7, #12]
 8009334:	2201      	movs	r2, #1
 8009336:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8009338:	78fb      	ldrb	r3, [r7, #3]
 800933a:	f003 030f 	and.w	r3, r3, #15
 800933e:	b2da      	uxtb	r2, r3
 8009340:	68fb      	ldr	r3, [r7, #12]
 8009342:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800934a:	2b01      	cmp	r3, #1
 800934c:	d101      	bne.n	8009352 <HAL_PCD_EP_SetStall+0x82>
 800934e:	2302      	movs	r3, #2
 8009350:	e01e      	b.n	8009390 <HAL_PCD_EP_SetStall+0xc0>
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	2201      	movs	r2, #1
 8009356:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	681b      	ldr	r3, [r3, #0]
 800935e:	68f9      	ldr	r1, [r7, #12]
 8009360:	4618      	mov	r0, r3
 8009362:	f003 fa57 	bl	800c814 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8009366:	78fb      	ldrb	r3, [r7, #3]
 8009368:	f003 030f 	and.w	r3, r3, #15
 800936c:	2b00      	cmp	r3, #0
 800936e:	d10a      	bne.n	8009386 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	6818      	ldr	r0, [r3, #0]
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	691b      	ldr	r3, [r3, #16]
 8009378:	b2d9      	uxtb	r1, r3
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8009380:	461a      	mov	r2, r3
 8009382:	f003 fc47 	bl	800cc14 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	2200      	movs	r2, #0
 800938a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800938e:	2300      	movs	r3, #0
}
 8009390:	4618      	mov	r0, r3
 8009392:	3710      	adds	r7, #16
 8009394:	46bd      	mov	sp, r7
 8009396:	bd80      	pop	{r7, pc}

08009398 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8009398:	b580      	push	{r7, lr}
 800939a:	b084      	sub	sp, #16
 800939c:	af00      	add	r7, sp, #0
 800939e:	6078      	str	r0, [r7, #4]
 80093a0:	460b      	mov	r3, r1
 80093a2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80093a4:	78fb      	ldrb	r3, [r7, #3]
 80093a6:	f003 020f 	and.w	r2, r3, #15
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	685b      	ldr	r3, [r3, #4]
 80093ae:	429a      	cmp	r2, r3
 80093b0:	d901      	bls.n	80093b6 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80093b2:	2301      	movs	r3, #1
 80093b4:	e042      	b.n	800943c <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80093b6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80093ba:	2b00      	cmp	r3, #0
 80093bc:	da0f      	bge.n	80093de <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80093be:	78fb      	ldrb	r3, [r7, #3]
 80093c0:	f003 020f 	and.w	r2, r3, #15
 80093c4:	4613      	mov	r3, r2
 80093c6:	00db      	lsls	r3, r3, #3
 80093c8:	4413      	add	r3, r2
 80093ca:	009b      	lsls	r3, r3, #2
 80093cc:	3338      	adds	r3, #56	; 0x38
 80093ce:	687a      	ldr	r2, [r7, #4]
 80093d0:	4413      	add	r3, r2
 80093d2:	3304      	adds	r3, #4
 80093d4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80093d6:	68fb      	ldr	r3, [r7, #12]
 80093d8:	2201      	movs	r2, #1
 80093da:	705a      	strb	r2, [r3, #1]
 80093dc:	e00f      	b.n	80093fe <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80093de:	78fb      	ldrb	r3, [r7, #3]
 80093e0:	f003 020f 	and.w	r2, r3, #15
 80093e4:	4613      	mov	r3, r2
 80093e6:	00db      	lsls	r3, r3, #3
 80093e8:	4413      	add	r3, r2
 80093ea:	009b      	lsls	r3, r3, #2
 80093ec:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80093f0:	687a      	ldr	r2, [r7, #4]
 80093f2:	4413      	add	r3, r2
 80093f4:	3304      	adds	r3, #4
 80093f6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80093f8:	68fb      	ldr	r3, [r7, #12]
 80093fa:	2200      	movs	r2, #0
 80093fc:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80093fe:	68fb      	ldr	r3, [r7, #12]
 8009400:	2200      	movs	r2, #0
 8009402:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8009404:	78fb      	ldrb	r3, [r7, #3]
 8009406:	f003 030f 	and.w	r3, r3, #15
 800940a:	b2da      	uxtb	r2, r3
 800940c:	68fb      	ldr	r3, [r7, #12]
 800940e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8009416:	2b01      	cmp	r3, #1
 8009418:	d101      	bne.n	800941e <HAL_PCD_EP_ClrStall+0x86>
 800941a:	2302      	movs	r3, #2
 800941c:	e00e      	b.n	800943c <HAL_PCD_EP_ClrStall+0xa4>
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	2201      	movs	r2, #1
 8009422:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	681b      	ldr	r3, [r3, #0]
 800942a:	68f9      	ldr	r1, [r7, #12]
 800942c:	4618      	mov	r0, r3
 800942e:	f003 fa5f 	bl	800c8f0 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	2200      	movs	r2, #0
 8009436:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800943a:	2300      	movs	r3, #0
}
 800943c:	4618      	mov	r0, r3
 800943e:	3710      	adds	r7, #16
 8009440:	46bd      	mov	sp, r7
 8009442:	bd80      	pop	{r7, pc}

08009444 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8009444:	b580      	push	{r7, lr}
 8009446:	b084      	sub	sp, #16
 8009448:	af00      	add	r7, sp, #0
 800944a:	6078      	str	r0, [r7, #4]
 800944c:	460b      	mov	r3, r1
 800944e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8009450:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009454:	2b00      	cmp	r3, #0
 8009456:	da0c      	bge.n	8009472 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8009458:	78fb      	ldrb	r3, [r7, #3]
 800945a:	f003 020f 	and.w	r2, r3, #15
 800945e:	4613      	mov	r3, r2
 8009460:	00db      	lsls	r3, r3, #3
 8009462:	4413      	add	r3, r2
 8009464:	009b      	lsls	r3, r3, #2
 8009466:	3338      	adds	r3, #56	; 0x38
 8009468:	687a      	ldr	r2, [r7, #4]
 800946a:	4413      	add	r3, r2
 800946c:	3304      	adds	r3, #4
 800946e:	60fb      	str	r3, [r7, #12]
 8009470:	e00c      	b.n	800948c <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8009472:	78fb      	ldrb	r3, [r7, #3]
 8009474:	f003 020f 	and.w	r2, r3, #15
 8009478:	4613      	mov	r3, r2
 800947a:	00db      	lsls	r3, r3, #3
 800947c:	4413      	add	r3, r2
 800947e:	009b      	lsls	r3, r3, #2
 8009480:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8009484:	687a      	ldr	r2, [r7, #4]
 8009486:	4413      	add	r3, r2
 8009488:	3304      	adds	r3, #4
 800948a:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	681b      	ldr	r3, [r3, #0]
 8009490:	68f9      	ldr	r1, [r7, #12]
 8009492:	4618      	mov	r0, r3
 8009494:	f003 f87e 	bl	800c594 <USB_EPStopXfer>
 8009498:	4603      	mov	r3, r0
 800949a:	72fb      	strb	r3, [r7, #11]

  return ret;
 800949c:	7afb      	ldrb	r3, [r7, #11]
}
 800949e:	4618      	mov	r0, r3
 80094a0:	3710      	adds	r7, #16
 80094a2:	46bd      	mov	sp, r7
 80094a4:	bd80      	pop	{r7, pc}

080094a6 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80094a6:	b580      	push	{r7, lr}
 80094a8:	b08a      	sub	sp, #40	; 0x28
 80094aa:	af02      	add	r7, sp, #8
 80094ac:	6078      	str	r0, [r7, #4]
 80094ae:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	681b      	ldr	r3, [r3, #0]
 80094b4:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80094b6:	697b      	ldr	r3, [r7, #20]
 80094b8:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80094ba:	683a      	ldr	r2, [r7, #0]
 80094bc:	4613      	mov	r3, r2
 80094be:	00db      	lsls	r3, r3, #3
 80094c0:	4413      	add	r3, r2
 80094c2:	009b      	lsls	r3, r3, #2
 80094c4:	3338      	adds	r3, #56	; 0x38
 80094c6:	687a      	ldr	r2, [r7, #4]
 80094c8:	4413      	add	r3, r2
 80094ca:	3304      	adds	r3, #4
 80094cc:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80094ce:	68fb      	ldr	r3, [r7, #12]
 80094d0:	6a1a      	ldr	r2, [r3, #32]
 80094d2:	68fb      	ldr	r3, [r7, #12]
 80094d4:	699b      	ldr	r3, [r3, #24]
 80094d6:	429a      	cmp	r2, r3
 80094d8:	d901      	bls.n	80094de <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80094da:	2301      	movs	r3, #1
 80094dc:	e06c      	b.n	80095b8 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 80094de:	68fb      	ldr	r3, [r7, #12]
 80094e0:	699a      	ldr	r2, [r3, #24]
 80094e2:	68fb      	ldr	r3, [r7, #12]
 80094e4:	6a1b      	ldr	r3, [r3, #32]
 80094e6:	1ad3      	subs	r3, r2, r3
 80094e8:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80094ea:	68fb      	ldr	r3, [r7, #12]
 80094ec:	68db      	ldr	r3, [r3, #12]
 80094ee:	69fa      	ldr	r2, [r7, #28]
 80094f0:	429a      	cmp	r2, r3
 80094f2:	d902      	bls.n	80094fa <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80094f4:	68fb      	ldr	r3, [r7, #12]
 80094f6:	68db      	ldr	r3, [r3, #12]
 80094f8:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80094fa:	69fb      	ldr	r3, [r7, #28]
 80094fc:	3303      	adds	r3, #3
 80094fe:	089b      	lsrs	r3, r3, #2
 8009500:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8009502:	e02b      	b.n	800955c <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8009504:	68fb      	ldr	r3, [r7, #12]
 8009506:	699a      	ldr	r2, [r3, #24]
 8009508:	68fb      	ldr	r3, [r7, #12]
 800950a:	6a1b      	ldr	r3, [r3, #32]
 800950c:	1ad3      	subs	r3, r2, r3
 800950e:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8009510:	68fb      	ldr	r3, [r7, #12]
 8009512:	68db      	ldr	r3, [r3, #12]
 8009514:	69fa      	ldr	r2, [r7, #28]
 8009516:	429a      	cmp	r2, r3
 8009518:	d902      	bls.n	8009520 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800951a:	68fb      	ldr	r3, [r7, #12]
 800951c:	68db      	ldr	r3, [r3, #12]
 800951e:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8009520:	69fb      	ldr	r3, [r7, #28]
 8009522:	3303      	adds	r3, #3
 8009524:	089b      	lsrs	r3, r3, #2
 8009526:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8009528:	68fb      	ldr	r3, [r7, #12]
 800952a:	6919      	ldr	r1, [r3, #16]
 800952c:	683b      	ldr	r3, [r7, #0]
 800952e:	b2da      	uxtb	r2, r3
 8009530:	69fb      	ldr	r3, [r7, #28]
 8009532:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8009538:	b2db      	uxtb	r3, r3
 800953a:	9300      	str	r3, [sp, #0]
 800953c:	4603      	mov	r3, r0
 800953e:	6978      	ldr	r0, [r7, #20]
 8009540:	f003 f8d2 	bl	800c6e8 <USB_WritePacket>

    ep->xfer_buff  += len;
 8009544:	68fb      	ldr	r3, [r7, #12]
 8009546:	691a      	ldr	r2, [r3, #16]
 8009548:	69fb      	ldr	r3, [r7, #28]
 800954a:	441a      	add	r2, r3
 800954c:	68fb      	ldr	r3, [r7, #12]
 800954e:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8009550:	68fb      	ldr	r3, [r7, #12]
 8009552:	6a1a      	ldr	r2, [r3, #32]
 8009554:	69fb      	ldr	r3, [r7, #28]
 8009556:	441a      	add	r2, r3
 8009558:	68fb      	ldr	r3, [r7, #12]
 800955a:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800955c:	683b      	ldr	r3, [r7, #0]
 800955e:	015a      	lsls	r2, r3, #5
 8009560:	693b      	ldr	r3, [r7, #16]
 8009562:	4413      	add	r3, r2
 8009564:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009568:	699b      	ldr	r3, [r3, #24]
 800956a:	b29b      	uxth	r3, r3
 800956c:	69ba      	ldr	r2, [r7, #24]
 800956e:	429a      	cmp	r2, r3
 8009570:	d809      	bhi.n	8009586 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8009572:	68fb      	ldr	r3, [r7, #12]
 8009574:	6a1a      	ldr	r2, [r3, #32]
 8009576:	68fb      	ldr	r3, [r7, #12]
 8009578:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800957a:	429a      	cmp	r2, r3
 800957c:	d203      	bcs.n	8009586 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800957e:	68fb      	ldr	r3, [r7, #12]
 8009580:	699b      	ldr	r3, [r3, #24]
 8009582:	2b00      	cmp	r3, #0
 8009584:	d1be      	bne.n	8009504 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8009586:	68fb      	ldr	r3, [r7, #12]
 8009588:	699a      	ldr	r2, [r3, #24]
 800958a:	68fb      	ldr	r3, [r7, #12]
 800958c:	6a1b      	ldr	r3, [r3, #32]
 800958e:	429a      	cmp	r2, r3
 8009590:	d811      	bhi.n	80095b6 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8009592:	683b      	ldr	r3, [r7, #0]
 8009594:	f003 030f 	and.w	r3, r3, #15
 8009598:	2201      	movs	r2, #1
 800959a:	fa02 f303 	lsl.w	r3, r2, r3
 800959e:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80095a0:	693b      	ldr	r3, [r7, #16]
 80095a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80095a6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80095a8:	68bb      	ldr	r3, [r7, #8]
 80095aa:	43db      	mvns	r3, r3
 80095ac:	6939      	ldr	r1, [r7, #16]
 80095ae:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80095b2:	4013      	ands	r3, r2
 80095b4:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80095b6:	2300      	movs	r3, #0
}
 80095b8:	4618      	mov	r0, r3
 80095ba:	3720      	adds	r7, #32
 80095bc:	46bd      	mov	sp, r7
 80095be:	bd80      	pop	{r7, pc}

080095c0 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80095c0:	b580      	push	{r7, lr}
 80095c2:	b088      	sub	sp, #32
 80095c4:	af00      	add	r7, sp, #0
 80095c6:	6078      	str	r0, [r7, #4]
 80095c8:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	681b      	ldr	r3, [r3, #0]
 80095ce:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80095d0:	69fb      	ldr	r3, [r7, #28]
 80095d2:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80095d4:	69fb      	ldr	r3, [r7, #28]
 80095d6:	333c      	adds	r3, #60	; 0x3c
 80095d8:	3304      	adds	r3, #4
 80095da:	681b      	ldr	r3, [r3, #0]
 80095dc:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80095de:	683b      	ldr	r3, [r7, #0]
 80095e0:	015a      	lsls	r2, r3, #5
 80095e2:	69bb      	ldr	r3, [r7, #24]
 80095e4:	4413      	add	r3, r2
 80095e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80095ea:	689b      	ldr	r3, [r3, #8]
 80095ec:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	691b      	ldr	r3, [r3, #16]
 80095f2:	2b01      	cmp	r3, #1
 80095f4:	d17b      	bne.n	80096ee <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80095f6:	693b      	ldr	r3, [r7, #16]
 80095f8:	f003 0308 	and.w	r3, r3, #8
 80095fc:	2b00      	cmp	r3, #0
 80095fe:	d015      	beq.n	800962c <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8009600:	697b      	ldr	r3, [r7, #20]
 8009602:	4a61      	ldr	r2, [pc, #388]	; (8009788 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8009604:	4293      	cmp	r3, r2
 8009606:	f240 80b9 	bls.w	800977c <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800960a:	693b      	ldr	r3, [r7, #16]
 800960c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8009610:	2b00      	cmp	r3, #0
 8009612:	f000 80b3 	beq.w	800977c <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8009616:	683b      	ldr	r3, [r7, #0]
 8009618:	015a      	lsls	r2, r3, #5
 800961a:	69bb      	ldr	r3, [r7, #24]
 800961c:	4413      	add	r3, r2
 800961e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009622:	461a      	mov	r2, r3
 8009624:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009628:	6093      	str	r3, [r2, #8]
 800962a:	e0a7      	b.n	800977c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800962c:	693b      	ldr	r3, [r7, #16]
 800962e:	f003 0320 	and.w	r3, r3, #32
 8009632:	2b00      	cmp	r3, #0
 8009634:	d009      	beq.n	800964a <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8009636:	683b      	ldr	r3, [r7, #0]
 8009638:	015a      	lsls	r2, r3, #5
 800963a:	69bb      	ldr	r3, [r7, #24]
 800963c:	4413      	add	r3, r2
 800963e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009642:	461a      	mov	r2, r3
 8009644:	2320      	movs	r3, #32
 8009646:	6093      	str	r3, [r2, #8]
 8009648:	e098      	b.n	800977c <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800964a:	693b      	ldr	r3, [r7, #16]
 800964c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8009650:	2b00      	cmp	r3, #0
 8009652:	f040 8093 	bne.w	800977c <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8009656:	697b      	ldr	r3, [r7, #20]
 8009658:	4a4b      	ldr	r2, [pc, #300]	; (8009788 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800965a:	4293      	cmp	r3, r2
 800965c:	d90f      	bls.n	800967e <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800965e:	693b      	ldr	r3, [r7, #16]
 8009660:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8009664:	2b00      	cmp	r3, #0
 8009666:	d00a      	beq.n	800967e <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8009668:	683b      	ldr	r3, [r7, #0]
 800966a:	015a      	lsls	r2, r3, #5
 800966c:	69bb      	ldr	r3, [r7, #24]
 800966e:	4413      	add	r3, r2
 8009670:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009674:	461a      	mov	r2, r3
 8009676:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800967a:	6093      	str	r3, [r2, #8]
 800967c:	e07e      	b.n	800977c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800967e:	683a      	ldr	r2, [r7, #0]
 8009680:	4613      	mov	r3, r2
 8009682:	00db      	lsls	r3, r3, #3
 8009684:	4413      	add	r3, r2
 8009686:	009b      	lsls	r3, r3, #2
 8009688:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800968c:	687a      	ldr	r2, [r7, #4]
 800968e:	4413      	add	r3, r2
 8009690:	3304      	adds	r3, #4
 8009692:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8009694:	68fb      	ldr	r3, [r7, #12]
 8009696:	69da      	ldr	r2, [r3, #28]
 8009698:	683b      	ldr	r3, [r7, #0]
 800969a:	0159      	lsls	r1, r3, #5
 800969c:	69bb      	ldr	r3, [r7, #24]
 800969e:	440b      	add	r3, r1
 80096a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80096a4:	691b      	ldr	r3, [r3, #16]
 80096a6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80096aa:	1ad2      	subs	r2, r2, r3
 80096ac:	68fb      	ldr	r3, [r7, #12]
 80096ae:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 80096b0:	683b      	ldr	r3, [r7, #0]
 80096b2:	2b00      	cmp	r3, #0
 80096b4:	d114      	bne.n	80096e0 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80096b6:	68fb      	ldr	r3, [r7, #12]
 80096b8:	699b      	ldr	r3, [r3, #24]
 80096ba:	2b00      	cmp	r3, #0
 80096bc:	d109      	bne.n	80096d2 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	6818      	ldr	r0, [r3, #0]
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80096c8:	461a      	mov	r2, r3
 80096ca:	2101      	movs	r1, #1
 80096cc:	f003 faa2 	bl	800cc14 <USB_EP0_OutStart>
 80096d0:	e006      	b.n	80096e0 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80096d2:	68fb      	ldr	r3, [r7, #12]
 80096d4:	691a      	ldr	r2, [r3, #16]
 80096d6:	68fb      	ldr	r3, [r7, #12]
 80096d8:	6a1b      	ldr	r3, [r3, #32]
 80096da:	441a      	add	r2, r3
 80096dc:	68fb      	ldr	r3, [r7, #12]
 80096de:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80096e0:	683b      	ldr	r3, [r7, #0]
 80096e2:	b2db      	uxtb	r3, r3
 80096e4:	4619      	mov	r1, r3
 80096e6:	6878      	ldr	r0, [r7, #4]
 80096e8:	f005 fdac 	bl	800f244 <HAL_PCD_DataOutStageCallback>
 80096ec:	e046      	b.n	800977c <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80096ee:	697b      	ldr	r3, [r7, #20]
 80096f0:	4a26      	ldr	r2, [pc, #152]	; (800978c <PCD_EP_OutXfrComplete_int+0x1cc>)
 80096f2:	4293      	cmp	r3, r2
 80096f4:	d124      	bne.n	8009740 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80096f6:	693b      	ldr	r3, [r7, #16]
 80096f8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80096fc:	2b00      	cmp	r3, #0
 80096fe:	d00a      	beq.n	8009716 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8009700:	683b      	ldr	r3, [r7, #0]
 8009702:	015a      	lsls	r2, r3, #5
 8009704:	69bb      	ldr	r3, [r7, #24]
 8009706:	4413      	add	r3, r2
 8009708:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800970c:	461a      	mov	r2, r3
 800970e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009712:	6093      	str	r3, [r2, #8]
 8009714:	e032      	b.n	800977c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8009716:	693b      	ldr	r3, [r7, #16]
 8009718:	f003 0320 	and.w	r3, r3, #32
 800971c:	2b00      	cmp	r3, #0
 800971e:	d008      	beq.n	8009732 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8009720:	683b      	ldr	r3, [r7, #0]
 8009722:	015a      	lsls	r2, r3, #5
 8009724:	69bb      	ldr	r3, [r7, #24]
 8009726:	4413      	add	r3, r2
 8009728:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800972c:	461a      	mov	r2, r3
 800972e:	2320      	movs	r3, #32
 8009730:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8009732:	683b      	ldr	r3, [r7, #0]
 8009734:	b2db      	uxtb	r3, r3
 8009736:	4619      	mov	r1, r3
 8009738:	6878      	ldr	r0, [r7, #4]
 800973a:	f005 fd83 	bl	800f244 <HAL_PCD_DataOutStageCallback>
 800973e:	e01d      	b.n	800977c <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8009740:	683b      	ldr	r3, [r7, #0]
 8009742:	2b00      	cmp	r3, #0
 8009744:	d114      	bne.n	8009770 <PCD_EP_OutXfrComplete_int+0x1b0>
 8009746:	6879      	ldr	r1, [r7, #4]
 8009748:	683a      	ldr	r2, [r7, #0]
 800974a:	4613      	mov	r3, r2
 800974c:	00db      	lsls	r3, r3, #3
 800974e:	4413      	add	r3, r2
 8009750:	009b      	lsls	r3, r3, #2
 8009752:	440b      	add	r3, r1
 8009754:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8009758:	681b      	ldr	r3, [r3, #0]
 800975a:	2b00      	cmp	r3, #0
 800975c:	d108      	bne.n	8009770 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	6818      	ldr	r0, [r3, #0]
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8009768:	461a      	mov	r2, r3
 800976a:	2100      	movs	r1, #0
 800976c:	f003 fa52 	bl	800cc14 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8009770:	683b      	ldr	r3, [r7, #0]
 8009772:	b2db      	uxtb	r3, r3
 8009774:	4619      	mov	r1, r3
 8009776:	6878      	ldr	r0, [r7, #4]
 8009778:	f005 fd64 	bl	800f244 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800977c:	2300      	movs	r3, #0
}
 800977e:	4618      	mov	r0, r3
 8009780:	3720      	adds	r7, #32
 8009782:	46bd      	mov	sp, r7
 8009784:	bd80      	pop	{r7, pc}
 8009786:	bf00      	nop
 8009788:	4f54300a 	.word	0x4f54300a
 800978c:	4f54310a 	.word	0x4f54310a

08009790 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8009790:	b580      	push	{r7, lr}
 8009792:	b086      	sub	sp, #24
 8009794:	af00      	add	r7, sp, #0
 8009796:	6078      	str	r0, [r7, #4]
 8009798:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	681b      	ldr	r3, [r3, #0]
 800979e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80097a0:	697b      	ldr	r3, [r7, #20]
 80097a2:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80097a4:	697b      	ldr	r3, [r7, #20]
 80097a6:	333c      	adds	r3, #60	; 0x3c
 80097a8:	3304      	adds	r3, #4
 80097aa:	681b      	ldr	r3, [r3, #0]
 80097ac:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80097ae:	683b      	ldr	r3, [r7, #0]
 80097b0:	015a      	lsls	r2, r3, #5
 80097b2:	693b      	ldr	r3, [r7, #16]
 80097b4:	4413      	add	r3, r2
 80097b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80097ba:	689b      	ldr	r3, [r3, #8]
 80097bc:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80097be:	68fb      	ldr	r3, [r7, #12]
 80097c0:	4a15      	ldr	r2, [pc, #84]	; (8009818 <PCD_EP_OutSetupPacket_int+0x88>)
 80097c2:	4293      	cmp	r3, r2
 80097c4:	d90e      	bls.n	80097e4 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80097c6:	68bb      	ldr	r3, [r7, #8]
 80097c8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80097cc:	2b00      	cmp	r3, #0
 80097ce:	d009      	beq.n	80097e4 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80097d0:	683b      	ldr	r3, [r7, #0]
 80097d2:	015a      	lsls	r2, r3, #5
 80097d4:	693b      	ldr	r3, [r7, #16]
 80097d6:	4413      	add	r3, r2
 80097d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80097dc:	461a      	mov	r2, r3
 80097de:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80097e2:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80097e4:	6878      	ldr	r0, [r7, #4]
 80097e6:	f005 fd1b 	bl	800f220 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80097ea:	68fb      	ldr	r3, [r7, #12]
 80097ec:	4a0a      	ldr	r2, [pc, #40]	; (8009818 <PCD_EP_OutSetupPacket_int+0x88>)
 80097ee:	4293      	cmp	r3, r2
 80097f0:	d90c      	bls.n	800980c <PCD_EP_OutSetupPacket_int+0x7c>
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	691b      	ldr	r3, [r3, #16]
 80097f6:	2b01      	cmp	r3, #1
 80097f8:	d108      	bne.n	800980c <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	6818      	ldr	r0, [r3, #0]
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8009804:	461a      	mov	r2, r3
 8009806:	2101      	movs	r1, #1
 8009808:	f003 fa04 	bl	800cc14 <USB_EP0_OutStart>
  }

  return HAL_OK;
 800980c:	2300      	movs	r3, #0
}
 800980e:	4618      	mov	r0, r3
 8009810:	3718      	adds	r7, #24
 8009812:	46bd      	mov	sp, r7
 8009814:	bd80      	pop	{r7, pc}
 8009816:	bf00      	nop
 8009818:	4f54300a 	.word	0x4f54300a

0800981c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800981c:	b480      	push	{r7}
 800981e:	b085      	sub	sp, #20
 8009820:	af00      	add	r7, sp, #0
 8009822:	6078      	str	r0, [r7, #4]
 8009824:	460b      	mov	r3, r1
 8009826:	70fb      	strb	r3, [r7, #3]
 8009828:	4613      	mov	r3, r2
 800982a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	681b      	ldr	r3, [r3, #0]
 8009830:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009832:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8009834:	78fb      	ldrb	r3, [r7, #3]
 8009836:	2b00      	cmp	r3, #0
 8009838:	d107      	bne.n	800984a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800983a:	883b      	ldrh	r3, [r7, #0]
 800983c:	0419      	lsls	r1, r3, #16
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	681b      	ldr	r3, [r3, #0]
 8009842:	68ba      	ldr	r2, [r7, #8]
 8009844:	430a      	orrs	r2, r1
 8009846:	629a      	str	r2, [r3, #40]	; 0x28
 8009848:	e028      	b.n	800989c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	681b      	ldr	r3, [r3, #0]
 800984e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009850:	0c1b      	lsrs	r3, r3, #16
 8009852:	68ba      	ldr	r2, [r7, #8]
 8009854:	4413      	add	r3, r2
 8009856:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8009858:	2300      	movs	r3, #0
 800985a:	73fb      	strb	r3, [r7, #15]
 800985c:	e00d      	b.n	800987a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	681a      	ldr	r2, [r3, #0]
 8009862:	7bfb      	ldrb	r3, [r7, #15]
 8009864:	3340      	adds	r3, #64	; 0x40
 8009866:	009b      	lsls	r3, r3, #2
 8009868:	4413      	add	r3, r2
 800986a:	685b      	ldr	r3, [r3, #4]
 800986c:	0c1b      	lsrs	r3, r3, #16
 800986e:	68ba      	ldr	r2, [r7, #8]
 8009870:	4413      	add	r3, r2
 8009872:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8009874:	7bfb      	ldrb	r3, [r7, #15]
 8009876:	3301      	adds	r3, #1
 8009878:	73fb      	strb	r3, [r7, #15]
 800987a:	7bfa      	ldrb	r2, [r7, #15]
 800987c:	78fb      	ldrb	r3, [r7, #3]
 800987e:	3b01      	subs	r3, #1
 8009880:	429a      	cmp	r2, r3
 8009882:	d3ec      	bcc.n	800985e <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8009884:	883b      	ldrh	r3, [r7, #0]
 8009886:	0418      	lsls	r0, r3, #16
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	6819      	ldr	r1, [r3, #0]
 800988c:	78fb      	ldrb	r3, [r7, #3]
 800988e:	3b01      	subs	r3, #1
 8009890:	68ba      	ldr	r2, [r7, #8]
 8009892:	4302      	orrs	r2, r0
 8009894:	3340      	adds	r3, #64	; 0x40
 8009896:	009b      	lsls	r3, r3, #2
 8009898:	440b      	add	r3, r1
 800989a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800989c:	2300      	movs	r3, #0
}
 800989e:	4618      	mov	r0, r3
 80098a0:	3714      	adds	r7, #20
 80098a2:	46bd      	mov	sp, r7
 80098a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098a8:	4770      	bx	lr

080098aa <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80098aa:	b480      	push	{r7}
 80098ac:	b083      	sub	sp, #12
 80098ae:	af00      	add	r7, sp, #0
 80098b0:	6078      	str	r0, [r7, #4]
 80098b2:	460b      	mov	r3, r1
 80098b4:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	681b      	ldr	r3, [r3, #0]
 80098ba:	887a      	ldrh	r2, [r7, #2]
 80098bc:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80098be:	2300      	movs	r3, #0
}
 80098c0:	4618      	mov	r0, r3
 80098c2:	370c      	adds	r7, #12
 80098c4:	46bd      	mov	sp, r7
 80098c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098ca:	4770      	bx	lr

080098cc <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80098cc:	b480      	push	{r7}
 80098ce:	b085      	sub	sp, #20
 80098d0:	af00      	add	r7, sp, #0
 80098d2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	681b      	ldr	r3, [r3, #0]
 80098d8:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	2201      	movs	r2, #1
 80098de:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	2200      	movs	r2, #0
 80098e6:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80098ea:	68fb      	ldr	r3, [r7, #12]
 80098ec:	699b      	ldr	r3, [r3, #24]
 80098ee:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80098f2:	68fb      	ldr	r3, [r7, #12]
 80098f4:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80098f6:	68fb      	ldr	r3, [r7, #12]
 80098f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80098fa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80098fe:	f043 0303 	orr.w	r3, r3, #3
 8009902:	68fa      	ldr	r2, [r7, #12]
 8009904:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8009906:	2300      	movs	r3, #0
}
 8009908:	4618      	mov	r0, r3
 800990a:	3714      	adds	r7, #20
 800990c:	46bd      	mov	sp, r7
 800990e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009912:	4770      	bx	lr

08009914 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8009914:	b580      	push	{r7, lr}
 8009916:	b084      	sub	sp, #16
 8009918:	af00      	add	r7, sp, #0
 800991a:	6078      	str	r0, [r7, #4]
 800991c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	2b00      	cmp	r3, #0
 8009922:	d101      	bne.n	8009928 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8009924:	2301      	movs	r3, #1
 8009926:	e0cc      	b.n	8009ac2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8009928:	4b68      	ldr	r3, [pc, #416]	; (8009acc <HAL_RCC_ClockConfig+0x1b8>)
 800992a:	681b      	ldr	r3, [r3, #0]
 800992c:	f003 030f 	and.w	r3, r3, #15
 8009930:	683a      	ldr	r2, [r7, #0]
 8009932:	429a      	cmp	r2, r3
 8009934:	d90c      	bls.n	8009950 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009936:	4b65      	ldr	r3, [pc, #404]	; (8009acc <HAL_RCC_ClockConfig+0x1b8>)
 8009938:	683a      	ldr	r2, [r7, #0]
 800993a:	b2d2      	uxtb	r2, r2
 800993c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800993e:	4b63      	ldr	r3, [pc, #396]	; (8009acc <HAL_RCC_ClockConfig+0x1b8>)
 8009940:	681b      	ldr	r3, [r3, #0]
 8009942:	f003 030f 	and.w	r3, r3, #15
 8009946:	683a      	ldr	r2, [r7, #0]
 8009948:	429a      	cmp	r2, r3
 800994a:	d001      	beq.n	8009950 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800994c:	2301      	movs	r3, #1
 800994e:	e0b8      	b.n	8009ac2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	681b      	ldr	r3, [r3, #0]
 8009954:	f003 0302 	and.w	r3, r3, #2
 8009958:	2b00      	cmp	r3, #0
 800995a:	d020      	beq.n	800999e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	681b      	ldr	r3, [r3, #0]
 8009960:	f003 0304 	and.w	r3, r3, #4
 8009964:	2b00      	cmp	r3, #0
 8009966:	d005      	beq.n	8009974 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8009968:	4b59      	ldr	r3, [pc, #356]	; (8009ad0 <HAL_RCC_ClockConfig+0x1bc>)
 800996a:	689b      	ldr	r3, [r3, #8]
 800996c:	4a58      	ldr	r2, [pc, #352]	; (8009ad0 <HAL_RCC_ClockConfig+0x1bc>)
 800996e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8009972:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	681b      	ldr	r3, [r3, #0]
 8009978:	f003 0308 	and.w	r3, r3, #8
 800997c:	2b00      	cmp	r3, #0
 800997e:	d005      	beq.n	800998c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8009980:	4b53      	ldr	r3, [pc, #332]	; (8009ad0 <HAL_RCC_ClockConfig+0x1bc>)
 8009982:	689b      	ldr	r3, [r3, #8]
 8009984:	4a52      	ldr	r2, [pc, #328]	; (8009ad0 <HAL_RCC_ClockConfig+0x1bc>)
 8009986:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800998a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800998c:	4b50      	ldr	r3, [pc, #320]	; (8009ad0 <HAL_RCC_ClockConfig+0x1bc>)
 800998e:	689b      	ldr	r3, [r3, #8]
 8009990:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	689b      	ldr	r3, [r3, #8]
 8009998:	494d      	ldr	r1, [pc, #308]	; (8009ad0 <HAL_RCC_ClockConfig+0x1bc>)
 800999a:	4313      	orrs	r3, r2
 800999c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	681b      	ldr	r3, [r3, #0]
 80099a2:	f003 0301 	and.w	r3, r3, #1
 80099a6:	2b00      	cmp	r3, #0
 80099a8:	d044      	beq.n	8009a34 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	685b      	ldr	r3, [r3, #4]
 80099ae:	2b01      	cmp	r3, #1
 80099b0:	d107      	bne.n	80099c2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80099b2:	4b47      	ldr	r3, [pc, #284]	; (8009ad0 <HAL_RCC_ClockConfig+0x1bc>)
 80099b4:	681b      	ldr	r3, [r3, #0]
 80099b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80099ba:	2b00      	cmp	r3, #0
 80099bc:	d119      	bne.n	80099f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80099be:	2301      	movs	r3, #1
 80099c0:	e07f      	b.n	8009ac2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	685b      	ldr	r3, [r3, #4]
 80099c6:	2b02      	cmp	r3, #2
 80099c8:	d003      	beq.n	80099d2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80099ce:	2b03      	cmp	r3, #3
 80099d0:	d107      	bne.n	80099e2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80099d2:	4b3f      	ldr	r3, [pc, #252]	; (8009ad0 <HAL_RCC_ClockConfig+0x1bc>)
 80099d4:	681b      	ldr	r3, [r3, #0]
 80099d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80099da:	2b00      	cmp	r3, #0
 80099dc:	d109      	bne.n	80099f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80099de:	2301      	movs	r3, #1
 80099e0:	e06f      	b.n	8009ac2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80099e2:	4b3b      	ldr	r3, [pc, #236]	; (8009ad0 <HAL_RCC_ClockConfig+0x1bc>)
 80099e4:	681b      	ldr	r3, [r3, #0]
 80099e6:	f003 0302 	and.w	r3, r3, #2
 80099ea:	2b00      	cmp	r3, #0
 80099ec:	d101      	bne.n	80099f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80099ee:	2301      	movs	r3, #1
 80099f0:	e067      	b.n	8009ac2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80099f2:	4b37      	ldr	r3, [pc, #220]	; (8009ad0 <HAL_RCC_ClockConfig+0x1bc>)
 80099f4:	689b      	ldr	r3, [r3, #8]
 80099f6:	f023 0203 	bic.w	r2, r3, #3
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	685b      	ldr	r3, [r3, #4]
 80099fe:	4934      	ldr	r1, [pc, #208]	; (8009ad0 <HAL_RCC_ClockConfig+0x1bc>)
 8009a00:	4313      	orrs	r3, r2
 8009a02:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8009a04:	f7fc fdd2 	bl	80065ac <HAL_GetTick>
 8009a08:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009a0a:	e00a      	b.n	8009a22 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009a0c:	f7fc fdce 	bl	80065ac <HAL_GetTick>
 8009a10:	4602      	mov	r2, r0
 8009a12:	68fb      	ldr	r3, [r7, #12]
 8009a14:	1ad3      	subs	r3, r2, r3
 8009a16:	f241 3288 	movw	r2, #5000	; 0x1388
 8009a1a:	4293      	cmp	r3, r2
 8009a1c:	d901      	bls.n	8009a22 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8009a1e:	2303      	movs	r3, #3
 8009a20:	e04f      	b.n	8009ac2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009a22:	4b2b      	ldr	r3, [pc, #172]	; (8009ad0 <HAL_RCC_ClockConfig+0x1bc>)
 8009a24:	689b      	ldr	r3, [r3, #8]
 8009a26:	f003 020c 	and.w	r2, r3, #12
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	685b      	ldr	r3, [r3, #4]
 8009a2e:	009b      	lsls	r3, r3, #2
 8009a30:	429a      	cmp	r2, r3
 8009a32:	d1eb      	bne.n	8009a0c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8009a34:	4b25      	ldr	r3, [pc, #148]	; (8009acc <HAL_RCC_ClockConfig+0x1b8>)
 8009a36:	681b      	ldr	r3, [r3, #0]
 8009a38:	f003 030f 	and.w	r3, r3, #15
 8009a3c:	683a      	ldr	r2, [r7, #0]
 8009a3e:	429a      	cmp	r2, r3
 8009a40:	d20c      	bcs.n	8009a5c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009a42:	4b22      	ldr	r3, [pc, #136]	; (8009acc <HAL_RCC_ClockConfig+0x1b8>)
 8009a44:	683a      	ldr	r2, [r7, #0]
 8009a46:	b2d2      	uxtb	r2, r2
 8009a48:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8009a4a:	4b20      	ldr	r3, [pc, #128]	; (8009acc <HAL_RCC_ClockConfig+0x1b8>)
 8009a4c:	681b      	ldr	r3, [r3, #0]
 8009a4e:	f003 030f 	and.w	r3, r3, #15
 8009a52:	683a      	ldr	r2, [r7, #0]
 8009a54:	429a      	cmp	r2, r3
 8009a56:	d001      	beq.n	8009a5c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8009a58:	2301      	movs	r3, #1
 8009a5a:	e032      	b.n	8009ac2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	681b      	ldr	r3, [r3, #0]
 8009a60:	f003 0304 	and.w	r3, r3, #4
 8009a64:	2b00      	cmp	r3, #0
 8009a66:	d008      	beq.n	8009a7a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8009a68:	4b19      	ldr	r3, [pc, #100]	; (8009ad0 <HAL_RCC_ClockConfig+0x1bc>)
 8009a6a:	689b      	ldr	r3, [r3, #8]
 8009a6c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	68db      	ldr	r3, [r3, #12]
 8009a74:	4916      	ldr	r1, [pc, #88]	; (8009ad0 <HAL_RCC_ClockConfig+0x1bc>)
 8009a76:	4313      	orrs	r3, r2
 8009a78:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	681b      	ldr	r3, [r3, #0]
 8009a7e:	f003 0308 	and.w	r3, r3, #8
 8009a82:	2b00      	cmp	r3, #0
 8009a84:	d009      	beq.n	8009a9a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8009a86:	4b12      	ldr	r3, [pc, #72]	; (8009ad0 <HAL_RCC_ClockConfig+0x1bc>)
 8009a88:	689b      	ldr	r3, [r3, #8]
 8009a8a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	691b      	ldr	r3, [r3, #16]
 8009a92:	00db      	lsls	r3, r3, #3
 8009a94:	490e      	ldr	r1, [pc, #56]	; (8009ad0 <HAL_RCC_ClockConfig+0x1bc>)
 8009a96:	4313      	orrs	r3, r2
 8009a98:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8009a9a:	f000 fb6b 	bl	800a174 <HAL_RCC_GetSysClockFreq>
 8009a9e:	4602      	mov	r2, r0
 8009aa0:	4b0b      	ldr	r3, [pc, #44]	; (8009ad0 <HAL_RCC_ClockConfig+0x1bc>)
 8009aa2:	689b      	ldr	r3, [r3, #8]
 8009aa4:	091b      	lsrs	r3, r3, #4
 8009aa6:	f003 030f 	and.w	r3, r3, #15
 8009aaa:	490a      	ldr	r1, [pc, #40]	; (8009ad4 <HAL_RCC_ClockConfig+0x1c0>)
 8009aac:	5ccb      	ldrb	r3, [r1, r3]
 8009aae:	fa22 f303 	lsr.w	r3, r2, r3
 8009ab2:	4a09      	ldr	r2, [pc, #36]	; (8009ad8 <HAL_RCC_ClockConfig+0x1c4>)
 8009ab4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8009ab6:	4b09      	ldr	r3, [pc, #36]	; (8009adc <HAL_RCC_ClockConfig+0x1c8>)
 8009ab8:	681b      	ldr	r3, [r3, #0]
 8009aba:	4618      	mov	r0, r3
 8009abc:	f7fc fd32 	bl	8006524 <HAL_InitTick>

  return HAL_OK;
 8009ac0:	2300      	movs	r3, #0
}
 8009ac2:	4618      	mov	r0, r3
 8009ac4:	3710      	adds	r7, #16
 8009ac6:	46bd      	mov	sp, r7
 8009ac8:	bd80      	pop	{r7, pc}
 8009aca:	bf00      	nop
 8009acc:	40023c00 	.word	0x40023c00
 8009ad0:	40023800 	.word	0x40023800
 8009ad4:	08014238 	.word	0x08014238
 8009ad8:	20000028 	.word	0x20000028
 8009adc:	20000100 	.word	0x20000100

08009ae0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009ae0:	b480      	push	{r7}
 8009ae2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8009ae4:	4b03      	ldr	r3, [pc, #12]	; (8009af4 <HAL_RCC_GetHCLKFreq+0x14>)
 8009ae6:	681b      	ldr	r3, [r3, #0]
}
 8009ae8:	4618      	mov	r0, r3
 8009aea:	46bd      	mov	sp, r7
 8009aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009af0:	4770      	bx	lr
 8009af2:	bf00      	nop
 8009af4:	20000028 	.word	0x20000028

08009af8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009af8:	b580      	push	{r7, lr}
 8009afa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8009afc:	f7ff fff0 	bl	8009ae0 <HAL_RCC_GetHCLKFreq>
 8009b00:	4602      	mov	r2, r0
 8009b02:	4b05      	ldr	r3, [pc, #20]	; (8009b18 <HAL_RCC_GetPCLK1Freq+0x20>)
 8009b04:	689b      	ldr	r3, [r3, #8]
 8009b06:	0a9b      	lsrs	r3, r3, #10
 8009b08:	f003 0307 	and.w	r3, r3, #7
 8009b0c:	4903      	ldr	r1, [pc, #12]	; (8009b1c <HAL_RCC_GetPCLK1Freq+0x24>)
 8009b0e:	5ccb      	ldrb	r3, [r1, r3]
 8009b10:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009b14:	4618      	mov	r0, r3
 8009b16:	bd80      	pop	{r7, pc}
 8009b18:	40023800 	.word	0x40023800
 8009b1c:	08014248 	.word	0x08014248

08009b20 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8009b20:	b580      	push	{r7, lr}
 8009b22:	b08c      	sub	sp, #48	; 0x30
 8009b24:	af00      	add	r7, sp, #0
 8009b26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8009b28:	2300      	movs	r3, #0
 8009b2a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmpreg1 = 0U;
 8009b2c:	2300      	movs	r3, #0
 8009b2e:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 8009b30:	2300      	movs	r3, #0
 8009b32:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 8009b34:	2300      	movs	r3, #0
 8009b36:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 8009b38:	2300      	movs	r3, #0
 8009b3a:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 8009b3c:	2300      	movs	r3, #0
 8009b3e:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 8009b40:	2300      	movs	r3, #0
 8009b42:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 8009b44:	2300      	movs	r3, #0
 8009b46:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t pllsaiused = 0U;
 8009b48:	2300      	movs	r3, #0
 8009b4a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	681b      	ldr	r3, [r3, #0]
 8009b50:	f003 0301 	and.w	r3, r3, #1
 8009b54:	2b00      	cmp	r3, #0
 8009b56:	d010      	beq.n	8009b7a <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 8009b58:	4b6f      	ldr	r3, [pc, #444]	; (8009d18 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8009b5a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009b5e:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b66:	496c      	ldr	r1, [pc, #432]	; (8009d18 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8009b68:	4313      	orrs	r3, r2
 8009b6a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b72:	2b00      	cmp	r3, #0
 8009b74:	d101      	bne.n	8009b7a <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 8009b76:	2301      	movs	r3, #1
 8009b78:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	681b      	ldr	r3, [r3, #0]
 8009b7e:	f003 0302 	and.w	r3, r3, #2
 8009b82:	2b00      	cmp	r3, #0
 8009b84:	d010      	beq.n	8009ba8 <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 8009b86:	4b64      	ldr	r3, [pc, #400]	; (8009d18 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8009b88:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009b8c:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009b94:	4960      	ldr	r1, [pc, #384]	; (8009d18 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8009b96:	4313      	orrs	r3, r2
 8009b98:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009ba0:	2b00      	cmp	r3, #0
 8009ba2:	d101      	bne.n	8009ba8 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 8009ba4:	2301      	movs	r3, #1
 8009ba6:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	681b      	ldr	r3, [r3, #0]
 8009bac:	f003 0304 	and.w	r3, r3, #4
 8009bb0:	2b00      	cmp	r3, #0
 8009bb2:	d017      	beq.n	8009be4 <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8009bb4:	4b58      	ldr	r3, [pc, #352]	; (8009d18 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8009bb6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009bba:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009bc2:	4955      	ldr	r1, [pc, #340]	; (8009d18 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8009bc4:	4313      	orrs	r3, r2
 8009bc6:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009bce:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009bd2:	d101      	bne.n	8009bd8 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 8009bd4:	2301      	movs	r3, #1
 8009bd6:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009bdc:	2b00      	cmp	r3, #0
 8009bde:	d101      	bne.n	8009be4 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 8009be0:	2301      	movs	r3, #1
 8009be2:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	681b      	ldr	r3, [r3, #0]
 8009be8:	f003 0308 	and.w	r3, r3, #8
 8009bec:	2b00      	cmp	r3, #0
 8009bee:	d017      	beq.n	8009c20 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8009bf0:	4b49      	ldr	r3, [pc, #292]	; (8009d18 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8009bf2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009bf6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009bfe:	4946      	ldr	r1, [pc, #280]	; (8009d18 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8009c00:	4313      	orrs	r3, r2
 8009c02:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009c0a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009c0e:	d101      	bne.n	8009c14 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 8009c10:	2301      	movs	r3, #1
 8009c12:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009c18:	2b00      	cmp	r3, #0
 8009c1a:	d101      	bne.n	8009c20 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 8009c1c:	2301      	movs	r3, #1
 8009c1e:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	681b      	ldr	r3, [r3, #0]
 8009c24:	f003 0320 	and.w	r3, r3, #32
 8009c28:	2b00      	cmp	r3, #0
 8009c2a:	f000 808a 	beq.w	8009d42 <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8009c2e:	2300      	movs	r3, #0
 8009c30:	60bb      	str	r3, [r7, #8]
 8009c32:	4b39      	ldr	r3, [pc, #228]	; (8009d18 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8009c34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c36:	4a38      	ldr	r2, [pc, #224]	; (8009d18 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8009c38:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009c3c:	6413      	str	r3, [r2, #64]	; 0x40
 8009c3e:	4b36      	ldr	r3, [pc, #216]	; (8009d18 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8009c40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009c46:	60bb      	str	r3, [r7, #8]
 8009c48:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8009c4a:	4b34      	ldr	r3, [pc, #208]	; (8009d1c <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8009c4c:	681b      	ldr	r3, [r3, #0]
 8009c4e:	4a33      	ldr	r2, [pc, #204]	; (8009d1c <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8009c50:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009c54:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8009c56:	f7fc fca9 	bl	80065ac <HAL_GetTick>
 8009c5a:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8009c5c:	e008      	b.n	8009c70 <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8009c5e:	f7fc fca5 	bl	80065ac <HAL_GetTick>
 8009c62:	4602      	mov	r2, r0
 8009c64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c66:	1ad3      	subs	r3, r2, r3
 8009c68:	2b02      	cmp	r3, #2
 8009c6a:	d901      	bls.n	8009c70 <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 8009c6c:	2303      	movs	r3, #3
 8009c6e:	e278      	b.n	800a162 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8009c70:	4b2a      	ldr	r3, [pc, #168]	; (8009d1c <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8009c72:	681b      	ldr	r3, [r3, #0]
 8009c74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009c78:	2b00      	cmp	r3, #0
 8009c7a:	d0f0      	beq.n	8009c5e <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8009c7c:	4b26      	ldr	r3, [pc, #152]	; (8009d18 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8009c7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009c80:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009c84:	623b      	str	r3, [r7, #32]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8009c86:	6a3b      	ldr	r3, [r7, #32]
 8009c88:	2b00      	cmp	r3, #0
 8009c8a:	d02f      	beq.n	8009cec <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c90:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009c94:	6a3a      	ldr	r2, [r7, #32]
 8009c96:	429a      	cmp	r2, r3
 8009c98:	d028      	beq.n	8009cec <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8009c9a:	4b1f      	ldr	r3, [pc, #124]	; (8009d18 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8009c9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009c9e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009ca2:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8009ca4:	4b1e      	ldr	r3, [pc, #120]	; (8009d20 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8009ca6:	2201      	movs	r2, #1
 8009ca8:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8009caa:	4b1d      	ldr	r3, [pc, #116]	; (8009d20 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8009cac:	2200      	movs	r2, #0
 8009cae:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8009cb0:	4a19      	ldr	r2, [pc, #100]	; (8009d18 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8009cb2:	6a3b      	ldr	r3, [r7, #32]
 8009cb4:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8009cb6:	4b18      	ldr	r3, [pc, #96]	; (8009d18 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8009cb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009cba:	f003 0301 	and.w	r3, r3, #1
 8009cbe:	2b01      	cmp	r3, #1
 8009cc0:	d114      	bne.n	8009cec <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8009cc2:	f7fc fc73 	bl	80065ac <HAL_GetTick>
 8009cc6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009cc8:	e00a      	b.n	8009ce0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009cca:	f7fc fc6f 	bl	80065ac <HAL_GetTick>
 8009cce:	4602      	mov	r2, r0
 8009cd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cd2:	1ad3      	subs	r3, r2, r3
 8009cd4:	f241 3288 	movw	r2, #5000	; 0x1388
 8009cd8:	4293      	cmp	r3, r2
 8009cda:	d901      	bls.n	8009ce0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 8009cdc:	2303      	movs	r3, #3
 8009cde:	e240      	b.n	800a162 <HAL_RCCEx_PeriphCLKConfig+0x642>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009ce0:	4b0d      	ldr	r3, [pc, #52]	; (8009d18 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8009ce2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009ce4:	f003 0302 	and.w	r3, r3, #2
 8009ce8:	2b00      	cmp	r3, #0
 8009cea:	d0ee      	beq.n	8009cca <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009cf0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009cf4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009cf8:	d114      	bne.n	8009d24 <HAL_RCCEx_PeriphCLKConfig+0x204>
 8009cfa:	4b07      	ldr	r3, [pc, #28]	; (8009d18 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8009cfc:	689b      	ldr	r3, [r3, #8]
 8009cfe:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d06:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8009d0a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009d0e:	4902      	ldr	r1, [pc, #8]	; (8009d18 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8009d10:	4313      	orrs	r3, r2
 8009d12:	608b      	str	r3, [r1, #8]
 8009d14:	e00c      	b.n	8009d30 <HAL_RCCEx_PeriphCLKConfig+0x210>
 8009d16:	bf00      	nop
 8009d18:	40023800 	.word	0x40023800
 8009d1c:	40007000 	.word	0x40007000
 8009d20:	42470e40 	.word	0x42470e40
 8009d24:	4b4a      	ldr	r3, [pc, #296]	; (8009e50 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8009d26:	689b      	ldr	r3, [r3, #8]
 8009d28:	4a49      	ldr	r2, [pc, #292]	; (8009e50 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8009d2a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8009d2e:	6093      	str	r3, [r2, #8]
 8009d30:	4b47      	ldr	r3, [pc, #284]	; (8009e50 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8009d32:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d38:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009d3c:	4944      	ldr	r1, [pc, #272]	; (8009e50 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8009d3e:	4313      	orrs	r3, r2
 8009d40:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	681b      	ldr	r3, [r3, #0]
 8009d46:	f003 0310 	and.w	r3, r3, #16
 8009d4a:	2b00      	cmp	r3, #0
 8009d4c:	d004      	beq.n	8009d58 <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 8009d54:	4b3f      	ldr	r3, [pc, #252]	; (8009e54 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 8009d56:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	681b      	ldr	r3, [r3, #0]
 8009d5c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009d60:	2b00      	cmp	r3, #0
 8009d62:	d00a      	beq.n	8009d7a <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 8009d64:	4b3a      	ldr	r3, [pc, #232]	; (8009e50 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8009d66:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009d6a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009d72:	4937      	ldr	r1, [pc, #220]	; (8009e50 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8009d74:	4313      	orrs	r3, r2
 8009d76:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	681b      	ldr	r3, [r3, #0]
 8009d7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009d82:	2b00      	cmp	r3, #0
 8009d84:	d00a      	beq.n	8009d9c <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8009d86:	4b32      	ldr	r3, [pc, #200]	; (8009e50 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8009d88:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009d8c:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009d94:	492e      	ldr	r1, [pc, #184]	; (8009e50 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8009d96:	4313      	orrs	r3, r2
 8009d98:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	681b      	ldr	r3, [r3, #0]
 8009da0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009da4:	2b00      	cmp	r3, #0
 8009da6:	d011      	beq.n	8009dcc <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8009da8:	4b29      	ldr	r3, [pc, #164]	; (8009e50 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8009daa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009dae:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009db6:	4926      	ldr	r1, [pc, #152]	; (8009e50 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8009db8:	4313      	orrs	r3, r2
 8009dba:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009dc2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009dc6:	d101      	bne.n	8009dcc <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 8009dc8:	2301      	movs	r3, #1
 8009dca:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	681b      	ldr	r3, [r3, #0]
 8009dd0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009dd4:	2b00      	cmp	r3, #0
 8009dd6:	d00a      	beq.n	8009dee <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8009dd8:	4b1d      	ldr	r3, [pc, #116]	; (8009e50 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8009dda:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009dde:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009de6:	491a      	ldr	r1, [pc, #104]	; (8009e50 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8009de8:	4313      	orrs	r3, r2
 8009dea:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	681b      	ldr	r3, [r3, #0]
 8009df2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009df6:	2b00      	cmp	r3, #0
 8009df8:	d011      	beq.n	8009e1e <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 8009dfa:	4b15      	ldr	r3, [pc, #84]	; (8009e50 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8009dfc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009e00:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009e08:	4911      	ldr	r1, [pc, #68]	; (8009e50 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8009e0a:	4313      	orrs	r3, r2
 8009e0c:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009e14:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009e18:	d101      	bne.n	8009e1e <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 8009e1a:	2301      	movs	r3, #1
 8009e1c:	62fb      	str	r3, [r7, #44]	; 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8009e1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e20:	2b01      	cmp	r3, #1
 8009e22:	d005      	beq.n	8009e30 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	681b      	ldr	r3, [r3, #0]
 8009e28:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009e2c:	f040 80ff 	bne.w	800a02e <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8009e30:	4b09      	ldr	r3, [pc, #36]	; (8009e58 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009e32:	2200      	movs	r2, #0
 8009e34:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8009e36:	f7fc fbb9 	bl	80065ac <HAL_GetTick>
 8009e3a:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8009e3c:	e00e      	b.n	8009e5c <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8009e3e:	f7fc fbb5 	bl	80065ac <HAL_GetTick>
 8009e42:	4602      	mov	r2, r0
 8009e44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e46:	1ad3      	subs	r3, r2, r3
 8009e48:	2b02      	cmp	r3, #2
 8009e4a:	d907      	bls.n	8009e5c <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8009e4c:	2303      	movs	r3, #3
 8009e4e:	e188      	b.n	800a162 <HAL_RCCEx_PeriphCLKConfig+0x642>
 8009e50:	40023800 	.word	0x40023800
 8009e54:	424711e0 	.word	0x424711e0
 8009e58:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8009e5c:	4b7e      	ldr	r3, [pc, #504]	; (800a058 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8009e5e:	681b      	ldr	r3, [r3, #0]
 8009e60:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009e64:	2b00      	cmp	r3, #0
 8009e66:	d1ea      	bne.n	8009e3e <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	681b      	ldr	r3, [r3, #0]
 8009e6c:	f003 0301 	and.w	r3, r3, #1
 8009e70:	2b00      	cmp	r3, #0
 8009e72:	d003      	beq.n	8009e7c <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009e78:	2b00      	cmp	r3, #0
 8009e7a:	d009      	beq.n	8009e90 <HAL_RCCEx_PeriphCLKConfig+0x370>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	681b      	ldr	r3, [r3, #0]
 8009e80:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8009e84:	2b00      	cmp	r3, #0
 8009e86:	d028      	beq.n	8009eda <HAL_RCCEx_PeriphCLKConfig+0x3ba>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009e8c:	2b00      	cmp	r3, #0
 8009e8e:	d124      	bne.n	8009eda <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8009e90:	4b71      	ldr	r3, [pc, #452]	; (800a058 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8009e92:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009e96:	0c1b      	lsrs	r3, r3, #16
 8009e98:	f003 0303 	and.w	r3, r3, #3
 8009e9c:	3301      	adds	r3, #1
 8009e9e:	005b      	lsls	r3, r3, #1
 8009ea0:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8009ea2:	4b6d      	ldr	r3, [pc, #436]	; (800a058 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8009ea4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009ea8:	0e1b      	lsrs	r3, r3, #24
 8009eaa:	f003 030f 	and.w	r3, r3, #15
 8009eae:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	685a      	ldr	r2, [r3, #4]
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	689b      	ldr	r3, [r3, #8]
 8009eb8:	019b      	lsls	r3, r3, #6
 8009eba:	431a      	orrs	r2, r3
 8009ebc:	69fb      	ldr	r3, [r7, #28]
 8009ebe:	085b      	lsrs	r3, r3, #1
 8009ec0:	3b01      	subs	r3, #1
 8009ec2:	041b      	lsls	r3, r3, #16
 8009ec4:	431a      	orrs	r2, r3
 8009ec6:	69bb      	ldr	r3, [r7, #24]
 8009ec8:	061b      	lsls	r3, r3, #24
 8009eca:	431a      	orrs	r2, r3
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	695b      	ldr	r3, [r3, #20]
 8009ed0:	071b      	lsls	r3, r3, #28
 8009ed2:	4961      	ldr	r1, [pc, #388]	; (800a058 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8009ed4:	4313      	orrs	r3, r2
 8009ed6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	681b      	ldr	r3, [r3, #0]
 8009ede:	f003 0304 	and.w	r3, r3, #4
 8009ee2:	2b00      	cmp	r3, #0
 8009ee4:	d004      	beq.n	8009ef0 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009eea:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009eee:	d00a      	beq.n	8009f06 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	681b      	ldr	r3, [r3, #0]
 8009ef4:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8009ef8:	2b00      	cmp	r3, #0
 8009efa:	d035      	beq.n	8009f68 <HAL_RCCEx_PeriphCLKConfig+0x448>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009f00:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009f04:	d130      	bne.n	8009f68 <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8009f06:	4b54      	ldr	r3, [pc, #336]	; (800a058 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8009f08:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009f0c:	0c1b      	lsrs	r3, r3, #16
 8009f0e:	f003 0303 	and.w	r3, r3, #3
 8009f12:	3301      	adds	r3, #1
 8009f14:	005b      	lsls	r3, r3, #1
 8009f16:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8009f18:	4b4f      	ldr	r3, [pc, #316]	; (800a058 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8009f1a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009f1e:	0f1b      	lsrs	r3, r3, #28
 8009f20:	f003 0307 	and.w	r3, r3, #7
 8009f24:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	685a      	ldr	r2, [r3, #4]
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	689b      	ldr	r3, [r3, #8]
 8009f2e:	019b      	lsls	r3, r3, #6
 8009f30:	431a      	orrs	r2, r3
 8009f32:	69fb      	ldr	r3, [r7, #28]
 8009f34:	085b      	lsrs	r3, r3, #1
 8009f36:	3b01      	subs	r3, #1
 8009f38:	041b      	lsls	r3, r3, #16
 8009f3a:	431a      	orrs	r2, r3
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	691b      	ldr	r3, [r3, #16]
 8009f40:	061b      	lsls	r3, r3, #24
 8009f42:	431a      	orrs	r2, r3
 8009f44:	697b      	ldr	r3, [r7, #20]
 8009f46:	071b      	lsls	r3, r3, #28
 8009f48:	4943      	ldr	r1, [pc, #268]	; (800a058 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8009f4a:	4313      	orrs	r3, r2
 8009f4c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8009f50:	4b41      	ldr	r3, [pc, #260]	; (800a058 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8009f52:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009f56:	f023 021f 	bic.w	r2, r3, #31
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009f5e:	3b01      	subs	r3, #1
 8009f60:	493d      	ldr	r1, [pc, #244]	; (800a058 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8009f62:	4313      	orrs	r3, r2
 8009f64:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX) && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	681b      	ldr	r3, [r3, #0]
 8009f6c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009f70:	2b00      	cmp	r3, #0
 8009f72:	d029      	beq.n	8009fc8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009f78:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009f7c:	d124      	bne.n	8009fc8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8009f7e:	4b36      	ldr	r3, [pc, #216]	; (800a058 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8009f80:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009f84:	0c1b      	lsrs	r3, r3, #16
 8009f86:	f003 0303 	and.w	r3, r3, #3
 8009f8a:	3301      	adds	r3, #1
 8009f8c:	005b      	lsls	r3, r3, #1
 8009f8e:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8009f90:	4b31      	ldr	r3, [pc, #196]	; (800a058 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8009f92:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009f96:	0f1b      	lsrs	r3, r3, #28
 8009f98:	f003 0307 	and.w	r3, r3, #7
 8009f9c:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	685a      	ldr	r2, [r3, #4]
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	689b      	ldr	r3, [r3, #8]
 8009fa6:	019b      	lsls	r3, r3, #6
 8009fa8:	431a      	orrs	r2, r3
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	68db      	ldr	r3, [r3, #12]
 8009fae:	085b      	lsrs	r3, r3, #1
 8009fb0:	3b01      	subs	r3, #1
 8009fb2:	041b      	lsls	r3, r3, #16
 8009fb4:	431a      	orrs	r2, r3
 8009fb6:	69bb      	ldr	r3, [r7, #24]
 8009fb8:	061b      	lsls	r3, r3, #24
 8009fba:	431a      	orrs	r2, r3
 8009fbc:	697b      	ldr	r3, [r7, #20]
 8009fbe:	071b      	lsls	r3, r3, #28
 8009fc0:	4925      	ldr	r1, [pc, #148]	; (800a058 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8009fc2:	4313      	orrs	r3, r2
 8009fc4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

     /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	681b      	ldr	r3, [r3, #0]
 8009fcc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009fd0:	2b00      	cmp	r3, #0
 8009fd2:	d016      	beq.n	800a002 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	685a      	ldr	r2, [r3, #4]
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	689b      	ldr	r3, [r3, #8]
 8009fdc:	019b      	lsls	r3, r3, #6
 8009fde:	431a      	orrs	r2, r3
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	68db      	ldr	r3, [r3, #12]
 8009fe4:	085b      	lsrs	r3, r3, #1
 8009fe6:	3b01      	subs	r3, #1
 8009fe8:	041b      	lsls	r3, r3, #16
 8009fea:	431a      	orrs	r2, r3
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	691b      	ldr	r3, [r3, #16]
 8009ff0:	061b      	lsls	r3, r3, #24
 8009ff2:	431a      	orrs	r2, r3
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	695b      	ldr	r3, [r3, #20]
 8009ff8:	071b      	lsls	r3, r3, #28
 8009ffa:	4917      	ldr	r1, [pc, #92]	; (800a058 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8009ffc:	4313      	orrs	r3, r2
 8009ffe:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800a002:	4b16      	ldr	r3, [pc, #88]	; (800a05c <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 800a004:	2201      	movs	r2, #1
 800a006:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800a008:	f7fc fad0 	bl	80065ac <HAL_GetTick>
 800a00c:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800a00e:	e008      	b.n	800a022 <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800a010:	f7fc facc 	bl	80065ac <HAL_GetTick>
 800a014:	4602      	mov	r2, r0
 800a016:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a018:	1ad3      	subs	r3, r2, r3
 800a01a:	2b02      	cmp	r3, #2
 800a01c:	d901      	bls.n	800a022 <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800a01e:	2303      	movs	r3, #3
 800a020:	e09f      	b.n	800a162 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800a022:	4b0d      	ldr	r3, [pc, #52]	; (800a058 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800a024:	681b      	ldr	r3, [r3, #0]
 800a026:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a02a:	2b00      	cmp	r3, #0
 800a02c:	d0f0      	beq.n	800a010 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if(pllsaiused == 1U)
 800a02e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a030:	2b01      	cmp	r3, #1
 800a032:	f040 8095 	bne.w	800a160 <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800a036:	4b0a      	ldr	r3, [pc, #40]	; (800a060 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 800a038:	2200      	movs	r2, #0
 800a03a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800a03c:	f7fc fab6 	bl	80065ac <HAL_GetTick>
 800a040:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800a042:	e00f      	b.n	800a064 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800a044:	f7fc fab2 	bl	80065ac <HAL_GetTick>
 800a048:	4602      	mov	r2, r0
 800a04a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a04c:	1ad3      	subs	r3, r2, r3
 800a04e:	2b02      	cmp	r3, #2
 800a050:	d908      	bls.n	800a064 <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800a052:	2303      	movs	r3, #3
 800a054:	e085      	b.n	800a162 <HAL_RCCEx_PeriphCLKConfig+0x642>
 800a056:	bf00      	nop
 800a058:	40023800 	.word	0x40023800
 800a05c:	42470068 	.word	0x42470068
 800a060:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800a064:	4b41      	ldr	r3, [pc, #260]	; (800a16c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800a066:	681b      	ldr	r3, [r3, #0]
 800a068:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a06c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a070:	d0e8      	beq.n	800a044 <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	681b      	ldr	r3, [r3, #0]
 800a076:	f003 0304 	and.w	r3, r3, #4
 800a07a:	2b00      	cmp	r3, #0
 800a07c:	d003      	beq.n	800a086 <HAL_RCCEx_PeriphCLKConfig+0x566>
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a082:	2b00      	cmp	r3, #0
 800a084:	d009      	beq.n	800a09a <HAL_RCCEx_PeriphCLKConfig+0x57a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	681b      	ldr	r3, [r3, #0]
 800a08a:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 800a08e:	2b00      	cmp	r3, #0
 800a090:	d02b      	beq.n	800a0ea <HAL_RCCEx_PeriphCLKConfig+0x5ca>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a096:	2b00      	cmp	r3, #0
 800a098:	d127      	bne.n	800a0ea <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 800a09a:	4b34      	ldr	r3, [pc, #208]	; (800a16c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800a09c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a0a0:	0c1b      	lsrs	r3, r3, #16
 800a0a2:	f003 0303 	and.w	r3, r3, #3
 800a0a6:	3301      	adds	r3, #1
 800a0a8:	005b      	lsls	r3, r3, #1
 800a0aa:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, 0U);
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	699a      	ldr	r2, [r3, #24]
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	69db      	ldr	r3, [r3, #28]
 800a0b4:	019b      	lsls	r3, r3, #6
 800a0b6:	431a      	orrs	r2, r3
 800a0b8:	693b      	ldr	r3, [r7, #16]
 800a0ba:	085b      	lsrs	r3, r3, #1
 800a0bc:	3b01      	subs	r3, #1
 800a0be:	041b      	lsls	r3, r3, #16
 800a0c0:	431a      	orrs	r2, r3
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0c6:	061b      	lsls	r3, r3, #24
 800a0c8:	4928      	ldr	r1, [pc, #160]	; (800a16c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800a0ca:	4313      	orrs	r3, r2
 800a0cc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800a0d0:	4b26      	ldr	r3, [pc, #152]	; (800a16c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800a0d2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a0d6:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a0de:	3b01      	subs	r3, #1
 800a0e0:	021b      	lsls	r3, r3, #8
 800a0e2:	4922      	ldr	r1, [pc, #136]	; (800a16c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800a0e4:	4313      	orrs	r3, r2
 800a0e6:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	681b      	ldr	r3, [r3, #0]
 800a0ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a0f2:	2b00      	cmp	r3, #0
 800a0f4:	d01d      	beq.n	800a132 <HAL_RCCEx_PeriphCLKConfig+0x612>
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a0fa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a0fe:	d118      	bne.n	800a132 <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800a100:	4b1a      	ldr	r3, [pc, #104]	; (800a16c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800a102:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a106:	0e1b      	lsrs	r3, r3, #24
 800a108:	f003 030f 	and.w	r3, r3, #15
 800a10c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	699a      	ldr	r2, [r3, #24]
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	69db      	ldr	r3, [r3, #28]
 800a116:	019b      	lsls	r3, r3, #6
 800a118:	431a      	orrs	r2, r3
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	6a1b      	ldr	r3, [r3, #32]
 800a11e:	085b      	lsrs	r3, r3, #1
 800a120:	3b01      	subs	r3, #1
 800a122:	041b      	lsls	r3, r3, #16
 800a124:	431a      	orrs	r2, r3
 800a126:	68fb      	ldr	r3, [r7, #12]
 800a128:	061b      	lsls	r3, r3, #24
 800a12a:	4910      	ldr	r1, [pc, #64]	; (800a16c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800a12c:	4313      	orrs	r3, r2
 800a12e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800a132:	4b0f      	ldr	r3, [pc, #60]	; (800a170 <HAL_RCCEx_PeriphCLKConfig+0x650>)
 800a134:	2201      	movs	r2, #1
 800a136:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800a138:	f7fc fa38 	bl	80065ac <HAL_GetTick>
 800a13c:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800a13e:	e008      	b.n	800a152 <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800a140:	f7fc fa34 	bl	80065ac <HAL_GetTick>
 800a144:	4602      	mov	r2, r0
 800a146:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a148:	1ad3      	subs	r3, r2, r3
 800a14a:	2b02      	cmp	r3, #2
 800a14c:	d901      	bls.n	800a152 <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800a14e:	2303      	movs	r3, #3
 800a150:	e007      	b.n	800a162 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800a152:	4b06      	ldr	r3, [pc, #24]	; (800a16c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800a154:	681b      	ldr	r3, [r3, #0]
 800a156:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a15a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a15e:	d1ef      	bne.n	800a140 <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 800a160:	2300      	movs	r3, #0
}
 800a162:	4618      	mov	r0, r3
 800a164:	3730      	adds	r7, #48	; 0x30
 800a166:	46bd      	mov	sp, r7
 800a168:	bd80      	pop	{r7, pc}
 800a16a:	bf00      	nop
 800a16c:	40023800 	.word	0x40023800
 800a170:	42470070 	.word	0x42470070

0800a174 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800a174:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a178:	b0ae      	sub	sp, #184	; 0xb8
 800a17a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800a17c:	2300      	movs	r3, #0
 800a17e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 800a182:	2300      	movs	r3, #0
 800a184:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 800a188:	2300      	movs	r3, #0
 800a18a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 800a18e:	2300      	movs	r3, #0
 800a190:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 800a194:	2300      	movs	r3, #0
 800a196:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800a19a:	4bcb      	ldr	r3, [pc, #812]	; (800a4c8 <HAL_RCC_GetSysClockFreq+0x354>)
 800a19c:	689b      	ldr	r3, [r3, #8]
 800a19e:	f003 030c 	and.w	r3, r3, #12
 800a1a2:	2b0c      	cmp	r3, #12
 800a1a4:	f200 8206 	bhi.w	800a5b4 <HAL_RCC_GetSysClockFreq+0x440>
 800a1a8:	a201      	add	r2, pc, #4	; (adr r2, 800a1b0 <HAL_RCC_GetSysClockFreq+0x3c>)
 800a1aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a1ae:	bf00      	nop
 800a1b0:	0800a1e5 	.word	0x0800a1e5
 800a1b4:	0800a5b5 	.word	0x0800a5b5
 800a1b8:	0800a5b5 	.word	0x0800a5b5
 800a1bc:	0800a5b5 	.word	0x0800a5b5
 800a1c0:	0800a1ed 	.word	0x0800a1ed
 800a1c4:	0800a5b5 	.word	0x0800a5b5
 800a1c8:	0800a5b5 	.word	0x0800a5b5
 800a1cc:	0800a5b5 	.word	0x0800a5b5
 800a1d0:	0800a1f5 	.word	0x0800a1f5
 800a1d4:	0800a5b5 	.word	0x0800a5b5
 800a1d8:	0800a5b5 	.word	0x0800a5b5
 800a1dc:	0800a5b5 	.word	0x0800a5b5
 800a1e0:	0800a3e5 	.word	0x0800a3e5
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800a1e4:	4bb9      	ldr	r3, [pc, #740]	; (800a4cc <HAL_RCC_GetSysClockFreq+0x358>)
 800a1e6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 800a1ea:	e1e7      	b.n	800a5bc <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800a1ec:	4bb8      	ldr	r3, [pc, #736]	; (800a4d0 <HAL_RCC_GetSysClockFreq+0x35c>)
 800a1ee:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800a1f2:	e1e3      	b.n	800a5bc <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800a1f4:	4bb4      	ldr	r3, [pc, #720]	; (800a4c8 <HAL_RCC_GetSysClockFreq+0x354>)
 800a1f6:	685b      	ldr	r3, [r3, #4]
 800a1f8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a1fc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800a200:	4bb1      	ldr	r3, [pc, #708]	; (800a4c8 <HAL_RCC_GetSysClockFreq+0x354>)
 800a202:	685b      	ldr	r3, [r3, #4]
 800a204:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a208:	2b00      	cmp	r3, #0
 800a20a:	d071      	beq.n	800a2f0 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800a20c:	4bae      	ldr	r3, [pc, #696]	; (800a4c8 <HAL_RCC_GetSysClockFreq+0x354>)
 800a20e:	685b      	ldr	r3, [r3, #4]
 800a210:	099b      	lsrs	r3, r3, #6
 800a212:	2200      	movs	r2, #0
 800a214:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800a218:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 800a21c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800a220:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a224:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800a228:	2300      	movs	r3, #0
 800a22a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800a22e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800a232:	4622      	mov	r2, r4
 800a234:	462b      	mov	r3, r5
 800a236:	f04f 0000 	mov.w	r0, #0
 800a23a:	f04f 0100 	mov.w	r1, #0
 800a23e:	0159      	lsls	r1, r3, #5
 800a240:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800a244:	0150      	lsls	r0, r2, #5
 800a246:	4602      	mov	r2, r0
 800a248:	460b      	mov	r3, r1
 800a24a:	4621      	mov	r1, r4
 800a24c:	1a51      	subs	r1, r2, r1
 800a24e:	6439      	str	r1, [r7, #64]	; 0x40
 800a250:	4629      	mov	r1, r5
 800a252:	eb63 0301 	sbc.w	r3, r3, r1
 800a256:	647b      	str	r3, [r7, #68]	; 0x44
 800a258:	f04f 0200 	mov.w	r2, #0
 800a25c:	f04f 0300 	mov.w	r3, #0
 800a260:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 800a264:	4649      	mov	r1, r9
 800a266:	018b      	lsls	r3, r1, #6
 800a268:	4641      	mov	r1, r8
 800a26a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800a26e:	4641      	mov	r1, r8
 800a270:	018a      	lsls	r2, r1, #6
 800a272:	4641      	mov	r1, r8
 800a274:	1a51      	subs	r1, r2, r1
 800a276:	63b9      	str	r1, [r7, #56]	; 0x38
 800a278:	4649      	mov	r1, r9
 800a27a:	eb63 0301 	sbc.w	r3, r3, r1
 800a27e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a280:	f04f 0200 	mov.w	r2, #0
 800a284:	f04f 0300 	mov.w	r3, #0
 800a288:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 800a28c:	4649      	mov	r1, r9
 800a28e:	00cb      	lsls	r3, r1, #3
 800a290:	4641      	mov	r1, r8
 800a292:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a296:	4641      	mov	r1, r8
 800a298:	00ca      	lsls	r2, r1, #3
 800a29a:	4610      	mov	r0, r2
 800a29c:	4619      	mov	r1, r3
 800a29e:	4603      	mov	r3, r0
 800a2a0:	4622      	mov	r2, r4
 800a2a2:	189b      	adds	r3, r3, r2
 800a2a4:	633b      	str	r3, [r7, #48]	; 0x30
 800a2a6:	462b      	mov	r3, r5
 800a2a8:	460a      	mov	r2, r1
 800a2aa:	eb42 0303 	adc.w	r3, r2, r3
 800a2ae:	637b      	str	r3, [r7, #52]	; 0x34
 800a2b0:	f04f 0200 	mov.w	r2, #0
 800a2b4:	f04f 0300 	mov.w	r3, #0
 800a2b8:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800a2bc:	4629      	mov	r1, r5
 800a2be:	024b      	lsls	r3, r1, #9
 800a2c0:	4621      	mov	r1, r4
 800a2c2:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800a2c6:	4621      	mov	r1, r4
 800a2c8:	024a      	lsls	r2, r1, #9
 800a2ca:	4610      	mov	r0, r2
 800a2cc:	4619      	mov	r1, r3
 800a2ce:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800a2d2:	2200      	movs	r2, #0
 800a2d4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800a2d8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800a2dc:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 800a2e0:	f7f6 fcd2 	bl	8000c88 <__aeabi_uldivmod>
 800a2e4:	4602      	mov	r2, r0
 800a2e6:	460b      	mov	r3, r1
 800a2e8:	4613      	mov	r3, r2
 800a2ea:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800a2ee:	e067      	b.n	800a3c0 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800a2f0:	4b75      	ldr	r3, [pc, #468]	; (800a4c8 <HAL_RCC_GetSysClockFreq+0x354>)
 800a2f2:	685b      	ldr	r3, [r3, #4]
 800a2f4:	099b      	lsrs	r3, r3, #6
 800a2f6:	2200      	movs	r2, #0
 800a2f8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800a2fc:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 800a300:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800a304:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a308:	67bb      	str	r3, [r7, #120]	; 0x78
 800a30a:	2300      	movs	r3, #0
 800a30c:	67fb      	str	r3, [r7, #124]	; 0x7c
 800a30e:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 800a312:	4622      	mov	r2, r4
 800a314:	462b      	mov	r3, r5
 800a316:	f04f 0000 	mov.w	r0, #0
 800a31a:	f04f 0100 	mov.w	r1, #0
 800a31e:	0159      	lsls	r1, r3, #5
 800a320:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800a324:	0150      	lsls	r0, r2, #5
 800a326:	4602      	mov	r2, r0
 800a328:	460b      	mov	r3, r1
 800a32a:	4621      	mov	r1, r4
 800a32c:	1a51      	subs	r1, r2, r1
 800a32e:	62b9      	str	r1, [r7, #40]	; 0x28
 800a330:	4629      	mov	r1, r5
 800a332:	eb63 0301 	sbc.w	r3, r3, r1
 800a336:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a338:	f04f 0200 	mov.w	r2, #0
 800a33c:	f04f 0300 	mov.w	r3, #0
 800a340:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 800a344:	4649      	mov	r1, r9
 800a346:	018b      	lsls	r3, r1, #6
 800a348:	4641      	mov	r1, r8
 800a34a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800a34e:	4641      	mov	r1, r8
 800a350:	018a      	lsls	r2, r1, #6
 800a352:	4641      	mov	r1, r8
 800a354:	ebb2 0a01 	subs.w	sl, r2, r1
 800a358:	4649      	mov	r1, r9
 800a35a:	eb63 0b01 	sbc.w	fp, r3, r1
 800a35e:	f04f 0200 	mov.w	r2, #0
 800a362:	f04f 0300 	mov.w	r3, #0
 800a366:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800a36a:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800a36e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800a372:	4692      	mov	sl, r2
 800a374:	469b      	mov	fp, r3
 800a376:	4623      	mov	r3, r4
 800a378:	eb1a 0303 	adds.w	r3, sl, r3
 800a37c:	623b      	str	r3, [r7, #32]
 800a37e:	462b      	mov	r3, r5
 800a380:	eb4b 0303 	adc.w	r3, fp, r3
 800a384:	627b      	str	r3, [r7, #36]	; 0x24
 800a386:	f04f 0200 	mov.w	r2, #0
 800a38a:	f04f 0300 	mov.w	r3, #0
 800a38e:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 800a392:	4629      	mov	r1, r5
 800a394:	028b      	lsls	r3, r1, #10
 800a396:	4621      	mov	r1, r4
 800a398:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800a39c:	4621      	mov	r1, r4
 800a39e:	028a      	lsls	r2, r1, #10
 800a3a0:	4610      	mov	r0, r2
 800a3a2:	4619      	mov	r1, r3
 800a3a4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800a3a8:	2200      	movs	r2, #0
 800a3aa:	673b      	str	r3, [r7, #112]	; 0x70
 800a3ac:	677a      	str	r2, [r7, #116]	; 0x74
 800a3ae:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 800a3b2:	f7f6 fc69 	bl	8000c88 <__aeabi_uldivmod>
 800a3b6:	4602      	mov	r2, r0
 800a3b8:	460b      	mov	r3, r1
 800a3ba:	4613      	mov	r3, r2
 800a3bc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800a3c0:	4b41      	ldr	r3, [pc, #260]	; (800a4c8 <HAL_RCC_GetSysClockFreq+0x354>)
 800a3c2:	685b      	ldr	r3, [r3, #4]
 800a3c4:	0c1b      	lsrs	r3, r3, #16
 800a3c6:	f003 0303 	and.w	r3, r3, #3
 800a3ca:	3301      	adds	r3, #1
 800a3cc:	005b      	lsls	r3, r3, #1
 800a3ce:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 800a3d2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800a3d6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800a3da:	fbb2 f3f3 	udiv	r3, r2, r3
 800a3de:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800a3e2:	e0eb      	b.n	800a5bc <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800a3e4:	4b38      	ldr	r3, [pc, #224]	; (800a4c8 <HAL_RCC_GetSysClockFreq+0x354>)
 800a3e6:	685b      	ldr	r3, [r3, #4]
 800a3e8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a3ec:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800a3f0:	4b35      	ldr	r3, [pc, #212]	; (800a4c8 <HAL_RCC_GetSysClockFreq+0x354>)
 800a3f2:	685b      	ldr	r3, [r3, #4]
 800a3f4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a3f8:	2b00      	cmp	r3, #0
 800a3fa:	d06b      	beq.n	800a4d4 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800a3fc:	4b32      	ldr	r3, [pc, #200]	; (800a4c8 <HAL_RCC_GetSysClockFreq+0x354>)
 800a3fe:	685b      	ldr	r3, [r3, #4]
 800a400:	099b      	lsrs	r3, r3, #6
 800a402:	2200      	movs	r2, #0
 800a404:	66bb      	str	r3, [r7, #104]	; 0x68
 800a406:	66fa      	str	r2, [r7, #108]	; 0x6c
 800a408:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800a40a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a40e:	663b      	str	r3, [r7, #96]	; 0x60
 800a410:	2300      	movs	r3, #0
 800a412:	667b      	str	r3, [r7, #100]	; 0x64
 800a414:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 800a418:	4622      	mov	r2, r4
 800a41a:	462b      	mov	r3, r5
 800a41c:	f04f 0000 	mov.w	r0, #0
 800a420:	f04f 0100 	mov.w	r1, #0
 800a424:	0159      	lsls	r1, r3, #5
 800a426:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800a42a:	0150      	lsls	r0, r2, #5
 800a42c:	4602      	mov	r2, r0
 800a42e:	460b      	mov	r3, r1
 800a430:	4621      	mov	r1, r4
 800a432:	1a51      	subs	r1, r2, r1
 800a434:	61b9      	str	r1, [r7, #24]
 800a436:	4629      	mov	r1, r5
 800a438:	eb63 0301 	sbc.w	r3, r3, r1
 800a43c:	61fb      	str	r3, [r7, #28]
 800a43e:	f04f 0200 	mov.w	r2, #0
 800a442:	f04f 0300 	mov.w	r3, #0
 800a446:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 800a44a:	4659      	mov	r1, fp
 800a44c:	018b      	lsls	r3, r1, #6
 800a44e:	4651      	mov	r1, sl
 800a450:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800a454:	4651      	mov	r1, sl
 800a456:	018a      	lsls	r2, r1, #6
 800a458:	4651      	mov	r1, sl
 800a45a:	ebb2 0801 	subs.w	r8, r2, r1
 800a45e:	4659      	mov	r1, fp
 800a460:	eb63 0901 	sbc.w	r9, r3, r1
 800a464:	f04f 0200 	mov.w	r2, #0
 800a468:	f04f 0300 	mov.w	r3, #0
 800a46c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800a470:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800a474:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800a478:	4690      	mov	r8, r2
 800a47a:	4699      	mov	r9, r3
 800a47c:	4623      	mov	r3, r4
 800a47e:	eb18 0303 	adds.w	r3, r8, r3
 800a482:	613b      	str	r3, [r7, #16]
 800a484:	462b      	mov	r3, r5
 800a486:	eb49 0303 	adc.w	r3, r9, r3
 800a48a:	617b      	str	r3, [r7, #20]
 800a48c:	f04f 0200 	mov.w	r2, #0
 800a490:	f04f 0300 	mov.w	r3, #0
 800a494:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 800a498:	4629      	mov	r1, r5
 800a49a:	024b      	lsls	r3, r1, #9
 800a49c:	4621      	mov	r1, r4
 800a49e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800a4a2:	4621      	mov	r1, r4
 800a4a4:	024a      	lsls	r2, r1, #9
 800a4a6:	4610      	mov	r0, r2
 800a4a8:	4619      	mov	r1, r3
 800a4aa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800a4ae:	2200      	movs	r2, #0
 800a4b0:	65bb      	str	r3, [r7, #88]	; 0x58
 800a4b2:	65fa      	str	r2, [r7, #92]	; 0x5c
 800a4b4:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800a4b8:	f7f6 fbe6 	bl	8000c88 <__aeabi_uldivmod>
 800a4bc:	4602      	mov	r2, r0
 800a4be:	460b      	mov	r3, r1
 800a4c0:	4613      	mov	r3, r2
 800a4c2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800a4c6:	e065      	b.n	800a594 <HAL_RCC_GetSysClockFreq+0x420>
 800a4c8:	40023800 	.word	0x40023800
 800a4cc:	00f42400 	.word	0x00f42400
 800a4d0:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800a4d4:	4b3d      	ldr	r3, [pc, #244]	; (800a5cc <HAL_RCC_GetSysClockFreq+0x458>)
 800a4d6:	685b      	ldr	r3, [r3, #4]
 800a4d8:	099b      	lsrs	r3, r3, #6
 800a4da:	2200      	movs	r2, #0
 800a4dc:	4618      	mov	r0, r3
 800a4de:	4611      	mov	r1, r2
 800a4e0:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800a4e4:	653b      	str	r3, [r7, #80]	; 0x50
 800a4e6:	2300      	movs	r3, #0
 800a4e8:	657b      	str	r3, [r7, #84]	; 0x54
 800a4ea:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 800a4ee:	4642      	mov	r2, r8
 800a4f0:	464b      	mov	r3, r9
 800a4f2:	f04f 0000 	mov.w	r0, #0
 800a4f6:	f04f 0100 	mov.w	r1, #0
 800a4fa:	0159      	lsls	r1, r3, #5
 800a4fc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800a500:	0150      	lsls	r0, r2, #5
 800a502:	4602      	mov	r2, r0
 800a504:	460b      	mov	r3, r1
 800a506:	4641      	mov	r1, r8
 800a508:	1a51      	subs	r1, r2, r1
 800a50a:	60b9      	str	r1, [r7, #8]
 800a50c:	4649      	mov	r1, r9
 800a50e:	eb63 0301 	sbc.w	r3, r3, r1
 800a512:	60fb      	str	r3, [r7, #12]
 800a514:	f04f 0200 	mov.w	r2, #0
 800a518:	f04f 0300 	mov.w	r3, #0
 800a51c:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 800a520:	4659      	mov	r1, fp
 800a522:	018b      	lsls	r3, r1, #6
 800a524:	4651      	mov	r1, sl
 800a526:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800a52a:	4651      	mov	r1, sl
 800a52c:	018a      	lsls	r2, r1, #6
 800a52e:	4651      	mov	r1, sl
 800a530:	1a54      	subs	r4, r2, r1
 800a532:	4659      	mov	r1, fp
 800a534:	eb63 0501 	sbc.w	r5, r3, r1
 800a538:	f04f 0200 	mov.w	r2, #0
 800a53c:	f04f 0300 	mov.w	r3, #0
 800a540:	00eb      	lsls	r3, r5, #3
 800a542:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800a546:	00e2      	lsls	r2, r4, #3
 800a548:	4614      	mov	r4, r2
 800a54a:	461d      	mov	r5, r3
 800a54c:	4643      	mov	r3, r8
 800a54e:	18e3      	adds	r3, r4, r3
 800a550:	603b      	str	r3, [r7, #0]
 800a552:	464b      	mov	r3, r9
 800a554:	eb45 0303 	adc.w	r3, r5, r3
 800a558:	607b      	str	r3, [r7, #4]
 800a55a:	f04f 0200 	mov.w	r2, #0
 800a55e:	f04f 0300 	mov.w	r3, #0
 800a562:	e9d7 4500 	ldrd	r4, r5, [r7]
 800a566:	4629      	mov	r1, r5
 800a568:	028b      	lsls	r3, r1, #10
 800a56a:	4621      	mov	r1, r4
 800a56c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800a570:	4621      	mov	r1, r4
 800a572:	028a      	lsls	r2, r1, #10
 800a574:	4610      	mov	r0, r2
 800a576:	4619      	mov	r1, r3
 800a578:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800a57c:	2200      	movs	r2, #0
 800a57e:	64bb      	str	r3, [r7, #72]	; 0x48
 800a580:	64fa      	str	r2, [r7, #76]	; 0x4c
 800a582:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800a586:	f7f6 fb7f 	bl	8000c88 <__aeabi_uldivmod>
 800a58a:	4602      	mov	r2, r0
 800a58c:	460b      	mov	r3, r1
 800a58e:	4613      	mov	r3, r2
 800a590:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 800a594:	4b0d      	ldr	r3, [pc, #52]	; (800a5cc <HAL_RCC_GetSysClockFreq+0x458>)
 800a596:	685b      	ldr	r3, [r3, #4]
 800a598:	0f1b      	lsrs	r3, r3, #28
 800a59a:	f003 0307 	and.w	r3, r3, #7
 800a59e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 800a5a2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800a5a6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800a5aa:	fbb2 f3f3 	udiv	r3, r2, r3
 800a5ae:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800a5b2:	e003      	b.n	800a5bc <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800a5b4:	4b06      	ldr	r3, [pc, #24]	; (800a5d0 <HAL_RCC_GetSysClockFreq+0x45c>)
 800a5b6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800a5ba:	bf00      	nop
    }
  }
  return sysclockfreq;
 800a5bc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 800a5c0:	4618      	mov	r0, r3
 800a5c2:	37b8      	adds	r7, #184	; 0xb8
 800a5c4:	46bd      	mov	sp, r7
 800a5c6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a5ca:	bf00      	nop
 800a5cc:	40023800 	.word	0x40023800
 800a5d0:	00f42400 	.word	0x00f42400

0800a5d4 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800a5d4:	b580      	push	{r7, lr}
 800a5d6:	b086      	sub	sp, #24
 800a5d8:	af00      	add	r7, sp, #0
 800a5da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	2b00      	cmp	r3, #0
 800a5e0:	d101      	bne.n	800a5e6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800a5e2:	2301      	movs	r3, #1
 800a5e4:	e28d      	b.n	800ab02 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	681b      	ldr	r3, [r3, #0]
 800a5ea:	f003 0301 	and.w	r3, r3, #1
 800a5ee:	2b00      	cmp	r3, #0
 800a5f0:	f000 8083 	beq.w	800a6fa <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800a5f4:	4b94      	ldr	r3, [pc, #592]	; (800a848 <HAL_RCC_OscConfig+0x274>)
 800a5f6:	689b      	ldr	r3, [r3, #8]
 800a5f8:	f003 030c 	and.w	r3, r3, #12
 800a5fc:	2b04      	cmp	r3, #4
 800a5fe:	d019      	beq.n	800a634 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800a600:	4b91      	ldr	r3, [pc, #580]	; (800a848 <HAL_RCC_OscConfig+0x274>)
 800a602:	689b      	ldr	r3, [r3, #8]
 800a604:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800a608:	2b08      	cmp	r3, #8
 800a60a:	d106      	bne.n	800a61a <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800a60c:	4b8e      	ldr	r3, [pc, #568]	; (800a848 <HAL_RCC_OscConfig+0x274>)
 800a60e:	685b      	ldr	r3, [r3, #4]
 800a610:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a614:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a618:	d00c      	beq.n	800a634 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800a61a:	4b8b      	ldr	r3, [pc, #556]	; (800a848 <HAL_RCC_OscConfig+0x274>)
 800a61c:	689b      	ldr	r3, [r3, #8]
 800a61e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800a622:	2b0c      	cmp	r3, #12
 800a624:	d112      	bne.n	800a64c <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800a626:	4b88      	ldr	r3, [pc, #544]	; (800a848 <HAL_RCC_OscConfig+0x274>)
 800a628:	685b      	ldr	r3, [r3, #4]
 800a62a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a62e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a632:	d10b      	bne.n	800a64c <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a634:	4b84      	ldr	r3, [pc, #528]	; (800a848 <HAL_RCC_OscConfig+0x274>)
 800a636:	681b      	ldr	r3, [r3, #0]
 800a638:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a63c:	2b00      	cmp	r3, #0
 800a63e:	d05b      	beq.n	800a6f8 <HAL_RCC_OscConfig+0x124>
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	685b      	ldr	r3, [r3, #4]
 800a644:	2b00      	cmp	r3, #0
 800a646:	d157      	bne.n	800a6f8 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 800a648:	2301      	movs	r3, #1
 800a64a:	e25a      	b.n	800ab02 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	685b      	ldr	r3, [r3, #4]
 800a650:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a654:	d106      	bne.n	800a664 <HAL_RCC_OscConfig+0x90>
 800a656:	4b7c      	ldr	r3, [pc, #496]	; (800a848 <HAL_RCC_OscConfig+0x274>)
 800a658:	681b      	ldr	r3, [r3, #0]
 800a65a:	4a7b      	ldr	r2, [pc, #492]	; (800a848 <HAL_RCC_OscConfig+0x274>)
 800a65c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a660:	6013      	str	r3, [r2, #0]
 800a662:	e01d      	b.n	800a6a0 <HAL_RCC_OscConfig+0xcc>
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	685b      	ldr	r3, [r3, #4]
 800a668:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800a66c:	d10c      	bne.n	800a688 <HAL_RCC_OscConfig+0xb4>
 800a66e:	4b76      	ldr	r3, [pc, #472]	; (800a848 <HAL_RCC_OscConfig+0x274>)
 800a670:	681b      	ldr	r3, [r3, #0]
 800a672:	4a75      	ldr	r2, [pc, #468]	; (800a848 <HAL_RCC_OscConfig+0x274>)
 800a674:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800a678:	6013      	str	r3, [r2, #0]
 800a67a:	4b73      	ldr	r3, [pc, #460]	; (800a848 <HAL_RCC_OscConfig+0x274>)
 800a67c:	681b      	ldr	r3, [r3, #0]
 800a67e:	4a72      	ldr	r2, [pc, #456]	; (800a848 <HAL_RCC_OscConfig+0x274>)
 800a680:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a684:	6013      	str	r3, [r2, #0]
 800a686:	e00b      	b.n	800a6a0 <HAL_RCC_OscConfig+0xcc>
 800a688:	4b6f      	ldr	r3, [pc, #444]	; (800a848 <HAL_RCC_OscConfig+0x274>)
 800a68a:	681b      	ldr	r3, [r3, #0]
 800a68c:	4a6e      	ldr	r2, [pc, #440]	; (800a848 <HAL_RCC_OscConfig+0x274>)
 800a68e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a692:	6013      	str	r3, [r2, #0]
 800a694:	4b6c      	ldr	r3, [pc, #432]	; (800a848 <HAL_RCC_OscConfig+0x274>)
 800a696:	681b      	ldr	r3, [r3, #0]
 800a698:	4a6b      	ldr	r2, [pc, #428]	; (800a848 <HAL_RCC_OscConfig+0x274>)
 800a69a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a69e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	685b      	ldr	r3, [r3, #4]
 800a6a4:	2b00      	cmp	r3, #0
 800a6a6:	d013      	beq.n	800a6d0 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a6a8:	f7fb ff80 	bl	80065ac <HAL_GetTick>
 800a6ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a6ae:	e008      	b.n	800a6c2 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800a6b0:	f7fb ff7c 	bl	80065ac <HAL_GetTick>
 800a6b4:	4602      	mov	r2, r0
 800a6b6:	693b      	ldr	r3, [r7, #16]
 800a6b8:	1ad3      	subs	r3, r2, r3
 800a6ba:	2b64      	cmp	r3, #100	; 0x64
 800a6bc:	d901      	bls.n	800a6c2 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800a6be:	2303      	movs	r3, #3
 800a6c0:	e21f      	b.n	800ab02 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a6c2:	4b61      	ldr	r3, [pc, #388]	; (800a848 <HAL_RCC_OscConfig+0x274>)
 800a6c4:	681b      	ldr	r3, [r3, #0]
 800a6c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a6ca:	2b00      	cmp	r3, #0
 800a6cc:	d0f0      	beq.n	800a6b0 <HAL_RCC_OscConfig+0xdc>
 800a6ce:	e014      	b.n	800a6fa <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a6d0:	f7fb ff6c 	bl	80065ac <HAL_GetTick>
 800a6d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800a6d6:	e008      	b.n	800a6ea <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800a6d8:	f7fb ff68 	bl	80065ac <HAL_GetTick>
 800a6dc:	4602      	mov	r2, r0
 800a6de:	693b      	ldr	r3, [r7, #16]
 800a6e0:	1ad3      	subs	r3, r2, r3
 800a6e2:	2b64      	cmp	r3, #100	; 0x64
 800a6e4:	d901      	bls.n	800a6ea <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800a6e6:	2303      	movs	r3, #3
 800a6e8:	e20b      	b.n	800ab02 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800a6ea:	4b57      	ldr	r3, [pc, #348]	; (800a848 <HAL_RCC_OscConfig+0x274>)
 800a6ec:	681b      	ldr	r3, [r3, #0]
 800a6ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a6f2:	2b00      	cmp	r3, #0
 800a6f4:	d1f0      	bne.n	800a6d8 <HAL_RCC_OscConfig+0x104>
 800a6f6:	e000      	b.n	800a6fa <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a6f8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800a6fa:	687b      	ldr	r3, [r7, #4]
 800a6fc:	681b      	ldr	r3, [r3, #0]
 800a6fe:	f003 0302 	and.w	r3, r3, #2
 800a702:	2b00      	cmp	r3, #0
 800a704:	d06f      	beq.n	800a7e6 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800a706:	4b50      	ldr	r3, [pc, #320]	; (800a848 <HAL_RCC_OscConfig+0x274>)
 800a708:	689b      	ldr	r3, [r3, #8]
 800a70a:	f003 030c 	and.w	r3, r3, #12
 800a70e:	2b00      	cmp	r3, #0
 800a710:	d017      	beq.n	800a742 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800a712:	4b4d      	ldr	r3, [pc, #308]	; (800a848 <HAL_RCC_OscConfig+0x274>)
 800a714:	689b      	ldr	r3, [r3, #8]
 800a716:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800a71a:	2b08      	cmp	r3, #8
 800a71c:	d105      	bne.n	800a72a <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800a71e:	4b4a      	ldr	r3, [pc, #296]	; (800a848 <HAL_RCC_OscConfig+0x274>)
 800a720:	685b      	ldr	r3, [r3, #4]
 800a722:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a726:	2b00      	cmp	r3, #0
 800a728:	d00b      	beq.n	800a742 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800a72a:	4b47      	ldr	r3, [pc, #284]	; (800a848 <HAL_RCC_OscConfig+0x274>)
 800a72c:	689b      	ldr	r3, [r3, #8]
 800a72e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800a732:	2b0c      	cmp	r3, #12
 800a734:	d11c      	bne.n	800a770 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800a736:	4b44      	ldr	r3, [pc, #272]	; (800a848 <HAL_RCC_OscConfig+0x274>)
 800a738:	685b      	ldr	r3, [r3, #4]
 800a73a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a73e:	2b00      	cmp	r3, #0
 800a740:	d116      	bne.n	800a770 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800a742:	4b41      	ldr	r3, [pc, #260]	; (800a848 <HAL_RCC_OscConfig+0x274>)
 800a744:	681b      	ldr	r3, [r3, #0]
 800a746:	f003 0302 	and.w	r3, r3, #2
 800a74a:	2b00      	cmp	r3, #0
 800a74c:	d005      	beq.n	800a75a <HAL_RCC_OscConfig+0x186>
 800a74e:	687b      	ldr	r3, [r7, #4]
 800a750:	68db      	ldr	r3, [r3, #12]
 800a752:	2b01      	cmp	r3, #1
 800a754:	d001      	beq.n	800a75a <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800a756:	2301      	movs	r3, #1
 800a758:	e1d3      	b.n	800ab02 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a75a:	4b3b      	ldr	r3, [pc, #236]	; (800a848 <HAL_RCC_OscConfig+0x274>)
 800a75c:	681b      	ldr	r3, [r3, #0]
 800a75e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	691b      	ldr	r3, [r3, #16]
 800a766:	00db      	lsls	r3, r3, #3
 800a768:	4937      	ldr	r1, [pc, #220]	; (800a848 <HAL_RCC_OscConfig+0x274>)
 800a76a:	4313      	orrs	r3, r2
 800a76c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800a76e:	e03a      	b.n	800a7e6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	68db      	ldr	r3, [r3, #12]
 800a774:	2b00      	cmp	r3, #0
 800a776:	d020      	beq.n	800a7ba <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800a778:	4b34      	ldr	r3, [pc, #208]	; (800a84c <HAL_RCC_OscConfig+0x278>)
 800a77a:	2201      	movs	r2, #1
 800a77c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a77e:	f7fb ff15 	bl	80065ac <HAL_GetTick>
 800a782:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a784:	e008      	b.n	800a798 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800a786:	f7fb ff11 	bl	80065ac <HAL_GetTick>
 800a78a:	4602      	mov	r2, r0
 800a78c:	693b      	ldr	r3, [r7, #16]
 800a78e:	1ad3      	subs	r3, r2, r3
 800a790:	2b02      	cmp	r3, #2
 800a792:	d901      	bls.n	800a798 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 800a794:	2303      	movs	r3, #3
 800a796:	e1b4      	b.n	800ab02 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a798:	4b2b      	ldr	r3, [pc, #172]	; (800a848 <HAL_RCC_OscConfig+0x274>)
 800a79a:	681b      	ldr	r3, [r3, #0]
 800a79c:	f003 0302 	and.w	r3, r3, #2
 800a7a0:	2b00      	cmp	r3, #0
 800a7a2:	d0f0      	beq.n	800a786 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a7a4:	4b28      	ldr	r3, [pc, #160]	; (800a848 <HAL_RCC_OscConfig+0x274>)
 800a7a6:	681b      	ldr	r3, [r3, #0]
 800a7a8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	691b      	ldr	r3, [r3, #16]
 800a7b0:	00db      	lsls	r3, r3, #3
 800a7b2:	4925      	ldr	r1, [pc, #148]	; (800a848 <HAL_RCC_OscConfig+0x274>)
 800a7b4:	4313      	orrs	r3, r2
 800a7b6:	600b      	str	r3, [r1, #0]
 800a7b8:	e015      	b.n	800a7e6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800a7ba:	4b24      	ldr	r3, [pc, #144]	; (800a84c <HAL_RCC_OscConfig+0x278>)
 800a7bc:	2200      	movs	r2, #0
 800a7be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a7c0:	f7fb fef4 	bl	80065ac <HAL_GetTick>
 800a7c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800a7c6:	e008      	b.n	800a7da <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800a7c8:	f7fb fef0 	bl	80065ac <HAL_GetTick>
 800a7cc:	4602      	mov	r2, r0
 800a7ce:	693b      	ldr	r3, [r7, #16]
 800a7d0:	1ad3      	subs	r3, r2, r3
 800a7d2:	2b02      	cmp	r3, #2
 800a7d4:	d901      	bls.n	800a7da <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800a7d6:	2303      	movs	r3, #3
 800a7d8:	e193      	b.n	800ab02 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800a7da:	4b1b      	ldr	r3, [pc, #108]	; (800a848 <HAL_RCC_OscConfig+0x274>)
 800a7dc:	681b      	ldr	r3, [r3, #0]
 800a7de:	f003 0302 	and.w	r3, r3, #2
 800a7e2:	2b00      	cmp	r3, #0
 800a7e4:	d1f0      	bne.n	800a7c8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	681b      	ldr	r3, [r3, #0]
 800a7ea:	f003 0308 	and.w	r3, r3, #8
 800a7ee:	2b00      	cmp	r3, #0
 800a7f0:	d036      	beq.n	800a860 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	695b      	ldr	r3, [r3, #20]
 800a7f6:	2b00      	cmp	r3, #0
 800a7f8:	d016      	beq.n	800a828 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800a7fa:	4b15      	ldr	r3, [pc, #84]	; (800a850 <HAL_RCC_OscConfig+0x27c>)
 800a7fc:	2201      	movs	r2, #1
 800a7fe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a800:	f7fb fed4 	bl	80065ac <HAL_GetTick>
 800a804:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800a806:	e008      	b.n	800a81a <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800a808:	f7fb fed0 	bl	80065ac <HAL_GetTick>
 800a80c:	4602      	mov	r2, r0
 800a80e:	693b      	ldr	r3, [r7, #16]
 800a810:	1ad3      	subs	r3, r2, r3
 800a812:	2b02      	cmp	r3, #2
 800a814:	d901      	bls.n	800a81a <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800a816:	2303      	movs	r3, #3
 800a818:	e173      	b.n	800ab02 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800a81a:	4b0b      	ldr	r3, [pc, #44]	; (800a848 <HAL_RCC_OscConfig+0x274>)
 800a81c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a81e:	f003 0302 	and.w	r3, r3, #2
 800a822:	2b00      	cmp	r3, #0
 800a824:	d0f0      	beq.n	800a808 <HAL_RCC_OscConfig+0x234>
 800a826:	e01b      	b.n	800a860 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800a828:	4b09      	ldr	r3, [pc, #36]	; (800a850 <HAL_RCC_OscConfig+0x27c>)
 800a82a:	2200      	movs	r2, #0
 800a82c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a82e:	f7fb febd 	bl	80065ac <HAL_GetTick>
 800a832:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800a834:	e00e      	b.n	800a854 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800a836:	f7fb feb9 	bl	80065ac <HAL_GetTick>
 800a83a:	4602      	mov	r2, r0
 800a83c:	693b      	ldr	r3, [r7, #16]
 800a83e:	1ad3      	subs	r3, r2, r3
 800a840:	2b02      	cmp	r3, #2
 800a842:	d907      	bls.n	800a854 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 800a844:	2303      	movs	r3, #3
 800a846:	e15c      	b.n	800ab02 <HAL_RCC_OscConfig+0x52e>
 800a848:	40023800 	.word	0x40023800
 800a84c:	42470000 	.word	0x42470000
 800a850:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800a854:	4b8a      	ldr	r3, [pc, #552]	; (800aa80 <HAL_RCC_OscConfig+0x4ac>)
 800a856:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a858:	f003 0302 	and.w	r3, r3, #2
 800a85c:	2b00      	cmp	r3, #0
 800a85e:	d1ea      	bne.n	800a836 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	681b      	ldr	r3, [r3, #0]
 800a864:	f003 0304 	and.w	r3, r3, #4
 800a868:	2b00      	cmp	r3, #0
 800a86a:	f000 8097 	beq.w	800a99c <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800a86e:	2300      	movs	r3, #0
 800a870:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800a872:	4b83      	ldr	r3, [pc, #524]	; (800aa80 <HAL_RCC_OscConfig+0x4ac>)
 800a874:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a876:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a87a:	2b00      	cmp	r3, #0
 800a87c:	d10f      	bne.n	800a89e <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800a87e:	2300      	movs	r3, #0
 800a880:	60bb      	str	r3, [r7, #8]
 800a882:	4b7f      	ldr	r3, [pc, #508]	; (800aa80 <HAL_RCC_OscConfig+0x4ac>)
 800a884:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a886:	4a7e      	ldr	r2, [pc, #504]	; (800aa80 <HAL_RCC_OscConfig+0x4ac>)
 800a888:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a88c:	6413      	str	r3, [r2, #64]	; 0x40
 800a88e:	4b7c      	ldr	r3, [pc, #496]	; (800aa80 <HAL_RCC_OscConfig+0x4ac>)
 800a890:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a892:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a896:	60bb      	str	r3, [r7, #8]
 800a898:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800a89a:	2301      	movs	r3, #1
 800a89c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a89e:	4b79      	ldr	r3, [pc, #484]	; (800aa84 <HAL_RCC_OscConfig+0x4b0>)
 800a8a0:	681b      	ldr	r3, [r3, #0]
 800a8a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a8a6:	2b00      	cmp	r3, #0
 800a8a8:	d118      	bne.n	800a8dc <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800a8aa:	4b76      	ldr	r3, [pc, #472]	; (800aa84 <HAL_RCC_OscConfig+0x4b0>)
 800a8ac:	681b      	ldr	r3, [r3, #0]
 800a8ae:	4a75      	ldr	r2, [pc, #468]	; (800aa84 <HAL_RCC_OscConfig+0x4b0>)
 800a8b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a8b4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800a8b6:	f7fb fe79 	bl	80065ac <HAL_GetTick>
 800a8ba:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a8bc:	e008      	b.n	800a8d0 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a8be:	f7fb fe75 	bl	80065ac <HAL_GetTick>
 800a8c2:	4602      	mov	r2, r0
 800a8c4:	693b      	ldr	r3, [r7, #16]
 800a8c6:	1ad3      	subs	r3, r2, r3
 800a8c8:	2b02      	cmp	r3, #2
 800a8ca:	d901      	bls.n	800a8d0 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 800a8cc:	2303      	movs	r3, #3
 800a8ce:	e118      	b.n	800ab02 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a8d0:	4b6c      	ldr	r3, [pc, #432]	; (800aa84 <HAL_RCC_OscConfig+0x4b0>)
 800a8d2:	681b      	ldr	r3, [r3, #0]
 800a8d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a8d8:	2b00      	cmp	r3, #0
 800a8da:	d0f0      	beq.n	800a8be <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	689b      	ldr	r3, [r3, #8]
 800a8e0:	2b01      	cmp	r3, #1
 800a8e2:	d106      	bne.n	800a8f2 <HAL_RCC_OscConfig+0x31e>
 800a8e4:	4b66      	ldr	r3, [pc, #408]	; (800aa80 <HAL_RCC_OscConfig+0x4ac>)
 800a8e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a8e8:	4a65      	ldr	r2, [pc, #404]	; (800aa80 <HAL_RCC_OscConfig+0x4ac>)
 800a8ea:	f043 0301 	orr.w	r3, r3, #1
 800a8ee:	6713      	str	r3, [r2, #112]	; 0x70
 800a8f0:	e01c      	b.n	800a92c <HAL_RCC_OscConfig+0x358>
 800a8f2:	687b      	ldr	r3, [r7, #4]
 800a8f4:	689b      	ldr	r3, [r3, #8]
 800a8f6:	2b05      	cmp	r3, #5
 800a8f8:	d10c      	bne.n	800a914 <HAL_RCC_OscConfig+0x340>
 800a8fa:	4b61      	ldr	r3, [pc, #388]	; (800aa80 <HAL_RCC_OscConfig+0x4ac>)
 800a8fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a8fe:	4a60      	ldr	r2, [pc, #384]	; (800aa80 <HAL_RCC_OscConfig+0x4ac>)
 800a900:	f043 0304 	orr.w	r3, r3, #4
 800a904:	6713      	str	r3, [r2, #112]	; 0x70
 800a906:	4b5e      	ldr	r3, [pc, #376]	; (800aa80 <HAL_RCC_OscConfig+0x4ac>)
 800a908:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a90a:	4a5d      	ldr	r2, [pc, #372]	; (800aa80 <HAL_RCC_OscConfig+0x4ac>)
 800a90c:	f043 0301 	orr.w	r3, r3, #1
 800a910:	6713      	str	r3, [r2, #112]	; 0x70
 800a912:	e00b      	b.n	800a92c <HAL_RCC_OscConfig+0x358>
 800a914:	4b5a      	ldr	r3, [pc, #360]	; (800aa80 <HAL_RCC_OscConfig+0x4ac>)
 800a916:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a918:	4a59      	ldr	r2, [pc, #356]	; (800aa80 <HAL_RCC_OscConfig+0x4ac>)
 800a91a:	f023 0301 	bic.w	r3, r3, #1
 800a91e:	6713      	str	r3, [r2, #112]	; 0x70
 800a920:	4b57      	ldr	r3, [pc, #348]	; (800aa80 <HAL_RCC_OscConfig+0x4ac>)
 800a922:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a924:	4a56      	ldr	r2, [pc, #344]	; (800aa80 <HAL_RCC_OscConfig+0x4ac>)
 800a926:	f023 0304 	bic.w	r3, r3, #4
 800a92a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	689b      	ldr	r3, [r3, #8]
 800a930:	2b00      	cmp	r3, #0
 800a932:	d015      	beq.n	800a960 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a934:	f7fb fe3a 	bl	80065ac <HAL_GetTick>
 800a938:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a93a:	e00a      	b.n	800a952 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800a93c:	f7fb fe36 	bl	80065ac <HAL_GetTick>
 800a940:	4602      	mov	r2, r0
 800a942:	693b      	ldr	r3, [r7, #16]
 800a944:	1ad3      	subs	r3, r2, r3
 800a946:	f241 3288 	movw	r2, #5000	; 0x1388
 800a94a:	4293      	cmp	r3, r2
 800a94c:	d901      	bls.n	800a952 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800a94e:	2303      	movs	r3, #3
 800a950:	e0d7      	b.n	800ab02 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a952:	4b4b      	ldr	r3, [pc, #300]	; (800aa80 <HAL_RCC_OscConfig+0x4ac>)
 800a954:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a956:	f003 0302 	and.w	r3, r3, #2
 800a95a:	2b00      	cmp	r3, #0
 800a95c:	d0ee      	beq.n	800a93c <HAL_RCC_OscConfig+0x368>
 800a95e:	e014      	b.n	800a98a <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a960:	f7fb fe24 	bl	80065ac <HAL_GetTick>
 800a964:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800a966:	e00a      	b.n	800a97e <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800a968:	f7fb fe20 	bl	80065ac <HAL_GetTick>
 800a96c:	4602      	mov	r2, r0
 800a96e:	693b      	ldr	r3, [r7, #16]
 800a970:	1ad3      	subs	r3, r2, r3
 800a972:	f241 3288 	movw	r2, #5000	; 0x1388
 800a976:	4293      	cmp	r3, r2
 800a978:	d901      	bls.n	800a97e <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800a97a:	2303      	movs	r3, #3
 800a97c:	e0c1      	b.n	800ab02 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800a97e:	4b40      	ldr	r3, [pc, #256]	; (800aa80 <HAL_RCC_OscConfig+0x4ac>)
 800a980:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a982:	f003 0302 	and.w	r3, r3, #2
 800a986:	2b00      	cmp	r3, #0
 800a988:	d1ee      	bne.n	800a968 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800a98a:	7dfb      	ldrb	r3, [r7, #23]
 800a98c:	2b01      	cmp	r3, #1
 800a98e:	d105      	bne.n	800a99c <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800a990:	4b3b      	ldr	r3, [pc, #236]	; (800aa80 <HAL_RCC_OscConfig+0x4ac>)
 800a992:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a994:	4a3a      	ldr	r2, [pc, #232]	; (800aa80 <HAL_RCC_OscConfig+0x4ac>)
 800a996:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a99a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	699b      	ldr	r3, [r3, #24]
 800a9a0:	2b00      	cmp	r3, #0
 800a9a2:	f000 80ad 	beq.w	800ab00 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800a9a6:	4b36      	ldr	r3, [pc, #216]	; (800aa80 <HAL_RCC_OscConfig+0x4ac>)
 800a9a8:	689b      	ldr	r3, [r3, #8]
 800a9aa:	f003 030c 	and.w	r3, r3, #12
 800a9ae:	2b08      	cmp	r3, #8
 800a9b0:	d060      	beq.n	800aa74 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800a9b2:	687b      	ldr	r3, [r7, #4]
 800a9b4:	699b      	ldr	r3, [r3, #24]
 800a9b6:	2b02      	cmp	r3, #2
 800a9b8:	d145      	bne.n	800aa46 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a9ba:	4b33      	ldr	r3, [pc, #204]	; (800aa88 <HAL_RCC_OscConfig+0x4b4>)
 800a9bc:	2200      	movs	r2, #0
 800a9be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a9c0:	f7fb fdf4 	bl	80065ac <HAL_GetTick>
 800a9c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a9c6:	e008      	b.n	800a9da <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800a9c8:	f7fb fdf0 	bl	80065ac <HAL_GetTick>
 800a9cc:	4602      	mov	r2, r0
 800a9ce:	693b      	ldr	r3, [r7, #16]
 800a9d0:	1ad3      	subs	r3, r2, r3
 800a9d2:	2b02      	cmp	r3, #2
 800a9d4:	d901      	bls.n	800a9da <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800a9d6:	2303      	movs	r3, #3
 800a9d8:	e093      	b.n	800ab02 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a9da:	4b29      	ldr	r3, [pc, #164]	; (800aa80 <HAL_RCC_OscConfig+0x4ac>)
 800a9dc:	681b      	ldr	r3, [r3, #0]
 800a9de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a9e2:	2b00      	cmp	r3, #0
 800a9e4:	d1f0      	bne.n	800a9c8 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800a9e6:	687b      	ldr	r3, [r7, #4]
 800a9e8:	69da      	ldr	r2, [r3, #28]
 800a9ea:	687b      	ldr	r3, [r7, #4]
 800a9ec:	6a1b      	ldr	r3, [r3, #32]
 800a9ee:	431a      	orrs	r2, r3
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a9f4:	019b      	lsls	r3, r3, #6
 800a9f6:	431a      	orrs	r2, r3
 800a9f8:	687b      	ldr	r3, [r7, #4]
 800a9fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a9fc:	085b      	lsrs	r3, r3, #1
 800a9fe:	3b01      	subs	r3, #1
 800aa00:	041b      	lsls	r3, r3, #16
 800aa02:	431a      	orrs	r2, r3
 800aa04:	687b      	ldr	r3, [r7, #4]
 800aa06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa08:	061b      	lsls	r3, r3, #24
 800aa0a:	431a      	orrs	r2, r3
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aa10:	071b      	lsls	r3, r3, #28
 800aa12:	491b      	ldr	r1, [pc, #108]	; (800aa80 <HAL_RCC_OscConfig+0x4ac>)
 800aa14:	4313      	orrs	r3, r2
 800aa16:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800aa18:	4b1b      	ldr	r3, [pc, #108]	; (800aa88 <HAL_RCC_OscConfig+0x4b4>)
 800aa1a:	2201      	movs	r2, #1
 800aa1c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800aa1e:	f7fb fdc5 	bl	80065ac <HAL_GetTick>
 800aa22:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800aa24:	e008      	b.n	800aa38 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800aa26:	f7fb fdc1 	bl	80065ac <HAL_GetTick>
 800aa2a:	4602      	mov	r2, r0
 800aa2c:	693b      	ldr	r3, [r7, #16]
 800aa2e:	1ad3      	subs	r3, r2, r3
 800aa30:	2b02      	cmp	r3, #2
 800aa32:	d901      	bls.n	800aa38 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 800aa34:	2303      	movs	r3, #3
 800aa36:	e064      	b.n	800ab02 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800aa38:	4b11      	ldr	r3, [pc, #68]	; (800aa80 <HAL_RCC_OscConfig+0x4ac>)
 800aa3a:	681b      	ldr	r3, [r3, #0]
 800aa3c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800aa40:	2b00      	cmp	r3, #0
 800aa42:	d0f0      	beq.n	800aa26 <HAL_RCC_OscConfig+0x452>
 800aa44:	e05c      	b.n	800ab00 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800aa46:	4b10      	ldr	r3, [pc, #64]	; (800aa88 <HAL_RCC_OscConfig+0x4b4>)
 800aa48:	2200      	movs	r2, #0
 800aa4a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800aa4c:	f7fb fdae 	bl	80065ac <HAL_GetTick>
 800aa50:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800aa52:	e008      	b.n	800aa66 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800aa54:	f7fb fdaa 	bl	80065ac <HAL_GetTick>
 800aa58:	4602      	mov	r2, r0
 800aa5a:	693b      	ldr	r3, [r7, #16]
 800aa5c:	1ad3      	subs	r3, r2, r3
 800aa5e:	2b02      	cmp	r3, #2
 800aa60:	d901      	bls.n	800aa66 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800aa62:	2303      	movs	r3, #3
 800aa64:	e04d      	b.n	800ab02 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800aa66:	4b06      	ldr	r3, [pc, #24]	; (800aa80 <HAL_RCC_OscConfig+0x4ac>)
 800aa68:	681b      	ldr	r3, [r3, #0]
 800aa6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800aa6e:	2b00      	cmp	r3, #0
 800aa70:	d1f0      	bne.n	800aa54 <HAL_RCC_OscConfig+0x480>
 800aa72:	e045      	b.n	800ab00 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	699b      	ldr	r3, [r3, #24]
 800aa78:	2b01      	cmp	r3, #1
 800aa7a:	d107      	bne.n	800aa8c <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 800aa7c:	2301      	movs	r3, #1
 800aa7e:	e040      	b.n	800ab02 <HAL_RCC_OscConfig+0x52e>
 800aa80:	40023800 	.word	0x40023800
 800aa84:	40007000 	.word	0x40007000
 800aa88:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800aa8c:	4b1f      	ldr	r3, [pc, #124]	; (800ab0c <HAL_RCC_OscConfig+0x538>)
 800aa8e:	685b      	ldr	r3, [r3, #4]
 800aa90:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800aa92:	687b      	ldr	r3, [r7, #4]
 800aa94:	699b      	ldr	r3, [r3, #24]
 800aa96:	2b01      	cmp	r3, #1
 800aa98:	d030      	beq.n	800aafc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800aa9a:	68fb      	ldr	r3, [r7, #12]
 800aa9c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800aaa0:	687b      	ldr	r3, [r7, #4]
 800aaa2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800aaa4:	429a      	cmp	r2, r3
 800aaa6:	d129      	bne.n	800aafc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800aaa8:	68fb      	ldr	r3, [r7, #12]
 800aaaa:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800aaae:	687b      	ldr	r3, [r7, #4]
 800aab0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800aab2:	429a      	cmp	r2, r3
 800aab4:	d122      	bne.n	800aafc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800aab6:	68fa      	ldr	r2, [r7, #12]
 800aab8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800aabc:	4013      	ands	r3, r2
 800aabe:	687a      	ldr	r2, [r7, #4]
 800aac0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800aac2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800aac4:	4293      	cmp	r3, r2
 800aac6:	d119      	bne.n	800aafc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800aac8:	68fb      	ldr	r3, [r7, #12]
 800aaca:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800aace:	687b      	ldr	r3, [r7, #4]
 800aad0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aad2:	085b      	lsrs	r3, r3, #1
 800aad4:	3b01      	subs	r3, #1
 800aad6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800aad8:	429a      	cmp	r2, r3
 800aada:	d10f      	bne.n	800aafc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800aadc:	68fb      	ldr	r3, [r7, #12]
 800aade:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800aae2:	687b      	ldr	r3, [r7, #4]
 800aae4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aae6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800aae8:	429a      	cmp	r2, r3
 800aaea:	d107      	bne.n	800aafc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800aaec:	68fb      	ldr	r3, [r7, #12]
 800aaee:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800aaf2:	687b      	ldr	r3, [r7, #4]
 800aaf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aaf6:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800aaf8:	429a      	cmp	r2, r3
 800aafa:	d001      	beq.n	800ab00 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 800aafc:	2301      	movs	r3, #1
 800aafe:	e000      	b.n	800ab02 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 800ab00:	2300      	movs	r3, #0
}
 800ab02:	4618      	mov	r0, r3
 800ab04:	3718      	adds	r7, #24
 800ab06:	46bd      	mov	sp, r7
 800ab08:	bd80      	pop	{r7, pc}
 800ab0a:	bf00      	nop
 800ab0c:	40023800 	.word	0x40023800

0800ab10 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800ab10:	b580      	push	{r7, lr}
 800ab12:	b082      	sub	sp, #8
 800ab14:	af00      	add	r7, sp, #0
 800ab16:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800ab18:	687b      	ldr	r3, [r7, #4]
 800ab1a:	2b00      	cmp	r3, #0
 800ab1c:	d101      	bne.n	800ab22 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800ab1e:	2301      	movs	r3, #1
 800ab20:	e041      	b.n	800aba6 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800ab22:	687b      	ldr	r3, [r7, #4]
 800ab24:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ab28:	b2db      	uxtb	r3, r3
 800ab2a:	2b00      	cmp	r3, #0
 800ab2c:	d106      	bne.n	800ab3c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800ab2e:	687b      	ldr	r3, [r7, #4]
 800ab30:	2200      	movs	r2, #0
 800ab32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800ab36:	6878      	ldr	r0, [r7, #4]
 800ab38:	f7f8 f86e 	bl	8002c18 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ab3c:	687b      	ldr	r3, [r7, #4]
 800ab3e:	2202      	movs	r2, #2
 800ab40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	681a      	ldr	r2, [r3, #0]
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	3304      	adds	r3, #4
 800ab4c:	4619      	mov	r1, r3
 800ab4e:	4610      	mov	r0, r2
 800ab50:	f000 f9b8 	bl	800aec4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	2201      	movs	r2, #1
 800ab58:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ab5c:	687b      	ldr	r3, [r7, #4]
 800ab5e:	2201      	movs	r2, #1
 800ab60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800ab64:	687b      	ldr	r3, [r7, #4]
 800ab66:	2201      	movs	r2, #1
 800ab68:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	2201      	movs	r2, #1
 800ab70:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	2201      	movs	r2, #1
 800ab78:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	2201      	movs	r2, #1
 800ab80:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800ab84:	687b      	ldr	r3, [r7, #4]
 800ab86:	2201      	movs	r2, #1
 800ab88:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	2201      	movs	r2, #1
 800ab90:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ab94:	687b      	ldr	r3, [r7, #4]
 800ab96:	2201      	movs	r2, #1
 800ab98:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	2201      	movs	r2, #1
 800aba0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800aba4:	2300      	movs	r3, #0
}
 800aba6:	4618      	mov	r0, r3
 800aba8:	3708      	adds	r7, #8
 800abaa:	46bd      	mov	sp, r7
 800abac:	bd80      	pop	{r7, pc}
	...

0800abb0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800abb0:	b580      	push	{r7, lr}
 800abb2:	b084      	sub	sp, #16
 800abb4:	af00      	add	r7, sp, #0
 800abb6:	6078      	str	r0, [r7, #4]
 800abb8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800abba:	683b      	ldr	r3, [r7, #0]
 800abbc:	2b00      	cmp	r3, #0
 800abbe:	d109      	bne.n	800abd4 <HAL_TIM_PWM_Start+0x24>
 800abc0:	687b      	ldr	r3, [r7, #4]
 800abc2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800abc6:	b2db      	uxtb	r3, r3
 800abc8:	2b01      	cmp	r3, #1
 800abca:	bf14      	ite	ne
 800abcc:	2301      	movne	r3, #1
 800abce:	2300      	moveq	r3, #0
 800abd0:	b2db      	uxtb	r3, r3
 800abd2:	e022      	b.n	800ac1a <HAL_TIM_PWM_Start+0x6a>
 800abd4:	683b      	ldr	r3, [r7, #0]
 800abd6:	2b04      	cmp	r3, #4
 800abd8:	d109      	bne.n	800abee <HAL_TIM_PWM_Start+0x3e>
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800abe0:	b2db      	uxtb	r3, r3
 800abe2:	2b01      	cmp	r3, #1
 800abe4:	bf14      	ite	ne
 800abe6:	2301      	movne	r3, #1
 800abe8:	2300      	moveq	r3, #0
 800abea:	b2db      	uxtb	r3, r3
 800abec:	e015      	b.n	800ac1a <HAL_TIM_PWM_Start+0x6a>
 800abee:	683b      	ldr	r3, [r7, #0]
 800abf0:	2b08      	cmp	r3, #8
 800abf2:	d109      	bne.n	800ac08 <HAL_TIM_PWM_Start+0x58>
 800abf4:	687b      	ldr	r3, [r7, #4]
 800abf6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800abfa:	b2db      	uxtb	r3, r3
 800abfc:	2b01      	cmp	r3, #1
 800abfe:	bf14      	ite	ne
 800ac00:	2301      	movne	r3, #1
 800ac02:	2300      	moveq	r3, #0
 800ac04:	b2db      	uxtb	r3, r3
 800ac06:	e008      	b.n	800ac1a <HAL_TIM_PWM_Start+0x6a>
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ac0e:	b2db      	uxtb	r3, r3
 800ac10:	2b01      	cmp	r3, #1
 800ac12:	bf14      	ite	ne
 800ac14:	2301      	movne	r3, #1
 800ac16:	2300      	moveq	r3, #0
 800ac18:	b2db      	uxtb	r3, r3
 800ac1a:	2b00      	cmp	r3, #0
 800ac1c:	d001      	beq.n	800ac22 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800ac1e:	2301      	movs	r3, #1
 800ac20:	e07c      	b.n	800ad1c <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800ac22:	683b      	ldr	r3, [r7, #0]
 800ac24:	2b00      	cmp	r3, #0
 800ac26:	d104      	bne.n	800ac32 <HAL_TIM_PWM_Start+0x82>
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	2202      	movs	r2, #2
 800ac2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800ac30:	e013      	b.n	800ac5a <HAL_TIM_PWM_Start+0xaa>
 800ac32:	683b      	ldr	r3, [r7, #0]
 800ac34:	2b04      	cmp	r3, #4
 800ac36:	d104      	bne.n	800ac42 <HAL_TIM_PWM_Start+0x92>
 800ac38:	687b      	ldr	r3, [r7, #4]
 800ac3a:	2202      	movs	r2, #2
 800ac3c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800ac40:	e00b      	b.n	800ac5a <HAL_TIM_PWM_Start+0xaa>
 800ac42:	683b      	ldr	r3, [r7, #0]
 800ac44:	2b08      	cmp	r3, #8
 800ac46:	d104      	bne.n	800ac52 <HAL_TIM_PWM_Start+0xa2>
 800ac48:	687b      	ldr	r3, [r7, #4]
 800ac4a:	2202      	movs	r2, #2
 800ac4c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800ac50:	e003      	b.n	800ac5a <HAL_TIM_PWM_Start+0xaa>
 800ac52:	687b      	ldr	r3, [r7, #4]
 800ac54:	2202      	movs	r2, #2
 800ac56:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800ac5a:	687b      	ldr	r3, [r7, #4]
 800ac5c:	681b      	ldr	r3, [r3, #0]
 800ac5e:	2201      	movs	r2, #1
 800ac60:	6839      	ldr	r1, [r7, #0]
 800ac62:	4618      	mov	r0, r3
 800ac64:	f000 fb7e 	bl	800b364 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800ac68:	687b      	ldr	r3, [r7, #4]
 800ac6a:	681b      	ldr	r3, [r3, #0]
 800ac6c:	4a2d      	ldr	r2, [pc, #180]	; (800ad24 <HAL_TIM_PWM_Start+0x174>)
 800ac6e:	4293      	cmp	r3, r2
 800ac70:	d004      	beq.n	800ac7c <HAL_TIM_PWM_Start+0xcc>
 800ac72:	687b      	ldr	r3, [r7, #4]
 800ac74:	681b      	ldr	r3, [r3, #0]
 800ac76:	4a2c      	ldr	r2, [pc, #176]	; (800ad28 <HAL_TIM_PWM_Start+0x178>)
 800ac78:	4293      	cmp	r3, r2
 800ac7a:	d101      	bne.n	800ac80 <HAL_TIM_PWM_Start+0xd0>
 800ac7c:	2301      	movs	r3, #1
 800ac7e:	e000      	b.n	800ac82 <HAL_TIM_PWM_Start+0xd2>
 800ac80:	2300      	movs	r3, #0
 800ac82:	2b00      	cmp	r3, #0
 800ac84:	d007      	beq.n	800ac96 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800ac86:	687b      	ldr	r3, [r7, #4]
 800ac88:	681b      	ldr	r3, [r3, #0]
 800ac8a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	681b      	ldr	r3, [r3, #0]
 800ac90:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800ac94:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ac96:	687b      	ldr	r3, [r7, #4]
 800ac98:	681b      	ldr	r3, [r3, #0]
 800ac9a:	4a22      	ldr	r2, [pc, #136]	; (800ad24 <HAL_TIM_PWM_Start+0x174>)
 800ac9c:	4293      	cmp	r3, r2
 800ac9e:	d022      	beq.n	800ace6 <HAL_TIM_PWM_Start+0x136>
 800aca0:	687b      	ldr	r3, [r7, #4]
 800aca2:	681b      	ldr	r3, [r3, #0]
 800aca4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800aca8:	d01d      	beq.n	800ace6 <HAL_TIM_PWM_Start+0x136>
 800acaa:	687b      	ldr	r3, [r7, #4]
 800acac:	681b      	ldr	r3, [r3, #0]
 800acae:	4a1f      	ldr	r2, [pc, #124]	; (800ad2c <HAL_TIM_PWM_Start+0x17c>)
 800acb0:	4293      	cmp	r3, r2
 800acb2:	d018      	beq.n	800ace6 <HAL_TIM_PWM_Start+0x136>
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	681b      	ldr	r3, [r3, #0]
 800acb8:	4a1d      	ldr	r2, [pc, #116]	; (800ad30 <HAL_TIM_PWM_Start+0x180>)
 800acba:	4293      	cmp	r3, r2
 800acbc:	d013      	beq.n	800ace6 <HAL_TIM_PWM_Start+0x136>
 800acbe:	687b      	ldr	r3, [r7, #4]
 800acc0:	681b      	ldr	r3, [r3, #0]
 800acc2:	4a1c      	ldr	r2, [pc, #112]	; (800ad34 <HAL_TIM_PWM_Start+0x184>)
 800acc4:	4293      	cmp	r3, r2
 800acc6:	d00e      	beq.n	800ace6 <HAL_TIM_PWM_Start+0x136>
 800acc8:	687b      	ldr	r3, [r7, #4]
 800acca:	681b      	ldr	r3, [r3, #0]
 800accc:	4a16      	ldr	r2, [pc, #88]	; (800ad28 <HAL_TIM_PWM_Start+0x178>)
 800acce:	4293      	cmp	r3, r2
 800acd0:	d009      	beq.n	800ace6 <HAL_TIM_PWM_Start+0x136>
 800acd2:	687b      	ldr	r3, [r7, #4]
 800acd4:	681b      	ldr	r3, [r3, #0]
 800acd6:	4a18      	ldr	r2, [pc, #96]	; (800ad38 <HAL_TIM_PWM_Start+0x188>)
 800acd8:	4293      	cmp	r3, r2
 800acda:	d004      	beq.n	800ace6 <HAL_TIM_PWM_Start+0x136>
 800acdc:	687b      	ldr	r3, [r7, #4]
 800acde:	681b      	ldr	r3, [r3, #0]
 800ace0:	4a16      	ldr	r2, [pc, #88]	; (800ad3c <HAL_TIM_PWM_Start+0x18c>)
 800ace2:	4293      	cmp	r3, r2
 800ace4:	d111      	bne.n	800ad0a <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800ace6:	687b      	ldr	r3, [r7, #4]
 800ace8:	681b      	ldr	r3, [r3, #0]
 800acea:	689b      	ldr	r3, [r3, #8]
 800acec:	f003 0307 	and.w	r3, r3, #7
 800acf0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800acf2:	68fb      	ldr	r3, [r7, #12]
 800acf4:	2b06      	cmp	r3, #6
 800acf6:	d010      	beq.n	800ad1a <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 800acf8:	687b      	ldr	r3, [r7, #4]
 800acfa:	681b      	ldr	r3, [r3, #0]
 800acfc:	681a      	ldr	r2, [r3, #0]
 800acfe:	687b      	ldr	r3, [r7, #4]
 800ad00:	681b      	ldr	r3, [r3, #0]
 800ad02:	f042 0201 	orr.w	r2, r2, #1
 800ad06:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ad08:	e007      	b.n	800ad1a <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800ad0a:	687b      	ldr	r3, [r7, #4]
 800ad0c:	681b      	ldr	r3, [r3, #0]
 800ad0e:	681a      	ldr	r2, [r3, #0]
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	681b      	ldr	r3, [r3, #0]
 800ad14:	f042 0201 	orr.w	r2, r2, #1
 800ad18:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800ad1a:	2300      	movs	r3, #0
}
 800ad1c:	4618      	mov	r0, r3
 800ad1e:	3710      	adds	r7, #16
 800ad20:	46bd      	mov	sp, r7
 800ad22:	bd80      	pop	{r7, pc}
 800ad24:	40010000 	.word	0x40010000
 800ad28:	40010400 	.word	0x40010400
 800ad2c:	40000400 	.word	0x40000400
 800ad30:	40000800 	.word	0x40000800
 800ad34:	40000c00 	.word	0x40000c00
 800ad38:	40014000 	.word	0x40014000
 800ad3c:	40001800 	.word	0x40001800

0800ad40 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800ad40:	b580      	push	{r7, lr}
 800ad42:	b086      	sub	sp, #24
 800ad44:	af00      	add	r7, sp, #0
 800ad46:	60f8      	str	r0, [r7, #12]
 800ad48:	60b9      	str	r1, [r7, #8]
 800ad4a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800ad4c:	2300      	movs	r3, #0
 800ad4e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800ad50:	68fb      	ldr	r3, [r7, #12]
 800ad52:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ad56:	2b01      	cmp	r3, #1
 800ad58:	d101      	bne.n	800ad5e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800ad5a:	2302      	movs	r3, #2
 800ad5c:	e0ae      	b.n	800aebc <HAL_TIM_PWM_ConfigChannel+0x17c>
 800ad5e:	68fb      	ldr	r3, [r7, #12]
 800ad60:	2201      	movs	r2, #1
 800ad62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800ad66:	687b      	ldr	r3, [r7, #4]
 800ad68:	2b0c      	cmp	r3, #12
 800ad6a:	f200 809f 	bhi.w	800aeac <HAL_TIM_PWM_ConfigChannel+0x16c>
 800ad6e:	a201      	add	r2, pc, #4	; (adr r2, 800ad74 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800ad70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ad74:	0800ada9 	.word	0x0800ada9
 800ad78:	0800aead 	.word	0x0800aead
 800ad7c:	0800aead 	.word	0x0800aead
 800ad80:	0800aead 	.word	0x0800aead
 800ad84:	0800ade9 	.word	0x0800ade9
 800ad88:	0800aead 	.word	0x0800aead
 800ad8c:	0800aead 	.word	0x0800aead
 800ad90:	0800aead 	.word	0x0800aead
 800ad94:	0800ae2b 	.word	0x0800ae2b
 800ad98:	0800aead 	.word	0x0800aead
 800ad9c:	0800aead 	.word	0x0800aead
 800ada0:	0800aead 	.word	0x0800aead
 800ada4:	0800ae6b 	.word	0x0800ae6b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800ada8:	68fb      	ldr	r3, [r7, #12]
 800adaa:	681b      	ldr	r3, [r3, #0]
 800adac:	68b9      	ldr	r1, [r7, #8]
 800adae:	4618      	mov	r0, r3
 800adb0:	f000 f928 	bl	800b004 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800adb4:	68fb      	ldr	r3, [r7, #12]
 800adb6:	681b      	ldr	r3, [r3, #0]
 800adb8:	699a      	ldr	r2, [r3, #24]
 800adba:	68fb      	ldr	r3, [r7, #12]
 800adbc:	681b      	ldr	r3, [r3, #0]
 800adbe:	f042 0208 	orr.w	r2, r2, #8
 800adc2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800adc4:	68fb      	ldr	r3, [r7, #12]
 800adc6:	681b      	ldr	r3, [r3, #0]
 800adc8:	699a      	ldr	r2, [r3, #24]
 800adca:	68fb      	ldr	r3, [r7, #12]
 800adcc:	681b      	ldr	r3, [r3, #0]
 800adce:	f022 0204 	bic.w	r2, r2, #4
 800add2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800add4:	68fb      	ldr	r3, [r7, #12]
 800add6:	681b      	ldr	r3, [r3, #0]
 800add8:	6999      	ldr	r1, [r3, #24]
 800adda:	68bb      	ldr	r3, [r7, #8]
 800addc:	691a      	ldr	r2, [r3, #16]
 800adde:	68fb      	ldr	r3, [r7, #12]
 800ade0:	681b      	ldr	r3, [r3, #0]
 800ade2:	430a      	orrs	r2, r1
 800ade4:	619a      	str	r2, [r3, #24]
      break;
 800ade6:	e064      	b.n	800aeb2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800ade8:	68fb      	ldr	r3, [r7, #12]
 800adea:	681b      	ldr	r3, [r3, #0]
 800adec:	68b9      	ldr	r1, [r7, #8]
 800adee:	4618      	mov	r0, r3
 800adf0:	f000 f978 	bl	800b0e4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800adf4:	68fb      	ldr	r3, [r7, #12]
 800adf6:	681b      	ldr	r3, [r3, #0]
 800adf8:	699a      	ldr	r2, [r3, #24]
 800adfa:	68fb      	ldr	r3, [r7, #12]
 800adfc:	681b      	ldr	r3, [r3, #0]
 800adfe:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800ae02:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800ae04:	68fb      	ldr	r3, [r7, #12]
 800ae06:	681b      	ldr	r3, [r3, #0]
 800ae08:	699a      	ldr	r2, [r3, #24]
 800ae0a:	68fb      	ldr	r3, [r7, #12]
 800ae0c:	681b      	ldr	r3, [r3, #0]
 800ae0e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800ae12:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800ae14:	68fb      	ldr	r3, [r7, #12]
 800ae16:	681b      	ldr	r3, [r3, #0]
 800ae18:	6999      	ldr	r1, [r3, #24]
 800ae1a:	68bb      	ldr	r3, [r7, #8]
 800ae1c:	691b      	ldr	r3, [r3, #16]
 800ae1e:	021a      	lsls	r2, r3, #8
 800ae20:	68fb      	ldr	r3, [r7, #12]
 800ae22:	681b      	ldr	r3, [r3, #0]
 800ae24:	430a      	orrs	r2, r1
 800ae26:	619a      	str	r2, [r3, #24]
      break;
 800ae28:	e043      	b.n	800aeb2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800ae2a:	68fb      	ldr	r3, [r7, #12]
 800ae2c:	681b      	ldr	r3, [r3, #0]
 800ae2e:	68b9      	ldr	r1, [r7, #8]
 800ae30:	4618      	mov	r0, r3
 800ae32:	f000 f9cd 	bl	800b1d0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800ae36:	68fb      	ldr	r3, [r7, #12]
 800ae38:	681b      	ldr	r3, [r3, #0]
 800ae3a:	69da      	ldr	r2, [r3, #28]
 800ae3c:	68fb      	ldr	r3, [r7, #12]
 800ae3e:	681b      	ldr	r3, [r3, #0]
 800ae40:	f042 0208 	orr.w	r2, r2, #8
 800ae44:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800ae46:	68fb      	ldr	r3, [r7, #12]
 800ae48:	681b      	ldr	r3, [r3, #0]
 800ae4a:	69da      	ldr	r2, [r3, #28]
 800ae4c:	68fb      	ldr	r3, [r7, #12]
 800ae4e:	681b      	ldr	r3, [r3, #0]
 800ae50:	f022 0204 	bic.w	r2, r2, #4
 800ae54:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800ae56:	68fb      	ldr	r3, [r7, #12]
 800ae58:	681b      	ldr	r3, [r3, #0]
 800ae5a:	69d9      	ldr	r1, [r3, #28]
 800ae5c:	68bb      	ldr	r3, [r7, #8]
 800ae5e:	691a      	ldr	r2, [r3, #16]
 800ae60:	68fb      	ldr	r3, [r7, #12]
 800ae62:	681b      	ldr	r3, [r3, #0]
 800ae64:	430a      	orrs	r2, r1
 800ae66:	61da      	str	r2, [r3, #28]
      break;
 800ae68:	e023      	b.n	800aeb2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800ae6a:	68fb      	ldr	r3, [r7, #12]
 800ae6c:	681b      	ldr	r3, [r3, #0]
 800ae6e:	68b9      	ldr	r1, [r7, #8]
 800ae70:	4618      	mov	r0, r3
 800ae72:	f000 fa21 	bl	800b2b8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800ae76:	68fb      	ldr	r3, [r7, #12]
 800ae78:	681b      	ldr	r3, [r3, #0]
 800ae7a:	69da      	ldr	r2, [r3, #28]
 800ae7c:	68fb      	ldr	r3, [r7, #12]
 800ae7e:	681b      	ldr	r3, [r3, #0]
 800ae80:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800ae84:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800ae86:	68fb      	ldr	r3, [r7, #12]
 800ae88:	681b      	ldr	r3, [r3, #0]
 800ae8a:	69da      	ldr	r2, [r3, #28]
 800ae8c:	68fb      	ldr	r3, [r7, #12]
 800ae8e:	681b      	ldr	r3, [r3, #0]
 800ae90:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800ae94:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800ae96:	68fb      	ldr	r3, [r7, #12]
 800ae98:	681b      	ldr	r3, [r3, #0]
 800ae9a:	69d9      	ldr	r1, [r3, #28]
 800ae9c:	68bb      	ldr	r3, [r7, #8]
 800ae9e:	691b      	ldr	r3, [r3, #16]
 800aea0:	021a      	lsls	r2, r3, #8
 800aea2:	68fb      	ldr	r3, [r7, #12]
 800aea4:	681b      	ldr	r3, [r3, #0]
 800aea6:	430a      	orrs	r2, r1
 800aea8:	61da      	str	r2, [r3, #28]
      break;
 800aeaa:	e002      	b.n	800aeb2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800aeac:	2301      	movs	r3, #1
 800aeae:	75fb      	strb	r3, [r7, #23]
      break;
 800aeb0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800aeb2:	68fb      	ldr	r3, [r7, #12]
 800aeb4:	2200      	movs	r2, #0
 800aeb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800aeba:	7dfb      	ldrb	r3, [r7, #23]
}
 800aebc:	4618      	mov	r0, r3
 800aebe:	3718      	adds	r7, #24
 800aec0:	46bd      	mov	sp, r7
 800aec2:	bd80      	pop	{r7, pc}

0800aec4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800aec4:	b480      	push	{r7}
 800aec6:	b085      	sub	sp, #20
 800aec8:	af00      	add	r7, sp, #0
 800aeca:	6078      	str	r0, [r7, #4]
 800aecc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800aece:	687b      	ldr	r3, [r7, #4]
 800aed0:	681b      	ldr	r3, [r3, #0]
 800aed2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800aed4:	687b      	ldr	r3, [r7, #4]
 800aed6:	4a40      	ldr	r2, [pc, #256]	; (800afd8 <TIM_Base_SetConfig+0x114>)
 800aed8:	4293      	cmp	r3, r2
 800aeda:	d013      	beq.n	800af04 <TIM_Base_SetConfig+0x40>
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800aee2:	d00f      	beq.n	800af04 <TIM_Base_SetConfig+0x40>
 800aee4:	687b      	ldr	r3, [r7, #4]
 800aee6:	4a3d      	ldr	r2, [pc, #244]	; (800afdc <TIM_Base_SetConfig+0x118>)
 800aee8:	4293      	cmp	r3, r2
 800aeea:	d00b      	beq.n	800af04 <TIM_Base_SetConfig+0x40>
 800aeec:	687b      	ldr	r3, [r7, #4]
 800aeee:	4a3c      	ldr	r2, [pc, #240]	; (800afe0 <TIM_Base_SetConfig+0x11c>)
 800aef0:	4293      	cmp	r3, r2
 800aef2:	d007      	beq.n	800af04 <TIM_Base_SetConfig+0x40>
 800aef4:	687b      	ldr	r3, [r7, #4]
 800aef6:	4a3b      	ldr	r2, [pc, #236]	; (800afe4 <TIM_Base_SetConfig+0x120>)
 800aef8:	4293      	cmp	r3, r2
 800aefa:	d003      	beq.n	800af04 <TIM_Base_SetConfig+0x40>
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	4a3a      	ldr	r2, [pc, #232]	; (800afe8 <TIM_Base_SetConfig+0x124>)
 800af00:	4293      	cmp	r3, r2
 800af02:	d108      	bne.n	800af16 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800af04:	68fb      	ldr	r3, [r7, #12]
 800af06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800af0a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800af0c:	683b      	ldr	r3, [r7, #0]
 800af0e:	685b      	ldr	r3, [r3, #4]
 800af10:	68fa      	ldr	r2, [r7, #12]
 800af12:	4313      	orrs	r3, r2
 800af14:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800af16:	687b      	ldr	r3, [r7, #4]
 800af18:	4a2f      	ldr	r2, [pc, #188]	; (800afd8 <TIM_Base_SetConfig+0x114>)
 800af1a:	4293      	cmp	r3, r2
 800af1c:	d02b      	beq.n	800af76 <TIM_Base_SetConfig+0xb2>
 800af1e:	687b      	ldr	r3, [r7, #4]
 800af20:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800af24:	d027      	beq.n	800af76 <TIM_Base_SetConfig+0xb2>
 800af26:	687b      	ldr	r3, [r7, #4]
 800af28:	4a2c      	ldr	r2, [pc, #176]	; (800afdc <TIM_Base_SetConfig+0x118>)
 800af2a:	4293      	cmp	r3, r2
 800af2c:	d023      	beq.n	800af76 <TIM_Base_SetConfig+0xb2>
 800af2e:	687b      	ldr	r3, [r7, #4]
 800af30:	4a2b      	ldr	r2, [pc, #172]	; (800afe0 <TIM_Base_SetConfig+0x11c>)
 800af32:	4293      	cmp	r3, r2
 800af34:	d01f      	beq.n	800af76 <TIM_Base_SetConfig+0xb2>
 800af36:	687b      	ldr	r3, [r7, #4]
 800af38:	4a2a      	ldr	r2, [pc, #168]	; (800afe4 <TIM_Base_SetConfig+0x120>)
 800af3a:	4293      	cmp	r3, r2
 800af3c:	d01b      	beq.n	800af76 <TIM_Base_SetConfig+0xb2>
 800af3e:	687b      	ldr	r3, [r7, #4]
 800af40:	4a29      	ldr	r2, [pc, #164]	; (800afe8 <TIM_Base_SetConfig+0x124>)
 800af42:	4293      	cmp	r3, r2
 800af44:	d017      	beq.n	800af76 <TIM_Base_SetConfig+0xb2>
 800af46:	687b      	ldr	r3, [r7, #4]
 800af48:	4a28      	ldr	r2, [pc, #160]	; (800afec <TIM_Base_SetConfig+0x128>)
 800af4a:	4293      	cmp	r3, r2
 800af4c:	d013      	beq.n	800af76 <TIM_Base_SetConfig+0xb2>
 800af4e:	687b      	ldr	r3, [r7, #4]
 800af50:	4a27      	ldr	r2, [pc, #156]	; (800aff0 <TIM_Base_SetConfig+0x12c>)
 800af52:	4293      	cmp	r3, r2
 800af54:	d00f      	beq.n	800af76 <TIM_Base_SetConfig+0xb2>
 800af56:	687b      	ldr	r3, [r7, #4]
 800af58:	4a26      	ldr	r2, [pc, #152]	; (800aff4 <TIM_Base_SetConfig+0x130>)
 800af5a:	4293      	cmp	r3, r2
 800af5c:	d00b      	beq.n	800af76 <TIM_Base_SetConfig+0xb2>
 800af5e:	687b      	ldr	r3, [r7, #4]
 800af60:	4a25      	ldr	r2, [pc, #148]	; (800aff8 <TIM_Base_SetConfig+0x134>)
 800af62:	4293      	cmp	r3, r2
 800af64:	d007      	beq.n	800af76 <TIM_Base_SetConfig+0xb2>
 800af66:	687b      	ldr	r3, [r7, #4]
 800af68:	4a24      	ldr	r2, [pc, #144]	; (800affc <TIM_Base_SetConfig+0x138>)
 800af6a:	4293      	cmp	r3, r2
 800af6c:	d003      	beq.n	800af76 <TIM_Base_SetConfig+0xb2>
 800af6e:	687b      	ldr	r3, [r7, #4]
 800af70:	4a23      	ldr	r2, [pc, #140]	; (800b000 <TIM_Base_SetConfig+0x13c>)
 800af72:	4293      	cmp	r3, r2
 800af74:	d108      	bne.n	800af88 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800af76:	68fb      	ldr	r3, [r7, #12]
 800af78:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800af7c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800af7e:	683b      	ldr	r3, [r7, #0]
 800af80:	68db      	ldr	r3, [r3, #12]
 800af82:	68fa      	ldr	r2, [r7, #12]
 800af84:	4313      	orrs	r3, r2
 800af86:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800af88:	68fb      	ldr	r3, [r7, #12]
 800af8a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800af8e:	683b      	ldr	r3, [r7, #0]
 800af90:	695b      	ldr	r3, [r3, #20]
 800af92:	4313      	orrs	r3, r2
 800af94:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800af96:	687b      	ldr	r3, [r7, #4]
 800af98:	68fa      	ldr	r2, [r7, #12]
 800af9a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800af9c:	683b      	ldr	r3, [r7, #0]
 800af9e:	689a      	ldr	r2, [r3, #8]
 800afa0:	687b      	ldr	r3, [r7, #4]
 800afa2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800afa4:	683b      	ldr	r3, [r7, #0]
 800afa6:	681a      	ldr	r2, [r3, #0]
 800afa8:	687b      	ldr	r3, [r7, #4]
 800afaa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800afac:	687b      	ldr	r3, [r7, #4]
 800afae:	4a0a      	ldr	r2, [pc, #40]	; (800afd8 <TIM_Base_SetConfig+0x114>)
 800afb0:	4293      	cmp	r3, r2
 800afb2:	d003      	beq.n	800afbc <TIM_Base_SetConfig+0xf8>
 800afb4:	687b      	ldr	r3, [r7, #4]
 800afb6:	4a0c      	ldr	r2, [pc, #48]	; (800afe8 <TIM_Base_SetConfig+0x124>)
 800afb8:	4293      	cmp	r3, r2
 800afba:	d103      	bne.n	800afc4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800afbc:	683b      	ldr	r3, [r7, #0]
 800afbe:	691a      	ldr	r2, [r3, #16]
 800afc0:	687b      	ldr	r3, [r7, #4]
 800afc2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800afc4:	687b      	ldr	r3, [r7, #4]
 800afc6:	2201      	movs	r2, #1
 800afc8:	615a      	str	r2, [r3, #20]
}
 800afca:	bf00      	nop
 800afcc:	3714      	adds	r7, #20
 800afce:	46bd      	mov	sp, r7
 800afd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afd4:	4770      	bx	lr
 800afd6:	bf00      	nop
 800afd8:	40010000 	.word	0x40010000
 800afdc:	40000400 	.word	0x40000400
 800afe0:	40000800 	.word	0x40000800
 800afe4:	40000c00 	.word	0x40000c00
 800afe8:	40010400 	.word	0x40010400
 800afec:	40014000 	.word	0x40014000
 800aff0:	40014400 	.word	0x40014400
 800aff4:	40014800 	.word	0x40014800
 800aff8:	40001800 	.word	0x40001800
 800affc:	40001c00 	.word	0x40001c00
 800b000:	40002000 	.word	0x40002000

0800b004 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b004:	b480      	push	{r7}
 800b006:	b087      	sub	sp, #28
 800b008:	af00      	add	r7, sp, #0
 800b00a:	6078      	str	r0, [r7, #4]
 800b00c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b00e:	687b      	ldr	r3, [r7, #4]
 800b010:	6a1b      	ldr	r3, [r3, #32]
 800b012:	f023 0201 	bic.w	r2, r3, #1
 800b016:	687b      	ldr	r3, [r7, #4]
 800b018:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b01a:	687b      	ldr	r3, [r7, #4]
 800b01c:	6a1b      	ldr	r3, [r3, #32]
 800b01e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b020:	687b      	ldr	r3, [r7, #4]
 800b022:	685b      	ldr	r3, [r3, #4]
 800b024:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b026:	687b      	ldr	r3, [r7, #4]
 800b028:	699b      	ldr	r3, [r3, #24]
 800b02a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800b02c:	68fb      	ldr	r3, [r7, #12]
 800b02e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b032:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800b034:	68fb      	ldr	r3, [r7, #12]
 800b036:	f023 0303 	bic.w	r3, r3, #3
 800b03a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b03c:	683b      	ldr	r3, [r7, #0]
 800b03e:	681b      	ldr	r3, [r3, #0]
 800b040:	68fa      	ldr	r2, [r7, #12]
 800b042:	4313      	orrs	r3, r2
 800b044:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800b046:	697b      	ldr	r3, [r7, #20]
 800b048:	f023 0302 	bic.w	r3, r3, #2
 800b04c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800b04e:	683b      	ldr	r3, [r7, #0]
 800b050:	689b      	ldr	r3, [r3, #8]
 800b052:	697a      	ldr	r2, [r7, #20]
 800b054:	4313      	orrs	r3, r2
 800b056:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800b058:	687b      	ldr	r3, [r7, #4]
 800b05a:	4a20      	ldr	r2, [pc, #128]	; (800b0dc <TIM_OC1_SetConfig+0xd8>)
 800b05c:	4293      	cmp	r3, r2
 800b05e:	d003      	beq.n	800b068 <TIM_OC1_SetConfig+0x64>
 800b060:	687b      	ldr	r3, [r7, #4]
 800b062:	4a1f      	ldr	r2, [pc, #124]	; (800b0e0 <TIM_OC1_SetConfig+0xdc>)
 800b064:	4293      	cmp	r3, r2
 800b066:	d10c      	bne.n	800b082 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800b068:	697b      	ldr	r3, [r7, #20]
 800b06a:	f023 0308 	bic.w	r3, r3, #8
 800b06e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800b070:	683b      	ldr	r3, [r7, #0]
 800b072:	68db      	ldr	r3, [r3, #12]
 800b074:	697a      	ldr	r2, [r7, #20]
 800b076:	4313      	orrs	r3, r2
 800b078:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800b07a:	697b      	ldr	r3, [r7, #20]
 800b07c:	f023 0304 	bic.w	r3, r3, #4
 800b080:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b082:	687b      	ldr	r3, [r7, #4]
 800b084:	4a15      	ldr	r2, [pc, #84]	; (800b0dc <TIM_OC1_SetConfig+0xd8>)
 800b086:	4293      	cmp	r3, r2
 800b088:	d003      	beq.n	800b092 <TIM_OC1_SetConfig+0x8e>
 800b08a:	687b      	ldr	r3, [r7, #4]
 800b08c:	4a14      	ldr	r2, [pc, #80]	; (800b0e0 <TIM_OC1_SetConfig+0xdc>)
 800b08e:	4293      	cmp	r3, r2
 800b090:	d111      	bne.n	800b0b6 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800b092:	693b      	ldr	r3, [r7, #16]
 800b094:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b098:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800b09a:	693b      	ldr	r3, [r7, #16]
 800b09c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800b0a0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800b0a2:	683b      	ldr	r3, [r7, #0]
 800b0a4:	695b      	ldr	r3, [r3, #20]
 800b0a6:	693a      	ldr	r2, [r7, #16]
 800b0a8:	4313      	orrs	r3, r2
 800b0aa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800b0ac:	683b      	ldr	r3, [r7, #0]
 800b0ae:	699b      	ldr	r3, [r3, #24]
 800b0b0:	693a      	ldr	r2, [r7, #16]
 800b0b2:	4313      	orrs	r3, r2
 800b0b4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b0b6:	687b      	ldr	r3, [r7, #4]
 800b0b8:	693a      	ldr	r2, [r7, #16]
 800b0ba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b0bc:	687b      	ldr	r3, [r7, #4]
 800b0be:	68fa      	ldr	r2, [r7, #12]
 800b0c0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800b0c2:	683b      	ldr	r3, [r7, #0]
 800b0c4:	685a      	ldr	r2, [r3, #4]
 800b0c6:	687b      	ldr	r3, [r7, #4]
 800b0c8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b0ca:	687b      	ldr	r3, [r7, #4]
 800b0cc:	697a      	ldr	r2, [r7, #20]
 800b0ce:	621a      	str	r2, [r3, #32]
}
 800b0d0:	bf00      	nop
 800b0d2:	371c      	adds	r7, #28
 800b0d4:	46bd      	mov	sp, r7
 800b0d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0da:	4770      	bx	lr
 800b0dc:	40010000 	.word	0x40010000
 800b0e0:	40010400 	.word	0x40010400

0800b0e4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b0e4:	b480      	push	{r7}
 800b0e6:	b087      	sub	sp, #28
 800b0e8:	af00      	add	r7, sp, #0
 800b0ea:	6078      	str	r0, [r7, #4]
 800b0ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b0ee:	687b      	ldr	r3, [r7, #4]
 800b0f0:	6a1b      	ldr	r3, [r3, #32]
 800b0f2:	f023 0210 	bic.w	r2, r3, #16
 800b0f6:	687b      	ldr	r3, [r7, #4]
 800b0f8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b0fa:	687b      	ldr	r3, [r7, #4]
 800b0fc:	6a1b      	ldr	r3, [r3, #32]
 800b0fe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b100:	687b      	ldr	r3, [r7, #4]
 800b102:	685b      	ldr	r3, [r3, #4]
 800b104:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b106:	687b      	ldr	r3, [r7, #4]
 800b108:	699b      	ldr	r3, [r3, #24]
 800b10a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800b10c:	68fb      	ldr	r3, [r7, #12]
 800b10e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b112:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800b114:	68fb      	ldr	r3, [r7, #12]
 800b116:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b11a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b11c:	683b      	ldr	r3, [r7, #0]
 800b11e:	681b      	ldr	r3, [r3, #0]
 800b120:	021b      	lsls	r3, r3, #8
 800b122:	68fa      	ldr	r2, [r7, #12]
 800b124:	4313      	orrs	r3, r2
 800b126:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800b128:	697b      	ldr	r3, [r7, #20]
 800b12a:	f023 0320 	bic.w	r3, r3, #32
 800b12e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800b130:	683b      	ldr	r3, [r7, #0]
 800b132:	689b      	ldr	r3, [r3, #8]
 800b134:	011b      	lsls	r3, r3, #4
 800b136:	697a      	ldr	r2, [r7, #20]
 800b138:	4313      	orrs	r3, r2
 800b13a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800b13c:	687b      	ldr	r3, [r7, #4]
 800b13e:	4a22      	ldr	r2, [pc, #136]	; (800b1c8 <TIM_OC2_SetConfig+0xe4>)
 800b140:	4293      	cmp	r3, r2
 800b142:	d003      	beq.n	800b14c <TIM_OC2_SetConfig+0x68>
 800b144:	687b      	ldr	r3, [r7, #4]
 800b146:	4a21      	ldr	r2, [pc, #132]	; (800b1cc <TIM_OC2_SetConfig+0xe8>)
 800b148:	4293      	cmp	r3, r2
 800b14a:	d10d      	bne.n	800b168 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800b14c:	697b      	ldr	r3, [r7, #20]
 800b14e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b152:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800b154:	683b      	ldr	r3, [r7, #0]
 800b156:	68db      	ldr	r3, [r3, #12]
 800b158:	011b      	lsls	r3, r3, #4
 800b15a:	697a      	ldr	r2, [r7, #20]
 800b15c:	4313      	orrs	r3, r2
 800b15e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800b160:	697b      	ldr	r3, [r7, #20]
 800b162:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b166:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b168:	687b      	ldr	r3, [r7, #4]
 800b16a:	4a17      	ldr	r2, [pc, #92]	; (800b1c8 <TIM_OC2_SetConfig+0xe4>)
 800b16c:	4293      	cmp	r3, r2
 800b16e:	d003      	beq.n	800b178 <TIM_OC2_SetConfig+0x94>
 800b170:	687b      	ldr	r3, [r7, #4]
 800b172:	4a16      	ldr	r2, [pc, #88]	; (800b1cc <TIM_OC2_SetConfig+0xe8>)
 800b174:	4293      	cmp	r3, r2
 800b176:	d113      	bne.n	800b1a0 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800b178:	693b      	ldr	r3, [r7, #16]
 800b17a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800b17e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800b180:	693b      	ldr	r3, [r7, #16]
 800b182:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800b186:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800b188:	683b      	ldr	r3, [r7, #0]
 800b18a:	695b      	ldr	r3, [r3, #20]
 800b18c:	009b      	lsls	r3, r3, #2
 800b18e:	693a      	ldr	r2, [r7, #16]
 800b190:	4313      	orrs	r3, r2
 800b192:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800b194:	683b      	ldr	r3, [r7, #0]
 800b196:	699b      	ldr	r3, [r3, #24]
 800b198:	009b      	lsls	r3, r3, #2
 800b19a:	693a      	ldr	r2, [r7, #16]
 800b19c:	4313      	orrs	r3, r2
 800b19e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b1a0:	687b      	ldr	r3, [r7, #4]
 800b1a2:	693a      	ldr	r2, [r7, #16]
 800b1a4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b1a6:	687b      	ldr	r3, [r7, #4]
 800b1a8:	68fa      	ldr	r2, [r7, #12]
 800b1aa:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800b1ac:	683b      	ldr	r3, [r7, #0]
 800b1ae:	685a      	ldr	r2, [r3, #4]
 800b1b0:	687b      	ldr	r3, [r7, #4]
 800b1b2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b1b4:	687b      	ldr	r3, [r7, #4]
 800b1b6:	697a      	ldr	r2, [r7, #20]
 800b1b8:	621a      	str	r2, [r3, #32]
}
 800b1ba:	bf00      	nop
 800b1bc:	371c      	adds	r7, #28
 800b1be:	46bd      	mov	sp, r7
 800b1c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1c4:	4770      	bx	lr
 800b1c6:	bf00      	nop
 800b1c8:	40010000 	.word	0x40010000
 800b1cc:	40010400 	.word	0x40010400

0800b1d0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b1d0:	b480      	push	{r7}
 800b1d2:	b087      	sub	sp, #28
 800b1d4:	af00      	add	r7, sp, #0
 800b1d6:	6078      	str	r0, [r7, #4]
 800b1d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800b1da:	687b      	ldr	r3, [r7, #4]
 800b1dc:	6a1b      	ldr	r3, [r3, #32]
 800b1de:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800b1e2:	687b      	ldr	r3, [r7, #4]
 800b1e4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b1e6:	687b      	ldr	r3, [r7, #4]
 800b1e8:	6a1b      	ldr	r3, [r3, #32]
 800b1ea:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b1ec:	687b      	ldr	r3, [r7, #4]
 800b1ee:	685b      	ldr	r3, [r3, #4]
 800b1f0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b1f2:	687b      	ldr	r3, [r7, #4]
 800b1f4:	69db      	ldr	r3, [r3, #28]
 800b1f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800b1f8:	68fb      	ldr	r3, [r7, #12]
 800b1fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b1fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800b200:	68fb      	ldr	r3, [r7, #12]
 800b202:	f023 0303 	bic.w	r3, r3, #3
 800b206:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b208:	683b      	ldr	r3, [r7, #0]
 800b20a:	681b      	ldr	r3, [r3, #0]
 800b20c:	68fa      	ldr	r2, [r7, #12]
 800b20e:	4313      	orrs	r3, r2
 800b210:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800b212:	697b      	ldr	r3, [r7, #20]
 800b214:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800b218:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800b21a:	683b      	ldr	r3, [r7, #0]
 800b21c:	689b      	ldr	r3, [r3, #8]
 800b21e:	021b      	lsls	r3, r3, #8
 800b220:	697a      	ldr	r2, [r7, #20]
 800b222:	4313      	orrs	r3, r2
 800b224:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800b226:	687b      	ldr	r3, [r7, #4]
 800b228:	4a21      	ldr	r2, [pc, #132]	; (800b2b0 <TIM_OC3_SetConfig+0xe0>)
 800b22a:	4293      	cmp	r3, r2
 800b22c:	d003      	beq.n	800b236 <TIM_OC3_SetConfig+0x66>
 800b22e:	687b      	ldr	r3, [r7, #4]
 800b230:	4a20      	ldr	r2, [pc, #128]	; (800b2b4 <TIM_OC3_SetConfig+0xe4>)
 800b232:	4293      	cmp	r3, r2
 800b234:	d10d      	bne.n	800b252 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800b236:	697b      	ldr	r3, [r7, #20]
 800b238:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800b23c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800b23e:	683b      	ldr	r3, [r7, #0]
 800b240:	68db      	ldr	r3, [r3, #12]
 800b242:	021b      	lsls	r3, r3, #8
 800b244:	697a      	ldr	r2, [r7, #20]
 800b246:	4313      	orrs	r3, r2
 800b248:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800b24a:	697b      	ldr	r3, [r7, #20]
 800b24c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800b250:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b252:	687b      	ldr	r3, [r7, #4]
 800b254:	4a16      	ldr	r2, [pc, #88]	; (800b2b0 <TIM_OC3_SetConfig+0xe0>)
 800b256:	4293      	cmp	r3, r2
 800b258:	d003      	beq.n	800b262 <TIM_OC3_SetConfig+0x92>
 800b25a:	687b      	ldr	r3, [r7, #4]
 800b25c:	4a15      	ldr	r2, [pc, #84]	; (800b2b4 <TIM_OC3_SetConfig+0xe4>)
 800b25e:	4293      	cmp	r3, r2
 800b260:	d113      	bne.n	800b28a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800b262:	693b      	ldr	r3, [r7, #16]
 800b264:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b268:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800b26a:	693b      	ldr	r3, [r7, #16]
 800b26c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800b270:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800b272:	683b      	ldr	r3, [r7, #0]
 800b274:	695b      	ldr	r3, [r3, #20]
 800b276:	011b      	lsls	r3, r3, #4
 800b278:	693a      	ldr	r2, [r7, #16]
 800b27a:	4313      	orrs	r3, r2
 800b27c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800b27e:	683b      	ldr	r3, [r7, #0]
 800b280:	699b      	ldr	r3, [r3, #24]
 800b282:	011b      	lsls	r3, r3, #4
 800b284:	693a      	ldr	r2, [r7, #16]
 800b286:	4313      	orrs	r3, r2
 800b288:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b28a:	687b      	ldr	r3, [r7, #4]
 800b28c:	693a      	ldr	r2, [r7, #16]
 800b28e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b290:	687b      	ldr	r3, [r7, #4]
 800b292:	68fa      	ldr	r2, [r7, #12]
 800b294:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800b296:	683b      	ldr	r3, [r7, #0]
 800b298:	685a      	ldr	r2, [r3, #4]
 800b29a:	687b      	ldr	r3, [r7, #4]
 800b29c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b29e:	687b      	ldr	r3, [r7, #4]
 800b2a0:	697a      	ldr	r2, [r7, #20]
 800b2a2:	621a      	str	r2, [r3, #32]
}
 800b2a4:	bf00      	nop
 800b2a6:	371c      	adds	r7, #28
 800b2a8:	46bd      	mov	sp, r7
 800b2aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2ae:	4770      	bx	lr
 800b2b0:	40010000 	.word	0x40010000
 800b2b4:	40010400 	.word	0x40010400

0800b2b8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b2b8:	b480      	push	{r7}
 800b2ba:	b087      	sub	sp, #28
 800b2bc:	af00      	add	r7, sp, #0
 800b2be:	6078      	str	r0, [r7, #4]
 800b2c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800b2c2:	687b      	ldr	r3, [r7, #4]
 800b2c4:	6a1b      	ldr	r3, [r3, #32]
 800b2c6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800b2ca:	687b      	ldr	r3, [r7, #4]
 800b2cc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b2ce:	687b      	ldr	r3, [r7, #4]
 800b2d0:	6a1b      	ldr	r3, [r3, #32]
 800b2d2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b2d4:	687b      	ldr	r3, [r7, #4]
 800b2d6:	685b      	ldr	r3, [r3, #4]
 800b2d8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b2da:	687b      	ldr	r3, [r7, #4]
 800b2dc:	69db      	ldr	r3, [r3, #28]
 800b2de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800b2e0:	68fb      	ldr	r3, [r7, #12]
 800b2e2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b2e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800b2e8:	68fb      	ldr	r3, [r7, #12]
 800b2ea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b2ee:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b2f0:	683b      	ldr	r3, [r7, #0]
 800b2f2:	681b      	ldr	r3, [r3, #0]
 800b2f4:	021b      	lsls	r3, r3, #8
 800b2f6:	68fa      	ldr	r2, [r7, #12]
 800b2f8:	4313      	orrs	r3, r2
 800b2fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800b2fc:	693b      	ldr	r3, [r7, #16]
 800b2fe:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800b302:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800b304:	683b      	ldr	r3, [r7, #0]
 800b306:	689b      	ldr	r3, [r3, #8]
 800b308:	031b      	lsls	r3, r3, #12
 800b30a:	693a      	ldr	r2, [r7, #16]
 800b30c:	4313      	orrs	r3, r2
 800b30e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b310:	687b      	ldr	r3, [r7, #4]
 800b312:	4a12      	ldr	r2, [pc, #72]	; (800b35c <TIM_OC4_SetConfig+0xa4>)
 800b314:	4293      	cmp	r3, r2
 800b316:	d003      	beq.n	800b320 <TIM_OC4_SetConfig+0x68>
 800b318:	687b      	ldr	r3, [r7, #4]
 800b31a:	4a11      	ldr	r2, [pc, #68]	; (800b360 <TIM_OC4_SetConfig+0xa8>)
 800b31c:	4293      	cmp	r3, r2
 800b31e:	d109      	bne.n	800b334 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800b320:	697b      	ldr	r3, [r7, #20]
 800b322:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b326:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800b328:	683b      	ldr	r3, [r7, #0]
 800b32a:	695b      	ldr	r3, [r3, #20]
 800b32c:	019b      	lsls	r3, r3, #6
 800b32e:	697a      	ldr	r2, [r7, #20]
 800b330:	4313      	orrs	r3, r2
 800b332:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b334:	687b      	ldr	r3, [r7, #4]
 800b336:	697a      	ldr	r2, [r7, #20]
 800b338:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b33a:	687b      	ldr	r3, [r7, #4]
 800b33c:	68fa      	ldr	r2, [r7, #12]
 800b33e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800b340:	683b      	ldr	r3, [r7, #0]
 800b342:	685a      	ldr	r2, [r3, #4]
 800b344:	687b      	ldr	r3, [r7, #4]
 800b346:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b348:	687b      	ldr	r3, [r7, #4]
 800b34a:	693a      	ldr	r2, [r7, #16]
 800b34c:	621a      	str	r2, [r3, #32]
}
 800b34e:	bf00      	nop
 800b350:	371c      	adds	r7, #28
 800b352:	46bd      	mov	sp, r7
 800b354:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b358:	4770      	bx	lr
 800b35a:	bf00      	nop
 800b35c:	40010000 	.word	0x40010000
 800b360:	40010400 	.word	0x40010400

0800b364 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800b364:	b480      	push	{r7}
 800b366:	b087      	sub	sp, #28
 800b368:	af00      	add	r7, sp, #0
 800b36a:	60f8      	str	r0, [r7, #12]
 800b36c:	60b9      	str	r1, [r7, #8]
 800b36e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800b370:	68bb      	ldr	r3, [r7, #8]
 800b372:	f003 031f 	and.w	r3, r3, #31
 800b376:	2201      	movs	r2, #1
 800b378:	fa02 f303 	lsl.w	r3, r2, r3
 800b37c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800b37e:	68fb      	ldr	r3, [r7, #12]
 800b380:	6a1a      	ldr	r2, [r3, #32]
 800b382:	697b      	ldr	r3, [r7, #20]
 800b384:	43db      	mvns	r3, r3
 800b386:	401a      	ands	r2, r3
 800b388:	68fb      	ldr	r3, [r7, #12]
 800b38a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800b38c:	68fb      	ldr	r3, [r7, #12]
 800b38e:	6a1a      	ldr	r2, [r3, #32]
 800b390:	68bb      	ldr	r3, [r7, #8]
 800b392:	f003 031f 	and.w	r3, r3, #31
 800b396:	6879      	ldr	r1, [r7, #4]
 800b398:	fa01 f303 	lsl.w	r3, r1, r3
 800b39c:	431a      	orrs	r2, r3
 800b39e:	68fb      	ldr	r3, [r7, #12]
 800b3a0:	621a      	str	r2, [r3, #32]
}
 800b3a2:	bf00      	nop
 800b3a4:	371c      	adds	r7, #28
 800b3a6:	46bd      	mov	sp, r7
 800b3a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3ac:	4770      	bx	lr
	...

0800b3b0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800b3b0:	b480      	push	{r7}
 800b3b2:	b085      	sub	sp, #20
 800b3b4:	af00      	add	r7, sp, #0
 800b3b6:	6078      	str	r0, [r7, #4]
 800b3b8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800b3ba:	687b      	ldr	r3, [r7, #4]
 800b3bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b3c0:	2b01      	cmp	r3, #1
 800b3c2:	d101      	bne.n	800b3c8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800b3c4:	2302      	movs	r3, #2
 800b3c6:	e05a      	b.n	800b47e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800b3c8:	687b      	ldr	r3, [r7, #4]
 800b3ca:	2201      	movs	r2, #1
 800b3cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b3d0:	687b      	ldr	r3, [r7, #4]
 800b3d2:	2202      	movs	r2, #2
 800b3d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800b3d8:	687b      	ldr	r3, [r7, #4]
 800b3da:	681b      	ldr	r3, [r3, #0]
 800b3dc:	685b      	ldr	r3, [r3, #4]
 800b3de:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b3e0:	687b      	ldr	r3, [r7, #4]
 800b3e2:	681b      	ldr	r3, [r3, #0]
 800b3e4:	689b      	ldr	r3, [r3, #8]
 800b3e6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800b3e8:	68fb      	ldr	r3, [r7, #12]
 800b3ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b3ee:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800b3f0:	683b      	ldr	r3, [r7, #0]
 800b3f2:	681b      	ldr	r3, [r3, #0]
 800b3f4:	68fa      	ldr	r2, [r7, #12]
 800b3f6:	4313      	orrs	r3, r2
 800b3f8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800b3fa:	687b      	ldr	r3, [r7, #4]
 800b3fc:	681b      	ldr	r3, [r3, #0]
 800b3fe:	68fa      	ldr	r2, [r7, #12]
 800b400:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b402:	687b      	ldr	r3, [r7, #4]
 800b404:	681b      	ldr	r3, [r3, #0]
 800b406:	4a21      	ldr	r2, [pc, #132]	; (800b48c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800b408:	4293      	cmp	r3, r2
 800b40a:	d022      	beq.n	800b452 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b40c:	687b      	ldr	r3, [r7, #4]
 800b40e:	681b      	ldr	r3, [r3, #0]
 800b410:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b414:	d01d      	beq.n	800b452 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b416:	687b      	ldr	r3, [r7, #4]
 800b418:	681b      	ldr	r3, [r3, #0]
 800b41a:	4a1d      	ldr	r2, [pc, #116]	; (800b490 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800b41c:	4293      	cmp	r3, r2
 800b41e:	d018      	beq.n	800b452 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b420:	687b      	ldr	r3, [r7, #4]
 800b422:	681b      	ldr	r3, [r3, #0]
 800b424:	4a1b      	ldr	r2, [pc, #108]	; (800b494 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800b426:	4293      	cmp	r3, r2
 800b428:	d013      	beq.n	800b452 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b42a:	687b      	ldr	r3, [r7, #4]
 800b42c:	681b      	ldr	r3, [r3, #0]
 800b42e:	4a1a      	ldr	r2, [pc, #104]	; (800b498 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800b430:	4293      	cmp	r3, r2
 800b432:	d00e      	beq.n	800b452 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b434:	687b      	ldr	r3, [r7, #4]
 800b436:	681b      	ldr	r3, [r3, #0]
 800b438:	4a18      	ldr	r2, [pc, #96]	; (800b49c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800b43a:	4293      	cmp	r3, r2
 800b43c:	d009      	beq.n	800b452 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b43e:	687b      	ldr	r3, [r7, #4]
 800b440:	681b      	ldr	r3, [r3, #0]
 800b442:	4a17      	ldr	r2, [pc, #92]	; (800b4a0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800b444:	4293      	cmp	r3, r2
 800b446:	d004      	beq.n	800b452 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b448:	687b      	ldr	r3, [r7, #4]
 800b44a:	681b      	ldr	r3, [r3, #0]
 800b44c:	4a15      	ldr	r2, [pc, #84]	; (800b4a4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800b44e:	4293      	cmp	r3, r2
 800b450:	d10c      	bne.n	800b46c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800b452:	68bb      	ldr	r3, [r7, #8]
 800b454:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b458:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800b45a:	683b      	ldr	r3, [r7, #0]
 800b45c:	685b      	ldr	r3, [r3, #4]
 800b45e:	68ba      	ldr	r2, [r7, #8]
 800b460:	4313      	orrs	r3, r2
 800b462:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800b464:	687b      	ldr	r3, [r7, #4]
 800b466:	681b      	ldr	r3, [r3, #0]
 800b468:	68ba      	ldr	r2, [r7, #8]
 800b46a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800b46c:	687b      	ldr	r3, [r7, #4]
 800b46e:	2201      	movs	r2, #1
 800b470:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b474:	687b      	ldr	r3, [r7, #4]
 800b476:	2200      	movs	r2, #0
 800b478:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b47c:	2300      	movs	r3, #0
}
 800b47e:	4618      	mov	r0, r3
 800b480:	3714      	adds	r7, #20
 800b482:	46bd      	mov	sp, r7
 800b484:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b488:	4770      	bx	lr
 800b48a:	bf00      	nop
 800b48c:	40010000 	.word	0x40010000
 800b490:	40000400 	.word	0x40000400
 800b494:	40000800 	.word	0x40000800
 800b498:	40000c00 	.word	0x40000c00
 800b49c:	40010400 	.word	0x40010400
 800b4a0:	40014000 	.word	0x40014000
 800b4a4:	40001800 	.word	0x40001800

0800b4a8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800b4a8:	b084      	sub	sp, #16
 800b4aa:	b580      	push	{r7, lr}
 800b4ac:	b084      	sub	sp, #16
 800b4ae:	af00      	add	r7, sp, #0
 800b4b0:	6078      	str	r0, [r7, #4]
 800b4b2:	f107 001c 	add.w	r0, r7, #28
 800b4b6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800b4ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4bc:	2b01      	cmp	r3, #1
 800b4be:	d122      	bne.n	800b506 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800b4c0:	687b      	ldr	r3, [r7, #4]
 800b4c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b4c4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800b4c8:	687b      	ldr	r3, [r7, #4]
 800b4ca:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800b4cc:	687b      	ldr	r3, [r7, #4]
 800b4ce:	68db      	ldr	r3, [r3, #12]
 800b4d0:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800b4d4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b4d8:	687a      	ldr	r2, [r7, #4]
 800b4da:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800b4dc:	687b      	ldr	r3, [r7, #4]
 800b4de:	68db      	ldr	r3, [r3, #12]
 800b4e0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800b4e4:	687b      	ldr	r3, [r7, #4]
 800b4e6:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800b4e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b4ea:	2b01      	cmp	r3, #1
 800b4ec:	d105      	bne.n	800b4fa <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800b4ee:	687b      	ldr	r3, [r7, #4]
 800b4f0:	68db      	ldr	r3, [r3, #12]
 800b4f2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800b4f6:	687b      	ldr	r3, [r7, #4]
 800b4f8:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800b4fa:	6878      	ldr	r0, [r7, #4]
 800b4fc:	f001 fbe8 	bl	800ccd0 <USB_CoreReset>
 800b500:	4603      	mov	r3, r0
 800b502:	73fb      	strb	r3, [r7, #15]
 800b504:	e01a      	b.n	800b53c <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800b506:	687b      	ldr	r3, [r7, #4]
 800b508:	68db      	ldr	r3, [r3, #12]
 800b50a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800b50e:	687b      	ldr	r3, [r7, #4]
 800b510:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800b512:	6878      	ldr	r0, [r7, #4]
 800b514:	f001 fbdc 	bl	800ccd0 <USB_CoreReset>
 800b518:	4603      	mov	r3, r0
 800b51a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800b51c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b51e:	2b00      	cmp	r3, #0
 800b520:	d106      	bne.n	800b530 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800b522:	687b      	ldr	r3, [r7, #4]
 800b524:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b526:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800b52a:	687b      	ldr	r3, [r7, #4]
 800b52c:	639a      	str	r2, [r3, #56]	; 0x38
 800b52e:	e005      	b.n	800b53c <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800b530:	687b      	ldr	r3, [r7, #4]
 800b532:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b534:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800b538:	687b      	ldr	r3, [r7, #4]
 800b53a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800b53c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b53e:	2b01      	cmp	r3, #1
 800b540:	d10b      	bne.n	800b55a <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800b542:	687b      	ldr	r3, [r7, #4]
 800b544:	689b      	ldr	r3, [r3, #8]
 800b546:	f043 0206 	orr.w	r2, r3, #6
 800b54a:	687b      	ldr	r3, [r7, #4]
 800b54c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800b54e:	687b      	ldr	r3, [r7, #4]
 800b550:	689b      	ldr	r3, [r3, #8]
 800b552:	f043 0220 	orr.w	r2, r3, #32
 800b556:	687b      	ldr	r3, [r7, #4]
 800b558:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800b55a:	7bfb      	ldrb	r3, [r7, #15]
}
 800b55c:	4618      	mov	r0, r3
 800b55e:	3710      	adds	r7, #16
 800b560:	46bd      	mov	sp, r7
 800b562:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800b566:	b004      	add	sp, #16
 800b568:	4770      	bx	lr
	...

0800b56c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800b56c:	b480      	push	{r7}
 800b56e:	b087      	sub	sp, #28
 800b570:	af00      	add	r7, sp, #0
 800b572:	60f8      	str	r0, [r7, #12]
 800b574:	60b9      	str	r1, [r7, #8]
 800b576:	4613      	mov	r3, r2
 800b578:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800b57a:	79fb      	ldrb	r3, [r7, #7]
 800b57c:	2b02      	cmp	r3, #2
 800b57e:	d165      	bne.n	800b64c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800b580:	68bb      	ldr	r3, [r7, #8]
 800b582:	4a41      	ldr	r2, [pc, #260]	; (800b688 <USB_SetTurnaroundTime+0x11c>)
 800b584:	4293      	cmp	r3, r2
 800b586:	d906      	bls.n	800b596 <USB_SetTurnaroundTime+0x2a>
 800b588:	68bb      	ldr	r3, [r7, #8]
 800b58a:	4a40      	ldr	r2, [pc, #256]	; (800b68c <USB_SetTurnaroundTime+0x120>)
 800b58c:	4293      	cmp	r3, r2
 800b58e:	d202      	bcs.n	800b596 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800b590:	230f      	movs	r3, #15
 800b592:	617b      	str	r3, [r7, #20]
 800b594:	e062      	b.n	800b65c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800b596:	68bb      	ldr	r3, [r7, #8]
 800b598:	4a3c      	ldr	r2, [pc, #240]	; (800b68c <USB_SetTurnaroundTime+0x120>)
 800b59a:	4293      	cmp	r3, r2
 800b59c:	d306      	bcc.n	800b5ac <USB_SetTurnaroundTime+0x40>
 800b59e:	68bb      	ldr	r3, [r7, #8]
 800b5a0:	4a3b      	ldr	r2, [pc, #236]	; (800b690 <USB_SetTurnaroundTime+0x124>)
 800b5a2:	4293      	cmp	r3, r2
 800b5a4:	d202      	bcs.n	800b5ac <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800b5a6:	230e      	movs	r3, #14
 800b5a8:	617b      	str	r3, [r7, #20]
 800b5aa:	e057      	b.n	800b65c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800b5ac:	68bb      	ldr	r3, [r7, #8]
 800b5ae:	4a38      	ldr	r2, [pc, #224]	; (800b690 <USB_SetTurnaroundTime+0x124>)
 800b5b0:	4293      	cmp	r3, r2
 800b5b2:	d306      	bcc.n	800b5c2 <USB_SetTurnaroundTime+0x56>
 800b5b4:	68bb      	ldr	r3, [r7, #8]
 800b5b6:	4a37      	ldr	r2, [pc, #220]	; (800b694 <USB_SetTurnaroundTime+0x128>)
 800b5b8:	4293      	cmp	r3, r2
 800b5ba:	d202      	bcs.n	800b5c2 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800b5bc:	230d      	movs	r3, #13
 800b5be:	617b      	str	r3, [r7, #20]
 800b5c0:	e04c      	b.n	800b65c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800b5c2:	68bb      	ldr	r3, [r7, #8]
 800b5c4:	4a33      	ldr	r2, [pc, #204]	; (800b694 <USB_SetTurnaroundTime+0x128>)
 800b5c6:	4293      	cmp	r3, r2
 800b5c8:	d306      	bcc.n	800b5d8 <USB_SetTurnaroundTime+0x6c>
 800b5ca:	68bb      	ldr	r3, [r7, #8]
 800b5cc:	4a32      	ldr	r2, [pc, #200]	; (800b698 <USB_SetTurnaroundTime+0x12c>)
 800b5ce:	4293      	cmp	r3, r2
 800b5d0:	d802      	bhi.n	800b5d8 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800b5d2:	230c      	movs	r3, #12
 800b5d4:	617b      	str	r3, [r7, #20]
 800b5d6:	e041      	b.n	800b65c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800b5d8:	68bb      	ldr	r3, [r7, #8]
 800b5da:	4a2f      	ldr	r2, [pc, #188]	; (800b698 <USB_SetTurnaroundTime+0x12c>)
 800b5dc:	4293      	cmp	r3, r2
 800b5de:	d906      	bls.n	800b5ee <USB_SetTurnaroundTime+0x82>
 800b5e0:	68bb      	ldr	r3, [r7, #8]
 800b5e2:	4a2e      	ldr	r2, [pc, #184]	; (800b69c <USB_SetTurnaroundTime+0x130>)
 800b5e4:	4293      	cmp	r3, r2
 800b5e6:	d802      	bhi.n	800b5ee <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800b5e8:	230b      	movs	r3, #11
 800b5ea:	617b      	str	r3, [r7, #20]
 800b5ec:	e036      	b.n	800b65c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800b5ee:	68bb      	ldr	r3, [r7, #8]
 800b5f0:	4a2a      	ldr	r2, [pc, #168]	; (800b69c <USB_SetTurnaroundTime+0x130>)
 800b5f2:	4293      	cmp	r3, r2
 800b5f4:	d906      	bls.n	800b604 <USB_SetTurnaroundTime+0x98>
 800b5f6:	68bb      	ldr	r3, [r7, #8]
 800b5f8:	4a29      	ldr	r2, [pc, #164]	; (800b6a0 <USB_SetTurnaroundTime+0x134>)
 800b5fa:	4293      	cmp	r3, r2
 800b5fc:	d802      	bhi.n	800b604 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800b5fe:	230a      	movs	r3, #10
 800b600:	617b      	str	r3, [r7, #20]
 800b602:	e02b      	b.n	800b65c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800b604:	68bb      	ldr	r3, [r7, #8]
 800b606:	4a26      	ldr	r2, [pc, #152]	; (800b6a0 <USB_SetTurnaroundTime+0x134>)
 800b608:	4293      	cmp	r3, r2
 800b60a:	d906      	bls.n	800b61a <USB_SetTurnaroundTime+0xae>
 800b60c:	68bb      	ldr	r3, [r7, #8]
 800b60e:	4a25      	ldr	r2, [pc, #148]	; (800b6a4 <USB_SetTurnaroundTime+0x138>)
 800b610:	4293      	cmp	r3, r2
 800b612:	d202      	bcs.n	800b61a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800b614:	2309      	movs	r3, #9
 800b616:	617b      	str	r3, [r7, #20]
 800b618:	e020      	b.n	800b65c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800b61a:	68bb      	ldr	r3, [r7, #8]
 800b61c:	4a21      	ldr	r2, [pc, #132]	; (800b6a4 <USB_SetTurnaroundTime+0x138>)
 800b61e:	4293      	cmp	r3, r2
 800b620:	d306      	bcc.n	800b630 <USB_SetTurnaroundTime+0xc4>
 800b622:	68bb      	ldr	r3, [r7, #8]
 800b624:	4a20      	ldr	r2, [pc, #128]	; (800b6a8 <USB_SetTurnaroundTime+0x13c>)
 800b626:	4293      	cmp	r3, r2
 800b628:	d802      	bhi.n	800b630 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800b62a:	2308      	movs	r3, #8
 800b62c:	617b      	str	r3, [r7, #20]
 800b62e:	e015      	b.n	800b65c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800b630:	68bb      	ldr	r3, [r7, #8]
 800b632:	4a1d      	ldr	r2, [pc, #116]	; (800b6a8 <USB_SetTurnaroundTime+0x13c>)
 800b634:	4293      	cmp	r3, r2
 800b636:	d906      	bls.n	800b646 <USB_SetTurnaroundTime+0xda>
 800b638:	68bb      	ldr	r3, [r7, #8]
 800b63a:	4a1c      	ldr	r2, [pc, #112]	; (800b6ac <USB_SetTurnaroundTime+0x140>)
 800b63c:	4293      	cmp	r3, r2
 800b63e:	d202      	bcs.n	800b646 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800b640:	2307      	movs	r3, #7
 800b642:	617b      	str	r3, [r7, #20]
 800b644:	e00a      	b.n	800b65c <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800b646:	2306      	movs	r3, #6
 800b648:	617b      	str	r3, [r7, #20]
 800b64a:	e007      	b.n	800b65c <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800b64c:	79fb      	ldrb	r3, [r7, #7]
 800b64e:	2b00      	cmp	r3, #0
 800b650:	d102      	bne.n	800b658 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800b652:	2309      	movs	r3, #9
 800b654:	617b      	str	r3, [r7, #20]
 800b656:	e001      	b.n	800b65c <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800b658:	2309      	movs	r3, #9
 800b65a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800b65c:	68fb      	ldr	r3, [r7, #12]
 800b65e:	68db      	ldr	r3, [r3, #12]
 800b660:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800b664:	68fb      	ldr	r3, [r7, #12]
 800b666:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800b668:	68fb      	ldr	r3, [r7, #12]
 800b66a:	68da      	ldr	r2, [r3, #12]
 800b66c:	697b      	ldr	r3, [r7, #20]
 800b66e:	029b      	lsls	r3, r3, #10
 800b670:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800b674:	431a      	orrs	r2, r3
 800b676:	68fb      	ldr	r3, [r7, #12]
 800b678:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800b67a:	2300      	movs	r3, #0
}
 800b67c:	4618      	mov	r0, r3
 800b67e:	371c      	adds	r7, #28
 800b680:	46bd      	mov	sp, r7
 800b682:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b686:	4770      	bx	lr
 800b688:	00d8acbf 	.word	0x00d8acbf
 800b68c:	00e4e1c0 	.word	0x00e4e1c0
 800b690:	00f42400 	.word	0x00f42400
 800b694:	01067380 	.word	0x01067380
 800b698:	011a499f 	.word	0x011a499f
 800b69c:	01312cff 	.word	0x01312cff
 800b6a0:	014ca43f 	.word	0x014ca43f
 800b6a4:	016e3600 	.word	0x016e3600
 800b6a8:	01a6ab1f 	.word	0x01a6ab1f
 800b6ac:	01e84800 	.word	0x01e84800

0800b6b0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800b6b0:	b480      	push	{r7}
 800b6b2:	b083      	sub	sp, #12
 800b6b4:	af00      	add	r7, sp, #0
 800b6b6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800b6b8:	687b      	ldr	r3, [r7, #4]
 800b6ba:	689b      	ldr	r3, [r3, #8]
 800b6bc:	f043 0201 	orr.w	r2, r3, #1
 800b6c0:	687b      	ldr	r3, [r7, #4]
 800b6c2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800b6c4:	2300      	movs	r3, #0
}
 800b6c6:	4618      	mov	r0, r3
 800b6c8:	370c      	adds	r7, #12
 800b6ca:	46bd      	mov	sp, r7
 800b6cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6d0:	4770      	bx	lr

0800b6d2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800b6d2:	b480      	push	{r7}
 800b6d4:	b083      	sub	sp, #12
 800b6d6:	af00      	add	r7, sp, #0
 800b6d8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800b6da:	687b      	ldr	r3, [r7, #4]
 800b6dc:	689b      	ldr	r3, [r3, #8]
 800b6de:	f023 0201 	bic.w	r2, r3, #1
 800b6e2:	687b      	ldr	r3, [r7, #4]
 800b6e4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800b6e6:	2300      	movs	r3, #0
}
 800b6e8:	4618      	mov	r0, r3
 800b6ea:	370c      	adds	r7, #12
 800b6ec:	46bd      	mov	sp, r7
 800b6ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6f2:	4770      	bx	lr

0800b6f4 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800b6f4:	b580      	push	{r7, lr}
 800b6f6:	b084      	sub	sp, #16
 800b6f8:	af00      	add	r7, sp, #0
 800b6fa:	6078      	str	r0, [r7, #4]
 800b6fc:	460b      	mov	r3, r1
 800b6fe:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800b700:	2300      	movs	r3, #0
 800b702:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800b704:	687b      	ldr	r3, [r7, #4]
 800b706:	68db      	ldr	r3, [r3, #12]
 800b708:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800b70c:	687b      	ldr	r3, [r7, #4]
 800b70e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800b710:	78fb      	ldrb	r3, [r7, #3]
 800b712:	2b01      	cmp	r3, #1
 800b714:	d115      	bne.n	800b742 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800b716:	687b      	ldr	r3, [r7, #4]
 800b718:	68db      	ldr	r3, [r3, #12]
 800b71a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800b71e:	687b      	ldr	r3, [r7, #4]
 800b720:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800b722:	2001      	movs	r0, #1
 800b724:	f7fa ff4e 	bl	80065c4 <HAL_Delay>
      ms++;
 800b728:	68fb      	ldr	r3, [r7, #12]
 800b72a:	3301      	adds	r3, #1
 800b72c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800b72e:	6878      	ldr	r0, [r7, #4]
 800b730:	f001 fa3f 	bl	800cbb2 <USB_GetMode>
 800b734:	4603      	mov	r3, r0
 800b736:	2b01      	cmp	r3, #1
 800b738:	d01e      	beq.n	800b778 <USB_SetCurrentMode+0x84>
 800b73a:	68fb      	ldr	r3, [r7, #12]
 800b73c:	2b31      	cmp	r3, #49	; 0x31
 800b73e:	d9f0      	bls.n	800b722 <USB_SetCurrentMode+0x2e>
 800b740:	e01a      	b.n	800b778 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800b742:	78fb      	ldrb	r3, [r7, #3]
 800b744:	2b00      	cmp	r3, #0
 800b746:	d115      	bne.n	800b774 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800b748:	687b      	ldr	r3, [r7, #4]
 800b74a:	68db      	ldr	r3, [r3, #12]
 800b74c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800b750:	687b      	ldr	r3, [r7, #4]
 800b752:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800b754:	2001      	movs	r0, #1
 800b756:	f7fa ff35 	bl	80065c4 <HAL_Delay>
      ms++;
 800b75a:	68fb      	ldr	r3, [r7, #12]
 800b75c:	3301      	adds	r3, #1
 800b75e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800b760:	6878      	ldr	r0, [r7, #4]
 800b762:	f001 fa26 	bl	800cbb2 <USB_GetMode>
 800b766:	4603      	mov	r3, r0
 800b768:	2b00      	cmp	r3, #0
 800b76a:	d005      	beq.n	800b778 <USB_SetCurrentMode+0x84>
 800b76c:	68fb      	ldr	r3, [r7, #12]
 800b76e:	2b31      	cmp	r3, #49	; 0x31
 800b770:	d9f0      	bls.n	800b754 <USB_SetCurrentMode+0x60>
 800b772:	e001      	b.n	800b778 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800b774:	2301      	movs	r3, #1
 800b776:	e005      	b.n	800b784 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800b778:	68fb      	ldr	r3, [r7, #12]
 800b77a:	2b32      	cmp	r3, #50	; 0x32
 800b77c:	d101      	bne.n	800b782 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800b77e:	2301      	movs	r3, #1
 800b780:	e000      	b.n	800b784 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800b782:	2300      	movs	r3, #0
}
 800b784:	4618      	mov	r0, r3
 800b786:	3710      	adds	r7, #16
 800b788:	46bd      	mov	sp, r7
 800b78a:	bd80      	pop	{r7, pc}

0800b78c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800b78c:	b084      	sub	sp, #16
 800b78e:	b580      	push	{r7, lr}
 800b790:	b086      	sub	sp, #24
 800b792:	af00      	add	r7, sp, #0
 800b794:	6078      	str	r0, [r7, #4]
 800b796:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800b79a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800b79e:	2300      	movs	r3, #0
 800b7a0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b7a2:	687b      	ldr	r3, [r7, #4]
 800b7a4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800b7a6:	2300      	movs	r3, #0
 800b7a8:	613b      	str	r3, [r7, #16]
 800b7aa:	e009      	b.n	800b7c0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800b7ac:	687a      	ldr	r2, [r7, #4]
 800b7ae:	693b      	ldr	r3, [r7, #16]
 800b7b0:	3340      	adds	r3, #64	; 0x40
 800b7b2:	009b      	lsls	r3, r3, #2
 800b7b4:	4413      	add	r3, r2
 800b7b6:	2200      	movs	r2, #0
 800b7b8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800b7ba:	693b      	ldr	r3, [r7, #16]
 800b7bc:	3301      	adds	r3, #1
 800b7be:	613b      	str	r3, [r7, #16]
 800b7c0:	693b      	ldr	r3, [r7, #16]
 800b7c2:	2b0e      	cmp	r3, #14
 800b7c4:	d9f2      	bls.n	800b7ac <USB_DevInit+0x20>
  }

#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800b7c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b7c8:	2b00      	cmp	r3, #0
 800b7ca:	d11c      	bne.n	800b806 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800b7cc:	68fb      	ldr	r3, [r7, #12]
 800b7ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b7d2:	685b      	ldr	r3, [r3, #4]
 800b7d4:	68fa      	ldr	r2, [r7, #12]
 800b7d6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b7da:	f043 0302 	orr.w	r3, r3, #2
 800b7de:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800b7e0:	687b      	ldr	r3, [r7, #4]
 800b7e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b7e4:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800b7e8:	687b      	ldr	r3, [r7, #4]
 800b7ea:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800b7ec:	687b      	ldr	r3, [r7, #4]
 800b7ee:	681b      	ldr	r3, [r3, #0]
 800b7f0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800b7f4:	687b      	ldr	r3, [r7, #4]
 800b7f6:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800b7f8:	687b      	ldr	r3, [r7, #4]
 800b7fa:	681b      	ldr	r3, [r3, #0]
 800b7fc:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800b800:	687b      	ldr	r3, [r7, #4]
 800b802:	601a      	str	r2, [r3, #0]
 800b804:	e005      	b.n	800b812 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800b806:	687b      	ldr	r3, [r7, #4]
 800b808:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b80a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800b80e:	687b      	ldr	r3, [r7, #4]
 800b810:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800b812:	68fb      	ldr	r3, [r7, #12]
 800b814:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800b818:	461a      	mov	r2, r3
 800b81a:	2300      	movs	r3, #0
 800b81c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800b81e:	68fb      	ldr	r3, [r7, #12]
 800b820:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b824:	4619      	mov	r1, r3
 800b826:	68fb      	ldr	r3, [r7, #12]
 800b828:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b82c:	461a      	mov	r2, r3
 800b82e:	680b      	ldr	r3, [r1, #0]
 800b830:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800b832:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b834:	2b01      	cmp	r3, #1
 800b836:	d10c      	bne.n	800b852 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800b838:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b83a:	2b00      	cmp	r3, #0
 800b83c:	d104      	bne.n	800b848 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800b83e:	2100      	movs	r1, #0
 800b840:	6878      	ldr	r0, [r7, #4]
 800b842:	f000 f965 	bl	800bb10 <USB_SetDevSpeed>
 800b846:	e008      	b.n	800b85a <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800b848:	2101      	movs	r1, #1
 800b84a:	6878      	ldr	r0, [r7, #4]
 800b84c:	f000 f960 	bl	800bb10 <USB_SetDevSpeed>
 800b850:	e003      	b.n	800b85a <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800b852:	2103      	movs	r1, #3
 800b854:	6878      	ldr	r0, [r7, #4]
 800b856:	f000 f95b 	bl	800bb10 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800b85a:	2110      	movs	r1, #16
 800b85c:	6878      	ldr	r0, [r7, #4]
 800b85e:	f000 f8f3 	bl	800ba48 <USB_FlushTxFifo>
 800b862:	4603      	mov	r3, r0
 800b864:	2b00      	cmp	r3, #0
 800b866:	d001      	beq.n	800b86c <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 800b868:	2301      	movs	r3, #1
 800b86a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800b86c:	6878      	ldr	r0, [r7, #4]
 800b86e:	f000 f91f 	bl	800bab0 <USB_FlushRxFifo>
 800b872:	4603      	mov	r3, r0
 800b874:	2b00      	cmp	r3, #0
 800b876:	d001      	beq.n	800b87c <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 800b878:	2301      	movs	r3, #1
 800b87a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800b87c:	68fb      	ldr	r3, [r7, #12]
 800b87e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b882:	461a      	mov	r2, r3
 800b884:	2300      	movs	r3, #0
 800b886:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800b888:	68fb      	ldr	r3, [r7, #12]
 800b88a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b88e:	461a      	mov	r2, r3
 800b890:	2300      	movs	r3, #0
 800b892:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800b894:	68fb      	ldr	r3, [r7, #12]
 800b896:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b89a:	461a      	mov	r2, r3
 800b89c:	2300      	movs	r3, #0
 800b89e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800b8a0:	2300      	movs	r3, #0
 800b8a2:	613b      	str	r3, [r7, #16]
 800b8a4:	e043      	b.n	800b92e <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800b8a6:	693b      	ldr	r3, [r7, #16]
 800b8a8:	015a      	lsls	r2, r3, #5
 800b8aa:	68fb      	ldr	r3, [r7, #12]
 800b8ac:	4413      	add	r3, r2
 800b8ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b8b2:	681b      	ldr	r3, [r3, #0]
 800b8b4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b8b8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b8bc:	d118      	bne.n	800b8f0 <USB_DevInit+0x164>
    {
      if (i == 0U)
 800b8be:	693b      	ldr	r3, [r7, #16]
 800b8c0:	2b00      	cmp	r3, #0
 800b8c2:	d10a      	bne.n	800b8da <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800b8c4:	693b      	ldr	r3, [r7, #16]
 800b8c6:	015a      	lsls	r2, r3, #5
 800b8c8:	68fb      	ldr	r3, [r7, #12]
 800b8ca:	4413      	add	r3, r2
 800b8cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b8d0:	461a      	mov	r2, r3
 800b8d2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800b8d6:	6013      	str	r3, [r2, #0]
 800b8d8:	e013      	b.n	800b902 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800b8da:	693b      	ldr	r3, [r7, #16]
 800b8dc:	015a      	lsls	r2, r3, #5
 800b8de:	68fb      	ldr	r3, [r7, #12]
 800b8e0:	4413      	add	r3, r2
 800b8e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b8e6:	461a      	mov	r2, r3
 800b8e8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800b8ec:	6013      	str	r3, [r2, #0]
 800b8ee:	e008      	b.n	800b902 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800b8f0:	693b      	ldr	r3, [r7, #16]
 800b8f2:	015a      	lsls	r2, r3, #5
 800b8f4:	68fb      	ldr	r3, [r7, #12]
 800b8f6:	4413      	add	r3, r2
 800b8f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b8fc:	461a      	mov	r2, r3
 800b8fe:	2300      	movs	r3, #0
 800b900:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800b902:	693b      	ldr	r3, [r7, #16]
 800b904:	015a      	lsls	r2, r3, #5
 800b906:	68fb      	ldr	r3, [r7, #12]
 800b908:	4413      	add	r3, r2
 800b90a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b90e:	461a      	mov	r2, r3
 800b910:	2300      	movs	r3, #0
 800b912:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800b914:	693b      	ldr	r3, [r7, #16]
 800b916:	015a      	lsls	r2, r3, #5
 800b918:	68fb      	ldr	r3, [r7, #12]
 800b91a:	4413      	add	r3, r2
 800b91c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b920:	461a      	mov	r2, r3
 800b922:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800b926:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800b928:	693b      	ldr	r3, [r7, #16]
 800b92a:	3301      	adds	r3, #1
 800b92c:	613b      	str	r3, [r7, #16]
 800b92e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b930:	693a      	ldr	r2, [r7, #16]
 800b932:	429a      	cmp	r2, r3
 800b934:	d3b7      	bcc.n	800b8a6 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800b936:	2300      	movs	r3, #0
 800b938:	613b      	str	r3, [r7, #16]
 800b93a:	e043      	b.n	800b9c4 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800b93c:	693b      	ldr	r3, [r7, #16]
 800b93e:	015a      	lsls	r2, r3, #5
 800b940:	68fb      	ldr	r3, [r7, #12]
 800b942:	4413      	add	r3, r2
 800b944:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b948:	681b      	ldr	r3, [r3, #0]
 800b94a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b94e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b952:	d118      	bne.n	800b986 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 800b954:	693b      	ldr	r3, [r7, #16]
 800b956:	2b00      	cmp	r3, #0
 800b958:	d10a      	bne.n	800b970 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800b95a:	693b      	ldr	r3, [r7, #16]
 800b95c:	015a      	lsls	r2, r3, #5
 800b95e:	68fb      	ldr	r3, [r7, #12]
 800b960:	4413      	add	r3, r2
 800b962:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b966:	461a      	mov	r2, r3
 800b968:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800b96c:	6013      	str	r3, [r2, #0]
 800b96e:	e013      	b.n	800b998 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800b970:	693b      	ldr	r3, [r7, #16]
 800b972:	015a      	lsls	r2, r3, #5
 800b974:	68fb      	ldr	r3, [r7, #12]
 800b976:	4413      	add	r3, r2
 800b978:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b97c:	461a      	mov	r2, r3
 800b97e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800b982:	6013      	str	r3, [r2, #0]
 800b984:	e008      	b.n	800b998 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800b986:	693b      	ldr	r3, [r7, #16]
 800b988:	015a      	lsls	r2, r3, #5
 800b98a:	68fb      	ldr	r3, [r7, #12]
 800b98c:	4413      	add	r3, r2
 800b98e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b992:	461a      	mov	r2, r3
 800b994:	2300      	movs	r3, #0
 800b996:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800b998:	693b      	ldr	r3, [r7, #16]
 800b99a:	015a      	lsls	r2, r3, #5
 800b99c:	68fb      	ldr	r3, [r7, #12]
 800b99e:	4413      	add	r3, r2
 800b9a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b9a4:	461a      	mov	r2, r3
 800b9a6:	2300      	movs	r3, #0
 800b9a8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800b9aa:	693b      	ldr	r3, [r7, #16]
 800b9ac:	015a      	lsls	r2, r3, #5
 800b9ae:	68fb      	ldr	r3, [r7, #12]
 800b9b0:	4413      	add	r3, r2
 800b9b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b9b6:	461a      	mov	r2, r3
 800b9b8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800b9bc:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800b9be:	693b      	ldr	r3, [r7, #16]
 800b9c0:	3301      	adds	r3, #1
 800b9c2:	613b      	str	r3, [r7, #16]
 800b9c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9c6:	693a      	ldr	r2, [r7, #16]
 800b9c8:	429a      	cmp	r2, r3
 800b9ca:	d3b7      	bcc.n	800b93c <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800b9cc:	68fb      	ldr	r3, [r7, #12]
 800b9ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b9d2:	691b      	ldr	r3, [r3, #16]
 800b9d4:	68fa      	ldr	r2, [r7, #12]
 800b9d6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b9da:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b9de:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800b9e0:	687b      	ldr	r3, [r7, #4]
 800b9e2:	2200      	movs	r2, #0
 800b9e4:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800b9e6:	687b      	ldr	r3, [r7, #4]
 800b9e8:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800b9ec:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800b9ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b9f0:	2b00      	cmp	r3, #0
 800b9f2:	d105      	bne.n	800ba00 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800b9f4:	687b      	ldr	r3, [r7, #4]
 800b9f6:	699b      	ldr	r3, [r3, #24]
 800b9f8:	f043 0210 	orr.w	r2, r3, #16
 800b9fc:	687b      	ldr	r3, [r7, #4]
 800b9fe:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800ba00:	687b      	ldr	r3, [r7, #4]
 800ba02:	699a      	ldr	r2, [r3, #24]
 800ba04:	4b0f      	ldr	r3, [pc, #60]	; (800ba44 <USB_DevInit+0x2b8>)
 800ba06:	4313      	orrs	r3, r2
 800ba08:	687a      	ldr	r2, [r7, #4]
 800ba0a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800ba0c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ba0e:	2b00      	cmp	r3, #0
 800ba10:	d005      	beq.n	800ba1e <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800ba12:	687b      	ldr	r3, [r7, #4]
 800ba14:	699b      	ldr	r3, [r3, #24]
 800ba16:	f043 0208 	orr.w	r2, r3, #8
 800ba1a:	687b      	ldr	r3, [r7, #4]
 800ba1c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800ba1e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ba20:	2b01      	cmp	r3, #1
 800ba22:	d107      	bne.n	800ba34 <USB_DevInit+0x2a8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800ba24:	687b      	ldr	r3, [r7, #4]
 800ba26:	699b      	ldr	r3, [r3, #24]
 800ba28:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800ba2c:	f043 0304 	orr.w	r3, r3, #4
 800ba30:	687a      	ldr	r2, [r7, #4]
 800ba32:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800ba34:	7dfb      	ldrb	r3, [r7, #23]
}
 800ba36:	4618      	mov	r0, r3
 800ba38:	3718      	adds	r7, #24
 800ba3a:	46bd      	mov	sp, r7
 800ba3c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800ba40:	b004      	add	sp, #16
 800ba42:	4770      	bx	lr
 800ba44:	803c3800 	.word	0x803c3800

0800ba48 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800ba48:	b480      	push	{r7}
 800ba4a:	b085      	sub	sp, #20
 800ba4c:	af00      	add	r7, sp, #0
 800ba4e:	6078      	str	r0, [r7, #4]
 800ba50:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800ba52:	2300      	movs	r3, #0
 800ba54:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800ba56:	68fb      	ldr	r3, [r7, #12]
 800ba58:	3301      	adds	r3, #1
 800ba5a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800ba5c:	68fb      	ldr	r3, [r7, #12]
 800ba5e:	4a13      	ldr	r2, [pc, #76]	; (800baac <USB_FlushTxFifo+0x64>)
 800ba60:	4293      	cmp	r3, r2
 800ba62:	d901      	bls.n	800ba68 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800ba64:	2303      	movs	r3, #3
 800ba66:	e01b      	b.n	800baa0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800ba68:	687b      	ldr	r3, [r7, #4]
 800ba6a:	691b      	ldr	r3, [r3, #16]
 800ba6c:	2b00      	cmp	r3, #0
 800ba6e:	daf2      	bge.n	800ba56 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800ba70:	2300      	movs	r3, #0
 800ba72:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800ba74:	683b      	ldr	r3, [r7, #0]
 800ba76:	019b      	lsls	r3, r3, #6
 800ba78:	f043 0220 	orr.w	r2, r3, #32
 800ba7c:	687b      	ldr	r3, [r7, #4]
 800ba7e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800ba80:	68fb      	ldr	r3, [r7, #12]
 800ba82:	3301      	adds	r3, #1
 800ba84:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800ba86:	68fb      	ldr	r3, [r7, #12]
 800ba88:	4a08      	ldr	r2, [pc, #32]	; (800baac <USB_FlushTxFifo+0x64>)
 800ba8a:	4293      	cmp	r3, r2
 800ba8c:	d901      	bls.n	800ba92 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800ba8e:	2303      	movs	r3, #3
 800ba90:	e006      	b.n	800baa0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800ba92:	687b      	ldr	r3, [r7, #4]
 800ba94:	691b      	ldr	r3, [r3, #16]
 800ba96:	f003 0320 	and.w	r3, r3, #32
 800ba9a:	2b20      	cmp	r3, #32
 800ba9c:	d0f0      	beq.n	800ba80 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800ba9e:	2300      	movs	r3, #0
}
 800baa0:	4618      	mov	r0, r3
 800baa2:	3714      	adds	r7, #20
 800baa4:	46bd      	mov	sp, r7
 800baa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baaa:	4770      	bx	lr
 800baac:	00030d40 	.word	0x00030d40

0800bab0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800bab0:	b480      	push	{r7}
 800bab2:	b085      	sub	sp, #20
 800bab4:	af00      	add	r7, sp, #0
 800bab6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800bab8:	2300      	movs	r3, #0
 800baba:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800babc:	68fb      	ldr	r3, [r7, #12]
 800babe:	3301      	adds	r3, #1
 800bac0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800bac2:	68fb      	ldr	r3, [r7, #12]
 800bac4:	4a11      	ldr	r2, [pc, #68]	; (800bb0c <USB_FlushRxFifo+0x5c>)
 800bac6:	4293      	cmp	r3, r2
 800bac8:	d901      	bls.n	800bace <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800baca:	2303      	movs	r3, #3
 800bacc:	e018      	b.n	800bb00 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800bace:	687b      	ldr	r3, [r7, #4]
 800bad0:	691b      	ldr	r3, [r3, #16]
 800bad2:	2b00      	cmp	r3, #0
 800bad4:	daf2      	bge.n	800babc <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800bad6:	2300      	movs	r3, #0
 800bad8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800bada:	687b      	ldr	r3, [r7, #4]
 800badc:	2210      	movs	r2, #16
 800bade:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800bae0:	68fb      	ldr	r3, [r7, #12]
 800bae2:	3301      	adds	r3, #1
 800bae4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800bae6:	68fb      	ldr	r3, [r7, #12]
 800bae8:	4a08      	ldr	r2, [pc, #32]	; (800bb0c <USB_FlushRxFifo+0x5c>)
 800baea:	4293      	cmp	r3, r2
 800baec:	d901      	bls.n	800baf2 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800baee:	2303      	movs	r3, #3
 800baf0:	e006      	b.n	800bb00 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800baf2:	687b      	ldr	r3, [r7, #4]
 800baf4:	691b      	ldr	r3, [r3, #16]
 800baf6:	f003 0310 	and.w	r3, r3, #16
 800bafa:	2b10      	cmp	r3, #16
 800bafc:	d0f0      	beq.n	800bae0 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800bafe:	2300      	movs	r3, #0
}
 800bb00:	4618      	mov	r0, r3
 800bb02:	3714      	adds	r7, #20
 800bb04:	46bd      	mov	sp, r7
 800bb06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb0a:	4770      	bx	lr
 800bb0c:	00030d40 	.word	0x00030d40

0800bb10 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800bb10:	b480      	push	{r7}
 800bb12:	b085      	sub	sp, #20
 800bb14:	af00      	add	r7, sp, #0
 800bb16:	6078      	str	r0, [r7, #4]
 800bb18:	460b      	mov	r3, r1
 800bb1a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bb1c:	687b      	ldr	r3, [r7, #4]
 800bb1e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800bb20:	68fb      	ldr	r3, [r7, #12]
 800bb22:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bb26:	681a      	ldr	r2, [r3, #0]
 800bb28:	78fb      	ldrb	r3, [r7, #3]
 800bb2a:	68f9      	ldr	r1, [r7, #12]
 800bb2c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800bb30:	4313      	orrs	r3, r2
 800bb32:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800bb34:	2300      	movs	r3, #0
}
 800bb36:	4618      	mov	r0, r3
 800bb38:	3714      	adds	r7, #20
 800bb3a:	46bd      	mov	sp, r7
 800bb3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb40:	4770      	bx	lr

0800bb42 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800bb42:	b480      	push	{r7}
 800bb44:	b087      	sub	sp, #28
 800bb46:	af00      	add	r7, sp, #0
 800bb48:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bb4a:	687b      	ldr	r3, [r7, #4]
 800bb4c:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800bb4e:	693b      	ldr	r3, [r7, #16]
 800bb50:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bb54:	689b      	ldr	r3, [r3, #8]
 800bb56:	f003 0306 	and.w	r3, r3, #6
 800bb5a:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800bb5c:	68fb      	ldr	r3, [r7, #12]
 800bb5e:	2b00      	cmp	r3, #0
 800bb60:	d102      	bne.n	800bb68 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800bb62:	2300      	movs	r3, #0
 800bb64:	75fb      	strb	r3, [r7, #23]
 800bb66:	e00a      	b.n	800bb7e <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800bb68:	68fb      	ldr	r3, [r7, #12]
 800bb6a:	2b02      	cmp	r3, #2
 800bb6c:	d002      	beq.n	800bb74 <USB_GetDevSpeed+0x32>
 800bb6e:	68fb      	ldr	r3, [r7, #12]
 800bb70:	2b06      	cmp	r3, #6
 800bb72:	d102      	bne.n	800bb7a <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800bb74:	2302      	movs	r3, #2
 800bb76:	75fb      	strb	r3, [r7, #23]
 800bb78:	e001      	b.n	800bb7e <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800bb7a:	230f      	movs	r3, #15
 800bb7c:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800bb7e:	7dfb      	ldrb	r3, [r7, #23]
}
 800bb80:	4618      	mov	r0, r3
 800bb82:	371c      	adds	r7, #28
 800bb84:	46bd      	mov	sp, r7
 800bb86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb8a:	4770      	bx	lr

0800bb8c <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800bb8c:	b480      	push	{r7}
 800bb8e:	b085      	sub	sp, #20
 800bb90:	af00      	add	r7, sp, #0
 800bb92:	6078      	str	r0, [r7, #4]
 800bb94:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bb96:	687b      	ldr	r3, [r7, #4]
 800bb98:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800bb9a:	683b      	ldr	r3, [r7, #0]
 800bb9c:	781b      	ldrb	r3, [r3, #0]
 800bb9e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800bba0:	683b      	ldr	r3, [r7, #0]
 800bba2:	785b      	ldrb	r3, [r3, #1]
 800bba4:	2b01      	cmp	r3, #1
 800bba6:	d13a      	bne.n	800bc1e <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800bba8:	68fb      	ldr	r3, [r7, #12]
 800bbaa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bbae:	69da      	ldr	r2, [r3, #28]
 800bbb0:	683b      	ldr	r3, [r7, #0]
 800bbb2:	781b      	ldrb	r3, [r3, #0]
 800bbb4:	f003 030f 	and.w	r3, r3, #15
 800bbb8:	2101      	movs	r1, #1
 800bbba:	fa01 f303 	lsl.w	r3, r1, r3
 800bbbe:	b29b      	uxth	r3, r3
 800bbc0:	68f9      	ldr	r1, [r7, #12]
 800bbc2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800bbc6:	4313      	orrs	r3, r2
 800bbc8:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800bbca:	68bb      	ldr	r3, [r7, #8]
 800bbcc:	015a      	lsls	r2, r3, #5
 800bbce:	68fb      	ldr	r3, [r7, #12]
 800bbd0:	4413      	add	r3, r2
 800bbd2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bbd6:	681b      	ldr	r3, [r3, #0]
 800bbd8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800bbdc:	2b00      	cmp	r3, #0
 800bbde:	d155      	bne.n	800bc8c <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800bbe0:	68bb      	ldr	r3, [r7, #8]
 800bbe2:	015a      	lsls	r2, r3, #5
 800bbe4:	68fb      	ldr	r3, [r7, #12]
 800bbe6:	4413      	add	r3, r2
 800bbe8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bbec:	681a      	ldr	r2, [r3, #0]
 800bbee:	683b      	ldr	r3, [r7, #0]
 800bbf0:	68db      	ldr	r3, [r3, #12]
 800bbf2:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800bbf6:	683b      	ldr	r3, [r7, #0]
 800bbf8:	791b      	ldrb	r3, [r3, #4]
 800bbfa:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800bbfc:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800bbfe:	68bb      	ldr	r3, [r7, #8]
 800bc00:	059b      	lsls	r3, r3, #22
 800bc02:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800bc04:	4313      	orrs	r3, r2
 800bc06:	68ba      	ldr	r2, [r7, #8]
 800bc08:	0151      	lsls	r1, r2, #5
 800bc0a:	68fa      	ldr	r2, [r7, #12]
 800bc0c:	440a      	add	r2, r1
 800bc0e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bc12:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800bc16:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800bc1a:	6013      	str	r3, [r2, #0]
 800bc1c:	e036      	b.n	800bc8c <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800bc1e:	68fb      	ldr	r3, [r7, #12]
 800bc20:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bc24:	69da      	ldr	r2, [r3, #28]
 800bc26:	683b      	ldr	r3, [r7, #0]
 800bc28:	781b      	ldrb	r3, [r3, #0]
 800bc2a:	f003 030f 	and.w	r3, r3, #15
 800bc2e:	2101      	movs	r1, #1
 800bc30:	fa01 f303 	lsl.w	r3, r1, r3
 800bc34:	041b      	lsls	r3, r3, #16
 800bc36:	68f9      	ldr	r1, [r7, #12]
 800bc38:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800bc3c:	4313      	orrs	r3, r2
 800bc3e:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800bc40:	68bb      	ldr	r3, [r7, #8]
 800bc42:	015a      	lsls	r2, r3, #5
 800bc44:	68fb      	ldr	r3, [r7, #12]
 800bc46:	4413      	add	r3, r2
 800bc48:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bc4c:	681b      	ldr	r3, [r3, #0]
 800bc4e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800bc52:	2b00      	cmp	r3, #0
 800bc54:	d11a      	bne.n	800bc8c <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800bc56:	68bb      	ldr	r3, [r7, #8]
 800bc58:	015a      	lsls	r2, r3, #5
 800bc5a:	68fb      	ldr	r3, [r7, #12]
 800bc5c:	4413      	add	r3, r2
 800bc5e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bc62:	681a      	ldr	r2, [r3, #0]
 800bc64:	683b      	ldr	r3, [r7, #0]
 800bc66:	68db      	ldr	r3, [r3, #12]
 800bc68:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800bc6c:	683b      	ldr	r3, [r7, #0]
 800bc6e:	791b      	ldrb	r3, [r3, #4]
 800bc70:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800bc72:	430b      	orrs	r3, r1
 800bc74:	4313      	orrs	r3, r2
 800bc76:	68ba      	ldr	r2, [r7, #8]
 800bc78:	0151      	lsls	r1, r2, #5
 800bc7a:	68fa      	ldr	r2, [r7, #12]
 800bc7c:	440a      	add	r2, r1
 800bc7e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bc82:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800bc86:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800bc8a:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800bc8c:	2300      	movs	r3, #0
}
 800bc8e:	4618      	mov	r0, r3
 800bc90:	3714      	adds	r7, #20
 800bc92:	46bd      	mov	sp, r7
 800bc94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc98:	4770      	bx	lr
	...

0800bc9c <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800bc9c:	b480      	push	{r7}
 800bc9e:	b085      	sub	sp, #20
 800bca0:	af00      	add	r7, sp, #0
 800bca2:	6078      	str	r0, [r7, #4]
 800bca4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bca6:	687b      	ldr	r3, [r7, #4]
 800bca8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800bcaa:	683b      	ldr	r3, [r7, #0]
 800bcac:	781b      	ldrb	r3, [r3, #0]
 800bcae:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800bcb0:	683b      	ldr	r3, [r7, #0]
 800bcb2:	785b      	ldrb	r3, [r3, #1]
 800bcb4:	2b01      	cmp	r3, #1
 800bcb6:	d161      	bne.n	800bd7c <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800bcb8:	68bb      	ldr	r3, [r7, #8]
 800bcba:	015a      	lsls	r2, r3, #5
 800bcbc:	68fb      	ldr	r3, [r7, #12]
 800bcbe:	4413      	add	r3, r2
 800bcc0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bcc4:	681b      	ldr	r3, [r3, #0]
 800bcc6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800bcca:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800bcce:	d11f      	bne.n	800bd10 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800bcd0:	68bb      	ldr	r3, [r7, #8]
 800bcd2:	015a      	lsls	r2, r3, #5
 800bcd4:	68fb      	ldr	r3, [r7, #12]
 800bcd6:	4413      	add	r3, r2
 800bcd8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bcdc:	681b      	ldr	r3, [r3, #0]
 800bcde:	68ba      	ldr	r2, [r7, #8]
 800bce0:	0151      	lsls	r1, r2, #5
 800bce2:	68fa      	ldr	r2, [r7, #12]
 800bce4:	440a      	add	r2, r1
 800bce6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bcea:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800bcee:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800bcf0:	68bb      	ldr	r3, [r7, #8]
 800bcf2:	015a      	lsls	r2, r3, #5
 800bcf4:	68fb      	ldr	r3, [r7, #12]
 800bcf6:	4413      	add	r3, r2
 800bcf8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bcfc:	681b      	ldr	r3, [r3, #0]
 800bcfe:	68ba      	ldr	r2, [r7, #8]
 800bd00:	0151      	lsls	r1, r2, #5
 800bd02:	68fa      	ldr	r2, [r7, #12]
 800bd04:	440a      	add	r2, r1
 800bd06:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bd0a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800bd0e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800bd10:	68fb      	ldr	r3, [r7, #12]
 800bd12:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bd16:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800bd18:	683b      	ldr	r3, [r7, #0]
 800bd1a:	781b      	ldrb	r3, [r3, #0]
 800bd1c:	f003 030f 	and.w	r3, r3, #15
 800bd20:	2101      	movs	r1, #1
 800bd22:	fa01 f303 	lsl.w	r3, r1, r3
 800bd26:	b29b      	uxth	r3, r3
 800bd28:	43db      	mvns	r3, r3
 800bd2a:	68f9      	ldr	r1, [r7, #12]
 800bd2c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800bd30:	4013      	ands	r3, r2
 800bd32:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800bd34:	68fb      	ldr	r3, [r7, #12]
 800bd36:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bd3a:	69da      	ldr	r2, [r3, #28]
 800bd3c:	683b      	ldr	r3, [r7, #0]
 800bd3e:	781b      	ldrb	r3, [r3, #0]
 800bd40:	f003 030f 	and.w	r3, r3, #15
 800bd44:	2101      	movs	r1, #1
 800bd46:	fa01 f303 	lsl.w	r3, r1, r3
 800bd4a:	b29b      	uxth	r3, r3
 800bd4c:	43db      	mvns	r3, r3
 800bd4e:	68f9      	ldr	r1, [r7, #12]
 800bd50:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800bd54:	4013      	ands	r3, r2
 800bd56:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800bd58:	68bb      	ldr	r3, [r7, #8]
 800bd5a:	015a      	lsls	r2, r3, #5
 800bd5c:	68fb      	ldr	r3, [r7, #12]
 800bd5e:	4413      	add	r3, r2
 800bd60:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bd64:	681a      	ldr	r2, [r3, #0]
 800bd66:	68bb      	ldr	r3, [r7, #8]
 800bd68:	0159      	lsls	r1, r3, #5
 800bd6a:	68fb      	ldr	r3, [r7, #12]
 800bd6c:	440b      	add	r3, r1
 800bd6e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bd72:	4619      	mov	r1, r3
 800bd74:	4b35      	ldr	r3, [pc, #212]	; (800be4c <USB_DeactivateEndpoint+0x1b0>)
 800bd76:	4013      	ands	r3, r2
 800bd78:	600b      	str	r3, [r1, #0]
 800bd7a:	e060      	b.n	800be3e <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800bd7c:	68bb      	ldr	r3, [r7, #8]
 800bd7e:	015a      	lsls	r2, r3, #5
 800bd80:	68fb      	ldr	r3, [r7, #12]
 800bd82:	4413      	add	r3, r2
 800bd84:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bd88:	681b      	ldr	r3, [r3, #0]
 800bd8a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800bd8e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800bd92:	d11f      	bne.n	800bdd4 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800bd94:	68bb      	ldr	r3, [r7, #8]
 800bd96:	015a      	lsls	r2, r3, #5
 800bd98:	68fb      	ldr	r3, [r7, #12]
 800bd9a:	4413      	add	r3, r2
 800bd9c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bda0:	681b      	ldr	r3, [r3, #0]
 800bda2:	68ba      	ldr	r2, [r7, #8]
 800bda4:	0151      	lsls	r1, r2, #5
 800bda6:	68fa      	ldr	r2, [r7, #12]
 800bda8:	440a      	add	r2, r1
 800bdaa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bdae:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800bdb2:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800bdb4:	68bb      	ldr	r3, [r7, #8]
 800bdb6:	015a      	lsls	r2, r3, #5
 800bdb8:	68fb      	ldr	r3, [r7, #12]
 800bdba:	4413      	add	r3, r2
 800bdbc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bdc0:	681b      	ldr	r3, [r3, #0]
 800bdc2:	68ba      	ldr	r2, [r7, #8]
 800bdc4:	0151      	lsls	r1, r2, #5
 800bdc6:	68fa      	ldr	r2, [r7, #12]
 800bdc8:	440a      	add	r2, r1
 800bdca:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bdce:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800bdd2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800bdd4:	68fb      	ldr	r3, [r7, #12]
 800bdd6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bdda:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800bddc:	683b      	ldr	r3, [r7, #0]
 800bdde:	781b      	ldrb	r3, [r3, #0]
 800bde0:	f003 030f 	and.w	r3, r3, #15
 800bde4:	2101      	movs	r1, #1
 800bde6:	fa01 f303 	lsl.w	r3, r1, r3
 800bdea:	041b      	lsls	r3, r3, #16
 800bdec:	43db      	mvns	r3, r3
 800bdee:	68f9      	ldr	r1, [r7, #12]
 800bdf0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800bdf4:	4013      	ands	r3, r2
 800bdf6:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800bdf8:	68fb      	ldr	r3, [r7, #12]
 800bdfa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bdfe:	69da      	ldr	r2, [r3, #28]
 800be00:	683b      	ldr	r3, [r7, #0]
 800be02:	781b      	ldrb	r3, [r3, #0]
 800be04:	f003 030f 	and.w	r3, r3, #15
 800be08:	2101      	movs	r1, #1
 800be0a:	fa01 f303 	lsl.w	r3, r1, r3
 800be0e:	041b      	lsls	r3, r3, #16
 800be10:	43db      	mvns	r3, r3
 800be12:	68f9      	ldr	r1, [r7, #12]
 800be14:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800be18:	4013      	ands	r3, r2
 800be1a:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800be1c:	68bb      	ldr	r3, [r7, #8]
 800be1e:	015a      	lsls	r2, r3, #5
 800be20:	68fb      	ldr	r3, [r7, #12]
 800be22:	4413      	add	r3, r2
 800be24:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800be28:	681a      	ldr	r2, [r3, #0]
 800be2a:	68bb      	ldr	r3, [r7, #8]
 800be2c:	0159      	lsls	r1, r3, #5
 800be2e:	68fb      	ldr	r3, [r7, #12]
 800be30:	440b      	add	r3, r1
 800be32:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800be36:	4619      	mov	r1, r3
 800be38:	4b05      	ldr	r3, [pc, #20]	; (800be50 <USB_DeactivateEndpoint+0x1b4>)
 800be3a:	4013      	ands	r3, r2
 800be3c:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800be3e:	2300      	movs	r3, #0
}
 800be40:	4618      	mov	r0, r3
 800be42:	3714      	adds	r7, #20
 800be44:	46bd      	mov	sp, r7
 800be46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be4a:	4770      	bx	lr
 800be4c:	ec337800 	.word	0xec337800
 800be50:	eff37800 	.word	0xeff37800

0800be54 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800be54:	b580      	push	{r7, lr}
 800be56:	b08a      	sub	sp, #40	; 0x28
 800be58:	af02      	add	r7, sp, #8
 800be5a:	60f8      	str	r0, [r7, #12]
 800be5c:	60b9      	str	r1, [r7, #8]
 800be5e:	4613      	mov	r3, r2
 800be60:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800be62:	68fb      	ldr	r3, [r7, #12]
 800be64:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800be66:	68bb      	ldr	r3, [r7, #8]
 800be68:	781b      	ldrb	r3, [r3, #0]
 800be6a:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800be6c:	68bb      	ldr	r3, [r7, #8]
 800be6e:	785b      	ldrb	r3, [r3, #1]
 800be70:	2b01      	cmp	r3, #1
 800be72:	f040 815c 	bne.w	800c12e <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800be76:	68bb      	ldr	r3, [r7, #8]
 800be78:	699b      	ldr	r3, [r3, #24]
 800be7a:	2b00      	cmp	r3, #0
 800be7c:	d132      	bne.n	800bee4 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800be7e:	69bb      	ldr	r3, [r7, #24]
 800be80:	015a      	lsls	r2, r3, #5
 800be82:	69fb      	ldr	r3, [r7, #28]
 800be84:	4413      	add	r3, r2
 800be86:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800be8a:	691b      	ldr	r3, [r3, #16]
 800be8c:	69ba      	ldr	r2, [r7, #24]
 800be8e:	0151      	lsls	r1, r2, #5
 800be90:	69fa      	ldr	r2, [r7, #28]
 800be92:	440a      	add	r2, r1
 800be94:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800be98:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800be9c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800bea0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800bea2:	69bb      	ldr	r3, [r7, #24]
 800bea4:	015a      	lsls	r2, r3, #5
 800bea6:	69fb      	ldr	r3, [r7, #28]
 800bea8:	4413      	add	r3, r2
 800beaa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800beae:	691b      	ldr	r3, [r3, #16]
 800beb0:	69ba      	ldr	r2, [r7, #24]
 800beb2:	0151      	lsls	r1, r2, #5
 800beb4:	69fa      	ldr	r2, [r7, #28]
 800beb6:	440a      	add	r2, r1
 800beb8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bebc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800bec0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800bec2:	69bb      	ldr	r3, [r7, #24]
 800bec4:	015a      	lsls	r2, r3, #5
 800bec6:	69fb      	ldr	r3, [r7, #28]
 800bec8:	4413      	add	r3, r2
 800beca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bece:	691b      	ldr	r3, [r3, #16]
 800bed0:	69ba      	ldr	r2, [r7, #24]
 800bed2:	0151      	lsls	r1, r2, #5
 800bed4:	69fa      	ldr	r2, [r7, #28]
 800bed6:	440a      	add	r2, r1
 800bed8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bedc:	0cdb      	lsrs	r3, r3, #19
 800bede:	04db      	lsls	r3, r3, #19
 800bee0:	6113      	str	r3, [r2, #16]
 800bee2:	e074      	b.n	800bfce <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800bee4:	69bb      	ldr	r3, [r7, #24]
 800bee6:	015a      	lsls	r2, r3, #5
 800bee8:	69fb      	ldr	r3, [r7, #28]
 800beea:	4413      	add	r3, r2
 800beec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bef0:	691b      	ldr	r3, [r3, #16]
 800bef2:	69ba      	ldr	r2, [r7, #24]
 800bef4:	0151      	lsls	r1, r2, #5
 800bef6:	69fa      	ldr	r2, [r7, #28]
 800bef8:	440a      	add	r2, r1
 800befa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800befe:	0cdb      	lsrs	r3, r3, #19
 800bf00:	04db      	lsls	r3, r3, #19
 800bf02:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800bf04:	69bb      	ldr	r3, [r7, #24]
 800bf06:	015a      	lsls	r2, r3, #5
 800bf08:	69fb      	ldr	r3, [r7, #28]
 800bf0a:	4413      	add	r3, r2
 800bf0c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bf10:	691b      	ldr	r3, [r3, #16]
 800bf12:	69ba      	ldr	r2, [r7, #24]
 800bf14:	0151      	lsls	r1, r2, #5
 800bf16:	69fa      	ldr	r2, [r7, #28]
 800bf18:	440a      	add	r2, r1
 800bf1a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bf1e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800bf22:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800bf26:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800bf28:	69bb      	ldr	r3, [r7, #24]
 800bf2a:	015a      	lsls	r2, r3, #5
 800bf2c:	69fb      	ldr	r3, [r7, #28]
 800bf2e:	4413      	add	r3, r2
 800bf30:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bf34:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800bf36:	68bb      	ldr	r3, [r7, #8]
 800bf38:	6999      	ldr	r1, [r3, #24]
 800bf3a:	68bb      	ldr	r3, [r7, #8]
 800bf3c:	68db      	ldr	r3, [r3, #12]
 800bf3e:	440b      	add	r3, r1
 800bf40:	1e59      	subs	r1, r3, #1
 800bf42:	68bb      	ldr	r3, [r7, #8]
 800bf44:	68db      	ldr	r3, [r3, #12]
 800bf46:	fbb1 f3f3 	udiv	r3, r1, r3
 800bf4a:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800bf4c:	4b9d      	ldr	r3, [pc, #628]	; (800c1c4 <USB_EPStartXfer+0x370>)
 800bf4e:	400b      	ands	r3, r1
 800bf50:	69b9      	ldr	r1, [r7, #24]
 800bf52:	0148      	lsls	r0, r1, #5
 800bf54:	69f9      	ldr	r1, [r7, #28]
 800bf56:	4401      	add	r1, r0
 800bf58:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800bf5c:	4313      	orrs	r3, r2
 800bf5e:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800bf60:	69bb      	ldr	r3, [r7, #24]
 800bf62:	015a      	lsls	r2, r3, #5
 800bf64:	69fb      	ldr	r3, [r7, #28]
 800bf66:	4413      	add	r3, r2
 800bf68:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bf6c:	691a      	ldr	r2, [r3, #16]
 800bf6e:	68bb      	ldr	r3, [r7, #8]
 800bf70:	699b      	ldr	r3, [r3, #24]
 800bf72:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800bf76:	69b9      	ldr	r1, [r7, #24]
 800bf78:	0148      	lsls	r0, r1, #5
 800bf7a:	69f9      	ldr	r1, [r7, #28]
 800bf7c:	4401      	add	r1, r0
 800bf7e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800bf82:	4313      	orrs	r3, r2
 800bf84:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800bf86:	68bb      	ldr	r3, [r7, #8]
 800bf88:	791b      	ldrb	r3, [r3, #4]
 800bf8a:	2b01      	cmp	r3, #1
 800bf8c:	d11f      	bne.n	800bfce <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800bf8e:	69bb      	ldr	r3, [r7, #24]
 800bf90:	015a      	lsls	r2, r3, #5
 800bf92:	69fb      	ldr	r3, [r7, #28]
 800bf94:	4413      	add	r3, r2
 800bf96:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bf9a:	691b      	ldr	r3, [r3, #16]
 800bf9c:	69ba      	ldr	r2, [r7, #24]
 800bf9e:	0151      	lsls	r1, r2, #5
 800bfa0:	69fa      	ldr	r2, [r7, #28]
 800bfa2:	440a      	add	r2, r1
 800bfa4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bfa8:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800bfac:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800bfae:	69bb      	ldr	r3, [r7, #24]
 800bfb0:	015a      	lsls	r2, r3, #5
 800bfb2:	69fb      	ldr	r3, [r7, #28]
 800bfb4:	4413      	add	r3, r2
 800bfb6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bfba:	691b      	ldr	r3, [r3, #16]
 800bfbc:	69ba      	ldr	r2, [r7, #24]
 800bfbe:	0151      	lsls	r1, r2, #5
 800bfc0:	69fa      	ldr	r2, [r7, #28]
 800bfc2:	440a      	add	r2, r1
 800bfc4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bfc8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800bfcc:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800bfce:	79fb      	ldrb	r3, [r7, #7]
 800bfd0:	2b01      	cmp	r3, #1
 800bfd2:	d14b      	bne.n	800c06c <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800bfd4:	68bb      	ldr	r3, [r7, #8]
 800bfd6:	695b      	ldr	r3, [r3, #20]
 800bfd8:	2b00      	cmp	r3, #0
 800bfda:	d009      	beq.n	800bff0 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800bfdc:	69bb      	ldr	r3, [r7, #24]
 800bfde:	015a      	lsls	r2, r3, #5
 800bfe0:	69fb      	ldr	r3, [r7, #28]
 800bfe2:	4413      	add	r3, r2
 800bfe4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bfe8:	461a      	mov	r2, r3
 800bfea:	68bb      	ldr	r3, [r7, #8]
 800bfec:	695b      	ldr	r3, [r3, #20]
 800bfee:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800bff0:	68bb      	ldr	r3, [r7, #8]
 800bff2:	791b      	ldrb	r3, [r3, #4]
 800bff4:	2b01      	cmp	r3, #1
 800bff6:	d128      	bne.n	800c04a <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800bff8:	69fb      	ldr	r3, [r7, #28]
 800bffa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bffe:	689b      	ldr	r3, [r3, #8]
 800c000:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c004:	2b00      	cmp	r3, #0
 800c006:	d110      	bne.n	800c02a <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800c008:	69bb      	ldr	r3, [r7, #24]
 800c00a:	015a      	lsls	r2, r3, #5
 800c00c:	69fb      	ldr	r3, [r7, #28]
 800c00e:	4413      	add	r3, r2
 800c010:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c014:	681b      	ldr	r3, [r3, #0]
 800c016:	69ba      	ldr	r2, [r7, #24]
 800c018:	0151      	lsls	r1, r2, #5
 800c01a:	69fa      	ldr	r2, [r7, #28]
 800c01c:	440a      	add	r2, r1
 800c01e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c022:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800c026:	6013      	str	r3, [r2, #0]
 800c028:	e00f      	b.n	800c04a <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800c02a:	69bb      	ldr	r3, [r7, #24]
 800c02c:	015a      	lsls	r2, r3, #5
 800c02e:	69fb      	ldr	r3, [r7, #28]
 800c030:	4413      	add	r3, r2
 800c032:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c036:	681b      	ldr	r3, [r3, #0]
 800c038:	69ba      	ldr	r2, [r7, #24]
 800c03a:	0151      	lsls	r1, r2, #5
 800c03c:	69fa      	ldr	r2, [r7, #28]
 800c03e:	440a      	add	r2, r1
 800c040:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c044:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c048:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800c04a:	69bb      	ldr	r3, [r7, #24]
 800c04c:	015a      	lsls	r2, r3, #5
 800c04e:	69fb      	ldr	r3, [r7, #28]
 800c050:	4413      	add	r3, r2
 800c052:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c056:	681b      	ldr	r3, [r3, #0]
 800c058:	69ba      	ldr	r2, [r7, #24]
 800c05a:	0151      	lsls	r1, r2, #5
 800c05c:	69fa      	ldr	r2, [r7, #28]
 800c05e:	440a      	add	r2, r1
 800c060:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c064:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800c068:	6013      	str	r3, [r2, #0]
 800c06a:	e133      	b.n	800c2d4 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800c06c:	69bb      	ldr	r3, [r7, #24]
 800c06e:	015a      	lsls	r2, r3, #5
 800c070:	69fb      	ldr	r3, [r7, #28]
 800c072:	4413      	add	r3, r2
 800c074:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c078:	681b      	ldr	r3, [r3, #0]
 800c07a:	69ba      	ldr	r2, [r7, #24]
 800c07c:	0151      	lsls	r1, r2, #5
 800c07e:	69fa      	ldr	r2, [r7, #28]
 800c080:	440a      	add	r2, r1
 800c082:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c086:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800c08a:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800c08c:	68bb      	ldr	r3, [r7, #8]
 800c08e:	791b      	ldrb	r3, [r3, #4]
 800c090:	2b01      	cmp	r3, #1
 800c092:	d015      	beq.n	800c0c0 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800c094:	68bb      	ldr	r3, [r7, #8]
 800c096:	699b      	ldr	r3, [r3, #24]
 800c098:	2b00      	cmp	r3, #0
 800c09a:	f000 811b 	beq.w	800c2d4 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800c09e:	69fb      	ldr	r3, [r7, #28]
 800c0a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c0a4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c0a6:	68bb      	ldr	r3, [r7, #8]
 800c0a8:	781b      	ldrb	r3, [r3, #0]
 800c0aa:	f003 030f 	and.w	r3, r3, #15
 800c0ae:	2101      	movs	r1, #1
 800c0b0:	fa01 f303 	lsl.w	r3, r1, r3
 800c0b4:	69f9      	ldr	r1, [r7, #28]
 800c0b6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c0ba:	4313      	orrs	r3, r2
 800c0bc:	634b      	str	r3, [r1, #52]	; 0x34
 800c0be:	e109      	b.n	800c2d4 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800c0c0:	69fb      	ldr	r3, [r7, #28]
 800c0c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c0c6:	689b      	ldr	r3, [r3, #8]
 800c0c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c0cc:	2b00      	cmp	r3, #0
 800c0ce:	d110      	bne.n	800c0f2 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800c0d0:	69bb      	ldr	r3, [r7, #24]
 800c0d2:	015a      	lsls	r2, r3, #5
 800c0d4:	69fb      	ldr	r3, [r7, #28]
 800c0d6:	4413      	add	r3, r2
 800c0d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c0dc:	681b      	ldr	r3, [r3, #0]
 800c0de:	69ba      	ldr	r2, [r7, #24]
 800c0e0:	0151      	lsls	r1, r2, #5
 800c0e2:	69fa      	ldr	r2, [r7, #28]
 800c0e4:	440a      	add	r2, r1
 800c0e6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c0ea:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800c0ee:	6013      	str	r3, [r2, #0]
 800c0f0:	e00f      	b.n	800c112 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800c0f2:	69bb      	ldr	r3, [r7, #24]
 800c0f4:	015a      	lsls	r2, r3, #5
 800c0f6:	69fb      	ldr	r3, [r7, #28]
 800c0f8:	4413      	add	r3, r2
 800c0fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c0fe:	681b      	ldr	r3, [r3, #0]
 800c100:	69ba      	ldr	r2, [r7, #24]
 800c102:	0151      	lsls	r1, r2, #5
 800c104:	69fa      	ldr	r2, [r7, #28]
 800c106:	440a      	add	r2, r1
 800c108:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c10c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c110:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800c112:	68bb      	ldr	r3, [r7, #8]
 800c114:	6919      	ldr	r1, [r3, #16]
 800c116:	68bb      	ldr	r3, [r7, #8]
 800c118:	781a      	ldrb	r2, [r3, #0]
 800c11a:	68bb      	ldr	r3, [r7, #8]
 800c11c:	699b      	ldr	r3, [r3, #24]
 800c11e:	b298      	uxth	r0, r3
 800c120:	79fb      	ldrb	r3, [r7, #7]
 800c122:	9300      	str	r3, [sp, #0]
 800c124:	4603      	mov	r3, r0
 800c126:	68f8      	ldr	r0, [r7, #12]
 800c128:	f000 fade 	bl	800c6e8 <USB_WritePacket>
 800c12c:	e0d2      	b.n	800c2d4 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800c12e:	69bb      	ldr	r3, [r7, #24]
 800c130:	015a      	lsls	r2, r3, #5
 800c132:	69fb      	ldr	r3, [r7, #28]
 800c134:	4413      	add	r3, r2
 800c136:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c13a:	691b      	ldr	r3, [r3, #16]
 800c13c:	69ba      	ldr	r2, [r7, #24]
 800c13e:	0151      	lsls	r1, r2, #5
 800c140:	69fa      	ldr	r2, [r7, #28]
 800c142:	440a      	add	r2, r1
 800c144:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c148:	0cdb      	lsrs	r3, r3, #19
 800c14a:	04db      	lsls	r3, r3, #19
 800c14c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800c14e:	69bb      	ldr	r3, [r7, #24]
 800c150:	015a      	lsls	r2, r3, #5
 800c152:	69fb      	ldr	r3, [r7, #28]
 800c154:	4413      	add	r3, r2
 800c156:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c15a:	691b      	ldr	r3, [r3, #16]
 800c15c:	69ba      	ldr	r2, [r7, #24]
 800c15e:	0151      	lsls	r1, r2, #5
 800c160:	69fa      	ldr	r2, [r7, #28]
 800c162:	440a      	add	r2, r1
 800c164:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c168:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800c16c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800c170:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800c172:	68bb      	ldr	r3, [r7, #8]
 800c174:	699b      	ldr	r3, [r3, #24]
 800c176:	2b00      	cmp	r3, #0
 800c178:	d126      	bne.n	800c1c8 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800c17a:	69bb      	ldr	r3, [r7, #24]
 800c17c:	015a      	lsls	r2, r3, #5
 800c17e:	69fb      	ldr	r3, [r7, #28]
 800c180:	4413      	add	r3, r2
 800c182:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c186:	691a      	ldr	r2, [r3, #16]
 800c188:	68bb      	ldr	r3, [r7, #8]
 800c18a:	68db      	ldr	r3, [r3, #12]
 800c18c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800c190:	69b9      	ldr	r1, [r7, #24]
 800c192:	0148      	lsls	r0, r1, #5
 800c194:	69f9      	ldr	r1, [r7, #28]
 800c196:	4401      	add	r1, r0
 800c198:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800c19c:	4313      	orrs	r3, r2
 800c19e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800c1a0:	69bb      	ldr	r3, [r7, #24]
 800c1a2:	015a      	lsls	r2, r3, #5
 800c1a4:	69fb      	ldr	r3, [r7, #28]
 800c1a6:	4413      	add	r3, r2
 800c1a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c1ac:	691b      	ldr	r3, [r3, #16]
 800c1ae:	69ba      	ldr	r2, [r7, #24]
 800c1b0:	0151      	lsls	r1, r2, #5
 800c1b2:	69fa      	ldr	r2, [r7, #28]
 800c1b4:	440a      	add	r2, r1
 800c1b6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c1ba:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800c1be:	6113      	str	r3, [r2, #16]
 800c1c0:	e03a      	b.n	800c238 <USB_EPStartXfer+0x3e4>
 800c1c2:	bf00      	nop
 800c1c4:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800c1c8:	68bb      	ldr	r3, [r7, #8]
 800c1ca:	699a      	ldr	r2, [r3, #24]
 800c1cc:	68bb      	ldr	r3, [r7, #8]
 800c1ce:	68db      	ldr	r3, [r3, #12]
 800c1d0:	4413      	add	r3, r2
 800c1d2:	1e5a      	subs	r2, r3, #1
 800c1d4:	68bb      	ldr	r3, [r7, #8]
 800c1d6:	68db      	ldr	r3, [r3, #12]
 800c1d8:	fbb2 f3f3 	udiv	r3, r2, r3
 800c1dc:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 800c1de:	68bb      	ldr	r3, [r7, #8]
 800c1e0:	68db      	ldr	r3, [r3, #12]
 800c1e2:	8afa      	ldrh	r2, [r7, #22]
 800c1e4:	fb03 f202 	mul.w	r2, r3, r2
 800c1e8:	68bb      	ldr	r3, [r7, #8]
 800c1ea:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800c1ec:	69bb      	ldr	r3, [r7, #24]
 800c1ee:	015a      	lsls	r2, r3, #5
 800c1f0:	69fb      	ldr	r3, [r7, #28]
 800c1f2:	4413      	add	r3, r2
 800c1f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c1f8:	691a      	ldr	r2, [r3, #16]
 800c1fa:	8afb      	ldrh	r3, [r7, #22]
 800c1fc:	04d9      	lsls	r1, r3, #19
 800c1fe:	4b38      	ldr	r3, [pc, #224]	; (800c2e0 <USB_EPStartXfer+0x48c>)
 800c200:	400b      	ands	r3, r1
 800c202:	69b9      	ldr	r1, [r7, #24]
 800c204:	0148      	lsls	r0, r1, #5
 800c206:	69f9      	ldr	r1, [r7, #28]
 800c208:	4401      	add	r1, r0
 800c20a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800c20e:	4313      	orrs	r3, r2
 800c210:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800c212:	69bb      	ldr	r3, [r7, #24]
 800c214:	015a      	lsls	r2, r3, #5
 800c216:	69fb      	ldr	r3, [r7, #28]
 800c218:	4413      	add	r3, r2
 800c21a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c21e:	691a      	ldr	r2, [r3, #16]
 800c220:	68bb      	ldr	r3, [r7, #8]
 800c222:	69db      	ldr	r3, [r3, #28]
 800c224:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800c228:	69b9      	ldr	r1, [r7, #24]
 800c22a:	0148      	lsls	r0, r1, #5
 800c22c:	69f9      	ldr	r1, [r7, #28]
 800c22e:	4401      	add	r1, r0
 800c230:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800c234:	4313      	orrs	r3, r2
 800c236:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800c238:	79fb      	ldrb	r3, [r7, #7]
 800c23a:	2b01      	cmp	r3, #1
 800c23c:	d10d      	bne.n	800c25a <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800c23e:	68bb      	ldr	r3, [r7, #8]
 800c240:	691b      	ldr	r3, [r3, #16]
 800c242:	2b00      	cmp	r3, #0
 800c244:	d009      	beq.n	800c25a <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800c246:	68bb      	ldr	r3, [r7, #8]
 800c248:	6919      	ldr	r1, [r3, #16]
 800c24a:	69bb      	ldr	r3, [r7, #24]
 800c24c:	015a      	lsls	r2, r3, #5
 800c24e:	69fb      	ldr	r3, [r7, #28]
 800c250:	4413      	add	r3, r2
 800c252:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c256:	460a      	mov	r2, r1
 800c258:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800c25a:	68bb      	ldr	r3, [r7, #8]
 800c25c:	791b      	ldrb	r3, [r3, #4]
 800c25e:	2b01      	cmp	r3, #1
 800c260:	d128      	bne.n	800c2b4 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800c262:	69fb      	ldr	r3, [r7, #28]
 800c264:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c268:	689b      	ldr	r3, [r3, #8]
 800c26a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c26e:	2b00      	cmp	r3, #0
 800c270:	d110      	bne.n	800c294 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800c272:	69bb      	ldr	r3, [r7, #24]
 800c274:	015a      	lsls	r2, r3, #5
 800c276:	69fb      	ldr	r3, [r7, #28]
 800c278:	4413      	add	r3, r2
 800c27a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c27e:	681b      	ldr	r3, [r3, #0]
 800c280:	69ba      	ldr	r2, [r7, #24]
 800c282:	0151      	lsls	r1, r2, #5
 800c284:	69fa      	ldr	r2, [r7, #28]
 800c286:	440a      	add	r2, r1
 800c288:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c28c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800c290:	6013      	str	r3, [r2, #0]
 800c292:	e00f      	b.n	800c2b4 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800c294:	69bb      	ldr	r3, [r7, #24]
 800c296:	015a      	lsls	r2, r3, #5
 800c298:	69fb      	ldr	r3, [r7, #28]
 800c29a:	4413      	add	r3, r2
 800c29c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c2a0:	681b      	ldr	r3, [r3, #0]
 800c2a2:	69ba      	ldr	r2, [r7, #24]
 800c2a4:	0151      	lsls	r1, r2, #5
 800c2a6:	69fa      	ldr	r2, [r7, #28]
 800c2a8:	440a      	add	r2, r1
 800c2aa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c2ae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c2b2:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800c2b4:	69bb      	ldr	r3, [r7, #24]
 800c2b6:	015a      	lsls	r2, r3, #5
 800c2b8:	69fb      	ldr	r3, [r7, #28]
 800c2ba:	4413      	add	r3, r2
 800c2bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c2c0:	681b      	ldr	r3, [r3, #0]
 800c2c2:	69ba      	ldr	r2, [r7, #24]
 800c2c4:	0151      	lsls	r1, r2, #5
 800c2c6:	69fa      	ldr	r2, [r7, #28]
 800c2c8:	440a      	add	r2, r1
 800c2ca:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c2ce:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800c2d2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800c2d4:	2300      	movs	r3, #0
}
 800c2d6:	4618      	mov	r0, r3
 800c2d8:	3720      	adds	r7, #32
 800c2da:	46bd      	mov	sp, r7
 800c2dc:	bd80      	pop	{r7, pc}
 800c2de:	bf00      	nop
 800c2e0:	1ff80000 	.word	0x1ff80000

0800c2e4 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800c2e4:	b480      	push	{r7}
 800c2e6:	b087      	sub	sp, #28
 800c2e8:	af00      	add	r7, sp, #0
 800c2ea:	60f8      	str	r0, [r7, #12]
 800c2ec:	60b9      	str	r1, [r7, #8]
 800c2ee:	4613      	mov	r3, r2
 800c2f0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c2f2:	68fb      	ldr	r3, [r7, #12]
 800c2f4:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800c2f6:	68bb      	ldr	r3, [r7, #8]
 800c2f8:	781b      	ldrb	r3, [r3, #0]
 800c2fa:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800c2fc:	68bb      	ldr	r3, [r7, #8]
 800c2fe:	785b      	ldrb	r3, [r3, #1]
 800c300:	2b01      	cmp	r3, #1
 800c302:	f040 80ce 	bne.w	800c4a2 <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800c306:	68bb      	ldr	r3, [r7, #8]
 800c308:	699b      	ldr	r3, [r3, #24]
 800c30a:	2b00      	cmp	r3, #0
 800c30c:	d132      	bne.n	800c374 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800c30e:	693b      	ldr	r3, [r7, #16]
 800c310:	015a      	lsls	r2, r3, #5
 800c312:	697b      	ldr	r3, [r7, #20]
 800c314:	4413      	add	r3, r2
 800c316:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c31a:	691b      	ldr	r3, [r3, #16]
 800c31c:	693a      	ldr	r2, [r7, #16]
 800c31e:	0151      	lsls	r1, r2, #5
 800c320:	697a      	ldr	r2, [r7, #20]
 800c322:	440a      	add	r2, r1
 800c324:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c328:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800c32c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800c330:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800c332:	693b      	ldr	r3, [r7, #16]
 800c334:	015a      	lsls	r2, r3, #5
 800c336:	697b      	ldr	r3, [r7, #20]
 800c338:	4413      	add	r3, r2
 800c33a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c33e:	691b      	ldr	r3, [r3, #16]
 800c340:	693a      	ldr	r2, [r7, #16]
 800c342:	0151      	lsls	r1, r2, #5
 800c344:	697a      	ldr	r2, [r7, #20]
 800c346:	440a      	add	r2, r1
 800c348:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c34c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800c350:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800c352:	693b      	ldr	r3, [r7, #16]
 800c354:	015a      	lsls	r2, r3, #5
 800c356:	697b      	ldr	r3, [r7, #20]
 800c358:	4413      	add	r3, r2
 800c35a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c35e:	691b      	ldr	r3, [r3, #16]
 800c360:	693a      	ldr	r2, [r7, #16]
 800c362:	0151      	lsls	r1, r2, #5
 800c364:	697a      	ldr	r2, [r7, #20]
 800c366:	440a      	add	r2, r1
 800c368:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c36c:	0cdb      	lsrs	r3, r3, #19
 800c36e:	04db      	lsls	r3, r3, #19
 800c370:	6113      	str	r3, [r2, #16]
 800c372:	e04e      	b.n	800c412 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800c374:	693b      	ldr	r3, [r7, #16]
 800c376:	015a      	lsls	r2, r3, #5
 800c378:	697b      	ldr	r3, [r7, #20]
 800c37a:	4413      	add	r3, r2
 800c37c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c380:	691b      	ldr	r3, [r3, #16]
 800c382:	693a      	ldr	r2, [r7, #16]
 800c384:	0151      	lsls	r1, r2, #5
 800c386:	697a      	ldr	r2, [r7, #20]
 800c388:	440a      	add	r2, r1
 800c38a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c38e:	0cdb      	lsrs	r3, r3, #19
 800c390:	04db      	lsls	r3, r3, #19
 800c392:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800c394:	693b      	ldr	r3, [r7, #16]
 800c396:	015a      	lsls	r2, r3, #5
 800c398:	697b      	ldr	r3, [r7, #20]
 800c39a:	4413      	add	r3, r2
 800c39c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c3a0:	691b      	ldr	r3, [r3, #16]
 800c3a2:	693a      	ldr	r2, [r7, #16]
 800c3a4:	0151      	lsls	r1, r2, #5
 800c3a6:	697a      	ldr	r2, [r7, #20]
 800c3a8:	440a      	add	r2, r1
 800c3aa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c3ae:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800c3b2:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800c3b6:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 800c3b8:	68bb      	ldr	r3, [r7, #8]
 800c3ba:	699a      	ldr	r2, [r3, #24]
 800c3bc:	68bb      	ldr	r3, [r7, #8]
 800c3be:	68db      	ldr	r3, [r3, #12]
 800c3c0:	429a      	cmp	r2, r3
 800c3c2:	d903      	bls.n	800c3cc <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 800c3c4:	68bb      	ldr	r3, [r7, #8]
 800c3c6:	68da      	ldr	r2, [r3, #12]
 800c3c8:	68bb      	ldr	r3, [r7, #8]
 800c3ca:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800c3cc:	693b      	ldr	r3, [r7, #16]
 800c3ce:	015a      	lsls	r2, r3, #5
 800c3d0:	697b      	ldr	r3, [r7, #20]
 800c3d2:	4413      	add	r3, r2
 800c3d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c3d8:	691b      	ldr	r3, [r3, #16]
 800c3da:	693a      	ldr	r2, [r7, #16]
 800c3dc:	0151      	lsls	r1, r2, #5
 800c3de:	697a      	ldr	r2, [r7, #20]
 800c3e0:	440a      	add	r2, r1
 800c3e2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c3e6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800c3ea:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800c3ec:	693b      	ldr	r3, [r7, #16]
 800c3ee:	015a      	lsls	r2, r3, #5
 800c3f0:	697b      	ldr	r3, [r7, #20]
 800c3f2:	4413      	add	r3, r2
 800c3f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c3f8:	691a      	ldr	r2, [r3, #16]
 800c3fa:	68bb      	ldr	r3, [r7, #8]
 800c3fc:	699b      	ldr	r3, [r3, #24]
 800c3fe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800c402:	6939      	ldr	r1, [r7, #16]
 800c404:	0148      	lsls	r0, r1, #5
 800c406:	6979      	ldr	r1, [r7, #20]
 800c408:	4401      	add	r1, r0
 800c40a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800c40e:	4313      	orrs	r3, r2
 800c410:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800c412:	79fb      	ldrb	r3, [r7, #7]
 800c414:	2b01      	cmp	r3, #1
 800c416:	d11e      	bne.n	800c456 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800c418:	68bb      	ldr	r3, [r7, #8]
 800c41a:	695b      	ldr	r3, [r3, #20]
 800c41c:	2b00      	cmp	r3, #0
 800c41e:	d009      	beq.n	800c434 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800c420:	693b      	ldr	r3, [r7, #16]
 800c422:	015a      	lsls	r2, r3, #5
 800c424:	697b      	ldr	r3, [r7, #20]
 800c426:	4413      	add	r3, r2
 800c428:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c42c:	461a      	mov	r2, r3
 800c42e:	68bb      	ldr	r3, [r7, #8]
 800c430:	695b      	ldr	r3, [r3, #20]
 800c432:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800c434:	693b      	ldr	r3, [r7, #16]
 800c436:	015a      	lsls	r2, r3, #5
 800c438:	697b      	ldr	r3, [r7, #20]
 800c43a:	4413      	add	r3, r2
 800c43c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c440:	681b      	ldr	r3, [r3, #0]
 800c442:	693a      	ldr	r2, [r7, #16]
 800c444:	0151      	lsls	r1, r2, #5
 800c446:	697a      	ldr	r2, [r7, #20]
 800c448:	440a      	add	r2, r1
 800c44a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c44e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800c452:	6013      	str	r3, [r2, #0]
 800c454:	e097      	b.n	800c586 <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800c456:	693b      	ldr	r3, [r7, #16]
 800c458:	015a      	lsls	r2, r3, #5
 800c45a:	697b      	ldr	r3, [r7, #20]
 800c45c:	4413      	add	r3, r2
 800c45e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c462:	681b      	ldr	r3, [r3, #0]
 800c464:	693a      	ldr	r2, [r7, #16]
 800c466:	0151      	lsls	r1, r2, #5
 800c468:	697a      	ldr	r2, [r7, #20]
 800c46a:	440a      	add	r2, r1
 800c46c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c470:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800c474:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800c476:	68bb      	ldr	r3, [r7, #8]
 800c478:	699b      	ldr	r3, [r3, #24]
 800c47a:	2b00      	cmp	r3, #0
 800c47c:	f000 8083 	beq.w	800c586 <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800c480:	697b      	ldr	r3, [r7, #20]
 800c482:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c486:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c488:	68bb      	ldr	r3, [r7, #8]
 800c48a:	781b      	ldrb	r3, [r3, #0]
 800c48c:	f003 030f 	and.w	r3, r3, #15
 800c490:	2101      	movs	r1, #1
 800c492:	fa01 f303 	lsl.w	r3, r1, r3
 800c496:	6979      	ldr	r1, [r7, #20]
 800c498:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c49c:	4313      	orrs	r3, r2
 800c49e:	634b      	str	r3, [r1, #52]	; 0x34
 800c4a0:	e071      	b.n	800c586 <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800c4a2:	693b      	ldr	r3, [r7, #16]
 800c4a4:	015a      	lsls	r2, r3, #5
 800c4a6:	697b      	ldr	r3, [r7, #20]
 800c4a8:	4413      	add	r3, r2
 800c4aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c4ae:	691b      	ldr	r3, [r3, #16]
 800c4b0:	693a      	ldr	r2, [r7, #16]
 800c4b2:	0151      	lsls	r1, r2, #5
 800c4b4:	697a      	ldr	r2, [r7, #20]
 800c4b6:	440a      	add	r2, r1
 800c4b8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c4bc:	0cdb      	lsrs	r3, r3, #19
 800c4be:	04db      	lsls	r3, r3, #19
 800c4c0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800c4c2:	693b      	ldr	r3, [r7, #16]
 800c4c4:	015a      	lsls	r2, r3, #5
 800c4c6:	697b      	ldr	r3, [r7, #20]
 800c4c8:	4413      	add	r3, r2
 800c4ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c4ce:	691b      	ldr	r3, [r3, #16]
 800c4d0:	693a      	ldr	r2, [r7, #16]
 800c4d2:	0151      	lsls	r1, r2, #5
 800c4d4:	697a      	ldr	r2, [r7, #20]
 800c4d6:	440a      	add	r2, r1
 800c4d8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c4dc:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800c4e0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800c4e4:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 800c4e6:	68bb      	ldr	r3, [r7, #8]
 800c4e8:	699b      	ldr	r3, [r3, #24]
 800c4ea:	2b00      	cmp	r3, #0
 800c4ec:	d003      	beq.n	800c4f6 <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 800c4ee:	68bb      	ldr	r3, [r7, #8]
 800c4f0:	68da      	ldr	r2, [r3, #12]
 800c4f2:	68bb      	ldr	r3, [r7, #8]
 800c4f4:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 800c4f6:	68bb      	ldr	r3, [r7, #8]
 800c4f8:	68da      	ldr	r2, [r3, #12]
 800c4fa:	68bb      	ldr	r3, [r7, #8]
 800c4fc:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800c4fe:	693b      	ldr	r3, [r7, #16]
 800c500:	015a      	lsls	r2, r3, #5
 800c502:	697b      	ldr	r3, [r7, #20]
 800c504:	4413      	add	r3, r2
 800c506:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c50a:	691b      	ldr	r3, [r3, #16]
 800c50c:	693a      	ldr	r2, [r7, #16]
 800c50e:	0151      	lsls	r1, r2, #5
 800c510:	697a      	ldr	r2, [r7, #20]
 800c512:	440a      	add	r2, r1
 800c514:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c518:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800c51c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800c51e:	693b      	ldr	r3, [r7, #16]
 800c520:	015a      	lsls	r2, r3, #5
 800c522:	697b      	ldr	r3, [r7, #20]
 800c524:	4413      	add	r3, r2
 800c526:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c52a:	691a      	ldr	r2, [r3, #16]
 800c52c:	68bb      	ldr	r3, [r7, #8]
 800c52e:	69db      	ldr	r3, [r3, #28]
 800c530:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800c534:	6939      	ldr	r1, [r7, #16]
 800c536:	0148      	lsls	r0, r1, #5
 800c538:	6979      	ldr	r1, [r7, #20]
 800c53a:	4401      	add	r1, r0
 800c53c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800c540:	4313      	orrs	r3, r2
 800c542:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800c544:	79fb      	ldrb	r3, [r7, #7]
 800c546:	2b01      	cmp	r3, #1
 800c548:	d10d      	bne.n	800c566 <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800c54a:	68bb      	ldr	r3, [r7, #8]
 800c54c:	691b      	ldr	r3, [r3, #16]
 800c54e:	2b00      	cmp	r3, #0
 800c550:	d009      	beq.n	800c566 <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800c552:	68bb      	ldr	r3, [r7, #8]
 800c554:	6919      	ldr	r1, [r3, #16]
 800c556:	693b      	ldr	r3, [r7, #16]
 800c558:	015a      	lsls	r2, r3, #5
 800c55a:	697b      	ldr	r3, [r7, #20]
 800c55c:	4413      	add	r3, r2
 800c55e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c562:	460a      	mov	r2, r1
 800c564:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800c566:	693b      	ldr	r3, [r7, #16]
 800c568:	015a      	lsls	r2, r3, #5
 800c56a:	697b      	ldr	r3, [r7, #20]
 800c56c:	4413      	add	r3, r2
 800c56e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c572:	681b      	ldr	r3, [r3, #0]
 800c574:	693a      	ldr	r2, [r7, #16]
 800c576:	0151      	lsls	r1, r2, #5
 800c578:	697a      	ldr	r2, [r7, #20]
 800c57a:	440a      	add	r2, r1
 800c57c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c580:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800c584:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800c586:	2300      	movs	r3, #0
}
 800c588:	4618      	mov	r0, r3
 800c58a:	371c      	adds	r7, #28
 800c58c:	46bd      	mov	sp, r7
 800c58e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c592:	4770      	bx	lr

0800c594 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800c594:	b480      	push	{r7}
 800c596:	b087      	sub	sp, #28
 800c598:	af00      	add	r7, sp, #0
 800c59a:	6078      	str	r0, [r7, #4]
 800c59c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800c59e:	2300      	movs	r3, #0
 800c5a0:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800c5a2:	2300      	movs	r3, #0
 800c5a4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c5a6:	687b      	ldr	r3, [r7, #4]
 800c5a8:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800c5aa:	683b      	ldr	r3, [r7, #0]
 800c5ac:	785b      	ldrb	r3, [r3, #1]
 800c5ae:	2b01      	cmp	r3, #1
 800c5b0:	d14a      	bne.n	800c648 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800c5b2:	683b      	ldr	r3, [r7, #0]
 800c5b4:	781b      	ldrb	r3, [r3, #0]
 800c5b6:	015a      	lsls	r2, r3, #5
 800c5b8:	693b      	ldr	r3, [r7, #16]
 800c5ba:	4413      	add	r3, r2
 800c5bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c5c0:	681b      	ldr	r3, [r3, #0]
 800c5c2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c5c6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c5ca:	f040 8086 	bne.w	800c6da <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800c5ce:	683b      	ldr	r3, [r7, #0]
 800c5d0:	781b      	ldrb	r3, [r3, #0]
 800c5d2:	015a      	lsls	r2, r3, #5
 800c5d4:	693b      	ldr	r3, [r7, #16]
 800c5d6:	4413      	add	r3, r2
 800c5d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c5dc:	681b      	ldr	r3, [r3, #0]
 800c5de:	683a      	ldr	r2, [r7, #0]
 800c5e0:	7812      	ldrb	r2, [r2, #0]
 800c5e2:	0151      	lsls	r1, r2, #5
 800c5e4:	693a      	ldr	r2, [r7, #16]
 800c5e6:	440a      	add	r2, r1
 800c5e8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c5ec:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800c5f0:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800c5f2:	683b      	ldr	r3, [r7, #0]
 800c5f4:	781b      	ldrb	r3, [r3, #0]
 800c5f6:	015a      	lsls	r2, r3, #5
 800c5f8:	693b      	ldr	r3, [r7, #16]
 800c5fa:	4413      	add	r3, r2
 800c5fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c600:	681b      	ldr	r3, [r3, #0]
 800c602:	683a      	ldr	r2, [r7, #0]
 800c604:	7812      	ldrb	r2, [r2, #0]
 800c606:	0151      	lsls	r1, r2, #5
 800c608:	693a      	ldr	r2, [r7, #16]
 800c60a:	440a      	add	r2, r1
 800c60c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c610:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800c614:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800c616:	68fb      	ldr	r3, [r7, #12]
 800c618:	3301      	adds	r3, #1
 800c61a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800c61c:	68fb      	ldr	r3, [r7, #12]
 800c61e:	f242 7210 	movw	r2, #10000	; 0x2710
 800c622:	4293      	cmp	r3, r2
 800c624:	d902      	bls.n	800c62c <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800c626:	2301      	movs	r3, #1
 800c628:	75fb      	strb	r3, [r7, #23]
          break;
 800c62a:	e056      	b.n	800c6da <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800c62c:	683b      	ldr	r3, [r7, #0]
 800c62e:	781b      	ldrb	r3, [r3, #0]
 800c630:	015a      	lsls	r2, r3, #5
 800c632:	693b      	ldr	r3, [r7, #16]
 800c634:	4413      	add	r3, r2
 800c636:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c63a:	681b      	ldr	r3, [r3, #0]
 800c63c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c640:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c644:	d0e7      	beq.n	800c616 <USB_EPStopXfer+0x82>
 800c646:	e048      	b.n	800c6da <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800c648:	683b      	ldr	r3, [r7, #0]
 800c64a:	781b      	ldrb	r3, [r3, #0]
 800c64c:	015a      	lsls	r2, r3, #5
 800c64e:	693b      	ldr	r3, [r7, #16]
 800c650:	4413      	add	r3, r2
 800c652:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c656:	681b      	ldr	r3, [r3, #0]
 800c658:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c65c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c660:	d13b      	bne.n	800c6da <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800c662:	683b      	ldr	r3, [r7, #0]
 800c664:	781b      	ldrb	r3, [r3, #0]
 800c666:	015a      	lsls	r2, r3, #5
 800c668:	693b      	ldr	r3, [r7, #16]
 800c66a:	4413      	add	r3, r2
 800c66c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c670:	681b      	ldr	r3, [r3, #0]
 800c672:	683a      	ldr	r2, [r7, #0]
 800c674:	7812      	ldrb	r2, [r2, #0]
 800c676:	0151      	lsls	r1, r2, #5
 800c678:	693a      	ldr	r2, [r7, #16]
 800c67a:	440a      	add	r2, r1
 800c67c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c680:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800c684:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800c686:	683b      	ldr	r3, [r7, #0]
 800c688:	781b      	ldrb	r3, [r3, #0]
 800c68a:	015a      	lsls	r2, r3, #5
 800c68c:	693b      	ldr	r3, [r7, #16]
 800c68e:	4413      	add	r3, r2
 800c690:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c694:	681b      	ldr	r3, [r3, #0]
 800c696:	683a      	ldr	r2, [r7, #0]
 800c698:	7812      	ldrb	r2, [r2, #0]
 800c69a:	0151      	lsls	r1, r2, #5
 800c69c:	693a      	ldr	r2, [r7, #16]
 800c69e:	440a      	add	r2, r1
 800c6a0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c6a4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800c6a8:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800c6aa:	68fb      	ldr	r3, [r7, #12]
 800c6ac:	3301      	adds	r3, #1
 800c6ae:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800c6b0:	68fb      	ldr	r3, [r7, #12]
 800c6b2:	f242 7210 	movw	r2, #10000	; 0x2710
 800c6b6:	4293      	cmp	r3, r2
 800c6b8:	d902      	bls.n	800c6c0 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800c6ba:	2301      	movs	r3, #1
 800c6bc:	75fb      	strb	r3, [r7, #23]
          break;
 800c6be:	e00c      	b.n	800c6da <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800c6c0:	683b      	ldr	r3, [r7, #0]
 800c6c2:	781b      	ldrb	r3, [r3, #0]
 800c6c4:	015a      	lsls	r2, r3, #5
 800c6c6:	693b      	ldr	r3, [r7, #16]
 800c6c8:	4413      	add	r3, r2
 800c6ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c6ce:	681b      	ldr	r3, [r3, #0]
 800c6d0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c6d4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c6d8:	d0e7      	beq.n	800c6aa <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800c6da:	7dfb      	ldrb	r3, [r7, #23]
}
 800c6dc:	4618      	mov	r0, r3
 800c6de:	371c      	adds	r7, #28
 800c6e0:	46bd      	mov	sp, r7
 800c6e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6e6:	4770      	bx	lr

0800c6e8 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800c6e8:	b480      	push	{r7}
 800c6ea:	b089      	sub	sp, #36	; 0x24
 800c6ec:	af00      	add	r7, sp, #0
 800c6ee:	60f8      	str	r0, [r7, #12]
 800c6f0:	60b9      	str	r1, [r7, #8]
 800c6f2:	4611      	mov	r1, r2
 800c6f4:	461a      	mov	r2, r3
 800c6f6:	460b      	mov	r3, r1
 800c6f8:	71fb      	strb	r3, [r7, #7]
 800c6fa:	4613      	mov	r3, r2
 800c6fc:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c6fe:	68fb      	ldr	r3, [r7, #12]
 800c700:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800c702:	68bb      	ldr	r3, [r7, #8]
 800c704:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800c706:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800c70a:	2b00      	cmp	r3, #0
 800c70c:	d123      	bne.n	800c756 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800c70e:	88bb      	ldrh	r3, [r7, #4]
 800c710:	3303      	adds	r3, #3
 800c712:	089b      	lsrs	r3, r3, #2
 800c714:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800c716:	2300      	movs	r3, #0
 800c718:	61bb      	str	r3, [r7, #24]
 800c71a:	e018      	b.n	800c74e <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800c71c:	79fb      	ldrb	r3, [r7, #7]
 800c71e:	031a      	lsls	r2, r3, #12
 800c720:	697b      	ldr	r3, [r7, #20]
 800c722:	4413      	add	r3, r2
 800c724:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c728:	461a      	mov	r2, r3
 800c72a:	69fb      	ldr	r3, [r7, #28]
 800c72c:	681b      	ldr	r3, [r3, #0]
 800c72e:	6013      	str	r3, [r2, #0]
      pSrc++;
 800c730:	69fb      	ldr	r3, [r7, #28]
 800c732:	3301      	adds	r3, #1
 800c734:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800c736:	69fb      	ldr	r3, [r7, #28]
 800c738:	3301      	adds	r3, #1
 800c73a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800c73c:	69fb      	ldr	r3, [r7, #28]
 800c73e:	3301      	adds	r3, #1
 800c740:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800c742:	69fb      	ldr	r3, [r7, #28]
 800c744:	3301      	adds	r3, #1
 800c746:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800c748:	69bb      	ldr	r3, [r7, #24]
 800c74a:	3301      	adds	r3, #1
 800c74c:	61bb      	str	r3, [r7, #24]
 800c74e:	69ba      	ldr	r2, [r7, #24]
 800c750:	693b      	ldr	r3, [r7, #16]
 800c752:	429a      	cmp	r2, r3
 800c754:	d3e2      	bcc.n	800c71c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800c756:	2300      	movs	r3, #0
}
 800c758:	4618      	mov	r0, r3
 800c75a:	3724      	adds	r7, #36	; 0x24
 800c75c:	46bd      	mov	sp, r7
 800c75e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c762:	4770      	bx	lr

0800c764 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800c764:	b480      	push	{r7}
 800c766:	b08b      	sub	sp, #44	; 0x2c
 800c768:	af00      	add	r7, sp, #0
 800c76a:	60f8      	str	r0, [r7, #12]
 800c76c:	60b9      	str	r1, [r7, #8]
 800c76e:	4613      	mov	r3, r2
 800c770:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c772:	68fb      	ldr	r3, [r7, #12]
 800c774:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800c776:	68bb      	ldr	r3, [r7, #8]
 800c778:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800c77a:	88fb      	ldrh	r3, [r7, #6]
 800c77c:	089b      	lsrs	r3, r3, #2
 800c77e:	b29b      	uxth	r3, r3
 800c780:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800c782:	88fb      	ldrh	r3, [r7, #6]
 800c784:	f003 0303 	and.w	r3, r3, #3
 800c788:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800c78a:	2300      	movs	r3, #0
 800c78c:	623b      	str	r3, [r7, #32]
 800c78e:	e014      	b.n	800c7ba <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800c790:	69bb      	ldr	r3, [r7, #24]
 800c792:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c796:	681a      	ldr	r2, [r3, #0]
 800c798:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c79a:	601a      	str	r2, [r3, #0]
    pDest++;
 800c79c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c79e:	3301      	adds	r3, #1
 800c7a0:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800c7a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c7a4:	3301      	adds	r3, #1
 800c7a6:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800c7a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c7aa:	3301      	adds	r3, #1
 800c7ac:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800c7ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c7b0:	3301      	adds	r3, #1
 800c7b2:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800c7b4:	6a3b      	ldr	r3, [r7, #32]
 800c7b6:	3301      	adds	r3, #1
 800c7b8:	623b      	str	r3, [r7, #32]
 800c7ba:	6a3a      	ldr	r2, [r7, #32]
 800c7bc:	697b      	ldr	r3, [r7, #20]
 800c7be:	429a      	cmp	r2, r3
 800c7c0:	d3e6      	bcc.n	800c790 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800c7c2:	8bfb      	ldrh	r3, [r7, #30]
 800c7c4:	2b00      	cmp	r3, #0
 800c7c6:	d01e      	beq.n	800c806 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800c7c8:	2300      	movs	r3, #0
 800c7ca:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800c7cc:	69bb      	ldr	r3, [r7, #24]
 800c7ce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c7d2:	461a      	mov	r2, r3
 800c7d4:	f107 0310 	add.w	r3, r7, #16
 800c7d8:	6812      	ldr	r2, [r2, #0]
 800c7da:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800c7dc:	693a      	ldr	r2, [r7, #16]
 800c7de:	6a3b      	ldr	r3, [r7, #32]
 800c7e0:	b2db      	uxtb	r3, r3
 800c7e2:	00db      	lsls	r3, r3, #3
 800c7e4:	fa22 f303 	lsr.w	r3, r2, r3
 800c7e8:	b2da      	uxtb	r2, r3
 800c7ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c7ec:	701a      	strb	r2, [r3, #0]
      i++;
 800c7ee:	6a3b      	ldr	r3, [r7, #32]
 800c7f0:	3301      	adds	r3, #1
 800c7f2:	623b      	str	r3, [r7, #32]
      pDest++;
 800c7f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c7f6:	3301      	adds	r3, #1
 800c7f8:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800c7fa:	8bfb      	ldrh	r3, [r7, #30]
 800c7fc:	3b01      	subs	r3, #1
 800c7fe:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800c800:	8bfb      	ldrh	r3, [r7, #30]
 800c802:	2b00      	cmp	r3, #0
 800c804:	d1ea      	bne.n	800c7dc <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800c806:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800c808:	4618      	mov	r0, r3
 800c80a:	372c      	adds	r7, #44	; 0x2c
 800c80c:	46bd      	mov	sp, r7
 800c80e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c812:	4770      	bx	lr

0800c814 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800c814:	b480      	push	{r7}
 800c816:	b085      	sub	sp, #20
 800c818:	af00      	add	r7, sp, #0
 800c81a:	6078      	str	r0, [r7, #4]
 800c81c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c81e:	687b      	ldr	r3, [r7, #4]
 800c820:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800c822:	683b      	ldr	r3, [r7, #0]
 800c824:	781b      	ldrb	r3, [r3, #0]
 800c826:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800c828:	683b      	ldr	r3, [r7, #0]
 800c82a:	785b      	ldrb	r3, [r3, #1]
 800c82c:	2b01      	cmp	r3, #1
 800c82e:	d12c      	bne.n	800c88a <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800c830:	68bb      	ldr	r3, [r7, #8]
 800c832:	015a      	lsls	r2, r3, #5
 800c834:	68fb      	ldr	r3, [r7, #12]
 800c836:	4413      	add	r3, r2
 800c838:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c83c:	681b      	ldr	r3, [r3, #0]
 800c83e:	2b00      	cmp	r3, #0
 800c840:	db12      	blt.n	800c868 <USB_EPSetStall+0x54>
 800c842:	68bb      	ldr	r3, [r7, #8]
 800c844:	2b00      	cmp	r3, #0
 800c846:	d00f      	beq.n	800c868 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800c848:	68bb      	ldr	r3, [r7, #8]
 800c84a:	015a      	lsls	r2, r3, #5
 800c84c:	68fb      	ldr	r3, [r7, #12]
 800c84e:	4413      	add	r3, r2
 800c850:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c854:	681b      	ldr	r3, [r3, #0]
 800c856:	68ba      	ldr	r2, [r7, #8]
 800c858:	0151      	lsls	r1, r2, #5
 800c85a:	68fa      	ldr	r2, [r7, #12]
 800c85c:	440a      	add	r2, r1
 800c85e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c862:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800c866:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800c868:	68bb      	ldr	r3, [r7, #8]
 800c86a:	015a      	lsls	r2, r3, #5
 800c86c:	68fb      	ldr	r3, [r7, #12]
 800c86e:	4413      	add	r3, r2
 800c870:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c874:	681b      	ldr	r3, [r3, #0]
 800c876:	68ba      	ldr	r2, [r7, #8]
 800c878:	0151      	lsls	r1, r2, #5
 800c87a:	68fa      	ldr	r2, [r7, #12]
 800c87c:	440a      	add	r2, r1
 800c87e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c882:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800c886:	6013      	str	r3, [r2, #0]
 800c888:	e02b      	b.n	800c8e2 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800c88a:	68bb      	ldr	r3, [r7, #8]
 800c88c:	015a      	lsls	r2, r3, #5
 800c88e:	68fb      	ldr	r3, [r7, #12]
 800c890:	4413      	add	r3, r2
 800c892:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c896:	681b      	ldr	r3, [r3, #0]
 800c898:	2b00      	cmp	r3, #0
 800c89a:	db12      	blt.n	800c8c2 <USB_EPSetStall+0xae>
 800c89c:	68bb      	ldr	r3, [r7, #8]
 800c89e:	2b00      	cmp	r3, #0
 800c8a0:	d00f      	beq.n	800c8c2 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800c8a2:	68bb      	ldr	r3, [r7, #8]
 800c8a4:	015a      	lsls	r2, r3, #5
 800c8a6:	68fb      	ldr	r3, [r7, #12]
 800c8a8:	4413      	add	r3, r2
 800c8aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c8ae:	681b      	ldr	r3, [r3, #0]
 800c8b0:	68ba      	ldr	r2, [r7, #8]
 800c8b2:	0151      	lsls	r1, r2, #5
 800c8b4:	68fa      	ldr	r2, [r7, #12]
 800c8b6:	440a      	add	r2, r1
 800c8b8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c8bc:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800c8c0:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800c8c2:	68bb      	ldr	r3, [r7, #8]
 800c8c4:	015a      	lsls	r2, r3, #5
 800c8c6:	68fb      	ldr	r3, [r7, #12]
 800c8c8:	4413      	add	r3, r2
 800c8ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c8ce:	681b      	ldr	r3, [r3, #0]
 800c8d0:	68ba      	ldr	r2, [r7, #8]
 800c8d2:	0151      	lsls	r1, r2, #5
 800c8d4:	68fa      	ldr	r2, [r7, #12]
 800c8d6:	440a      	add	r2, r1
 800c8d8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c8dc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800c8e0:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800c8e2:	2300      	movs	r3, #0
}
 800c8e4:	4618      	mov	r0, r3
 800c8e6:	3714      	adds	r7, #20
 800c8e8:	46bd      	mov	sp, r7
 800c8ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8ee:	4770      	bx	lr

0800c8f0 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800c8f0:	b480      	push	{r7}
 800c8f2:	b085      	sub	sp, #20
 800c8f4:	af00      	add	r7, sp, #0
 800c8f6:	6078      	str	r0, [r7, #4]
 800c8f8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c8fa:	687b      	ldr	r3, [r7, #4]
 800c8fc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800c8fe:	683b      	ldr	r3, [r7, #0]
 800c900:	781b      	ldrb	r3, [r3, #0]
 800c902:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800c904:	683b      	ldr	r3, [r7, #0]
 800c906:	785b      	ldrb	r3, [r3, #1]
 800c908:	2b01      	cmp	r3, #1
 800c90a:	d128      	bne.n	800c95e <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800c90c:	68bb      	ldr	r3, [r7, #8]
 800c90e:	015a      	lsls	r2, r3, #5
 800c910:	68fb      	ldr	r3, [r7, #12]
 800c912:	4413      	add	r3, r2
 800c914:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c918:	681b      	ldr	r3, [r3, #0]
 800c91a:	68ba      	ldr	r2, [r7, #8]
 800c91c:	0151      	lsls	r1, r2, #5
 800c91e:	68fa      	ldr	r2, [r7, #12]
 800c920:	440a      	add	r2, r1
 800c922:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c926:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800c92a:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800c92c:	683b      	ldr	r3, [r7, #0]
 800c92e:	791b      	ldrb	r3, [r3, #4]
 800c930:	2b03      	cmp	r3, #3
 800c932:	d003      	beq.n	800c93c <USB_EPClearStall+0x4c>
 800c934:	683b      	ldr	r3, [r7, #0]
 800c936:	791b      	ldrb	r3, [r3, #4]
 800c938:	2b02      	cmp	r3, #2
 800c93a:	d138      	bne.n	800c9ae <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800c93c:	68bb      	ldr	r3, [r7, #8]
 800c93e:	015a      	lsls	r2, r3, #5
 800c940:	68fb      	ldr	r3, [r7, #12]
 800c942:	4413      	add	r3, r2
 800c944:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c948:	681b      	ldr	r3, [r3, #0]
 800c94a:	68ba      	ldr	r2, [r7, #8]
 800c94c:	0151      	lsls	r1, r2, #5
 800c94e:	68fa      	ldr	r2, [r7, #12]
 800c950:	440a      	add	r2, r1
 800c952:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c956:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c95a:	6013      	str	r3, [r2, #0]
 800c95c:	e027      	b.n	800c9ae <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800c95e:	68bb      	ldr	r3, [r7, #8]
 800c960:	015a      	lsls	r2, r3, #5
 800c962:	68fb      	ldr	r3, [r7, #12]
 800c964:	4413      	add	r3, r2
 800c966:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c96a:	681b      	ldr	r3, [r3, #0]
 800c96c:	68ba      	ldr	r2, [r7, #8]
 800c96e:	0151      	lsls	r1, r2, #5
 800c970:	68fa      	ldr	r2, [r7, #12]
 800c972:	440a      	add	r2, r1
 800c974:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c978:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800c97c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800c97e:	683b      	ldr	r3, [r7, #0]
 800c980:	791b      	ldrb	r3, [r3, #4]
 800c982:	2b03      	cmp	r3, #3
 800c984:	d003      	beq.n	800c98e <USB_EPClearStall+0x9e>
 800c986:	683b      	ldr	r3, [r7, #0]
 800c988:	791b      	ldrb	r3, [r3, #4]
 800c98a:	2b02      	cmp	r3, #2
 800c98c:	d10f      	bne.n	800c9ae <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800c98e:	68bb      	ldr	r3, [r7, #8]
 800c990:	015a      	lsls	r2, r3, #5
 800c992:	68fb      	ldr	r3, [r7, #12]
 800c994:	4413      	add	r3, r2
 800c996:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c99a:	681b      	ldr	r3, [r3, #0]
 800c99c:	68ba      	ldr	r2, [r7, #8]
 800c99e:	0151      	lsls	r1, r2, #5
 800c9a0:	68fa      	ldr	r2, [r7, #12]
 800c9a2:	440a      	add	r2, r1
 800c9a4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c9a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c9ac:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800c9ae:	2300      	movs	r3, #0
}
 800c9b0:	4618      	mov	r0, r3
 800c9b2:	3714      	adds	r7, #20
 800c9b4:	46bd      	mov	sp, r7
 800c9b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9ba:	4770      	bx	lr

0800c9bc <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800c9bc:	b480      	push	{r7}
 800c9be:	b085      	sub	sp, #20
 800c9c0:	af00      	add	r7, sp, #0
 800c9c2:	6078      	str	r0, [r7, #4]
 800c9c4:	460b      	mov	r3, r1
 800c9c6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c9c8:	687b      	ldr	r3, [r7, #4]
 800c9ca:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800c9cc:	68fb      	ldr	r3, [r7, #12]
 800c9ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c9d2:	681b      	ldr	r3, [r3, #0]
 800c9d4:	68fa      	ldr	r2, [r7, #12]
 800c9d6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c9da:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800c9de:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800c9e0:	68fb      	ldr	r3, [r7, #12]
 800c9e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c9e6:	681a      	ldr	r2, [r3, #0]
 800c9e8:	78fb      	ldrb	r3, [r7, #3]
 800c9ea:	011b      	lsls	r3, r3, #4
 800c9ec:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800c9f0:	68f9      	ldr	r1, [r7, #12]
 800c9f2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c9f6:	4313      	orrs	r3, r2
 800c9f8:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800c9fa:	2300      	movs	r3, #0
}
 800c9fc:	4618      	mov	r0, r3
 800c9fe:	3714      	adds	r7, #20
 800ca00:	46bd      	mov	sp, r7
 800ca02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca06:	4770      	bx	lr

0800ca08 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800ca08:	b480      	push	{r7}
 800ca0a:	b085      	sub	sp, #20
 800ca0c:	af00      	add	r7, sp, #0
 800ca0e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ca10:	687b      	ldr	r3, [r7, #4]
 800ca12:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800ca14:	68fb      	ldr	r3, [r7, #12]
 800ca16:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800ca1a:	681b      	ldr	r3, [r3, #0]
 800ca1c:	68fa      	ldr	r2, [r7, #12]
 800ca1e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800ca22:	f023 0303 	bic.w	r3, r3, #3
 800ca26:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800ca28:	68fb      	ldr	r3, [r7, #12]
 800ca2a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ca2e:	685b      	ldr	r3, [r3, #4]
 800ca30:	68fa      	ldr	r2, [r7, #12]
 800ca32:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800ca36:	f023 0302 	bic.w	r3, r3, #2
 800ca3a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800ca3c:	2300      	movs	r3, #0
}
 800ca3e:	4618      	mov	r0, r3
 800ca40:	3714      	adds	r7, #20
 800ca42:	46bd      	mov	sp, r7
 800ca44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca48:	4770      	bx	lr

0800ca4a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800ca4a:	b480      	push	{r7}
 800ca4c:	b085      	sub	sp, #20
 800ca4e:	af00      	add	r7, sp, #0
 800ca50:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ca52:	687b      	ldr	r3, [r7, #4]
 800ca54:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800ca56:	68fb      	ldr	r3, [r7, #12]
 800ca58:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800ca5c:	681b      	ldr	r3, [r3, #0]
 800ca5e:	68fa      	ldr	r2, [r7, #12]
 800ca60:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800ca64:	f023 0303 	bic.w	r3, r3, #3
 800ca68:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800ca6a:	68fb      	ldr	r3, [r7, #12]
 800ca6c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ca70:	685b      	ldr	r3, [r3, #4]
 800ca72:	68fa      	ldr	r2, [r7, #12]
 800ca74:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800ca78:	f043 0302 	orr.w	r3, r3, #2
 800ca7c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800ca7e:	2300      	movs	r3, #0
}
 800ca80:	4618      	mov	r0, r3
 800ca82:	3714      	adds	r7, #20
 800ca84:	46bd      	mov	sp, r7
 800ca86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca8a:	4770      	bx	lr

0800ca8c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800ca8c:	b480      	push	{r7}
 800ca8e:	b085      	sub	sp, #20
 800ca90:	af00      	add	r7, sp, #0
 800ca92:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800ca94:	687b      	ldr	r3, [r7, #4]
 800ca96:	695b      	ldr	r3, [r3, #20]
 800ca98:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800ca9a:	687b      	ldr	r3, [r7, #4]
 800ca9c:	699b      	ldr	r3, [r3, #24]
 800ca9e:	68fa      	ldr	r2, [r7, #12]
 800caa0:	4013      	ands	r3, r2
 800caa2:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800caa4:	68fb      	ldr	r3, [r7, #12]
}
 800caa6:	4618      	mov	r0, r3
 800caa8:	3714      	adds	r7, #20
 800caaa:	46bd      	mov	sp, r7
 800caac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cab0:	4770      	bx	lr

0800cab2 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800cab2:	b480      	push	{r7}
 800cab4:	b085      	sub	sp, #20
 800cab6:	af00      	add	r7, sp, #0
 800cab8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800caba:	687b      	ldr	r3, [r7, #4]
 800cabc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800cabe:	68fb      	ldr	r3, [r7, #12]
 800cac0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cac4:	699b      	ldr	r3, [r3, #24]
 800cac6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800cac8:	68fb      	ldr	r3, [r7, #12]
 800caca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cace:	69db      	ldr	r3, [r3, #28]
 800cad0:	68ba      	ldr	r2, [r7, #8]
 800cad2:	4013      	ands	r3, r2
 800cad4:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800cad6:	68bb      	ldr	r3, [r7, #8]
 800cad8:	0c1b      	lsrs	r3, r3, #16
}
 800cada:	4618      	mov	r0, r3
 800cadc:	3714      	adds	r7, #20
 800cade:	46bd      	mov	sp, r7
 800cae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cae4:	4770      	bx	lr

0800cae6 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800cae6:	b480      	push	{r7}
 800cae8:	b085      	sub	sp, #20
 800caea:	af00      	add	r7, sp, #0
 800caec:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800caee:	687b      	ldr	r3, [r7, #4]
 800caf0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800caf2:	68fb      	ldr	r3, [r7, #12]
 800caf4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800caf8:	699b      	ldr	r3, [r3, #24]
 800cafa:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800cafc:	68fb      	ldr	r3, [r7, #12]
 800cafe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cb02:	69db      	ldr	r3, [r3, #28]
 800cb04:	68ba      	ldr	r2, [r7, #8]
 800cb06:	4013      	ands	r3, r2
 800cb08:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800cb0a:	68bb      	ldr	r3, [r7, #8]
 800cb0c:	b29b      	uxth	r3, r3
}
 800cb0e:	4618      	mov	r0, r3
 800cb10:	3714      	adds	r7, #20
 800cb12:	46bd      	mov	sp, r7
 800cb14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb18:	4770      	bx	lr

0800cb1a <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800cb1a:	b480      	push	{r7}
 800cb1c:	b085      	sub	sp, #20
 800cb1e:	af00      	add	r7, sp, #0
 800cb20:	6078      	str	r0, [r7, #4]
 800cb22:	460b      	mov	r3, r1
 800cb24:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cb26:	687b      	ldr	r3, [r7, #4]
 800cb28:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800cb2a:	78fb      	ldrb	r3, [r7, #3]
 800cb2c:	015a      	lsls	r2, r3, #5
 800cb2e:	68fb      	ldr	r3, [r7, #12]
 800cb30:	4413      	add	r3, r2
 800cb32:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cb36:	689b      	ldr	r3, [r3, #8]
 800cb38:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800cb3a:	68fb      	ldr	r3, [r7, #12]
 800cb3c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cb40:	695b      	ldr	r3, [r3, #20]
 800cb42:	68ba      	ldr	r2, [r7, #8]
 800cb44:	4013      	ands	r3, r2
 800cb46:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800cb48:	68bb      	ldr	r3, [r7, #8]
}
 800cb4a:	4618      	mov	r0, r3
 800cb4c:	3714      	adds	r7, #20
 800cb4e:	46bd      	mov	sp, r7
 800cb50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb54:	4770      	bx	lr

0800cb56 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800cb56:	b480      	push	{r7}
 800cb58:	b087      	sub	sp, #28
 800cb5a:	af00      	add	r7, sp, #0
 800cb5c:	6078      	str	r0, [r7, #4]
 800cb5e:	460b      	mov	r3, r1
 800cb60:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cb62:	687b      	ldr	r3, [r7, #4]
 800cb64:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800cb66:	697b      	ldr	r3, [r7, #20]
 800cb68:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cb6c:	691b      	ldr	r3, [r3, #16]
 800cb6e:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800cb70:	697b      	ldr	r3, [r7, #20]
 800cb72:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cb76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cb78:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800cb7a:	78fb      	ldrb	r3, [r7, #3]
 800cb7c:	f003 030f 	and.w	r3, r3, #15
 800cb80:	68fa      	ldr	r2, [r7, #12]
 800cb82:	fa22 f303 	lsr.w	r3, r2, r3
 800cb86:	01db      	lsls	r3, r3, #7
 800cb88:	b2db      	uxtb	r3, r3
 800cb8a:	693a      	ldr	r2, [r7, #16]
 800cb8c:	4313      	orrs	r3, r2
 800cb8e:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800cb90:	78fb      	ldrb	r3, [r7, #3]
 800cb92:	015a      	lsls	r2, r3, #5
 800cb94:	697b      	ldr	r3, [r7, #20]
 800cb96:	4413      	add	r3, r2
 800cb98:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cb9c:	689b      	ldr	r3, [r3, #8]
 800cb9e:	693a      	ldr	r2, [r7, #16]
 800cba0:	4013      	ands	r3, r2
 800cba2:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800cba4:	68bb      	ldr	r3, [r7, #8]
}
 800cba6:	4618      	mov	r0, r3
 800cba8:	371c      	adds	r7, #28
 800cbaa:	46bd      	mov	sp, r7
 800cbac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbb0:	4770      	bx	lr

0800cbb2 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800cbb2:	b480      	push	{r7}
 800cbb4:	b083      	sub	sp, #12
 800cbb6:	af00      	add	r7, sp, #0
 800cbb8:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800cbba:	687b      	ldr	r3, [r7, #4]
 800cbbc:	695b      	ldr	r3, [r3, #20]
 800cbbe:	f003 0301 	and.w	r3, r3, #1
}
 800cbc2:	4618      	mov	r0, r3
 800cbc4:	370c      	adds	r7, #12
 800cbc6:	46bd      	mov	sp, r7
 800cbc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbcc:	4770      	bx	lr

0800cbce <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800cbce:	b480      	push	{r7}
 800cbd0:	b085      	sub	sp, #20
 800cbd2:	af00      	add	r7, sp, #0
 800cbd4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cbd6:	687b      	ldr	r3, [r7, #4]
 800cbd8:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800cbda:	68fb      	ldr	r3, [r7, #12]
 800cbdc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cbe0:	681b      	ldr	r3, [r3, #0]
 800cbe2:	68fa      	ldr	r2, [r7, #12]
 800cbe4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800cbe8:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800cbec:	f023 0307 	bic.w	r3, r3, #7
 800cbf0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800cbf2:	68fb      	ldr	r3, [r7, #12]
 800cbf4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cbf8:	685b      	ldr	r3, [r3, #4]
 800cbfa:	68fa      	ldr	r2, [r7, #12]
 800cbfc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800cc00:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800cc04:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800cc06:	2300      	movs	r3, #0
}
 800cc08:	4618      	mov	r0, r3
 800cc0a:	3714      	adds	r7, #20
 800cc0c:	46bd      	mov	sp, r7
 800cc0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc12:	4770      	bx	lr

0800cc14 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800cc14:	b480      	push	{r7}
 800cc16:	b087      	sub	sp, #28
 800cc18:	af00      	add	r7, sp, #0
 800cc1a:	60f8      	str	r0, [r7, #12]
 800cc1c:	460b      	mov	r3, r1
 800cc1e:	607a      	str	r2, [r7, #4]
 800cc20:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cc22:	68fb      	ldr	r3, [r7, #12]
 800cc24:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800cc26:	68fb      	ldr	r3, [r7, #12]
 800cc28:	333c      	adds	r3, #60	; 0x3c
 800cc2a:	3304      	adds	r3, #4
 800cc2c:	681b      	ldr	r3, [r3, #0]
 800cc2e:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800cc30:	693b      	ldr	r3, [r7, #16]
 800cc32:	4a26      	ldr	r2, [pc, #152]	; (800cccc <USB_EP0_OutStart+0xb8>)
 800cc34:	4293      	cmp	r3, r2
 800cc36:	d90a      	bls.n	800cc4e <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800cc38:	697b      	ldr	r3, [r7, #20]
 800cc3a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cc3e:	681b      	ldr	r3, [r3, #0]
 800cc40:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800cc44:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800cc48:	d101      	bne.n	800cc4e <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800cc4a:	2300      	movs	r3, #0
 800cc4c:	e037      	b.n	800ccbe <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800cc4e:	697b      	ldr	r3, [r7, #20]
 800cc50:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cc54:	461a      	mov	r2, r3
 800cc56:	2300      	movs	r3, #0
 800cc58:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800cc5a:	697b      	ldr	r3, [r7, #20]
 800cc5c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cc60:	691b      	ldr	r3, [r3, #16]
 800cc62:	697a      	ldr	r2, [r7, #20]
 800cc64:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800cc68:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800cc6c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800cc6e:	697b      	ldr	r3, [r7, #20]
 800cc70:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cc74:	691b      	ldr	r3, [r3, #16]
 800cc76:	697a      	ldr	r2, [r7, #20]
 800cc78:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800cc7c:	f043 0318 	orr.w	r3, r3, #24
 800cc80:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800cc82:	697b      	ldr	r3, [r7, #20]
 800cc84:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cc88:	691b      	ldr	r3, [r3, #16]
 800cc8a:	697a      	ldr	r2, [r7, #20]
 800cc8c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800cc90:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800cc94:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800cc96:	7afb      	ldrb	r3, [r7, #11]
 800cc98:	2b01      	cmp	r3, #1
 800cc9a:	d10f      	bne.n	800ccbc <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800cc9c:	697b      	ldr	r3, [r7, #20]
 800cc9e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cca2:	461a      	mov	r2, r3
 800cca4:	687b      	ldr	r3, [r7, #4]
 800cca6:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800cca8:	697b      	ldr	r3, [r7, #20]
 800ccaa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ccae:	681b      	ldr	r3, [r3, #0]
 800ccb0:	697a      	ldr	r2, [r7, #20]
 800ccb2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ccb6:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800ccba:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800ccbc:	2300      	movs	r3, #0
}
 800ccbe:	4618      	mov	r0, r3
 800ccc0:	371c      	adds	r7, #28
 800ccc2:	46bd      	mov	sp, r7
 800ccc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccc8:	4770      	bx	lr
 800ccca:	bf00      	nop
 800cccc:	4f54300a 	.word	0x4f54300a

0800ccd0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800ccd0:	b480      	push	{r7}
 800ccd2:	b085      	sub	sp, #20
 800ccd4:	af00      	add	r7, sp, #0
 800ccd6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800ccd8:	2300      	movs	r3, #0
 800ccda:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800ccdc:	68fb      	ldr	r3, [r7, #12]
 800ccde:	3301      	adds	r3, #1
 800cce0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800cce2:	68fb      	ldr	r3, [r7, #12]
 800cce4:	4a13      	ldr	r2, [pc, #76]	; (800cd34 <USB_CoreReset+0x64>)
 800cce6:	4293      	cmp	r3, r2
 800cce8:	d901      	bls.n	800ccee <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800ccea:	2303      	movs	r3, #3
 800ccec:	e01b      	b.n	800cd26 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800ccee:	687b      	ldr	r3, [r7, #4]
 800ccf0:	691b      	ldr	r3, [r3, #16]
 800ccf2:	2b00      	cmp	r3, #0
 800ccf4:	daf2      	bge.n	800ccdc <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800ccf6:	2300      	movs	r3, #0
 800ccf8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800ccfa:	687b      	ldr	r3, [r7, #4]
 800ccfc:	691b      	ldr	r3, [r3, #16]
 800ccfe:	f043 0201 	orr.w	r2, r3, #1
 800cd02:	687b      	ldr	r3, [r7, #4]
 800cd04:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800cd06:	68fb      	ldr	r3, [r7, #12]
 800cd08:	3301      	adds	r3, #1
 800cd0a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800cd0c:	68fb      	ldr	r3, [r7, #12]
 800cd0e:	4a09      	ldr	r2, [pc, #36]	; (800cd34 <USB_CoreReset+0x64>)
 800cd10:	4293      	cmp	r3, r2
 800cd12:	d901      	bls.n	800cd18 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800cd14:	2303      	movs	r3, #3
 800cd16:	e006      	b.n	800cd26 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800cd18:	687b      	ldr	r3, [r7, #4]
 800cd1a:	691b      	ldr	r3, [r3, #16]
 800cd1c:	f003 0301 	and.w	r3, r3, #1
 800cd20:	2b01      	cmp	r3, #1
 800cd22:	d0f0      	beq.n	800cd06 <USB_CoreReset+0x36>

  return HAL_OK;
 800cd24:	2300      	movs	r3, #0
}
 800cd26:	4618      	mov	r0, r3
 800cd28:	3714      	adds	r7, #20
 800cd2a:	46bd      	mov	sp, r7
 800cd2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd30:	4770      	bx	lr
 800cd32:	bf00      	nop
 800cd34:	00030d40 	.word	0x00030d40

0800cd38 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800cd38:	b580      	push	{r7, lr}
 800cd3a:	b084      	sub	sp, #16
 800cd3c:	af00      	add	r7, sp, #0
 800cd3e:	6078      	str	r0, [r7, #4]
 800cd40:	460b      	mov	r3, r1
 800cd42:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800cd44:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800cd48:	f002 fd34 	bl	800f7b4 <USBD_static_malloc>
 800cd4c:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800cd4e:	68fb      	ldr	r3, [r7, #12]
 800cd50:	2b00      	cmp	r3, #0
 800cd52:	d109      	bne.n	800cd68 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800cd54:	687b      	ldr	r3, [r7, #4]
 800cd56:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800cd5a:	687b      	ldr	r3, [r7, #4]
 800cd5c:	32b0      	adds	r2, #176	; 0xb0
 800cd5e:	2100      	movs	r1, #0
 800cd60:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800cd64:	2302      	movs	r3, #2
 800cd66:	e0d4      	b.n	800cf12 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800cd68:	f44f 7207 	mov.w	r2, #540	; 0x21c
 800cd6c:	2100      	movs	r1, #0
 800cd6e:	68f8      	ldr	r0, [r7, #12]
 800cd70:	f002 fd9e 	bl	800f8b0 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800cd74:	687b      	ldr	r3, [r7, #4]
 800cd76:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800cd7a:	687b      	ldr	r3, [r7, #4]
 800cd7c:	32b0      	adds	r2, #176	; 0xb0
 800cd7e:	68f9      	ldr	r1, [r7, #12]
 800cd80:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800cd84:	687b      	ldr	r3, [r7, #4]
 800cd86:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800cd8a:	687b      	ldr	r3, [r7, #4]
 800cd8c:	32b0      	adds	r2, #176	; 0xb0
 800cd8e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800cd92:	687b      	ldr	r3, [r7, #4]
 800cd94:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800cd98:	687b      	ldr	r3, [r7, #4]
 800cd9a:	7c1b      	ldrb	r3, [r3, #16]
 800cd9c:	2b00      	cmp	r3, #0
 800cd9e:	d138      	bne.n	800ce12 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800cda0:	4b5e      	ldr	r3, [pc, #376]	; (800cf1c <USBD_CDC_Init+0x1e4>)
 800cda2:	7819      	ldrb	r1, [r3, #0]
 800cda4:	f44f 7300 	mov.w	r3, #512	; 0x200
 800cda8:	2202      	movs	r2, #2
 800cdaa:	6878      	ldr	r0, [r7, #4]
 800cdac:	f002 fb91 	bl	800f4d2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800cdb0:	4b5a      	ldr	r3, [pc, #360]	; (800cf1c <USBD_CDC_Init+0x1e4>)
 800cdb2:	781b      	ldrb	r3, [r3, #0]
 800cdb4:	f003 020f 	and.w	r2, r3, #15
 800cdb8:	6879      	ldr	r1, [r7, #4]
 800cdba:	4613      	mov	r3, r2
 800cdbc:	009b      	lsls	r3, r3, #2
 800cdbe:	4413      	add	r3, r2
 800cdc0:	009b      	lsls	r3, r3, #2
 800cdc2:	440b      	add	r3, r1
 800cdc4:	3324      	adds	r3, #36	; 0x24
 800cdc6:	2201      	movs	r2, #1
 800cdc8:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800cdca:	4b55      	ldr	r3, [pc, #340]	; (800cf20 <USBD_CDC_Init+0x1e8>)
 800cdcc:	7819      	ldrb	r1, [r3, #0]
 800cdce:	f44f 7300 	mov.w	r3, #512	; 0x200
 800cdd2:	2202      	movs	r2, #2
 800cdd4:	6878      	ldr	r0, [r7, #4]
 800cdd6:	f002 fb7c 	bl	800f4d2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800cdda:	4b51      	ldr	r3, [pc, #324]	; (800cf20 <USBD_CDC_Init+0x1e8>)
 800cddc:	781b      	ldrb	r3, [r3, #0]
 800cdde:	f003 020f 	and.w	r2, r3, #15
 800cde2:	6879      	ldr	r1, [r7, #4]
 800cde4:	4613      	mov	r3, r2
 800cde6:	009b      	lsls	r3, r3, #2
 800cde8:	4413      	add	r3, r2
 800cdea:	009b      	lsls	r3, r3, #2
 800cdec:	440b      	add	r3, r1
 800cdee:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800cdf2:	2201      	movs	r2, #1
 800cdf4:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800cdf6:	4b4b      	ldr	r3, [pc, #300]	; (800cf24 <USBD_CDC_Init+0x1ec>)
 800cdf8:	781b      	ldrb	r3, [r3, #0]
 800cdfa:	f003 020f 	and.w	r2, r3, #15
 800cdfe:	6879      	ldr	r1, [r7, #4]
 800ce00:	4613      	mov	r3, r2
 800ce02:	009b      	lsls	r3, r3, #2
 800ce04:	4413      	add	r3, r2
 800ce06:	009b      	lsls	r3, r3, #2
 800ce08:	440b      	add	r3, r1
 800ce0a:	3326      	adds	r3, #38	; 0x26
 800ce0c:	2210      	movs	r2, #16
 800ce0e:	801a      	strh	r2, [r3, #0]
 800ce10:	e035      	b.n	800ce7e <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800ce12:	4b42      	ldr	r3, [pc, #264]	; (800cf1c <USBD_CDC_Init+0x1e4>)
 800ce14:	7819      	ldrb	r1, [r3, #0]
 800ce16:	2340      	movs	r3, #64	; 0x40
 800ce18:	2202      	movs	r2, #2
 800ce1a:	6878      	ldr	r0, [r7, #4]
 800ce1c:	f002 fb59 	bl	800f4d2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800ce20:	4b3e      	ldr	r3, [pc, #248]	; (800cf1c <USBD_CDC_Init+0x1e4>)
 800ce22:	781b      	ldrb	r3, [r3, #0]
 800ce24:	f003 020f 	and.w	r2, r3, #15
 800ce28:	6879      	ldr	r1, [r7, #4]
 800ce2a:	4613      	mov	r3, r2
 800ce2c:	009b      	lsls	r3, r3, #2
 800ce2e:	4413      	add	r3, r2
 800ce30:	009b      	lsls	r3, r3, #2
 800ce32:	440b      	add	r3, r1
 800ce34:	3324      	adds	r3, #36	; 0x24
 800ce36:	2201      	movs	r2, #1
 800ce38:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800ce3a:	4b39      	ldr	r3, [pc, #228]	; (800cf20 <USBD_CDC_Init+0x1e8>)
 800ce3c:	7819      	ldrb	r1, [r3, #0]
 800ce3e:	2340      	movs	r3, #64	; 0x40
 800ce40:	2202      	movs	r2, #2
 800ce42:	6878      	ldr	r0, [r7, #4]
 800ce44:	f002 fb45 	bl	800f4d2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800ce48:	4b35      	ldr	r3, [pc, #212]	; (800cf20 <USBD_CDC_Init+0x1e8>)
 800ce4a:	781b      	ldrb	r3, [r3, #0]
 800ce4c:	f003 020f 	and.w	r2, r3, #15
 800ce50:	6879      	ldr	r1, [r7, #4]
 800ce52:	4613      	mov	r3, r2
 800ce54:	009b      	lsls	r3, r3, #2
 800ce56:	4413      	add	r3, r2
 800ce58:	009b      	lsls	r3, r3, #2
 800ce5a:	440b      	add	r3, r1
 800ce5c:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800ce60:	2201      	movs	r2, #1
 800ce62:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800ce64:	4b2f      	ldr	r3, [pc, #188]	; (800cf24 <USBD_CDC_Init+0x1ec>)
 800ce66:	781b      	ldrb	r3, [r3, #0]
 800ce68:	f003 020f 	and.w	r2, r3, #15
 800ce6c:	6879      	ldr	r1, [r7, #4]
 800ce6e:	4613      	mov	r3, r2
 800ce70:	009b      	lsls	r3, r3, #2
 800ce72:	4413      	add	r3, r2
 800ce74:	009b      	lsls	r3, r3, #2
 800ce76:	440b      	add	r3, r1
 800ce78:	3326      	adds	r3, #38	; 0x26
 800ce7a:	2210      	movs	r2, #16
 800ce7c:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800ce7e:	4b29      	ldr	r3, [pc, #164]	; (800cf24 <USBD_CDC_Init+0x1ec>)
 800ce80:	7819      	ldrb	r1, [r3, #0]
 800ce82:	2308      	movs	r3, #8
 800ce84:	2203      	movs	r2, #3
 800ce86:	6878      	ldr	r0, [r7, #4]
 800ce88:	f002 fb23 	bl	800f4d2 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800ce8c:	4b25      	ldr	r3, [pc, #148]	; (800cf24 <USBD_CDC_Init+0x1ec>)
 800ce8e:	781b      	ldrb	r3, [r3, #0]
 800ce90:	f003 020f 	and.w	r2, r3, #15
 800ce94:	6879      	ldr	r1, [r7, #4]
 800ce96:	4613      	mov	r3, r2
 800ce98:	009b      	lsls	r3, r3, #2
 800ce9a:	4413      	add	r3, r2
 800ce9c:	009b      	lsls	r3, r3, #2
 800ce9e:	440b      	add	r3, r1
 800cea0:	3324      	adds	r3, #36	; 0x24
 800cea2:	2201      	movs	r2, #1
 800cea4:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800cea6:	68fb      	ldr	r3, [r7, #12]
 800cea8:	2200      	movs	r2, #0
 800ceaa:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800ceae:	687b      	ldr	r3, [r7, #4]
 800ceb0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800ceb4:	687a      	ldr	r2, [r7, #4]
 800ceb6:	33b0      	adds	r3, #176	; 0xb0
 800ceb8:	009b      	lsls	r3, r3, #2
 800ceba:	4413      	add	r3, r2
 800cebc:	685b      	ldr	r3, [r3, #4]
 800cebe:	681b      	ldr	r3, [r3, #0]
 800cec0:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800cec2:	68fb      	ldr	r3, [r7, #12]
 800cec4:	2200      	movs	r2, #0
 800cec6:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800ceca:	68fb      	ldr	r3, [r7, #12]
 800cecc:	2200      	movs	r2, #0
 800cece:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 800ced2:	68fb      	ldr	r3, [r7, #12]
 800ced4:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800ced8:	2b00      	cmp	r3, #0
 800ceda:	d101      	bne.n	800cee0 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800cedc:	2302      	movs	r3, #2
 800cede:	e018      	b.n	800cf12 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800cee0:	687b      	ldr	r3, [r7, #4]
 800cee2:	7c1b      	ldrb	r3, [r3, #16]
 800cee4:	2b00      	cmp	r3, #0
 800cee6:	d10a      	bne.n	800cefe <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800cee8:	4b0d      	ldr	r3, [pc, #52]	; (800cf20 <USBD_CDC_Init+0x1e8>)
 800ceea:	7819      	ldrb	r1, [r3, #0]
 800ceec:	68fb      	ldr	r3, [r7, #12]
 800ceee:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800cef2:	f44f 7300 	mov.w	r3, #512	; 0x200
 800cef6:	6878      	ldr	r0, [r7, #4]
 800cef8:	f002 fbda 	bl	800f6b0 <USBD_LL_PrepareReceive>
 800cefc:	e008      	b.n	800cf10 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800cefe:	4b08      	ldr	r3, [pc, #32]	; (800cf20 <USBD_CDC_Init+0x1e8>)
 800cf00:	7819      	ldrb	r1, [r3, #0]
 800cf02:	68fb      	ldr	r3, [r7, #12]
 800cf04:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800cf08:	2340      	movs	r3, #64	; 0x40
 800cf0a:	6878      	ldr	r0, [r7, #4]
 800cf0c:	f002 fbd0 	bl	800f6b0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800cf10:	2300      	movs	r3, #0
}
 800cf12:	4618      	mov	r0, r3
 800cf14:	3710      	adds	r7, #16
 800cf16:	46bd      	mov	sp, r7
 800cf18:	bd80      	pop	{r7, pc}
 800cf1a:	bf00      	nop
 800cf1c:	2000018f 	.word	0x2000018f
 800cf20:	20000190 	.word	0x20000190
 800cf24:	20000191 	.word	0x20000191

0800cf28 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800cf28:	b580      	push	{r7, lr}
 800cf2a:	b082      	sub	sp, #8
 800cf2c:	af00      	add	r7, sp, #0
 800cf2e:	6078      	str	r0, [r7, #4]
 800cf30:	460b      	mov	r3, r1
 800cf32:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800cf34:	4b3a      	ldr	r3, [pc, #232]	; (800d020 <USBD_CDC_DeInit+0xf8>)
 800cf36:	781b      	ldrb	r3, [r3, #0]
 800cf38:	4619      	mov	r1, r3
 800cf3a:	6878      	ldr	r0, [r7, #4]
 800cf3c:	f002 faef 	bl	800f51e <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800cf40:	4b37      	ldr	r3, [pc, #220]	; (800d020 <USBD_CDC_DeInit+0xf8>)
 800cf42:	781b      	ldrb	r3, [r3, #0]
 800cf44:	f003 020f 	and.w	r2, r3, #15
 800cf48:	6879      	ldr	r1, [r7, #4]
 800cf4a:	4613      	mov	r3, r2
 800cf4c:	009b      	lsls	r3, r3, #2
 800cf4e:	4413      	add	r3, r2
 800cf50:	009b      	lsls	r3, r3, #2
 800cf52:	440b      	add	r3, r1
 800cf54:	3324      	adds	r3, #36	; 0x24
 800cf56:	2200      	movs	r2, #0
 800cf58:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800cf5a:	4b32      	ldr	r3, [pc, #200]	; (800d024 <USBD_CDC_DeInit+0xfc>)
 800cf5c:	781b      	ldrb	r3, [r3, #0]
 800cf5e:	4619      	mov	r1, r3
 800cf60:	6878      	ldr	r0, [r7, #4]
 800cf62:	f002 fadc 	bl	800f51e <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800cf66:	4b2f      	ldr	r3, [pc, #188]	; (800d024 <USBD_CDC_DeInit+0xfc>)
 800cf68:	781b      	ldrb	r3, [r3, #0]
 800cf6a:	f003 020f 	and.w	r2, r3, #15
 800cf6e:	6879      	ldr	r1, [r7, #4]
 800cf70:	4613      	mov	r3, r2
 800cf72:	009b      	lsls	r3, r3, #2
 800cf74:	4413      	add	r3, r2
 800cf76:	009b      	lsls	r3, r3, #2
 800cf78:	440b      	add	r3, r1
 800cf7a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800cf7e:	2200      	movs	r2, #0
 800cf80:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800cf82:	4b29      	ldr	r3, [pc, #164]	; (800d028 <USBD_CDC_DeInit+0x100>)
 800cf84:	781b      	ldrb	r3, [r3, #0]
 800cf86:	4619      	mov	r1, r3
 800cf88:	6878      	ldr	r0, [r7, #4]
 800cf8a:	f002 fac8 	bl	800f51e <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800cf8e:	4b26      	ldr	r3, [pc, #152]	; (800d028 <USBD_CDC_DeInit+0x100>)
 800cf90:	781b      	ldrb	r3, [r3, #0]
 800cf92:	f003 020f 	and.w	r2, r3, #15
 800cf96:	6879      	ldr	r1, [r7, #4]
 800cf98:	4613      	mov	r3, r2
 800cf9a:	009b      	lsls	r3, r3, #2
 800cf9c:	4413      	add	r3, r2
 800cf9e:	009b      	lsls	r3, r3, #2
 800cfa0:	440b      	add	r3, r1
 800cfa2:	3324      	adds	r3, #36	; 0x24
 800cfa4:	2200      	movs	r2, #0
 800cfa6:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800cfa8:	4b1f      	ldr	r3, [pc, #124]	; (800d028 <USBD_CDC_DeInit+0x100>)
 800cfaa:	781b      	ldrb	r3, [r3, #0]
 800cfac:	f003 020f 	and.w	r2, r3, #15
 800cfb0:	6879      	ldr	r1, [r7, #4]
 800cfb2:	4613      	mov	r3, r2
 800cfb4:	009b      	lsls	r3, r3, #2
 800cfb6:	4413      	add	r3, r2
 800cfb8:	009b      	lsls	r3, r3, #2
 800cfba:	440b      	add	r3, r1
 800cfbc:	3326      	adds	r3, #38	; 0x26
 800cfbe:	2200      	movs	r2, #0
 800cfc0:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800cfc2:	687b      	ldr	r3, [r7, #4]
 800cfc4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800cfc8:	687b      	ldr	r3, [r7, #4]
 800cfca:	32b0      	adds	r2, #176	; 0xb0
 800cfcc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cfd0:	2b00      	cmp	r3, #0
 800cfd2:	d01f      	beq.n	800d014 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800cfd4:	687b      	ldr	r3, [r7, #4]
 800cfd6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800cfda:	687a      	ldr	r2, [r7, #4]
 800cfdc:	33b0      	adds	r3, #176	; 0xb0
 800cfde:	009b      	lsls	r3, r3, #2
 800cfe0:	4413      	add	r3, r2
 800cfe2:	685b      	ldr	r3, [r3, #4]
 800cfe4:	685b      	ldr	r3, [r3, #4]
 800cfe6:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800cfe8:	687b      	ldr	r3, [r7, #4]
 800cfea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800cfee:	687b      	ldr	r3, [r7, #4]
 800cff0:	32b0      	adds	r2, #176	; 0xb0
 800cff2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cff6:	4618      	mov	r0, r3
 800cff8:	f002 fbea 	bl	800f7d0 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800cffc:	687b      	ldr	r3, [r7, #4]
 800cffe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d002:	687b      	ldr	r3, [r7, #4]
 800d004:	32b0      	adds	r2, #176	; 0xb0
 800d006:	2100      	movs	r1, #0
 800d008:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800d00c:	687b      	ldr	r3, [r7, #4]
 800d00e:	2200      	movs	r2, #0
 800d010:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800d014:	2300      	movs	r3, #0
}
 800d016:	4618      	mov	r0, r3
 800d018:	3708      	adds	r7, #8
 800d01a:	46bd      	mov	sp, r7
 800d01c:	bd80      	pop	{r7, pc}
 800d01e:	bf00      	nop
 800d020:	2000018f 	.word	0x2000018f
 800d024:	20000190 	.word	0x20000190
 800d028:	20000191 	.word	0x20000191

0800d02c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800d02c:	b580      	push	{r7, lr}
 800d02e:	b086      	sub	sp, #24
 800d030:	af00      	add	r7, sp, #0
 800d032:	6078      	str	r0, [r7, #4]
 800d034:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d036:	687b      	ldr	r3, [r7, #4]
 800d038:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d03c:	687b      	ldr	r3, [r7, #4]
 800d03e:	32b0      	adds	r2, #176	; 0xb0
 800d040:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d044:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800d046:	2300      	movs	r3, #0
 800d048:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800d04a:	2300      	movs	r3, #0
 800d04c:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800d04e:	2300      	movs	r3, #0
 800d050:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800d052:	693b      	ldr	r3, [r7, #16]
 800d054:	2b00      	cmp	r3, #0
 800d056:	d101      	bne.n	800d05c <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800d058:	2303      	movs	r3, #3
 800d05a:	e0bf      	b.n	800d1dc <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800d05c:	683b      	ldr	r3, [r7, #0]
 800d05e:	781b      	ldrb	r3, [r3, #0]
 800d060:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800d064:	2b00      	cmp	r3, #0
 800d066:	d050      	beq.n	800d10a <USBD_CDC_Setup+0xde>
 800d068:	2b20      	cmp	r3, #32
 800d06a:	f040 80af 	bne.w	800d1cc <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800d06e:	683b      	ldr	r3, [r7, #0]
 800d070:	88db      	ldrh	r3, [r3, #6]
 800d072:	2b00      	cmp	r3, #0
 800d074:	d03a      	beq.n	800d0ec <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800d076:	683b      	ldr	r3, [r7, #0]
 800d078:	781b      	ldrb	r3, [r3, #0]
 800d07a:	b25b      	sxtb	r3, r3
 800d07c:	2b00      	cmp	r3, #0
 800d07e:	da1b      	bge.n	800d0b8 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800d080:	687b      	ldr	r3, [r7, #4]
 800d082:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800d086:	687a      	ldr	r2, [r7, #4]
 800d088:	33b0      	adds	r3, #176	; 0xb0
 800d08a:	009b      	lsls	r3, r3, #2
 800d08c:	4413      	add	r3, r2
 800d08e:	685b      	ldr	r3, [r3, #4]
 800d090:	689b      	ldr	r3, [r3, #8]
 800d092:	683a      	ldr	r2, [r7, #0]
 800d094:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800d096:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800d098:	683a      	ldr	r2, [r7, #0]
 800d09a:	88d2      	ldrh	r2, [r2, #6]
 800d09c:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800d09e:	683b      	ldr	r3, [r7, #0]
 800d0a0:	88db      	ldrh	r3, [r3, #6]
 800d0a2:	2b07      	cmp	r3, #7
 800d0a4:	bf28      	it	cs
 800d0a6:	2307      	movcs	r3, #7
 800d0a8:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800d0aa:	693b      	ldr	r3, [r7, #16]
 800d0ac:	89fa      	ldrh	r2, [r7, #14]
 800d0ae:	4619      	mov	r1, r3
 800d0b0:	6878      	ldr	r0, [r7, #4]
 800d0b2:	f001 fdb3 	bl	800ec1c <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800d0b6:	e090      	b.n	800d1da <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800d0b8:	683b      	ldr	r3, [r7, #0]
 800d0ba:	785a      	ldrb	r2, [r3, #1]
 800d0bc:	693b      	ldr	r3, [r7, #16]
 800d0be:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800d0c2:	683b      	ldr	r3, [r7, #0]
 800d0c4:	88db      	ldrh	r3, [r3, #6]
 800d0c6:	2b3f      	cmp	r3, #63	; 0x3f
 800d0c8:	d803      	bhi.n	800d0d2 <USBD_CDC_Setup+0xa6>
 800d0ca:	683b      	ldr	r3, [r7, #0]
 800d0cc:	88db      	ldrh	r3, [r3, #6]
 800d0ce:	b2da      	uxtb	r2, r3
 800d0d0:	e000      	b.n	800d0d4 <USBD_CDC_Setup+0xa8>
 800d0d2:	2240      	movs	r2, #64	; 0x40
 800d0d4:	693b      	ldr	r3, [r7, #16]
 800d0d6:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800d0da:	6939      	ldr	r1, [r7, #16]
 800d0dc:	693b      	ldr	r3, [r7, #16]
 800d0de:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 800d0e2:	461a      	mov	r2, r3
 800d0e4:	6878      	ldr	r0, [r7, #4]
 800d0e6:	f001 fdc5 	bl	800ec74 <USBD_CtlPrepareRx>
      break;
 800d0ea:	e076      	b.n	800d1da <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800d0ec:	687b      	ldr	r3, [r7, #4]
 800d0ee:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800d0f2:	687a      	ldr	r2, [r7, #4]
 800d0f4:	33b0      	adds	r3, #176	; 0xb0
 800d0f6:	009b      	lsls	r3, r3, #2
 800d0f8:	4413      	add	r3, r2
 800d0fa:	685b      	ldr	r3, [r3, #4]
 800d0fc:	689b      	ldr	r3, [r3, #8]
 800d0fe:	683a      	ldr	r2, [r7, #0]
 800d100:	7850      	ldrb	r0, [r2, #1]
 800d102:	2200      	movs	r2, #0
 800d104:	6839      	ldr	r1, [r7, #0]
 800d106:	4798      	blx	r3
      break;
 800d108:	e067      	b.n	800d1da <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800d10a:	683b      	ldr	r3, [r7, #0]
 800d10c:	785b      	ldrb	r3, [r3, #1]
 800d10e:	2b0b      	cmp	r3, #11
 800d110:	d851      	bhi.n	800d1b6 <USBD_CDC_Setup+0x18a>
 800d112:	a201      	add	r2, pc, #4	; (adr r2, 800d118 <USBD_CDC_Setup+0xec>)
 800d114:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d118:	0800d149 	.word	0x0800d149
 800d11c:	0800d1c5 	.word	0x0800d1c5
 800d120:	0800d1b7 	.word	0x0800d1b7
 800d124:	0800d1b7 	.word	0x0800d1b7
 800d128:	0800d1b7 	.word	0x0800d1b7
 800d12c:	0800d1b7 	.word	0x0800d1b7
 800d130:	0800d1b7 	.word	0x0800d1b7
 800d134:	0800d1b7 	.word	0x0800d1b7
 800d138:	0800d1b7 	.word	0x0800d1b7
 800d13c:	0800d1b7 	.word	0x0800d1b7
 800d140:	0800d173 	.word	0x0800d173
 800d144:	0800d19d 	.word	0x0800d19d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d148:	687b      	ldr	r3, [r7, #4]
 800d14a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d14e:	b2db      	uxtb	r3, r3
 800d150:	2b03      	cmp	r3, #3
 800d152:	d107      	bne.n	800d164 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800d154:	f107 030a 	add.w	r3, r7, #10
 800d158:	2202      	movs	r2, #2
 800d15a:	4619      	mov	r1, r3
 800d15c:	6878      	ldr	r0, [r7, #4]
 800d15e:	f001 fd5d 	bl	800ec1c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800d162:	e032      	b.n	800d1ca <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800d164:	6839      	ldr	r1, [r7, #0]
 800d166:	6878      	ldr	r0, [r7, #4]
 800d168:	f001 fce7 	bl	800eb3a <USBD_CtlError>
            ret = USBD_FAIL;
 800d16c:	2303      	movs	r3, #3
 800d16e:	75fb      	strb	r3, [r7, #23]
          break;
 800d170:	e02b      	b.n	800d1ca <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d172:	687b      	ldr	r3, [r7, #4]
 800d174:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d178:	b2db      	uxtb	r3, r3
 800d17a:	2b03      	cmp	r3, #3
 800d17c:	d107      	bne.n	800d18e <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800d17e:	f107 030d 	add.w	r3, r7, #13
 800d182:	2201      	movs	r2, #1
 800d184:	4619      	mov	r1, r3
 800d186:	6878      	ldr	r0, [r7, #4]
 800d188:	f001 fd48 	bl	800ec1c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800d18c:	e01d      	b.n	800d1ca <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800d18e:	6839      	ldr	r1, [r7, #0]
 800d190:	6878      	ldr	r0, [r7, #4]
 800d192:	f001 fcd2 	bl	800eb3a <USBD_CtlError>
            ret = USBD_FAIL;
 800d196:	2303      	movs	r3, #3
 800d198:	75fb      	strb	r3, [r7, #23]
          break;
 800d19a:	e016      	b.n	800d1ca <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800d19c:	687b      	ldr	r3, [r7, #4]
 800d19e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d1a2:	b2db      	uxtb	r3, r3
 800d1a4:	2b03      	cmp	r3, #3
 800d1a6:	d00f      	beq.n	800d1c8 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800d1a8:	6839      	ldr	r1, [r7, #0]
 800d1aa:	6878      	ldr	r0, [r7, #4]
 800d1ac:	f001 fcc5 	bl	800eb3a <USBD_CtlError>
            ret = USBD_FAIL;
 800d1b0:	2303      	movs	r3, #3
 800d1b2:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800d1b4:	e008      	b.n	800d1c8 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800d1b6:	6839      	ldr	r1, [r7, #0]
 800d1b8:	6878      	ldr	r0, [r7, #4]
 800d1ba:	f001 fcbe 	bl	800eb3a <USBD_CtlError>
          ret = USBD_FAIL;
 800d1be:	2303      	movs	r3, #3
 800d1c0:	75fb      	strb	r3, [r7, #23]
          break;
 800d1c2:	e002      	b.n	800d1ca <USBD_CDC_Setup+0x19e>
          break;
 800d1c4:	bf00      	nop
 800d1c6:	e008      	b.n	800d1da <USBD_CDC_Setup+0x1ae>
          break;
 800d1c8:	bf00      	nop
      }
      break;
 800d1ca:	e006      	b.n	800d1da <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800d1cc:	6839      	ldr	r1, [r7, #0]
 800d1ce:	6878      	ldr	r0, [r7, #4]
 800d1d0:	f001 fcb3 	bl	800eb3a <USBD_CtlError>
      ret = USBD_FAIL;
 800d1d4:	2303      	movs	r3, #3
 800d1d6:	75fb      	strb	r3, [r7, #23]
      break;
 800d1d8:	bf00      	nop
  }

  return (uint8_t)ret;
 800d1da:	7dfb      	ldrb	r3, [r7, #23]
}
 800d1dc:	4618      	mov	r0, r3
 800d1de:	3718      	adds	r7, #24
 800d1e0:	46bd      	mov	sp, r7
 800d1e2:	bd80      	pop	{r7, pc}

0800d1e4 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800d1e4:	b580      	push	{r7, lr}
 800d1e6:	b084      	sub	sp, #16
 800d1e8:	af00      	add	r7, sp, #0
 800d1ea:	6078      	str	r0, [r7, #4]
 800d1ec:	460b      	mov	r3, r1
 800d1ee:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800d1f0:	687b      	ldr	r3, [r7, #4]
 800d1f2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800d1f6:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800d1f8:	687b      	ldr	r3, [r7, #4]
 800d1fa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d1fe:	687b      	ldr	r3, [r7, #4]
 800d200:	32b0      	adds	r2, #176	; 0xb0
 800d202:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d206:	2b00      	cmp	r3, #0
 800d208:	d101      	bne.n	800d20e <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800d20a:	2303      	movs	r3, #3
 800d20c:	e065      	b.n	800d2da <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d20e:	687b      	ldr	r3, [r7, #4]
 800d210:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d214:	687b      	ldr	r3, [r7, #4]
 800d216:	32b0      	adds	r2, #176	; 0xb0
 800d218:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d21c:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800d21e:	78fb      	ldrb	r3, [r7, #3]
 800d220:	f003 020f 	and.w	r2, r3, #15
 800d224:	6879      	ldr	r1, [r7, #4]
 800d226:	4613      	mov	r3, r2
 800d228:	009b      	lsls	r3, r3, #2
 800d22a:	4413      	add	r3, r2
 800d22c:	009b      	lsls	r3, r3, #2
 800d22e:	440b      	add	r3, r1
 800d230:	3318      	adds	r3, #24
 800d232:	681b      	ldr	r3, [r3, #0]
 800d234:	2b00      	cmp	r3, #0
 800d236:	d02f      	beq.n	800d298 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800d238:	78fb      	ldrb	r3, [r7, #3]
 800d23a:	f003 020f 	and.w	r2, r3, #15
 800d23e:	6879      	ldr	r1, [r7, #4]
 800d240:	4613      	mov	r3, r2
 800d242:	009b      	lsls	r3, r3, #2
 800d244:	4413      	add	r3, r2
 800d246:	009b      	lsls	r3, r3, #2
 800d248:	440b      	add	r3, r1
 800d24a:	3318      	adds	r3, #24
 800d24c:	681a      	ldr	r2, [r3, #0]
 800d24e:	78fb      	ldrb	r3, [r7, #3]
 800d250:	f003 010f 	and.w	r1, r3, #15
 800d254:	68f8      	ldr	r0, [r7, #12]
 800d256:	460b      	mov	r3, r1
 800d258:	00db      	lsls	r3, r3, #3
 800d25a:	440b      	add	r3, r1
 800d25c:	009b      	lsls	r3, r3, #2
 800d25e:	4403      	add	r3, r0
 800d260:	3348      	adds	r3, #72	; 0x48
 800d262:	681b      	ldr	r3, [r3, #0]
 800d264:	fbb2 f1f3 	udiv	r1, r2, r3
 800d268:	fb01 f303 	mul.w	r3, r1, r3
 800d26c:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800d26e:	2b00      	cmp	r3, #0
 800d270:	d112      	bne.n	800d298 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800d272:	78fb      	ldrb	r3, [r7, #3]
 800d274:	f003 020f 	and.w	r2, r3, #15
 800d278:	6879      	ldr	r1, [r7, #4]
 800d27a:	4613      	mov	r3, r2
 800d27c:	009b      	lsls	r3, r3, #2
 800d27e:	4413      	add	r3, r2
 800d280:	009b      	lsls	r3, r3, #2
 800d282:	440b      	add	r3, r1
 800d284:	3318      	adds	r3, #24
 800d286:	2200      	movs	r2, #0
 800d288:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800d28a:	78f9      	ldrb	r1, [r7, #3]
 800d28c:	2300      	movs	r3, #0
 800d28e:	2200      	movs	r2, #0
 800d290:	6878      	ldr	r0, [r7, #4]
 800d292:	f002 f9ec 	bl	800f66e <USBD_LL_Transmit>
 800d296:	e01f      	b.n	800d2d8 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800d298:	68bb      	ldr	r3, [r7, #8]
 800d29a:	2200      	movs	r2, #0
 800d29c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800d2a0:	687b      	ldr	r3, [r7, #4]
 800d2a2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800d2a6:	687a      	ldr	r2, [r7, #4]
 800d2a8:	33b0      	adds	r3, #176	; 0xb0
 800d2aa:	009b      	lsls	r3, r3, #2
 800d2ac:	4413      	add	r3, r2
 800d2ae:	685b      	ldr	r3, [r3, #4]
 800d2b0:	691b      	ldr	r3, [r3, #16]
 800d2b2:	2b00      	cmp	r3, #0
 800d2b4:	d010      	beq.n	800d2d8 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800d2b6:	687b      	ldr	r3, [r7, #4]
 800d2b8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800d2bc:	687a      	ldr	r2, [r7, #4]
 800d2be:	33b0      	adds	r3, #176	; 0xb0
 800d2c0:	009b      	lsls	r3, r3, #2
 800d2c2:	4413      	add	r3, r2
 800d2c4:	685b      	ldr	r3, [r3, #4]
 800d2c6:	691b      	ldr	r3, [r3, #16]
 800d2c8:	68ba      	ldr	r2, [r7, #8]
 800d2ca:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800d2ce:	68ba      	ldr	r2, [r7, #8]
 800d2d0:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800d2d4:	78fa      	ldrb	r2, [r7, #3]
 800d2d6:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800d2d8:	2300      	movs	r3, #0
}
 800d2da:	4618      	mov	r0, r3
 800d2dc:	3710      	adds	r7, #16
 800d2de:	46bd      	mov	sp, r7
 800d2e0:	bd80      	pop	{r7, pc}

0800d2e2 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800d2e2:	b580      	push	{r7, lr}
 800d2e4:	b084      	sub	sp, #16
 800d2e6:	af00      	add	r7, sp, #0
 800d2e8:	6078      	str	r0, [r7, #4]
 800d2ea:	460b      	mov	r3, r1
 800d2ec:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d2ee:	687b      	ldr	r3, [r7, #4]
 800d2f0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d2f4:	687b      	ldr	r3, [r7, #4]
 800d2f6:	32b0      	adds	r2, #176	; 0xb0
 800d2f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d2fc:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800d2fe:	687b      	ldr	r3, [r7, #4]
 800d300:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d304:	687b      	ldr	r3, [r7, #4]
 800d306:	32b0      	adds	r2, #176	; 0xb0
 800d308:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d30c:	2b00      	cmp	r3, #0
 800d30e:	d101      	bne.n	800d314 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800d310:	2303      	movs	r3, #3
 800d312:	e01a      	b.n	800d34a <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800d314:	78fb      	ldrb	r3, [r7, #3]
 800d316:	4619      	mov	r1, r3
 800d318:	6878      	ldr	r0, [r7, #4]
 800d31a:	f002 f9ea 	bl	800f6f2 <USBD_LL_GetRxDataSize>
 800d31e:	4602      	mov	r2, r0
 800d320:	68fb      	ldr	r3, [r7, #12]
 800d322:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800d326:	687b      	ldr	r3, [r7, #4]
 800d328:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800d32c:	687a      	ldr	r2, [r7, #4]
 800d32e:	33b0      	adds	r3, #176	; 0xb0
 800d330:	009b      	lsls	r3, r3, #2
 800d332:	4413      	add	r3, r2
 800d334:	685b      	ldr	r3, [r3, #4]
 800d336:	68db      	ldr	r3, [r3, #12]
 800d338:	68fa      	ldr	r2, [r7, #12]
 800d33a:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800d33e:	68fa      	ldr	r2, [r7, #12]
 800d340:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800d344:	4611      	mov	r1, r2
 800d346:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800d348:	2300      	movs	r3, #0
}
 800d34a:	4618      	mov	r0, r3
 800d34c:	3710      	adds	r7, #16
 800d34e:	46bd      	mov	sp, r7
 800d350:	bd80      	pop	{r7, pc}

0800d352 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800d352:	b580      	push	{r7, lr}
 800d354:	b084      	sub	sp, #16
 800d356:	af00      	add	r7, sp, #0
 800d358:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d35a:	687b      	ldr	r3, [r7, #4]
 800d35c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d360:	687b      	ldr	r3, [r7, #4]
 800d362:	32b0      	adds	r2, #176	; 0xb0
 800d364:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d368:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800d36a:	68fb      	ldr	r3, [r7, #12]
 800d36c:	2b00      	cmp	r3, #0
 800d36e:	d101      	bne.n	800d374 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800d370:	2303      	movs	r3, #3
 800d372:	e025      	b.n	800d3c0 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800d374:	687b      	ldr	r3, [r7, #4]
 800d376:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800d37a:	687a      	ldr	r2, [r7, #4]
 800d37c:	33b0      	adds	r3, #176	; 0xb0
 800d37e:	009b      	lsls	r3, r3, #2
 800d380:	4413      	add	r3, r2
 800d382:	685b      	ldr	r3, [r3, #4]
 800d384:	2b00      	cmp	r3, #0
 800d386:	d01a      	beq.n	800d3be <USBD_CDC_EP0_RxReady+0x6c>
 800d388:	68fb      	ldr	r3, [r7, #12]
 800d38a:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800d38e:	2bff      	cmp	r3, #255	; 0xff
 800d390:	d015      	beq.n	800d3be <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800d392:	687b      	ldr	r3, [r7, #4]
 800d394:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800d398:	687a      	ldr	r2, [r7, #4]
 800d39a:	33b0      	adds	r3, #176	; 0xb0
 800d39c:	009b      	lsls	r3, r3, #2
 800d39e:	4413      	add	r3, r2
 800d3a0:	685b      	ldr	r3, [r3, #4]
 800d3a2:	689b      	ldr	r3, [r3, #8]
 800d3a4:	68fa      	ldr	r2, [r7, #12]
 800d3a6:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 800d3aa:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800d3ac:	68fa      	ldr	r2, [r7, #12]
 800d3ae:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800d3b2:	b292      	uxth	r2, r2
 800d3b4:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800d3b6:	68fb      	ldr	r3, [r7, #12]
 800d3b8:	22ff      	movs	r2, #255	; 0xff
 800d3ba:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800d3be:	2300      	movs	r3, #0
}
 800d3c0:	4618      	mov	r0, r3
 800d3c2:	3710      	adds	r7, #16
 800d3c4:	46bd      	mov	sp, r7
 800d3c6:	bd80      	pop	{r7, pc}

0800d3c8 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800d3c8:	b580      	push	{r7, lr}
 800d3ca:	b086      	sub	sp, #24
 800d3cc:	af00      	add	r7, sp, #0
 800d3ce:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800d3d0:	2182      	movs	r1, #130	; 0x82
 800d3d2:	4818      	ldr	r0, [pc, #96]	; (800d434 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800d3d4:	f000 fd4f 	bl	800de76 <USBD_GetEpDesc>
 800d3d8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800d3da:	2101      	movs	r1, #1
 800d3dc:	4815      	ldr	r0, [pc, #84]	; (800d434 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800d3de:	f000 fd4a 	bl	800de76 <USBD_GetEpDesc>
 800d3e2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800d3e4:	2181      	movs	r1, #129	; 0x81
 800d3e6:	4813      	ldr	r0, [pc, #76]	; (800d434 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800d3e8:	f000 fd45 	bl	800de76 <USBD_GetEpDesc>
 800d3ec:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800d3ee:	697b      	ldr	r3, [r7, #20]
 800d3f0:	2b00      	cmp	r3, #0
 800d3f2:	d002      	beq.n	800d3fa <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800d3f4:	697b      	ldr	r3, [r7, #20]
 800d3f6:	2210      	movs	r2, #16
 800d3f8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800d3fa:	693b      	ldr	r3, [r7, #16]
 800d3fc:	2b00      	cmp	r3, #0
 800d3fe:	d006      	beq.n	800d40e <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800d400:	693b      	ldr	r3, [r7, #16]
 800d402:	2200      	movs	r2, #0
 800d404:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800d408:	711a      	strb	r2, [r3, #4]
 800d40a:	2200      	movs	r2, #0
 800d40c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800d40e:	68fb      	ldr	r3, [r7, #12]
 800d410:	2b00      	cmp	r3, #0
 800d412:	d006      	beq.n	800d422 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800d414:	68fb      	ldr	r3, [r7, #12]
 800d416:	2200      	movs	r2, #0
 800d418:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800d41c:	711a      	strb	r2, [r3, #4]
 800d41e:	2200      	movs	r2, #0
 800d420:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800d422:	687b      	ldr	r3, [r7, #4]
 800d424:	2243      	movs	r2, #67	; 0x43
 800d426:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800d428:	4b02      	ldr	r3, [pc, #8]	; (800d434 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800d42a:	4618      	mov	r0, r3
 800d42c:	3718      	adds	r7, #24
 800d42e:	46bd      	mov	sp, r7
 800d430:	bd80      	pop	{r7, pc}
 800d432:	bf00      	nop
 800d434:	2000014c 	.word	0x2000014c

0800d438 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800d438:	b580      	push	{r7, lr}
 800d43a:	b086      	sub	sp, #24
 800d43c:	af00      	add	r7, sp, #0
 800d43e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800d440:	2182      	movs	r1, #130	; 0x82
 800d442:	4818      	ldr	r0, [pc, #96]	; (800d4a4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800d444:	f000 fd17 	bl	800de76 <USBD_GetEpDesc>
 800d448:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800d44a:	2101      	movs	r1, #1
 800d44c:	4815      	ldr	r0, [pc, #84]	; (800d4a4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800d44e:	f000 fd12 	bl	800de76 <USBD_GetEpDesc>
 800d452:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800d454:	2181      	movs	r1, #129	; 0x81
 800d456:	4813      	ldr	r0, [pc, #76]	; (800d4a4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800d458:	f000 fd0d 	bl	800de76 <USBD_GetEpDesc>
 800d45c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800d45e:	697b      	ldr	r3, [r7, #20]
 800d460:	2b00      	cmp	r3, #0
 800d462:	d002      	beq.n	800d46a <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800d464:	697b      	ldr	r3, [r7, #20]
 800d466:	2210      	movs	r2, #16
 800d468:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800d46a:	693b      	ldr	r3, [r7, #16]
 800d46c:	2b00      	cmp	r3, #0
 800d46e:	d006      	beq.n	800d47e <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800d470:	693b      	ldr	r3, [r7, #16]
 800d472:	2200      	movs	r2, #0
 800d474:	711a      	strb	r2, [r3, #4]
 800d476:	2200      	movs	r2, #0
 800d478:	f042 0202 	orr.w	r2, r2, #2
 800d47c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800d47e:	68fb      	ldr	r3, [r7, #12]
 800d480:	2b00      	cmp	r3, #0
 800d482:	d006      	beq.n	800d492 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800d484:	68fb      	ldr	r3, [r7, #12]
 800d486:	2200      	movs	r2, #0
 800d488:	711a      	strb	r2, [r3, #4]
 800d48a:	2200      	movs	r2, #0
 800d48c:	f042 0202 	orr.w	r2, r2, #2
 800d490:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800d492:	687b      	ldr	r3, [r7, #4]
 800d494:	2243      	movs	r2, #67	; 0x43
 800d496:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800d498:	4b02      	ldr	r3, [pc, #8]	; (800d4a4 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800d49a:	4618      	mov	r0, r3
 800d49c:	3718      	adds	r7, #24
 800d49e:	46bd      	mov	sp, r7
 800d4a0:	bd80      	pop	{r7, pc}
 800d4a2:	bf00      	nop
 800d4a4:	2000014c 	.word	0x2000014c

0800d4a8 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800d4a8:	b580      	push	{r7, lr}
 800d4aa:	b086      	sub	sp, #24
 800d4ac:	af00      	add	r7, sp, #0
 800d4ae:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800d4b0:	2182      	movs	r1, #130	; 0x82
 800d4b2:	4818      	ldr	r0, [pc, #96]	; (800d514 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800d4b4:	f000 fcdf 	bl	800de76 <USBD_GetEpDesc>
 800d4b8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800d4ba:	2101      	movs	r1, #1
 800d4bc:	4815      	ldr	r0, [pc, #84]	; (800d514 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800d4be:	f000 fcda 	bl	800de76 <USBD_GetEpDesc>
 800d4c2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800d4c4:	2181      	movs	r1, #129	; 0x81
 800d4c6:	4813      	ldr	r0, [pc, #76]	; (800d514 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800d4c8:	f000 fcd5 	bl	800de76 <USBD_GetEpDesc>
 800d4cc:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800d4ce:	697b      	ldr	r3, [r7, #20]
 800d4d0:	2b00      	cmp	r3, #0
 800d4d2:	d002      	beq.n	800d4da <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800d4d4:	697b      	ldr	r3, [r7, #20]
 800d4d6:	2210      	movs	r2, #16
 800d4d8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800d4da:	693b      	ldr	r3, [r7, #16]
 800d4dc:	2b00      	cmp	r3, #0
 800d4de:	d006      	beq.n	800d4ee <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800d4e0:	693b      	ldr	r3, [r7, #16]
 800d4e2:	2200      	movs	r2, #0
 800d4e4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800d4e8:	711a      	strb	r2, [r3, #4]
 800d4ea:	2200      	movs	r2, #0
 800d4ec:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800d4ee:	68fb      	ldr	r3, [r7, #12]
 800d4f0:	2b00      	cmp	r3, #0
 800d4f2:	d006      	beq.n	800d502 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800d4f4:	68fb      	ldr	r3, [r7, #12]
 800d4f6:	2200      	movs	r2, #0
 800d4f8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800d4fc:	711a      	strb	r2, [r3, #4]
 800d4fe:	2200      	movs	r2, #0
 800d500:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800d502:	687b      	ldr	r3, [r7, #4]
 800d504:	2243      	movs	r2, #67	; 0x43
 800d506:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800d508:	4b02      	ldr	r3, [pc, #8]	; (800d514 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800d50a:	4618      	mov	r0, r3
 800d50c:	3718      	adds	r7, #24
 800d50e:	46bd      	mov	sp, r7
 800d510:	bd80      	pop	{r7, pc}
 800d512:	bf00      	nop
 800d514:	2000014c 	.word	0x2000014c

0800d518 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800d518:	b480      	push	{r7}
 800d51a:	b083      	sub	sp, #12
 800d51c:	af00      	add	r7, sp, #0
 800d51e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800d520:	687b      	ldr	r3, [r7, #4]
 800d522:	220a      	movs	r2, #10
 800d524:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800d526:	4b03      	ldr	r3, [pc, #12]	; (800d534 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800d528:	4618      	mov	r0, r3
 800d52a:	370c      	adds	r7, #12
 800d52c:	46bd      	mov	sp, r7
 800d52e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d532:	4770      	bx	lr
 800d534:	20000108 	.word	0x20000108

0800d538 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800d538:	b480      	push	{r7}
 800d53a:	b083      	sub	sp, #12
 800d53c:	af00      	add	r7, sp, #0
 800d53e:	6078      	str	r0, [r7, #4]
 800d540:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800d542:	683b      	ldr	r3, [r7, #0]
 800d544:	2b00      	cmp	r3, #0
 800d546:	d101      	bne.n	800d54c <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800d548:	2303      	movs	r3, #3
 800d54a:	e009      	b.n	800d560 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800d54c:	687b      	ldr	r3, [r7, #4]
 800d54e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800d552:	687a      	ldr	r2, [r7, #4]
 800d554:	33b0      	adds	r3, #176	; 0xb0
 800d556:	009b      	lsls	r3, r3, #2
 800d558:	4413      	add	r3, r2
 800d55a:	683a      	ldr	r2, [r7, #0]
 800d55c:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800d55e:	2300      	movs	r3, #0
}
 800d560:	4618      	mov	r0, r3
 800d562:	370c      	adds	r7, #12
 800d564:	46bd      	mov	sp, r7
 800d566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d56a:	4770      	bx	lr

0800d56c <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800d56c:	b480      	push	{r7}
 800d56e:	b087      	sub	sp, #28
 800d570:	af00      	add	r7, sp, #0
 800d572:	60f8      	str	r0, [r7, #12]
 800d574:	60b9      	str	r1, [r7, #8]
 800d576:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d578:	68fb      	ldr	r3, [r7, #12]
 800d57a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d57e:	68fb      	ldr	r3, [r7, #12]
 800d580:	32b0      	adds	r2, #176	; 0xb0
 800d582:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d586:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800d588:	697b      	ldr	r3, [r7, #20]
 800d58a:	2b00      	cmp	r3, #0
 800d58c:	d101      	bne.n	800d592 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800d58e:	2303      	movs	r3, #3
 800d590:	e008      	b.n	800d5a4 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800d592:	697b      	ldr	r3, [r7, #20]
 800d594:	68ba      	ldr	r2, [r7, #8]
 800d596:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800d59a:	697b      	ldr	r3, [r7, #20]
 800d59c:	687a      	ldr	r2, [r7, #4]
 800d59e:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800d5a2:	2300      	movs	r3, #0
}
 800d5a4:	4618      	mov	r0, r3
 800d5a6:	371c      	adds	r7, #28
 800d5a8:	46bd      	mov	sp, r7
 800d5aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5ae:	4770      	bx	lr

0800d5b0 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800d5b0:	b480      	push	{r7}
 800d5b2:	b085      	sub	sp, #20
 800d5b4:	af00      	add	r7, sp, #0
 800d5b6:	6078      	str	r0, [r7, #4]
 800d5b8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d5ba:	687b      	ldr	r3, [r7, #4]
 800d5bc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d5c0:	687b      	ldr	r3, [r7, #4]
 800d5c2:	32b0      	adds	r2, #176	; 0xb0
 800d5c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d5c8:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800d5ca:	68fb      	ldr	r3, [r7, #12]
 800d5cc:	2b00      	cmp	r3, #0
 800d5ce:	d101      	bne.n	800d5d4 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800d5d0:	2303      	movs	r3, #3
 800d5d2:	e004      	b.n	800d5de <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800d5d4:	68fb      	ldr	r3, [r7, #12]
 800d5d6:	683a      	ldr	r2, [r7, #0]
 800d5d8:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800d5dc:	2300      	movs	r3, #0
}
 800d5de:	4618      	mov	r0, r3
 800d5e0:	3714      	adds	r7, #20
 800d5e2:	46bd      	mov	sp, r7
 800d5e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5e8:	4770      	bx	lr
	...

0800d5ec <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800d5ec:	b580      	push	{r7, lr}
 800d5ee:	b084      	sub	sp, #16
 800d5f0:	af00      	add	r7, sp, #0
 800d5f2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d5f4:	687b      	ldr	r3, [r7, #4]
 800d5f6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d5fa:	687b      	ldr	r3, [r7, #4]
 800d5fc:	32b0      	adds	r2, #176	; 0xb0
 800d5fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d602:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 800d604:	2301      	movs	r3, #1
 800d606:	73fb      	strb	r3, [r7, #15]

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800d608:	687b      	ldr	r3, [r7, #4]
 800d60a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d60e:	687b      	ldr	r3, [r7, #4]
 800d610:	32b0      	adds	r2, #176	; 0xb0
 800d612:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d616:	2b00      	cmp	r3, #0
 800d618:	d101      	bne.n	800d61e <USBD_CDC_TransmitPacket+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800d61a:	2303      	movs	r3, #3
 800d61c:	e025      	b.n	800d66a <USBD_CDC_TransmitPacket+0x7e>
  }

  if (hcdc->TxState == 0U)
 800d61e:	68bb      	ldr	r3, [r7, #8]
 800d620:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800d624:	2b00      	cmp	r3, #0
 800d626:	d11f      	bne.n	800d668 <USBD_CDC_TransmitPacket+0x7c>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800d628:	68bb      	ldr	r3, [r7, #8]
 800d62a:	2201      	movs	r2, #1
 800d62c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 800d630:	4b10      	ldr	r3, [pc, #64]	; (800d674 <USBD_CDC_TransmitPacket+0x88>)
 800d632:	781b      	ldrb	r3, [r3, #0]
 800d634:	f003 020f 	and.w	r2, r3, #15
 800d638:	68bb      	ldr	r3, [r7, #8]
 800d63a:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 800d63e:	6878      	ldr	r0, [r7, #4]
 800d640:	4613      	mov	r3, r2
 800d642:	009b      	lsls	r3, r3, #2
 800d644:	4413      	add	r3, r2
 800d646:	009b      	lsls	r3, r3, #2
 800d648:	4403      	add	r3, r0
 800d64a:	3318      	adds	r3, #24
 800d64c:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800d64e:	4b09      	ldr	r3, [pc, #36]	; (800d674 <USBD_CDC_TransmitPacket+0x88>)
 800d650:	7819      	ldrb	r1, [r3, #0]
 800d652:	68bb      	ldr	r3, [r7, #8]
 800d654:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800d658:	68bb      	ldr	r3, [r7, #8]
 800d65a:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800d65e:	6878      	ldr	r0, [r7, #4]
 800d660:	f002 f805 	bl	800f66e <USBD_LL_Transmit>

    ret = USBD_OK;
 800d664:	2300      	movs	r3, #0
 800d666:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800d668:	7bfb      	ldrb	r3, [r7, #15]
}
 800d66a:	4618      	mov	r0, r3
 800d66c:	3710      	adds	r7, #16
 800d66e:	46bd      	mov	sp, r7
 800d670:	bd80      	pop	{r7, pc}
 800d672:	bf00      	nop
 800d674:	2000018f 	.word	0x2000018f

0800d678 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800d678:	b580      	push	{r7, lr}
 800d67a:	b084      	sub	sp, #16
 800d67c:	af00      	add	r7, sp, #0
 800d67e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d680:	687b      	ldr	r3, [r7, #4]
 800d682:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d686:	687b      	ldr	r3, [r7, #4]
 800d688:	32b0      	adds	r2, #176	; 0xb0
 800d68a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d68e:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800d690:	687b      	ldr	r3, [r7, #4]
 800d692:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d696:	687b      	ldr	r3, [r7, #4]
 800d698:	32b0      	adds	r2, #176	; 0xb0
 800d69a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d69e:	2b00      	cmp	r3, #0
 800d6a0:	d101      	bne.n	800d6a6 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800d6a2:	2303      	movs	r3, #3
 800d6a4:	e018      	b.n	800d6d8 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d6a6:	687b      	ldr	r3, [r7, #4]
 800d6a8:	7c1b      	ldrb	r3, [r3, #16]
 800d6aa:	2b00      	cmp	r3, #0
 800d6ac:	d10a      	bne.n	800d6c4 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800d6ae:	4b0c      	ldr	r3, [pc, #48]	; (800d6e0 <USBD_CDC_ReceivePacket+0x68>)
 800d6b0:	7819      	ldrb	r1, [r3, #0]
 800d6b2:	68fb      	ldr	r3, [r7, #12]
 800d6b4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800d6b8:	f44f 7300 	mov.w	r3, #512	; 0x200
 800d6bc:	6878      	ldr	r0, [r7, #4]
 800d6be:	f001 fff7 	bl	800f6b0 <USBD_LL_PrepareReceive>
 800d6c2:	e008      	b.n	800d6d6 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800d6c4:	4b06      	ldr	r3, [pc, #24]	; (800d6e0 <USBD_CDC_ReceivePacket+0x68>)
 800d6c6:	7819      	ldrb	r1, [r3, #0]
 800d6c8:	68fb      	ldr	r3, [r7, #12]
 800d6ca:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800d6ce:	2340      	movs	r3, #64	; 0x40
 800d6d0:	6878      	ldr	r0, [r7, #4]
 800d6d2:	f001 ffed 	bl	800f6b0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800d6d6:	2300      	movs	r3, #0
}
 800d6d8:	4618      	mov	r0, r3
 800d6da:	3710      	adds	r7, #16
 800d6dc:	46bd      	mov	sp, r7
 800d6de:	bd80      	pop	{r7, pc}
 800d6e0:	20000190 	.word	0x20000190

0800d6e4 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800d6e4:	b580      	push	{r7, lr}
 800d6e6:	b086      	sub	sp, #24
 800d6e8:	af00      	add	r7, sp, #0
 800d6ea:	60f8      	str	r0, [r7, #12]
 800d6ec:	60b9      	str	r1, [r7, #8]
 800d6ee:	4613      	mov	r3, r2
 800d6f0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800d6f2:	68fb      	ldr	r3, [r7, #12]
 800d6f4:	2b00      	cmp	r3, #0
 800d6f6:	d101      	bne.n	800d6fc <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800d6f8:	2303      	movs	r3, #3
 800d6fa:	e01f      	b.n	800d73c <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800d6fc:	68fb      	ldr	r3, [r7, #12]
 800d6fe:	2200      	movs	r2, #0
 800d700:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 800d704:	68fb      	ldr	r3, [r7, #12]
 800d706:	2200      	movs	r2, #0
 800d708:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800d70c:	68fb      	ldr	r3, [r7, #12]
 800d70e:	2200      	movs	r2, #0
 800d710:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800d714:	68bb      	ldr	r3, [r7, #8]
 800d716:	2b00      	cmp	r3, #0
 800d718:	d003      	beq.n	800d722 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800d71a:	68fb      	ldr	r3, [r7, #12]
 800d71c:	68ba      	ldr	r2, [r7, #8]
 800d71e:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800d722:	68fb      	ldr	r3, [r7, #12]
 800d724:	2201      	movs	r2, #1
 800d726:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800d72a:	68fb      	ldr	r3, [r7, #12]
 800d72c:	79fa      	ldrb	r2, [r7, #7]
 800d72e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800d730:	68f8      	ldr	r0, [r7, #12]
 800d732:	f001 fe67 	bl	800f404 <USBD_LL_Init>
 800d736:	4603      	mov	r3, r0
 800d738:	75fb      	strb	r3, [r7, #23]

  return ret;
 800d73a:	7dfb      	ldrb	r3, [r7, #23]
}
 800d73c:	4618      	mov	r0, r3
 800d73e:	3718      	adds	r7, #24
 800d740:	46bd      	mov	sp, r7
 800d742:	bd80      	pop	{r7, pc}

0800d744 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800d744:	b580      	push	{r7, lr}
 800d746:	b084      	sub	sp, #16
 800d748:	af00      	add	r7, sp, #0
 800d74a:	6078      	str	r0, [r7, #4]
 800d74c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800d74e:	2300      	movs	r3, #0
 800d750:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800d752:	683b      	ldr	r3, [r7, #0]
 800d754:	2b00      	cmp	r3, #0
 800d756:	d101      	bne.n	800d75c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800d758:	2303      	movs	r3, #3
 800d75a:	e025      	b.n	800d7a8 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800d75c:	687b      	ldr	r3, [r7, #4]
 800d75e:	683a      	ldr	r2, [r7, #0]
 800d760:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800d764:	687b      	ldr	r3, [r7, #4]
 800d766:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d76a:	687b      	ldr	r3, [r7, #4]
 800d76c:	32ae      	adds	r2, #174	; 0xae
 800d76e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d772:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d774:	2b00      	cmp	r3, #0
 800d776:	d00f      	beq.n	800d798 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800d778:	687b      	ldr	r3, [r7, #4]
 800d77a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d77e:	687b      	ldr	r3, [r7, #4]
 800d780:	32ae      	adds	r2, #174	; 0xae
 800d782:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d786:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d788:	f107 020e 	add.w	r2, r7, #14
 800d78c:	4610      	mov	r0, r2
 800d78e:	4798      	blx	r3
 800d790:	4602      	mov	r2, r0
 800d792:	687b      	ldr	r3, [r7, #4]
 800d794:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 800d798:	687b      	ldr	r3, [r7, #4]
 800d79a:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800d79e:	1c5a      	adds	r2, r3, #1
 800d7a0:	687b      	ldr	r3, [r7, #4]
 800d7a2:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 800d7a6:	2300      	movs	r3, #0
}
 800d7a8:	4618      	mov	r0, r3
 800d7aa:	3710      	adds	r7, #16
 800d7ac:	46bd      	mov	sp, r7
 800d7ae:	bd80      	pop	{r7, pc}

0800d7b0 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800d7b0:	b580      	push	{r7, lr}
 800d7b2:	b082      	sub	sp, #8
 800d7b4:	af00      	add	r7, sp, #0
 800d7b6:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800d7b8:	6878      	ldr	r0, [r7, #4]
 800d7ba:	f001 fe6f 	bl	800f49c <USBD_LL_Start>
 800d7be:	4603      	mov	r3, r0
}
 800d7c0:	4618      	mov	r0, r3
 800d7c2:	3708      	adds	r7, #8
 800d7c4:	46bd      	mov	sp, r7
 800d7c6:	bd80      	pop	{r7, pc}

0800d7c8 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800d7c8:	b480      	push	{r7}
 800d7ca:	b083      	sub	sp, #12
 800d7cc:	af00      	add	r7, sp, #0
 800d7ce:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800d7d0:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800d7d2:	4618      	mov	r0, r3
 800d7d4:	370c      	adds	r7, #12
 800d7d6:	46bd      	mov	sp, r7
 800d7d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7dc:	4770      	bx	lr

0800d7de <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800d7de:	b580      	push	{r7, lr}
 800d7e0:	b084      	sub	sp, #16
 800d7e2:	af00      	add	r7, sp, #0
 800d7e4:	6078      	str	r0, [r7, #4]
 800d7e6:	460b      	mov	r3, r1
 800d7e8:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800d7ea:	2300      	movs	r3, #0
 800d7ec:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800d7ee:	687b      	ldr	r3, [r7, #4]
 800d7f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d7f4:	2b00      	cmp	r3, #0
 800d7f6:	d009      	beq.n	800d80c <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800d7f8:	687b      	ldr	r3, [r7, #4]
 800d7fa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d7fe:	681b      	ldr	r3, [r3, #0]
 800d800:	78fa      	ldrb	r2, [r7, #3]
 800d802:	4611      	mov	r1, r2
 800d804:	6878      	ldr	r0, [r7, #4]
 800d806:	4798      	blx	r3
 800d808:	4603      	mov	r3, r0
 800d80a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800d80c:	7bfb      	ldrb	r3, [r7, #15]
}
 800d80e:	4618      	mov	r0, r3
 800d810:	3710      	adds	r7, #16
 800d812:	46bd      	mov	sp, r7
 800d814:	bd80      	pop	{r7, pc}

0800d816 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800d816:	b580      	push	{r7, lr}
 800d818:	b084      	sub	sp, #16
 800d81a:	af00      	add	r7, sp, #0
 800d81c:	6078      	str	r0, [r7, #4]
 800d81e:	460b      	mov	r3, r1
 800d820:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800d822:	2300      	movs	r3, #0
 800d824:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800d826:	687b      	ldr	r3, [r7, #4]
 800d828:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d82c:	685b      	ldr	r3, [r3, #4]
 800d82e:	78fa      	ldrb	r2, [r7, #3]
 800d830:	4611      	mov	r1, r2
 800d832:	6878      	ldr	r0, [r7, #4]
 800d834:	4798      	blx	r3
 800d836:	4603      	mov	r3, r0
 800d838:	2b00      	cmp	r3, #0
 800d83a:	d001      	beq.n	800d840 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800d83c:	2303      	movs	r3, #3
 800d83e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800d840:	7bfb      	ldrb	r3, [r7, #15]
}
 800d842:	4618      	mov	r0, r3
 800d844:	3710      	adds	r7, #16
 800d846:	46bd      	mov	sp, r7
 800d848:	bd80      	pop	{r7, pc}

0800d84a <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800d84a:	b580      	push	{r7, lr}
 800d84c:	b084      	sub	sp, #16
 800d84e:	af00      	add	r7, sp, #0
 800d850:	6078      	str	r0, [r7, #4]
 800d852:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800d854:	687b      	ldr	r3, [r7, #4]
 800d856:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800d85a:	6839      	ldr	r1, [r7, #0]
 800d85c:	4618      	mov	r0, r3
 800d85e:	f001 f932 	bl	800eac6 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800d862:	687b      	ldr	r3, [r7, #4]
 800d864:	2201      	movs	r2, #1
 800d866:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800d86a:	687b      	ldr	r3, [r7, #4]
 800d86c:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800d870:	461a      	mov	r2, r3
 800d872:	687b      	ldr	r3, [r7, #4]
 800d874:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800d878:	687b      	ldr	r3, [r7, #4]
 800d87a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800d87e:	f003 031f 	and.w	r3, r3, #31
 800d882:	2b02      	cmp	r3, #2
 800d884:	d01a      	beq.n	800d8bc <USBD_LL_SetupStage+0x72>
 800d886:	2b02      	cmp	r3, #2
 800d888:	d822      	bhi.n	800d8d0 <USBD_LL_SetupStage+0x86>
 800d88a:	2b00      	cmp	r3, #0
 800d88c:	d002      	beq.n	800d894 <USBD_LL_SetupStage+0x4a>
 800d88e:	2b01      	cmp	r3, #1
 800d890:	d00a      	beq.n	800d8a8 <USBD_LL_SetupStage+0x5e>
 800d892:	e01d      	b.n	800d8d0 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800d894:	687b      	ldr	r3, [r7, #4]
 800d896:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800d89a:	4619      	mov	r1, r3
 800d89c:	6878      	ldr	r0, [r7, #4]
 800d89e:	f000 fb5f 	bl	800df60 <USBD_StdDevReq>
 800d8a2:	4603      	mov	r3, r0
 800d8a4:	73fb      	strb	r3, [r7, #15]
      break;
 800d8a6:	e020      	b.n	800d8ea <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800d8a8:	687b      	ldr	r3, [r7, #4]
 800d8aa:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800d8ae:	4619      	mov	r1, r3
 800d8b0:	6878      	ldr	r0, [r7, #4]
 800d8b2:	f000 fbc7 	bl	800e044 <USBD_StdItfReq>
 800d8b6:	4603      	mov	r3, r0
 800d8b8:	73fb      	strb	r3, [r7, #15]
      break;
 800d8ba:	e016      	b.n	800d8ea <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800d8bc:	687b      	ldr	r3, [r7, #4]
 800d8be:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800d8c2:	4619      	mov	r1, r3
 800d8c4:	6878      	ldr	r0, [r7, #4]
 800d8c6:	f000 fc29 	bl	800e11c <USBD_StdEPReq>
 800d8ca:	4603      	mov	r3, r0
 800d8cc:	73fb      	strb	r3, [r7, #15]
      break;
 800d8ce:	e00c      	b.n	800d8ea <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800d8d0:	687b      	ldr	r3, [r7, #4]
 800d8d2:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800d8d6:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800d8da:	b2db      	uxtb	r3, r3
 800d8dc:	4619      	mov	r1, r3
 800d8de:	6878      	ldr	r0, [r7, #4]
 800d8e0:	f001 fe3c 	bl	800f55c <USBD_LL_StallEP>
 800d8e4:	4603      	mov	r3, r0
 800d8e6:	73fb      	strb	r3, [r7, #15]
      break;
 800d8e8:	bf00      	nop
  }

  return ret;
 800d8ea:	7bfb      	ldrb	r3, [r7, #15]
}
 800d8ec:	4618      	mov	r0, r3
 800d8ee:	3710      	adds	r7, #16
 800d8f0:	46bd      	mov	sp, r7
 800d8f2:	bd80      	pop	{r7, pc}

0800d8f4 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800d8f4:	b580      	push	{r7, lr}
 800d8f6:	b086      	sub	sp, #24
 800d8f8:	af00      	add	r7, sp, #0
 800d8fa:	60f8      	str	r0, [r7, #12]
 800d8fc:	460b      	mov	r3, r1
 800d8fe:	607a      	str	r2, [r7, #4]
 800d900:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800d902:	2300      	movs	r3, #0
 800d904:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800d906:	7afb      	ldrb	r3, [r7, #11]
 800d908:	2b00      	cmp	r3, #0
 800d90a:	d16e      	bne.n	800d9ea <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800d90c:	68fb      	ldr	r3, [r7, #12]
 800d90e:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800d912:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800d914:	68fb      	ldr	r3, [r7, #12]
 800d916:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800d91a:	2b03      	cmp	r3, #3
 800d91c:	f040 8098 	bne.w	800da50 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800d920:	693b      	ldr	r3, [r7, #16]
 800d922:	689a      	ldr	r2, [r3, #8]
 800d924:	693b      	ldr	r3, [r7, #16]
 800d926:	68db      	ldr	r3, [r3, #12]
 800d928:	429a      	cmp	r2, r3
 800d92a:	d913      	bls.n	800d954 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800d92c:	693b      	ldr	r3, [r7, #16]
 800d92e:	689a      	ldr	r2, [r3, #8]
 800d930:	693b      	ldr	r3, [r7, #16]
 800d932:	68db      	ldr	r3, [r3, #12]
 800d934:	1ad2      	subs	r2, r2, r3
 800d936:	693b      	ldr	r3, [r7, #16]
 800d938:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800d93a:	693b      	ldr	r3, [r7, #16]
 800d93c:	68da      	ldr	r2, [r3, #12]
 800d93e:	693b      	ldr	r3, [r7, #16]
 800d940:	689b      	ldr	r3, [r3, #8]
 800d942:	4293      	cmp	r3, r2
 800d944:	bf28      	it	cs
 800d946:	4613      	movcs	r3, r2
 800d948:	461a      	mov	r2, r3
 800d94a:	6879      	ldr	r1, [r7, #4]
 800d94c:	68f8      	ldr	r0, [r7, #12]
 800d94e:	f001 f9ae 	bl	800ecae <USBD_CtlContinueRx>
 800d952:	e07d      	b.n	800da50 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800d954:	68fb      	ldr	r3, [r7, #12]
 800d956:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800d95a:	f003 031f 	and.w	r3, r3, #31
 800d95e:	2b02      	cmp	r3, #2
 800d960:	d014      	beq.n	800d98c <USBD_LL_DataOutStage+0x98>
 800d962:	2b02      	cmp	r3, #2
 800d964:	d81d      	bhi.n	800d9a2 <USBD_LL_DataOutStage+0xae>
 800d966:	2b00      	cmp	r3, #0
 800d968:	d002      	beq.n	800d970 <USBD_LL_DataOutStage+0x7c>
 800d96a:	2b01      	cmp	r3, #1
 800d96c:	d003      	beq.n	800d976 <USBD_LL_DataOutStage+0x82>
 800d96e:	e018      	b.n	800d9a2 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800d970:	2300      	movs	r3, #0
 800d972:	75bb      	strb	r3, [r7, #22]
            break;
 800d974:	e018      	b.n	800d9a8 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800d976:	68fb      	ldr	r3, [r7, #12]
 800d978:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800d97c:	b2db      	uxtb	r3, r3
 800d97e:	4619      	mov	r1, r3
 800d980:	68f8      	ldr	r0, [r7, #12]
 800d982:	f000 fa5e 	bl	800de42 <USBD_CoreFindIF>
 800d986:	4603      	mov	r3, r0
 800d988:	75bb      	strb	r3, [r7, #22]
            break;
 800d98a:	e00d      	b.n	800d9a8 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800d98c:	68fb      	ldr	r3, [r7, #12]
 800d98e:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800d992:	b2db      	uxtb	r3, r3
 800d994:	4619      	mov	r1, r3
 800d996:	68f8      	ldr	r0, [r7, #12]
 800d998:	f000 fa60 	bl	800de5c <USBD_CoreFindEP>
 800d99c:	4603      	mov	r3, r0
 800d99e:	75bb      	strb	r3, [r7, #22]
            break;
 800d9a0:	e002      	b.n	800d9a8 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800d9a2:	2300      	movs	r3, #0
 800d9a4:	75bb      	strb	r3, [r7, #22]
            break;
 800d9a6:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800d9a8:	7dbb      	ldrb	r3, [r7, #22]
 800d9aa:	2b00      	cmp	r3, #0
 800d9ac:	d119      	bne.n	800d9e2 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d9ae:	68fb      	ldr	r3, [r7, #12]
 800d9b0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d9b4:	b2db      	uxtb	r3, r3
 800d9b6:	2b03      	cmp	r3, #3
 800d9b8:	d113      	bne.n	800d9e2 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800d9ba:	7dba      	ldrb	r2, [r7, #22]
 800d9bc:	68fb      	ldr	r3, [r7, #12]
 800d9be:	32ae      	adds	r2, #174	; 0xae
 800d9c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d9c4:	691b      	ldr	r3, [r3, #16]
 800d9c6:	2b00      	cmp	r3, #0
 800d9c8:	d00b      	beq.n	800d9e2 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800d9ca:	7dba      	ldrb	r2, [r7, #22]
 800d9cc:	68fb      	ldr	r3, [r7, #12]
 800d9ce:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800d9d2:	7dba      	ldrb	r2, [r7, #22]
 800d9d4:	68fb      	ldr	r3, [r7, #12]
 800d9d6:	32ae      	adds	r2, #174	; 0xae
 800d9d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d9dc:	691b      	ldr	r3, [r3, #16]
 800d9de:	68f8      	ldr	r0, [r7, #12]
 800d9e0:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800d9e2:	68f8      	ldr	r0, [r7, #12]
 800d9e4:	f001 f974 	bl	800ecd0 <USBD_CtlSendStatus>
 800d9e8:	e032      	b.n	800da50 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800d9ea:	7afb      	ldrb	r3, [r7, #11]
 800d9ec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d9f0:	b2db      	uxtb	r3, r3
 800d9f2:	4619      	mov	r1, r3
 800d9f4:	68f8      	ldr	r0, [r7, #12]
 800d9f6:	f000 fa31 	bl	800de5c <USBD_CoreFindEP>
 800d9fa:	4603      	mov	r3, r0
 800d9fc:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800d9fe:	7dbb      	ldrb	r3, [r7, #22]
 800da00:	2bff      	cmp	r3, #255	; 0xff
 800da02:	d025      	beq.n	800da50 <USBD_LL_DataOutStage+0x15c>
 800da04:	7dbb      	ldrb	r3, [r7, #22]
 800da06:	2b00      	cmp	r3, #0
 800da08:	d122      	bne.n	800da50 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800da0a:	68fb      	ldr	r3, [r7, #12]
 800da0c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800da10:	b2db      	uxtb	r3, r3
 800da12:	2b03      	cmp	r3, #3
 800da14:	d117      	bne.n	800da46 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800da16:	7dba      	ldrb	r2, [r7, #22]
 800da18:	68fb      	ldr	r3, [r7, #12]
 800da1a:	32ae      	adds	r2, #174	; 0xae
 800da1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800da20:	699b      	ldr	r3, [r3, #24]
 800da22:	2b00      	cmp	r3, #0
 800da24:	d00f      	beq.n	800da46 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800da26:	7dba      	ldrb	r2, [r7, #22]
 800da28:	68fb      	ldr	r3, [r7, #12]
 800da2a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800da2e:	7dba      	ldrb	r2, [r7, #22]
 800da30:	68fb      	ldr	r3, [r7, #12]
 800da32:	32ae      	adds	r2, #174	; 0xae
 800da34:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800da38:	699b      	ldr	r3, [r3, #24]
 800da3a:	7afa      	ldrb	r2, [r7, #11]
 800da3c:	4611      	mov	r1, r2
 800da3e:	68f8      	ldr	r0, [r7, #12]
 800da40:	4798      	blx	r3
 800da42:	4603      	mov	r3, r0
 800da44:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800da46:	7dfb      	ldrb	r3, [r7, #23]
 800da48:	2b00      	cmp	r3, #0
 800da4a:	d001      	beq.n	800da50 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800da4c:	7dfb      	ldrb	r3, [r7, #23]
 800da4e:	e000      	b.n	800da52 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800da50:	2300      	movs	r3, #0
}
 800da52:	4618      	mov	r0, r3
 800da54:	3718      	adds	r7, #24
 800da56:	46bd      	mov	sp, r7
 800da58:	bd80      	pop	{r7, pc}

0800da5a <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800da5a:	b580      	push	{r7, lr}
 800da5c:	b086      	sub	sp, #24
 800da5e:	af00      	add	r7, sp, #0
 800da60:	60f8      	str	r0, [r7, #12]
 800da62:	460b      	mov	r3, r1
 800da64:	607a      	str	r2, [r7, #4]
 800da66:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800da68:	7afb      	ldrb	r3, [r7, #11]
 800da6a:	2b00      	cmp	r3, #0
 800da6c:	d16f      	bne.n	800db4e <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800da6e:	68fb      	ldr	r3, [r7, #12]
 800da70:	3314      	adds	r3, #20
 800da72:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800da74:	68fb      	ldr	r3, [r7, #12]
 800da76:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800da7a:	2b02      	cmp	r3, #2
 800da7c:	d15a      	bne.n	800db34 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800da7e:	693b      	ldr	r3, [r7, #16]
 800da80:	689a      	ldr	r2, [r3, #8]
 800da82:	693b      	ldr	r3, [r7, #16]
 800da84:	68db      	ldr	r3, [r3, #12]
 800da86:	429a      	cmp	r2, r3
 800da88:	d914      	bls.n	800dab4 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800da8a:	693b      	ldr	r3, [r7, #16]
 800da8c:	689a      	ldr	r2, [r3, #8]
 800da8e:	693b      	ldr	r3, [r7, #16]
 800da90:	68db      	ldr	r3, [r3, #12]
 800da92:	1ad2      	subs	r2, r2, r3
 800da94:	693b      	ldr	r3, [r7, #16]
 800da96:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800da98:	693b      	ldr	r3, [r7, #16]
 800da9a:	689b      	ldr	r3, [r3, #8]
 800da9c:	461a      	mov	r2, r3
 800da9e:	6879      	ldr	r1, [r7, #4]
 800daa0:	68f8      	ldr	r0, [r7, #12]
 800daa2:	f001 f8d6 	bl	800ec52 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800daa6:	2300      	movs	r3, #0
 800daa8:	2200      	movs	r2, #0
 800daaa:	2100      	movs	r1, #0
 800daac:	68f8      	ldr	r0, [r7, #12]
 800daae:	f001 fdff 	bl	800f6b0 <USBD_LL_PrepareReceive>
 800dab2:	e03f      	b.n	800db34 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800dab4:	693b      	ldr	r3, [r7, #16]
 800dab6:	68da      	ldr	r2, [r3, #12]
 800dab8:	693b      	ldr	r3, [r7, #16]
 800daba:	689b      	ldr	r3, [r3, #8]
 800dabc:	429a      	cmp	r2, r3
 800dabe:	d11c      	bne.n	800dafa <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800dac0:	693b      	ldr	r3, [r7, #16]
 800dac2:	685a      	ldr	r2, [r3, #4]
 800dac4:	693b      	ldr	r3, [r7, #16]
 800dac6:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800dac8:	429a      	cmp	r2, r3
 800daca:	d316      	bcc.n	800dafa <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800dacc:	693b      	ldr	r3, [r7, #16]
 800dace:	685a      	ldr	r2, [r3, #4]
 800dad0:	68fb      	ldr	r3, [r7, #12]
 800dad2:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800dad6:	429a      	cmp	r2, r3
 800dad8:	d20f      	bcs.n	800dafa <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800dada:	2200      	movs	r2, #0
 800dadc:	2100      	movs	r1, #0
 800dade:	68f8      	ldr	r0, [r7, #12]
 800dae0:	f001 f8b7 	bl	800ec52 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800dae4:	68fb      	ldr	r3, [r7, #12]
 800dae6:	2200      	movs	r2, #0
 800dae8:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800daec:	2300      	movs	r3, #0
 800daee:	2200      	movs	r2, #0
 800daf0:	2100      	movs	r1, #0
 800daf2:	68f8      	ldr	r0, [r7, #12]
 800daf4:	f001 fddc 	bl	800f6b0 <USBD_LL_PrepareReceive>
 800daf8:	e01c      	b.n	800db34 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800dafa:	68fb      	ldr	r3, [r7, #12]
 800dafc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800db00:	b2db      	uxtb	r3, r3
 800db02:	2b03      	cmp	r3, #3
 800db04:	d10f      	bne.n	800db26 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800db06:	68fb      	ldr	r3, [r7, #12]
 800db08:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800db0c:	68db      	ldr	r3, [r3, #12]
 800db0e:	2b00      	cmp	r3, #0
 800db10:	d009      	beq.n	800db26 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800db12:	68fb      	ldr	r3, [r7, #12]
 800db14:	2200      	movs	r2, #0
 800db16:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800db1a:	68fb      	ldr	r3, [r7, #12]
 800db1c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800db20:	68db      	ldr	r3, [r3, #12]
 800db22:	68f8      	ldr	r0, [r7, #12]
 800db24:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800db26:	2180      	movs	r1, #128	; 0x80
 800db28:	68f8      	ldr	r0, [r7, #12]
 800db2a:	f001 fd17 	bl	800f55c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800db2e:	68f8      	ldr	r0, [r7, #12]
 800db30:	f001 f8e1 	bl	800ecf6 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 800db34:	68fb      	ldr	r3, [r7, #12]
 800db36:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800db3a:	2b00      	cmp	r3, #0
 800db3c:	d03a      	beq.n	800dbb4 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800db3e:	68f8      	ldr	r0, [r7, #12]
 800db40:	f7ff fe42 	bl	800d7c8 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800db44:	68fb      	ldr	r3, [r7, #12]
 800db46:	2200      	movs	r2, #0
 800db48:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800db4c:	e032      	b.n	800dbb4 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800db4e:	7afb      	ldrb	r3, [r7, #11]
 800db50:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800db54:	b2db      	uxtb	r3, r3
 800db56:	4619      	mov	r1, r3
 800db58:	68f8      	ldr	r0, [r7, #12]
 800db5a:	f000 f97f 	bl	800de5c <USBD_CoreFindEP>
 800db5e:	4603      	mov	r3, r0
 800db60:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800db62:	7dfb      	ldrb	r3, [r7, #23]
 800db64:	2bff      	cmp	r3, #255	; 0xff
 800db66:	d025      	beq.n	800dbb4 <USBD_LL_DataInStage+0x15a>
 800db68:	7dfb      	ldrb	r3, [r7, #23]
 800db6a:	2b00      	cmp	r3, #0
 800db6c:	d122      	bne.n	800dbb4 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800db6e:	68fb      	ldr	r3, [r7, #12]
 800db70:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800db74:	b2db      	uxtb	r3, r3
 800db76:	2b03      	cmp	r3, #3
 800db78:	d11c      	bne.n	800dbb4 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800db7a:	7dfa      	ldrb	r2, [r7, #23]
 800db7c:	68fb      	ldr	r3, [r7, #12]
 800db7e:	32ae      	adds	r2, #174	; 0xae
 800db80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800db84:	695b      	ldr	r3, [r3, #20]
 800db86:	2b00      	cmp	r3, #0
 800db88:	d014      	beq.n	800dbb4 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800db8a:	7dfa      	ldrb	r2, [r7, #23]
 800db8c:	68fb      	ldr	r3, [r7, #12]
 800db8e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800db92:	7dfa      	ldrb	r2, [r7, #23]
 800db94:	68fb      	ldr	r3, [r7, #12]
 800db96:	32ae      	adds	r2, #174	; 0xae
 800db98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800db9c:	695b      	ldr	r3, [r3, #20]
 800db9e:	7afa      	ldrb	r2, [r7, #11]
 800dba0:	4611      	mov	r1, r2
 800dba2:	68f8      	ldr	r0, [r7, #12]
 800dba4:	4798      	blx	r3
 800dba6:	4603      	mov	r3, r0
 800dba8:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800dbaa:	7dbb      	ldrb	r3, [r7, #22]
 800dbac:	2b00      	cmp	r3, #0
 800dbae:	d001      	beq.n	800dbb4 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800dbb0:	7dbb      	ldrb	r3, [r7, #22]
 800dbb2:	e000      	b.n	800dbb6 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800dbb4:	2300      	movs	r3, #0
}
 800dbb6:	4618      	mov	r0, r3
 800dbb8:	3718      	adds	r7, #24
 800dbba:	46bd      	mov	sp, r7
 800dbbc:	bd80      	pop	{r7, pc}

0800dbbe <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800dbbe:	b580      	push	{r7, lr}
 800dbc0:	b084      	sub	sp, #16
 800dbc2:	af00      	add	r7, sp, #0
 800dbc4:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800dbc6:	2300      	movs	r3, #0
 800dbc8:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800dbca:	687b      	ldr	r3, [r7, #4]
 800dbcc:	2201      	movs	r2, #1
 800dbce:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800dbd2:	687b      	ldr	r3, [r7, #4]
 800dbd4:	2200      	movs	r2, #0
 800dbd6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800dbda:	687b      	ldr	r3, [r7, #4]
 800dbdc:	2200      	movs	r2, #0
 800dbde:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800dbe0:	687b      	ldr	r3, [r7, #4]
 800dbe2:	2200      	movs	r2, #0
 800dbe4:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 800dbe8:	687b      	ldr	r3, [r7, #4]
 800dbea:	2200      	movs	r2, #0
 800dbec:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800dbf0:	687b      	ldr	r3, [r7, #4]
 800dbf2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800dbf6:	2b00      	cmp	r3, #0
 800dbf8:	d014      	beq.n	800dc24 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800dbfa:	687b      	ldr	r3, [r7, #4]
 800dbfc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800dc00:	685b      	ldr	r3, [r3, #4]
 800dc02:	2b00      	cmp	r3, #0
 800dc04:	d00e      	beq.n	800dc24 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800dc06:	687b      	ldr	r3, [r7, #4]
 800dc08:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800dc0c:	685b      	ldr	r3, [r3, #4]
 800dc0e:	687a      	ldr	r2, [r7, #4]
 800dc10:	6852      	ldr	r2, [r2, #4]
 800dc12:	b2d2      	uxtb	r2, r2
 800dc14:	4611      	mov	r1, r2
 800dc16:	6878      	ldr	r0, [r7, #4]
 800dc18:	4798      	blx	r3
 800dc1a:	4603      	mov	r3, r0
 800dc1c:	2b00      	cmp	r3, #0
 800dc1e:	d001      	beq.n	800dc24 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800dc20:	2303      	movs	r3, #3
 800dc22:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800dc24:	2340      	movs	r3, #64	; 0x40
 800dc26:	2200      	movs	r2, #0
 800dc28:	2100      	movs	r1, #0
 800dc2a:	6878      	ldr	r0, [r7, #4]
 800dc2c:	f001 fc51 	bl	800f4d2 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800dc30:	687b      	ldr	r3, [r7, #4]
 800dc32:	2201      	movs	r2, #1
 800dc34:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800dc38:	687b      	ldr	r3, [r7, #4]
 800dc3a:	2240      	movs	r2, #64	; 0x40
 800dc3c:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800dc40:	2340      	movs	r3, #64	; 0x40
 800dc42:	2200      	movs	r2, #0
 800dc44:	2180      	movs	r1, #128	; 0x80
 800dc46:	6878      	ldr	r0, [r7, #4]
 800dc48:	f001 fc43 	bl	800f4d2 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800dc4c:	687b      	ldr	r3, [r7, #4]
 800dc4e:	2201      	movs	r2, #1
 800dc50:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800dc52:	687b      	ldr	r3, [r7, #4]
 800dc54:	2240      	movs	r2, #64	; 0x40
 800dc56:	621a      	str	r2, [r3, #32]

  return ret;
 800dc58:	7bfb      	ldrb	r3, [r7, #15]
}
 800dc5a:	4618      	mov	r0, r3
 800dc5c:	3710      	adds	r7, #16
 800dc5e:	46bd      	mov	sp, r7
 800dc60:	bd80      	pop	{r7, pc}

0800dc62 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800dc62:	b480      	push	{r7}
 800dc64:	b083      	sub	sp, #12
 800dc66:	af00      	add	r7, sp, #0
 800dc68:	6078      	str	r0, [r7, #4]
 800dc6a:	460b      	mov	r3, r1
 800dc6c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800dc6e:	687b      	ldr	r3, [r7, #4]
 800dc70:	78fa      	ldrb	r2, [r7, #3]
 800dc72:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800dc74:	2300      	movs	r3, #0
}
 800dc76:	4618      	mov	r0, r3
 800dc78:	370c      	adds	r7, #12
 800dc7a:	46bd      	mov	sp, r7
 800dc7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc80:	4770      	bx	lr

0800dc82 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800dc82:	b480      	push	{r7}
 800dc84:	b083      	sub	sp, #12
 800dc86:	af00      	add	r7, sp, #0
 800dc88:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800dc8a:	687b      	ldr	r3, [r7, #4]
 800dc8c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800dc90:	b2da      	uxtb	r2, r3
 800dc92:	687b      	ldr	r3, [r7, #4]
 800dc94:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800dc98:	687b      	ldr	r3, [r7, #4]
 800dc9a:	2204      	movs	r2, #4
 800dc9c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800dca0:	2300      	movs	r3, #0
}
 800dca2:	4618      	mov	r0, r3
 800dca4:	370c      	adds	r7, #12
 800dca6:	46bd      	mov	sp, r7
 800dca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcac:	4770      	bx	lr

0800dcae <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800dcae:	b480      	push	{r7}
 800dcb0:	b083      	sub	sp, #12
 800dcb2:	af00      	add	r7, sp, #0
 800dcb4:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800dcb6:	687b      	ldr	r3, [r7, #4]
 800dcb8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800dcbc:	b2db      	uxtb	r3, r3
 800dcbe:	2b04      	cmp	r3, #4
 800dcc0:	d106      	bne.n	800dcd0 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800dcc2:	687b      	ldr	r3, [r7, #4]
 800dcc4:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800dcc8:	b2da      	uxtb	r2, r3
 800dcca:	687b      	ldr	r3, [r7, #4]
 800dccc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800dcd0:	2300      	movs	r3, #0
}
 800dcd2:	4618      	mov	r0, r3
 800dcd4:	370c      	adds	r7, #12
 800dcd6:	46bd      	mov	sp, r7
 800dcd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcdc:	4770      	bx	lr

0800dcde <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800dcde:	b580      	push	{r7, lr}
 800dce0:	b082      	sub	sp, #8
 800dce2:	af00      	add	r7, sp, #0
 800dce4:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800dce6:	687b      	ldr	r3, [r7, #4]
 800dce8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800dcec:	b2db      	uxtb	r3, r3
 800dcee:	2b03      	cmp	r3, #3
 800dcf0:	d110      	bne.n	800dd14 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800dcf2:	687b      	ldr	r3, [r7, #4]
 800dcf4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800dcf8:	2b00      	cmp	r3, #0
 800dcfa:	d00b      	beq.n	800dd14 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800dcfc:	687b      	ldr	r3, [r7, #4]
 800dcfe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800dd02:	69db      	ldr	r3, [r3, #28]
 800dd04:	2b00      	cmp	r3, #0
 800dd06:	d005      	beq.n	800dd14 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800dd08:	687b      	ldr	r3, [r7, #4]
 800dd0a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800dd0e:	69db      	ldr	r3, [r3, #28]
 800dd10:	6878      	ldr	r0, [r7, #4]
 800dd12:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800dd14:	2300      	movs	r3, #0
}
 800dd16:	4618      	mov	r0, r3
 800dd18:	3708      	adds	r7, #8
 800dd1a:	46bd      	mov	sp, r7
 800dd1c:	bd80      	pop	{r7, pc}

0800dd1e <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800dd1e:	b580      	push	{r7, lr}
 800dd20:	b082      	sub	sp, #8
 800dd22:	af00      	add	r7, sp, #0
 800dd24:	6078      	str	r0, [r7, #4]
 800dd26:	460b      	mov	r3, r1
 800dd28:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800dd2a:	687b      	ldr	r3, [r7, #4]
 800dd2c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800dd30:	687b      	ldr	r3, [r7, #4]
 800dd32:	32ae      	adds	r2, #174	; 0xae
 800dd34:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dd38:	2b00      	cmp	r3, #0
 800dd3a:	d101      	bne.n	800dd40 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800dd3c:	2303      	movs	r3, #3
 800dd3e:	e01c      	b.n	800dd7a <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800dd40:	687b      	ldr	r3, [r7, #4]
 800dd42:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800dd46:	b2db      	uxtb	r3, r3
 800dd48:	2b03      	cmp	r3, #3
 800dd4a:	d115      	bne.n	800dd78 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800dd4c:	687b      	ldr	r3, [r7, #4]
 800dd4e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800dd52:	687b      	ldr	r3, [r7, #4]
 800dd54:	32ae      	adds	r2, #174	; 0xae
 800dd56:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dd5a:	6a1b      	ldr	r3, [r3, #32]
 800dd5c:	2b00      	cmp	r3, #0
 800dd5e:	d00b      	beq.n	800dd78 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800dd60:	687b      	ldr	r3, [r7, #4]
 800dd62:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800dd66:	687b      	ldr	r3, [r7, #4]
 800dd68:	32ae      	adds	r2, #174	; 0xae
 800dd6a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dd6e:	6a1b      	ldr	r3, [r3, #32]
 800dd70:	78fa      	ldrb	r2, [r7, #3]
 800dd72:	4611      	mov	r1, r2
 800dd74:	6878      	ldr	r0, [r7, #4]
 800dd76:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800dd78:	2300      	movs	r3, #0
}
 800dd7a:	4618      	mov	r0, r3
 800dd7c:	3708      	adds	r7, #8
 800dd7e:	46bd      	mov	sp, r7
 800dd80:	bd80      	pop	{r7, pc}

0800dd82 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800dd82:	b580      	push	{r7, lr}
 800dd84:	b082      	sub	sp, #8
 800dd86:	af00      	add	r7, sp, #0
 800dd88:	6078      	str	r0, [r7, #4]
 800dd8a:	460b      	mov	r3, r1
 800dd8c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800dd8e:	687b      	ldr	r3, [r7, #4]
 800dd90:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800dd94:	687b      	ldr	r3, [r7, #4]
 800dd96:	32ae      	adds	r2, #174	; 0xae
 800dd98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dd9c:	2b00      	cmp	r3, #0
 800dd9e:	d101      	bne.n	800dda4 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800dda0:	2303      	movs	r3, #3
 800dda2:	e01c      	b.n	800ddde <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800dda4:	687b      	ldr	r3, [r7, #4]
 800dda6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ddaa:	b2db      	uxtb	r3, r3
 800ddac:	2b03      	cmp	r3, #3
 800ddae:	d115      	bne.n	800dddc <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800ddb0:	687b      	ldr	r3, [r7, #4]
 800ddb2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ddb6:	687b      	ldr	r3, [r7, #4]
 800ddb8:	32ae      	adds	r2, #174	; 0xae
 800ddba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ddbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ddc0:	2b00      	cmp	r3, #0
 800ddc2:	d00b      	beq.n	800dddc <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800ddc4:	687b      	ldr	r3, [r7, #4]
 800ddc6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ddca:	687b      	ldr	r3, [r7, #4]
 800ddcc:	32ae      	adds	r2, #174	; 0xae
 800ddce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ddd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ddd4:	78fa      	ldrb	r2, [r7, #3]
 800ddd6:	4611      	mov	r1, r2
 800ddd8:	6878      	ldr	r0, [r7, #4]
 800ddda:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800dddc:	2300      	movs	r3, #0
}
 800ddde:	4618      	mov	r0, r3
 800dde0:	3708      	adds	r7, #8
 800dde2:	46bd      	mov	sp, r7
 800dde4:	bd80      	pop	{r7, pc}

0800dde6 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800dde6:	b480      	push	{r7}
 800dde8:	b083      	sub	sp, #12
 800ddea:	af00      	add	r7, sp, #0
 800ddec:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800ddee:	2300      	movs	r3, #0
}
 800ddf0:	4618      	mov	r0, r3
 800ddf2:	370c      	adds	r7, #12
 800ddf4:	46bd      	mov	sp, r7
 800ddf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddfa:	4770      	bx	lr

0800ddfc <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800ddfc:	b580      	push	{r7, lr}
 800ddfe:	b084      	sub	sp, #16
 800de00:	af00      	add	r7, sp, #0
 800de02:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800de04:	2300      	movs	r3, #0
 800de06:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800de08:	687b      	ldr	r3, [r7, #4]
 800de0a:	2201      	movs	r2, #1
 800de0c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800de10:	687b      	ldr	r3, [r7, #4]
 800de12:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800de16:	2b00      	cmp	r3, #0
 800de18:	d00e      	beq.n	800de38 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800de1a:	687b      	ldr	r3, [r7, #4]
 800de1c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800de20:	685b      	ldr	r3, [r3, #4]
 800de22:	687a      	ldr	r2, [r7, #4]
 800de24:	6852      	ldr	r2, [r2, #4]
 800de26:	b2d2      	uxtb	r2, r2
 800de28:	4611      	mov	r1, r2
 800de2a:	6878      	ldr	r0, [r7, #4]
 800de2c:	4798      	blx	r3
 800de2e:	4603      	mov	r3, r0
 800de30:	2b00      	cmp	r3, #0
 800de32:	d001      	beq.n	800de38 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800de34:	2303      	movs	r3, #3
 800de36:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800de38:	7bfb      	ldrb	r3, [r7, #15]
}
 800de3a:	4618      	mov	r0, r3
 800de3c:	3710      	adds	r7, #16
 800de3e:	46bd      	mov	sp, r7
 800de40:	bd80      	pop	{r7, pc}

0800de42 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800de42:	b480      	push	{r7}
 800de44:	b083      	sub	sp, #12
 800de46:	af00      	add	r7, sp, #0
 800de48:	6078      	str	r0, [r7, #4]
 800de4a:	460b      	mov	r3, r1
 800de4c:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800de4e:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800de50:	4618      	mov	r0, r3
 800de52:	370c      	adds	r7, #12
 800de54:	46bd      	mov	sp, r7
 800de56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de5a:	4770      	bx	lr

0800de5c <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800de5c:	b480      	push	{r7}
 800de5e:	b083      	sub	sp, #12
 800de60:	af00      	add	r7, sp, #0
 800de62:	6078      	str	r0, [r7, #4]
 800de64:	460b      	mov	r3, r1
 800de66:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800de68:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800de6a:	4618      	mov	r0, r3
 800de6c:	370c      	adds	r7, #12
 800de6e:	46bd      	mov	sp, r7
 800de70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de74:	4770      	bx	lr

0800de76 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800de76:	b580      	push	{r7, lr}
 800de78:	b086      	sub	sp, #24
 800de7a:	af00      	add	r7, sp, #0
 800de7c:	6078      	str	r0, [r7, #4]
 800de7e:	460b      	mov	r3, r1
 800de80:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800de82:	687b      	ldr	r3, [r7, #4]
 800de84:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800de86:	687b      	ldr	r3, [r7, #4]
 800de88:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800de8a:	2300      	movs	r3, #0
 800de8c:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800de8e:	68fb      	ldr	r3, [r7, #12]
 800de90:	885b      	ldrh	r3, [r3, #2]
 800de92:	b29a      	uxth	r2, r3
 800de94:	68fb      	ldr	r3, [r7, #12]
 800de96:	781b      	ldrb	r3, [r3, #0]
 800de98:	b29b      	uxth	r3, r3
 800de9a:	429a      	cmp	r2, r3
 800de9c:	d920      	bls.n	800dee0 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 800de9e:	68fb      	ldr	r3, [r7, #12]
 800dea0:	781b      	ldrb	r3, [r3, #0]
 800dea2:	b29b      	uxth	r3, r3
 800dea4:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800dea6:	e013      	b.n	800ded0 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800dea8:	f107 030a 	add.w	r3, r7, #10
 800deac:	4619      	mov	r1, r3
 800deae:	6978      	ldr	r0, [r7, #20]
 800deb0:	f000 f81b 	bl	800deea <USBD_GetNextDesc>
 800deb4:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800deb6:	697b      	ldr	r3, [r7, #20]
 800deb8:	785b      	ldrb	r3, [r3, #1]
 800deba:	2b05      	cmp	r3, #5
 800debc:	d108      	bne.n	800ded0 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800debe:	697b      	ldr	r3, [r7, #20]
 800dec0:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800dec2:	693b      	ldr	r3, [r7, #16]
 800dec4:	789b      	ldrb	r3, [r3, #2]
 800dec6:	78fa      	ldrb	r2, [r7, #3]
 800dec8:	429a      	cmp	r2, r3
 800deca:	d008      	beq.n	800dede <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800decc:	2300      	movs	r3, #0
 800dece:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800ded0:	68fb      	ldr	r3, [r7, #12]
 800ded2:	885b      	ldrh	r3, [r3, #2]
 800ded4:	b29a      	uxth	r2, r3
 800ded6:	897b      	ldrh	r3, [r7, #10]
 800ded8:	429a      	cmp	r2, r3
 800deda:	d8e5      	bhi.n	800dea8 <USBD_GetEpDesc+0x32>
 800dedc:	e000      	b.n	800dee0 <USBD_GetEpDesc+0x6a>
          break;
 800dede:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800dee0:	693b      	ldr	r3, [r7, #16]
}
 800dee2:	4618      	mov	r0, r3
 800dee4:	3718      	adds	r7, #24
 800dee6:	46bd      	mov	sp, r7
 800dee8:	bd80      	pop	{r7, pc}

0800deea <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800deea:	b480      	push	{r7}
 800deec:	b085      	sub	sp, #20
 800deee:	af00      	add	r7, sp, #0
 800def0:	6078      	str	r0, [r7, #4]
 800def2:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800def4:	687b      	ldr	r3, [r7, #4]
 800def6:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800def8:	683b      	ldr	r3, [r7, #0]
 800defa:	881a      	ldrh	r2, [r3, #0]
 800defc:	68fb      	ldr	r3, [r7, #12]
 800defe:	781b      	ldrb	r3, [r3, #0]
 800df00:	b29b      	uxth	r3, r3
 800df02:	4413      	add	r3, r2
 800df04:	b29a      	uxth	r2, r3
 800df06:	683b      	ldr	r3, [r7, #0]
 800df08:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800df0a:	68fb      	ldr	r3, [r7, #12]
 800df0c:	781b      	ldrb	r3, [r3, #0]
 800df0e:	461a      	mov	r2, r3
 800df10:	687b      	ldr	r3, [r7, #4]
 800df12:	4413      	add	r3, r2
 800df14:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800df16:	68fb      	ldr	r3, [r7, #12]
}
 800df18:	4618      	mov	r0, r3
 800df1a:	3714      	adds	r7, #20
 800df1c:	46bd      	mov	sp, r7
 800df1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df22:	4770      	bx	lr

0800df24 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800df24:	b480      	push	{r7}
 800df26:	b087      	sub	sp, #28
 800df28:	af00      	add	r7, sp, #0
 800df2a:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800df2c:	687b      	ldr	r3, [r7, #4]
 800df2e:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800df30:	697b      	ldr	r3, [r7, #20]
 800df32:	781b      	ldrb	r3, [r3, #0]
 800df34:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800df36:	697b      	ldr	r3, [r7, #20]
 800df38:	3301      	adds	r3, #1
 800df3a:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800df3c:	697b      	ldr	r3, [r7, #20]
 800df3e:	781b      	ldrb	r3, [r3, #0]
 800df40:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800df42:	8a3b      	ldrh	r3, [r7, #16]
 800df44:	021b      	lsls	r3, r3, #8
 800df46:	b21a      	sxth	r2, r3
 800df48:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800df4c:	4313      	orrs	r3, r2
 800df4e:	b21b      	sxth	r3, r3
 800df50:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800df52:	89fb      	ldrh	r3, [r7, #14]
}
 800df54:	4618      	mov	r0, r3
 800df56:	371c      	adds	r7, #28
 800df58:	46bd      	mov	sp, r7
 800df5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df5e:	4770      	bx	lr

0800df60 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800df60:	b580      	push	{r7, lr}
 800df62:	b084      	sub	sp, #16
 800df64:	af00      	add	r7, sp, #0
 800df66:	6078      	str	r0, [r7, #4]
 800df68:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800df6a:	2300      	movs	r3, #0
 800df6c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800df6e:	683b      	ldr	r3, [r7, #0]
 800df70:	781b      	ldrb	r3, [r3, #0]
 800df72:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800df76:	2b40      	cmp	r3, #64	; 0x40
 800df78:	d005      	beq.n	800df86 <USBD_StdDevReq+0x26>
 800df7a:	2b40      	cmp	r3, #64	; 0x40
 800df7c:	d857      	bhi.n	800e02e <USBD_StdDevReq+0xce>
 800df7e:	2b00      	cmp	r3, #0
 800df80:	d00f      	beq.n	800dfa2 <USBD_StdDevReq+0x42>
 800df82:	2b20      	cmp	r3, #32
 800df84:	d153      	bne.n	800e02e <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800df86:	687b      	ldr	r3, [r7, #4]
 800df88:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800df8c:	687b      	ldr	r3, [r7, #4]
 800df8e:	32ae      	adds	r2, #174	; 0xae
 800df90:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800df94:	689b      	ldr	r3, [r3, #8]
 800df96:	6839      	ldr	r1, [r7, #0]
 800df98:	6878      	ldr	r0, [r7, #4]
 800df9a:	4798      	blx	r3
 800df9c:	4603      	mov	r3, r0
 800df9e:	73fb      	strb	r3, [r7, #15]
      break;
 800dfa0:	e04a      	b.n	800e038 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800dfa2:	683b      	ldr	r3, [r7, #0]
 800dfa4:	785b      	ldrb	r3, [r3, #1]
 800dfa6:	2b09      	cmp	r3, #9
 800dfa8:	d83b      	bhi.n	800e022 <USBD_StdDevReq+0xc2>
 800dfaa:	a201      	add	r2, pc, #4	; (adr r2, 800dfb0 <USBD_StdDevReq+0x50>)
 800dfac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dfb0:	0800e005 	.word	0x0800e005
 800dfb4:	0800e019 	.word	0x0800e019
 800dfb8:	0800e023 	.word	0x0800e023
 800dfbc:	0800e00f 	.word	0x0800e00f
 800dfc0:	0800e023 	.word	0x0800e023
 800dfc4:	0800dfe3 	.word	0x0800dfe3
 800dfc8:	0800dfd9 	.word	0x0800dfd9
 800dfcc:	0800e023 	.word	0x0800e023
 800dfd0:	0800dffb 	.word	0x0800dffb
 800dfd4:	0800dfed 	.word	0x0800dfed
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800dfd8:	6839      	ldr	r1, [r7, #0]
 800dfda:	6878      	ldr	r0, [r7, #4]
 800dfdc:	f000 fa3c 	bl	800e458 <USBD_GetDescriptor>
          break;
 800dfe0:	e024      	b.n	800e02c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800dfe2:	6839      	ldr	r1, [r7, #0]
 800dfe4:	6878      	ldr	r0, [r7, #4]
 800dfe6:	f000 fbcb 	bl	800e780 <USBD_SetAddress>
          break;
 800dfea:	e01f      	b.n	800e02c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800dfec:	6839      	ldr	r1, [r7, #0]
 800dfee:	6878      	ldr	r0, [r7, #4]
 800dff0:	f000 fc0a 	bl	800e808 <USBD_SetConfig>
 800dff4:	4603      	mov	r3, r0
 800dff6:	73fb      	strb	r3, [r7, #15]
          break;
 800dff8:	e018      	b.n	800e02c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800dffa:	6839      	ldr	r1, [r7, #0]
 800dffc:	6878      	ldr	r0, [r7, #4]
 800dffe:	f000 fcad 	bl	800e95c <USBD_GetConfig>
          break;
 800e002:	e013      	b.n	800e02c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800e004:	6839      	ldr	r1, [r7, #0]
 800e006:	6878      	ldr	r0, [r7, #4]
 800e008:	f000 fcde 	bl	800e9c8 <USBD_GetStatus>
          break;
 800e00c:	e00e      	b.n	800e02c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800e00e:	6839      	ldr	r1, [r7, #0]
 800e010:	6878      	ldr	r0, [r7, #4]
 800e012:	f000 fd0d 	bl	800ea30 <USBD_SetFeature>
          break;
 800e016:	e009      	b.n	800e02c <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800e018:	6839      	ldr	r1, [r7, #0]
 800e01a:	6878      	ldr	r0, [r7, #4]
 800e01c:	f000 fd31 	bl	800ea82 <USBD_ClrFeature>
          break;
 800e020:	e004      	b.n	800e02c <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800e022:	6839      	ldr	r1, [r7, #0]
 800e024:	6878      	ldr	r0, [r7, #4]
 800e026:	f000 fd88 	bl	800eb3a <USBD_CtlError>
          break;
 800e02a:	bf00      	nop
      }
      break;
 800e02c:	e004      	b.n	800e038 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800e02e:	6839      	ldr	r1, [r7, #0]
 800e030:	6878      	ldr	r0, [r7, #4]
 800e032:	f000 fd82 	bl	800eb3a <USBD_CtlError>
      break;
 800e036:	bf00      	nop
  }

  return ret;
 800e038:	7bfb      	ldrb	r3, [r7, #15]
}
 800e03a:	4618      	mov	r0, r3
 800e03c:	3710      	adds	r7, #16
 800e03e:	46bd      	mov	sp, r7
 800e040:	bd80      	pop	{r7, pc}
 800e042:	bf00      	nop

0800e044 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e044:	b580      	push	{r7, lr}
 800e046:	b084      	sub	sp, #16
 800e048:	af00      	add	r7, sp, #0
 800e04a:	6078      	str	r0, [r7, #4]
 800e04c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800e04e:	2300      	movs	r3, #0
 800e050:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800e052:	683b      	ldr	r3, [r7, #0]
 800e054:	781b      	ldrb	r3, [r3, #0]
 800e056:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800e05a:	2b40      	cmp	r3, #64	; 0x40
 800e05c:	d005      	beq.n	800e06a <USBD_StdItfReq+0x26>
 800e05e:	2b40      	cmp	r3, #64	; 0x40
 800e060:	d852      	bhi.n	800e108 <USBD_StdItfReq+0xc4>
 800e062:	2b00      	cmp	r3, #0
 800e064:	d001      	beq.n	800e06a <USBD_StdItfReq+0x26>
 800e066:	2b20      	cmp	r3, #32
 800e068:	d14e      	bne.n	800e108 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800e06a:	687b      	ldr	r3, [r7, #4]
 800e06c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e070:	b2db      	uxtb	r3, r3
 800e072:	3b01      	subs	r3, #1
 800e074:	2b02      	cmp	r3, #2
 800e076:	d840      	bhi.n	800e0fa <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800e078:	683b      	ldr	r3, [r7, #0]
 800e07a:	889b      	ldrh	r3, [r3, #4]
 800e07c:	b2db      	uxtb	r3, r3
 800e07e:	2b01      	cmp	r3, #1
 800e080:	d836      	bhi.n	800e0f0 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800e082:	683b      	ldr	r3, [r7, #0]
 800e084:	889b      	ldrh	r3, [r3, #4]
 800e086:	b2db      	uxtb	r3, r3
 800e088:	4619      	mov	r1, r3
 800e08a:	6878      	ldr	r0, [r7, #4]
 800e08c:	f7ff fed9 	bl	800de42 <USBD_CoreFindIF>
 800e090:	4603      	mov	r3, r0
 800e092:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800e094:	7bbb      	ldrb	r3, [r7, #14]
 800e096:	2bff      	cmp	r3, #255	; 0xff
 800e098:	d01d      	beq.n	800e0d6 <USBD_StdItfReq+0x92>
 800e09a:	7bbb      	ldrb	r3, [r7, #14]
 800e09c:	2b00      	cmp	r3, #0
 800e09e:	d11a      	bne.n	800e0d6 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800e0a0:	7bba      	ldrb	r2, [r7, #14]
 800e0a2:	687b      	ldr	r3, [r7, #4]
 800e0a4:	32ae      	adds	r2, #174	; 0xae
 800e0a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e0aa:	689b      	ldr	r3, [r3, #8]
 800e0ac:	2b00      	cmp	r3, #0
 800e0ae:	d00f      	beq.n	800e0d0 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800e0b0:	7bba      	ldrb	r2, [r7, #14]
 800e0b2:	687b      	ldr	r3, [r7, #4]
 800e0b4:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800e0b8:	7bba      	ldrb	r2, [r7, #14]
 800e0ba:	687b      	ldr	r3, [r7, #4]
 800e0bc:	32ae      	adds	r2, #174	; 0xae
 800e0be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e0c2:	689b      	ldr	r3, [r3, #8]
 800e0c4:	6839      	ldr	r1, [r7, #0]
 800e0c6:	6878      	ldr	r0, [r7, #4]
 800e0c8:	4798      	blx	r3
 800e0ca:	4603      	mov	r3, r0
 800e0cc:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800e0ce:	e004      	b.n	800e0da <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800e0d0:	2303      	movs	r3, #3
 800e0d2:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800e0d4:	e001      	b.n	800e0da <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800e0d6:	2303      	movs	r3, #3
 800e0d8:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800e0da:	683b      	ldr	r3, [r7, #0]
 800e0dc:	88db      	ldrh	r3, [r3, #6]
 800e0de:	2b00      	cmp	r3, #0
 800e0e0:	d110      	bne.n	800e104 <USBD_StdItfReq+0xc0>
 800e0e2:	7bfb      	ldrb	r3, [r7, #15]
 800e0e4:	2b00      	cmp	r3, #0
 800e0e6:	d10d      	bne.n	800e104 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800e0e8:	6878      	ldr	r0, [r7, #4]
 800e0ea:	f000 fdf1 	bl	800ecd0 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800e0ee:	e009      	b.n	800e104 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800e0f0:	6839      	ldr	r1, [r7, #0]
 800e0f2:	6878      	ldr	r0, [r7, #4]
 800e0f4:	f000 fd21 	bl	800eb3a <USBD_CtlError>
          break;
 800e0f8:	e004      	b.n	800e104 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800e0fa:	6839      	ldr	r1, [r7, #0]
 800e0fc:	6878      	ldr	r0, [r7, #4]
 800e0fe:	f000 fd1c 	bl	800eb3a <USBD_CtlError>
          break;
 800e102:	e000      	b.n	800e106 <USBD_StdItfReq+0xc2>
          break;
 800e104:	bf00      	nop
      }
      break;
 800e106:	e004      	b.n	800e112 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800e108:	6839      	ldr	r1, [r7, #0]
 800e10a:	6878      	ldr	r0, [r7, #4]
 800e10c:	f000 fd15 	bl	800eb3a <USBD_CtlError>
      break;
 800e110:	bf00      	nop
  }

  return ret;
 800e112:	7bfb      	ldrb	r3, [r7, #15]
}
 800e114:	4618      	mov	r0, r3
 800e116:	3710      	adds	r7, #16
 800e118:	46bd      	mov	sp, r7
 800e11a:	bd80      	pop	{r7, pc}

0800e11c <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e11c:	b580      	push	{r7, lr}
 800e11e:	b084      	sub	sp, #16
 800e120:	af00      	add	r7, sp, #0
 800e122:	6078      	str	r0, [r7, #4]
 800e124:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800e126:	2300      	movs	r3, #0
 800e128:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800e12a:	683b      	ldr	r3, [r7, #0]
 800e12c:	889b      	ldrh	r3, [r3, #4]
 800e12e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800e130:	683b      	ldr	r3, [r7, #0]
 800e132:	781b      	ldrb	r3, [r3, #0]
 800e134:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800e138:	2b40      	cmp	r3, #64	; 0x40
 800e13a:	d007      	beq.n	800e14c <USBD_StdEPReq+0x30>
 800e13c:	2b40      	cmp	r3, #64	; 0x40
 800e13e:	f200 817f 	bhi.w	800e440 <USBD_StdEPReq+0x324>
 800e142:	2b00      	cmp	r3, #0
 800e144:	d02a      	beq.n	800e19c <USBD_StdEPReq+0x80>
 800e146:	2b20      	cmp	r3, #32
 800e148:	f040 817a 	bne.w	800e440 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800e14c:	7bbb      	ldrb	r3, [r7, #14]
 800e14e:	4619      	mov	r1, r3
 800e150:	6878      	ldr	r0, [r7, #4]
 800e152:	f7ff fe83 	bl	800de5c <USBD_CoreFindEP>
 800e156:	4603      	mov	r3, r0
 800e158:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800e15a:	7b7b      	ldrb	r3, [r7, #13]
 800e15c:	2bff      	cmp	r3, #255	; 0xff
 800e15e:	f000 8174 	beq.w	800e44a <USBD_StdEPReq+0x32e>
 800e162:	7b7b      	ldrb	r3, [r7, #13]
 800e164:	2b00      	cmp	r3, #0
 800e166:	f040 8170 	bne.w	800e44a <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800e16a:	7b7a      	ldrb	r2, [r7, #13]
 800e16c:	687b      	ldr	r3, [r7, #4]
 800e16e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800e172:	7b7a      	ldrb	r2, [r7, #13]
 800e174:	687b      	ldr	r3, [r7, #4]
 800e176:	32ae      	adds	r2, #174	; 0xae
 800e178:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e17c:	689b      	ldr	r3, [r3, #8]
 800e17e:	2b00      	cmp	r3, #0
 800e180:	f000 8163 	beq.w	800e44a <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800e184:	7b7a      	ldrb	r2, [r7, #13]
 800e186:	687b      	ldr	r3, [r7, #4]
 800e188:	32ae      	adds	r2, #174	; 0xae
 800e18a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e18e:	689b      	ldr	r3, [r3, #8]
 800e190:	6839      	ldr	r1, [r7, #0]
 800e192:	6878      	ldr	r0, [r7, #4]
 800e194:	4798      	blx	r3
 800e196:	4603      	mov	r3, r0
 800e198:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800e19a:	e156      	b.n	800e44a <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800e19c:	683b      	ldr	r3, [r7, #0]
 800e19e:	785b      	ldrb	r3, [r3, #1]
 800e1a0:	2b03      	cmp	r3, #3
 800e1a2:	d008      	beq.n	800e1b6 <USBD_StdEPReq+0x9a>
 800e1a4:	2b03      	cmp	r3, #3
 800e1a6:	f300 8145 	bgt.w	800e434 <USBD_StdEPReq+0x318>
 800e1aa:	2b00      	cmp	r3, #0
 800e1ac:	f000 809b 	beq.w	800e2e6 <USBD_StdEPReq+0x1ca>
 800e1b0:	2b01      	cmp	r3, #1
 800e1b2:	d03c      	beq.n	800e22e <USBD_StdEPReq+0x112>
 800e1b4:	e13e      	b.n	800e434 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800e1b6:	687b      	ldr	r3, [r7, #4]
 800e1b8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e1bc:	b2db      	uxtb	r3, r3
 800e1be:	2b02      	cmp	r3, #2
 800e1c0:	d002      	beq.n	800e1c8 <USBD_StdEPReq+0xac>
 800e1c2:	2b03      	cmp	r3, #3
 800e1c4:	d016      	beq.n	800e1f4 <USBD_StdEPReq+0xd8>
 800e1c6:	e02c      	b.n	800e222 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800e1c8:	7bbb      	ldrb	r3, [r7, #14]
 800e1ca:	2b00      	cmp	r3, #0
 800e1cc:	d00d      	beq.n	800e1ea <USBD_StdEPReq+0xce>
 800e1ce:	7bbb      	ldrb	r3, [r7, #14]
 800e1d0:	2b80      	cmp	r3, #128	; 0x80
 800e1d2:	d00a      	beq.n	800e1ea <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800e1d4:	7bbb      	ldrb	r3, [r7, #14]
 800e1d6:	4619      	mov	r1, r3
 800e1d8:	6878      	ldr	r0, [r7, #4]
 800e1da:	f001 f9bf 	bl	800f55c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800e1de:	2180      	movs	r1, #128	; 0x80
 800e1e0:	6878      	ldr	r0, [r7, #4]
 800e1e2:	f001 f9bb 	bl	800f55c <USBD_LL_StallEP>
 800e1e6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800e1e8:	e020      	b.n	800e22c <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800e1ea:	6839      	ldr	r1, [r7, #0]
 800e1ec:	6878      	ldr	r0, [r7, #4]
 800e1ee:	f000 fca4 	bl	800eb3a <USBD_CtlError>
              break;
 800e1f2:	e01b      	b.n	800e22c <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800e1f4:	683b      	ldr	r3, [r7, #0]
 800e1f6:	885b      	ldrh	r3, [r3, #2]
 800e1f8:	2b00      	cmp	r3, #0
 800e1fa:	d10e      	bne.n	800e21a <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800e1fc:	7bbb      	ldrb	r3, [r7, #14]
 800e1fe:	2b00      	cmp	r3, #0
 800e200:	d00b      	beq.n	800e21a <USBD_StdEPReq+0xfe>
 800e202:	7bbb      	ldrb	r3, [r7, #14]
 800e204:	2b80      	cmp	r3, #128	; 0x80
 800e206:	d008      	beq.n	800e21a <USBD_StdEPReq+0xfe>
 800e208:	683b      	ldr	r3, [r7, #0]
 800e20a:	88db      	ldrh	r3, [r3, #6]
 800e20c:	2b00      	cmp	r3, #0
 800e20e:	d104      	bne.n	800e21a <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800e210:	7bbb      	ldrb	r3, [r7, #14]
 800e212:	4619      	mov	r1, r3
 800e214:	6878      	ldr	r0, [r7, #4]
 800e216:	f001 f9a1 	bl	800f55c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800e21a:	6878      	ldr	r0, [r7, #4]
 800e21c:	f000 fd58 	bl	800ecd0 <USBD_CtlSendStatus>

              break;
 800e220:	e004      	b.n	800e22c <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800e222:	6839      	ldr	r1, [r7, #0]
 800e224:	6878      	ldr	r0, [r7, #4]
 800e226:	f000 fc88 	bl	800eb3a <USBD_CtlError>
              break;
 800e22a:	bf00      	nop
          }
          break;
 800e22c:	e107      	b.n	800e43e <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800e22e:	687b      	ldr	r3, [r7, #4]
 800e230:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e234:	b2db      	uxtb	r3, r3
 800e236:	2b02      	cmp	r3, #2
 800e238:	d002      	beq.n	800e240 <USBD_StdEPReq+0x124>
 800e23a:	2b03      	cmp	r3, #3
 800e23c:	d016      	beq.n	800e26c <USBD_StdEPReq+0x150>
 800e23e:	e04b      	b.n	800e2d8 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800e240:	7bbb      	ldrb	r3, [r7, #14]
 800e242:	2b00      	cmp	r3, #0
 800e244:	d00d      	beq.n	800e262 <USBD_StdEPReq+0x146>
 800e246:	7bbb      	ldrb	r3, [r7, #14]
 800e248:	2b80      	cmp	r3, #128	; 0x80
 800e24a:	d00a      	beq.n	800e262 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800e24c:	7bbb      	ldrb	r3, [r7, #14]
 800e24e:	4619      	mov	r1, r3
 800e250:	6878      	ldr	r0, [r7, #4]
 800e252:	f001 f983 	bl	800f55c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800e256:	2180      	movs	r1, #128	; 0x80
 800e258:	6878      	ldr	r0, [r7, #4]
 800e25a:	f001 f97f 	bl	800f55c <USBD_LL_StallEP>
 800e25e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800e260:	e040      	b.n	800e2e4 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800e262:	6839      	ldr	r1, [r7, #0]
 800e264:	6878      	ldr	r0, [r7, #4]
 800e266:	f000 fc68 	bl	800eb3a <USBD_CtlError>
              break;
 800e26a:	e03b      	b.n	800e2e4 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800e26c:	683b      	ldr	r3, [r7, #0]
 800e26e:	885b      	ldrh	r3, [r3, #2]
 800e270:	2b00      	cmp	r3, #0
 800e272:	d136      	bne.n	800e2e2 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800e274:	7bbb      	ldrb	r3, [r7, #14]
 800e276:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e27a:	2b00      	cmp	r3, #0
 800e27c:	d004      	beq.n	800e288 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800e27e:	7bbb      	ldrb	r3, [r7, #14]
 800e280:	4619      	mov	r1, r3
 800e282:	6878      	ldr	r0, [r7, #4]
 800e284:	f001 f989 	bl	800f59a <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800e288:	6878      	ldr	r0, [r7, #4]
 800e28a:	f000 fd21 	bl	800ecd0 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800e28e:	7bbb      	ldrb	r3, [r7, #14]
 800e290:	4619      	mov	r1, r3
 800e292:	6878      	ldr	r0, [r7, #4]
 800e294:	f7ff fde2 	bl	800de5c <USBD_CoreFindEP>
 800e298:	4603      	mov	r3, r0
 800e29a:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800e29c:	7b7b      	ldrb	r3, [r7, #13]
 800e29e:	2bff      	cmp	r3, #255	; 0xff
 800e2a0:	d01f      	beq.n	800e2e2 <USBD_StdEPReq+0x1c6>
 800e2a2:	7b7b      	ldrb	r3, [r7, #13]
 800e2a4:	2b00      	cmp	r3, #0
 800e2a6:	d11c      	bne.n	800e2e2 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800e2a8:	7b7a      	ldrb	r2, [r7, #13]
 800e2aa:	687b      	ldr	r3, [r7, #4]
 800e2ac:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800e2b0:	7b7a      	ldrb	r2, [r7, #13]
 800e2b2:	687b      	ldr	r3, [r7, #4]
 800e2b4:	32ae      	adds	r2, #174	; 0xae
 800e2b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e2ba:	689b      	ldr	r3, [r3, #8]
 800e2bc:	2b00      	cmp	r3, #0
 800e2be:	d010      	beq.n	800e2e2 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800e2c0:	7b7a      	ldrb	r2, [r7, #13]
 800e2c2:	687b      	ldr	r3, [r7, #4]
 800e2c4:	32ae      	adds	r2, #174	; 0xae
 800e2c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e2ca:	689b      	ldr	r3, [r3, #8]
 800e2cc:	6839      	ldr	r1, [r7, #0]
 800e2ce:	6878      	ldr	r0, [r7, #4]
 800e2d0:	4798      	blx	r3
 800e2d2:	4603      	mov	r3, r0
 800e2d4:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800e2d6:	e004      	b.n	800e2e2 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800e2d8:	6839      	ldr	r1, [r7, #0]
 800e2da:	6878      	ldr	r0, [r7, #4]
 800e2dc:	f000 fc2d 	bl	800eb3a <USBD_CtlError>
              break;
 800e2e0:	e000      	b.n	800e2e4 <USBD_StdEPReq+0x1c8>
              break;
 800e2e2:	bf00      	nop
          }
          break;
 800e2e4:	e0ab      	b.n	800e43e <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800e2e6:	687b      	ldr	r3, [r7, #4]
 800e2e8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e2ec:	b2db      	uxtb	r3, r3
 800e2ee:	2b02      	cmp	r3, #2
 800e2f0:	d002      	beq.n	800e2f8 <USBD_StdEPReq+0x1dc>
 800e2f2:	2b03      	cmp	r3, #3
 800e2f4:	d032      	beq.n	800e35c <USBD_StdEPReq+0x240>
 800e2f6:	e097      	b.n	800e428 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800e2f8:	7bbb      	ldrb	r3, [r7, #14]
 800e2fa:	2b00      	cmp	r3, #0
 800e2fc:	d007      	beq.n	800e30e <USBD_StdEPReq+0x1f2>
 800e2fe:	7bbb      	ldrb	r3, [r7, #14]
 800e300:	2b80      	cmp	r3, #128	; 0x80
 800e302:	d004      	beq.n	800e30e <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800e304:	6839      	ldr	r1, [r7, #0]
 800e306:	6878      	ldr	r0, [r7, #4]
 800e308:	f000 fc17 	bl	800eb3a <USBD_CtlError>
                break;
 800e30c:	e091      	b.n	800e432 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800e30e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800e312:	2b00      	cmp	r3, #0
 800e314:	da0b      	bge.n	800e32e <USBD_StdEPReq+0x212>
 800e316:	7bbb      	ldrb	r3, [r7, #14]
 800e318:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800e31c:	4613      	mov	r3, r2
 800e31e:	009b      	lsls	r3, r3, #2
 800e320:	4413      	add	r3, r2
 800e322:	009b      	lsls	r3, r3, #2
 800e324:	3310      	adds	r3, #16
 800e326:	687a      	ldr	r2, [r7, #4]
 800e328:	4413      	add	r3, r2
 800e32a:	3304      	adds	r3, #4
 800e32c:	e00b      	b.n	800e346 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800e32e:	7bbb      	ldrb	r3, [r7, #14]
 800e330:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800e334:	4613      	mov	r3, r2
 800e336:	009b      	lsls	r3, r3, #2
 800e338:	4413      	add	r3, r2
 800e33a:	009b      	lsls	r3, r3, #2
 800e33c:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800e340:	687a      	ldr	r2, [r7, #4]
 800e342:	4413      	add	r3, r2
 800e344:	3304      	adds	r3, #4
 800e346:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800e348:	68bb      	ldr	r3, [r7, #8]
 800e34a:	2200      	movs	r2, #0
 800e34c:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800e34e:	68bb      	ldr	r3, [r7, #8]
 800e350:	2202      	movs	r2, #2
 800e352:	4619      	mov	r1, r3
 800e354:	6878      	ldr	r0, [r7, #4]
 800e356:	f000 fc61 	bl	800ec1c <USBD_CtlSendData>
              break;
 800e35a:	e06a      	b.n	800e432 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800e35c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800e360:	2b00      	cmp	r3, #0
 800e362:	da11      	bge.n	800e388 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800e364:	7bbb      	ldrb	r3, [r7, #14]
 800e366:	f003 020f 	and.w	r2, r3, #15
 800e36a:	6879      	ldr	r1, [r7, #4]
 800e36c:	4613      	mov	r3, r2
 800e36e:	009b      	lsls	r3, r3, #2
 800e370:	4413      	add	r3, r2
 800e372:	009b      	lsls	r3, r3, #2
 800e374:	440b      	add	r3, r1
 800e376:	3324      	adds	r3, #36	; 0x24
 800e378:	881b      	ldrh	r3, [r3, #0]
 800e37a:	2b00      	cmp	r3, #0
 800e37c:	d117      	bne.n	800e3ae <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800e37e:	6839      	ldr	r1, [r7, #0]
 800e380:	6878      	ldr	r0, [r7, #4]
 800e382:	f000 fbda 	bl	800eb3a <USBD_CtlError>
                  break;
 800e386:	e054      	b.n	800e432 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800e388:	7bbb      	ldrb	r3, [r7, #14]
 800e38a:	f003 020f 	and.w	r2, r3, #15
 800e38e:	6879      	ldr	r1, [r7, #4]
 800e390:	4613      	mov	r3, r2
 800e392:	009b      	lsls	r3, r3, #2
 800e394:	4413      	add	r3, r2
 800e396:	009b      	lsls	r3, r3, #2
 800e398:	440b      	add	r3, r1
 800e39a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800e39e:	881b      	ldrh	r3, [r3, #0]
 800e3a0:	2b00      	cmp	r3, #0
 800e3a2:	d104      	bne.n	800e3ae <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800e3a4:	6839      	ldr	r1, [r7, #0]
 800e3a6:	6878      	ldr	r0, [r7, #4]
 800e3a8:	f000 fbc7 	bl	800eb3a <USBD_CtlError>
                  break;
 800e3ac:	e041      	b.n	800e432 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800e3ae:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800e3b2:	2b00      	cmp	r3, #0
 800e3b4:	da0b      	bge.n	800e3ce <USBD_StdEPReq+0x2b2>
 800e3b6:	7bbb      	ldrb	r3, [r7, #14]
 800e3b8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800e3bc:	4613      	mov	r3, r2
 800e3be:	009b      	lsls	r3, r3, #2
 800e3c0:	4413      	add	r3, r2
 800e3c2:	009b      	lsls	r3, r3, #2
 800e3c4:	3310      	adds	r3, #16
 800e3c6:	687a      	ldr	r2, [r7, #4]
 800e3c8:	4413      	add	r3, r2
 800e3ca:	3304      	adds	r3, #4
 800e3cc:	e00b      	b.n	800e3e6 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800e3ce:	7bbb      	ldrb	r3, [r7, #14]
 800e3d0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800e3d4:	4613      	mov	r3, r2
 800e3d6:	009b      	lsls	r3, r3, #2
 800e3d8:	4413      	add	r3, r2
 800e3da:	009b      	lsls	r3, r3, #2
 800e3dc:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800e3e0:	687a      	ldr	r2, [r7, #4]
 800e3e2:	4413      	add	r3, r2
 800e3e4:	3304      	adds	r3, #4
 800e3e6:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800e3e8:	7bbb      	ldrb	r3, [r7, #14]
 800e3ea:	2b00      	cmp	r3, #0
 800e3ec:	d002      	beq.n	800e3f4 <USBD_StdEPReq+0x2d8>
 800e3ee:	7bbb      	ldrb	r3, [r7, #14]
 800e3f0:	2b80      	cmp	r3, #128	; 0x80
 800e3f2:	d103      	bne.n	800e3fc <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800e3f4:	68bb      	ldr	r3, [r7, #8]
 800e3f6:	2200      	movs	r2, #0
 800e3f8:	601a      	str	r2, [r3, #0]
 800e3fa:	e00e      	b.n	800e41a <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800e3fc:	7bbb      	ldrb	r3, [r7, #14]
 800e3fe:	4619      	mov	r1, r3
 800e400:	6878      	ldr	r0, [r7, #4]
 800e402:	f001 f8e9 	bl	800f5d8 <USBD_LL_IsStallEP>
 800e406:	4603      	mov	r3, r0
 800e408:	2b00      	cmp	r3, #0
 800e40a:	d003      	beq.n	800e414 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800e40c:	68bb      	ldr	r3, [r7, #8]
 800e40e:	2201      	movs	r2, #1
 800e410:	601a      	str	r2, [r3, #0]
 800e412:	e002      	b.n	800e41a <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800e414:	68bb      	ldr	r3, [r7, #8]
 800e416:	2200      	movs	r2, #0
 800e418:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800e41a:	68bb      	ldr	r3, [r7, #8]
 800e41c:	2202      	movs	r2, #2
 800e41e:	4619      	mov	r1, r3
 800e420:	6878      	ldr	r0, [r7, #4]
 800e422:	f000 fbfb 	bl	800ec1c <USBD_CtlSendData>
              break;
 800e426:	e004      	b.n	800e432 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800e428:	6839      	ldr	r1, [r7, #0]
 800e42a:	6878      	ldr	r0, [r7, #4]
 800e42c:	f000 fb85 	bl	800eb3a <USBD_CtlError>
              break;
 800e430:	bf00      	nop
          }
          break;
 800e432:	e004      	b.n	800e43e <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800e434:	6839      	ldr	r1, [r7, #0]
 800e436:	6878      	ldr	r0, [r7, #4]
 800e438:	f000 fb7f 	bl	800eb3a <USBD_CtlError>
          break;
 800e43c:	bf00      	nop
      }
      break;
 800e43e:	e005      	b.n	800e44c <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800e440:	6839      	ldr	r1, [r7, #0]
 800e442:	6878      	ldr	r0, [r7, #4]
 800e444:	f000 fb79 	bl	800eb3a <USBD_CtlError>
      break;
 800e448:	e000      	b.n	800e44c <USBD_StdEPReq+0x330>
      break;
 800e44a:	bf00      	nop
  }

  return ret;
 800e44c:	7bfb      	ldrb	r3, [r7, #15]
}
 800e44e:	4618      	mov	r0, r3
 800e450:	3710      	adds	r7, #16
 800e452:	46bd      	mov	sp, r7
 800e454:	bd80      	pop	{r7, pc}
	...

0800e458 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e458:	b580      	push	{r7, lr}
 800e45a:	b084      	sub	sp, #16
 800e45c:	af00      	add	r7, sp, #0
 800e45e:	6078      	str	r0, [r7, #4]
 800e460:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800e462:	2300      	movs	r3, #0
 800e464:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800e466:	2300      	movs	r3, #0
 800e468:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800e46a:	2300      	movs	r3, #0
 800e46c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800e46e:	683b      	ldr	r3, [r7, #0]
 800e470:	885b      	ldrh	r3, [r3, #2]
 800e472:	0a1b      	lsrs	r3, r3, #8
 800e474:	b29b      	uxth	r3, r3
 800e476:	3b01      	subs	r3, #1
 800e478:	2b0e      	cmp	r3, #14
 800e47a:	f200 8152 	bhi.w	800e722 <USBD_GetDescriptor+0x2ca>
 800e47e:	a201      	add	r2, pc, #4	; (adr r2, 800e484 <USBD_GetDescriptor+0x2c>)
 800e480:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e484:	0800e4f5 	.word	0x0800e4f5
 800e488:	0800e50d 	.word	0x0800e50d
 800e48c:	0800e54d 	.word	0x0800e54d
 800e490:	0800e723 	.word	0x0800e723
 800e494:	0800e723 	.word	0x0800e723
 800e498:	0800e6c3 	.word	0x0800e6c3
 800e49c:	0800e6ef 	.word	0x0800e6ef
 800e4a0:	0800e723 	.word	0x0800e723
 800e4a4:	0800e723 	.word	0x0800e723
 800e4a8:	0800e723 	.word	0x0800e723
 800e4ac:	0800e723 	.word	0x0800e723
 800e4b0:	0800e723 	.word	0x0800e723
 800e4b4:	0800e723 	.word	0x0800e723
 800e4b8:	0800e723 	.word	0x0800e723
 800e4bc:	0800e4c1 	.word	0x0800e4c1
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800e4c0:	687b      	ldr	r3, [r7, #4]
 800e4c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e4c6:	69db      	ldr	r3, [r3, #28]
 800e4c8:	2b00      	cmp	r3, #0
 800e4ca:	d00b      	beq.n	800e4e4 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800e4cc:	687b      	ldr	r3, [r7, #4]
 800e4ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e4d2:	69db      	ldr	r3, [r3, #28]
 800e4d4:	687a      	ldr	r2, [r7, #4]
 800e4d6:	7c12      	ldrb	r2, [r2, #16]
 800e4d8:	f107 0108 	add.w	r1, r7, #8
 800e4dc:	4610      	mov	r0, r2
 800e4de:	4798      	blx	r3
 800e4e0:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800e4e2:	e126      	b.n	800e732 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800e4e4:	6839      	ldr	r1, [r7, #0]
 800e4e6:	6878      	ldr	r0, [r7, #4]
 800e4e8:	f000 fb27 	bl	800eb3a <USBD_CtlError>
        err++;
 800e4ec:	7afb      	ldrb	r3, [r7, #11]
 800e4ee:	3301      	adds	r3, #1
 800e4f0:	72fb      	strb	r3, [r7, #11]
      break;
 800e4f2:	e11e      	b.n	800e732 <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800e4f4:	687b      	ldr	r3, [r7, #4]
 800e4f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e4fa:	681b      	ldr	r3, [r3, #0]
 800e4fc:	687a      	ldr	r2, [r7, #4]
 800e4fe:	7c12      	ldrb	r2, [r2, #16]
 800e500:	f107 0108 	add.w	r1, r7, #8
 800e504:	4610      	mov	r0, r2
 800e506:	4798      	blx	r3
 800e508:	60f8      	str	r0, [r7, #12]
      break;
 800e50a:	e112      	b.n	800e732 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e50c:	687b      	ldr	r3, [r7, #4]
 800e50e:	7c1b      	ldrb	r3, [r3, #16]
 800e510:	2b00      	cmp	r3, #0
 800e512:	d10d      	bne.n	800e530 <USBD_GetDescriptor+0xd8>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800e514:	687b      	ldr	r3, [r7, #4]
 800e516:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e51a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e51c:	f107 0208 	add.w	r2, r7, #8
 800e520:	4610      	mov	r0, r2
 800e522:	4798      	blx	r3
 800e524:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800e526:	68fb      	ldr	r3, [r7, #12]
 800e528:	3301      	adds	r3, #1
 800e52a:	2202      	movs	r2, #2
 800e52c:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800e52e:	e100      	b.n	800e732 <USBD_GetDescriptor+0x2da>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800e530:	687b      	ldr	r3, [r7, #4]
 800e532:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e536:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e538:	f107 0208 	add.w	r2, r7, #8
 800e53c:	4610      	mov	r0, r2
 800e53e:	4798      	blx	r3
 800e540:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800e542:	68fb      	ldr	r3, [r7, #12]
 800e544:	3301      	adds	r3, #1
 800e546:	2202      	movs	r2, #2
 800e548:	701a      	strb	r2, [r3, #0]
      break;
 800e54a:	e0f2      	b.n	800e732 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800e54c:	683b      	ldr	r3, [r7, #0]
 800e54e:	885b      	ldrh	r3, [r3, #2]
 800e550:	b2db      	uxtb	r3, r3
 800e552:	2b05      	cmp	r3, #5
 800e554:	f200 80ac 	bhi.w	800e6b0 <USBD_GetDescriptor+0x258>
 800e558:	a201      	add	r2, pc, #4	; (adr r2, 800e560 <USBD_GetDescriptor+0x108>)
 800e55a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e55e:	bf00      	nop
 800e560:	0800e579 	.word	0x0800e579
 800e564:	0800e5ad 	.word	0x0800e5ad
 800e568:	0800e5e1 	.word	0x0800e5e1
 800e56c:	0800e615 	.word	0x0800e615
 800e570:	0800e649 	.word	0x0800e649
 800e574:	0800e67d 	.word	0x0800e67d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800e578:	687b      	ldr	r3, [r7, #4]
 800e57a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e57e:	685b      	ldr	r3, [r3, #4]
 800e580:	2b00      	cmp	r3, #0
 800e582:	d00b      	beq.n	800e59c <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800e584:	687b      	ldr	r3, [r7, #4]
 800e586:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e58a:	685b      	ldr	r3, [r3, #4]
 800e58c:	687a      	ldr	r2, [r7, #4]
 800e58e:	7c12      	ldrb	r2, [r2, #16]
 800e590:	f107 0108 	add.w	r1, r7, #8
 800e594:	4610      	mov	r0, r2
 800e596:	4798      	blx	r3
 800e598:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e59a:	e091      	b.n	800e6c0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800e59c:	6839      	ldr	r1, [r7, #0]
 800e59e:	6878      	ldr	r0, [r7, #4]
 800e5a0:	f000 facb 	bl	800eb3a <USBD_CtlError>
            err++;
 800e5a4:	7afb      	ldrb	r3, [r7, #11]
 800e5a6:	3301      	adds	r3, #1
 800e5a8:	72fb      	strb	r3, [r7, #11]
          break;
 800e5aa:	e089      	b.n	800e6c0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800e5ac:	687b      	ldr	r3, [r7, #4]
 800e5ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e5b2:	689b      	ldr	r3, [r3, #8]
 800e5b4:	2b00      	cmp	r3, #0
 800e5b6:	d00b      	beq.n	800e5d0 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800e5b8:	687b      	ldr	r3, [r7, #4]
 800e5ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e5be:	689b      	ldr	r3, [r3, #8]
 800e5c0:	687a      	ldr	r2, [r7, #4]
 800e5c2:	7c12      	ldrb	r2, [r2, #16]
 800e5c4:	f107 0108 	add.w	r1, r7, #8
 800e5c8:	4610      	mov	r0, r2
 800e5ca:	4798      	blx	r3
 800e5cc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e5ce:	e077      	b.n	800e6c0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800e5d0:	6839      	ldr	r1, [r7, #0]
 800e5d2:	6878      	ldr	r0, [r7, #4]
 800e5d4:	f000 fab1 	bl	800eb3a <USBD_CtlError>
            err++;
 800e5d8:	7afb      	ldrb	r3, [r7, #11]
 800e5da:	3301      	adds	r3, #1
 800e5dc:	72fb      	strb	r3, [r7, #11]
          break;
 800e5de:	e06f      	b.n	800e6c0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800e5e0:	687b      	ldr	r3, [r7, #4]
 800e5e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e5e6:	68db      	ldr	r3, [r3, #12]
 800e5e8:	2b00      	cmp	r3, #0
 800e5ea:	d00b      	beq.n	800e604 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800e5ec:	687b      	ldr	r3, [r7, #4]
 800e5ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e5f2:	68db      	ldr	r3, [r3, #12]
 800e5f4:	687a      	ldr	r2, [r7, #4]
 800e5f6:	7c12      	ldrb	r2, [r2, #16]
 800e5f8:	f107 0108 	add.w	r1, r7, #8
 800e5fc:	4610      	mov	r0, r2
 800e5fe:	4798      	blx	r3
 800e600:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e602:	e05d      	b.n	800e6c0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800e604:	6839      	ldr	r1, [r7, #0]
 800e606:	6878      	ldr	r0, [r7, #4]
 800e608:	f000 fa97 	bl	800eb3a <USBD_CtlError>
            err++;
 800e60c:	7afb      	ldrb	r3, [r7, #11]
 800e60e:	3301      	adds	r3, #1
 800e610:	72fb      	strb	r3, [r7, #11]
          break;
 800e612:	e055      	b.n	800e6c0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800e614:	687b      	ldr	r3, [r7, #4]
 800e616:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e61a:	691b      	ldr	r3, [r3, #16]
 800e61c:	2b00      	cmp	r3, #0
 800e61e:	d00b      	beq.n	800e638 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800e620:	687b      	ldr	r3, [r7, #4]
 800e622:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e626:	691b      	ldr	r3, [r3, #16]
 800e628:	687a      	ldr	r2, [r7, #4]
 800e62a:	7c12      	ldrb	r2, [r2, #16]
 800e62c:	f107 0108 	add.w	r1, r7, #8
 800e630:	4610      	mov	r0, r2
 800e632:	4798      	blx	r3
 800e634:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e636:	e043      	b.n	800e6c0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800e638:	6839      	ldr	r1, [r7, #0]
 800e63a:	6878      	ldr	r0, [r7, #4]
 800e63c:	f000 fa7d 	bl	800eb3a <USBD_CtlError>
            err++;
 800e640:	7afb      	ldrb	r3, [r7, #11]
 800e642:	3301      	adds	r3, #1
 800e644:	72fb      	strb	r3, [r7, #11]
          break;
 800e646:	e03b      	b.n	800e6c0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800e648:	687b      	ldr	r3, [r7, #4]
 800e64a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e64e:	695b      	ldr	r3, [r3, #20]
 800e650:	2b00      	cmp	r3, #0
 800e652:	d00b      	beq.n	800e66c <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800e654:	687b      	ldr	r3, [r7, #4]
 800e656:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e65a:	695b      	ldr	r3, [r3, #20]
 800e65c:	687a      	ldr	r2, [r7, #4]
 800e65e:	7c12      	ldrb	r2, [r2, #16]
 800e660:	f107 0108 	add.w	r1, r7, #8
 800e664:	4610      	mov	r0, r2
 800e666:	4798      	blx	r3
 800e668:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e66a:	e029      	b.n	800e6c0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800e66c:	6839      	ldr	r1, [r7, #0]
 800e66e:	6878      	ldr	r0, [r7, #4]
 800e670:	f000 fa63 	bl	800eb3a <USBD_CtlError>
            err++;
 800e674:	7afb      	ldrb	r3, [r7, #11]
 800e676:	3301      	adds	r3, #1
 800e678:	72fb      	strb	r3, [r7, #11]
          break;
 800e67a:	e021      	b.n	800e6c0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800e67c:	687b      	ldr	r3, [r7, #4]
 800e67e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e682:	699b      	ldr	r3, [r3, #24]
 800e684:	2b00      	cmp	r3, #0
 800e686:	d00b      	beq.n	800e6a0 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800e688:	687b      	ldr	r3, [r7, #4]
 800e68a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e68e:	699b      	ldr	r3, [r3, #24]
 800e690:	687a      	ldr	r2, [r7, #4]
 800e692:	7c12      	ldrb	r2, [r2, #16]
 800e694:	f107 0108 	add.w	r1, r7, #8
 800e698:	4610      	mov	r0, r2
 800e69a:	4798      	blx	r3
 800e69c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e69e:	e00f      	b.n	800e6c0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800e6a0:	6839      	ldr	r1, [r7, #0]
 800e6a2:	6878      	ldr	r0, [r7, #4]
 800e6a4:	f000 fa49 	bl	800eb3a <USBD_CtlError>
            err++;
 800e6a8:	7afb      	ldrb	r3, [r7, #11]
 800e6aa:	3301      	adds	r3, #1
 800e6ac:	72fb      	strb	r3, [r7, #11]
          break;
 800e6ae:	e007      	b.n	800e6c0 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800e6b0:	6839      	ldr	r1, [r7, #0]
 800e6b2:	6878      	ldr	r0, [r7, #4]
 800e6b4:	f000 fa41 	bl	800eb3a <USBD_CtlError>
          err++;
 800e6b8:	7afb      	ldrb	r3, [r7, #11]
 800e6ba:	3301      	adds	r3, #1
 800e6bc:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800e6be:	bf00      	nop
      }
      break;
 800e6c0:	e037      	b.n	800e732 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e6c2:	687b      	ldr	r3, [r7, #4]
 800e6c4:	7c1b      	ldrb	r3, [r3, #16]
 800e6c6:	2b00      	cmp	r3, #0
 800e6c8:	d109      	bne.n	800e6de <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800e6ca:	687b      	ldr	r3, [r7, #4]
 800e6cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e6d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e6d2:	f107 0208 	add.w	r2, r7, #8
 800e6d6:	4610      	mov	r0, r2
 800e6d8:	4798      	blx	r3
 800e6da:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800e6dc:	e029      	b.n	800e732 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800e6de:	6839      	ldr	r1, [r7, #0]
 800e6e0:	6878      	ldr	r0, [r7, #4]
 800e6e2:	f000 fa2a 	bl	800eb3a <USBD_CtlError>
        err++;
 800e6e6:	7afb      	ldrb	r3, [r7, #11]
 800e6e8:	3301      	adds	r3, #1
 800e6ea:	72fb      	strb	r3, [r7, #11]
      break;
 800e6ec:	e021      	b.n	800e732 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e6ee:	687b      	ldr	r3, [r7, #4]
 800e6f0:	7c1b      	ldrb	r3, [r3, #16]
 800e6f2:	2b00      	cmp	r3, #0
 800e6f4:	d10d      	bne.n	800e712 <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800e6f6:	687b      	ldr	r3, [r7, #4]
 800e6f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e6fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e6fe:	f107 0208 	add.w	r2, r7, #8
 800e702:	4610      	mov	r0, r2
 800e704:	4798      	blx	r3
 800e706:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800e708:	68fb      	ldr	r3, [r7, #12]
 800e70a:	3301      	adds	r3, #1
 800e70c:	2207      	movs	r2, #7
 800e70e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800e710:	e00f      	b.n	800e732 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800e712:	6839      	ldr	r1, [r7, #0]
 800e714:	6878      	ldr	r0, [r7, #4]
 800e716:	f000 fa10 	bl	800eb3a <USBD_CtlError>
        err++;
 800e71a:	7afb      	ldrb	r3, [r7, #11]
 800e71c:	3301      	adds	r3, #1
 800e71e:	72fb      	strb	r3, [r7, #11]
      break;
 800e720:	e007      	b.n	800e732 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800e722:	6839      	ldr	r1, [r7, #0]
 800e724:	6878      	ldr	r0, [r7, #4]
 800e726:	f000 fa08 	bl	800eb3a <USBD_CtlError>
      err++;
 800e72a:	7afb      	ldrb	r3, [r7, #11]
 800e72c:	3301      	adds	r3, #1
 800e72e:	72fb      	strb	r3, [r7, #11]
      break;
 800e730:	bf00      	nop
  }

  if (err != 0U)
 800e732:	7afb      	ldrb	r3, [r7, #11]
 800e734:	2b00      	cmp	r3, #0
 800e736:	d11e      	bne.n	800e776 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800e738:	683b      	ldr	r3, [r7, #0]
 800e73a:	88db      	ldrh	r3, [r3, #6]
 800e73c:	2b00      	cmp	r3, #0
 800e73e:	d016      	beq.n	800e76e <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800e740:	893b      	ldrh	r3, [r7, #8]
 800e742:	2b00      	cmp	r3, #0
 800e744:	d00e      	beq.n	800e764 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800e746:	683b      	ldr	r3, [r7, #0]
 800e748:	88da      	ldrh	r2, [r3, #6]
 800e74a:	893b      	ldrh	r3, [r7, #8]
 800e74c:	4293      	cmp	r3, r2
 800e74e:	bf28      	it	cs
 800e750:	4613      	movcs	r3, r2
 800e752:	b29b      	uxth	r3, r3
 800e754:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800e756:	893b      	ldrh	r3, [r7, #8]
 800e758:	461a      	mov	r2, r3
 800e75a:	68f9      	ldr	r1, [r7, #12]
 800e75c:	6878      	ldr	r0, [r7, #4]
 800e75e:	f000 fa5d 	bl	800ec1c <USBD_CtlSendData>
 800e762:	e009      	b.n	800e778 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800e764:	6839      	ldr	r1, [r7, #0]
 800e766:	6878      	ldr	r0, [r7, #4]
 800e768:	f000 f9e7 	bl	800eb3a <USBD_CtlError>
 800e76c:	e004      	b.n	800e778 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800e76e:	6878      	ldr	r0, [r7, #4]
 800e770:	f000 faae 	bl	800ecd0 <USBD_CtlSendStatus>
 800e774:	e000      	b.n	800e778 <USBD_GetDescriptor+0x320>
    return;
 800e776:	bf00      	nop
  }
}
 800e778:	3710      	adds	r7, #16
 800e77a:	46bd      	mov	sp, r7
 800e77c:	bd80      	pop	{r7, pc}
 800e77e:	bf00      	nop

0800e780 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e780:	b580      	push	{r7, lr}
 800e782:	b084      	sub	sp, #16
 800e784:	af00      	add	r7, sp, #0
 800e786:	6078      	str	r0, [r7, #4]
 800e788:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800e78a:	683b      	ldr	r3, [r7, #0]
 800e78c:	889b      	ldrh	r3, [r3, #4]
 800e78e:	2b00      	cmp	r3, #0
 800e790:	d131      	bne.n	800e7f6 <USBD_SetAddress+0x76>
 800e792:	683b      	ldr	r3, [r7, #0]
 800e794:	88db      	ldrh	r3, [r3, #6]
 800e796:	2b00      	cmp	r3, #0
 800e798:	d12d      	bne.n	800e7f6 <USBD_SetAddress+0x76>
 800e79a:	683b      	ldr	r3, [r7, #0]
 800e79c:	885b      	ldrh	r3, [r3, #2]
 800e79e:	2b7f      	cmp	r3, #127	; 0x7f
 800e7a0:	d829      	bhi.n	800e7f6 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800e7a2:	683b      	ldr	r3, [r7, #0]
 800e7a4:	885b      	ldrh	r3, [r3, #2]
 800e7a6:	b2db      	uxtb	r3, r3
 800e7a8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e7ac:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e7ae:	687b      	ldr	r3, [r7, #4]
 800e7b0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e7b4:	b2db      	uxtb	r3, r3
 800e7b6:	2b03      	cmp	r3, #3
 800e7b8:	d104      	bne.n	800e7c4 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800e7ba:	6839      	ldr	r1, [r7, #0]
 800e7bc:	6878      	ldr	r0, [r7, #4]
 800e7be:	f000 f9bc 	bl	800eb3a <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e7c2:	e01d      	b.n	800e800 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800e7c4:	687b      	ldr	r3, [r7, #4]
 800e7c6:	7bfa      	ldrb	r2, [r7, #15]
 800e7c8:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800e7cc:	7bfb      	ldrb	r3, [r7, #15]
 800e7ce:	4619      	mov	r1, r3
 800e7d0:	6878      	ldr	r0, [r7, #4]
 800e7d2:	f000 ff2d 	bl	800f630 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800e7d6:	6878      	ldr	r0, [r7, #4]
 800e7d8:	f000 fa7a 	bl	800ecd0 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800e7dc:	7bfb      	ldrb	r3, [r7, #15]
 800e7de:	2b00      	cmp	r3, #0
 800e7e0:	d004      	beq.n	800e7ec <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800e7e2:	687b      	ldr	r3, [r7, #4]
 800e7e4:	2202      	movs	r2, #2
 800e7e6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e7ea:	e009      	b.n	800e800 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800e7ec:	687b      	ldr	r3, [r7, #4]
 800e7ee:	2201      	movs	r2, #1
 800e7f0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e7f4:	e004      	b.n	800e800 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800e7f6:	6839      	ldr	r1, [r7, #0]
 800e7f8:	6878      	ldr	r0, [r7, #4]
 800e7fa:	f000 f99e 	bl	800eb3a <USBD_CtlError>
  }
}
 800e7fe:	bf00      	nop
 800e800:	bf00      	nop
 800e802:	3710      	adds	r7, #16
 800e804:	46bd      	mov	sp, r7
 800e806:	bd80      	pop	{r7, pc}

0800e808 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e808:	b580      	push	{r7, lr}
 800e80a:	b084      	sub	sp, #16
 800e80c:	af00      	add	r7, sp, #0
 800e80e:	6078      	str	r0, [r7, #4]
 800e810:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800e812:	2300      	movs	r3, #0
 800e814:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800e816:	683b      	ldr	r3, [r7, #0]
 800e818:	885b      	ldrh	r3, [r3, #2]
 800e81a:	b2da      	uxtb	r2, r3
 800e81c:	4b4e      	ldr	r3, [pc, #312]	; (800e958 <USBD_SetConfig+0x150>)
 800e81e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800e820:	4b4d      	ldr	r3, [pc, #308]	; (800e958 <USBD_SetConfig+0x150>)
 800e822:	781b      	ldrb	r3, [r3, #0]
 800e824:	2b01      	cmp	r3, #1
 800e826:	d905      	bls.n	800e834 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800e828:	6839      	ldr	r1, [r7, #0]
 800e82a:	6878      	ldr	r0, [r7, #4]
 800e82c:	f000 f985 	bl	800eb3a <USBD_CtlError>
    return USBD_FAIL;
 800e830:	2303      	movs	r3, #3
 800e832:	e08c      	b.n	800e94e <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800e834:	687b      	ldr	r3, [r7, #4]
 800e836:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e83a:	b2db      	uxtb	r3, r3
 800e83c:	2b02      	cmp	r3, #2
 800e83e:	d002      	beq.n	800e846 <USBD_SetConfig+0x3e>
 800e840:	2b03      	cmp	r3, #3
 800e842:	d029      	beq.n	800e898 <USBD_SetConfig+0x90>
 800e844:	e075      	b.n	800e932 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800e846:	4b44      	ldr	r3, [pc, #272]	; (800e958 <USBD_SetConfig+0x150>)
 800e848:	781b      	ldrb	r3, [r3, #0]
 800e84a:	2b00      	cmp	r3, #0
 800e84c:	d020      	beq.n	800e890 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800e84e:	4b42      	ldr	r3, [pc, #264]	; (800e958 <USBD_SetConfig+0x150>)
 800e850:	781b      	ldrb	r3, [r3, #0]
 800e852:	461a      	mov	r2, r3
 800e854:	687b      	ldr	r3, [r7, #4]
 800e856:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800e858:	4b3f      	ldr	r3, [pc, #252]	; (800e958 <USBD_SetConfig+0x150>)
 800e85a:	781b      	ldrb	r3, [r3, #0]
 800e85c:	4619      	mov	r1, r3
 800e85e:	6878      	ldr	r0, [r7, #4]
 800e860:	f7fe ffbd 	bl	800d7de <USBD_SetClassConfig>
 800e864:	4603      	mov	r3, r0
 800e866:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800e868:	7bfb      	ldrb	r3, [r7, #15]
 800e86a:	2b00      	cmp	r3, #0
 800e86c:	d008      	beq.n	800e880 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800e86e:	6839      	ldr	r1, [r7, #0]
 800e870:	6878      	ldr	r0, [r7, #4]
 800e872:	f000 f962 	bl	800eb3a <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800e876:	687b      	ldr	r3, [r7, #4]
 800e878:	2202      	movs	r2, #2
 800e87a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800e87e:	e065      	b.n	800e94c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800e880:	6878      	ldr	r0, [r7, #4]
 800e882:	f000 fa25 	bl	800ecd0 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800e886:	687b      	ldr	r3, [r7, #4]
 800e888:	2203      	movs	r2, #3
 800e88a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800e88e:	e05d      	b.n	800e94c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800e890:	6878      	ldr	r0, [r7, #4]
 800e892:	f000 fa1d 	bl	800ecd0 <USBD_CtlSendStatus>
      break;
 800e896:	e059      	b.n	800e94c <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800e898:	4b2f      	ldr	r3, [pc, #188]	; (800e958 <USBD_SetConfig+0x150>)
 800e89a:	781b      	ldrb	r3, [r3, #0]
 800e89c:	2b00      	cmp	r3, #0
 800e89e:	d112      	bne.n	800e8c6 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800e8a0:	687b      	ldr	r3, [r7, #4]
 800e8a2:	2202      	movs	r2, #2
 800e8a4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800e8a8:	4b2b      	ldr	r3, [pc, #172]	; (800e958 <USBD_SetConfig+0x150>)
 800e8aa:	781b      	ldrb	r3, [r3, #0]
 800e8ac:	461a      	mov	r2, r3
 800e8ae:	687b      	ldr	r3, [r7, #4]
 800e8b0:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800e8b2:	4b29      	ldr	r3, [pc, #164]	; (800e958 <USBD_SetConfig+0x150>)
 800e8b4:	781b      	ldrb	r3, [r3, #0]
 800e8b6:	4619      	mov	r1, r3
 800e8b8:	6878      	ldr	r0, [r7, #4]
 800e8ba:	f7fe ffac 	bl	800d816 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800e8be:	6878      	ldr	r0, [r7, #4]
 800e8c0:	f000 fa06 	bl	800ecd0 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800e8c4:	e042      	b.n	800e94c <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800e8c6:	4b24      	ldr	r3, [pc, #144]	; (800e958 <USBD_SetConfig+0x150>)
 800e8c8:	781b      	ldrb	r3, [r3, #0]
 800e8ca:	461a      	mov	r2, r3
 800e8cc:	687b      	ldr	r3, [r7, #4]
 800e8ce:	685b      	ldr	r3, [r3, #4]
 800e8d0:	429a      	cmp	r2, r3
 800e8d2:	d02a      	beq.n	800e92a <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800e8d4:	687b      	ldr	r3, [r7, #4]
 800e8d6:	685b      	ldr	r3, [r3, #4]
 800e8d8:	b2db      	uxtb	r3, r3
 800e8da:	4619      	mov	r1, r3
 800e8dc:	6878      	ldr	r0, [r7, #4]
 800e8de:	f7fe ff9a 	bl	800d816 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800e8e2:	4b1d      	ldr	r3, [pc, #116]	; (800e958 <USBD_SetConfig+0x150>)
 800e8e4:	781b      	ldrb	r3, [r3, #0]
 800e8e6:	461a      	mov	r2, r3
 800e8e8:	687b      	ldr	r3, [r7, #4]
 800e8ea:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800e8ec:	4b1a      	ldr	r3, [pc, #104]	; (800e958 <USBD_SetConfig+0x150>)
 800e8ee:	781b      	ldrb	r3, [r3, #0]
 800e8f0:	4619      	mov	r1, r3
 800e8f2:	6878      	ldr	r0, [r7, #4]
 800e8f4:	f7fe ff73 	bl	800d7de <USBD_SetClassConfig>
 800e8f8:	4603      	mov	r3, r0
 800e8fa:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800e8fc:	7bfb      	ldrb	r3, [r7, #15]
 800e8fe:	2b00      	cmp	r3, #0
 800e900:	d00f      	beq.n	800e922 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800e902:	6839      	ldr	r1, [r7, #0]
 800e904:	6878      	ldr	r0, [r7, #4]
 800e906:	f000 f918 	bl	800eb3a <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800e90a:	687b      	ldr	r3, [r7, #4]
 800e90c:	685b      	ldr	r3, [r3, #4]
 800e90e:	b2db      	uxtb	r3, r3
 800e910:	4619      	mov	r1, r3
 800e912:	6878      	ldr	r0, [r7, #4]
 800e914:	f7fe ff7f 	bl	800d816 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800e918:	687b      	ldr	r3, [r7, #4]
 800e91a:	2202      	movs	r2, #2
 800e91c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800e920:	e014      	b.n	800e94c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800e922:	6878      	ldr	r0, [r7, #4]
 800e924:	f000 f9d4 	bl	800ecd0 <USBD_CtlSendStatus>
      break;
 800e928:	e010      	b.n	800e94c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800e92a:	6878      	ldr	r0, [r7, #4]
 800e92c:	f000 f9d0 	bl	800ecd0 <USBD_CtlSendStatus>
      break;
 800e930:	e00c      	b.n	800e94c <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800e932:	6839      	ldr	r1, [r7, #0]
 800e934:	6878      	ldr	r0, [r7, #4]
 800e936:	f000 f900 	bl	800eb3a <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800e93a:	4b07      	ldr	r3, [pc, #28]	; (800e958 <USBD_SetConfig+0x150>)
 800e93c:	781b      	ldrb	r3, [r3, #0]
 800e93e:	4619      	mov	r1, r3
 800e940:	6878      	ldr	r0, [r7, #4]
 800e942:	f7fe ff68 	bl	800d816 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800e946:	2303      	movs	r3, #3
 800e948:	73fb      	strb	r3, [r7, #15]
      break;
 800e94a:	bf00      	nop
  }

  return ret;
 800e94c:	7bfb      	ldrb	r3, [r7, #15]
}
 800e94e:	4618      	mov	r0, r3
 800e950:	3710      	adds	r7, #16
 800e952:	46bd      	mov	sp, r7
 800e954:	bd80      	pop	{r7, pc}
 800e956:	bf00      	nop
 800e958:	200007c8 	.word	0x200007c8

0800e95c <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e95c:	b580      	push	{r7, lr}
 800e95e:	b082      	sub	sp, #8
 800e960:	af00      	add	r7, sp, #0
 800e962:	6078      	str	r0, [r7, #4]
 800e964:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800e966:	683b      	ldr	r3, [r7, #0]
 800e968:	88db      	ldrh	r3, [r3, #6]
 800e96a:	2b01      	cmp	r3, #1
 800e96c:	d004      	beq.n	800e978 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800e96e:	6839      	ldr	r1, [r7, #0]
 800e970:	6878      	ldr	r0, [r7, #4]
 800e972:	f000 f8e2 	bl	800eb3a <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800e976:	e023      	b.n	800e9c0 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800e978:	687b      	ldr	r3, [r7, #4]
 800e97a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e97e:	b2db      	uxtb	r3, r3
 800e980:	2b02      	cmp	r3, #2
 800e982:	dc02      	bgt.n	800e98a <USBD_GetConfig+0x2e>
 800e984:	2b00      	cmp	r3, #0
 800e986:	dc03      	bgt.n	800e990 <USBD_GetConfig+0x34>
 800e988:	e015      	b.n	800e9b6 <USBD_GetConfig+0x5a>
 800e98a:	2b03      	cmp	r3, #3
 800e98c:	d00b      	beq.n	800e9a6 <USBD_GetConfig+0x4a>
 800e98e:	e012      	b.n	800e9b6 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800e990:	687b      	ldr	r3, [r7, #4]
 800e992:	2200      	movs	r2, #0
 800e994:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800e996:	687b      	ldr	r3, [r7, #4]
 800e998:	3308      	adds	r3, #8
 800e99a:	2201      	movs	r2, #1
 800e99c:	4619      	mov	r1, r3
 800e99e:	6878      	ldr	r0, [r7, #4]
 800e9a0:	f000 f93c 	bl	800ec1c <USBD_CtlSendData>
        break;
 800e9a4:	e00c      	b.n	800e9c0 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800e9a6:	687b      	ldr	r3, [r7, #4]
 800e9a8:	3304      	adds	r3, #4
 800e9aa:	2201      	movs	r2, #1
 800e9ac:	4619      	mov	r1, r3
 800e9ae:	6878      	ldr	r0, [r7, #4]
 800e9b0:	f000 f934 	bl	800ec1c <USBD_CtlSendData>
        break;
 800e9b4:	e004      	b.n	800e9c0 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800e9b6:	6839      	ldr	r1, [r7, #0]
 800e9b8:	6878      	ldr	r0, [r7, #4]
 800e9ba:	f000 f8be 	bl	800eb3a <USBD_CtlError>
        break;
 800e9be:	bf00      	nop
}
 800e9c0:	bf00      	nop
 800e9c2:	3708      	adds	r7, #8
 800e9c4:	46bd      	mov	sp, r7
 800e9c6:	bd80      	pop	{r7, pc}

0800e9c8 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e9c8:	b580      	push	{r7, lr}
 800e9ca:	b082      	sub	sp, #8
 800e9cc:	af00      	add	r7, sp, #0
 800e9ce:	6078      	str	r0, [r7, #4]
 800e9d0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800e9d2:	687b      	ldr	r3, [r7, #4]
 800e9d4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e9d8:	b2db      	uxtb	r3, r3
 800e9da:	3b01      	subs	r3, #1
 800e9dc:	2b02      	cmp	r3, #2
 800e9de:	d81e      	bhi.n	800ea1e <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800e9e0:	683b      	ldr	r3, [r7, #0]
 800e9e2:	88db      	ldrh	r3, [r3, #6]
 800e9e4:	2b02      	cmp	r3, #2
 800e9e6:	d004      	beq.n	800e9f2 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800e9e8:	6839      	ldr	r1, [r7, #0]
 800e9ea:	6878      	ldr	r0, [r7, #4]
 800e9ec:	f000 f8a5 	bl	800eb3a <USBD_CtlError>
        break;
 800e9f0:	e01a      	b.n	800ea28 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800e9f2:	687b      	ldr	r3, [r7, #4]
 800e9f4:	2201      	movs	r2, #1
 800e9f6:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800e9f8:	687b      	ldr	r3, [r7, #4]
 800e9fa:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800e9fe:	2b00      	cmp	r3, #0
 800ea00:	d005      	beq.n	800ea0e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800ea02:	687b      	ldr	r3, [r7, #4]
 800ea04:	68db      	ldr	r3, [r3, #12]
 800ea06:	f043 0202 	orr.w	r2, r3, #2
 800ea0a:	687b      	ldr	r3, [r7, #4]
 800ea0c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800ea0e:	687b      	ldr	r3, [r7, #4]
 800ea10:	330c      	adds	r3, #12
 800ea12:	2202      	movs	r2, #2
 800ea14:	4619      	mov	r1, r3
 800ea16:	6878      	ldr	r0, [r7, #4]
 800ea18:	f000 f900 	bl	800ec1c <USBD_CtlSendData>
      break;
 800ea1c:	e004      	b.n	800ea28 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800ea1e:	6839      	ldr	r1, [r7, #0]
 800ea20:	6878      	ldr	r0, [r7, #4]
 800ea22:	f000 f88a 	bl	800eb3a <USBD_CtlError>
      break;
 800ea26:	bf00      	nop
  }
}
 800ea28:	bf00      	nop
 800ea2a:	3708      	adds	r7, #8
 800ea2c:	46bd      	mov	sp, r7
 800ea2e:	bd80      	pop	{r7, pc}

0800ea30 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ea30:	b580      	push	{r7, lr}
 800ea32:	b082      	sub	sp, #8
 800ea34:	af00      	add	r7, sp, #0
 800ea36:	6078      	str	r0, [r7, #4]
 800ea38:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800ea3a:	683b      	ldr	r3, [r7, #0]
 800ea3c:	885b      	ldrh	r3, [r3, #2]
 800ea3e:	2b01      	cmp	r3, #1
 800ea40:	d107      	bne.n	800ea52 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800ea42:	687b      	ldr	r3, [r7, #4]
 800ea44:	2201      	movs	r2, #1
 800ea46:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800ea4a:	6878      	ldr	r0, [r7, #4]
 800ea4c:	f000 f940 	bl	800ecd0 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800ea50:	e013      	b.n	800ea7a <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800ea52:	683b      	ldr	r3, [r7, #0]
 800ea54:	885b      	ldrh	r3, [r3, #2]
 800ea56:	2b02      	cmp	r3, #2
 800ea58:	d10b      	bne.n	800ea72 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 800ea5a:	683b      	ldr	r3, [r7, #0]
 800ea5c:	889b      	ldrh	r3, [r3, #4]
 800ea5e:	0a1b      	lsrs	r3, r3, #8
 800ea60:	b29b      	uxth	r3, r3
 800ea62:	b2da      	uxtb	r2, r3
 800ea64:	687b      	ldr	r3, [r7, #4]
 800ea66:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800ea6a:	6878      	ldr	r0, [r7, #4]
 800ea6c:	f000 f930 	bl	800ecd0 <USBD_CtlSendStatus>
}
 800ea70:	e003      	b.n	800ea7a <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800ea72:	6839      	ldr	r1, [r7, #0]
 800ea74:	6878      	ldr	r0, [r7, #4]
 800ea76:	f000 f860 	bl	800eb3a <USBD_CtlError>
}
 800ea7a:	bf00      	nop
 800ea7c:	3708      	adds	r7, #8
 800ea7e:	46bd      	mov	sp, r7
 800ea80:	bd80      	pop	{r7, pc}

0800ea82 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ea82:	b580      	push	{r7, lr}
 800ea84:	b082      	sub	sp, #8
 800ea86:	af00      	add	r7, sp, #0
 800ea88:	6078      	str	r0, [r7, #4]
 800ea8a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800ea8c:	687b      	ldr	r3, [r7, #4]
 800ea8e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ea92:	b2db      	uxtb	r3, r3
 800ea94:	3b01      	subs	r3, #1
 800ea96:	2b02      	cmp	r3, #2
 800ea98:	d80b      	bhi.n	800eab2 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800ea9a:	683b      	ldr	r3, [r7, #0]
 800ea9c:	885b      	ldrh	r3, [r3, #2]
 800ea9e:	2b01      	cmp	r3, #1
 800eaa0:	d10c      	bne.n	800eabc <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800eaa2:	687b      	ldr	r3, [r7, #4]
 800eaa4:	2200      	movs	r2, #0
 800eaa6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800eaaa:	6878      	ldr	r0, [r7, #4]
 800eaac:	f000 f910 	bl	800ecd0 <USBD_CtlSendStatus>
      }
      break;
 800eab0:	e004      	b.n	800eabc <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800eab2:	6839      	ldr	r1, [r7, #0]
 800eab4:	6878      	ldr	r0, [r7, #4]
 800eab6:	f000 f840 	bl	800eb3a <USBD_CtlError>
      break;
 800eaba:	e000      	b.n	800eabe <USBD_ClrFeature+0x3c>
      break;
 800eabc:	bf00      	nop
  }
}
 800eabe:	bf00      	nop
 800eac0:	3708      	adds	r7, #8
 800eac2:	46bd      	mov	sp, r7
 800eac4:	bd80      	pop	{r7, pc}

0800eac6 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800eac6:	b580      	push	{r7, lr}
 800eac8:	b084      	sub	sp, #16
 800eaca:	af00      	add	r7, sp, #0
 800eacc:	6078      	str	r0, [r7, #4]
 800eace:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800ead0:	683b      	ldr	r3, [r7, #0]
 800ead2:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800ead4:	68fb      	ldr	r3, [r7, #12]
 800ead6:	781a      	ldrb	r2, [r3, #0]
 800ead8:	687b      	ldr	r3, [r7, #4]
 800eada:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800eadc:	68fb      	ldr	r3, [r7, #12]
 800eade:	3301      	adds	r3, #1
 800eae0:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800eae2:	68fb      	ldr	r3, [r7, #12]
 800eae4:	781a      	ldrb	r2, [r3, #0]
 800eae6:	687b      	ldr	r3, [r7, #4]
 800eae8:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800eaea:	68fb      	ldr	r3, [r7, #12]
 800eaec:	3301      	adds	r3, #1
 800eaee:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800eaf0:	68f8      	ldr	r0, [r7, #12]
 800eaf2:	f7ff fa17 	bl	800df24 <SWAPBYTE>
 800eaf6:	4603      	mov	r3, r0
 800eaf8:	461a      	mov	r2, r3
 800eafa:	687b      	ldr	r3, [r7, #4]
 800eafc:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800eafe:	68fb      	ldr	r3, [r7, #12]
 800eb00:	3301      	adds	r3, #1
 800eb02:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800eb04:	68fb      	ldr	r3, [r7, #12]
 800eb06:	3301      	adds	r3, #1
 800eb08:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800eb0a:	68f8      	ldr	r0, [r7, #12]
 800eb0c:	f7ff fa0a 	bl	800df24 <SWAPBYTE>
 800eb10:	4603      	mov	r3, r0
 800eb12:	461a      	mov	r2, r3
 800eb14:	687b      	ldr	r3, [r7, #4]
 800eb16:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800eb18:	68fb      	ldr	r3, [r7, #12]
 800eb1a:	3301      	adds	r3, #1
 800eb1c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800eb1e:	68fb      	ldr	r3, [r7, #12]
 800eb20:	3301      	adds	r3, #1
 800eb22:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800eb24:	68f8      	ldr	r0, [r7, #12]
 800eb26:	f7ff f9fd 	bl	800df24 <SWAPBYTE>
 800eb2a:	4603      	mov	r3, r0
 800eb2c:	461a      	mov	r2, r3
 800eb2e:	687b      	ldr	r3, [r7, #4]
 800eb30:	80da      	strh	r2, [r3, #6]
}
 800eb32:	bf00      	nop
 800eb34:	3710      	adds	r7, #16
 800eb36:	46bd      	mov	sp, r7
 800eb38:	bd80      	pop	{r7, pc}

0800eb3a <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800eb3a:	b580      	push	{r7, lr}
 800eb3c:	b082      	sub	sp, #8
 800eb3e:	af00      	add	r7, sp, #0
 800eb40:	6078      	str	r0, [r7, #4]
 800eb42:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800eb44:	2180      	movs	r1, #128	; 0x80
 800eb46:	6878      	ldr	r0, [r7, #4]
 800eb48:	f000 fd08 	bl	800f55c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800eb4c:	2100      	movs	r1, #0
 800eb4e:	6878      	ldr	r0, [r7, #4]
 800eb50:	f000 fd04 	bl	800f55c <USBD_LL_StallEP>
}
 800eb54:	bf00      	nop
 800eb56:	3708      	adds	r7, #8
 800eb58:	46bd      	mov	sp, r7
 800eb5a:	bd80      	pop	{r7, pc}

0800eb5c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800eb5c:	b580      	push	{r7, lr}
 800eb5e:	b086      	sub	sp, #24
 800eb60:	af00      	add	r7, sp, #0
 800eb62:	60f8      	str	r0, [r7, #12]
 800eb64:	60b9      	str	r1, [r7, #8]
 800eb66:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800eb68:	2300      	movs	r3, #0
 800eb6a:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800eb6c:	68fb      	ldr	r3, [r7, #12]
 800eb6e:	2b00      	cmp	r3, #0
 800eb70:	d036      	beq.n	800ebe0 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800eb72:	68fb      	ldr	r3, [r7, #12]
 800eb74:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800eb76:	6938      	ldr	r0, [r7, #16]
 800eb78:	f000 f836 	bl	800ebe8 <USBD_GetLen>
 800eb7c:	4603      	mov	r3, r0
 800eb7e:	3301      	adds	r3, #1
 800eb80:	b29b      	uxth	r3, r3
 800eb82:	005b      	lsls	r3, r3, #1
 800eb84:	b29a      	uxth	r2, r3
 800eb86:	687b      	ldr	r3, [r7, #4]
 800eb88:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800eb8a:	7dfb      	ldrb	r3, [r7, #23]
 800eb8c:	68ba      	ldr	r2, [r7, #8]
 800eb8e:	4413      	add	r3, r2
 800eb90:	687a      	ldr	r2, [r7, #4]
 800eb92:	7812      	ldrb	r2, [r2, #0]
 800eb94:	701a      	strb	r2, [r3, #0]
  idx++;
 800eb96:	7dfb      	ldrb	r3, [r7, #23]
 800eb98:	3301      	adds	r3, #1
 800eb9a:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800eb9c:	7dfb      	ldrb	r3, [r7, #23]
 800eb9e:	68ba      	ldr	r2, [r7, #8]
 800eba0:	4413      	add	r3, r2
 800eba2:	2203      	movs	r2, #3
 800eba4:	701a      	strb	r2, [r3, #0]
  idx++;
 800eba6:	7dfb      	ldrb	r3, [r7, #23]
 800eba8:	3301      	adds	r3, #1
 800ebaa:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800ebac:	e013      	b.n	800ebd6 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800ebae:	7dfb      	ldrb	r3, [r7, #23]
 800ebb0:	68ba      	ldr	r2, [r7, #8]
 800ebb2:	4413      	add	r3, r2
 800ebb4:	693a      	ldr	r2, [r7, #16]
 800ebb6:	7812      	ldrb	r2, [r2, #0]
 800ebb8:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800ebba:	693b      	ldr	r3, [r7, #16]
 800ebbc:	3301      	adds	r3, #1
 800ebbe:	613b      	str	r3, [r7, #16]
    idx++;
 800ebc0:	7dfb      	ldrb	r3, [r7, #23]
 800ebc2:	3301      	adds	r3, #1
 800ebc4:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800ebc6:	7dfb      	ldrb	r3, [r7, #23]
 800ebc8:	68ba      	ldr	r2, [r7, #8]
 800ebca:	4413      	add	r3, r2
 800ebcc:	2200      	movs	r2, #0
 800ebce:	701a      	strb	r2, [r3, #0]
    idx++;
 800ebd0:	7dfb      	ldrb	r3, [r7, #23]
 800ebd2:	3301      	adds	r3, #1
 800ebd4:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800ebd6:	693b      	ldr	r3, [r7, #16]
 800ebd8:	781b      	ldrb	r3, [r3, #0]
 800ebda:	2b00      	cmp	r3, #0
 800ebdc:	d1e7      	bne.n	800ebae <USBD_GetString+0x52>
 800ebde:	e000      	b.n	800ebe2 <USBD_GetString+0x86>
    return;
 800ebe0:	bf00      	nop
  }
}
 800ebe2:	3718      	adds	r7, #24
 800ebe4:	46bd      	mov	sp, r7
 800ebe6:	bd80      	pop	{r7, pc}

0800ebe8 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800ebe8:	b480      	push	{r7}
 800ebea:	b085      	sub	sp, #20
 800ebec:	af00      	add	r7, sp, #0
 800ebee:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800ebf0:	2300      	movs	r3, #0
 800ebf2:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800ebf4:	687b      	ldr	r3, [r7, #4]
 800ebf6:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800ebf8:	e005      	b.n	800ec06 <USBD_GetLen+0x1e>
  {
    len++;
 800ebfa:	7bfb      	ldrb	r3, [r7, #15]
 800ebfc:	3301      	adds	r3, #1
 800ebfe:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800ec00:	68bb      	ldr	r3, [r7, #8]
 800ec02:	3301      	adds	r3, #1
 800ec04:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800ec06:	68bb      	ldr	r3, [r7, #8]
 800ec08:	781b      	ldrb	r3, [r3, #0]
 800ec0a:	2b00      	cmp	r3, #0
 800ec0c:	d1f5      	bne.n	800ebfa <USBD_GetLen+0x12>
  }

  return len;
 800ec0e:	7bfb      	ldrb	r3, [r7, #15]
}
 800ec10:	4618      	mov	r0, r3
 800ec12:	3714      	adds	r7, #20
 800ec14:	46bd      	mov	sp, r7
 800ec16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec1a:	4770      	bx	lr

0800ec1c <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800ec1c:	b580      	push	{r7, lr}
 800ec1e:	b084      	sub	sp, #16
 800ec20:	af00      	add	r7, sp, #0
 800ec22:	60f8      	str	r0, [r7, #12]
 800ec24:	60b9      	str	r1, [r7, #8]
 800ec26:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800ec28:	68fb      	ldr	r3, [r7, #12]
 800ec2a:	2202      	movs	r2, #2
 800ec2c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800ec30:	68fb      	ldr	r3, [r7, #12]
 800ec32:	687a      	ldr	r2, [r7, #4]
 800ec34:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800ec36:	68fb      	ldr	r3, [r7, #12]
 800ec38:	687a      	ldr	r2, [r7, #4]
 800ec3a:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800ec3c:	687b      	ldr	r3, [r7, #4]
 800ec3e:	68ba      	ldr	r2, [r7, #8]
 800ec40:	2100      	movs	r1, #0
 800ec42:	68f8      	ldr	r0, [r7, #12]
 800ec44:	f000 fd13 	bl	800f66e <USBD_LL_Transmit>

  return USBD_OK;
 800ec48:	2300      	movs	r3, #0
}
 800ec4a:	4618      	mov	r0, r3
 800ec4c:	3710      	adds	r7, #16
 800ec4e:	46bd      	mov	sp, r7
 800ec50:	bd80      	pop	{r7, pc}

0800ec52 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800ec52:	b580      	push	{r7, lr}
 800ec54:	b084      	sub	sp, #16
 800ec56:	af00      	add	r7, sp, #0
 800ec58:	60f8      	str	r0, [r7, #12]
 800ec5a:	60b9      	str	r1, [r7, #8]
 800ec5c:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800ec5e:	687b      	ldr	r3, [r7, #4]
 800ec60:	68ba      	ldr	r2, [r7, #8]
 800ec62:	2100      	movs	r1, #0
 800ec64:	68f8      	ldr	r0, [r7, #12]
 800ec66:	f000 fd02 	bl	800f66e <USBD_LL_Transmit>

  return USBD_OK;
 800ec6a:	2300      	movs	r3, #0
}
 800ec6c:	4618      	mov	r0, r3
 800ec6e:	3710      	adds	r7, #16
 800ec70:	46bd      	mov	sp, r7
 800ec72:	bd80      	pop	{r7, pc}

0800ec74 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800ec74:	b580      	push	{r7, lr}
 800ec76:	b084      	sub	sp, #16
 800ec78:	af00      	add	r7, sp, #0
 800ec7a:	60f8      	str	r0, [r7, #12]
 800ec7c:	60b9      	str	r1, [r7, #8]
 800ec7e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800ec80:	68fb      	ldr	r3, [r7, #12]
 800ec82:	2203      	movs	r2, #3
 800ec84:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800ec88:	68fb      	ldr	r3, [r7, #12]
 800ec8a:	687a      	ldr	r2, [r7, #4]
 800ec8c:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800ec90:	68fb      	ldr	r3, [r7, #12]
 800ec92:	687a      	ldr	r2, [r7, #4]
 800ec94:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800ec98:	687b      	ldr	r3, [r7, #4]
 800ec9a:	68ba      	ldr	r2, [r7, #8]
 800ec9c:	2100      	movs	r1, #0
 800ec9e:	68f8      	ldr	r0, [r7, #12]
 800eca0:	f000 fd06 	bl	800f6b0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800eca4:	2300      	movs	r3, #0
}
 800eca6:	4618      	mov	r0, r3
 800eca8:	3710      	adds	r7, #16
 800ecaa:	46bd      	mov	sp, r7
 800ecac:	bd80      	pop	{r7, pc}

0800ecae <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800ecae:	b580      	push	{r7, lr}
 800ecb0:	b084      	sub	sp, #16
 800ecb2:	af00      	add	r7, sp, #0
 800ecb4:	60f8      	str	r0, [r7, #12]
 800ecb6:	60b9      	str	r1, [r7, #8]
 800ecb8:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800ecba:	687b      	ldr	r3, [r7, #4]
 800ecbc:	68ba      	ldr	r2, [r7, #8]
 800ecbe:	2100      	movs	r1, #0
 800ecc0:	68f8      	ldr	r0, [r7, #12]
 800ecc2:	f000 fcf5 	bl	800f6b0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800ecc6:	2300      	movs	r3, #0
}
 800ecc8:	4618      	mov	r0, r3
 800ecca:	3710      	adds	r7, #16
 800eccc:	46bd      	mov	sp, r7
 800ecce:	bd80      	pop	{r7, pc}

0800ecd0 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800ecd0:	b580      	push	{r7, lr}
 800ecd2:	b082      	sub	sp, #8
 800ecd4:	af00      	add	r7, sp, #0
 800ecd6:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800ecd8:	687b      	ldr	r3, [r7, #4]
 800ecda:	2204      	movs	r2, #4
 800ecdc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800ece0:	2300      	movs	r3, #0
 800ece2:	2200      	movs	r2, #0
 800ece4:	2100      	movs	r1, #0
 800ece6:	6878      	ldr	r0, [r7, #4]
 800ece8:	f000 fcc1 	bl	800f66e <USBD_LL_Transmit>

  return USBD_OK;
 800ecec:	2300      	movs	r3, #0
}
 800ecee:	4618      	mov	r0, r3
 800ecf0:	3708      	adds	r7, #8
 800ecf2:	46bd      	mov	sp, r7
 800ecf4:	bd80      	pop	{r7, pc}

0800ecf6 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800ecf6:	b580      	push	{r7, lr}
 800ecf8:	b082      	sub	sp, #8
 800ecfa:	af00      	add	r7, sp, #0
 800ecfc:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800ecfe:	687b      	ldr	r3, [r7, #4]
 800ed00:	2205      	movs	r2, #5
 800ed02:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800ed06:	2300      	movs	r3, #0
 800ed08:	2200      	movs	r2, #0
 800ed0a:	2100      	movs	r1, #0
 800ed0c:	6878      	ldr	r0, [r7, #4]
 800ed0e:	f000 fccf 	bl	800f6b0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800ed12:	2300      	movs	r3, #0
}
 800ed14:	4618      	mov	r0, r3
 800ed16:	3708      	adds	r7, #8
 800ed18:	46bd      	mov	sp, r7
 800ed1a:	bd80      	pop	{r7, pc}

0800ed1c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800ed1c:	b580      	push	{r7, lr}
 800ed1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800ed20:	2200      	movs	r2, #0
 800ed22:	4912      	ldr	r1, [pc, #72]	; (800ed6c <MX_USB_DEVICE_Init+0x50>)
 800ed24:	4812      	ldr	r0, [pc, #72]	; (800ed70 <MX_USB_DEVICE_Init+0x54>)
 800ed26:	f7fe fcdd 	bl	800d6e4 <USBD_Init>
 800ed2a:	4603      	mov	r3, r0
 800ed2c:	2b00      	cmp	r3, #0
 800ed2e:	d001      	beq.n	800ed34 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800ed30:	f7f2 fffc 	bl	8001d2c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800ed34:	490f      	ldr	r1, [pc, #60]	; (800ed74 <MX_USB_DEVICE_Init+0x58>)
 800ed36:	480e      	ldr	r0, [pc, #56]	; (800ed70 <MX_USB_DEVICE_Init+0x54>)
 800ed38:	f7fe fd04 	bl	800d744 <USBD_RegisterClass>
 800ed3c:	4603      	mov	r3, r0
 800ed3e:	2b00      	cmp	r3, #0
 800ed40:	d001      	beq.n	800ed46 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800ed42:	f7f2 fff3 	bl	8001d2c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800ed46:	490c      	ldr	r1, [pc, #48]	; (800ed78 <MX_USB_DEVICE_Init+0x5c>)
 800ed48:	4809      	ldr	r0, [pc, #36]	; (800ed70 <MX_USB_DEVICE_Init+0x54>)
 800ed4a:	f7fe fbf5 	bl	800d538 <USBD_CDC_RegisterInterface>
 800ed4e:	4603      	mov	r3, r0
 800ed50:	2b00      	cmp	r3, #0
 800ed52:	d001      	beq.n	800ed58 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800ed54:	f7f2 ffea 	bl	8001d2c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800ed58:	4805      	ldr	r0, [pc, #20]	; (800ed70 <MX_USB_DEVICE_Init+0x54>)
 800ed5a:	f7fe fd29 	bl	800d7b0 <USBD_Start>
 800ed5e:	4603      	mov	r3, r0
 800ed60:	2b00      	cmp	r3, #0
 800ed62:	d001      	beq.n	800ed68 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800ed64:	f7f2 ffe2 	bl	8001d2c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800ed68:	bf00      	nop
 800ed6a:	bd80      	pop	{r7, pc}
 800ed6c:	200001a8 	.word	0x200001a8
 800ed70:	200007cc 	.word	0x200007cc
 800ed74:	20000114 	.word	0x20000114
 800ed78:	20000194 	.word	0x20000194

0800ed7c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800ed7c:	b580      	push	{r7, lr}
 800ed7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800ed80:	2200      	movs	r2, #0
 800ed82:	4905      	ldr	r1, [pc, #20]	; (800ed98 <CDC_Init_FS+0x1c>)
 800ed84:	4805      	ldr	r0, [pc, #20]	; (800ed9c <CDC_Init_FS+0x20>)
 800ed86:	f7fe fbf1 	bl	800d56c <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800ed8a:	4905      	ldr	r1, [pc, #20]	; (800eda0 <CDC_Init_FS+0x24>)
 800ed8c:	4803      	ldr	r0, [pc, #12]	; (800ed9c <CDC_Init_FS+0x20>)
 800ed8e:	f7fe fc0f 	bl	800d5b0 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800ed92:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800ed94:	4618      	mov	r0, r3
 800ed96:	bd80      	pop	{r7, pc}
 800ed98:	200012a8 	.word	0x200012a8
 800ed9c:	200007cc 	.word	0x200007cc
 800eda0:	20000aa8 	.word	0x20000aa8

0800eda4 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800eda4:	b480      	push	{r7}
 800eda6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800eda8:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800edaa:	4618      	mov	r0, r3
 800edac:	46bd      	mov	sp, r7
 800edae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edb2:	4770      	bx	lr

0800edb4 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800edb4:	b480      	push	{r7}
 800edb6:	b083      	sub	sp, #12
 800edb8:	af00      	add	r7, sp, #0
 800edba:	4603      	mov	r3, r0
 800edbc:	6039      	str	r1, [r7, #0]
 800edbe:	71fb      	strb	r3, [r7, #7]
 800edc0:	4613      	mov	r3, r2
 800edc2:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800edc4:	79fb      	ldrb	r3, [r7, #7]
 800edc6:	2b23      	cmp	r3, #35	; 0x23
 800edc8:	d84a      	bhi.n	800ee60 <CDC_Control_FS+0xac>
 800edca:	a201      	add	r2, pc, #4	; (adr r2, 800edd0 <CDC_Control_FS+0x1c>)
 800edcc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800edd0:	0800ee61 	.word	0x0800ee61
 800edd4:	0800ee61 	.word	0x0800ee61
 800edd8:	0800ee61 	.word	0x0800ee61
 800eddc:	0800ee61 	.word	0x0800ee61
 800ede0:	0800ee61 	.word	0x0800ee61
 800ede4:	0800ee61 	.word	0x0800ee61
 800ede8:	0800ee61 	.word	0x0800ee61
 800edec:	0800ee61 	.word	0x0800ee61
 800edf0:	0800ee61 	.word	0x0800ee61
 800edf4:	0800ee61 	.word	0x0800ee61
 800edf8:	0800ee61 	.word	0x0800ee61
 800edfc:	0800ee61 	.word	0x0800ee61
 800ee00:	0800ee61 	.word	0x0800ee61
 800ee04:	0800ee61 	.word	0x0800ee61
 800ee08:	0800ee61 	.word	0x0800ee61
 800ee0c:	0800ee61 	.word	0x0800ee61
 800ee10:	0800ee61 	.word	0x0800ee61
 800ee14:	0800ee61 	.word	0x0800ee61
 800ee18:	0800ee61 	.word	0x0800ee61
 800ee1c:	0800ee61 	.word	0x0800ee61
 800ee20:	0800ee61 	.word	0x0800ee61
 800ee24:	0800ee61 	.word	0x0800ee61
 800ee28:	0800ee61 	.word	0x0800ee61
 800ee2c:	0800ee61 	.word	0x0800ee61
 800ee30:	0800ee61 	.word	0x0800ee61
 800ee34:	0800ee61 	.word	0x0800ee61
 800ee38:	0800ee61 	.word	0x0800ee61
 800ee3c:	0800ee61 	.word	0x0800ee61
 800ee40:	0800ee61 	.word	0x0800ee61
 800ee44:	0800ee61 	.word	0x0800ee61
 800ee48:	0800ee61 	.word	0x0800ee61
 800ee4c:	0800ee61 	.word	0x0800ee61
 800ee50:	0800ee61 	.word	0x0800ee61
 800ee54:	0800ee61 	.word	0x0800ee61
 800ee58:	0800ee61 	.word	0x0800ee61
 800ee5c:	0800ee61 	.word	0x0800ee61
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800ee60:	bf00      	nop
  }

  return (USBD_OK);
 800ee62:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800ee64:	4618      	mov	r0, r3
 800ee66:	370c      	adds	r7, #12
 800ee68:	46bd      	mov	sp, r7
 800ee6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee6e:	4770      	bx	lr

0800ee70 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800ee70:	b580      	push	{r7, lr}
 800ee72:	b082      	sub	sp, #8
 800ee74:	af00      	add	r7, sp, #0
 800ee76:	6078      	str	r0, [r7, #4]
 800ee78:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800ee7a:	6879      	ldr	r1, [r7, #4]
 800ee7c:	4805      	ldr	r0, [pc, #20]	; (800ee94 <CDC_Receive_FS+0x24>)
 800ee7e:	f7fe fb97 	bl	800d5b0 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800ee82:	4804      	ldr	r0, [pc, #16]	; (800ee94 <CDC_Receive_FS+0x24>)
 800ee84:	f7fe fbf8 	bl	800d678 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800ee88:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800ee8a:	4618      	mov	r0, r3
 800ee8c:	3708      	adds	r7, #8
 800ee8e:	46bd      	mov	sp, r7
 800ee90:	bd80      	pop	{r7, pc}
 800ee92:	bf00      	nop
 800ee94:	200007cc 	.word	0x200007cc

0800ee98 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800ee98:	b580      	push	{r7, lr}
 800ee9a:	b084      	sub	sp, #16
 800ee9c:	af00      	add	r7, sp, #0
 800ee9e:	6078      	str	r0, [r7, #4]
 800eea0:	460b      	mov	r3, r1
 800eea2:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800eea4:	2300      	movs	r3, #0
 800eea6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800eea8:	4b0d      	ldr	r3, [pc, #52]	; (800eee0 <CDC_Transmit_FS+0x48>)
 800eeaa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800eeae:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800eeb0:	68bb      	ldr	r3, [r7, #8]
 800eeb2:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800eeb6:	2b00      	cmp	r3, #0
 800eeb8:	d001      	beq.n	800eebe <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800eeba:	2301      	movs	r3, #1
 800eebc:	e00b      	b.n	800eed6 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800eebe:	887b      	ldrh	r3, [r7, #2]
 800eec0:	461a      	mov	r2, r3
 800eec2:	6879      	ldr	r1, [r7, #4]
 800eec4:	4806      	ldr	r0, [pc, #24]	; (800eee0 <CDC_Transmit_FS+0x48>)
 800eec6:	f7fe fb51 	bl	800d56c <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800eeca:	4805      	ldr	r0, [pc, #20]	; (800eee0 <CDC_Transmit_FS+0x48>)
 800eecc:	f7fe fb8e 	bl	800d5ec <USBD_CDC_TransmitPacket>
 800eed0:	4603      	mov	r3, r0
 800eed2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800eed4:	7bfb      	ldrb	r3, [r7, #15]
}
 800eed6:	4618      	mov	r0, r3
 800eed8:	3710      	adds	r7, #16
 800eeda:	46bd      	mov	sp, r7
 800eedc:	bd80      	pop	{r7, pc}
 800eede:	bf00      	nop
 800eee0:	200007cc 	.word	0x200007cc

0800eee4 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800eee4:	b480      	push	{r7}
 800eee6:	b087      	sub	sp, #28
 800eee8:	af00      	add	r7, sp, #0
 800eeea:	60f8      	str	r0, [r7, #12]
 800eeec:	60b9      	str	r1, [r7, #8]
 800eeee:	4613      	mov	r3, r2
 800eef0:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800eef2:	2300      	movs	r3, #0
 800eef4:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800eef6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800eefa:	4618      	mov	r0, r3
 800eefc:	371c      	adds	r7, #28
 800eefe:	46bd      	mov	sp, r7
 800ef00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef04:	4770      	bx	lr
	...

0800ef08 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ef08:	b480      	push	{r7}
 800ef0a:	b083      	sub	sp, #12
 800ef0c:	af00      	add	r7, sp, #0
 800ef0e:	4603      	mov	r3, r0
 800ef10:	6039      	str	r1, [r7, #0]
 800ef12:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800ef14:	683b      	ldr	r3, [r7, #0]
 800ef16:	2212      	movs	r2, #18
 800ef18:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800ef1a:	4b03      	ldr	r3, [pc, #12]	; (800ef28 <USBD_FS_DeviceDescriptor+0x20>)
}
 800ef1c:	4618      	mov	r0, r3
 800ef1e:	370c      	adds	r7, #12
 800ef20:	46bd      	mov	sp, r7
 800ef22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef26:	4770      	bx	lr
 800ef28:	200001c8 	.word	0x200001c8

0800ef2c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ef2c:	b480      	push	{r7}
 800ef2e:	b083      	sub	sp, #12
 800ef30:	af00      	add	r7, sp, #0
 800ef32:	4603      	mov	r3, r0
 800ef34:	6039      	str	r1, [r7, #0]
 800ef36:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800ef38:	683b      	ldr	r3, [r7, #0]
 800ef3a:	2204      	movs	r2, #4
 800ef3c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800ef3e:	4b03      	ldr	r3, [pc, #12]	; (800ef4c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800ef40:	4618      	mov	r0, r3
 800ef42:	370c      	adds	r7, #12
 800ef44:	46bd      	mov	sp, r7
 800ef46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef4a:	4770      	bx	lr
 800ef4c:	200001e8 	.word	0x200001e8

0800ef50 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ef50:	b580      	push	{r7, lr}
 800ef52:	b082      	sub	sp, #8
 800ef54:	af00      	add	r7, sp, #0
 800ef56:	4603      	mov	r3, r0
 800ef58:	6039      	str	r1, [r7, #0]
 800ef5a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800ef5c:	79fb      	ldrb	r3, [r7, #7]
 800ef5e:	2b00      	cmp	r3, #0
 800ef60:	d105      	bne.n	800ef6e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800ef62:	683a      	ldr	r2, [r7, #0]
 800ef64:	4907      	ldr	r1, [pc, #28]	; (800ef84 <USBD_FS_ProductStrDescriptor+0x34>)
 800ef66:	4808      	ldr	r0, [pc, #32]	; (800ef88 <USBD_FS_ProductStrDescriptor+0x38>)
 800ef68:	f7ff fdf8 	bl	800eb5c <USBD_GetString>
 800ef6c:	e004      	b.n	800ef78 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800ef6e:	683a      	ldr	r2, [r7, #0]
 800ef70:	4904      	ldr	r1, [pc, #16]	; (800ef84 <USBD_FS_ProductStrDescriptor+0x34>)
 800ef72:	4805      	ldr	r0, [pc, #20]	; (800ef88 <USBD_FS_ProductStrDescriptor+0x38>)
 800ef74:	f7ff fdf2 	bl	800eb5c <USBD_GetString>
  }
  return USBD_StrDesc;
 800ef78:	4b02      	ldr	r3, [pc, #8]	; (800ef84 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800ef7a:	4618      	mov	r0, r3
 800ef7c:	3708      	adds	r7, #8
 800ef7e:	46bd      	mov	sp, r7
 800ef80:	bd80      	pop	{r7, pc}
 800ef82:	bf00      	nop
 800ef84:	20001aa8 	.word	0x20001aa8
 800ef88:	080141f0 	.word	0x080141f0

0800ef8c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ef8c:	b580      	push	{r7, lr}
 800ef8e:	b082      	sub	sp, #8
 800ef90:	af00      	add	r7, sp, #0
 800ef92:	4603      	mov	r3, r0
 800ef94:	6039      	str	r1, [r7, #0]
 800ef96:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800ef98:	683a      	ldr	r2, [r7, #0]
 800ef9a:	4904      	ldr	r1, [pc, #16]	; (800efac <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800ef9c:	4804      	ldr	r0, [pc, #16]	; (800efb0 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800ef9e:	f7ff fddd 	bl	800eb5c <USBD_GetString>
  return USBD_StrDesc;
 800efa2:	4b02      	ldr	r3, [pc, #8]	; (800efac <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800efa4:	4618      	mov	r0, r3
 800efa6:	3708      	adds	r7, #8
 800efa8:	46bd      	mov	sp, r7
 800efaa:	bd80      	pop	{r7, pc}
 800efac:	20001aa8 	.word	0x20001aa8
 800efb0:	08014208 	.word	0x08014208

0800efb4 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800efb4:	b580      	push	{r7, lr}
 800efb6:	b082      	sub	sp, #8
 800efb8:	af00      	add	r7, sp, #0
 800efba:	4603      	mov	r3, r0
 800efbc:	6039      	str	r1, [r7, #0]
 800efbe:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800efc0:	683b      	ldr	r3, [r7, #0]
 800efc2:	221a      	movs	r2, #26
 800efc4:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800efc6:	f000 f855 	bl	800f074 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800efca:	4b02      	ldr	r3, [pc, #8]	; (800efd4 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800efcc:	4618      	mov	r0, r3
 800efce:	3708      	adds	r7, #8
 800efd0:	46bd      	mov	sp, r7
 800efd2:	bd80      	pop	{r7, pc}
 800efd4:	200001ec 	.word	0x200001ec

0800efd8 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800efd8:	b580      	push	{r7, lr}
 800efda:	b082      	sub	sp, #8
 800efdc:	af00      	add	r7, sp, #0
 800efde:	4603      	mov	r3, r0
 800efe0:	6039      	str	r1, [r7, #0]
 800efe2:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800efe4:	79fb      	ldrb	r3, [r7, #7]
 800efe6:	2b00      	cmp	r3, #0
 800efe8:	d105      	bne.n	800eff6 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800efea:	683a      	ldr	r2, [r7, #0]
 800efec:	4907      	ldr	r1, [pc, #28]	; (800f00c <USBD_FS_ConfigStrDescriptor+0x34>)
 800efee:	4808      	ldr	r0, [pc, #32]	; (800f010 <USBD_FS_ConfigStrDescriptor+0x38>)
 800eff0:	f7ff fdb4 	bl	800eb5c <USBD_GetString>
 800eff4:	e004      	b.n	800f000 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800eff6:	683a      	ldr	r2, [r7, #0]
 800eff8:	4904      	ldr	r1, [pc, #16]	; (800f00c <USBD_FS_ConfigStrDescriptor+0x34>)
 800effa:	4805      	ldr	r0, [pc, #20]	; (800f010 <USBD_FS_ConfigStrDescriptor+0x38>)
 800effc:	f7ff fdae 	bl	800eb5c <USBD_GetString>
  }
  return USBD_StrDesc;
 800f000:	4b02      	ldr	r3, [pc, #8]	; (800f00c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800f002:	4618      	mov	r0, r3
 800f004:	3708      	adds	r7, #8
 800f006:	46bd      	mov	sp, r7
 800f008:	bd80      	pop	{r7, pc}
 800f00a:	bf00      	nop
 800f00c:	20001aa8 	.word	0x20001aa8
 800f010:	0801421c 	.word	0x0801421c

0800f014 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f014:	b580      	push	{r7, lr}
 800f016:	b082      	sub	sp, #8
 800f018:	af00      	add	r7, sp, #0
 800f01a:	4603      	mov	r3, r0
 800f01c:	6039      	str	r1, [r7, #0]
 800f01e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800f020:	79fb      	ldrb	r3, [r7, #7]
 800f022:	2b00      	cmp	r3, #0
 800f024:	d105      	bne.n	800f032 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800f026:	683a      	ldr	r2, [r7, #0]
 800f028:	4907      	ldr	r1, [pc, #28]	; (800f048 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800f02a:	4808      	ldr	r0, [pc, #32]	; (800f04c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800f02c:	f7ff fd96 	bl	800eb5c <USBD_GetString>
 800f030:	e004      	b.n	800f03c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800f032:	683a      	ldr	r2, [r7, #0]
 800f034:	4904      	ldr	r1, [pc, #16]	; (800f048 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800f036:	4805      	ldr	r0, [pc, #20]	; (800f04c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800f038:	f7ff fd90 	bl	800eb5c <USBD_GetString>
  }
  return USBD_StrDesc;
 800f03c:	4b02      	ldr	r3, [pc, #8]	; (800f048 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800f03e:	4618      	mov	r0, r3
 800f040:	3708      	adds	r7, #8
 800f042:	46bd      	mov	sp, r7
 800f044:	bd80      	pop	{r7, pc}
 800f046:	bf00      	nop
 800f048:	20001aa8 	.word	0x20001aa8
 800f04c:	08014228 	.word	0x08014228

0800f050 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f050:	b480      	push	{r7}
 800f052:	b083      	sub	sp, #12
 800f054:	af00      	add	r7, sp, #0
 800f056:	4603      	mov	r3, r0
 800f058:	6039      	str	r1, [r7, #0]
 800f05a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 800f05c:	683b      	ldr	r3, [r7, #0]
 800f05e:	220c      	movs	r2, #12
 800f060:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 800f062:	4b03      	ldr	r3, [pc, #12]	; (800f070 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 800f064:	4618      	mov	r0, r3
 800f066:	370c      	adds	r7, #12
 800f068:	46bd      	mov	sp, r7
 800f06a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f06e:	4770      	bx	lr
 800f070:	200001dc 	.word	0x200001dc

0800f074 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800f074:	b580      	push	{r7, lr}
 800f076:	b084      	sub	sp, #16
 800f078:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800f07a:	4b0f      	ldr	r3, [pc, #60]	; (800f0b8 <Get_SerialNum+0x44>)
 800f07c:	681b      	ldr	r3, [r3, #0]
 800f07e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800f080:	4b0e      	ldr	r3, [pc, #56]	; (800f0bc <Get_SerialNum+0x48>)
 800f082:	681b      	ldr	r3, [r3, #0]
 800f084:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800f086:	4b0e      	ldr	r3, [pc, #56]	; (800f0c0 <Get_SerialNum+0x4c>)
 800f088:	681b      	ldr	r3, [r3, #0]
 800f08a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800f08c:	68fa      	ldr	r2, [r7, #12]
 800f08e:	687b      	ldr	r3, [r7, #4]
 800f090:	4413      	add	r3, r2
 800f092:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800f094:	68fb      	ldr	r3, [r7, #12]
 800f096:	2b00      	cmp	r3, #0
 800f098:	d009      	beq.n	800f0ae <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800f09a:	2208      	movs	r2, #8
 800f09c:	4909      	ldr	r1, [pc, #36]	; (800f0c4 <Get_SerialNum+0x50>)
 800f09e:	68f8      	ldr	r0, [r7, #12]
 800f0a0:	f000 f814 	bl	800f0cc <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800f0a4:	2204      	movs	r2, #4
 800f0a6:	4908      	ldr	r1, [pc, #32]	; (800f0c8 <Get_SerialNum+0x54>)
 800f0a8:	68b8      	ldr	r0, [r7, #8]
 800f0aa:	f000 f80f 	bl	800f0cc <IntToUnicode>
  }
}
 800f0ae:	bf00      	nop
 800f0b0:	3710      	adds	r7, #16
 800f0b2:	46bd      	mov	sp, r7
 800f0b4:	bd80      	pop	{r7, pc}
 800f0b6:	bf00      	nop
 800f0b8:	1fff7a10 	.word	0x1fff7a10
 800f0bc:	1fff7a14 	.word	0x1fff7a14
 800f0c0:	1fff7a18 	.word	0x1fff7a18
 800f0c4:	200001ee 	.word	0x200001ee
 800f0c8:	200001fe 	.word	0x200001fe

0800f0cc <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800f0cc:	b480      	push	{r7}
 800f0ce:	b087      	sub	sp, #28
 800f0d0:	af00      	add	r7, sp, #0
 800f0d2:	60f8      	str	r0, [r7, #12]
 800f0d4:	60b9      	str	r1, [r7, #8]
 800f0d6:	4613      	mov	r3, r2
 800f0d8:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800f0da:	2300      	movs	r3, #0
 800f0dc:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800f0de:	2300      	movs	r3, #0
 800f0e0:	75fb      	strb	r3, [r7, #23]
 800f0e2:	e027      	b.n	800f134 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800f0e4:	68fb      	ldr	r3, [r7, #12]
 800f0e6:	0f1b      	lsrs	r3, r3, #28
 800f0e8:	2b09      	cmp	r3, #9
 800f0ea:	d80b      	bhi.n	800f104 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800f0ec:	68fb      	ldr	r3, [r7, #12]
 800f0ee:	0f1b      	lsrs	r3, r3, #28
 800f0f0:	b2da      	uxtb	r2, r3
 800f0f2:	7dfb      	ldrb	r3, [r7, #23]
 800f0f4:	005b      	lsls	r3, r3, #1
 800f0f6:	4619      	mov	r1, r3
 800f0f8:	68bb      	ldr	r3, [r7, #8]
 800f0fa:	440b      	add	r3, r1
 800f0fc:	3230      	adds	r2, #48	; 0x30
 800f0fe:	b2d2      	uxtb	r2, r2
 800f100:	701a      	strb	r2, [r3, #0]
 800f102:	e00a      	b.n	800f11a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800f104:	68fb      	ldr	r3, [r7, #12]
 800f106:	0f1b      	lsrs	r3, r3, #28
 800f108:	b2da      	uxtb	r2, r3
 800f10a:	7dfb      	ldrb	r3, [r7, #23]
 800f10c:	005b      	lsls	r3, r3, #1
 800f10e:	4619      	mov	r1, r3
 800f110:	68bb      	ldr	r3, [r7, #8]
 800f112:	440b      	add	r3, r1
 800f114:	3237      	adds	r2, #55	; 0x37
 800f116:	b2d2      	uxtb	r2, r2
 800f118:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800f11a:	68fb      	ldr	r3, [r7, #12]
 800f11c:	011b      	lsls	r3, r3, #4
 800f11e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800f120:	7dfb      	ldrb	r3, [r7, #23]
 800f122:	005b      	lsls	r3, r3, #1
 800f124:	3301      	adds	r3, #1
 800f126:	68ba      	ldr	r2, [r7, #8]
 800f128:	4413      	add	r3, r2
 800f12a:	2200      	movs	r2, #0
 800f12c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800f12e:	7dfb      	ldrb	r3, [r7, #23]
 800f130:	3301      	adds	r3, #1
 800f132:	75fb      	strb	r3, [r7, #23]
 800f134:	7dfa      	ldrb	r2, [r7, #23]
 800f136:	79fb      	ldrb	r3, [r7, #7]
 800f138:	429a      	cmp	r2, r3
 800f13a:	d3d3      	bcc.n	800f0e4 <IntToUnicode+0x18>
  }
}
 800f13c:	bf00      	nop
 800f13e:	bf00      	nop
 800f140:	371c      	adds	r7, #28
 800f142:	46bd      	mov	sp, r7
 800f144:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f148:	4770      	bx	lr
	...

0800f14c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800f14c:	b580      	push	{r7, lr}
 800f14e:	b0a0      	sub	sp, #128	; 0x80
 800f150:	af00      	add	r7, sp, #0
 800f152:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800f154:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800f158:	2200      	movs	r2, #0
 800f15a:	601a      	str	r2, [r3, #0]
 800f15c:	605a      	str	r2, [r3, #4]
 800f15e:	609a      	str	r2, [r3, #8]
 800f160:	60da      	str	r2, [r3, #12]
 800f162:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800f164:	f107 0310 	add.w	r3, r7, #16
 800f168:	225c      	movs	r2, #92	; 0x5c
 800f16a:	2100      	movs	r1, #0
 800f16c:	4618      	mov	r0, r3
 800f16e:	f000 fb9f 	bl	800f8b0 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 800f172:	687b      	ldr	r3, [r7, #4]
 800f174:	681b      	ldr	r3, [r3, #0]
 800f176:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800f17a:	d149      	bne.n	800f210 <HAL_PCD_MspInit+0xc4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 800f17c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800f180:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 800f182:	2300      	movs	r3, #0
 800f184:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800f186:	f107 0310 	add.w	r3, r7, #16
 800f18a:	4618      	mov	r0, r3
 800f18c:	f7fa fcc8 	bl	8009b20 <HAL_RCCEx_PeriphCLKConfig>
 800f190:	4603      	mov	r3, r0
 800f192:	2b00      	cmp	r3, #0
 800f194:	d001      	beq.n	800f19a <HAL_PCD_MspInit+0x4e>
    {
      Error_Handler();
 800f196:	f7f2 fdc9 	bl	8001d2c <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800f19a:	2300      	movs	r3, #0
 800f19c:	60fb      	str	r3, [r7, #12]
 800f19e:	4b1e      	ldr	r3, [pc, #120]	; (800f218 <HAL_PCD_MspInit+0xcc>)
 800f1a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f1a2:	4a1d      	ldr	r2, [pc, #116]	; (800f218 <HAL_PCD_MspInit+0xcc>)
 800f1a4:	f043 0301 	orr.w	r3, r3, #1
 800f1a8:	6313      	str	r3, [r2, #48]	; 0x30
 800f1aa:	4b1b      	ldr	r3, [pc, #108]	; (800f218 <HAL_PCD_MspInit+0xcc>)
 800f1ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f1ae:	f003 0301 	and.w	r3, r3, #1
 800f1b2:	60fb      	str	r3, [r7, #12]
 800f1b4:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800f1b6:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800f1ba:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800f1bc:	2302      	movs	r3, #2
 800f1be:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f1c0:	2300      	movs	r3, #0
 800f1c2:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800f1c4:	2303      	movs	r3, #3
 800f1c6:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800f1c8:	230a      	movs	r3, #10
 800f1ca:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800f1cc:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800f1d0:	4619      	mov	r1, r3
 800f1d2:	4812      	ldr	r0, [pc, #72]	; (800f21c <HAL_PCD_MspInit+0xd0>)
 800f1d4:	f7f7 fe16 	bl	8006e04 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800f1d8:	4b0f      	ldr	r3, [pc, #60]	; (800f218 <HAL_PCD_MspInit+0xcc>)
 800f1da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f1dc:	4a0e      	ldr	r2, [pc, #56]	; (800f218 <HAL_PCD_MspInit+0xcc>)
 800f1de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f1e2:	6353      	str	r3, [r2, #52]	; 0x34
 800f1e4:	2300      	movs	r3, #0
 800f1e6:	60bb      	str	r3, [r7, #8]
 800f1e8:	4b0b      	ldr	r3, [pc, #44]	; (800f218 <HAL_PCD_MspInit+0xcc>)
 800f1ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f1ec:	4a0a      	ldr	r2, [pc, #40]	; (800f218 <HAL_PCD_MspInit+0xcc>)
 800f1ee:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800f1f2:	6453      	str	r3, [r2, #68]	; 0x44
 800f1f4:	4b08      	ldr	r3, [pc, #32]	; (800f218 <HAL_PCD_MspInit+0xcc>)
 800f1f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f1f8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800f1fc:	60bb      	str	r3, [r7, #8]
 800f1fe:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800f200:	2200      	movs	r2, #0
 800f202:	2100      	movs	r1, #0
 800f204:	2043      	movs	r0, #67	; 0x43
 800f206:	f7f7 fadc 	bl	80067c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800f20a:	2043      	movs	r0, #67	; 0x43
 800f20c:	f7f7 faf5 	bl	80067fa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800f210:	bf00      	nop
 800f212:	3780      	adds	r7, #128	; 0x80
 800f214:	46bd      	mov	sp, r7
 800f216:	bd80      	pop	{r7, pc}
 800f218:	40023800 	.word	0x40023800
 800f21c:	40020000 	.word	0x40020000

0800f220 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f220:	b580      	push	{r7, lr}
 800f222:	b082      	sub	sp, #8
 800f224:	af00      	add	r7, sp, #0
 800f226:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800f228:	687b      	ldr	r3, [r7, #4]
 800f22a:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 800f22e:	687b      	ldr	r3, [r7, #4]
 800f230:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800f234:	4619      	mov	r1, r3
 800f236:	4610      	mov	r0, r2
 800f238:	f7fe fb07 	bl	800d84a <USBD_LL_SetupStage>
}
 800f23c:	bf00      	nop
 800f23e:	3708      	adds	r7, #8
 800f240:	46bd      	mov	sp, r7
 800f242:	bd80      	pop	{r7, pc}

0800f244 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f244:	b580      	push	{r7, lr}
 800f246:	b082      	sub	sp, #8
 800f248:	af00      	add	r7, sp, #0
 800f24a:	6078      	str	r0, [r7, #4]
 800f24c:	460b      	mov	r3, r1
 800f24e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800f250:	687b      	ldr	r3, [r7, #4]
 800f252:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800f256:	78fa      	ldrb	r2, [r7, #3]
 800f258:	6879      	ldr	r1, [r7, #4]
 800f25a:	4613      	mov	r3, r2
 800f25c:	00db      	lsls	r3, r3, #3
 800f25e:	4413      	add	r3, r2
 800f260:	009b      	lsls	r3, r3, #2
 800f262:	440b      	add	r3, r1
 800f264:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800f268:	681a      	ldr	r2, [r3, #0]
 800f26a:	78fb      	ldrb	r3, [r7, #3]
 800f26c:	4619      	mov	r1, r3
 800f26e:	f7fe fb41 	bl	800d8f4 <USBD_LL_DataOutStage>
}
 800f272:	bf00      	nop
 800f274:	3708      	adds	r7, #8
 800f276:	46bd      	mov	sp, r7
 800f278:	bd80      	pop	{r7, pc}

0800f27a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f27a:	b580      	push	{r7, lr}
 800f27c:	b082      	sub	sp, #8
 800f27e:	af00      	add	r7, sp, #0
 800f280:	6078      	str	r0, [r7, #4]
 800f282:	460b      	mov	r3, r1
 800f284:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800f286:	687b      	ldr	r3, [r7, #4]
 800f288:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800f28c:	78fa      	ldrb	r2, [r7, #3]
 800f28e:	6879      	ldr	r1, [r7, #4]
 800f290:	4613      	mov	r3, r2
 800f292:	00db      	lsls	r3, r3, #3
 800f294:	4413      	add	r3, r2
 800f296:	009b      	lsls	r3, r3, #2
 800f298:	440b      	add	r3, r1
 800f29a:	334c      	adds	r3, #76	; 0x4c
 800f29c:	681a      	ldr	r2, [r3, #0]
 800f29e:	78fb      	ldrb	r3, [r7, #3]
 800f2a0:	4619      	mov	r1, r3
 800f2a2:	f7fe fbda 	bl	800da5a <USBD_LL_DataInStage>
}
 800f2a6:	bf00      	nop
 800f2a8:	3708      	adds	r7, #8
 800f2aa:	46bd      	mov	sp, r7
 800f2ac:	bd80      	pop	{r7, pc}

0800f2ae <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f2ae:	b580      	push	{r7, lr}
 800f2b0:	b082      	sub	sp, #8
 800f2b2:	af00      	add	r7, sp, #0
 800f2b4:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800f2b6:	687b      	ldr	r3, [r7, #4]
 800f2b8:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800f2bc:	4618      	mov	r0, r3
 800f2be:	f7fe fd0e 	bl	800dcde <USBD_LL_SOF>
}
 800f2c2:	bf00      	nop
 800f2c4:	3708      	adds	r7, #8
 800f2c6:	46bd      	mov	sp, r7
 800f2c8:	bd80      	pop	{r7, pc}

0800f2ca <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f2ca:	b580      	push	{r7, lr}
 800f2cc:	b084      	sub	sp, #16
 800f2ce:	af00      	add	r7, sp, #0
 800f2d0:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800f2d2:	2301      	movs	r3, #1
 800f2d4:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800f2d6:	687b      	ldr	r3, [r7, #4]
 800f2d8:	68db      	ldr	r3, [r3, #12]
 800f2da:	2b00      	cmp	r3, #0
 800f2dc:	d102      	bne.n	800f2e4 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800f2de:	2300      	movs	r3, #0
 800f2e0:	73fb      	strb	r3, [r7, #15]
 800f2e2:	e008      	b.n	800f2f6 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800f2e4:	687b      	ldr	r3, [r7, #4]
 800f2e6:	68db      	ldr	r3, [r3, #12]
 800f2e8:	2b02      	cmp	r3, #2
 800f2ea:	d102      	bne.n	800f2f2 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800f2ec:	2301      	movs	r3, #1
 800f2ee:	73fb      	strb	r3, [r7, #15]
 800f2f0:	e001      	b.n	800f2f6 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800f2f2:	f7f2 fd1b 	bl	8001d2c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800f2f6:	687b      	ldr	r3, [r7, #4]
 800f2f8:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800f2fc:	7bfa      	ldrb	r2, [r7, #15]
 800f2fe:	4611      	mov	r1, r2
 800f300:	4618      	mov	r0, r3
 800f302:	f7fe fcae 	bl	800dc62 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800f306:	687b      	ldr	r3, [r7, #4]
 800f308:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800f30c:	4618      	mov	r0, r3
 800f30e:	f7fe fc56 	bl	800dbbe <USBD_LL_Reset>
}
 800f312:	bf00      	nop
 800f314:	3710      	adds	r7, #16
 800f316:	46bd      	mov	sp, r7
 800f318:	bd80      	pop	{r7, pc}
	...

0800f31c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f31c:	b580      	push	{r7, lr}
 800f31e:	b082      	sub	sp, #8
 800f320:	af00      	add	r7, sp, #0
 800f322:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800f324:	687b      	ldr	r3, [r7, #4]
 800f326:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800f32a:	4618      	mov	r0, r3
 800f32c:	f7fe fca9 	bl	800dc82 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800f330:	687b      	ldr	r3, [r7, #4]
 800f332:	681b      	ldr	r3, [r3, #0]
 800f334:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800f338:	681b      	ldr	r3, [r3, #0]
 800f33a:	687a      	ldr	r2, [r7, #4]
 800f33c:	6812      	ldr	r2, [r2, #0]
 800f33e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800f342:	f043 0301 	orr.w	r3, r3, #1
 800f346:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800f348:	687b      	ldr	r3, [r7, #4]
 800f34a:	6a1b      	ldr	r3, [r3, #32]
 800f34c:	2b00      	cmp	r3, #0
 800f34e:	d005      	beq.n	800f35c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800f350:	4b04      	ldr	r3, [pc, #16]	; (800f364 <HAL_PCD_SuspendCallback+0x48>)
 800f352:	691b      	ldr	r3, [r3, #16]
 800f354:	4a03      	ldr	r2, [pc, #12]	; (800f364 <HAL_PCD_SuspendCallback+0x48>)
 800f356:	f043 0306 	orr.w	r3, r3, #6
 800f35a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800f35c:	bf00      	nop
 800f35e:	3708      	adds	r7, #8
 800f360:	46bd      	mov	sp, r7
 800f362:	bd80      	pop	{r7, pc}
 800f364:	e000ed00 	.word	0xe000ed00

0800f368 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f368:	b580      	push	{r7, lr}
 800f36a:	b082      	sub	sp, #8
 800f36c:	af00      	add	r7, sp, #0
 800f36e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800f370:	687b      	ldr	r3, [r7, #4]
 800f372:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800f376:	4618      	mov	r0, r3
 800f378:	f7fe fc99 	bl	800dcae <USBD_LL_Resume>
}
 800f37c:	bf00      	nop
 800f37e:	3708      	adds	r7, #8
 800f380:	46bd      	mov	sp, r7
 800f382:	bd80      	pop	{r7, pc}

0800f384 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f384:	b580      	push	{r7, lr}
 800f386:	b082      	sub	sp, #8
 800f388:	af00      	add	r7, sp, #0
 800f38a:	6078      	str	r0, [r7, #4]
 800f38c:	460b      	mov	r3, r1
 800f38e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800f390:	687b      	ldr	r3, [r7, #4]
 800f392:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800f396:	78fa      	ldrb	r2, [r7, #3]
 800f398:	4611      	mov	r1, r2
 800f39a:	4618      	mov	r0, r3
 800f39c:	f7fe fcf1 	bl	800dd82 <USBD_LL_IsoOUTIncomplete>
}
 800f3a0:	bf00      	nop
 800f3a2:	3708      	adds	r7, #8
 800f3a4:	46bd      	mov	sp, r7
 800f3a6:	bd80      	pop	{r7, pc}

0800f3a8 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f3a8:	b580      	push	{r7, lr}
 800f3aa:	b082      	sub	sp, #8
 800f3ac:	af00      	add	r7, sp, #0
 800f3ae:	6078      	str	r0, [r7, #4]
 800f3b0:	460b      	mov	r3, r1
 800f3b2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800f3b4:	687b      	ldr	r3, [r7, #4]
 800f3b6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800f3ba:	78fa      	ldrb	r2, [r7, #3]
 800f3bc:	4611      	mov	r1, r2
 800f3be:	4618      	mov	r0, r3
 800f3c0:	f7fe fcad 	bl	800dd1e <USBD_LL_IsoINIncomplete>
}
 800f3c4:	bf00      	nop
 800f3c6:	3708      	adds	r7, #8
 800f3c8:	46bd      	mov	sp, r7
 800f3ca:	bd80      	pop	{r7, pc}

0800f3cc <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f3cc:	b580      	push	{r7, lr}
 800f3ce:	b082      	sub	sp, #8
 800f3d0:	af00      	add	r7, sp, #0
 800f3d2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800f3d4:	687b      	ldr	r3, [r7, #4]
 800f3d6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800f3da:	4618      	mov	r0, r3
 800f3dc:	f7fe fd03 	bl	800dde6 <USBD_LL_DevConnected>
}
 800f3e0:	bf00      	nop
 800f3e2:	3708      	adds	r7, #8
 800f3e4:	46bd      	mov	sp, r7
 800f3e6:	bd80      	pop	{r7, pc}

0800f3e8 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f3e8:	b580      	push	{r7, lr}
 800f3ea:	b082      	sub	sp, #8
 800f3ec:	af00      	add	r7, sp, #0
 800f3ee:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800f3f0:	687b      	ldr	r3, [r7, #4]
 800f3f2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800f3f6:	4618      	mov	r0, r3
 800f3f8:	f7fe fd00 	bl	800ddfc <USBD_LL_DevDisconnected>
}
 800f3fc:	bf00      	nop
 800f3fe:	3708      	adds	r7, #8
 800f400:	46bd      	mov	sp, r7
 800f402:	bd80      	pop	{r7, pc}

0800f404 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800f404:	b580      	push	{r7, lr}
 800f406:	b082      	sub	sp, #8
 800f408:	af00      	add	r7, sp, #0
 800f40a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800f40c:	687b      	ldr	r3, [r7, #4]
 800f40e:	781b      	ldrb	r3, [r3, #0]
 800f410:	2b00      	cmp	r3, #0
 800f412:	d13c      	bne.n	800f48e <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800f414:	4a20      	ldr	r2, [pc, #128]	; (800f498 <USBD_LL_Init+0x94>)
 800f416:	687b      	ldr	r3, [r7, #4]
 800f418:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 800f41c:	687b      	ldr	r3, [r7, #4]
 800f41e:	4a1e      	ldr	r2, [pc, #120]	; (800f498 <USBD_LL_Init+0x94>)
 800f420:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800f424:	4b1c      	ldr	r3, [pc, #112]	; (800f498 <USBD_LL_Init+0x94>)
 800f426:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800f42a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 800f42c:	4b1a      	ldr	r3, [pc, #104]	; (800f498 <USBD_LL_Init+0x94>)
 800f42e:	2206      	movs	r2, #6
 800f430:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800f432:	4b19      	ldr	r3, [pc, #100]	; (800f498 <USBD_LL_Init+0x94>)
 800f434:	2202      	movs	r2, #2
 800f436:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800f438:	4b17      	ldr	r3, [pc, #92]	; (800f498 <USBD_LL_Init+0x94>)
 800f43a:	2200      	movs	r2, #0
 800f43c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800f43e:	4b16      	ldr	r3, [pc, #88]	; (800f498 <USBD_LL_Init+0x94>)
 800f440:	2202      	movs	r2, #2
 800f442:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800f444:	4b14      	ldr	r3, [pc, #80]	; (800f498 <USBD_LL_Init+0x94>)
 800f446:	2200      	movs	r2, #0
 800f448:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800f44a:	4b13      	ldr	r3, [pc, #76]	; (800f498 <USBD_LL_Init+0x94>)
 800f44c:	2200      	movs	r2, #0
 800f44e:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800f450:	4b11      	ldr	r3, [pc, #68]	; (800f498 <USBD_LL_Init+0x94>)
 800f452:	2200      	movs	r2, #0
 800f454:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800f456:	4b10      	ldr	r3, [pc, #64]	; (800f498 <USBD_LL_Init+0x94>)
 800f458:	2200      	movs	r2, #0
 800f45a:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800f45c:	4b0e      	ldr	r3, [pc, #56]	; (800f498 <USBD_LL_Init+0x94>)
 800f45e:	2200      	movs	r2, #0
 800f460:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800f462:	480d      	ldr	r0, [pc, #52]	; (800f498 <USBD_LL_Init+0x94>)
 800f464:	f7f8 ff8d 	bl	8008382 <HAL_PCD_Init>
 800f468:	4603      	mov	r3, r0
 800f46a:	2b00      	cmp	r3, #0
 800f46c:	d001      	beq.n	800f472 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800f46e:	f7f2 fc5d 	bl	8001d2c <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800f472:	2180      	movs	r1, #128	; 0x80
 800f474:	4808      	ldr	r0, [pc, #32]	; (800f498 <USBD_LL_Init+0x94>)
 800f476:	f7fa fa18 	bl	80098aa <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800f47a:	2240      	movs	r2, #64	; 0x40
 800f47c:	2100      	movs	r1, #0
 800f47e:	4806      	ldr	r0, [pc, #24]	; (800f498 <USBD_LL_Init+0x94>)
 800f480:	f7fa f9cc 	bl	800981c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800f484:	2280      	movs	r2, #128	; 0x80
 800f486:	2101      	movs	r1, #1
 800f488:	4803      	ldr	r0, [pc, #12]	; (800f498 <USBD_LL_Init+0x94>)
 800f48a:	f7fa f9c7 	bl	800981c <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800f48e:	2300      	movs	r3, #0
}
 800f490:	4618      	mov	r0, r3
 800f492:	3708      	adds	r7, #8
 800f494:	46bd      	mov	sp, r7
 800f496:	bd80      	pop	{r7, pc}
 800f498:	20001ca8 	.word	0x20001ca8

0800f49c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800f49c:	b580      	push	{r7, lr}
 800f49e:	b084      	sub	sp, #16
 800f4a0:	af00      	add	r7, sp, #0
 800f4a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f4a4:	2300      	movs	r3, #0
 800f4a6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f4a8:	2300      	movs	r3, #0
 800f4aa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800f4ac:	687b      	ldr	r3, [r7, #4]
 800f4ae:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800f4b2:	4618      	mov	r0, r3
 800f4b4:	f7f9 f889 	bl	80085ca <HAL_PCD_Start>
 800f4b8:	4603      	mov	r3, r0
 800f4ba:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f4bc:	7bfb      	ldrb	r3, [r7, #15]
 800f4be:	4618      	mov	r0, r3
 800f4c0:	f000 f990 	bl	800f7e4 <USBD_Get_USB_Status>
 800f4c4:	4603      	mov	r3, r0
 800f4c6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f4c8:	7bbb      	ldrb	r3, [r7, #14]
}
 800f4ca:	4618      	mov	r0, r3
 800f4cc:	3710      	adds	r7, #16
 800f4ce:	46bd      	mov	sp, r7
 800f4d0:	bd80      	pop	{r7, pc}

0800f4d2 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800f4d2:	b580      	push	{r7, lr}
 800f4d4:	b084      	sub	sp, #16
 800f4d6:	af00      	add	r7, sp, #0
 800f4d8:	6078      	str	r0, [r7, #4]
 800f4da:	4608      	mov	r0, r1
 800f4dc:	4611      	mov	r1, r2
 800f4de:	461a      	mov	r2, r3
 800f4e0:	4603      	mov	r3, r0
 800f4e2:	70fb      	strb	r3, [r7, #3]
 800f4e4:	460b      	mov	r3, r1
 800f4e6:	70bb      	strb	r3, [r7, #2]
 800f4e8:	4613      	mov	r3, r2
 800f4ea:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f4ec:	2300      	movs	r3, #0
 800f4ee:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f4f0:	2300      	movs	r3, #0
 800f4f2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800f4f4:	687b      	ldr	r3, [r7, #4]
 800f4f6:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800f4fa:	78bb      	ldrb	r3, [r7, #2]
 800f4fc:	883a      	ldrh	r2, [r7, #0]
 800f4fe:	78f9      	ldrb	r1, [r7, #3]
 800f500:	f7f9 fd87 	bl	8009012 <HAL_PCD_EP_Open>
 800f504:	4603      	mov	r3, r0
 800f506:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f508:	7bfb      	ldrb	r3, [r7, #15]
 800f50a:	4618      	mov	r0, r3
 800f50c:	f000 f96a 	bl	800f7e4 <USBD_Get_USB_Status>
 800f510:	4603      	mov	r3, r0
 800f512:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f514:	7bbb      	ldrb	r3, [r7, #14]
}
 800f516:	4618      	mov	r0, r3
 800f518:	3710      	adds	r7, #16
 800f51a:	46bd      	mov	sp, r7
 800f51c:	bd80      	pop	{r7, pc}

0800f51e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f51e:	b580      	push	{r7, lr}
 800f520:	b084      	sub	sp, #16
 800f522:	af00      	add	r7, sp, #0
 800f524:	6078      	str	r0, [r7, #4]
 800f526:	460b      	mov	r3, r1
 800f528:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f52a:	2300      	movs	r3, #0
 800f52c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f52e:	2300      	movs	r3, #0
 800f530:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800f532:	687b      	ldr	r3, [r7, #4]
 800f534:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800f538:	78fa      	ldrb	r2, [r7, #3]
 800f53a:	4611      	mov	r1, r2
 800f53c:	4618      	mov	r0, r3
 800f53e:	f7f9 fdd0 	bl	80090e2 <HAL_PCD_EP_Close>
 800f542:	4603      	mov	r3, r0
 800f544:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f546:	7bfb      	ldrb	r3, [r7, #15]
 800f548:	4618      	mov	r0, r3
 800f54a:	f000 f94b 	bl	800f7e4 <USBD_Get_USB_Status>
 800f54e:	4603      	mov	r3, r0
 800f550:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f552:	7bbb      	ldrb	r3, [r7, #14]
}
 800f554:	4618      	mov	r0, r3
 800f556:	3710      	adds	r7, #16
 800f558:	46bd      	mov	sp, r7
 800f55a:	bd80      	pop	{r7, pc}

0800f55c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f55c:	b580      	push	{r7, lr}
 800f55e:	b084      	sub	sp, #16
 800f560:	af00      	add	r7, sp, #0
 800f562:	6078      	str	r0, [r7, #4]
 800f564:	460b      	mov	r3, r1
 800f566:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f568:	2300      	movs	r3, #0
 800f56a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f56c:	2300      	movs	r3, #0
 800f56e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800f570:	687b      	ldr	r3, [r7, #4]
 800f572:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800f576:	78fa      	ldrb	r2, [r7, #3]
 800f578:	4611      	mov	r1, r2
 800f57a:	4618      	mov	r0, r3
 800f57c:	f7f9 fea8 	bl	80092d0 <HAL_PCD_EP_SetStall>
 800f580:	4603      	mov	r3, r0
 800f582:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f584:	7bfb      	ldrb	r3, [r7, #15]
 800f586:	4618      	mov	r0, r3
 800f588:	f000 f92c 	bl	800f7e4 <USBD_Get_USB_Status>
 800f58c:	4603      	mov	r3, r0
 800f58e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f590:	7bbb      	ldrb	r3, [r7, #14]
}
 800f592:	4618      	mov	r0, r3
 800f594:	3710      	adds	r7, #16
 800f596:	46bd      	mov	sp, r7
 800f598:	bd80      	pop	{r7, pc}

0800f59a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f59a:	b580      	push	{r7, lr}
 800f59c:	b084      	sub	sp, #16
 800f59e:	af00      	add	r7, sp, #0
 800f5a0:	6078      	str	r0, [r7, #4]
 800f5a2:	460b      	mov	r3, r1
 800f5a4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f5a6:	2300      	movs	r3, #0
 800f5a8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f5aa:	2300      	movs	r3, #0
 800f5ac:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800f5ae:	687b      	ldr	r3, [r7, #4]
 800f5b0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800f5b4:	78fa      	ldrb	r2, [r7, #3]
 800f5b6:	4611      	mov	r1, r2
 800f5b8:	4618      	mov	r0, r3
 800f5ba:	f7f9 feed 	bl	8009398 <HAL_PCD_EP_ClrStall>
 800f5be:	4603      	mov	r3, r0
 800f5c0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f5c2:	7bfb      	ldrb	r3, [r7, #15]
 800f5c4:	4618      	mov	r0, r3
 800f5c6:	f000 f90d 	bl	800f7e4 <USBD_Get_USB_Status>
 800f5ca:	4603      	mov	r3, r0
 800f5cc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f5ce:	7bbb      	ldrb	r3, [r7, #14]
}
 800f5d0:	4618      	mov	r0, r3
 800f5d2:	3710      	adds	r7, #16
 800f5d4:	46bd      	mov	sp, r7
 800f5d6:	bd80      	pop	{r7, pc}

0800f5d8 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f5d8:	b480      	push	{r7}
 800f5da:	b085      	sub	sp, #20
 800f5dc:	af00      	add	r7, sp, #0
 800f5de:	6078      	str	r0, [r7, #4]
 800f5e0:	460b      	mov	r3, r1
 800f5e2:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800f5e4:	687b      	ldr	r3, [r7, #4]
 800f5e6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800f5ea:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800f5ec:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800f5f0:	2b00      	cmp	r3, #0
 800f5f2:	da0b      	bge.n	800f60c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800f5f4:	78fb      	ldrb	r3, [r7, #3]
 800f5f6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800f5fa:	68f9      	ldr	r1, [r7, #12]
 800f5fc:	4613      	mov	r3, r2
 800f5fe:	00db      	lsls	r3, r3, #3
 800f600:	4413      	add	r3, r2
 800f602:	009b      	lsls	r3, r3, #2
 800f604:	440b      	add	r3, r1
 800f606:	333e      	adds	r3, #62	; 0x3e
 800f608:	781b      	ldrb	r3, [r3, #0]
 800f60a:	e00b      	b.n	800f624 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800f60c:	78fb      	ldrb	r3, [r7, #3]
 800f60e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800f612:	68f9      	ldr	r1, [r7, #12]
 800f614:	4613      	mov	r3, r2
 800f616:	00db      	lsls	r3, r3, #3
 800f618:	4413      	add	r3, r2
 800f61a:	009b      	lsls	r3, r3, #2
 800f61c:	440b      	add	r3, r1
 800f61e:	f203 237e 	addw	r3, r3, #638	; 0x27e
 800f622:	781b      	ldrb	r3, [r3, #0]
  }
}
 800f624:	4618      	mov	r0, r3
 800f626:	3714      	adds	r7, #20
 800f628:	46bd      	mov	sp, r7
 800f62a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f62e:	4770      	bx	lr

0800f630 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800f630:	b580      	push	{r7, lr}
 800f632:	b084      	sub	sp, #16
 800f634:	af00      	add	r7, sp, #0
 800f636:	6078      	str	r0, [r7, #4]
 800f638:	460b      	mov	r3, r1
 800f63a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f63c:	2300      	movs	r3, #0
 800f63e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f640:	2300      	movs	r3, #0
 800f642:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800f644:	687b      	ldr	r3, [r7, #4]
 800f646:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800f64a:	78fa      	ldrb	r2, [r7, #3]
 800f64c:	4611      	mov	r1, r2
 800f64e:	4618      	mov	r0, r3
 800f650:	f7f9 fcba 	bl	8008fc8 <HAL_PCD_SetAddress>
 800f654:	4603      	mov	r3, r0
 800f656:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f658:	7bfb      	ldrb	r3, [r7, #15]
 800f65a:	4618      	mov	r0, r3
 800f65c:	f000 f8c2 	bl	800f7e4 <USBD_Get_USB_Status>
 800f660:	4603      	mov	r3, r0
 800f662:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f664:	7bbb      	ldrb	r3, [r7, #14]
}
 800f666:	4618      	mov	r0, r3
 800f668:	3710      	adds	r7, #16
 800f66a:	46bd      	mov	sp, r7
 800f66c:	bd80      	pop	{r7, pc}

0800f66e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800f66e:	b580      	push	{r7, lr}
 800f670:	b086      	sub	sp, #24
 800f672:	af00      	add	r7, sp, #0
 800f674:	60f8      	str	r0, [r7, #12]
 800f676:	607a      	str	r2, [r7, #4]
 800f678:	603b      	str	r3, [r7, #0]
 800f67a:	460b      	mov	r3, r1
 800f67c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f67e:	2300      	movs	r3, #0
 800f680:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f682:	2300      	movs	r3, #0
 800f684:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800f686:	68fb      	ldr	r3, [r7, #12]
 800f688:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800f68c:	7af9      	ldrb	r1, [r7, #11]
 800f68e:	683b      	ldr	r3, [r7, #0]
 800f690:	687a      	ldr	r2, [r7, #4]
 800f692:	f7f9 fdd3 	bl	800923c <HAL_PCD_EP_Transmit>
 800f696:	4603      	mov	r3, r0
 800f698:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f69a:	7dfb      	ldrb	r3, [r7, #23]
 800f69c:	4618      	mov	r0, r3
 800f69e:	f000 f8a1 	bl	800f7e4 <USBD_Get_USB_Status>
 800f6a2:	4603      	mov	r3, r0
 800f6a4:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800f6a6:	7dbb      	ldrb	r3, [r7, #22]
}
 800f6a8:	4618      	mov	r0, r3
 800f6aa:	3718      	adds	r7, #24
 800f6ac:	46bd      	mov	sp, r7
 800f6ae:	bd80      	pop	{r7, pc}

0800f6b0 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800f6b0:	b580      	push	{r7, lr}
 800f6b2:	b086      	sub	sp, #24
 800f6b4:	af00      	add	r7, sp, #0
 800f6b6:	60f8      	str	r0, [r7, #12]
 800f6b8:	607a      	str	r2, [r7, #4]
 800f6ba:	603b      	str	r3, [r7, #0]
 800f6bc:	460b      	mov	r3, r1
 800f6be:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f6c0:	2300      	movs	r3, #0
 800f6c2:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f6c4:	2300      	movs	r3, #0
 800f6c6:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800f6c8:	68fb      	ldr	r3, [r7, #12]
 800f6ca:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800f6ce:	7af9      	ldrb	r1, [r7, #11]
 800f6d0:	683b      	ldr	r3, [r7, #0]
 800f6d2:	687a      	ldr	r2, [r7, #4]
 800f6d4:	f7f9 fd4f 	bl	8009176 <HAL_PCD_EP_Receive>
 800f6d8:	4603      	mov	r3, r0
 800f6da:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f6dc:	7dfb      	ldrb	r3, [r7, #23]
 800f6de:	4618      	mov	r0, r3
 800f6e0:	f000 f880 	bl	800f7e4 <USBD_Get_USB_Status>
 800f6e4:	4603      	mov	r3, r0
 800f6e6:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800f6e8:	7dbb      	ldrb	r3, [r7, #22]
}
 800f6ea:	4618      	mov	r0, r3
 800f6ec:	3718      	adds	r7, #24
 800f6ee:	46bd      	mov	sp, r7
 800f6f0:	bd80      	pop	{r7, pc}

0800f6f2 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f6f2:	b580      	push	{r7, lr}
 800f6f4:	b082      	sub	sp, #8
 800f6f6:	af00      	add	r7, sp, #0
 800f6f8:	6078      	str	r0, [r7, #4]
 800f6fa:	460b      	mov	r3, r1
 800f6fc:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800f6fe:	687b      	ldr	r3, [r7, #4]
 800f700:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800f704:	78fa      	ldrb	r2, [r7, #3]
 800f706:	4611      	mov	r1, r2
 800f708:	4618      	mov	r0, r3
 800f70a:	f7f9 fd7f 	bl	800920c <HAL_PCD_EP_GetRxCount>
 800f70e:	4603      	mov	r3, r0
}
 800f710:	4618      	mov	r0, r3
 800f712:	3708      	adds	r7, #8
 800f714:	46bd      	mov	sp, r7
 800f716:	bd80      	pop	{r7, pc}

0800f718 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800f718:	b580      	push	{r7, lr}
 800f71a:	b082      	sub	sp, #8
 800f71c:	af00      	add	r7, sp, #0
 800f71e:	6078      	str	r0, [r7, #4]
 800f720:	460b      	mov	r3, r1
 800f722:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 800f724:	78fb      	ldrb	r3, [r7, #3]
 800f726:	2b00      	cmp	r3, #0
 800f728:	d002      	beq.n	800f730 <HAL_PCDEx_LPM_Callback+0x18>
 800f72a:	2b01      	cmp	r3, #1
 800f72c:	d01f      	beq.n	800f76e <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 800f72e:	e03b      	b.n	800f7a8 <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 800f730:	687b      	ldr	r3, [r7, #4]
 800f732:	6a1b      	ldr	r3, [r3, #32]
 800f734:	2b00      	cmp	r3, #0
 800f736:	d007      	beq.n	800f748 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClock_Config();
 800f738:	f7f2 fa8c 	bl	8001c54 <SystemClock_Config>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800f73c:	4b1c      	ldr	r3, [pc, #112]	; (800f7b0 <HAL_PCDEx_LPM_Callback+0x98>)
 800f73e:	691b      	ldr	r3, [r3, #16]
 800f740:	4a1b      	ldr	r2, [pc, #108]	; (800f7b0 <HAL_PCDEx_LPM_Callback+0x98>)
 800f742:	f023 0306 	bic.w	r3, r3, #6
 800f746:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 800f748:	687b      	ldr	r3, [r7, #4]
 800f74a:	681b      	ldr	r3, [r3, #0]
 800f74c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800f750:	681b      	ldr	r3, [r3, #0]
 800f752:	687a      	ldr	r2, [r7, #4]
 800f754:	6812      	ldr	r2, [r2, #0]
 800f756:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800f75a:	f023 0301 	bic.w	r3, r3, #1
 800f75e:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 800f760:	687b      	ldr	r3, [r7, #4]
 800f762:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800f766:	4618      	mov	r0, r3
 800f768:	f7fe faa1 	bl	800dcae <USBD_LL_Resume>
    break;
 800f76c:	e01c      	b.n	800f7a8 <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800f76e:	687b      	ldr	r3, [r7, #4]
 800f770:	681b      	ldr	r3, [r3, #0]
 800f772:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800f776:	681b      	ldr	r3, [r3, #0]
 800f778:	687a      	ldr	r2, [r7, #4]
 800f77a:	6812      	ldr	r2, [r2, #0]
 800f77c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800f780:	f043 0301 	orr.w	r3, r3, #1
 800f784:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 800f786:	687b      	ldr	r3, [r7, #4]
 800f788:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800f78c:	4618      	mov	r0, r3
 800f78e:	f7fe fa78 	bl	800dc82 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800f792:	687b      	ldr	r3, [r7, #4]
 800f794:	6a1b      	ldr	r3, [r3, #32]
 800f796:	2b00      	cmp	r3, #0
 800f798:	d005      	beq.n	800f7a6 <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800f79a:	4b05      	ldr	r3, [pc, #20]	; (800f7b0 <HAL_PCDEx_LPM_Callback+0x98>)
 800f79c:	691b      	ldr	r3, [r3, #16]
 800f79e:	4a04      	ldr	r2, [pc, #16]	; (800f7b0 <HAL_PCDEx_LPM_Callback+0x98>)
 800f7a0:	f043 0306 	orr.w	r3, r3, #6
 800f7a4:	6113      	str	r3, [r2, #16]
    break;
 800f7a6:	bf00      	nop
}
 800f7a8:	bf00      	nop
 800f7aa:	3708      	adds	r7, #8
 800f7ac:	46bd      	mov	sp, r7
 800f7ae:	bd80      	pop	{r7, pc}
 800f7b0:	e000ed00 	.word	0xe000ed00

0800f7b4 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800f7b4:	b480      	push	{r7}
 800f7b6:	b083      	sub	sp, #12
 800f7b8:	af00      	add	r7, sp, #0
 800f7ba:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800f7bc:	4b03      	ldr	r3, [pc, #12]	; (800f7cc <USBD_static_malloc+0x18>)
}
 800f7be:	4618      	mov	r0, r3
 800f7c0:	370c      	adds	r7, #12
 800f7c2:	46bd      	mov	sp, r7
 800f7c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7c8:	4770      	bx	lr
 800f7ca:	bf00      	nop
 800f7cc:	200021b4 	.word	0x200021b4

0800f7d0 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800f7d0:	b480      	push	{r7}
 800f7d2:	b083      	sub	sp, #12
 800f7d4:	af00      	add	r7, sp, #0
 800f7d6:	6078      	str	r0, [r7, #4]

}
 800f7d8:	bf00      	nop
 800f7da:	370c      	adds	r7, #12
 800f7dc:	46bd      	mov	sp, r7
 800f7de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7e2:	4770      	bx	lr

0800f7e4 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800f7e4:	b480      	push	{r7}
 800f7e6:	b085      	sub	sp, #20
 800f7e8:	af00      	add	r7, sp, #0
 800f7ea:	4603      	mov	r3, r0
 800f7ec:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f7ee:	2300      	movs	r3, #0
 800f7f0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800f7f2:	79fb      	ldrb	r3, [r7, #7]
 800f7f4:	2b03      	cmp	r3, #3
 800f7f6:	d817      	bhi.n	800f828 <USBD_Get_USB_Status+0x44>
 800f7f8:	a201      	add	r2, pc, #4	; (adr r2, 800f800 <USBD_Get_USB_Status+0x1c>)
 800f7fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f7fe:	bf00      	nop
 800f800:	0800f811 	.word	0x0800f811
 800f804:	0800f817 	.word	0x0800f817
 800f808:	0800f81d 	.word	0x0800f81d
 800f80c:	0800f823 	.word	0x0800f823
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800f810:	2300      	movs	r3, #0
 800f812:	73fb      	strb	r3, [r7, #15]
    break;
 800f814:	e00b      	b.n	800f82e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800f816:	2303      	movs	r3, #3
 800f818:	73fb      	strb	r3, [r7, #15]
    break;
 800f81a:	e008      	b.n	800f82e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800f81c:	2301      	movs	r3, #1
 800f81e:	73fb      	strb	r3, [r7, #15]
    break;
 800f820:	e005      	b.n	800f82e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800f822:	2303      	movs	r3, #3
 800f824:	73fb      	strb	r3, [r7, #15]
    break;
 800f826:	e002      	b.n	800f82e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800f828:	2303      	movs	r3, #3
 800f82a:	73fb      	strb	r3, [r7, #15]
    break;
 800f82c:	bf00      	nop
  }
  return usb_status;
 800f82e:	7bfb      	ldrb	r3, [r7, #15]
}
 800f830:	4618      	mov	r0, r3
 800f832:	3714      	adds	r7, #20
 800f834:	46bd      	mov	sp, r7
 800f836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f83a:	4770      	bx	lr

0800f83c <__errno>:
 800f83c:	4b01      	ldr	r3, [pc, #4]	; (800f844 <__errno+0x8>)
 800f83e:	6818      	ldr	r0, [r3, #0]
 800f840:	4770      	bx	lr
 800f842:	bf00      	nop
 800f844:	20000208 	.word	0x20000208

0800f848 <__libc_init_array>:
 800f848:	b570      	push	{r4, r5, r6, lr}
 800f84a:	4d0d      	ldr	r5, [pc, #52]	; (800f880 <__libc_init_array+0x38>)
 800f84c:	4c0d      	ldr	r4, [pc, #52]	; (800f884 <__libc_init_array+0x3c>)
 800f84e:	1b64      	subs	r4, r4, r5
 800f850:	10a4      	asrs	r4, r4, #2
 800f852:	2600      	movs	r6, #0
 800f854:	42a6      	cmp	r6, r4
 800f856:	d109      	bne.n	800f86c <__libc_init_array+0x24>
 800f858:	4d0b      	ldr	r5, [pc, #44]	; (800f888 <__libc_init_array+0x40>)
 800f85a:	4c0c      	ldr	r4, [pc, #48]	; (800f88c <__libc_init_array+0x44>)
 800f85c:	f004 fc30 	bl	80140c0 <_init>
 800f860:	1b64      	subs	r4, r4, r5
 800f862:	10a4      	asrs	r4, r4, #2
 800f864:	2600      	movs	r6, #0
 800f866:	42a6      	cmp	r6, r4
 800f868:	d105      	bne.n	800f876 <__libc_init_array+0x2e>
 800f86a:	bd70      	pop	{r4, r5, r6, pc}
 800f86c:	f855 3b04 	ldr.w	r3, [r5], #4
 800f870:	4798      	blx	r3
 800f872:	3601      	adds	r6, #1
 800f874:	e7ee      	b.n	800f854 <__libc_init_array+0xc>
 800f876:	f855 3b04 	ldr.w	r3, [r5], #4
 800f87a:	4798      	blx	r3
 800f87c:	3601      	adds	r6, #1
 800f87e:	e7f2      	b.n	800f866 <__libc_init_array+0x1e>
 800f880:	08014840 	.word	0x08014840
 800f884:	08014840 	.word	0x08014840
 800f888:	08014840 	.word	0x08014840
 800f88c:	08014844 	.word	0x08014844

0800f890 <malloc>:
 800f890:	4b02      	ldr	r3, [pc, #8]	; (800f89c <malloc+0xc>)
 800f892:	4601      	mov	r1, r0
 800f894:	6818      	ldr	r0, [r3, #0]
 800f896:	f000 b87f 	b.w	800f998 <_malloc_r>
 800f89a:	bf00      	nop
 800f89c:	20000208 	.word	0x20000208

0800f8a0 <free>:
 800f8a0:	4b02      	ldr	r3, [pc, #8]	; (800f8ac <free+0xc>)
 800f8a2:	4601      	mov	r1, r0
 800f8a4:	6818      	ldr	r0, [r3, #0]
 800f8a6:	f000 b80b 	b.w	800f8c0 <_free_r>
 800f8aa:	bf00      	nop
 800f8ac:	20000208 	.word	0x20000208

0800f8b0 <memset>:
 800f8b0:	4402      	add	r2, r0
 800f8b2:	4603      	mov	r3, r0
 800f8b4:	4293      	cmp	r3, r2
 800f8b6:	d100      	bne.n	800f8ba <memset+0xa>
 800f8b8:	4770      	bx	lr
 800f8ba:	f803 1b01 	strb.w	r1, [r3], #1
 800f8be:	e7f9      	b.n	800f8b4 <memset+0x4>

0800f8c0 <_free_r>:
 800f8c0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f8c2:	2900      	cmp	r1, #0
 800f8c4:	d044      	beq.n	800f950 <_free_r+0x90>
 800f8c6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f8ca:	9001      	str	r0, [sp, #4]
 800f8cc:	2b00      	cmp	r3, #0
 800f8ce:	f1a1 0404 	sub.w	r4, r1, #4
 800f8d2:	bfb8      	it	lt
 800f8d4:	18e4      	addlt	r4, r4, r3
 800f8d6:	f001 fc07 	bl	80110e8 <__malloc_lock>
 800f8da:	4a1e      	ldr	r2, [pc, #120]	; (800f954 <_free_r+0x94>)
 800f8dc:	9801      	ldr	r0, [sp, #4]
 800f8de:	6813      	ldr	r3, [r2, #0]
 800f8e0:	b933      	cbnz	r3, 800f8f0 <_free_r+0x30>
 800f8e2:	6063      	str	r3, [r4, #4]
 800f8e4:	6014      	str	r4, [r2, #0]
 800f8e6:	b003      	add	sp, #12
 800f8e8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800f8ec:	f001 bc02 	b.w	80110f4 <__malloc_unlock>
 800f8f0:	42a3      	cmp	r3, r4
 800f8f2:	d908      	bls.n	800f906 <_free_r+0x46>
 800f8f4:	6825      	ldr	r5, [r4, #0]
 800f8f6:	1961      	adds	r1, r4, r5
 800f8f8:	428b      	cmp	r3, r1
 800f8fa:	bf01      	itttt	eq
 800f8fc:	6819      	ldreq	r1, [r3, #0]
 800f8fe:	685b      	ldreq	r3, [r3, #4]
 800f900:	1949      	addeq	r1, r1, r5
 800f902:	6021      	streq	r1, [r4, #0]
 800f904:	e7ed      	b.n	800f8e2 <_free_r+0x22>
 800f906:	461a      	mov	r2, r3
 800f908:	685b      	ldr	r3, [r3, #4]
 800f90a:	b10b      	cbz	r3, 800f910 <_free_r+0x50>
 800f90c:	42a3      	cmp	r3, r4
 800f90e:	d9fa      	bls.n	800f906 <_free_r+0x46>
 800f910:	6811      	ldr	r1, [r2, #0]
 800f912:	1855      	adds	r5, r2, r1
 800f914:	42a5      	cmp	r5, r4
 800f916:	d10b      	bne.n	800f930 <_free_r+0x70>
 800f918:	6824      	ldr	r4, [r4, #0]
 800f91a:	4421      	add	r1, r4
 800f91c:	1854      	adds	r4, r2, r1
 800f91e:	42a3      	cmp	r3, r4
 800f920:	6011      	str	r1, [r2, #0]
 800f922:	d1e0      	bne.n	800f8e6 <_free_r+0x26>
 800f924:	681c      	ldr	r4, [r3, #0]
 800f926:	685b      	ldr	r3, [r3, #4]
 800f928:	6053      	str	r3, [r2, #4]
 800f92a:	4421      	add	r1, r4
 800f92c:	6011      	str	r1, [r2, #0]
 800f92e:	e7da      	b.n	800f8e6 <_free_r+0x26>
 800f930:	d902      	bls.n	800f938 <_free_r+0x78>
 800f932:	230c      	movs	r3, #12
 800f934:	6003      	str	r3, [r0, #0]
 800f936:	e7d6      	b.n	800f8e6 <_free_r+0x26>
 800f938:	6825      	ldr	r5, [r4, #0]
 800f93a:	1961      	adds	r1, r4, r5
 800f93c:	428b      	cmp	r3, r1
 800f93e:	bf04      	itt	eq
 800f940:	6819      	ldreq	r1, [r3, #0]
 800f942:	685b      	ldreq	r3, [r3, #4]
 800f944:	6063      	str	r3, [r4, #4]
 800f946:	bf04      	itt	eq
 800f948:	1949      	addeq	r1, r1, r5
 800f94a:	6021      	streq	r1, [r4, #0]
 800f94c:	6054      	str	r4, [r2, #4]
 800f94e:	e7ca      	b.n	800f8e6 <_free_r+0x26>
 800f950:	b003      	add	sp, #12
 800f952:	bd30      	pop	{r4, r5, pc}
 800f954:	200023d4 	.word	0x200023d4

0800f958 <sbrk_aligned>:
 800f958:	b570      	push	{r4, r5, r6, lr}
 800f95a:	4e0e      	ldr	r6, [pc, #56]	; (800f994 <sbrk_aligned+0x3c>)
 800f95c:	460c      	mov	r4, r1
 800f95e:	6831      	ldr	r1, [r6, #0]
 800f960:	4605      	mov	r5, r0
 800f962:	b911      	cbnz	r1, 800f96a <sbrk_aligned+0x12>
 800f964:	f000 fcf6 	bl	8010354 <_sbrk_r>
 800f968:	6030      	str	r0, [r6, #0]
 800f96a:	4621      	mov	r1, r4
 800f96c:	4628      	mov	r0, r5
 800f96e:	f000 fcf1 	bl	8010354 <_sbrk_r>
 800f972:	1c43      	adds	r3, r0, #1
 800f974:	d00a      	beq.n	800f98c <sbrk_aligned+0x34>
 800f976:	1cc4      	adds	r4, r0, #3
 800f978:	f024 0403 	bic.w	r4, r4, #3
 800f97c:	42a0      	cmp	r0, r4
 800f97e:	d007      	beq.n	800f990 <sbrk_aligned+0x38>
 800f980:	1a21      	subs	r1, r4, r0
 800f982:	4628      	mov	r0, r5
 800f984:	f000 fce6 	bl	8010354 <_sbrk_r>
 800f988:	3001      	adds	r0, #1
 800f98a:	d101      	bne.n	800f990 <sbrk_aligned+0x38>
 800f98c:	f04f 34ff 	mov.w	r4, #4294967295
 800f990:	4620      	mov	r0, r4
 800f992:	bd70      	pop	{r4, r5, r6, pc}
 800f994:	200023d8 	.word	0x200023d8

0800f998 <_malloc_r>:
 800f998:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f99c:	1ccd      	adds	r5, r1, #3
 800f99e:	f025 0503 	bic.w	r5, r5, #3
 800f9a2:	3508      	adds	r5, #8
 800f9a4:	2d0c      	cmp	r5, #12
 800f9a6:	bf38      	it	cc
 800f9a8:	250c      	movcc	r5, #12
 800f9aa:	2d00      	cmp	r5, #0
 800f9ac:	4607      	mov	r7, r0
 800f9ae:	db01      	blt.n	800f9b4 <_malloc_r+0x1c>
 800f9b0:	42a9      	cmp	r1, r5
 800f9b2:	d905      	bls.n	800f9c0 <_malloc_r+0x28>
 800f9b4:	230c      	movs	r3, #12
 800f9b6:	603b      	str	r3, [r7, #0]
 800f9b8:	2600      	movs	r6, #0
 800f9ba:	4630      	mov	r0, r6
 800f9bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f9c0:	4e2e      	ldr	r6, [pc, #184]	; (800fa7c <_malloc_r+0xe4>)
 800f9c2:	f001 fb91 	bl	80110e8 <__malloc_lock>
 800f9c6:	6833      	ldr	r3, [r6, #0]
 800f9c8:	461c      	mov	r4, r3
 800f9ca:	bb34      	cbnz	r4, 800fa1a <_malloc_r+0x82>
 800f9cc:	4629      	mov	r1, r5
 800f9ce:	4638      	mov	r0, r7
 800f9d0:	f7ff ffc2 	bl	800f958 <sbrk_aligned>
 800f9d4:	1c43      	adds	r3, r0, #1
 800f9d6:	4604      	mov	r4, r0
 800f9d8:	d14d      	bne.n	800fa76 <_malloc_r+0xde>
 800f9da:	6834      	ldr	r4, [r6, #0]
 800f9dc:	4626      	mov	r6, r4
 800f9de:	2e00      	cmp	r6, #0
 800f9e0:	d140      	bne.n	800fa64 <_malloc_r+0xcc>
 800f9e2:	6823      	ldr	r3, [r4, #0]
 800f9e4:	4631      	mov	r1, r6
 800f9e6:	4638      	mov	r0, r7
 800f9e8:	eb04 0803 	add.w	r8, r4, r3
 800f9ec:	f000 fcb2 	bl	8010354 <_sbrk_r>
 800f9f0:	4580      	cmp	r8, r0
 800f9f2:	d13a      	bne.n	800fa6a <_malloc_r+0xd2>
 800f9f4:	6821      	ldr	r1, [r4, #0]
 800f9f6:	3503      	adds	r5, #3
 800f9f8:	1a6d      	subs	r5, r5, r1
 800f9fa:	f025 0503 	bic.w	r5, r5, #3
 800f9fe:	3508      	adds	r5, #8
 800fa00:	2d0c      	cmp	r5, #12
 800fa02:	bf38      	it	cc
 800fa04:	250c      	movcc	r5, #12
 800fa06:	4629      	mov	r1, r5
 800fa08:	4638      	mov	r0, r7
 800fa0a:	f7ff ffa5 	bl	800f958 <sbrk_aligned>
 800fa0e:	3001      	adds	r0, #1
 800fa10:	d02b      	beq.n	800fa6a <_malloc_r+0xd2>
 800fa12:	6823      	ldr	r3, [r4, #0]
 800fa14:	442b      	add	r3, r5
 800fa16:	6023      	str	r3, [r4, #0]
 800fa18:	e00e      	b.n	800fa38 <_malloc_r+0xa0>
 800fa1a:	6822      	ldr	r2, [r4, #0]
 800fa1c:	1b52      	subs	r2, r2, r5
 800fa1e:	d41e      	bmi.n	800fa5e <_malloc_r+0xc6>
 800fa20:	2a0b      	cmp	r2, #11
 800fa22:	d916      	bls.n	800fa52 <_malloc_r+0xba>
 800fa24:	1961      	adds	r1, r4, r5
 800fa26:	42a3      	cmp	r3, r4
 800fa28:	6025      	str	r5, [r4, #0]
 800fa2a:	bf18      	it	ne
 800fa2c:	6059      	strne	r1, [r3, #4]
 800fa2e:	6863      	ldr	r3, [r4, #4]
 800fa30:	bf08      	it	eq
 800fa32:	6031      	streq	r1, [r6, #0]
 800fa34:	5162      	str	r2, [r4, r5]
 800fa36:	604b      	str	r3, [r1, #4]
 800fa38:	4638      	mov	r0, r7
 800fa3a:	f104 060b 	add.w	r6, r4, #11
 800fa3e:	f001 fb59 	bl	80110f4 <__malloc_unlock>
 800fa42:	f026 0607 	bic.w	r6, r6, #7
 800fa46:	1d23      	adds	r3, r4, #4
 800fa48:	1af2      	subs	r2, r6, r3
 800fa4a:	d0b6      	beq.n	800f9ba <_malloc_r+0x22>
 800fa4c:	1b9b      	subs	r3, r3, r6
 800fa4e:	50a3      	str	r3, [r4, r2]
 800fa50:	e7b3      	b.n	800f9ba <_malloc_r+0x22>
 800fa52:	6862      	ldr	r2, [r4, #4]
 800fa54:	42a3      	cmp	r3, r4
 800fa56:	bf0c      	ite	eq
 800fa58:	6032      	streq	r2, [r6, #0]
 800fa5a:	605a      	strne	r2, [r3, #4]
 800fa5c:	e7ec      	b.n	800fa38 <_malloc_r+0xa0>
 800fa5e:	4623      	mov	r3, r4
 800fa60:	6864      	ldr	r4, [r4, #4]
 800fa62:	e7b2      	b.n	800f9ca <_malloc_r+0x32>
 800fa64:	4634      	mov	r4, r6
 800fa66:	6876      	ldr	r6, [r6, #4]
 800fa68:	e7b9      	b.n	800f9de <_malloc_r+0x46>
 800fa6a:	230c      	movs	r3, #12
 800fa6c:	603b      	str	r3, [r7, #0]
 800fa6e:	4638      	mov	r0, r7
 800fa70:	f001 fb40 	bl	80110f4 <__malloc_unlock>
 800fa74:	e7a1      	b.n	800f9ba <_malloc_r+0x22>
 800fa76:	6025      	str	r5, [r4, #0]
 800fa78:	e7de      	b.n	800fa38 <_malloc_r+0xa0>
 800fa7a:	bf00      	nop
 800fa7c:	200023d4 	.word	0x200023d4

0800fa80 <__cvt>:
 800fa80:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800fa84:	ec55 4b10 	vmov	r4, r5, d0
 800fa88:	2d00      	cmp	r5, #0
 800fa8a:	460e      	mov	r6, r1
 800fa8c:	4619      	mov	r1, r3
 800fa8e:	462b      	mov	r3, r5
 800fa90:	bfbb      	ittet	lt
 800fa92:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800fa96:	461d      	movlt	r5, r3
 800fa98:	2300      	movge	r3, #0
 800fa9a:	232d      	movlt	r3, #45	; 0x2d
 800fa9c:	700b      	strb	r3, [r1, #0]
 800fa9e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800faa0:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800faa4:	4691      	mov	r9, r2
 800faa6:	f023 0820 	bic.w	r8, r3, #32
 800faaa:	bfbc      	itt	lt
 800faac:	4622      	movlt	r2, r4
 800faae:	4614      	movlt	r4, r2
 800fab0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800fab4:	d005      	beq.n	800fac2 <__cvt+0x42>
 800fab6:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800faba:	d100      	bne.n	800fabe <__cvt+0x3e>
 800fabc:	3601      	adds	r6, #1
 800fabe:	2102      	movs	r1, #2
 800fac0:	e000      	b.n	800fac4 <__cvt+0x44>
 800fac2:	2103      	movs	r1, #3
 800fac4:	ab03      	add	r3, sp, #12
 800fac6:	9301      	str	r3, [sp, #4]
 800fac8:	ab02      	add	r3, sp, #8
 800faca:	9300      	str	r3, [sp, #0]
 800facc:	ec45 4b10 	vmov	d0, r4, r5
 800fad0:	4653      	mov	r3, sl
 800fad2:	4632      	mov	r2, r6
 800fad4:	f000 fd08 	bl	80104e8 <_dtoa_r>
 800fad8:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800fadc:	4607      	mov	r7, r0
 800fade:	d102      	bne.n	800fae6 <__cvt+0x66>
 800fae0:	f019 0f01 	tst.w	r9, #1
 800fae4:	d022      	beq.n	800fb2c <__cvt+0xac>
 800fae6:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800faea:	eb07 0906 	add.w	r9, r7, r6
 800faee:	d110      	bne.n	800fb12 <__cvt+0x92>
 800faf0:	783b      	ldrb	r3, [r7, #0]
 800faf2:	2b30      	cmp	r3, #48	; 0x30
 800faf4:	d10a      	bne.n	800fb0c <__cvt+0x8c>
 800faf6:	2200      	movs	r2, #0
 800faf8:	2300      	movs	r3, #0
 800fafa:	4620      	mov	r0, r4
 800fafc:	4629      	mov	r1, r5
 800fafe:	f7f1 f803 	bl	8000b08 <__aeabi_dcmpeq>
 800fb02:	b918      	cbnz	r0, 800fb0c <__cvt+0x8c>
 800fb04:	f1c6 0601 	rsb	r6, r6, #1
 800fb08:	f8ca 6000 	str.w	r6, [sl]
 800fb0c:	f8da 3000 	ldr.w	r3, [sl]
 800fb10:	4499      	add	r9, r3
 800fb12:	2200      	movs	r2, #0
 800fb14:	2300      	movs	r3, #0
 800fb16:	4620      	mov	r0, r4
 800fb18:	4629      	mov	r1, r5
 800fb1a:	f7f0 fff5 	bl	8000b08 <__aeabi_dcmpeq>
 800fb1e:	b108      	cbz	r0, 800fb24 <__cvt+0xa4>
 800fb20:	f8cd 900c 	str.w	r9, [sp, #12]
 800fb24:	2230      	movs	r2, #48	; 0x30
 800fb26:	9b03      	ldr	r3, [sp, #12]
 800fb28:	454b      	cmp	r3, r9
 800fb2a:	d307      	bcc.n	800fb3c <__cvt+0xbc>
 800fb2c:	9b03      	ldr	r3, [sp, #12]
 800fb2e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800fb30:	1bdb      	subs	r3, r3, r7
 800fb32:	4638      	mov	r0, r7
 800fb34:	6013      	str	r3, [r2, #0]
 800fb36:	b004      	add	sp, #16
 800fb38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fb3c:	1c59      	adds	r1, r3, #1
 800fb3e:	9103      	str	r1, [sp, #12]
 800fb40:	701a      	strb	r2, [r3, #0]
 800fb42:	e7f0      	b.n	800fb26 <__cvt+0xa6>

0800fb44 <__exponent>:
 800fb44:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800fb46:	4603      	mov	r3, r0
 800fb48:	2900      	cmp	r1, #0
 800fb4a:	bfb8      	it	lt
 800fb4c:	4249      	neglt	r1, r1
 800fb4e:	f803 2b02 	strb.w	r2, [r3], #2
 800fb52:	bfb4      	ite	lt
 800fb54:	222d      	movlt	r2, #45	; 0x2d
 800fb56:	222b      	movge	r2, #43	; 0x2b
 800fb58:	2909      	cmp	r1, #9
 800fb5a:	7042      	strb	r2, [r0, #1]
 800fb5c:	dd2a      	ble.n	800fbb4 <__exponent+0x70>
 800fb5e:	f10d 0407 	add.w	r4, sp, #7
 800fb62:	46a4      	mov	ip, r4
 800fb64:	270a      	movs	r7, #10
 800fb66:	46a6      	mov	lr, r4
 800fb68:	460a      	mov	r2, r1
 800fb6a:	fb91 f6f7 	sdiv	r6, r1, r7
 800fb6e:	fb07 1516 	mls	r5, r7, r6, r1
 800fb72:	3530      	adds	r5, #48	; 0x30
 800fb74:	2a63      	cmp	r2, #99	; 0x63
 800fb76:	f104 34ff 	add.w	r4, r4, #4294967295
 800fb7a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800fb7e:	4631      	mov	r1, r6
 800fb80:	dcf1      	bgt.n	800fb66 <__exponent+0x22>
 800fb82:	3130      	adds	r1, #48	; 0x30
 800fb84:	f1ae 0502 	sub.w	r5, lr, #2
 800fb88:	f804 1c01 	strb.w	r1, [r4, #-1]
 800fb8c:	1c44      	adds	r4, r0, #1
 800fb8e:	4629      	mov	r1, r5
 800fb90:	4561      	cmp	r1, ip
 800fb92:	d30a      	bcc.n	800fbaa <__exponent+0x66>
 800fb94:	f10d 0209 	add.w	r2, sp, #9
 800fb98:	eba2 020e 	sub.w	r2, r2, lr
 800fb9c:	4565      	cmp	r5, ip
 800fb9e:	bf88      	it	hi
 800fba0:	2200      	movhi	r2, #0
 800fba2:	4413      	add	r3, r2
 800fba4:	1a18      	subs	r0, r3, r0
 800fba6:	b003      	add	sp, #12
 800fba8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fbaa:	f811 2b01 	ldrb.w	r2, [r1], #1
 800fbae:	f804 2f01 	strb.w	r2, [r4, #1]!
 800fbb2:	e7ed      	b.n	800fb90 <__exponent+0x4c>
 800fbb4:	2330      	movs	r3, #48	; 0x30
 800fbb6:	3130      	adds	r1, #48	; 0x30
 800fbb8:	7083      	strb	r3, [r0, #2]
 800fbba:	70c1      	strb	r1, [r0, #3]
 800fbbc:	1d03      	adds	r3, r0, #4
 800fbbe:	e7f1      	b.n	800fba4 <__exponent+0x60>

0800fbc0 <_printf_float>:
 800fbc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fbc4:	ed2d 8b02 	vpush	{d8}
 800fbc8:	b08d      	sub	sp, #52	; 0x34
 800fbca:	460c      	mov	r4, r1
 800fbcc:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800fbd0:	4616      	mov	r6, r2
 800fbd2:	461f      	mov	r7, r3
 800fbd4:	4605      	mov	r5, r0
 800fbd6:	f001 fa75 	bl	80110c4 <_localeconv_r>
 800fbda:	f8d0 a000 	ldr.w	sl, [r0]
 800fbde:	4650      	mov	r0, sl
 800fbe0:	f7f0 fb16 	bl	8000210 <strlen>
 800fbe4:	2300      	movs	r3, #0
 800fbe6:	930a      	str	r3, [sp, #40]	; 0x28
 800fbe8:	6823      	ldr	r3, [r4, #0]
 800fbea:	9305      	str	r3, [sp, #20]
 800fbec:	f8d8 3000 	ldr.w	r3, [r8]
 800fbf0:	f894 b018 	ldrb.w	fp, [r4, #24]
 800fbf4:	3307      	adds	r3, #7
 800fbf6:	f023 0307 	bic.w	r3, r3, #7
 800fbfa:	f103 0208 	add.w	r2, r3, #8
 800fbfe:	f8c8 2000 	str.w	r2, [r8]
 800fc02:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fc06:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800fc0a:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800fc0e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800fc12:	9307      	str	r3, [sp, #28]
 800fc14:	f8cd 8018 	str.w	r8, [sp, #24]
 800fc18:	ee08 0a10 	vmov	s16, r0
 800fc1c:	4b9f      	ldr	r3, [pc, #636]	; (800fe9c <_printf_float+0x2dc>)
 800fc1e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800fc22:	f04f 32ff 	mov.w	r2, #4294967295
 800fc26:	f7f0 ffa1 	bl	8000b6c <__aeabi_dcmpun>
 800fc2a:	bb88      	cbnz	r0, 800fc90 <_printf_float+0xd0>
 800fc2c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800fc30:	4b9a      	ldr	r3, [pc, #616]	; (800fe9c <_printf_float+0x2dc>)
 800fc32:	f04f 32ff 	mov.w	r2, #4294967295
 800fc36:	f7f0 ff7b 	bl	8000b30 <__aeabi_dcmple>
 800fc3a:	bb48      	cbnz	r0, 800fc90 <_printf_float+0xd0>
 800fc3c:	2200      	movs	r2, #0
 800fc3e:	2300      	movs	r3, #0
 800fc40:	4640      	mov	r0, r8
 800fc42:	4649      	mov	r1, r9
 800fc44:	f7f0 ff6a 	bl	8000b1c <__aeabi_dcmplt>
 800fc48:	b110      	cbz	r0, 800fc50 <_printf_float+0x90>
 800fc4a:	232d      	movs	r3, #45	; 0x2d
 800fc4c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800fc50:	4b93      	ldr	r3, [pc, #588]	; (800fea0 <_printf_float+0x2e0>)
 800fc52:	4894      	ldr	r0, [pc, #592]	; (800fea4 <_printf_float+0x2e4>)
 800fc54:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800fc58:	bf94      	ite	ls
 800fc5a:	4698      	movls	r8, r3
 800fc5c:	4680      	movhi	r8, r0
 800fc5e:	2303      	movs	r3, #3
 800fc60:	6123      	str	r3, [r4, #16]
 800fc62:	9b05      	ldr	r3, [sp, #20]
 800fc64:	f023 0204 	bic.w	r2, r3, #4
 800fc68:	6022      	str	r2, [r4, #0]
 800fc6a:	f04f 0900 	mov.w	r9, #0
 800fc6e:	9700      	str	r7, [sp, #0]
 800fc70:	4633      	mov	r3, r6
 800fc72:	aa0b      	add	r2, sp, #44	; 0x2c
 800fc74:	4621      	mov	r1, r4
 800fc76:	4628      	mov	r0, r5
 800fc78:	f000 f9d8 	bl	801002c <_printf_common>
 800fc7c:	3001      	adds	r0, #1
 800fc7e:	f040 8090 	bne.w	800fda2 <_printf_float+0x1e2>
 800fc82:	f04f 30ff 	mov.w	r0, #4294967295
 800fc86:	b00d      	add	sp, #52	; 0x34
 800fc88:	ecbd 8b02 	vpop	{d8}
 800fc8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fc90:	4642      	mov	r2, r8
 800fc92:	464b      	mov	r3, r9
 800fc94:	4640      	mov	r0, r8
 800fc96:	4649      	mov	r1, r9
 800fc98:	f7f0 ff68 	bl	8000b6c <__aeabi_dcmpun>
 800fc9c:	b140      	cbz	r0, 800fcb0 <_printf_float+0xf0>
 800fc9e:	464b      	mov	r3, r9
 800fca0:	2b00      	cmp	r3, #0
 800fca2:	bfbc      	itt	lt
 800fca4:	232d      	movlt	r3, #45	; 0x2d
 800fca6:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800fcaa:	487f      	ldr	r0, [pc, #508]	; (800fea8 <_printf_float+0x2e8>)
 800fcac:	4b7f      	ldr	r3, [pc, #508]	; (800feac <_printf_float+0x2ec>)
 800fcae:	e7d1      	b.n	800fc54 <_printf_float+0x94>
 800fcb0:	6863      	ldr	r3, [r4, #4]
 800fcb2:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800fcb6:	9206      	str	r2, [sp, #24]
 800fcb8:	1c5a      	adds	r2, r3, #1
 800fcba:	d13f      	bne.n	800fd3c <_printf_float+0x17c>
 800fcbc:	2306      	movs	r3, #6
 800fcbe:	6063      	str	r3, [r4, #4]
 800fcc0:	9b05      	ldr	r3, [sp, #20]
 800fcc2:	6861      	ldr	r1, [r4, #4]
 800fcc4:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800fcc8:	2300      	movs	r3, #0
 800fcca:	9303      	str	r3, [sp, #12]
 800fccc:	ab0a      	add	r3, sp, #40	; 0x28
 800fcce:	e9cd b301 	strd	fp, r3, [sp, #4]
 800fcd2:	ab09      	add	r3, sp, #36	; 0x24
 800fcd4:	ec49 8b10 	vmov	d0, r8, r9
 800fcd8:	9300      	str	r3, [sp, #0]
 800fcda:	6022      	str	r2, [r4, #0]
 800fcdc:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800fce0:	4628      	mov	r0, r5
 800fce2:	f7ff fecd 	bl	800fa80 <__cvt>
 800fce6:	9b06      	ldr	r3, [sp, #24]
 800fce8:	9909      	ldr	r1, [sp, #36]	; 0x24
 800fcea:	2b47      	cmp	r3, #71	; 0x47
 800fcec:	4680      	mov	r8, r0
 800fcee:	d108      	bne.n	800fd02 <_printf_float+0x142>
 800fcf0:	1cc8      	adds	r0, r1, #3
 800fcf2:	db02      	blt.n	800fcfa <_printf_float+0x13a>
 800fcf4:	6863      	ldr	r3, [r4, #4]
 800fcf6:	4299      	cmp	r1, r3
 800fcf8:	dd41      	ble.n	800fd7e <_printf_float+0x1be>
 800fcfa:	f1ab 0b02 	sub.w	fp, fp, #2
 800fcfe:	fa5f fb8b 	uxtb.w	fp, fp
 800fd02:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800fd06:	d820      	bhi.n	800fd4a <_printf_float+0x18a>
 800fd08:	3901      	subs	r1, #1
 800fd0a:	465a      	mov	r2, fp
 800fd0c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800fd10:	9109      	str	r1, [sp, #36]	; 0x24
 800fd12:	f7ff ff17 	bl	800fb44 <__exponent>
 800fd16:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800fd18:	1813      	adds	r3, r2, r0
 800fd1a:	2a01      	cmp	r2, #1
 800fd1c:	4681      	mov	r9, r0
 800fd1e:	6123      	str	r3, [r4, #16]
 800fd20:	dc02      	bgt.n	800fd28 <_printf_float+0x168>
 800fd22:	6822      	ldr	r2, [r4, #0]
 800fd24:	07d2      	lsls	r2, r2, #31
 800fd26:	d501      	bpl.n	800fd2c <_printf_float+0x16c>
 800fd28:	3301      	adds	r3, #1
 800fd2a:	6123      	str	r3, [r4, #16]
 800fd2c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800fd30:	2b00      	cmp	r3, #0
 800fd32:	d09c      	beq.n	800fc6e <_printf_float+0xae>
 800fd34:	232d      	movs	r3, #45	; 0x2d
 800fd36:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800fd3a:	e798      	b.n	800fc6e <_printf_float+0xae>
 800fd3c:	9a06      	ldr	r2, [sp, #24]
 800fd3e:	2a47      	cmp	r2, #71	; 0x47
 800fd40:	d1be      	bne.n	800fcc0 <_printf_float+0x100>
 800fd42:	2b00      	cmp	r3, #0
 800fd44:	d1bc      	bne.n	800fcc0 <_printf_float+0x100>
 800fd46:	2301      	movs	r3, #1
 800fd48:	e7b9      	b.n	800fcbe <_printf_float+0xfe>
 800fd4a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800fd4e:	d118      	bne.n	800fd82 <_printf_float+0x1c2>
 800fd50:	2900      	cmp	r1, #0
 800fd52:	6863      	ldr	r3, [r4, #4]
 800fd54:	dd0b      	ble.n	800fd6e <_printf_float+0x1ae>
 800fd56:	6121      	str	r1, [r4, #16]
 800fd58:	b913      	cbnz	r3, 800fd60 <_printf_float+0x1a0>
 800fd5a:	6822      	ldr	r2, [r4, #0]
 800fd5c:	07d0      	lsls	r0, r2, #31
 800fd5e:	d502      	bpl.n	800fd66 <_printf_float+0x1a6>
 800fd60:	3301      	adds	r3, #1
 800fd62:	440b      	add	r3, r1
 800fd64:	6123      	str	r3, [r4, #16]
 800fd66:	65a1      	str	r1, [r4, #88]	; 0x58
 800fd68:	f04f 0900 	mov.w	r9, #0
 800fd6c:	e7de      	b.n	800fd2c <_printf_float+0x16c>
 800fd6e:	b913      	cbnz	r3, 800fd76 <_printf_float+0x1b6>
 800fd70:	6822      	ldr	r2, [r4, #0]
 800fd72:	07d2      	lsls	r2, r2, #31
 800fd74:	d501      	bpl.n	800fd7a <_printf_float+0x1ba>
 800fd76:	3302      	adds	r3, #2
 800fd78:	e7f4      	b.n	800fd64 <_printf_float+0x1a4>
 800fd7a:	2301      	movs	r3, #1
 800fd7c:	e7f2      	b.n	800fd64 <_printf_float+0x1a4>
 800fd7e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800fd82:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800fd84:	4299      	cmp	r1, r3
 800fd86:	db05      	blt.n	800fd94 <_printf_float+0x1d4>
 800fd88:	6823      	ldr	r3, [r4, #0]
 800fd8a:	6121      	str	r1, [r4, #16]
 800fd8c:	07d8      	lsls	r0, r3, #31
 800fd8e:	d5ea      	bpl.n	800fd66 <_printf_float+0x1a6>
 800fd90:	1c4b      	adds	r3, r1, #1
 800fd92:	e7e7      	b.n	800fd64 <_printf_float+0x1a4>
 800fd94:	2900      	cmp	r1, #0
 800fd96:	bfd4      	ite	le
 800fd98:	f1c1 0202 	rsble	r2, r1, #2
 800fd9c:	2201      	movgt	r2, #1
 800fd9e:	4413      	add	r3, r2
 800fda0:	e7e0      	b.n	800fd64 <_printf_float+0x1a4>
 800fda2:	6823      	ldr	r3, [r4, #0]
 800fda4:	055a      	lsls	r2, r3, #21
 800fda6:	d407      	bmi.n	800fdb8 <_printf_float+0x1f8>
 800fda8:	6923      	ldr	r3, [r4, #16]
 800fdaa:	4642      	mov	r2, r8
 800fdac:	4631      	mov	r1, r6
 800fdae:	4628      	mov	r0, r5
 800fdb0:	47b8      	blx	r7
 800fdb2:	3001      	adds	r0, #1
 800fdb4:	d12c      	bne.n	800fe10 <_printf_float+0x250>
 800fdb6:	e764      	b.n	800fc82 <_printf_float+0xc2>
 800fdb8:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800fdbc:	f240 80e0 	bls.w	800ff80 <_printf_float+0x3c0>
 800fdc0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800fdc4:	2200      	movs	r2, #0
 800fdc6:	2300      	movs	r3, #0
 800fdc8:	f7f0 fe9e 	bl	8000b08 <__aeabi_dcmpeq>
 800fdcc:	2800      	cmp	r0, #0
 800fdce:	d034      	beq.n	800fe3a <_printf_float+0x27a>
 800fdd0:	4a37      	ldr	r2, [pc, #220]	; (800feb0 <_printf_float+0x2f0>)
 800fdd2:	2301      	movs	r3, #1
 800fdd4:	4631      	mov	r1, r6
 800fdd6:	4628      	mov	r0, r5
 800fdd8:	47b8      	blx	r7
 800fdda:	3001      	adds	r0, #1
 800fddc:	f43f af51 	beq.w	800fc82 <_printf_float+0xc2>
 800fde0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800fde4:	429a      	cmp	r2, r3
 800fde6:	db02      	blt.n	800fdee <_printf_float+0x22e>
 800fde8:	6823      	ldr	r3, [r4, #0]
 800fdea:	07d8      	lsls	r0, r3, #31
 800fdec:	d510      	bpl.n	800fe10 <_printf_float+0x250>
 800fdee:	ee18 3a10 	vmov	r3, s16
 800fdf2:	4652      	mov	r2, sl
 800fdf4:	4631      	mov	r1, r6
 800fdf6:	4628      	mov	r0, r5
 800fdf8:	47b8      	blx	r7
 800fdfa:	3001      	adds	r0, #1
 800fdfc:	f43f af41 	beq.w	800fc82 <_printf_float+0xc2>
 800fe00:	f04f 0800 	mov.w	r8, #0
 800fe04:	f104 091a 	add.w	r9, r4, #26
 800fe08:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800fe0a:	3b01      	subs	r3, #1
 800fe0c:	4543      	cmp	r3, r8
 800fe0e:	dc09      	bgt.n	800fe24 <_printf_float+0x264>
 800fe10:	6823      	ldr	r3, [r4, #0]
 800fe12:	079b      	lsls	r3, r3, #30
 800fe14:	f100 8105 	bmi.w	8010022 <_printf_float+0x462>
 800fe18:	68e0      	ldr	r0, [r4, #12]
 800fe1a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800fe1c:	4298      	cmp	r0, r3
 800fe1e:	bfb8      	it	lt
 800fe20:	4618      	movlt	r0, r3
 800fe22:	e730      	b.n	800fc86 <_printf_float+0xc6>
 800fe24:	2301      	movs	r3, #1
 800fe26:	464a      	mov	r2, r9
 800fe28:	4631      	mov	r1, r6
 800fe2a:	4628      	mov	r0, r5
 800fe2c:	47b8      	blx	r7
 800fe2e:	3001      	adds	r0, #1
 800fe30:	f43f af27 	beq.w	800fc82 <_printf_float+0xc2>
 800fe34:	f108 0801 	add.w	r8, r8, #1
 800fe38:	e7e6      	b.n	800fe08 <_printf_float+0x248>
 800fe3a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fe3c:	2b00      	cmp	r3, #0
 800fe3e:	dc39      	bgt.n	800feb4 <_printf_float+0x2f4>
 800fe40:	4a1b      	ldr	r2, [pc, #108]	; (800feb0 <_printf_float+0x2f0>)
 800fe42:	2301      	movs	r3, #1
 800fe44:	4631      	mov	r1, r6
 800fe46:	4628      	mov	r0, r5
 800fe48:	47b8      	blx	r7
 800fe4a:	3001      	adds	r0, #1
 800fe4c:	f43f af19 	beq.w	800fc82 <_printf_float+0xc2>
 800fe50:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800fe54:	4313      	orrs	r3, r2
 800fe56:	d102      	bne.n	800fe5e <_printf_float+0x29e>
 800fe58:	6823      	ldr	r3, [r4, #0]
 800fe5a:	07d9      	lsls	r1, r3, #31
 800fe5c:	d5d8      	bpl.n	800fe10 <_printf_float+0x250>
 800fe5e:	ee18 3a10 	vmov	r3, s16
 800fe62:	4652      	mov	r2, sl
 800fe64:	4631      	mov	r1, r6
 800fe66:	4628      	mov	r0, r5
 800fe68:	47b8      	blx	r7
 800fe6a:	3001      	adds	r0, #1
 800fe6c:	f43f af09 	beq.w	800fc82 <_printf_float+0xc2>
 800fe70:	f04f 0900 	mov.w	r9, #0
 800fe74:	f104 0a1a 	add.w	sl, r4, #26
 800fe78:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fe7a:	425b      	negs	r3, r3
 800fe7c:	454b      	cmp	r3, r9
 800fe7e:	dc01      	bgt.n	800fe84 <_printf_float+0x2c4>
 800fe80:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800fe82:	e792      	b.n	800fdaa <_printf_float+0x1ea>
 800fe84:	2301      	movs	r3, #1
 800fe86:	4652      	mov	r2, sl
 800fe88:	4631      	mov	r1, r6
 800fe8a:	4628      	mov	r0, r5
 800fe8c:	47b8      	blx	r7
 800fe8e:	3001      	adds	r0, #1
 800fe90:	f43f aef7 	beq.w	800fc82 <_printf_float+0xc2>
 800fe94:	f109 0901 	add.w	r9, r9, #1
 800fe98:	e7ee      	b.n	800fe78 <_printf_float+0x2b8>
 800fe9a:	bf00      	nop
 800fe9c:	7fefffff 	.word	0x7fefffff
 800fea0:	0801425c 	.word	0x0801425c
 800fea4:	08014260 	.word	0x08014260
 800fea8:	08014268 	.word	0x08014268
 800feac:	08014264 	.word	0x08014264
 800feb0:	0801426c 	.word	0x0801426c
 800feb4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800feb6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800feb8:	429a      	cmp	r2, r3
 800feba:	bfa8      	it	ge
 800febc:	461a      	movge	r2, r3
 800febe:	2a00      	cmp	r2, #0
 800fec0:	4691      	mov	r9, r2
 800fec2:	dc37      	bgt.n	800ff34 <_printf_float+0x374>
 800fec4:	f04f 0b00 	mov.w	fp, #0
 800fec8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800fecc:	f104 021a 	add.w	r2, r4, #26
 800fed0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800fed2:	9305      	str	r3, [sp, #20]
 800fed4:	eba3 0309 	sub.w	r3, r3, r9
 800fed8:	455b      	cmp	r3, fp
 800feda:	dc33      	bgt.n	800ff44 <_printf_float+0x384>
 800fedc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800fee0:	429a      	cmp	r2, r3
 800fee2:	db3b      	blt.n	800ff5c <_printf_float+0x39c>
 800fee4:	6823      	ldr	r3, [r4, #0]
 800fee6:	07da      	lsls	r2, r3, #31
 800fee8:	d438      	bmi.n	800ff5c <_printf_float+0x39c>
 800feea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800feec:	9a05      	ldr	r2, [sp, #20]
 800feee:	9909      	ldr	r1, [sp, #36]	; 0x24
 800fef0:	1a9a      	subs	r2, r3, r2
 800fef2:	eba3 0901 	sub.w	r9, r3, r1
 800fef6:	4591      	cmp	r9, r2
 800fef8:	bfa8      	it	ge
 800fefa:	4691      	movge	r9, r2
 800fefc:	f1b9 0f00 	cmp.w	r9, #0
 800ff00:	dc35      	bgt.n	800ff6e <_printf_float+0x3ae>
 800ff02:	f04f 0800 	mov.w	r8, #0
 800ff06:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800ff0a:	f104 0a1a 	add.w	sl, r4, #26
 800ff0e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ff12:	1a9b      	subs	r3, r3, r2
 800ff14:	eba3 0309 	sub.w	r3, r3, r9
 800ff18:	4543      	cmp	r3, r8
 800ff1a:	f77f af79 	ble.w	800fe10 <_printf_float+0x250>
 800ff1e:	2301      	movs	r3, #1
 800ff20:	4652      	mov	r2, sl
 800ff22:	4631      	mov	r1, r6
 800ff24:	4628      	mov	r0, r5
 800ff26:	47b8      	blx	r7
 800ff28:	3001      	adds	r0, #1
 800ff2a:	f43f aeaa 	beq.w	800fc82 <_printf_float+0xc2>
 800ff2e:	f108 0801 	add.w	r8, r8, #1
 800ff32:	e7ec      	b.n	800ff0e <_printf_float+0x34e>
 800ff34:	4613      	mov	r3, r2
 800ff36:	4631      	mov	r1, r6
 800ff38:	4642      	mov	r2, r8
 800ff3a:	4628      	mov	r0, r5
 800ff3c:	47b8      	blx	r7
 800ff3e:	3001      	adds	r0, #1
 800ff40:	d1c0      	bne.n	800fec4 <_printf_float+0x304>
 800ff42:	e69e      	b.n	800fc82 <_printf_float+0xc2>
 800ff44:	2301      	movs	r3, #1
 800ff46:	4631      	mov	r1, r6
 800ff48:	4628      	mov	r0, r5
 800ff4a:	9205      	str	r2, [sp, #20]
 800ff4c:	47b8      	blx	r7
 800ff4e:	3001      	adds	r0, #1
 800ff50:	f43f ae97 	beq.w	800fc82 <_printf_float+0xc2>
 800ff54:	9a05      	ldr	r2, [sp, #20]
 800ff56:	f10b 0b01 	add.w	fp, fp, #1
 800ff5a:	e7b9      	b.n	800fed0 <_printf_float+0x310>
 800ff5c:	ee18 3a10 	vmov	r3, s16
 800ff60:	4652      	mov	r2, sl
 800ff62:	4631      	mov	r1, r6
 800ff64:	4628      	mov	r0, r5
 800ff66:	47b8      	blx	r7
 800ff68:	3001      	adds	r0, #1
 800ff6a:	d1be      	bne.n	800feea <_printf_float+0x32a>
 800ff6c:	e689      	b.n	800fc82 <_printf_float+0xc2>
 800ff6e:	9a05      	ldr	r2, [sp, #20]
 800ff70:	464b      	mov	r3, r9
 800ff72:	4442      	add	r2, r8
 800ff74:	4631      	mov	r1, r6
 800ff76:	4628      	mov	r0, r5
 800ff78:	47b8      	blx	r7
 800ff7a:	3001      	adds	r0, #1
 800ff7c:	d1c1      	bne.n	800ff02 <_printf_float+0x342>
 800ff7e:	e680      	b.n	800fc82 <_printf_float+0xc2>
 800ff80:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ff82:	2a01      	cmp	r2, #1
 800ff84:	dc01      	bgt.n	800ff8a <_printf_float+0x3ca>
 800ff86:	07db      	lsls	r3, r3, #31
 800ff88:	d538      	bpl.n	800fffc <_printf_float+0x43c>
 800ff8a:	2301      	movs	r3, #1
 800ff8c:	4642      	mov	r2, r8
 800ff8e:	4631      	mov	r1, r6
 800ff90:	4628      	mov	r0, r5
 800ff92:	47b8      	blx	r7
 800ff94:	3001      	adds	r0, #1
 800ff96:	f43f ae74 	beq.w	800fc82 <_printf_float+0xc2>
 800ff9a:	ee18 3a10 	vmov	r3, s16
 800ff9e:	4652      	mov	r2, sl
 800ffa0:	4631      	mov	r1, r6
 800ffa2:	4628      	mov	r0, r5
 800ffa4:	47b8      	blx	r7
 800ffa6:	3001      	adds	r0, #1
 800ffa8:	f43f ae6b 	beq.w	800fc82 <_printf_float+0xc2>
 800ffac:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800ffb0:	2200      	movs	r2, #0
 800ffb2:	2300      	movs	r3, #0
 800ffb4:	f7f0 fda8 	bl	8000b08 <__aeabi_dcmpeq>
 800ffb8:	b9d8      	cbnz	r0, 800fff2 <_printf_float+0x432>
 800ffba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ffbc:	f108 0201 	add.w	r2, r8, #1
 800ffc0:	3b01      	subs	r3, #1
 800ffc2:	4631      	mov	r1, r6
 800ffc4:	4628      	mov	r0, r5
 800ffc6:	47b8      	blx	r7
 800ffc8:	3001      	adds	r0, #1
 800ffca:	d10e      	bne.n	800ffea <_printf_float+0x42a>
 800ffcc:	e659      	b.n	800fc82 <_printf_float+0xc2>
 800ffce:	2301      	movs	r3, #1
 800ffd0:	4652      	mov	r2, sl
 800ffd2:	4631      	mov	r1, r6
 800ffd4:	4628      	mov	r0, r5
 800ffd6:	47b8      	blx	r7
 800ffd8:	3001      	adds	r0, #1
 800ffda:	f43f ae52 	beq.w	800fc82 <_printf_float+0xc2>
 800ffde:	f108 0801 	add.w	r8, r8, #1
 800ffe2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ffe4:	3b01      	subs	r3, #1
 800ffe6:	4543      	cmp	r3, r8
 800ffe8:	dcf1      	bgt.n	800ffce <_printf_float+0x40e>
 800ffea:	464b      	mov	r3, r9
 800ffec:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800fff0:	e6dc      	b.n	800fdac <_printf_float+0x1ec>
 800fff2:	f04f 0800 	mov.w	r8, #0
 800fff6:	f104 0a1a 	add.w	sl, r4, #26
 800fffa:	e7f2      	b.n	800ffe2 <_printf_float+0x422>
 800fffc:	2301      	movs	r3, #1
 800fffe:	4642      	mov	r2, r8
 8010000:	e7df      	b.n	800ffc2 <_printf_float+0x402>
 8010002:	2301      	movs	r3, #1
 8010004:	464a      	mov	r2, r9
 8010006:	4631      	mov	r1, r6
 8010008:	4628      	mov	r0, r5
 801000a:	47b8      	blx	r7
 801000c:	3001      	adds	r0, #1
 801000e:	f43f ae38 	beq.w	800fc82 <_printf_float+0xc2>
 8010012:	f108 0801 	add.w	r8, r8, #1
 8010016:	68e3      	ldr	r3, [r4, #12]
 8010018:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801001a:	1a5b      	subs	r3, r3, r1
 801001c:	4543      	cmp	r3, r8
 801001e:	dcf0      	bgt.n	8010002 <_printf_float+0x442>
 8010020:	e6fa      	b.n	800fe18 <_printf_float+0x258>
 8010022:	f04f 0800 	mov.w	r8, #0
 8010026:	f104 0919 	add.w	r9, r4, #25
 801002a:	e7f4      	b.n	8010016 <_printf_float+0x456>

0801002c <_printf_common>:
 801002c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010030:	4616      	mov	r6, r2
 8010032:	4699      	mov	r9, r3
 8010034:	688a      	ldr	r2, [r1, #8]
 8010036:	690b      	ldr	r3, [r1, #16]
 8010038:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801003c:	4293      	cmp	r3, r2
 801003e:	bfb8      	it	lt
 8010040:	4613      	movlt	r3, r2
 8010042:	6033      	str	r3, [r6, #0]
 8010044:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8010048:	4607      	mov	r7, r0
 801004a:	460c      	mov	r4, r1
 801004c:	b10a      	cbz	r2, 8010052 <_printf_common+0x26>
 801004e:	3301      	adds	r3, #1
 8010050:	6033      	str	r3, [r6, #0]
 8010052:	6823      	ldr	r3, [r4, #0]
 8010054:	0699      	lsls	r1, r3, #26
 8010056:	bf42      	ittt	mi
 8010058:	6833      	ldrmi	r3, [r6, #0]
 801005a:	3302      	addmi	r3, #2
 801005c:	6033      	strmi	r3, [r6, #0]
 801005e:	6825      	ldr	r5, [r4, #0]
 8010060:	f015 0506 	ands.w	r5, r5, #6
 8010064:	d106      	bne.n	8010074 <_printf_common+0x48>
 8010066:	f104 0a19 	add.w	sl, r4, #25
 801006a:	68e3      	ldr	r3, [r4, #12]
 801006c:	6832      	ldr	r2, [r6, #0]
 801006e:	1a9b      	subs	r3, r3, r2
 8010070:	42ab      	cmp	r3, r5
 8010072:	dc26      	bgt.n	80100c2 <_printf_common+0x96>
 8010074:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8010078:	1e13      	subs	r3, r2, #0
 801007a:	6822      	ldr	r2, [r4, #0]
 801007c:	bf18      	it	ne
 801007e:	2301      	movne	r3, #1
 8010080:	0692      	lsls	r2, r2, #26
 8010082:	d42b      	bmi.n	80100dc <_printf_common+0xb0>
 8010084:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8010088:	4649      	mov	r1, r9
 801008a:	4638      	mov	r0, r7
 801008c:	47c0      	blx	r8
 801008e:	3001      	adds	r0, #1
 8010090:	d01e      	beq.n	80100d0 <_printf_common+0xa4>
 8010092:	6823      	ldr	r3, [r4, #0]
 8010094:	68e5      	ldr	r5, [r4, #12]
 8010096:	6832      	ldr	r2, [r6, #0]
 8010098:	f003 0306 	and.w	r3, r3, #6
 801009c:	2b04      	cmp	r3, #4
 801009e:	bf08      	it	eq
 80100a0:	1aad      	subeq	r5, r5, r2
 80100a2:	68a3      	ldr	r3, [r4, #8]
 80100a4:	6922      	ldr	r2, [r4, #16]
 80100a6:	bf0c      	ite	eq
 80100a8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80100ac:	2500      	movne	r5, #0
 80100ae:	4293      	cmp	r3, r2
 80100b0:	bfc4      	itt	gt
 80100b2:	1a9b      	subgt	r3, r3, r2
 80100b4:	18ed      	addgt	r5, r5, r3
 80100b6:	2600      	movs	r6, #0
 80100b8:	341a      	adds	r4, #26
 80100ba:	42b5      	cmp	r5, r6
 80100bc:	d11a      	bne.n	80100f4 <_printf_common+0xc8>
 80100be:	2000      	movs	r0, #0
 80100c0:	e008      	b.n	80100d4 <_printf_common+0xa8>
 80100c2:	2301      	movs	r3, #1
 80100c4:	4652      	mov	r2, sl
 80100c6:	4649      	mov	r1, r9
 80100c8:	4638      	mov	r0, r7
 80100ca:	47c0      	blx	r8
 80100cc:	3001      	adds	r0, #1
 80100ce:	d103      	bne.n	80100d8 <_printf_common+0xac>
 80100d0:	f04f 30ff 	mov.w	r0, #4294967295
 80100d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80100d8:	3501      	adds	r5, #1
 80100da:	e7c6      	b.n	801006a <_printf_common+0x3e>
 80100dc:	18e1      	adds	r1, r4, r3
 80100de:	1c5a      	adds	r2, r3, #1
 80100e0:	2030      	movs	r0, #48	; 0x30
 80100e2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80100e6:	4422      	add	r2, r4
 80100e8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80100ec:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80100f0:	3302      	adds	r3, #2
 80100f2:	e7c7      	b.n	8010084 <_printf_common+0x58>
 80100f4:	2301      	movs	r3, #1
 80100f6:	4622      	mov	r2, r4
 80100f8:	4649      	mov	r1, r9
 80100fa:	4638      	mov	r0, r7
 80100fc:	47c0      	blx	r8
 80100fe:	3001      	adds	r0, #1
 8010100:	d0e6      	beq.n	80100d0 <_printf_common+0xa4>
 8010102:	3601      	adds	r6, #1
 8010104:	e7d9      	b.n	80100ba <_printf_common+0x8e>
	...

08010108 <_printf_i>:
 8010108:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801010c:	7e0f      	ldrb	r7, [r1, #24]
 801010e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8010110:	2f78      	cmp	r7, #120	; 0x78
 8010112:	4691      	mov	r9, r2
 8010114:	4680      	mov	r8, r0
 8010116:	460c      	mov	r4, r1
 8010118:	469a      	mov	sl, r3
 801011a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 801011e:	d807      	bhi.n	8010130 <_printf_i+0x28>
 8010120:	2f62      	cmp	r7, #98	; 0x62
 8010122:	d80a      	bhi.n	801013a <_printf_i+0x32>
 8010124:	2f00      	cmp	r7, #0
 8010126:	f000 80d8 	beq.w	80102da <_printf_i+0x1d2>
 801012a:	2f58      	cmp	r7, #88	; 0x58
 801012c:	f000 80a3 	beq.w	8010276 <_printf_i+0x16e>
 8010130:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8010134:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8010138:	e03a      	b.n	80101b0 <_printf_i+0xa8>
 801013a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801013e:	2b15      	cmp	r3, #21
 8010140:	d8f6      	bhi.n	8010130 <_printf_i+0x28>
 8010142:	a101      	add	r1, pc, #4	; (adr r1, 8010148 <_printf_i+0x40>)
 8010144:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8010148:	080101a1 	.word	0x080101a1
 801014c:	080101b5 	.word	0x080101b5
 8010150:	08010131 	.word	0x08010131
 8010154:	08010131 	.word	0x08010131
 8010158:	08010131 	.word	0x08010131
 801015c:	08010131 	.word	0x08010131
 8010160:	080101b5 	.word	0x080101b5
 8010164:	08010131 	.word	0x08010131
 8010168:	08010131 	.word	0x08010131
 801016c:	08010131 	.word	0x08010131
 8010170:	08010131 	.word	0x08010131
 8010174:	080102c1 	.word	0x080102c1
 8010178:	080101e5 	.word	0x080101e5
 801017c:	080102a3 	.word	0x080102a3
 8010180:	08010131 	.word	0x08010131
 8010184:	08010131 	.word	0x08010131
 8010188:	080102e3 	.word	0x080102e3
 801018c:	08010131 	.word	0x08010131
 8010190:	080101e5 	.word	0x080101e5
 8010194:	08010131 	.word	0x08010131
 8010198:	08010131 	.word	0x08010131
 801019c:	080102ab 	.word	0x080102ab
 80101a0:	682b      	ldr	r3, [r5, #0]
 80101a2:	1d1a      	adds	r2, r3, #4
 80101a4:	681b      	ldr	r3, [r3, #0]
 80101a6:	602a      	str	r2, [r5, #0]
 80101a8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80101ac:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80101b0:	2301      	movs	r3, #1
 80101b2:	e0a3      	b.n	80102fc <_printf_i+0x1f4>
 80101b4:	6820      	ldr	r0, [r4, #0]
 80101b6:	6829      	ldr	r1, [r5, #0]
 80101b8:	0606      	lsls	r6, r0, #24
 80101ba:	f101 0304 	add.w	r3, r1, #4
 80101be:	d50a      	bpl.n	80101d6 <_printf_i+0xce>
 80101c0:	680e      	ldr	r6, [r1, #0]
 80101c2:	602b      	str	r3, [r5, #0]
 80101c4:	2e00      	cmp	r6, #0
 80101c6:	da03      	bge.n	80101d0 <_printf_i+0xc8>
 80101c8:	232d      	movs	r3, #45	; 0x2d
 80101ca:	4276      	negs	r6, r6
 80101cc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80101d0:	485e      	ldr	r0, [pc, #376]	; (801034c <_printf_i+0x244>)
 80101d2:	230a      	movs	r3, #10
 80101d4:	e019      	b.n	801020a <_printf_i+0x102>
 80101d6:	680e      	ldr	r6, [r1, #0]
 80101d8:	602b      	str	r3, [r5, #0]
 80101da:	f010 0f40 	tst.w	r0, #64	; 0x40
 80101de:	bf18      	it	ne
 80101e0:	b236      	sxthne	r6, r6
 80101e2:	e7ef      	b.n	80101c4 <_printf_i+0xbc>
 80101e4:	682b      	ldr	r3, [r5, #0]
 80101e6:	6820      	ldr	r0, [r4, #0]
 80101e8:	1d19      	adds	r1, r3, #4
 80101ea:	6029      	str	r1, [r5, #0]
 80101ec:	0601      	lsls	r1, r0, #24
 80101ee:	d501      	bpl.n	80101f4 <_printf_i+0xec>
 80101f0:	681e      	ldr	r6, [r3, #0]
 80101f2:	e002      	b.n	80101fa <_printf_i+0xf2>
 80101f4:	0646      	lsls	r6, r0, #25
 80101f6:	d5fb      	bpl.n	80101f0 <_printf_i+0xe8>
 80101f8:	881e      	ldrh	r6, [r3, #0]
 80101fa:	4854      	ldr	r0, [pc, #336]	; (801034c <_printf_i+0x244>)
 80101fc:	2f6f      	cmp	r7, #111	; 0x6f
 80101fe:	bf0c      	ite	eq
 8010200:	2308      	moveq	r3, #8
 8010202:	230a      	movne	r3, #10
 8010204:	2100      	movs	r1, #0
 8010206:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801020a:	6865      	ldr	r5, [r4, #4]
 801020c:	60a5      	str	r5, [r4, #8]
 801020e:	2d00      	cmp	r5, #0
 8010210:	bfa2      	ittt	ge
 8010212:	6821      	ldrge	r1, [r4, #0]
 8010214:	f021 0104 	bicge.w	r1, r1, #4
 8010218:	6021      	strge	r1, [r4, #0]
 801021a:	b90e      	cbnz	r6, 8010220 <_printf_i+0x118>
 801021c:	2d00      	cmp	r5, #0
 801021e:	d04d      	beq.n	80102bc <_printf_i+0x1b4>
 8010220:	4615      	mov	r5, r2
 8010222:	fbb6 f1f3 	udiv	r1, r6, r3
 8010226:	fb03 6711 	mls	r7, r3, r1, r6
 801022a:	5dc7      	ldrb	r7, [r0, r7]
 801022c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8010230:	4637      	mov	r7, r6
 8010232:	42bb      	cmp	r3, r7
 8010234:	460e      	mov	r6, r1
 8010236:	d9f4      	bls.n	8010222 <_printf_i+0x11a>
 8010238:	2b08      	cmp	r3, #8
 801023a:	d10b      	bne.n	8010254 <_printf_i+0x14c>
 801023c:	6823      	ldr	r3, [r4, #0]
 801023e:	07de      	lsls	r6, r3, #31
 8010240:	d508      	bpl.n	8010254 <_printf_i+0x14c>
 8010242:	6923      	ldr	r3, [r4, #16]
 8010244:	6861      	ldr	r1, [r4, #4]
 8010246:	4299      	cmp	r1, r3
 8010248:	bfde      	ittt	le
 801024a:	2330      	movle	r3, #48	; 0x30
 801024c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8010250:	f105 35ff 	addle.w	r5, r5, #4294967295
 8010254:	1b52      	subs	r2, r2, r5
 8010256:	6122      	str	r2, [r4, #16]
 8010258:	f8cd a000 	str.w	sl, [sp]
 801025c:	464b      	mov	r3, r9
 801025e:	aa03      	add	r2, sp, #12
 8010260:	4621      	mov	r1, r4
 8010262:	4640      	mov	r0, r8
 8010264:	f7ff fee2 	bl	801002c <_printf_common>
 8010268:	3001      	adds	r0, #1
 801026a:	d14c      	bne.n	8010306 <_printf_i+0x1fe>
 801026c:	f04f 30ff 	mov.w	r0, #4294967295
 8010270:	b004      	add	sp, #16
 8010272:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010276:	4835      	ldr	r0, [pc, #212]	; (801034c <_printf_i+0x244>)
 8010278:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 801027c:	6829      	ldr	r1, [r5, #0]
 801027e:	6823      	ldr	r3, [r4, #0]
 8010280:	f851 6b04 	ldr.w	r6, [r1], #4
 8010284:	6029      	str	r1, [r5, #0]
 8010286:	061d      	lsls	r5, r3, #24
 8010288:	d514      	bpl.n	80102b4 <_printf_i+0x1ac>
 801028a:	07df      	lsls	r7, r3, #31
 801028c:	bf44      	itt	mi
 801028e:	f043 0320 	orrmi.w	r3, r3, #32
 8010292:	6023      	strmi	r3, [r4, #0]
 8010294:	b91e      	cbnz	r6, 801029e <_printf_i+0x196>
 8010296:	6823      	ldr	r3, [r4, #0]
 8010298:	f023 0320 	bic.w	r3, r3, #32
 801029c:	6023      	str	r3, [r4, #0]
 801029e:	2310      	movs	r3, #16
 80102a0:	e7b0      	b.n	8010204 <_printf_i+0xfc>
 80102a2:	6823      	ldr	r3, [r4, #0]
 80102a4:	f043 0320 	orr.w	r3, r3, #32
 80102a8:	6023      	str	r3, [r4, #0]
 80102aa:	2378      	movs	r3, #120	; 0x78
 80102ac:	4828      	ldr	r0, [pc, #160]	; (8010350 <_printf_i+0x248>)
 80102ae:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80102b2:	e7e3      	b.n	801027c <_printf_i+0x174>
 80102b4:	0659      	lsls	r1, r3, #25
 80102b6:	bf48      	it	mi
 80102b8:	b2b6      	uxthmi	r6, r6
 80102ba:	e7e6      	b.n	801028a <_printf_i+0x182>
 80102bc:	4615      	mov	r5, r2
 80102be:	e7bb      	b.n	8010238 <_printf_i+0x130>
 80102c0:	682b      	ldr	r3, [r5, #0]
 80102c2:	6826      	ldr	r6, [r4, #0]
 80102c4:	6961      	ldr	r1, [r4, #20]
 80102c6:	1d18      	adds	r0, r3, #4
 80102c8:	6028      	str	r0, [r5, #0]
 80102ca:	0635      	lsls	r5, r6, #24
 80102cc:	681b      	ldr	r3, [r3, #0]
 80102ce:	d501      	bpl.n	80102d4 <_printf_i+0x1cc>
 80102d0:	6019      	str	r1, [r3, #0]
 80102d2:	e002      	b.n	80102da <_printf_i+0x1d2>
 80102d4:	0670      	lsls	r0, r6, #25
 80102d6:	d5fb      	bpl.n	80102d0 <_printf_i+0x1c8>
 80102d8:	8019      	strh	r1, [r3, #0]
 80102da:	2300      	movs	r3, #0
 80102dc:	6123      	str	r3, [r4, #16]
 80102de:	4615      	mov	r5, r2
 80102e0:	e7ba      	b.n	8010258 <_printf_i+0x150>
 80102e2:	682b      	ldr	r3, [r5, #0]
 80102e4:	1d1a      	adds	r2, r3, #4
 80102e6:	602a      	str	r2, [r5, #0]
 80102e8:	681d      	ldr	r5, [r3, #0]
 80102ea:	6862      	ldr	r2, [r4, #4]
 80102ec:	2100      	movs	r1, #0
 80102ee:	4628      	mov	r0, r5
 80102f0:	f7ef ff96 	bl	8000220 <memchr>
 80102f4:	b108      	cbz	r0, 80102fa <_printf_i+0x1f2>
 80102f6:	1b40      	subs	r0, r0, r5
 80102f8:	6060      	str	r0, [r4, #4]
 80102fa:	6863      	ldr	r3, [r4, #4]
 80102fc:	6123      	str	r3, [r4, #16]
 80102fe:	2300      	movs	r3, #0
 8010300:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010304:	e7a8      	b.n	8010258 <_printf_i+0x150>
 8010306:	6923      	ldr	r3, [r4, #16]
 8010308:	462a      	mov	r2, r5
 801030a:	4649      	mov	r1, r9
 801030c:	4640      	mov	r0, r8
 801030e:	47d0      	blx	sl
 8010310:	3001      	adds	r0, #1
 8010312:	d0ab      	beq.n	801026c <_printf_i+0x164>
 8010314:	6823      	ldr	r3, [r4, #0]
 8010316:	079b      	lsls	r3, r3, #30
 8010318:	d413      	bmi.n	8010342 <_printf_i+0x23a>
 801031a:	68e0      	ldr	r0, [r4, #12]
 801031c:	9b03      	ldr	r3, [sp, #12]
 801031e:	4298      	cmp	r0, r3
 8010320:	bfb8      	it	lt
 8010322:	4618      	movlt	r0, r3
 8010324:	e7a4      	b.n	8010270 <_printf_i+0x168>
 8010326:	2301      	movs	r3, #1
 8010328:	4632      	mov	r2, r6
 801032a:	4649      	mov	r1, r9
 801032c:	4640      	mov	r0, r8
 801032e:	47d0      	blx	sl
 8010330:	3001      	adds	r0, #1
 8010332:	d09b      	beq.n	801026c <_printf_i+0x164>
 8010334:	3501      	adds	r5, #1
 8010336:	68e3      	ldr	r3, [r4, #12]
 8010338:	9903      	ldr	r1, [sp, #12]
 801033a:	1a5b      	subs	r3, r3, r1
 801033c:	42ab      	cmp	r3, r5
 801033e:	dcf2      	bgt.n	8010326 <_printf_i+0x21e>
 8010340:	e7eb      	b.n	801031a <_printf_i+0x212>
 8010342:	2500      	movs	r5, #0
 8010344:	f104 0619 	add.w	r6, r4, #25
 8010348:	e7f5      	b.n	8010336 <_printf_i+0x22e>
 801034a:	bf00      	nop
 801034c:	0801426e 	.word	0x0801426e
 8010350:	0801427f 	.word	0x0801427f

08010354 <_sbrk_r>:
 8010354:	b538      	push	{r3, r4, r5, lr}
 8010356:	4d06      	ldr	r5, [pc, #24]	; (8010370 <_sbrk_r+0x1c>)
 8010358:	2300      	movs	r3, #0
 801035a:	4604      	mov	r4, r0
 801035c:	4608      	mov	r0, r1
 801035e:	602b      	str	r3, [r5, #0]
 8010360:	f7f2 fb4c 	bl	80029fc <_sbrk>
 8010364:	1c43      	adds	r3, r0, #1
 8010366:	d102      	bne.n	801036e <_sbrk_r+0x1a>
 8010368:	682b      	ldr	r3, [r5, #0]
 801036a:	b103      	cbz	r3, 801036e <_sbrk_r+0x1a>
 801036c:	6023      	str	r3, [r4, #0]
 801036e:	bd38      	pop	{r3, r4, r5, pc}
 8010370:	200023dc 	.word	0x200023dc

08010374 <siprintf>:
 8010374:	b40e      	push	{r1, r2, r3}
 8010376:	b500      	push	{lr}
 8010378:	b09c      	sub	sp, #112	; 0x70
 801037a:	ab1d      	add	r3, sp, #116	; 0x74
 801037c:	9002      	str	r0, [sp, #8]
 801037e:	9006      	str	r0, [sp, #24]
 8010380:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8010384:	4809      	ldr	r0, [pc, #36]	; (80103ac <siprintf+0x38>)
 8010386:	9107      	str	r1, [sp, #28]
 8010388:	9104      	str	r1, [sp, #16]
 801038a:	4909      	ldr	r1, [pc, #36]	; (80103b0 <siprintf+0x3c>)
 801038c:	f853 2b04 	ldr.w	r2, [r3], #4
 8010390:	9105      	str	r1, [sp, #20]
 8010392:	6800      	ldr	r0, [r0, #0]
 8010394:	9301      	str	r3, [sp, #4]
 8010396:	a902      	add	r1, sp, #8
 8010398:	f001 faa8 	bl	80118ec <_svfiprintf_r>
 801039c:	9b02      	ldr	r3, [sp, #8]
 801039e:	2200      	movs	r2, #0
 80103a0:	701a      	strb	r2, [r3, #0]
 80103a2:	b01c      	add	sp, #112	; 0x70
 80103a4:	f85d eb04 	ldr.w	lr, [sp], #4
 80103a8:	b003      	add	sp, #12
 80103aa:	4770      	bx	lr
 80103ac:	20000208 	.word	0x20000208
 80103b0:	ffff0208 	.word	0xffff0208

080103b4 <strcat>:
 80103b4:	b510      	push	{r4, lr}
 80103b6:	4602      	mov	r2, r0
 80103b8:	7814      	ldrb	r4, [r2, #0]
 80103ba:	4613      	mov	r3, r2
 80103bc:	3201      	adds	r2, #1
 80103be:	2c00      	cmp	r4, #0
 80103c0:	d1fa      	bne.n	80103b8 <strcat+0x4>
 80103c2:	3b01      	subs	r3, #1
 80103c4:	f811 2b01 	ldrb.w	r2, [r1], #1
 80103c8:	f803 2f01 	strb.w	r2, [r3, #1]!
 80103cc:	2a00      	cmp	r2, #0
 80103ce:	d1f9      	bne.n	80103c4 <strcat+0x10>
 80103d0:	bd10      	pop	{r4, pc}

080103d2 <quorem>:
 80103d2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80103d6:	6903      	ldr	r3, [r0, #16]
 80103d8:	690c      	ldr	r4, [r1, #16]
 80103da:	42a3      	cmp	r3, r4
 80103dc:	4607      	mov	r7, r0
 80103de:	f2c0 8081 	blt.w	80104e4 <quorem+0x112>
 80103e2:	3c01      	subs	r4, #1
 80103e4:	f101 0814 	add.w	r8, r1, #20
 80103e8:	f100 0514 	add.w	r5, r0, #20
 80103ec:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80103f0:	9301      	str	r3, [sp, #4]
 80103f2:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80103f6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80103fa:	3301      	adds	r3, #1
 80103fc:	429a      	cmp	r2, r3
 80103fe:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8010402:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8010406:	fbb2 f6f3 	udiv	r6, r2, r3
 801040a:	d331      	bcc.n	8010470 <quorem+0x9e>
 801040c:	f04f 0e00 	mov.w	lr, #0
 8010410:	4640      	mov	r0, r8
 8010412:	46ac      	mov	ip, r5
 8010414:	46f2      	mov	sl, lr
 8010416:	f850 2b04 	ldr.w	r2, [r0], #4
 801041a:	b293      	uxth	r3, r2
 801041c:	fb06 e303 	mla	r3, r6, r3, lr
 8010420:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8010424:	b29b      	uxth	r3, r3
 8010426:	ebaa 0303 	sub.w	r3, sl, r3
 801042a:	f8dc a000 	ldr.w	sl, [ip]
 801042e:	0c12      	lsrs	r2, r2, #16
 8010430:	fa13 f38a 	uxtah	r3, r3, sl
 8010434:	fb06 e202 	mla	r2, r6, r2, lr
 8010438:	9300      	str	r3, [sp, #0]
 801043a:	9b00      	ldr	r3, [sp, #0]
 801043c:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8010440:	b292      	uxth	r2, r2
 8010442:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8010446:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801044a:	f8bd 3000 	ldrh.w	r3, [sp]
 801044e:	4581      	cmp	r9, r0
 8010450:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8010454:	f84c 3b04 	str.w	r3, [ip], #4
 8010458:	ea4f 4a22 	mov.w	sl, r2, asr #16
 801045c:	d2db      	bcs.n	8010416 <quorem+0x44>
 801045e:	f855 300b 	ldr.w	r3, [r5, fp]
 8010462:	b92b      	cbnz	r3, 8010470 <quorem+0x9e>
 8010464:	9b01      	ldr	r3, [sp, #4]
 8010466:	3b04      	subs	r3, #4
 8010468:	429d      	cmp	r5, r3
 801046a:	461a      	mov	r2, r3
 801046c:	d32e      	bcc.n	80104cc <quorem+0xfa>
 801046e:	613c      	str	r4, [r7, #16]
 8010470:	4638      	mov	r0, r7
 8010472:	f001 f8c7 	bl	8011604 <__mcmp>
 8010476:	2800      	cmp	r0, #0
 8010478:	db24      	blt.n	80104c4 <quorem+0xf2>
 801047a:	3601      	adds	r6, #1
 801047c:	4628      	mov	r0, r5
 801047e:	f04f 0c00 	mov.w	ip, #0
 8010482:	f858 2b04 	ldr.w	r2, [r8], #4
 8010486:	f8d0 e000 	ldr.w	lr, [r0]
 801048a:	b293      	uxth	r3, r2
 801048c:	ebac 0303 	sub.w	r3, ip, r3
 8010490:	0c12      	lsrs	r2, r2, #16
 8010492:	fa13 f38e 	uxtah	r3, r3, lr
 8010496:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 801049a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801049e:	b29b      	uxth	r3, r3
 80104a0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80104a4:	45c1      	cmp	r9, r8
 80104a6:	f840 3b04 	str.w	r3, [r0], #4
 80104aa:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80104ae:	d2e8      	bcs.n	8010482 <quorem+0xb0>
 80104b0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80104b4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80104b8:	b922      	cbnz	r2, 80104c4 <quorem+0xf2>
 80104ba:	3b04      	subs	r3, #4
 80104bc:	429d      	cmp	r5, r3
 80104be:	461a      	mov	r2, r3
 80104c0:	d30a      	bcc.n	80104d8 <quorem+0x106>
 80104c2:	613c      	str	r4, [r7, #16]
 80104c4:	4630      	mov	r0, r6
 80104c6:	b003      	add	sp, #12
 80104c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80104cc:	6812      	ldr	r2, [r2, #0]
 80104ce:	3b04      	subs	r3, #4
 80104d0:	2a00      	cmp	r2, #0
 80104d2:	d1cc      	bne.n	801046e <quorem+0x9c>
 80104d4:	3c01      	subs	r4, #1
 80104d6:	e7c7      	b.n	8010468 <quorem+0x96>
 80104d8:	6812      	ldr	r2, [r2, #0]
 80104da:	3b04      	subs	r3, #4
 80104dc:	2a00      	cmp	r2, #0
 80104de:	d1f0      	bne.n	80104c2 <quorem+0xf0>
 80104e0:	3c01      	subs	r4, #1
 80104e2:	e7eb      	b.n	80104bc <quorem+0xea>
 80104e4:	2000      	movs	r0, #0
 80104e6:	e7ee      	b.n	80104c6 <quorem+0xf4>

080104e8 <_dtoa_r>:
 80104e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80104ec:	ed2d 8b04 	vpush	{d8-d9}
 80104f0:	ec57 6b10 	vmov	r6, r7, d0
 80104f4:	b093      	sub	sp, #76	; 0x4c
 80104f6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80104f8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80104fc:	9106      	str	r1, [sp, #24]
 80104fe:	ee10 aa10 	vmov	sl, s0
 8010502:	4604      	mov	r4, r0
 8010504:	9209      	str	r2, [sp, #36]	; 0x24
 8010506:	930c      	str	r3, [sp, #48]	; 0x30
 8010508:	46bb      	mov	fp, r7
 801050a:	b975      	cbnz	r5, 801052a <_dtoa_r+0x42>
 801050c:	2010      	movs	r0, #16
 801050e:	f7ff f9bf 	bl	800f890 <malloc>
 8010512:	4602      	mov	r2, r0
 8010514:	6260      	str	r0, [r4, #36]	; 0x24
 8010516:	b920      	cbnz	r0, 8010522 <_dtoa_r+0x3a>
 8010518:	4ba7      	ldr	r3, [pc, #668]	; (80107b8 <_dtoa_r+0x2d0>)
 801051a:	21ea      	movs	r1, #234	; 0xea
 801051c:	48a7      	ldr	r0, [pc, #668]	; (80107bc <_dtoa_r+0x2d4>)
 801051e:	f001 fae5 	bl	8011aec <__assert_func>
 8010522:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8010526:	6005      	str	r5, [r0, #0]
 8010528:	60c5      	str	r5, [r0, #12]
 801052a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801052c:	6819      	ldr	r1, [r3, #0]
 801052e:	b151      	cbz	r1, 8010546 <_dtoa_r+0x5e>
 8010530:	685a      	ldr	r2, [r3, #4]
 8010532:	604a      	str	r2, [r1, #4]
 8010534:	2301      	movs	r3, #1
 8010536:	4093      	lsls	r3, r2
 8010538:	608b      	str	r3, [r1, #8]
 801053a:	4620      	mov	r0, r4
 801053c:	f000 fe20 	bl	8011180 <_Bfree>
 8010540:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010542:	2200      	movs	r2, #0
 8010544:	601a      	str	r2, [r3, #0]
 8010546:	1e3b      	subs	r3, r7, #0
 8010548:	bfaa      	itet	ge
 801054a:	2300      	movge	r3, #0
 801054c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8010550:	f8c8 3000 	strge.w	r3, [r8]
 8010554:	4b9a      	ldr	r3, [pc, #616]	; (80107c0 <_dtoa_r+0x2d8>)
 8010556:	bfbc      	itt	lt
 8010558:	2201      	movlt	r2, #1
 801055a:	f8c8 2000 	strlt.w	r2, [r8]
 801055e:	ea33 030b 	bics.w	r3, r3, fp
 8010562:	d11b      	bne.n	801059c <_dtoa_r+0xb4>
 8010564:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8010566:	f242 730f 	movw	r3, #9999	; 0x270f
 801056a:	6013      	str	r3, [r2, #0]
 801056c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8010570:	4333      	orrs	r3, r6
 8010572:	f000 8592 	beq.w	801109a <_dtoa_r+0xbb2>
 8010576:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8010578:	b963      	cbnz	r3, 8010594 <_dtoa_r+0xac>
 801057a:	4b92      	ldr	r3, [pc, #584]	; (80107c4 <_dtoa_r+0x2dc>)
 801057c:	e022      	b.n	80105c4 <_dtoa_r+0xdc>
 801057e:	4b92      	ldr	r3, [pc, #584]	; (80107c8 <_dtoa_r+0x2e0>)
 8010580:	9301      	str	r3, [sp, #4]
 8010582:	3308      	adds	r3, #8
 8010584:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8010586:	6013      	str	r3, [r2, #0]
 8010588:	9801      	ldr	r0, [sp, #4]
 801058a:	b013      	add	sp, #76	; 0x4c
 801058c:	ecbd 8b04 	vpop	{d8-d9}
 8010590:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010594:	4b8b      	ldr	r3, [pc, #556]	; (80107c4 <_dtoa_r+0x2dc>)
 8010596:	9301      	str	r3, [sp, #4]
 8010598:	3303      	adds	r3, #3
 801059a:	e7f3      	b.n	8010584 <_dtoa_r+0x9c>
 801059c:	2200      	movs	r2, #0
 801059e:	2300      	movs	r3, #0
 80105a0:	4650      	mov	r0, sl
 80105a2:	4659      	mov	r1, fp
 80105a4:	f7f0 fab0 	bl	8000b08 <__aeabi_dcmpeq>
 80105a8:	ec4b ab19 	vmov	d9, sl, fp
 80105ac:	4680      	mov	r8, r0
 80105ae:	b158      	cbz	r0, 80105c8 <_dtoa_r+0xe0>
 80105b0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80105b2:	2301      	movs	r3, #1
 80105b4:	6013      	str	r3, [r2, #0]
 80105b6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80105b8:	2b00      	cmp	r3, #0
 80105ba:	f000 856b 	beq.w	8011094 <_dtoa_r+0xbac>
 80105be:	4883      	ldr	r0, [pc, #524]	; (80107cc <_dtoa_r+0x2e4>)
 80105c0:	6018      	str	r0, [r3, #0]
 80105c2:	1e43      	subs	r3, r0, #1
 80105c4:	9301      	str	r3, [sp, #4]
 80105c6:	e7df      	b.n	8010588 <_dtoa_r+0xa0>
 80105c8:	ec4b ab10 	vmov	d0, sl, fp
 80105cc:	aa10      	add	r2, sp, #64	; 0x40
 80105ce:	a911      	add	r1, sp, #68	; 0x44
 80105d0:	4620      	mov	r0, r4
 80105d2:	f001 f8bd 	bl	8011750 <__d2b>
 80105d6:	f3cb 550a 	ubfx	r5, fp, #20, #11
 80105da:	ee08 0a10 	vmov	s16, r0
 80105de:	2d00      	cmp	r5, #0
 80105e0:	f000 8084 	beq.w	80106ec <_dtoa_r+0x204>
 80105e4:	ee19 3a90 	vmov	r3, s19
 80105e8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80105ec:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 80105f0:	4656      	mov	r6, sl
 80105f2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 80105f6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80105fa:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 80105fe:	4b74      	ldr	r3, [pc, #464]	; (80107d0 <_dtoa_r+0x2e8>)
 8010600:	2200      	movs	r2, #0
 8010602:	4630      	mov	r0, r6
 8010604:	4639      	mov	r1, r7
 8010606:	f7ef fe5f 	bl	80002c8 <__aeabi_dsub>
 801060a:	a365      	add	r3, pc, #404	; (adr r3, 80107a0 <_dtoa_r+0x2b8>)
 801060c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010610:	f7f0 f812 	bl	8000638 <__aeabi_dmul>
 8010614:	a364      	add	r3, pc, #400	; (adr r3, 80107a8 <_dtoa_r+0x2c0>)
 8010616:	e9d3 2300 	ldrd	r2, r3, [r3]
 801061a:	f7ef fe57 	bl	80002cc <__adddf3>
 801061e:	4606      	mov	r6, r0
 8010620:	4628      	mov	r0, r5
 8010622:	460f      	mov	r7, r1
 8010624:	f7ef ff9e 	bl	8000564 <__aeabi_i2d>
 8010628:	a361      	add	r3, pc, #388	; (adr r3, 80107b0 <_dtoa_r+0x2c8>)
 801062a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801062e:	f7f0 f803 	bl	8000638 <__aeabi_dmul>
 8010632:	4602      	mov	r2, r0
 8010634:	460b      	mov	r3, r1
 8010636:	4630      	mov	r0, r6
 8010638:	4639      	mov	r1, r7
 801063a:	f7ef fe47 	bl	80002cc <__adddf3>
 801063e:	4606      	mov	r6, r0
 8010640:	460f      	mov	r7, r1
 8010642:	f7f0 faa9 	bl	8000b98 <__aeabi_d2iz>
 8010646:	2200      	movs	r2, #0
 8010648:	9000      	str	r0, [sp, #0]
 801064a:	2300      	movs	r3, #0
 801064c:	4630      	mov	r0, r6
 801064e:	4639      	mov	r1, r7
 8010650:	f7f0 fa64 	bl	8000b1c <__aeabi_dcmplt>
 8010654:	b150      	cbz	r0, 801066c <_dtoa_r+0x184>
 8010656:	9800      	ldr	r0, [sp, #0]
 8010658:	f7ef ff84 	bl	8000564 <__aeabi_i2d>
 801065c:	4632      	mov	r2, r6
 801065e:	463b      	mov	r3, r7
 8010660:	f7f0 fa52 	bl	8000b08 <__aeabi_dcmpeq>
 8010664:	b910      	cbnz	r0, 801066c <_dtoa_r+0x184>
 8010666:	9b00      	ldr	r3, [sp, #0]
 8010668:	3b01      	subs	r3, #1
 801066a:	9300      	str	r3, [sp, #0]
 801066c:	9b00      	ldr	r3, [sp, #0]
 801066e:	2b16      	cmp	r3, #22
 8010670:	d85a      	bhi.n	8010728 <_dtoa_r+0x240>
 8010672:	9a00      	ldr	r2, [sp, #0]
 8010674:	4b57      	ldr	r3, [pc, #348]	; (80107d4 <_dtoa_r+0x2ec>)
 8010676:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801067a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801067e:	ec51 0b19 	vmov	r0, r1, d9
 8010682:	f7f0 fa4b 	bl	8000b1c <__aeabi_dcmplt>
 8010686:	2800      	cmp	r0, #0
 8010688:	d050      	beq.n	801072c <_dtoa_r+0x244>
 801068a:	9b00      	ldr	r3, [sp, #0]
 801068c:	3b01      	subs	r3, #1
 801068e:	9300      	str	r3, [sp, #0]
 8010690:	2300      	movs	r3, #0
 8010692:	930b      	str	r3, [sp, #44]	; 0x2c
 8010694:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8010696:	1b5d      	subs	r5, r3, r5
 8010698:	1e6b      	subs	r3, r5, #1
 801069a:	9305      	str	r3, [sp, #20]
 801069c:	bf45      	ittet	mi
 801069e:	f1c5 0301 	rsbmi	r3, r5, #1
 80106a2:	9304      	strmi	r3, [sp, #16]
 80106a4:	2300      	movpl	r3, #0
 80106a6:	2300      	movmi	r3, #0
 80106a8:	bf4c      	ite	mi
 80106aa:	9305      	strmi	r3, [sp, #20]
 80106ac:	9304      	strpl	r3, [sp, #16]
 80106ae:	9b00      	ldr	r3, [sp, #0]
 80106b0:	2b00      	cmp	r3, #0
 80106b2:	db3d      	blt.n	8010730 <_dtoa_r+0x248>
 80106b4:	9b05      	ldr	r3, [sp, #20]
 80106b6:	9a00      	ldr	r2, [sp, #0]
 80106b8:	920a      	str	r2, [sp, #40]	; 0x28
 80106ba:	4413      	add	r3, r2
 80106bc:	9305      	str	r3, [sp, #20]
 80106be:	2300      	movs	r3, #0
 80106c0:	9307      	str	r3, [sp, #28]
 80106c2:	9b06      	ldr	r3, [sp, #24]
 80106c4:	2b09      	cmp	r3, #9
 80106c6:	f200 8089 	bhi.w	80107dc <_dtoa_r+0x2f4>
 80106ca:	2b05      	cmp	r3, #5
 80106cc:	bfc4      	itt	gt
 80106ce:	3b04      	subgt	r3, #4
 80106d0:	9306      	strgt	r3, [sp, #24]
 80106d2:	9b06      	ldr	r3, [sp, #24]
 80106d4:	f1a3 0302 	sub.w	r3, r3, #2
 80106d8:	bfcc      	ite	gt
 80106da:	2500      	movgt	r5, #0
 80106dc:	2501      	movle	r5, #1
 80106de:	2b03      	cmp	r3, #3
 80106e0:	f200 8087 	bhi.w	80107f2 <_dtoa_r+0x30a>
 80106e4:	e8df f003 	tbb	[pc, r3]
 80106e8:	59383a2d 	.word	0x59383a2d
 80106ec:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 80106f0:	441d      	add	r5, r3
 80106f2:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80106f6:	2b20      	cmp	r3, #32
 80106f8:	bfc1      	itttt	gt
 80106fa:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80106fe:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8010702:	fa0b f303 	lslgt.w	r3, fp, r3
 8010706:	fa26 f000 	lsrgt.w	r0, r6, r0
 801070a:	bfda      	itte	le
 801070c:	f1c3 0320 	rsble	r3, r3, #32
 8010710:	fa06 f003 	lslle.w	r0, r6, r3
 8010714:	4318      	orrgt	r0, r3
 8010716:	f7ef ff15 	bl	8000544 <__aeabi_ui2d>
 801071a:	2301      	movs	r3, #1
 801071c:	4606      	mov	r6, r0
 801071e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8010722:	3d01      	subs	r5, #1
 8010724:	930e      	str	r3, [sp, #56]	; 0x38
 8010726:	e76a      	b.n	80105fe <_dtoa_r+0x116>
 8010728:	2301      	movs	r3, #1
 801072a:	e7b2      	b.n	8010692 <_dtoa_r+0x1aa>
 801072c:	900b      	str	r0, [sp, #44]	; 0x2c
 801072e:	e7b1      	b.n	8010694 <_dtoa_r+0x1ac>
 8010730:	9b04      	ldr	r3, [sp, #16]
 8010732:	9a00      	ldr	r2, [sp, #0]
 8010734:	1a9b      	subs	r3, r3, r2
 8010736:	9304      	str	r3, [sp, #16]
 8010738:	4253      	negs	r3, r2
 801073a:	9307      	str	r3, [sp, #28]
 801073c:	2300      	movs	r3, #0
 801073e:	930a      	str	r3, [sp, #40]	; 0x28
 8010740:	e7bf      	b.n	80106c2 <_dtoa_r+0x1da>
 8010742:	2300      	movs	r3, #0
 8010744:	9308      	str	r3, [sp, #32]
 8010746:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010748:	2b00      	cmp	r3, #0
 801074a:	dc55      	bgt.n	80107f8 <_dtoa_r+0x310>
 801074c:	2301      	movs	r3, #1
 801074e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8010752:	461a      	mov	r2, r3
 8010754:	9209      	str	r2, [sp, #36]	; 0x24
 8010756:	e00c      	b.n	8010772 <_dtoa_r+0x28a>
 8010758:	2301      	movs	r3, #1
 801075a:	e7f3      	b.n	8010744 <_dtoa_r+0x25c>
 801075c:	2300      	movs	r3, #0
 801075e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010760:	9308      	str	r3, [sp, #32]
 8010762:	9b00      	ldr	r3, [sp, #0]
 8010764:	4413      	add	r3, r2
 8010766:	9302      	str	r3, [sp, #8]
 8010768:	3301      	adds	r3, #1
 801076a:	2b01      	cmp	r3, #1
 801076c:	9303      	str	r3, [sp, #12]
 801076e:	bfb8      	it	lt
 8010770:	2301      	movlt	r3, #1
 8010772:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8010774:	2200      	movs	r2, #0
 8010776:	6042      	str	r2, [r0, #4]
 8010778:	2204      	movs	r2, #4
 801077a:	f102 0614 	add.w	r6, r2, #20
 801077e:	429e      	cmp	r6, r3
 8010780:	6841      	ldr	r1, [r0, #4]
 8010782:	d93d      	bls.n	8010800 <_dtoa_r+0x318>
 8010784:	4620      	mov	r0, r4
 8010786:	f000 fcbb 	bl	8011100 <_Balloc>
 801078a:	9001      	str	r0, [sp, #4]
 801078c:	2800      	cmp	r0, #0
 801078e:	d13b      	bne.n	8010808 <_dtoa_r+0x320>
 8010790:	4b11      	ldr	r3, [pc, #68]	; (80107d8 <_dtoa_r+0x2f0>)
 8010792:	4602      	mov	r2, r0
 8010794:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8010798:	e6c0      	b.n	801051c <_dtoa_r+0x34>
 801079a:	2301      	movs	r3, #1
 801079c:	e7df      	b.n	801075e <_dtoa_r+0x276>
 801079e:	bf00      	nop
 80107a0:	636f4361 	.word	0x636f4361
 80107a4:	3fd287a7 	.word	0x3fd287a7
 80107a8:	8b60c8b3 	.word	0x8b60c8b3
 80107ac:	3fc68a28 	.word	0x3fc68a28
 80107b0:	509f79fb 	.word	0x509f79fb
 80107b4:	3fd34413 	.word	0x3fd34413
 80107b8:	0801429d 	.word	0x0801429d
 80107bc:	080142b4 	.word	0x080142b4
 80107c0:	7ff00000 	.word	0x7ff00000
 80107c4:	08014299 	.word	0x08014299
 80107c8:	08014290 	.word	0x08014290
 80107cc:	0801426d 	.word	0x0801426d
 80107d0:	3ff80000 	.word	0x3ff80000
 80107d4:	080143a8 	.word	0x080143a8
 80107d8:	0801430f 	.word	0x0801430f
 80107dc:	2501      	movs	r5, #1
 80107de:	2300      	movs	r3, #0
 80107e0:	9306      	str	r3, [sp, #24]
 80107e2:	9508      	str	r5, [sp, #32]
 80107e4:	f04f 33ff 	mov.w	r3, #4294967295
 80107e8:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80107ec:	2200      	movs	r2, #0
 80107ee:	2312      	movs	r3, #18
 80107f0:	e7b0      	b.n	8010754 <_dtoa_r+0x26c>
 80107f2:	2301      	movs	r3, #1
 80107f4:	9308      	str	r3, [sp, #32]
 80107f6:	e7f5      	b.n	80107e4 <_dtoa_r+0x2fc>
 80107f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80107fa:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80107fe:	e7b8      	b.n	8010772 <_dtoa_r+0x28a>
 8010800:	3101      	adds	r1, #1
 8010802:	6041      	str	r1, [r0, #4]
 8010804:	0052      	lsls	r2, r2, #1
 8010806:	e7b8      	b.n	801077a <_dtoa_r+0x292>
 8010808:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801080a:	9a01      	ldr	r2, [sp, #4]
 801080c:	601a      	str	r2, [r3, #0]
 801080e:	9b03      	ldr	r3, [sp, #12]
 8010810:	2b0e      	cmp	r3, #14
 8010812:	f200 809d 	bhi.w	8010950 <_dtoa_r+0x468>
 8010816:	2d00      	cmp	r5, #0
 8010818:	f000 809a 	beq.w	8010950 <_dtoa_r+0x468>
 801081c:	9b00      	ldr	r3, [sp, #0]
 801081e:	2b00      	cmp	r3, #0
 8010820:	dd32      	ble.n	8010888 <_dtoa_r+0x3a0>
 8010822:	4ab7      	ldr	r2, [pc, #732]	; (8010b00 <_dtoa_r+0x618>)
 8010824:	f003 030f 	and.w	r3, r3, #15
 8010828:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 801082c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8010830:	9b00      	ldr	r3, [sp, #0]
 8010832:	05d8      	lsls	r0, r3, #23
 8010834:	ea4f 1723 	mov.w	r7, r3, asr #4
 8010838:	d516      	bpl.n	8010868 <_dtoa_r+0x380>
 801083a:	4bb2      	ldr	r3, [pc, #712]	; (8010b04 <_dtoa_r+0x61c>)
 801083c:	ec51 0b19 	vmov	r0, r1, d9
 8010840:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8010844:	f7f0 f822 	bl	800088c <__aeabi_ddiv>
 8010848:	f007 070f 	and.w	r7, r7, #15
 801084c:	4682      	mov	sl, r0
 801084e:	468b      	mov	fp, r1
 8010850:	2503      	movs	r5, #3
 8010852:	4eac      	ldr	r6, [pc, #688]	; (8010b04 <_dtoa_r+0x61c>)
 8010854:	b957      	cbnz	r7, 801086c <_dtoa_r+0x384>
 8010856:	4642      	mov	r2, r8
 8010858:	464b      	mov	r3, r9
 801085a:	4650      	mov	r0, sl
 801085c:	4659      	mov	r1, fp
 801085e:	f7f0 f815 	bl	800088c <__aeabi_ddiv>
 8010862:	4682      	mov	sl, r0
 8010864:	468b      	mov	fp, r1
 8010866:	e028      	b.n	80108ba <_dtoa_r+0x3d2>
 8010868:	2502      	movs	r5, #2
 801086a:	e7f2      	b.n	8010852 <_dtoa_r+0x36a>
 801086c:	07f9      	lsls	r1, r7, #31
 801086e:	d508      	bpl.n	8010882 <_dtoa_r+0x39a>
 8010870:	4640      	mov	r0, r8
 8010872:	4649      	mov	r1, r9
 8010874:	e9d6 2300 	ldrd	r2, r3, [r6]
 8010878:	f7ef fede 	bl	8000638 <__aeabi_dmul>
 801087c:	3501      	adds	r5, #1
 801087e:	4680      	mov	r8, r0
 8010880:	4689      	mov	r9, r1
 8010882:	107f      	asrs	r7, r7, #1
 8010884:	3608      	adds	r6, #8
 8010886:	e7e5      	b.n	8010854 <_dtoa_r+0x36c>
 8010888:	f000 809b 	beq.w	80109c2 <_dtoa_r+0x4da>
 801088c:	9b00      	ldr	r3, [sp, #0]
 801088e:	4f9d      	ldr	r7, [pc, #628]	; (8010b04 <_dtoa_r+0x61c>)
 8010890:	425e      	negs	r6, r3
 8010892:	4b9b      	ldr	r3, [pc, #620]	; (8010b00 <_dtoa_r+0x618>)
 8010894:	f006 020f 	and.w	r2, r6, #15
 8010898:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801089c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80108a0:	ec51 0b19 	vmov	r0, r1, d9
 80108a4:	f7ef fec8 	bl	8000638 <__aeabi_dmul>
 80108a8:	1136      	asrs	r6, r6, #4
 80108aa:	4682      	mov	sl, r0
 80108ac:	468b      	mov	fp, r1
 80108ae:	2300      	movs	r3, #0
 80108b0:	2502      	movs	r5, #2
 80108b2:	2e00      	cmp	r6, #0
 80108b4:	d17a      	bne.n	80109ac <_dtoa_r+0x4c4>
 80108b6:	2b00      	cmp	r3, #0
 80108b8:	d1d3      	bne.n	8010862 <_dtoa_r+0x37a>
 80108ba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80108bc:	2b00      	cmp	r3, #0
 80108be:	f000 8082 	beq.w	80109c6 <_dtoa_r+0x4de>
 80108c2:	4b91      	ldr	r3, [pc, #580]	; (8010b08 <_dtoa_r+0x620>)
 80108c4:	2200      	movs	r2, #0
 80108c6:	4650      	mov	r0, sl
 80108c8:	4659      	mov	r1, fp
 80108ca:	f7f0 f927 	bl	8000b1c <__aeabi_dcmplt>
 80108ce:	2800      	cmp	r0, #0
 80108d0:	d079      	beq.n	80109c6 <_dtoa_r+0x4de>
 80108d2:	9b03      	ldr	r3, [sp, #12]
 80108d4:	2b00      	cmp	r3, #0
 80108d6:	d076      	beq.n	80109c6 <_dtoa_r+0x4de>
 80108d8:	9b02      	ldr	r3, [sp, #8]
 80108da:	2b00      	cmp	r3, #0
 80108dc:	dd36      	ble.n	801094c <_dtoa_r+0x464>
 80108de:	9b00      	ldr	r3, [sp, #0]
 80108e0:	4650      	mov	r0, sl
 80108e2:	4659      	mov	r1, fp
 80108e4:	1e5f      	subs	r7, r3, #1
 80108e6:	2200      	movs	r2, #0
 80108e8:	4b88      	ldr	r3, [pc, #544]	; (8010b0c <_dtoa_r+0x624>)
 80108ea:	f7ef fea5 	bl	8000638 <__aeabi_dmul>
 80108ee:	9e02      	ldr	r6, [sp, #8]
 80108f0:	4682      	mov	sl, r0
 80108f2:	468b      	mov	fp, r1
 80108f4:	3501      	adds	r5, #1
 80108f6:	4628      	mov	r0, r5
 80108f8:	f7ef fe34 	bl	8000564 <__aeabi_i2d>
 80108fc:	4652      	mov	r2, sl
 80108fe:	465b      	mov	r3, fp
 8010900:	f7ef fe9a 	bl	8000638 <__aeabi_dmul>
 8010904:	4b82      	ldr	r3, [pc, #520]	; (8010b10 <_dtoa_r+0x628>)
 8010906:	2200      	movs	r2, #0
 8010908:	f7ef fce0 	bl	80002cc <__adddf3>
 801090c:	46d0      	mov	r8, sl
 801090e:	46d9      	mov	r9, fp
 8010910:	4682      	mov	sl, r0
 8010912:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8010916:	2e00      	cmp	r6, #0
 8010918:	d158      	bne.n	80109cc <_dtoa_r+0x4e4>
 801091a:	4b7e      	ldr	r3, [pc, #504]	; (8010b14 <_dtoa_r+0x62c>)
 801091c:	2200      	movs	r2, #0
 801091e:	4640      	mov	r0, r8
 8010920:	4649      	mov	r1, r9
 8010922:	f7ef fcd1 	bl	80002c8 <__aeabi_dsub>
 8010926:	4652      	mov	r2, sl
 8010928:	465b      	mov	r3, fp
 801092a:	4680      	mov	r8, r0
 801092c:	4689      	mov	r9, r1
 801092e:	f7f0 f913 	bl	8000b58 <__aeabi_dcmpgt>
 8010932:	2800      	cmp	r0, #0
 8010934:	f040 8295 	bne.w	8010e62 <_dtoa_r+0x97a>
 8010938:	4652      	mov	r2, sl
 801093a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 801093e:	4640      	mov	r0, r8
 8010940:	4649      	mov	r1, r9
 8010942:	f7f0 f8eb 	bl	8000b1c <__aeabi_dcmplt>
 8010946:	2800      	cmp	r0, #0
 8010948:	f040 8289 	bne.w	8010e5e <_dtoa_r+0x976>
 801094c:	ec5b ab19 	vmov	sl, fp, d9
 8010950:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8010952:	2b00      	cmp	r3, #0
 8010954:	f2c0 8148 	blt.w	8010be8 <_dtoa_r+0x700>
 8010958:	9a00      	ldr	r2, [sp, #0]
 801095a:	2a0e      	cmp	r2, #14
 801095c:	f300 8144 	bgt.w	8010be8 <_dtoa_r+0x700>
 8010960:	4b67      	ldr	r3, [pc, #412]	; (8010b00 <_dtoa_r+0x618>)
 8010962:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8010966:	e9d3 8900 	ldrd	r8, r9, [r3]
 801096a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801096c:	2b00      	cmp	r3, #0
 801096e:	f280 80d5 	bge.w	8010b1c <_dtoa_r+0x634>
 8010972:	9b03      	ldr	r3, [sp, #12]
 8010974:	2b00      	cmp	r3, #0
 8010976:	f300 80d1 	bgt.w	8010b1c <_dtoa_r+0x634>
 801097a:	f040 826f 	bne.w	8010e5c <_dtoa_r+0x974>
 801097e:	4b65      	ldr	r3, [pc, #404]	; (8010b14 <_dtoa_r+0x62c>)
 8010980:	2200      	movs	r2, #0
 8010982:	4640      	mov	r0, r8
 8010984:	4649      	mov	r1, r9
 8010986:	f7ef fe57 	bl	8000638 <__aeabi_dmul>
 801098a:	4652      	mov	r2, sl
 801098c:	465b      	mov	r3, fp
 801098e:	f7f0 f8d9 	bl	8000b44 <__aeabi_dcmpge>
 8010992:	9e03      	ldr	r6, [sp, #12]
 8010994:	4637      	mov	r7, r6
 8010996:	2800      	cmp	r0, #0
 8010998:	f040 8245 	bne.w	8010e26 <_dtoa_r+0x93e>
 801099c:	9d01      	ldr	r5, [sp, #4]
 801099e:	2331      	movs	r3, #49	; 0x31
 80109a0:	f805 3b01 	strb.w	r3, [r5], #1
 80109a4:	9b00      	ldr	r3, [sp, #0]
 80109a6:	3301      	adds	r3, #1
 80109a8:	9300      	str	r3, [sp, #0]
 80109aa:	e240      	b.n	8010e2e <_dtoa_r+0x946>
 80109ac:	07f2      	lsls	r2, r6, #31
 80109ae:	d505      	bpl.n	80109bc <_dtoa_r+0x4d4>
 80109b0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80109b4:	f7ef fe40 	bl	8000638 <__aeabi_dmul>
 80109b8:	3501      	adds	r5, #1
 80109ba:	2301      	movs	r3, #1
 80109bc:	1076      	asrs	r6, r6, #1
 80109be:	3708      	adds	r7, #8
 80109c0:	e777      	b.n	80108b2 <_dtoa_r+0x3ca>
 80109c2:	2502      	movs	r5, #2
 80109c4:	e779      	b.n	80108ba <_dtoa_r+0x3d2>
 80109c6:	9f00      	ldr	r7, [sp, #0]
 80109c8:	9e03      	ldr	r6, [sp, #12]
 80109ca:	e794      	b.n	80108f6 <_dtoa_r+0x40e>
 80109cc:	9901      	ldr	r1, [sp, #4]
 80109ce:	4b4c      	ldr	r3, [pc, #304]	; (8010b00 <_dtoa_r+0x618>)
 80109d0:	4431      	add	r1, r6
 80109d2:	910d      	str	r1, [sp, #52]	; 0x34
 80109d4:	9908      	ldr	r1, [sp, #32]
 80109d6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80109da:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80109de:	2900      	cmp	r1, #0
 80109e0:	d043      	beq.n	8010a6a <_dtoa_r+0x582>
 80109e2:	494d      	ldr	r1, [pc, #308]	; (8010b18 <_dtoa_r+0x630>)
 80109e4:	2000      	movs	r0, #0
 80109e6:	f7ef ff51 	bl	800088c <__aeabi_ddiv>
 80109ea:	4652      	mov	r2, sl
 80109ec:	465b      	mov	r3, fp
 80109ee:	f7ef fc6b 	bl	80002c8 <__aeabi_dsub>
 80109f2:	9d01      	ldr	r5, [sp, #4]
 80109f4:	4682      	mov	sl, r0
 80109f6:	468b      	mov	fp, r1
 80109f8:	4649      	mov	r1, r9
 80109fa:	4640      	mov	r0, r8
 80109fc:	f7f0 f8cc 	bl	8000b98 <__aeabi_d2iz>
 8010a00:	4606      	mov	r6, r0
 8010a02:	f7ef fdaf 	bl	8000564 <__aeabi_i2d>
 8010a06:	4602      	mov	r2, r0
 8010a08:	460b      	mov	r3, r1
 8010a0a:	4640      	mov	r0, r8
 8010a0c:	4649      	mov	r1, r9
 8010a0e:	f7ef fc5b 	bl	80002c8 <__aeabi_dsub>
 8010a12:	3630      	adds	r6, #48	; 0x30
 8010a14:	f805 6b01 	strb.w	r6, [r5], #1
 8010a18:	4652      	mov	r2, sl
 8010a1a:	465b      	mov	r3, fp
 8010a1c:	4680      	mov	r8, r0
 8010a1e:	4689      	mov	r9, r1
 8010a20:	f7f0 f87c 	bl	8000b1c <__aeabi_dcmplt>
 8010a24:	2800      	cmp	r0, #0
 8010a26:	d163      	bne.n	8010af0 <_dtoa_r+0x608>
 8010a28:	4642      	mov	r2, r8
 8010a2a:	464b      	mov	r3, r9
 8010a2c:	4936      	ldr	r1, [pc, #216]	; (8010b08 <_dtoa_r+0x620>)
 8010a2e:	2000      	movs	r0, #0
 8010a30:	f7ef fc4a 	bl	80002c8 <__aeabi_dsub>
 8010a34:	4652      	mov	r2, sl
 8010a36:	465b      	mov	r3, fp
 8010a38:	f7f0 f870 	bl	8000b1c <__aeabi_dcmplt>
 8010a3c:	2800      	cmp	r0, #0
 8010a3e:	f040 80b5 	bne.w	8010bac <_dtoa_r+0x6c4>
 8010a42:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8010a44:	429d      	cmp	r5, r3
 8010a46:	d081      	beq.n	801094c <_dtoa_r+0x464>
 8010a48:	4b30      	ldr	r3, [pc, #192]	; (8010b0c <_dtoa_r+0x624>)
 8010a4a:	2200      	movs	r2, #0
 8010a4c:	4650      	mov	r0, sl
 8010a4e:	4659      	mov	r1, fp
 8010a50:	f7ef fdf2 	bl	8000638 <__aeabi_dmul>
 8010a54:	4b2d      	ldr	r3, [pc, #180]	; (8010b0c <_dtoa_r+0x624>)
 8010a56:	4682      	mov	sl, r0
 8010a58:	468b      	mov	fp, r1
 8010a5a:	4640      	mov	r0, r8
 8010a5c:	4649      	mov	r1, r9
 8010a5e:	2200      	movs	r2, #0
 8010a60:	f7ef fdea 	bl	8000638 <__aeabi_dmul>
 8010a64:	4680      	mov	r8, r0
 8010a66:	4689      	mov	r9, r1
 8010a68:	e7c6      	b.n	80109f8 <_dtoa_r+0x510>
 8010a6a:	4650      	mov	r0, sl
 8010a6c:	4659      	mov	r1, fp
 8010a6e:	f7ef fde3 	bl	8000638 <__aeabi_dmul>
 8010a72:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8010a74:	9d01      	ldr	r5, [sp, #4]
 8010a76:	930f      	str	r3, [sp, #60]	; 0x3c
 8010a78:	4682      	mov	sl, r0
 8010a7a:	468b      	mov	fp, r1
 8010a7c:	4649      	mov	r1, r9
 8010a7e:	4640      	mov	r0, r8
 8010a80:	f7f0 f88a 	bl	8000b98 <__aeabi_d2iz>
 8010a84:	4606      	mov	r6, r0
 8010a86:	f7ef fd6d 	bl	8000564 <__aeabi_i2d>
 8010a8a:	3630      	adds	r6, #48	; 0x30
 8010a8c:	4602      	mov	r2, r0
 8010a8e:	460b      	mov	r3, r1
 8010a90:	4640      	mov	r0, r8
 8010a92:	4649      	mov	r1, r9
 8010a94:	f7ef fc18 	bl	80002c8 <__aeabi_dsub>
 8010a98:	f805 6b01 	strb.w	r6, [r5], #1
 8010a9c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8010a9e:	429d      	cmp	r5, r3
 8010aa0:	4680      	mov	r8, r0
 8010aa2:	4689      	mov	r9, r1
 8010aa4:	f04f 0200 	mov.w	r2, #0
 8010aa8:	d124      	bne.n	8010af4 <_dtoa_r+0x60c>
 8010aaa:	4b1b      	ldr	r3, [pc, #108]	; (8010b18 <_dtoa_r+0x630>)
 8010aac:	4650      	mov	r0, sl
 8010aae:	4659      	mov	r1, fp
 8010ab0:	f7ef fc0c 	bl	80002cc <__adddf3>
 8010ab4:	4602      	mov	r2, r0
 8010ab6:	460b      	mov	r3, r1
 8010ab8:	4640      	mov	r0, r8
 8010aba:	4649      	mov	r1, r9
 8010abc:	f7f0 f84c 	bl	8000b58 <__aeabi_dcmpgt>
 8010ac0:	2800      	cmp	r0, #0
 8010ac2:	d173      	bne.n	8010bac <_dtoa_r+0x6c4>
 8010ac4:	4652      	mov	r2, sl
 8010ac6:	465b      	mov	r3, fp
 8010ac8:	4913      	ldr	r1, [pc, #76]	; (8010b18 <_dtoa_r+0x630>)
 8010aca:	2000      	movs	r0, #0
 8010acc:	f7ef fbfc 	bl	80002c8 <__aeabi_dsub>
 8010ad0:	4602      	mov	r2, r0
 8010ad2:	460b      	mov	r3, r1
 8010ad4:	4640      	mov	r0, r8
 8010ad6:	4649      	mov	r1, r9
 8010ad8:	f7f0 f820 	bl	8000b1c <__aeabi_dcmplt>
 8010adc:	2800      	cmp	r0, #0
 8010ade:	f43f af35 	beq.w	801094c <_dtoa_r+0x464>
 8010ae2:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8010ae4:	1e6b      	subs	r3, r5, #1
 8010ae6:	930f      	str	r3, [sp, #60]	; 0x3c
 8010ae8:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8010aec:	2b30      	cmp	r3, #48	; 0x30
 8010aee:	d0f8      	beq.n	8010ae2 <_dtoa_r+0x5fa>
 8010af0:	9700      	str	r7, [sp, #0]
 8010af2:	e049      	b.n	8010b88 <_dtoa_r+0x6a0>
 8010af4:	4b05      	ldr	r3, [pc, #20]	; (8010b0c <_dtoa_r+0x624>)
 8010af6:	f7ef fd9f 	bl	8000638 <__aeabi_dmul>
 8010afa:	4680      	mov	r8, r0
 8010afc:	4689      	mov	r9, r1
 8010afe:	e7bd      	b.n	8010a7c <_dtoa_r+0x594>
 8010b00:	080143a8 	.word	0x080143a8
 8010b04:	08014380 	.word	0x08014380
 8010b08:	3ff00000 	.word	0x3ff00000
 8010b0c:	40240000 	.word	0x40240000
 8010b10:	401c0000 	.word	0x401c0000
 8010b14:	40140000 	.word	0x40140000
 8010b18:	3fe00000 	.word	0x3fe00000
 8010b1c:	9d01      	ldr	r5, [sp, #4]
 8010b1e:	4656      	mov	r6, sl
 8010b20:	465f      	mov	r7, fp
 8010b22:	4642      	mov	r2, r8
 8010b24:	464b      	mov	r3, r9
 8010b26:	4630      	mov	r0, r6
 8010b28:	4639      	mov	r1, r7
 8010b2a:	f7ef feaf 	bl	800088c <__aeabi_ddiv>
 8010b2e:	f7f0 f833 	bl	8000b98 <__aeabi_d2iz>
 8010b32:	4682      	mov	sl, r0
 8010b34:	f7ef fd16 	bl	8000564 <__aeabi_i2d>
 8010b38:	4642      	mov	r2, r8
 8010b3a:	464b      	mov	r3, r9
 8010b3c:	f7ef fd7c 	bl	8000638 <__aeabi_dmul>
 8010b40:	4602      	mov	r2, r0
 8010b42:	460b      	mov	r3, r1
 8010b44:	4630      	mov	r0, r6
 8010b46:	4639      	mov	r1, r7
 8010b48:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8010b4c:	f7ef fbbc 	bl	80002c8 <__aeabi_dsub>
 8010b50:	f805 6b01 	strb.w	r6, [r5], #1
 8010b54:	9e01      	ldr	r6, [sp, #4]
 8010b56:	9f03      	ldr	r7, [sp, #12]
 8010b58:	1bae      	subs	r6, r5, r6
 8010b5a:	42b7      	cmp	r7, r6
 8010b5c:	4602      	mov	r2, r0
 8010b5e:	460b      	mov	r3, r1
 8010b60:	d135      	bne.n	8010bce <_dtoa_r+0x6e6>
 8010b62:	f7ef fbb3 	bl	80002cc <__adddf3>
 8010b66:	4642      	mov	r2, r8
 8010b68:	464b      	mov	r3, r9
 8010b6a:	4606      	mov	r6, r0
 8010b6c:	460f      	mov	r7, r1
 8010b6e:	f7ef fff3 	bl	8000b58 <__aeabi_dcmpgt>
 8010b72:	b9d0      	cbnz	r0, 8010baa <_dtoa_r+0x6c2>
 8010b74:	4642      	mov	r2, r8
 8010b76:	464b      	mov	r3, r9
 8010b78:	4630      	mov	r0, r6
 8010b7a:	4639      	mov	r1, r7
 8010b7c:	f7ef ffc4 	bl	8000b08 <__aeabi_dcmpeq>
 8010b80:	b110      	cbz	r0, 8010b88 <_dtoa_r+0x6a0>
 8010b82:	f01a 0f01 	tst.w	sl, #1
 8010b86:	d110      	bne.n	8010baa <_dtoa_r+0x6c2>
 8010b88:	4620      	mov	r0, r4
 8010b8a:	ee18 1a10 	vmov	r1, s16
 8010b8e:	f000 faf7 	bl	8011180 <_Bfree>
 8010b92:	2300      	movs	r3, #0
 8010b94:	9800      	ldr	r0, [sp, #0]
 8010b96:	702b      	strb	r3, [r5, #0]
 8010b98:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8010b9a:	3001      	adds	r0, #1
 8010b9c:	6018      	str	r0, [r3, #0]
 8010b9e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8010ba0:	2b00      	cmp	r3, #0
 8010ba2:	f43f acf1 	beq.w	8010588 <_dtoa_r+0xa0>
 8010ba6:	601d      	str	r5, [r3, #0]
 8010ba8:	e4ee      	b.n	8010588 <_dtoa_r+0xa0>
 8010baa:	9f00      	ldr	r7, [sp, #0]
 8010bac:	462b      	mov	r3, r5
 8010bae:	461d      	mov	r5, r3
 8010bb0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8010bb4:	2a39      	cmp	r2, #57	; 0x39
 8010bb6:	d106      	bne.n	8010bc6 <_dtoa_r+0x6de>
 8010bb8:	9a01      	ldr	r2, [sp, #4]
 8010bba:	429a      	cmp	r2, r3
 8010bbc:	d1f7      	bne.n	8010bae <_dtoa_r+0x6c6>
 8010bbe:	9901      	ldr	r1, [sp, #4]
 8010bc0:	2230      	movs	r2, #48	; 0x30
 8010bc2:	3701      	adds	r7, #1
 8010bc4:	700a      	strb	r2, [r1, #0]
 8010bc6:	781a      	ldrb	r2, [r3, #0]
 8010bc8:	3201      	adds	r2, #1
 8010bca:	701a      	strb	r2, [r3, #0]
 8010bcc:	e790      	b.n	8010af0 <_dtoa_r+0x608>
 8010bce:	4ba6      	ldr	r3, [pc, #664]	; (8010e68 <_dtoa_r+0x980>)
 8010bd0:	2200      	movs	r2, #0
 8010bd2:	f7ef fd31 	bl	8000638 <__aeabi_dmul>
 8010bd6:	2200      	movs	r2, #0
 8010bd8:	2300      	movs	r3, #0
 8010bda:	4606      	mov	r6, r0
 8010bdc:	460f      	mov	r7, r1
 8010bde:	f7ef ff93 	bl	8000b08 <__aeabi_dcmpeq>
 8010be2:	2800      	cmp	r0, #0
 8010be4:	d09d      	beq.n	8010b22 <_dtoa_r+0x63a>
 8010be6:	e7cf      	b.n	8010b88 <_dtoa_r+0x6a0>
 8010be8:	9a08      	ldr	r2, [sp, #32]
 8010bea:	2a00      	cmp	r2, #0
 8010bec:	f000 80d7 	beq.w	8010d9e <_dtoa_r+0x8b6>
 8010bf0:	9a06      	ldr	r2, [sp, #24]
 8010bf2:	2a01      	cmp	r2, #1
 8010bf4:	f300 80ba 	bgt.w	8010d6c <_dtoa_r+0x884>
 8010bf8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8010bfa:	2a00      	cmp	r2, #0
 8010bfc:	f000 80b2 	beq.w	8010d64 <_dtoa_r+0x87c>
 8010c00:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8010c04:	9e07      	ldr	r6, [sp, #28]
 8010c06:	9d04      	ldr	r5, [sp, #16]
 8010c08:	9a04      	ldr	r2, [sp, #16]
 8010c0a:	441a      	add	r2, r3
 8010c0c:	9204      	str	r2, [sp, #16]
 8010c0e:	9a05      	ldr	r2, [sp, #20]
 8010c10:	2101      	movs	r1, #1
 8010c12:	441a      	add	r2, r3
 8010c14:	4620      	mov	r0, r4
 8010c16:	9205      	str	r2, [sp, #20]
 8010c18:	f000 fb6a 	bl	80112f0 <__i2b>
 8010c1c:	4607      	mov	r7, r0
 8010c1e:	2d00      	cmp	r5, #0
 8010c20:	dd0c      	ble.n	8010c3c <_dtoa_r+0x754>
 8010c22:	9b05      	ldr	r3, [sp, #20]
 8010c24:	2b00      	cmp	r3, #0
 8010c26:	dd09      	ble.n	8010c3c <_dtoa_r+0x754>
 8010c28:	42ab      	cmp	r3, r5
 8010c2a:	9a04      	ldr	r2, [sp, #16]
 8010c2c:	bfa8      	it	ge
 8010c2e:	462b      	movge	r3, r5
 8010c30:	1ad2      	subs	r2, r2, r3
 8010c32:	9204      	str	r2, [sp, #16]
 8010c34:	9a05      	ldr	r2, [sp, #20]
 8010c36:	1aed      	subs	r5, r5, r3
 8010c38:	1ad3      	subs	r3, r2, r3
 8010c3a:	9305      	str	r3, [sp, #20]
 8010c3c:	9b07      	ldr	r3, [sp, #28]
 8010c3e:	b31b      	cbz	r3, 8010c88 <_dtoa_r+0x7a0>
 8010c40:	9b08      	ldr	r3, [sp, #32]
 8010c42:	2b00      	cmp	r3, #0
 8010c44:	f000 80af 	beq.w	8010da6 <_dtoa_r+0x8be>
 8010c48:	2e00      	cmp	r6, #0
 8010c4a:	dd13      	ble.n	8010c74 <_dtoa_r+0x78c>
 8010c4c:	4639      	mov	r1, r7
 8010c4e:	4632      	mov	r2, r6
 8010c50:	4620      	mov	r0, r4
 8010c52:	f000 fc0d 	bl	8011470 <__pow5mult>
 8010c56:	ee18 2a10 	vmov	r2, s16
 8010c5a:	4601      	mov	r1, r0
 8010c5c:	4607      	mov	r7, r0
 8010c5e:	4620      	mov	r0, r4
 8010c60:	f000 fb5c 	bl	801131c <__multiply>
 8010c64:	ee18 1a10 	vmov	r1, s16
 8010c68:	4680      	mov	r8, r0
 8010c6a:	4620      	mov	r0, r4
 8010c6c:	f000 fa88 	bl	8011180 <_Bfree>
 8010c70:	ee08 8a10 	vmov	s16, r8
 8010c74:	9b07      	ldr	r3, [sp, #28]
 8010c76:	1b9a      	subs	r2, r3, r6
 8010c78:	d006      	beq.n	8010c88 <_dtoa_r+0x7a0>
 8010c7a:	ee18 1a10 	vmov	r1, s16
 8010c7e:	4620      	mov	r0, r4
 8010c80:	f000 fbf6 	bl	8011470 <__pow5mult>
 8010c84:	ee08 0a10 	vmov	s16, r0
 8010c88:	2101      	movs	r1, #1
 8010c8a:	4620      	mov	r0, r4
 8010c8c:	f000 fb30 	bl	80112f0 <__i2b>
 8010c90:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010c92:	2b00      	cmp	r3, #0
 8010c94:	4606      	mov	r6, r0
 8010c96:	f340 8088 	ble.w	8010daa <_dtoa_r+0x8c2>
 8010c9a:	461a      	mov	r2, r3
 8010c9c:	4601      	mov	r1, r0
 8010c9e:	4620      	mov	r0, r4
 8010ca0:	f000 fbe6 	bl	8011470 <__pow5mult>
 8010ca4:	9b06      	ldr	r3, [sp, #24]
 8010ca6:	2b01      	cmp	r3, #1
 8010ca8:	4606      	mov	r6, r0
 8010caa:	f340 8081 	ble.w	8010db0 <_dtoa_r+0x8c8>
 8010cae:	f04f 0800 	mov.w	r8, #0
 8010cb2:	6933      	ldr	r3, [r6, #16]
 8010cb4:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8010cb8:	6918      	ldr	r0, [r3, #16]
 8010cba:	f000 fac9 	bl	8011250 <__hi0bits>
 8010cbe:	f1c0 0020 	rsb	r0, r0, #32
 8010cc2:	9b05      	ldr	r3, [sp, #20]
 8010cc4:	4418      	add	r0, r3
 8010cc6:	f010 001f 	ands.w	r0, r0, #31
 8010cca:	f000 8092 	beq.w	8010df2 <_dtoa_r+0x90a>
 8010cce:	f1c0 0320 	rsb	r3, r0, #32
 8010cd2:	2b04      	cmp	r3, #4
 8010cd4:	f340 808a 	ble.w	8010dec <_dtoa_r+0x904>
 8010cd8:	f1c0 001c 	rsb	r0, r0, #28
 8010cdc:	9b04      	ldr	r3, [sp, #16]
 8010cde:	4403      	add	r3, r0
 8010ce0:	9304      	str	r3, [sp, #16]
 8010ce2:	9b05      	ldr	r3, [sp, #20]
 8010ce4:	4403      	add	r3, r0
 8010ce6:	4405      	add	r5, r0
 8010ce8:	9305      	str	r3, [sp, #20]
 8010cea:	9b04      	ldr	r3, [sp, #16]
 8010cec:	2b00      	cmp	r3, #0
 8010cee:	dd07      	ble.n	8010d00 <_dtoa_r+0x818>
 8010cf0:	ee18 1a10 	vmov	r1, s16
 8010cf4:	461a      	mov	r2, r3
 8010cf6:	4620      	mov	r0, r4
 8010cf8:	f000 fc14 	bl	8011524 <__lshift>
 8010cfc:	ee08 0a10 	vmov	s16, r0
 8010d00:	9b05      	ldr	r3, [sp, #20]
 8010d02:	2b00      	cmp	r3, #0
 8010d04:	dd05      	ble.n	8010d12 <_dtoa_r+0x82a>
 8010d06:	4631      	mov	r1, r6
 8010d08:	461a      	mov	r2, r3
 8010d0a:	4620      	mov	r0, r4
 8010d0c:	f000 fc0a 	bl	8011524 <__lshift>
 8010d10:	4606      	mov	r6, r0
 8010d12:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010d14:	2b00      	cmp	r3, #0
 8010d16:	d06e      	beq.n	8010df6 <_dtoa_r+0x90e>
 8010d18:	ee18 0a10 	vmov	r0, s16
 8010d1c:	4631      	mov	r1, r6
 8010d1e:	f000 fc71 	bl	8011604 <__mcmp>
 8010d22:	2800      	cmp	r0, #0
 8010d24:	da67      	bge.n	8010df6 <_dtoa_r+0x90e>
 8010d26:	9b00      	ldr	r3, [sp, #0]
 8010d28:	3b01      	subs	r3, #1
 8010d2a:	ee18 1a10 	vmov	r1, s16
 8010d2e:	9300      	str	r3, [sp, #0]
 8010d30:	220a      	movs	r2, #10
 8010d32:	2300      	movs	r3, #0
 8010d34:	4620      	mov	r0, r4
 8010d36:	f000 fa45 	bl	80111c4 <__multadd>
 8010d3a:	9b08      	ldr	r3, [sp, #32]
 8010d3c:	ee08 0a10 	vmov	s16, r0
 8010d40:	2b00      	cmp	r3, #0
 8010d42:	f000 81b1 	beq.w	80110a8 <_dtoa_r+0xbc0>
 8010d46:	2300      	movs	r3, #0
 8010d48:	4639      	mov	r1, r7
 8010d4a:	220a      	movs	r2, #10
 8010d4c:	4620      	mov	r0, r4
 8010d4e:	f000 fa39 	bl	80111c4 <__multadd>
 8010d52:	9b02      	ldr	r3, [sp, #8]
 8010d54:	2b00      	cmp	r3, #0
 8010d56:	4607      	mov	r7, r0
 8010d58:	f300 808e 	bgt.w	8010e78 <_dtoa_r+0x990>
 8010d5c:	9b06      	ldr	r3, [sp, #24]
 8010d5e:	2b02      	cmp	r3, #2
 8010d60:	dc51      	bgt.n	8010e06 <_dtoa_r+0x91e>
 8010d62:	e089      	b.n	8010e78 <_dtoa_r+0x990>
 8010d64:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8010d66:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8010d6a:	e74b      	b.n	8010c04 <_dtoa_r+0x71c>
 8010d6c:	9b03      	ldr	r3, [sp, #12]
 8010d6e:	1e5e      	subs	r6, r3, #1
 8010d70:	9b07      	ldr	r3, [sp, #28]
 8010d72:	42b3      	cmp	r3, r6
 8010d74:	bfbf      	itttt	lt
 8010d76:	9b07      	ldrlt	r3, [sp, #28]
 8010d78:	9607      	strlt	r6, [sp, #28]
 8010d7a:	1af2      	sublt	r2, r6, r3
 8010d7c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8010d7e:	bfb6      	itet	lt
 8010d80:	189b      	addlt	r3, r3, r2
 8010d82:	1b9e      	subge	r6, r3, r6
 8010d84:	930a      	strlt	r3, [sp, #40]	; 0x28
 8010d86:	9b03      	ldr	r3, [sp, #12]
 8010d88:	bfb8      	it	lt
 8010d8a:	2600      	movlt	r6, #0
 8010d8c:	2b00      	cmp	r3, #0
 8010d8e:	bfb7      	itett	lt
 8010d90:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8010d94:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8010d98:	1a9d      	sublt	r5, r3, r2
 8010d9a:	2300      	movlt	r3, #0
 8010d9c:	e734      	b.n	8010c08 <_dtoa_r+0x720>
 8010d9e:	9e07      	ldr	r6, [sp, #28]
 8010da0:	9d04      	ldr	r5, [sp, #16]
 8010da2:	9f08      	ldr	r7, [sp, #32]
 8010da4:	e73b      	b.n	8010c1e <_dtoa_r+0x736>
 8010da6:	9a07      	ldr	r2, [sp, #28]
 8010da8:	e767      	b.n	8010c7a <_dtoa_r+0x792>
 8010daa:	9b06      	ldr	r3, [sp, #24]
 8010dac:	2b01      	cmp	r3, #1
 8010dae:	dc18      	bgt.n	8010de2 <_dtoa_r+0x8fa>
 8010db0:	f1ba 0f00 	cmp.w	sl, #0
 8010db4:	d115      	bne.n	8010de2 <_dtoa_r+0x8fa>
 8010db6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8010dba:	b993      	cbnz	r3, 8010de2 <_dtoa_r+0x8fa>
 8010dbc:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8010dc0:	0d1b      	lsrs	r3, r3, #20
 8010dc2:	051b      	lsls	r3, r3, #20
 8010dc4:	b183      	cbz	r3, 8010de8 <_dtoa_r+0x900>
 8010dc6:	9b04      	ldr	r3, [sp, #16]
 8010dc8:	3301      	adds	r3, #1
 8010dca:	9304      	str	r3, [sp, #16]
 8010dcc:	9b05      	ldr	r3, [sp, #20]
 8010dce:	3301      	adds	r3, #1
 8010dd0:	9305      	str	r3, [sp, #20]
 8010dd2:	f04f 0801 	mov.w	r8, #1
 8010dd6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010dd8:	2b00      	cmp	r3, #0
 8010dda:	f47f af6a 	bne.w	8010cb2 <_dtoa_r+0x7ca>
 8010dde:	2001      	movs	r0, #1
 8010de0:	e76f      	b.n	8010cc2 <_dtoa_r+0x7da>
 8010de2:	f04f 0800 	mov.w	r8, #0
 8010de6:	e7f6      	b.n	8010dd6 <_dtoa_r+0x8ee>
 8010de8:	4698      	mov	r8, r3
 8010dea:	e7f4      	b.n	8010dd6 <_dtoa_r+0x8ee>
 8010dec:	f43f af7d 	beq.w	8010cea <_dtoa_r+0x802>
 8010df0:	4618      	mov	r0, r3
 8010df2:	301c      	adds	r0, #28
 8010df4:	e772      	b.n	8010cdc <_dtoa_r+0x7f4>
 8010df6:	9b03      	ldr	r3, [sp, #12]
 8010df8:	2b00      	cmp	r3, #0
 8010dfa:	dc37      	bgt.n	8010e6c <_dtoa_r+0x984>
 8010dfc:	9b06      	ldr	r3, [sp, #24]
 8010dfe:	2b02      	cmp	r3, #2
 8010e00:	dd34      	ble.n	8010e6c <_dtoa_r+0x984>
 8010e02:	9b03      	ldr	r3, [sp, #12]
 8010e04:	9302      	str	r3, [sp, #8]
 8010e06:	9b02      	ldr	r3, [sp, #8]
 8010e08:	b96b      	cbnz	r3, 8010e26 <_dtoa_r+0x93e>
 8010e0a:	4631      	mov	r1, r6
 8010e0c:	2205      	movs	r2, #5
 8010e0e:	4620      	mov	r0, r4
 8010e10:	f000 f9d8 	bl	80111c4 <__multadd>
 8010e14:	4601      	mov	r1, r0
 8010e16:	4606      	mov	r6, r0
 8010e18:	ee18 0a10 	vmov	r0, s16
 8010e1c:	f000 fbf2 	bl	8011604 <__mcmp>
 8010e20:	2800      	cmp	r0, #0
 8010e22:	f73f adbb 	bgt.w	801099c <_dtoa_r+0x4b4>
 8010e26:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010e28:	9d01      	ldr	r5, [sp, #4]
 8010e2a:	43db      	mvns	r3, r3
 8010e2c:	9300      	str	r3, [sp, #0]
 8010e2e:	f04f 0800 	mov.w	r8, #0
 8010e32:	4631      	mov	r1, r6
 8010e34:	4620      	mov	r0, r4
 8010e36:	f000 f9a3 	bl	8011180 <_Bfree>
 8010e3a:	2f00      	cmp	r7, #0
 8010e3c:	f43f aea4 	beq.w	8010b88 <_dtoa_r+0x6a0>
 8010e40:	f1b8 0f00 	cmp.w	r8, #0
 8010e44:	d005      	beq.n	8010e52 <_dtoa_r+0x96a>
 8010e46:	45b8      	cmp	r8, r7
 8010e48:	d003      	beq.n	8010e52 <_dtoa_r+0x96a>
 8010e4a:	4641      	mov	r1, r8
 8010e4c:	4620      	mov	r0, r4
 8010e4e:	f000 f997 	bl	8011180 <_Bfree>
 8010e52:	4639      	mov	r1, r7
 8010e54:	4620      	mov	r0, r4
 8010e56:	f000 f993 	bl	8011180 <_Bfree>
 8010e5a:	e695      	b.n	8010b88 <_dtoa_r+0x6a0>
 8010e5c:	2600      	movs	r6, #0
 8010e5e:	4637      	mov	r7, r6
 8010e60:	e7e1      	b.n	8010e26 <_dtoa_r+0x93e>
 8010e62:	9700      	str	r7, [sp, #0]
 8010e64:	4637      	mov	r7, r6
 8010e66:	e599      	b.n	801099c <_dtoa_r+0x4b4>
 8010e68:	40240000 	.word	0x40240000
 8010e6c:	9b08      	ldr	r3, [sp, #32]
 8010e6e:	2b00      	cmp	r3, #0
 8010e70:	f000 80ca 	beq.w	8011008 <_dtoa_r+0xb20>
 8010e74:	9b03      	ldr	r3, [sp, #12]
 8010e76:	9302      	str	r3, [sp, #8]
 8010e78:	2d00      	cmp	r5, #0
 8010e7a:	dd05      	ble.n	8010e88 <_dtoa_r+0x9a0>
 8010e7c:	4639      	mov	r1, r7
 8010e7e:	462a      	mov	r2, r5
 8010e80:	4620      	mov	r0, r4
 8010e82:	f000 fb4f 	bl	8011524 <__lshift>
 8010e86:	4607      	mov	r7, r0
 8010e88:	f1b8 0f00 	cmp.w	r8, #0
 8010e8c:	d05b      	beq.n	8010f46 <_dtoa_r+0xa5e>
 8010e8e:	6879      	ldr	r1, [r7, #4]
 8010e90:	4620      	mov	r0, r4
 8010e92:	f000 f935 	bl	8011100 <_Balloc>
 8010e96:	4605      	mov	r5, r0
 8010e98:	b928      	cbnz	r0, 8010ea6 <_dtoa_r+0x9be>
 8010e9a:	4b87      	ldr	r3, [pc, #540]	; (80110b8 <_dtoa_r+0xbd0>)
 8010e9c:	4602      	mov	r2, r0
 8010e9e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8010ea2:	f7ff bb3b 	b.w	801051c <_dtoa_r+0x34>
 8010ea6:	693a      	ldr	r2, [r7, #16]
 8010ea8:	3202      	adds	r2, #2
 8010eaa:	0092      	lsls	r2, r2, #2
 8010eac:	f107 010c 	add.w	r1, r7, #12
 8010eb0:	300c      	adds	r0, #12
 8010eb2:	f000 f90b 	bl	80110cc <memcpy>
 8010eb6:	2201      	movs	r2, #1
 8010eb8:	4629      	mov	r1, r5
 8010eba:	4620      	mov	r0, r4
 8010ebc:	f000 fb32 	bl	8011524 <__lshift>
 8010ec0:	9b01      	ldr	r3, [sp, #4]
 8010ec2:	f103 0901 	add.w	r9, r3, #1
 8010ec6:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8010eca:	4413      	add	r3, r2
 8010ecc:	9305      	str	r3, [sp, #20]
 8010ece:	f00a 0301 	and.w	r3, sl, #1
 8010ed2:	46b8      	mov	r8, r7
 8010ed4:	9304      	str	r3, [sp, #16]
 8010ed6:	4607      	mov	r7, r0
 8010ed8:	4631      	mov	r1, r6
 8010eda:	ee18 0a10 	vmov	r0, s16
 8010ede:	f7ff fa78 	bl	80103d2 <quorem>
 8010ee2:	4641      	mov	r1, r8
 8010ee4:	9002      	str	r0, [sp, #8]
 8010ee6:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8010eea:	ee18 0a10 	vmov	r0, s16
 8010eee:	f000 fb89 	bl	8011604 <__mcmp>
 8010ef2:	463a      	mov	r2, r7
 8010ef4:	9003      	str	r0, [sp, #12]
 8010ef6:	4631      	mov	r1, r6
 8010ef8:	4620      	mov	r0, r4
 8010efa:	f000 fb9f 	bl	801163c <__mdiff>
 8010efe:	68c2      	ldr	r2, [r0, #12]
 8010f00:	f109 3bff 	add.w	fp, r9, #4294967295
 8010f04:	4605      	mov	r5, r0
 8010f06:	bb02      	cbnz	r2, 8010f4a <_dtoa_r+0xa62>
 8010f08:	4601      	mov	r1, r0
 8010f0a:	ee18 0a10 	vmov	r0, s16
 8010f0e:	f000 fb79 	bl	8011604 <__mcmp>
 8010f12:	4602      	mov	r2, r0
 8010f14:	4629      	mov	r1, r5
 8010f16:	4620      	mov	r0, r4
 8010f18:	9207      	str	r2, [sp, #28]
 8010f1a:	f000 f931 	bl	8011180 <_Bfree>
 8010f1e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8010f22:	ea43 0102 	orr.w	r1, r3, r2
 8010f26:	9b04      	ldr	r3, [sp, #16]
 8010f28:	430b      	orrs	r3, r1
 8010f2a:	464d      	mov	r5, r9
 8010f2c:	d10f      	bne.n	8010f4e <_dtoa_r+0xa66>
 8010f2e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8010f32:	d02a      	beq.n	8010f8a <_dtoa_r+0xaa2>
 8010f34:	9b03      	ldr	r3, [sp, #12]
 8010f36:	2b00      	cmp	r3, #0
 8010f38:	dd02      	ble.n	8010f40 <_dtoa_r+0xa58>
 8010f3a:	9b02      	ldr	r3, [sp, #8]
 8010f3c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8010f40:	f88b a000 	strb.w	sl, [fp]
 8010f44:	e775      	b.n	8010e32 <_dtoa_r+0x94a>
 8010f46:	4638      	mov	r0, r7
 8010f48:	e7ba      	b.n	8010ec0 <_dtoa_r+0x9d8>
 8010f4a:	2201      	movs	r2, #1
 8010f4c:	e7e2      	b.n	8010f14 <_dtoa_r+0xa2c>
 8010f4e:	9b03      	ldr	r3, [sp, #12]
 8010f50:	2b00      	cmp	r3, #0
 8010f52:	db04      	blt.n	8010f5e <_dtoa_r+0xa76>
 8010f54:	9906      	ldr	r1, [sp, #24]
 8010f56:	430b      	orrs	r3, r1
 8010f58:	9904      	ldr	r1, [sp, #16]
 8010f5a:	430b      	orrs	r3, r1
 8010f5c:	d122      	bne.n	8010fa4 <_dtoa_r+0xabc>
 8010f5e:	2a00      	cmp	r2, #0
 8010f60:	ddee      	ble.n	8010f40 <_dtoa_r+0xa58>
 8010f62:	ee18 1a10 	vmov	r1, s16
 8010f66:	2201      	movs	r2, #1
 8010f68:	4620      	mov	r0, r4
 8010f6a:	f000 fadb 	bl	8011524 <__lshift>
 8010f6e:	4631      	mov	r1, r6
 8010f70:	ee08 0a10 	vmov	s16, r0
 8010f74:	f000 fb46 	bl	8011604 <__mcmp>
 8010f78:	2800      	cmp	r0, #0
 8010f7a:	dc03      	bgt.n	8010f84 <_dtoa_r+0xa9c>
 8010f7c:	d1e0      	bne.n	8010f40 <_dtoa_r+0xa58>
 8010f7e:	f01a 0f01 	tst.w	sl, #1
 8010f82:	d0dd      	beq.n	8010f40 <_dtoa_r+0xa58>
 8010f84:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8010f88:	d1d7      	bne.n	8010f3a <_dtoa_r+0xa52>
 8010f8a:	2339      	movs	r3, #57	; 0x39
 8010f8c:	f88b 3000 	strb.w	r3, [fp]
 8010f90:	462b      	mov	r3, r5
 8010f92:	461d      	mov	r5, r3
 8010f94:	3b01      	subs	r3, #1
 8010f96:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8010f9a:	2a39      	cmp	r2, #57	; 0x39
 8010f9c:	d071      	beq.n	8011082 <_dtoa_r+0xb9a>
 8010f9e:	3201      	adds	r2, #1
 8010fa0:	701a      	strb	r2, [r3, #0]
 8010fa2:	e746      	b.n	8010e32 <_dtoa_r+0x94a>
 8010fa4:	2a00      	cmp	r2, #0
 8010fa6:	dd07      	ble.n	8010fb8 <_dtoa_r+0xad0>
 8010fa8:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8010fac:	d0ed      	beq.n	8010f8a <_dtoa_r+0xaa2>
 8010fae:	f10a 0301 	add.w	r3, sl, #1
 8010fb2:	f88b 3000 	strb.w	r3, [fp]
 8010fb6:	e73c      	b.n	8010e32 <_dtoa_r+0x94a>
 8010fb8:	9b05      	ldr	r3, [sp, #20]
 8010fba:	f809 ac01 	strb.w	sl, [r9, #-1]
 8010fbe:	4599      	cmp	r9, r3
 8010fc0:	d047      	beq.n	8011052 <_dtoa_r+0xb6a>
 8010fc2:	ee18 1a10 	vmov	r1, s16
 8010fc6:	2300      	movs	r3, #0
 8010fc8:	220a      	movs	r2, #10
 8010fca:	4620      	mov	r0, r4
 8010fcc:	f000 f8fa 	bl	80111c4 <__multadd>
 8010fd0:	45b8      	cmp	r8, r7
 8010fd2:	ee08 0a10 	vmov	s16, r0
 8010fd6:	f04f 0300 	mov.w	r3, #0
 8010fda:	f04f 020a 	mov.w	r2, #10
 8010fde:	4641      	mov	r1, r8
 8010fe0:	4620      	mov	r0, r4
 8010fe2:	d106      	bne.n	8010ff2 <_dtoa_r+0xb0a>
 8010fe4:	f000 f8ee 	bl	80111c4 <__multadd>
 8010fe8:	4680      	mov	r8, r0
 8010fea:	4607      	mov	r7, r0
 8010fec:	f109 0901 	add.w	r9, r9, #1
 8010ff0:	e772      	b.n	8010ed8 <_dtoa_r+0x9f0>
 8010ff2:	f000 f8e7 	bl	80111c4 <__multadd>
 8010ff6:	4639      	mov	r1, r7
 8010ff8:	4680      	mov	r8, r0
 8010ffa:	2300      	movs	r3, #0
 8010ffc:	220a      	movs	r2, #10
 8010ffe:	4620      	mov	r0, r4
 8011000:	f000 f8e0 	bl	80111c4 <__multadd>
 8011004:	4607      	mov	r7, r0
 8011006:	e7f1      	b.n	8010fec <_dtoa_r+0xb04>
 8011008:	9b03      	ldr	r3, [sp, #12]
 801100a:	9302      	str	r3, [sp, #8]
 801100c:	9d01      	ldr	r5, [sp, #4]
 801100e:	ee18 0a10 	vmov	r0, s16
 8011012:	4631      	mov	r1, r6
 8011014:	f7ff f9dd 	bl	80103d2 <quorem>
 8011018:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 801101c:	9b01      	ldr	r3, [sp, #4]
 801101e:	f805 ab01 	strb.w	sl, [r5], #1
 8011022:	1aea      	subs	r2, r5, r3
 8011024:	9b02      	ldr	r3, [sp, #8]
 8011026:	4293      	cmp	r3, r2
 8011028:	dd09      	ble.n	801103e <_dtoa_r+0xb56>
 801102a:	ee18 1a10 	vmov	r1, s16
 801102e:	2300      	movs	r3, #0
 8011030:	220a      	movs	r2, #10
 8011032:	4620      	mov	r0, r4
 8011034:	f000 f8c6 	bl	80111c4 <__multadd>
 8011038:	ee08 0a10 	vmov	s16, r0
 801103c:	e7e7      	b.n	801100e <_dtoa_r+0xb26>
 801103e:	9b02      	ldr	r3, [sp, #8]
 8011040:	2b00      	cmp	r3, #0
 8011042:	bfc8      	it	gt
 8011044:	461d      	movgt	r5, r3
 8011046:	9b01      	ldr	r3, [sp, #4]
 8011048:	bfd8      	it	le
 801104a:	2501      	movle	r5, #1
 801104c:	441d      	add	r5, r3
 801104e:	f04f 0800 	mov.w	r8, #0
 8011052:	ee18 1a10 	vmov	r1, s16
 8011056:	2201      	movs	r2, #1
 8011058:	4620      	mov	r0, r4
 801105a:	f000 fa63 	bl	8011524 <__lshift>
 801105e:	4631      	mov	r1, r6
 8011060:	ee08 0a10 	vmov	s16, r0
 8011064:	f000 face 	bl	8011604 <__mcmp>
 8011068:	2800      	cmp	r0, #0
 801106a:	dc91      	bgt.n	8010f90 <_dtoa_r+0xaa8>
 801106c:	d102      	bne.n	8011074 <_dtoa_r+0xb8c>
 801106e:	f01a 0f01 	tst.w	sl, #1
 8011072:	d18d      	bne.n	8010f90 <_dtoa_r+0xaa8>
 8011074:	462b      	mov	r3, r5
 8011076:	461d      	mov	r5, r3
 8011078:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801107c:	2a30      	cmp	r2, #48	; 0x30
 801107e:	d0fa      	beq.n	8011076 <_dtoa_r+0xb8e>
 8011080:	e6d7      	b.n	8010e32 <_dtoa_r+0x94a>
 8011082:	9a01      	ldr	r2, [sp, #4]
 8011084:	429a      	cmp	r2, r3
 8011086:	d184      	bne.n	8010f92 <_dtoa_r+0xaaa>
 8011088:	9b00      	ldr	r3, [sp, #0]
 801108a:	3301      	adds	r3, #1
 801108c:	9300      	str	r3, [sp, #0]
 801108e:	2331      	movs	r3, #49	; 0x31
 8011090:	7013      	strb	r3, [r2, #0]
 8011092:	e6ce      	b.n	8010e32 <_dtoa_r+0x94a>
 8011094:	4b09      	ldr	r3, [pc, #36]	; (80110bc <_dtoa_r+0xbd4>)
 8011096:	f7ff ba95 	b.w	80105c4 <_dtoa_r+0xdc>
 801109a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801109c:	2b00      	cmp	r3, #0
 801109e:	f47f aa6e 	bne.w	801057e <_dtoa_r+0x96>
 80110a2:	4b07      	ldr	r3, [pc, #28]	; (80110c0 <_dtoa_r+0xbd8>)
 80110a4:	f7ff ba8e 	b.w	80105c4 <_dtoa_r+0xdc>
 80110a8:	9b02      	ldr	r3, [sp, #8]
 80110aa:	2b00      	cmp	r3, #0
 80110ac:	dcae      	bgt.n	801100c <_dtoa_r+0xb24>
 80110ae:	9b06      	ldr	r3, [sp, #24]
 80110b0:	2b02      	cmp	r3, #2
 80110b2:	f73f aea8 	bgt.w	8010e06 <_dtoa_r+0x91e>
 80110b6:	e7a9      	b.n	801100c <_dtoa_r+0xb24>
 80110b8:	0801430f 	.word	0x0801430f
 80110bc:	0801426c 	.word	0x0801426c
 80110c0:	08014290 	.word	0x08014290

080110c4 <_localeconv_r>:
 80110c4:	4800      	ldr	r0, [pc, #0]	; (80110c8 <_localeconv_r+0x4>)
 80110c6:	4770      	bx	lr
 80110c8:	2000035c 	.word	0x2000035c

080110cc <memcpy>:
 80110cc:	440a      	add	r2, r1
 80110ce:	4291      	cmp	r1, r2
 80110d0:	f100 33ff 	add.w	r3, r0, #4294967295
 80110d4:	d100      	bne.n	80110d8 <memcpy+0xc>
 80110d6:	4770      	bx	lr
 80110d8:	b510      	push	{r4, lr}
 80110da:	f811 4b01 	ldrb.w	r4, [r1], #1
 80110de:	f803 4f01 	strb.w	r4, [r3, #1]!
 80110e2:	4291      	cmp	r1, r2
 80110e4:	d1f9      	bne.n	80110da <memcpy+0xe>
 80110e6:	bd10      	pop	{r4, pc}

080110e8 <__malloc_lock>:
 80110e8:	4801      	ldr	r0, [pc, #4]	; (80110f0 <__malloc_lock+0x8>)
 80110ea:	f000 bd30 	b.w	8011b4e <__retarget_lock_acquire_recursive>
 80110ee:	bf00      	nop
 80110f0:	200023e0 	.word	0x200023e0

080110f4 <__malloc_unlock>:
 80110f4:	4801      	ldr	r0, [pc, #4]	; (80110fc <__malloc_unlock+0x8>)
 80110f6:	f000 bd2b 	b.w	8011b50 <__retarget_lock_release_recursive>
 80110fa:	bf00      	nop
 80110fc:	200023e0 	.word	0x200023e0

08011100 <_Balloc>:
 8011100:	b570      	push	{r4, r5, r6, lr}
 8011102:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8011104:	4604      	mov	r4, r0
 8011106:	460d      	mov	r5, r1
 8011108:	b976      	cbnz	r6, 8011128 <_Balloc+0x28>
 801110a:	2010      	movs	r0, #16
 801110c:	f7fe fbc0 	bl	800f890 <malloc>
 8011110:	4602      	mov	r2, r0
 8011112:	6260      	str	r0, [r4, #36]	; 0x24
 8011114:	b920      	cbnz	r0, 8011120 <_Balloc+0x20>
 8011116:	4b18      	ldr	r3, [pc, #96]	; (8011178 <_Balloc+0x78>)
 8011118:	4818      	ldr	r0, [pc, #96]	; (801117c <_Balloc+0x7c>)
 801111a:	2166      	movs	r1, #102	; 0x66
 801111c:	f000 fce6 	bl	8011aec <__assert_func>
 8011120:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8011124:	6006      	str	r6, [r0, #0]
 8011126:	60c6      	str	r6, [r0, #12]
 8011128:	6a66      	ldr	r6, [r4, #36]	; 0x24
 801112a:	68f3      	ldr	r3, [r6, #12]
 801112c:	b183      	cbz	r3, 8011150 <_Balloc+0x50>
 801112e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8011130:	68db      	ldr	r3, [r3, #12]
 8011132:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8011136:	b9b8      	cbnz	r0, 8011168 <_Balloc+0x68>
 8011138:	2101      	movs	r1, #1
 801113a:	fa01 f605 	lsl.w	r6, r1, r5
 801113e:	1d72      	adds	r2, r6, #5
 8011140:	0092      	lsls	r2, r2, #2
 8011142:	4620      	mov	r0, r4
 8011144:	f000 fb60 	bl	8011808 <_calloc_r>
 8011148:	b160      	cbz	r0, 8011164 <_Balloc+0x64>
 801114a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801114e:	e00e      	b.n	801116e <_Balloc+0x6e>
 8011150:	2221      	movs	r2, #33	; 0x21
 8011152:	2104      	movs	r1, #4
 8011154:	4620      	mov	r0, r4
 8011156:	f000 fb57 	bl	8011808 <_calloc_r>
 801115a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801115c:	60f0      	str	r0, [r6, #12]
 801115e:	68db      	ldr	r3, [r3, #12]
 8011160:	2b00      	cmp	r3, #0
 8011162:	d1e4      	bne.n	801112e <_Balloc+0x2e>
 8011164:	2000      	movs	r0, #0
 8011166:	bd70      	pop	{r4, r5, r6, pc}
 8011168:	6802      	ldr	r2, [r0, #0]
 801116a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801116e:	2300      	movs	r3, #0
 8011170:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8011174:	e7f7      	b.n	8011166 <_Balloc+0x66>
 8011176:	bf00      	nop
 8011178:	0801429d 	.word	0x0801429d
 801117c:	08014320 	.word	0x08014320

08011180 <_Bfree>:
 8011180:	b570      	push	{r4, r5, r6, lr}
 8011182:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8011184:	4605      	mov	r5, r0
 8011186:	460c      	mov	r4, r1
 8011188:	b976      	cbnz	r6, 80111a8 <_Bfree+0x28>
 801118a:	2010      	movs	r0, #16
 801118c:	f7fe fb80 	bl	800f890 <malloc>
 8011190:	4602      	mov	r2, r0
 8011192:	6268      	str	r0, [r5, #36]	; 0x24
 8011194:	b920      	cbnz	r0, 80111a0 <_Bfree+0x20>
 8011196:	4b09      	ldr	r3, [pc, #36]	; (80111bc <_Bfree+0x3c>)
 8011198:	4809      	ldr	r0, [pc, #36]	; (80111c0 <_Bfree+0x40>)
 801119a:	218a      	movs	r1, #138	; 0x8a
 801119c:	f000 fca6 	bl	8011aec <__assert_func>
 80111a0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80111a4:	6006      	str	r6, [r0, #0]
 80111a6:	60c6      	str	r6, [r0, #12]
 80111a8:	b13c      	cbz	r4, 80111ba <_Bfree+0x3a>
 80111aa:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80111ac:	6862      	ldr	r2, [r4, #4]
 80111ae:	68db      	ldr	r3, [r3, #12]
 80111b0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80111b4:	6021      	str	r1, [r4, #0]
 80111b6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80111ba:	bd70      	pop	{r4, r5, r6, pc}
 80111bc:	0801429d 	.word	0x0801429d
 80111c0:	08014320 	.word	0x08014320

080111c4 <__multadd>:
 80111c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80111c8:	690d      	ldr	r5, [r1, #16]
 80111ca:	4607      	mov	r7, r0
 80111cc:	460c      	mov	r4, r1
 80111ce:	461e      	mov	r6, r3
 80111d0:	f101 0c14 	add.w	ip, r1, #20
 80111d4:	2000      	movs	r0, #0
 80111d6:	f8dc 3000 	ldr.w	r3, [ip]
 80111da:	b299      	uxth	r1, r3
 80111dc:	fb02 6101 	mla	r1, r2, r1, r6
 80111e0:	0c1e      	lsrs	r6, r3, #16
 80111e2:	0c0b      	lsrs	r3, r1, #16
 80111e4:	fb02 3306 	mla	r3, r2, r6, r3
 80111e8:	b289      	uxth	r1, r1
 80111ea:	3001      	adds	r0, #1
 80111ec:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80111f0:	4285      	cmp	r5, r0
 80111f2:	f84c 1b04 	str.w	r1, [ip], #4
 80111f6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80111fa:	dcec      	bgt.n	80111d6 <__multadd+0x12>
 80111fc:	b30e      	cbz	r6, 8011242 <__multadd+0x7e>
 80111fe:	68a3      	ldr	r3, [r4, #8]
 8011200:	42ab      	cmp	r3, r5
 8011202:	dc19      	bgt.n	8011238 <__multadd+0x74>
 8011204:	6861      	ldr	r1, [r4, #4]
 8011206:	4638      	mov	r0, r7
 8011208:	3101      	adds	r1, #1
 801120a:	f7ff ff79 	bl	8011100 <_Balloc>
 801120e:	4680      	mov	r8, r0
 8011210:	b928      	cbnz	r0, 801121e <__multadd+0x5a>
 8011212:	4602      	mov	r2, r0
 8011214:	4b0c      	ldr	r3, [pc, #48]	; (8011248 <__multadd+0x84>)
 8011216:	480d      	ldr	r0, [pc, #52]	; (801124c <__multadd+0x88>)
 8011218:	21b5      	movs	r1, #181	; 0xb5
 801121a:	f000 fc67 	bl	8011aec <__assert_func>
 801121e:	6922      	ldr	r2, [r4, #16]
 8011220:	3202      	adds	r2, #2
 8011222:	f104 010c 	add.w	r1, r4, #12
 8011226:	0092      	lsls	r2, r2, #2
 8011228:	300c      	adds	r0, #12
 801122a:	f7ff ff4f 	bl	80110cc <memcpy>
 801122e:	4621      	mov	r1, r4
 8011230:	4638      	mov	r0, r7
 8011232:	f7ff ffa5 	bl	8011180 <_Bfree>
 8011236:	4644      	mov	r4, r8
 8011238:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 801123c:	3501      	adds	r5, #1
 801123e:	615e      	str	r6, [r3, #20]
 8011240:	6125      	str	r5, [r4, #16]
 8011242:	4620      	mov	r0, r4
 8011244:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011248:	0801430f 	.word	0x0801430f
 801124c:	08014320 	.word	0x08014320

08011250 <__hi0bits>:
 8011250:	0c03      	lsrs	r3, r0, #16
 8011252:	041b      	lsls	r3, r3, #16
 8011254:	b9d3      	cbnz	r3, 801128c <__hi0bits+0x3c>
 8011256:	0400      	lsls	r0, r0, #16
 8011258:	2310      	movs	r3, #16
 801125a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 801125e:	bf04      	itt	eq
 8011260:	0200      	lsleq	r0, r0, #8
 8011262:	3308      	addeq	r3, #8
 8011264:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8011268:	bf04      	itt	eq
 801126a:	0100      	lsleq	r0, r0, #4
 801126c:	3304      	addeq	r3, #4
 801126e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8011272:	bf04      	itt	eq
 8011274:	0080      	lsleq	r0, r0, #2
 8011276:	3302      	addeq	r3, #2
 8011278:	2800      	cmp	r0, #0
 801127a:	db05      	blt.n	8011288 <__hi0bits+0x38>
 801127c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8011280:	f103 0301 	add.w	r3, r3, #1
 8011284:	bf08      	it	eq
 8011286:	2320      	moveq	r3, #32
 8011288:	4618      	mov	r0, r3
 801128a:	4770      	bx	lr
 801128c:	2300      	movs	r3, #0
 801128e:	e7e4      	b.n	801125a <__hi0bits+0xa>

08011290 <__lo0bits>:
 8011290:	6803      	ldr	r3, [r0, #0]
 8011292:	f013 0207 	ands.w	r2, r3, #7
 8011296:	4601      	mov	r1, r0
 8011298:	d00b      	beq.n	80112b2 <__lo0bits+0x22>
 801129a:	07da      	lsls	r2, r3, #31
 801129c:	d423      	bmi.n	80112e6 <__lo0bits+0x56>
 801129e:	0798      	lsls	r0, r3, #30
 80112a0:	bf49      	itett	mi
 80112a2:	085b      	lsrmi	r3, r3, #1
 80112a4:	089b      	lsrpl	r3, r3, #2
 80112a6:	2001      	movmi	r0, #1
 80112a8:	600b      	strmi	r3, [r1, #0]
 80112aa:	bf5c      	itt	pl
 80112ac:	600b      	strpl	r3, [r1, #0]
 80112ae:	2002      	movpl	r0, #2
 80112b0:	4770      	bx	lr
 80112b2:	b298      	uxth	r0, r3
 80112b4:	b9a8      	cbnz	r0, 80112e2 <__lo0bits+0x52>
 80112b6:	0c1b      	lsrs	r3, r3, #16
 80112b8:	2010      	movs	r0, #16
 80112ba:	b2da      	uxtb	r2, r3
 80112bc:	b90a      	cbnz	r2, 80112c2 <__lo0bits+0x32>
 80112be:	3008      	adds	r0, #8
 80112c0:	0a1b      	lsrs	r3, r3, #8
 80112c2:	071a      	lsls	r2, r3, #28
 80112c4:	bf04      	itt	eq
 80112c6:	091b      	lsreq	r3, r3, #4
 80112c8:	3004      	addeq	r0, #4
 80112ca:	079a      	lsls	r2, r3, #30
 80112cc:	bf04      	itt	eq
 80112ce:	089b      	lsreq	r3, r3, #2
 80112d0:	3002      	addeq	r0, #2
 80112d2:	07da      	lsls	r2, r3, #31
 80112d4:	d403      	bmi.n	80112de <__lo0bits+0x4e>
 80112d6:	085b      	lsrs	r3, r3, #1
 80112d8:	f100 0001 	add.w	r0, r0, #1
 80112dc:	d005      	beq.n	80112ea <__lo0bits+0x5a>
 80112de:	600b      	str	r3, [r1, #0]
 80112e0:	4770      	bx	lr
 80112e2:	4610      	mov	r0, r2
 80112e4:	e7e9      	b.n	80112ba <__lo0bits+0x2a>
 80112e6:	2000      	movs	r0, #0
 80112e8:	4770      	bx	lr
 80112ea:	2020      	movs	r0, #32
 80112ec:	4770      	bx	lr
	...

080112f0 <__i2b>:
 80112f0:	b510      	push	{r4, lr}
 80112f2:	460c      	mov	r4, r1
 80112f4:	2101      	movs	r1, #1
 80112f6:	f7ff ff03 	bl	8011100 <_Balloc>
 80112fa:	4602      	mov	r2, r0
 80112fc:	b928      	cbnz	r0, 801130a <__i2b+0x1a>
 80112fe:	4b05      	ldr	r3, [pc, #20]	; (8011314 <__i2b+0x24>)
 8011300:	4805      	ldr	r0, [pc, #20]	; (8011318 <__i2b+0x28>)
 8011302:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8011306:	f000 fbf1 	bl	8011aec <__assert_func>
 801130a:	2301      	movs	r3, #1
 801130c:	6144      	str	r4, [r0, #20]
 801130e:	6103      	str	r3, [r0, #16]
 8011310:	bd10      	pop	{r4, pc}
 8011312:	bf00      	nop
 8011314:	0801430f 	.word	0x0801430f
 8011318:	08014320 	.word	0x08014320

0801131c <__multiply>:
 801131c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011320:	4691      	mov	r9, r2
 8011322:	690a      	ldr	r2, [r1, #16]
 8011324:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8011328:	429a      	cmp	r2, r3
 801132a:	bfb8      	it	lt
 801132c:	460b      	movlt	r3, r1
 801132e:	460c      	mov	r4, r1
 8011330:	bfbc      	itt	lt
 8011332:	464c      	movlt	r4, r9
 8011334:	4699      	movlt	r9, r3
 8011336:	6927      	ldr	r7, [r4, #16]
 8011338:	f8d9 a010 	ldr.w	sl, [r9, #16]
 801133c:	68a3      	ldr	r3, [r4, #8]
 801133e:	6861      	ldr	r1, [r4, #4]
 8011340:	eb07 060a 	add.w	r6, r7, sl
 8011344:	42b3      	cmp	r3, r6
 8011346:	b085      	sub	sp, #20
 8011348:	bfb8      	it	lt
 801134a:	3101      	addlt	r1, #1
 801134c:	f7ff fed8 	bl	8011100 <_Balloc>
 8011350:	b930      	cbnz	r0, 8011360 <__multiply+0x44>
 8011352:	4602      	mov	r2, r0
 8011354:	4b44      	ldr	r3, [pc, #272]	; (8011468 <__multiply+0x14c>)
 8011356:	4845      	ldr	r0, [pc, #276]	; (801146c <__multiply+0x150>)
 8011358:	f240 115d 	movw	r1, #349	; 0x15d
 801135c:	f000 fbc6 	bl	8011aec <__assert_func>
 8011360:	f100 0514 	add.w	r5, r0, #20
 8011364:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8011368:	462b      	mov	r3, r5
 801136a:	2200      	movs	r2, #0
 801136c:	4543      	cmp	r3, r8
 801136e:	d321      	bcc.n	80113b4 <__multiply+0x98>
 8011370:	f104 0314 	add.w	r3, r4, #20
 8011374:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8011378:	f109 0314 	add.w	r3, r9, #20
 801137c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8011380:	9202      	str	r2, [sp, #8]
 8011382:	1b3a      	subs	r2, r7, r4
 8011384:	3a15      	subs	r2, #21
 8011386:	f022 0203 	bic.w	r2, r2, #3
 801138a:	3204      	adds	r2, #4
 801138c:	f104 0115 	add.w	r1, r4, #21
 8011390:	428f      	cmp	r7, r1
 8011392:	bf38      	it	cc
 8011394:	2204      	movcc	r2, #4
 8011396:	9201      	str	r2, [sp, #4]
 8011398:	9a02      	ldr	r2, [sp, #8]
 801139a:	9303      	str	r3, [sp, #12]
 801139c:	429a      	cmp	r2, r3
 801139e:	d80c      	bhi.n	80113ba <__multiply+0x9e>
 80113a0:	2e00      	cmp	r6, #0
 80113a2:	dd03      	ble.n	80113ac <__multiply+0x90>
 80113a4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80113a8:	2b00      	cmp	r3, #0
 80113aa:	d05a      	beq.n	8011462 <__multiply+0x146>
 80113ac:	6106      	str	r6, [r0, #16]
 80113ae:	b005      	add	sp, #20
 80113b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80113b4:	f843 2b04 	str.w	r2, [r3], #4
 80113b8:	e7d8      	b.n	801136c <__multiply+0x50>
 80113ba:	f8b3 a000 	ldrh.w	sl, [r3]
 80113be:	f1ba 0f00 	cmp.w	sl, #0
 80113c2:	d024      	beq.n	801140e <__multiply+0xf2>
 80113c4:	f104 0e14 	add.w	lr, r4, #20
 80113c8:	46a9      	mov	r9, r5
 80113ca:	f04f 0c00 	mov.w	ip, #0
 80113ce:	f85e 2b04 	ldr.w	r2, [lr], #4
 80113d2:	f8d9 1000 	ldr.w	r1, [r9]
 80113d6:	fa1f fb82 	uxth.w	fp, r2
 80113da:	b289      	uxth	r1, r1
 80113dc:	fb0a 110b 	mla	r1, sl, fp, r1
 80113e0:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80113e4:	f8d9 2000 	ldr.w	r2, [r9]
 80113e8:	4461      	add	r1, ip
 80113ea:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80113ee:	fb0a c20b 	mla	r2, sl, fp, ip
 80113f2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80113f6:	b289      	uxth	r1, r1
 80113f8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80113fc:	4577      	cmp	r7, lr
 80113fe:	f849 1b04 	str.w	r1, [r9], #4
 8011402:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8011406:	d8e2      	bhi.n	80113ce <__multiply+0xb2>
 8011408:	9a01      	ldr	r2, [sp, #4]
 801140a:	f845 c002 	str.w	ip, [r5, r2]
 801140e:	9a03      	ldr	r2, [sp, #12]
 8011410:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8011414:	3304      	adds	r3, #4
 8011416:	f1b9 0f00 	cmp.w	r9, #0
 801141a:	d020      	beq.n	801145e <__multiply+0x142>
 801141c:	6829      	ldr	r1, [r5, #0]
 801141e:	f104 0c14 	add.w	ip, r4, #20
 8011422:	46ae      	mov	lr, r5
 8011424:	f04f 0a00 	mov.w	sl, #0
 8011428:	f8bc b000 	ldrh.w	fp, [ip]
 801142c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8011430:	fb09 220b 	mla	r2, r9, fp, r2
 8011434:	4492      	add	sl, r2
 8011436:	b289      	uxth	r1, r1
 8011438:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 801143c:	f84e 1b04 	str.w	r1, [lr], #4
 8011440:	f85c 2b04 	ldr.w	r2, [ip], #4
 8011444:	f8be 1000 	ldrh.w	r1, [lr]
 8011448:	0c12      	lsrs	r2, r2, #16
 801144a:	fb09 1102 	mla	r1, r9, r2, r1
 801144e:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8011452:	4567      	cmp	r7, ip
 8011454:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8011458:	d8e6      	bhi.n	8011428 <__multiply+0x10c>
 801145a:	9a01      	ldr	r2, [sp, #4]
 801145c:	50a9      	str	r1, [r5, r2]
 801145e:	3504      	adds	r5, #4
 8011460:	e79a      	b.n	8011398 <__multiply+0x7c>
 8011462:	3e01      	subs	r6, #1
 8011464:	e79c      	b.n	80113a0 <__multiply+0x84>
 8011466:	bf00      	nop
 8011468:	0801430f 	.word	0x0801430f
 801146c:	08014320 	.word	0x08014320

08011470 <__pow5mult>:
 8011470:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011474:	4615      	mov	r5, r2
 8011476:	f012 0203 	ands.w	r2, r2, #3
 801147a:	4606      	mov	r6, r0
 801147c:	460f      	mov	r7, r1
 801147e:	d007      	beq.n	8011490 <__pow5mult+0x20>
 8011480:	4c25      	ldr	r4, [pc, #148]	; (8011518 <__pow5mult+0xa8>)
 8011482:	3a01      	subs	r2, #1
 8011484:	2300      	movs	r3, #0
 8011486:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801148a:	f7ff fe9b 	bl	80111c4 <__multadd>
 801148e:	4607      	mov	r7, r0
 8011490:	10ad      	asrs	r5, r5, #2
 8011492:	d03d      	beq.n	8011510 <__pow5mult+0xa0>
 8011494:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8011496:	b97c      	cbnz	r4, 80114b8 <__pow5mult+0x48>
 8011498:	2010      	movs	r0, #16
 801149a:	f7fe f9f9 	bl	800f890 <malloc>
 801149e:	4602      	mov	r2, r0
 80114a0:	6270      	str	r0, [r6, #36]	; 0x24
 80114a2:	b928      	cbnz	r0, 80114b0 <__pow5mult+0x40>
 80114a4:	4b1d      	ldr	r3, [pc, #116]	; (801151c <__pow5mult+0xac>)
 80114a6:	481e      	ldr	r0, [pc, #120]	; (8011520 <__pow5mult+0xb0>)
 80114a8:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80114ac:	f000 fb1e 	bl	8011aec <__assert_func>
 80114b0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80114b4:	6004      	str	r4, [r0, #0]
 80114b6:	60c4      	str	r4, [r0, #12]
 80114b8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80114bc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80114c0:	b94c      	cbnz	r4, 80114d6 <__pow5mult+0x66>
 80114c2:	f240 2171 	movw	r1, #625	; 0x271
 80114c6:	4630      	mov	r0, r6
 80114c8:	f7ff ff12 	bl	80112f0 <__i2b>
 80114cc:	2300      	movs	r3, #0
 80114ce:	f8c8 0008 	str.w	r0, [r8, #8]
 80114d2:	4604      	mov	r4, r0
 80114d4:	6003      	str	r3, [r0, #0]
 80114d6:	f04f 0900 	mov.w	r9, #0
 80114da:	07eb      	lsls	r3, r5, #31
 80114dc:	d50a      	bpl.n	80114f4 <__pow5mult+0x84>
 80114de:	4639      	mov	r1, r7
 80114e0:	4622      	mov	r2, r4
 80114e2:	4630      	mov	r0, r6
 80114e4:	f7ff ff1a 	bl	801131c <__multiply>
 80114e8:	4639      	mov	r1, r7
 80114ea:	4680      	mov	r8, r0
 80114ec:	4630      	mov	r0, r6
 80114ee:	f7ff fe47 	bl	8011180 <_Bfree>
 80114f2:	4647      	mov	r7, r8
 80114f4:	106d      	asrs	r5, r5, #1
 80114f6:	d00b      	beq.n	8011510 <__pow5mult+0xa0>
 80114f8:	6820      	ldr	r0, [r4, #0]
 80114fa:	b938      	cbnz	r0, 801150c <__pow5mult+0x9c>
 80114fc:	4622      	mov	r2, r4
 80114fe:	4621      	mov	r1, r4
 8011500:	4630      	mov	r0, r6
 8011502:	f7ff ff0b 	bl	801131c <__multiply>
 8011506:	6020      	str	r0, [r4, #0]
 8011508:	f8c0 9000 	str.w	r9, [r0]
 801150c:	4604      	mov	r4, r0
 801150e:	e7e4      	b.n	80114da <__pow5mult+0x6a>
 8011510:	4638      	mov	r0, r7
 8011512:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011516:	bf00      	nop
 8011518:	08014470 	.word	0x08014470
 801151c:	0801429d 	.word	0x0801429d
 8011520:	08014320 	.word	0x08014320

08011524 <__lshift>:
 8011524:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011528:	460c      	mov	r4, r1
 801152a:	6849      	ldr	r1, [r1, #4]
 801152c:	6923      	ldr	r3, [r4, #16]
 801152e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8011532:	68a3      	ldr	r3, [r4, #8]
 8011534:	4607      	mov	r7, r0
 8011536:	4691      	mov	r9, r2
 8011538:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801153c:	f108 0601 	add.w	r6, r8, #1
 8011540:	42b3      	cmp	r3, r6
 8011542:	db0b      	blt.n	801155c <__lshift+0x38>
 8011544:	4638      	mov	r0, r7
 8011546:	f7ff fddb 	bl	8011100 <_Balloc>
 801154a:	4605      	mov	r5, r0
 801154c:	b948      	cbnz	r0, 8011562 <__lshift+0x3e>
 801154e:	4602      	mov	r2, r0
 8011550:	4b2a      	ldr	r3, [pc, #168]	; (80115fc <__lshift+0xd8>)
 8011552:	482b      	ldr	r0, [pc, #172]	; (8011600 <__lshift+0xdc>)
 8011554:	f240 11d9 	movw	r1, #473	; 0x1d9
 8011558:	f000 fac8 	bl	8011aec <__assert_func>
 801155c:	3101      	adds	r1, #1
 801155e:	005b      	lsls	r3, r3, #1
 8011560:	e7ee      	b.n	8011540 <__lshift+0x1c>
 8011562:	2300      	movs	r3, #0
 8011564:	f100 0114 	add.w	r1, r0, #20
 8011568:	f100 0210 	add.w	r2, r0, #16
 801156c:	4618      	mov	r0, r3
 801156e:	4553      	cmp	r3, sl
 8011570:	db37      	blt.n	80115e2 <__lshift+0xbe>
 8011572:	6920      	ldr	r0, [r4, #16]
 8011574:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8011578:	f104 0314 	add.w	r3, r4, #20
 801157c:	f019 091f 	ands.w	r9, r9, #31
 8011580:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8011584:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8011588:	d02f      	beq.n	80115ea <__lshift+0xc6>
 801158a:	f1c9 0e20 	rsb	lr, r9, #32
 801158e:	468a      	mov	sl, r1
 8011590:	f04f 0c00 	mov.w	ip, #0
 8011594:	681a      	ldr	r2, [r3, #0]
 8011596:	fa02 f209 	lsl.w	r2, r2, r9
 801159a:	ea42 020c 	orr.w	r2, r2, ip
 801159e:	f84a 2b04 	str.w	r2, [sl], #4
 80115a2:	f853 2b04 	ldr.w	r2, [r3], #4
 80115a6:	4298      	cmp	r0, r3
 80115a8:	fa22 fc0e 	lsr.w	ip, r2, lr
 80115ac:	d8f2      	bhi.n	8011594 <__lshift+0x70>
 80115ae:	1b03      	subs	r3, r0, r4
 80115b0:	3b15      	subs	r3, #21
 80115b2:	f023 0303 	bic.w	r3, r3, #3
 80115b6:	3304      	adds	r3, #4
 80115b8:	f104 0215 	add.w	r2, r4, #21
 80115bc:	4290      	cmp	r0, r2
 80115be:	bf38      	it	cc
 80115c0:	2304      	movcc	r3, #4
 80115c2:	f841 c003 	str.w	ip, [r1, r3]
 80115c6:	f1bc 0f00 	cmp.w	ip, #0
 80115ca:	d001      	beq.n	80115d0 <__lshift+0xac>
 80115cc:	f108 0602 	add.w	r6, r8, #2
 80115d0:	3e01      	subs	r6, #1
 80115d2:	4638      	mov	r0, r7
 80115d4:	612e      	str	r6, [r5, #16]
 80115d6:	4621      	mov	r1, r4
 80115d8:	f7ff fdd2 	bl	8011180 <_Bfree>
 80115dc:	4628      	mov	r0, r5
 80115de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80115e2:	f842 0f04 	str.w	r0, [r2, #4]!
 80115e6:	3301      	adds	r3, #1
 80115e8:	e7c1      	b.n	801156e <__lshift+0x4a>
 80115ea:	3904      	subs	r1, #4
 80115ec:	f853 2b04 	ldr.w	r2, [r3], #4
 80115f0:	f841 2f04 	str.w	r2, [r1, #4]!
 80115f4:	4298      	cmp	r0, r3
 80115f6:	d8f9      	bhi.n	80115ec <__lshift+0xc8>
 80115f8:	e7ea      	b.n	80115d0 <__lshift+0xac>
 80115fa:	bf00      	nop
 80115fc:	0801430f 	.word	0x0801430f
 8011600:	08014320 	.word	0x08014320

08011604 <__mcmp>:
 8011604:	b530      	push	{r4, r5, lr}
 8011606:	6902      	ldr	r2, [r0, #16]
 8011608:	690c      	ldr	r4, [r1, #16]
 801160a:	1b12      	subs	r2, r2, r4
 801160c:	d10e      	bne.n	801162c <__mcmp+0x28>
 801160e:	f100 0314 	add.w	r3, r0, #20
 8011612:	3114      	adds	r1, #20
 8011614:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8011618:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 801161c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8011620:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8011624:	42a5      	cmp	r5, r4
 8011626:	d003      	beq.n	8011630 <__mcmp+0x2c>
 8011628:	d305      	bcc.n	8011636 <__mcmp+0x32>
 801162a:	2201      	movs	r2, #1
 801162c:	4610      	mov	r0, r2
 801162e:	bd30      	pop	{r4, r5, pc}
 8011630:	4283      	cmp	r3, r0
 8011632:	d3f3      	bcc.n	801161c <__mcmp+0x18>
 8011634:	e7fa      	b.n	801162c <__mcmp+0x28>
 8011636:	f04f 32ff 	mov.w	r2, #4294967295
 801163a:	e7f7      	b.n	801162c <__mcmp+0x28>

0801163c <__mdiff>:
 801163c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011640:	460c      	mov	r4, r1
 8011642:	4606      	mov	r6, r0
 8011644:	4611      	mov	r1, r2
 8011646:	4620      	mov	r0, r4
 8011648:	4690      	mov	r8, r2
 801164a:	f7ff ffdb 	bl	8011604 <__mcmp>
 801164e:	1e05      	subs	r5, r0, #0
 8011650:	d110      	bne.n	8011674 <__mdiff+0x38>
 8011652:	4629      	mov	r1, r5
 8011654:	4630      	mov	r0, r6
 8011656:	f7ff fd53 	bl	8011100 <_Balloc>
 801165a:	b930      	cbnz	r0, 801166a <__mdiff+0x2e>
 801165c:	4b3a      	ldr	r3, [pc, #232]	; (8011748 <__mdiff+0x10c>)
 801165e:	4602      	mov	r2, r0
 8011660:	f240 2132 	movw	r1, #562	; 0x232
 8011664:	4839      	ldr	r0, [pc, #228]	; (801174c <__mdiff+0x110>)
 8011666:	f000 fa41 	bl	8011aec <__assert_func>
 801166a:	2301      	movs	r3, #1
 801166c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8011670:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011674:	bfa4      	itt	ge
 8011676:	4643      	movge	r3, r8
 8011678:	46a0      	movge	r8, r4
 801167a:	4630      	mov	r0, r6
 801167c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8011680:	bfa6      	itte	ge
 8011682:	461c      	movge	r4, r3
 8011684:	2500      	movge	r5, #0
 8011686:	2501      	movlt	r5, #1
 8011688:	f7ff fd3a 	bl	8011100 <_Balloc>
 801168c:	b920      	cbnz	r0, 8011698 <__mdiff+0x5c>
 801168e:	4b2e      	ldr	r3, [pc, #184]	; (8011748 <__mdiff+0x10c>)
 8011690:	4602      	mov	r2, r0
 8011692:	f44f 7110 	mov.w	r1, #576	; 0x240
 8011696:	e7e5      	b.n	8011664 <__mdiff+0x28>
 8011698:	f8d8 7010 	ldr.w	r7, [r8, #16]
 801169c:	6926      	ldr	r6, [r4, #16]
 801169e:	60c5      	str	r5, [r0, #12]
 80116a0:	f104 0914 	add.w	r9, r4, #20
 80116a4:	f108 0514 	add.w	r5, r8, #20
 80116a8:	f100 0e14 	add.w	lr, r0, #20
 80116ac:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 80116b0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80116b4:	f108 0210 	add.w	r2, r8, #16
 80116b8:	46f2      	mov	sl, lr
 80116ba:	2100      	movs	r1, #0
 80116bc:	f859 3b04 	ldr.w	r3, [r9], #4
 80116c0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80116c4:	fa1f f883 	uxth.w	r8, r3
 80116c8:	fa11 f18b 	uxtah	r1, r1, fp
 80116cc:	0c1b      	lsrs	r3, r3, #16
 80116ce:	eba1 0808 	sub.w	r8, r1, r8
 80116d2:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80116d6:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80116da:	fa1f f888 	uxth.w	r8, r8
 80116de:	1419      	asrs	r1, r3, #16
 80116e0:	454e      	cmp	r6, r9
 80116e2:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80116e6:	f84a 3b04 	str.w	r3, [sl], #4
 80116ea:	d8e7      	bhi.n	80116bc <__mdiff+0x80>
 80116ec:	1b33      	subs	r3, r6, r4
 80116ee:	3b15      	subs	r3, #21
 80116f0:	f023 0303 	bic.w	r3, r3, #3
 80116f4:	3304      	adds	r3, #4
 80116f6:	3415      	adds	r4, #21
 80116f8:	42a6      	cmp	r6, r4
 80116fa:	bf38      	it	cc
 80116fc:	2304      	movcc	r3, #4
 80116fe:	441d      	add	r5, r3
 8011700:	4473      	add	r3, lr
 8011702:	469e      	mov	lr, r3
 8011704:	462e      	mov	r6, r5
 8011706:	4566      	cmp	r6, ip
 8011708:	d30e      	bcc.n	8011728 <__mdiff+0xec>
 801170a:	f10c 0203 	add.w	r2, ip, #3
 801170e:	1b52      	subs	r2, r2, r5
 8011710:	f022 0203 	bic.w	r2, r2, #3
 8011714:	3d03      	subs	r5, #3
 8011716:	45ac      	cmp	ip, r5
 8011718:	bf38      	it	cc
 801171a:	2200      	movcc	r2, #0
 801171c:	441a      	add	r2, r3
 801171e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8011722:	b17b      	cbz	r3, 8011744 <__mdiff+0x108>
 8011724:	6107      	str	r7, [r0, #16]
 8011726:	e7a3      	b.n	8011670 <__mdiff+0x34>
 8011728:	f856 8b04 	ldr.w	r8, [r6], #4
 801172c:	fa11 f288 	uxtah	r2, r1, r8
 8011730:	1414      	asrs	r4, r2, #16
 8011732:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8011736:	b292      	uxth	r2, r2
 8011738:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 801173c:	f84e 2b04 	str.w	r2, [lr], #4
 8011740:	1421      	asrs	r1, r4, #16
 8011742:	e7e0      	b.n	8011706 <__mdiff+0xca>
 8011744:	3f01      	subs	r7, #1
 8011746:	e7ea      	b.n	801171e <__mdiff+0xe2>
 8011748:	0801430f 	.word	0x0801430f
 801174c:	08014320 	.word	0x08014320

08011750 <__d2b>:
 8011750:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8011754:	4689      	mov	r9, r1
 8011756:	2101      	movs	r1, #1
 8011758:	ec57 6b10 	vmov	r6, r7, d0
 801175c:	4690      	mov	r8, r2
 801175e:	f7ff fccf 	bl	8011100 <_Balloc>
 8011762:	4604      	mov	r4, r0
 8011764:	b930      	cbnz	r0, 8011774 <__d2b+0x24>
 8011766:	4602      	mov	r2, r0
 8011768:	4b25      	ldr	r3, [pc, #148]	; (8011800 <__d2b+0xb0>)
 801176a:	4826      	ldr	r0, [pc, #152]	; (8011804 <__d2b+0xb4>)
 801176c:	f240 310a 	movw	r1, #778	; 0x30a
 8011770:	f000 f9bc 	bl	8011aec <__assert_func>
 8011774:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8011778:	f3c7 0313 	ubfx	r3, r7, #0, #20
 801177c:	bb35      	cbnz	r5, 80117cc <__d2b+0x7c>
 801177e:	2e00      	cmp	r6, #0
 8011780:	9301      	str	r3, [sp, #4]
 8011782:	d028      	beq.n	80117d6 <__d2b+0x86>
 8011784:	4668      	mov	r0, sp
 8011786:	9600      	str	r6, [sp, #0]
 8011788:	f7ff fd82 	bl	8011290 <__lo0bits>
 801178c:	9900      	ldr	r1, [sp, #0]
 801178e:	b300      	cbz	r0, 80117d2 <__d2b+0x82>
 8011790:	9a01      	ldr	r2, [sp, #4]
 8011792:	f1c0 0320 	rsb	r3, r0, #32
 8011796:	fa02 f303 	lsl.w	r3, r2, r3
 801179a:	430b      	orrs	r3, r1
 801179c:	40c2      	lsrs	r2, r0
 801179e:	6163      	str	r3, [r4, #20]
 80117a0:	9201      	str	r2, [sp, #4]
 80117a2:	9b01      	ldr	r3, [sp, #4]
 80117a4:	61a3      	str	r3, [r4, #24]
 80117a6:	2b00      	cmp	r3, #0
 80117a8:	bf14      	ite	ne
 80117aa:	2202      	movne	r2, #2
 80117ac:	2201      	moveq	r2, #1
 80117ae:	6122      	str	r2, [r4, #16]
 80117b0:	b1d5      	cbz	r5, 80117e8 <__d2b+0x98>
 80117b2:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80117b6:	4405      	add	r5, r0
 80117b8:	f8c9 5000 	str.w	r5, [r9]
 80117bc:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80117c0:	f8c8 0000 	str.w	r0, [r8]
 80117c4:	4620      	mov	r0, r4
 80117c6:	b003      	add	sp, #12
 80117c8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80117cc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80117d0:	e7d5      	b.n	801177e <__d2b+0x2e>
 80117d2:	6161      	str	r1, [r4, #20]
 80117d4:	e7e5      	b.n	80117a2 <__d2b+0x52>
 80117d6:	a801      	add	r0, sp, #4
 80117d8:	f7ff fd5a 	bl	8011290 <__lo0bits>
 80117dc:	9b01      	ldr	r3, [sp, #4]
 80117de:	6163      	str	r3, [r4, #20]
 80117e0:	2201      	movs	r2, #1
 80117e2:	6122      	str	r2, [r4, #16]
 80117e4:	3020      	adds	r0, #32
 80117e6:	e7e3      	b.n	80117b0 <__d2b+0x60>
 80117e8:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80117ec:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80117f0:	f8c9 0000 	str.w	r0, [r9]
 80117f4:	6918      	ldr	r0, [r3, #16]
 80117f6:	f7ff fd2b 	bl	8011250 <__hi0bits>
 80117fa:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80117fe:	e7df      	b.n	80117c0 <__d2b+0x70>
 8011800:	0801430f 	.word	0x0801430f
 8011804:	08014320 	.word	0x08014320

08011808 <_calloc_r>:
 8011808:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801180a:	fba1 2402 	umull	r2, r4, r1, r2
 801180e:	b94c      	cbnz	r4, 8011824 <_calloc_r+0x1c>
 8011810:	4611      	mov	r1, r2
 8011812:	9201      	str	r2, [sp, #4]
 8011814:	f7fe f8c0 	bl	800f998 <_malloc_r>
 8011818:	9a01      	ldr	r2, [sp, #4]
 801181a:	4605      	mov	r5, r0
 801181c:	b930      	cbnz	r0, 801182c <_calloc_r+0x24>
 801181e:	4628      	mov	r0, r5
 8011820:	b003      	add	sp, #12
 8011822:	bd30      	pop	{r4, r5, pc}
 8011824:	220c      	movs	r2, #12
 8011826:	6002      	str	r2, [r0, #0]
 8011828:	2500      	movs	r5, #0
 801182a:	e7f8      	b.n	801181e <_calloc_r+0x16>
 801182c:	4621      	mov	r1, r4
 801182e:	f7fe f83f 	bl	800f8b0 <memset>
 8011832:	e7f4      	b.n	801181e <_calloc_r+0x16>

08011834 <__ssputs_r>:
 8011834:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011838:	688e      	ldr	r6, [r1, #8]
 801183a:	429e      	cmp	r6, r3
 801183c:	4682      	mov	sl, r0
 801183e:	460c      	mov	r4, r1
 8011840:	4690      	mov	r8, r2
 8011842:	461f      	mov	r7, r3
 8011844:	d838      	bhi.n	80118b8 <__ssputs_r+0x84>
 8011846:	898a      	ldrh	r2, [r1, #12]
 8011848:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801184c:	d032      	beq.n	80118b4 <__ssputs_r+0x80>
 801184e:	6825      	ldr	r5, [r4, #0]
 8011850:	6909      	ldr	r1, [r1, #16]
 8011852:	eba5 0901 	sub.w	r9, r5, r1
 8011856:	6965      	ldr	r5, [r4, #20]
 8011858:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801185c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8011860:	3301      	adds	r3, #1
 8011862:	444b      	add	r3, r9
 8011864:	106d      	asrs	r5, r5, #1
 8011866:	429d      	cmp	r5, r3
 8011868:	bf38      	it	cc
 801186a:	461d      	movcc	r5, r3
 801186c:	0553      	lsls	r3, r2, #21
 801186e:	d531      	bpl.n	80118d4 <__ssputs_r+0xa0>
 8011870:	4629      	mov	r1, r5
 8011872:	f7fe f891 	bl	800f998 <_malloc_r>
 8011876:	4606      	mov	r6, r0
 8011878:	b950      	cbnz	r0, 8011890 <__ssputs_r+0x5c>
 801187a:	230c      	movs	r3, #12
 801187c:	f8ca 3000 	str.w	r3, [sl]
 8011880:	89a3      	ldrh	r3, [r4, #12]
 8011882:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011886:	81a3      	strh	r3, [r4, #12]
 8011888:	f04f 30ff 	mov.w	r0, #4294967295
 801188c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011890:	6921      	ldr	r1, [r4, #16]
 8011892:	464a      	mov	r2, r9
 8011894:	f7ff fc1a 	bl	80110cc <memcpy>
 8011898:	89a3      	ldrh	r3, [r4, #12]
 801189a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801189e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80118a2:	81a3      	strh	r3, [r4, #12]
 80118a4:	6126      	str	r6, [r4, #16]
 80118a6:	6165      	str	r5, [r4, #20]
 80118a8:	444e      	add	r6, r9
 80118aa:	eba5 0509 	sub.w	r5, r5, r9
 80118ae:	6026      	str	r6, [r4, #0]
 80118b0:	60a5      	str	r5, [r4, #8]
 80118b2:	463e      	mov	r6, r7
 80118b4:	42be      	cmp	r6, r7
 80118b6:	d900      	bls.n	80118ba <__ssputs_r+0x86>
 80118b8:	463e      	mov	r6, r7
 80118ba:	6820      	ldr	r0, [r4, #0]
 80118bc:	4632      	mov	r2, r6
 80118be:	4641      	mov	r1, r8
 80118c0:	f000 f959 	bl	8011b76 <memmove>
 80118c4:	68a3      	ldr	r3, [r4, #8]
 80118c6:	1b9b      	subs	r3, r3, r6
 80118c8:	60a3      	str	r3, [r4, #8]
 80118ca:	6823      	ldr	r3, [r4, #0]
 80118cc:	4433      	add	r3, r6
 80118ce:	6023      	str	r3, [r4, #0]
 80118d0:	2000      	movs	r0, #0
 80118d2:	e7db      	b.n	801188c <__ssputs_r+0x58>
 80118d4:	462a      	mov	r2, r5
 80118d6:	f000 f968 	bl	8011baa <_realloc_r>
 80118da:	4606      	mov	r6, r0
 80118dc:	2800      	cmp	r0, #0
 80118de:	d1e1      	bne.n	80118a4 <__ssputs_r+0x70>
 80118e0:	6921      	ldr	r1, [r4, #16]
 80118e2:	4650      	mov	r0, sl
 80118e4:	f7fd ffec 	bl	800f8c0 <_free_r>
 80118e8:	e7c7      	b.n	801187a <__ssputs_r+0x46>
	...

080118ec <_svfiprintf_r>:
 80118ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80118f0:	4698      	mov	r8, r3
 80118f2:	898b      	ldrh	r3, [r1, #12]
 80118f4:	061b      	lsls	r3, r3, #24
 80118f6:	b09d      	sub	sp, #116	; 0x74
 80118f8:	4607      	mov	r7, r0
 80118fa:	460d      	mov	r5, r1
 80118fc:	4614      	mov	r4, r2
 80118fe:	d50e      	bpl.n	801191e <_svfiprintf_r+0x32>
 8011900:	690b      	ldr	r3, [r1, #16]
 8011902:	b963      	cbnz	r3, 801191e <_svfiprintf_r+0x32>
 8011904:	2140      	movs	r1, #64	; 0x40
 8011906:	f7fe f847 	bl	800f998 <_malloc_r>
 801190a:	6028      	str	r0, [r5, #0]
 801190c:	6128      	str	r0, [r5, #16]
 801190e:	b920      	cbnz	r0, 801191a <_svfiprintf_r+0x2e>
 8011910:	230c      	movs	r3, #12
 8011912:	603b      	str	r3, [r7, #0]
 8011914:	f04f 30ff 	mov.w	r0, #4294967295
 8011918:	e0d1      	b.n	8011abe <_svfiprintf_r+0x1d2>
 801191a:	2340      	movs	r3, #64	; 0x40
 801191c:	616b      	str	r3, [r5, #20]
 801191e:	2300      	movs	r3, #0
 8011920:	9309      	str	r3, [sp, #36]	; 0x24
 8011922:	2320      	movs	r3, #32
 8011924:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8011928:	f8cd 800c 	str.w	r8, [sp, #12]
 801192c:	2330      	movs	r3, #48	; 0x30
 801192e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8011ad8 <_svfiprintf_r+0x1ec>
 8011932:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8011936:	f04f 0901 	mov.w	r9, #1
 801193a:	4623      	mov	r3, r4
 801193c:	469a      	mov	sl, r3
 801193e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011942:	b10a      	cbz	r2, 8011948 <_svfiprintf_r+0x5c>
 8011944:	2a25      	cmp	r2, #37	; 0x25
 8011946:	d1f9      	bne.n	801193c <_svfiprintf_r+0x50>
 8011948:	ebba 0b04 	subs.w	fp, sl, r4
 801194c:	d00b      	beq.n	8011966 <_svfiprintf_r+0x7a>
 801194e:	465b      	mov	r3, fp
 8011950:	4622      	mov	r2, r4
 8011952:	4629      	mov	r1, r5
 8011954:	4638      	mov	r0, r7
 8011956:	f7ff ff6d 	bl	8011834 <__ssputs_r>
 801195a:	3001      	adds	r0, #1
 801195c:	f000 80aa 	beq.w	8011ab4 <_svfiprintf_r+0x1c8>
 8011960:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011962:	445a      	add	r2, fp
 8011964:	9209      	str	r2, [sp, #36]	; 0x24
 8011966:	f89a 3000 	ldrb.w	r3, [sl]
 801196a:	2b00      	cmp	r3, #0
 801196c:	f000 80a2 	beq.w	8011ab4 <_svfiprintf_r+0x1c8>
 8011970:	2300      	movs	r3, #0
 8011972:	f04f 32ff 	mov.w	r2, #4294967295
 8011976:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801197a:	f10a 0a01 	add.w	sl, sl, #1
 801197e:	9304      	str	r3, [sp, #16]
 8011980:	9307      	str	r3, [sp, #28]
 8011982:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8011986:	931a      	str	r3, [sp, #104]	; 0x68
 8011988:	4654      	mov	r4, sl
 801198a:	2205      	movs	r2, #5
 801198c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011990:	4851      	ldr	r0, [pc, #324]	; (8011ad8 <_svfiprintf_r+0x1ec>)
 8011992:	f7ee fc45 	bl	8000220 <memchr>
 8011996:	9a04      	ldr	r2, [sp, #16]
 8011998:	b9d8      	cbnz	r0, 80119d2 <_svfiprintf_r+0xe6>
 801199a:	06d0      	lsls	r0, r2, #27
 801199c:	bf44      	itt	mi
 801199e:	2320      	movmi	r3, #32
 80119a0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80119a4:	0711      	lsls	r1, r2, #28
 80119a6:	bf44      	itt	mi
 80119a8:	232b      	movmi	r3, #43	; 0x2b
 80119aa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80119ae:	f89a 3000 	ldrb.w	r3, [sl]
 80119b2:	2b2a      	cmp	r3, #42	; 0x2a
 80119b4:	d015      	beq.n	80119e2 <_svfiprintf_r+0xf6>
 80119b6:	9a07      	ldr	r2, [sp, #28]
 80119b8:	4654      	mov	r4, sl
 80119ba:	2000      	movs	r0, #0
 80119bc:	f04f 0c0a 	mov.w	ip, #10
 80119c0:	4621      	mov	r1, r4
 80119c2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80119c6:	3b30      	subs	r3, #48	; 0x30
 80119c8:	2b09      	cmp	r3, #9
 80119ca:	d94e      	bls.n	8011a6a <_svfiprintf_r+0x17e>
 80119cc:	b1b0      	cbz	r0, 80119fc <_svfiprintf_r+0x110>
 80119ce:	9207      	str	r2, [sp, #28]
 80119d0:	e014      	b.n	80119fc <_svfiprintf_r+0x110>
 80119d2:	eba0 0308 	sub.w	r3, r0, r8
 80119d6:	fa09 f303 	lsl.w	r3, r9, r3
 80119da:	4313      	orrs	r3, r2
 80119dc:	9304      	str	r3, [sp, #16]
 80119de:	46a2      	mov	sl, r4
 80119e0:	e7d2      	b.n	8011988 <_svfiprintf_r+0x9c>
 80119e2:	9b03      	ldr	r3, [sp, #12]
 80119e4:	1d19      	adds	r1, r3, #4
 80119e6:	681b      	ldr	r3, [r3, #0]
 80119e8:	9103      	str	r1, [sp, #12]
 80119ea:	2b00      	cmp	r3, #0
 80119ec:	bfbb      	ittet	lt
 80119ee:	425b      	neglt	r3, r3
 80119f0:	f042 0202 	orrlt.w	r2, r2, #2
 80119f4:	9307      	strge	r3, [sp, #28]
 80119f6:	9307      	strlt	r3, [sp, #28]
 80119f8:	bfb8      	it	lt
 80119fa:	9204      	strlt	r2, [sp, #16]
 80119fc:	7823      	ldrb	r3, [r4, #0]
 80119fe:	2b2e      	cmp	r3, #46	; 0x2e
 8011a00:	d10c      	bne.n	8011a1c <_svfiprintf_r+0x130>
 8011a02:	7863      	ldrb	r3, [r4, #1]
 8011a04:	2b2a      	cmp	r3, #42	; 0x2a
 8011a06:	d135      	bne.n	8011a74 <_svfiprintf_r+0x188>
 8011a08:	9b03      	ldr	r3, [sp, #12]
 8011a0a:	1d1a      	adds	r2, r3, #4
 8011a0c:	681b      	ldr	r3, [r3, #0]
 8011a0e:	9203      	str	r2, [sp, #12]
 8011a10:	2b00      	cmp	r3, #0
 8011a12:	bfb8      	it	lt
 8011a14:	f04f 33ff 	movlt.w	r3, #4294967295
 8011a18:	3402      	adds	r4, #2
 8011a1a:	9305      	str	r3, [sp, #20]
 8011a1c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8011ae8 <_svfiprintf_r+0x1fc>
 8011a20:	7821      	ldrb	r1, [r4, #0]
 8011a22:	2203      	movs	r2, #3
 8011a24:	4650      	mov	r0, sl
 8011a26:	f7ee fbfb 	bl	8000220 <memchr>
 8011a2a:	b140      	cbz	r0, 8011a3e <_svfiprintf_r+0x152>
 8011a2c:	2340      	movs	r3, #64	; 0x40
 8011a2e:	eba0 000a 	sub.w	r0, r0, sl
 8011a32:	fa03 f000 	lsl.w	r0, r3, r0
 8011a36:	9b04      	ldr	r3, [sp, #16]
 8011a38:	4303      	orrs	r3, r0
 8011a3a:	3401      	adds	r4, #1
 8011a3c:	9304      	str	r3, [sp, #16]
 8011a3e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011a42:	4826      	ldr	r0, [pc, #152]	; (8011adc <_svfiprintf_r+0x1f0>)
 8011a44:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8011a48:	2206      	movs	r2, #6
 8011a4a:	f7ee fbe9 	bl	8000220 <memchr>
 8011a4e:	2800      	cmp	r0, #0
 8011a50:	d038      	beq.n	8011ac4 <_svfiprintf_r+0x1d8>
 8011a52:	4b23      	ldr	r3, [pc, #140]	; (8011ae0 <_svfiprintf_r+0x1f4>)
 8011a54:	bb1b      	cbnz	r3, 8011a9e <_svfiprintf_r+0x1b2>
 8011a56:	9b03      	ldr	r3, [sp, #12]
 8011a58:	3307      	adds	r3, #7
 8011a5a:	f023 0307 	bic.w	r3, r3, #7
 8011a5e:	3308      	adds	r3, #8
 8011a60:	9303      	str	r3, [sp, #12]
 8011a62:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011a64:	4433      	add	r3, r6
 8011a66:	9309      	str	r3, [sp, #36]	; 0x24
 8011a68:	e767      	b.n	801193a <_svfiprintf_r+0x4e>
 8011a6a:	fb0c 3202 	mla	r2, ip, r2, r3
 8011a6e:	460c      	mov	r4, r1
 8011a70:	2001      	movs	r0, #1
 8011a72:	e7a5      	b.n	80119c0 <_svfiprintf_r+0xd4>
 8011a74:	2300      	movs	r3, #0
 8011a76:	3401      	adds	r4, #1
 8011a78:	9305      	str	r3, [sp, #20]
 8011a7a:	4619      	mov	r1, r3
 8011a7c:	f04f 0c0a 	mov.w	ip, #10
 8011a80:	4620      	mov	r0, r4
 8011a82:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011a86:	3a30      	subs	r2, #48	; 0x30
 8011a88:	2a09      	cmp	r2, #9
 8011a8a:	d903      	bls.n	8011a94 <_svfiprintf_r+0x1a8>
 8011a8c:	2b00      	cmp	r3, #0
 8011a8e:	d0c5      	beq.n	8011a1c <_svfiprintf_r+0x130>
 8011a90:	9105      	str	r1, [sp, #20]
 8011a92:	e7c3      	b.n	8011a1c <_svfiprintf_r+0x130>
 8011a94:	fb0c 2101 	mla	r1, ip, r1, r2
 8011a98:	4604      	mov	r4, r0
 8011a9a:	2301      	movs	r3, #1
 8011a9c:	e7f0      	b.n	8011a80 <_svfiprintf_r+0x194>
 8011a9e:	ab03      	add	r3, sp, #12
 8011aa0:	9300      	str	r3, [sp, #0]
 8011aa2:	462a      	mov	r2, r5
 8011aa4:	4b0f      	ldr	r3, [pc, #60]	; (8011ae4 <_svfiprintf_r+0x1f8>)
 8011aa6:	a904      	add	r1, sp, #16
 8011aa8:	4638      	mov	r0, r7
 8011aaa:	f7fe f889 	bl	800fbc0 <_printf_float>
 8011aae:	1c42      	adds	r2, r0, #1
 8011ab0:	4606      	mov	r6, r0
 8011ab2:	d1d6      	bne.n	8011a62 <_svfiprintf_r+0x176>
 8011ab4:	89ab      	ldrh	r3, [r5, #12]
 8011ab6:	065b      	lsls	r3, r3, #25
 8011ab8:	f53f af2c 	bmi.w	8011914 <_svfiprintf_r+0x28>
 8011abc:	9809      	ldr	r0, [sp, #36]	; 0x24
 8011abe:	b01d      	add	sp, #116	; 0x74
 8011ac0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011ac4:	ab03      	add	r3, sp, #12
 8011ac6:	9300      	str	r3, [sp, #0]
 8011ac8:	462a      	mov	r2, r5
 8011aca:	4b06      	ldr	r3, [pc, #24]	; (8011ae4 <_svfiprintf_r+0x1f8>)
 8011acc:	a904      	add	r1, sp, #16
 8011ace:	4638      	mov	r0, r7
 8011ad0:	f7fe fb1a 	bl	8010108 <_printf_i>
 8011ad4:	e7eb      	b.n	8011aae <_svfiprintf_r+0x1c2>
 8011ad6:	bf00      	nop
 8011ad8:	0801447c 	.word	0x0801447c
 8011adc:	08014486 	.word	0x08014486
 8011ae0:	0800fbc1 	.word	0x0800fbc1
 8011ae4:	08011835 	.word	0x08011835
 8011ae8:	08014482 	.word	0x08014482

08011aec <__assert_func>:
 8011aec:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8011aee:	4614      	mov	r4, r2
 8011af0:	461a      	mov	r2, r3
 8011af2:	4b09      	ldr	r3, [pc, #36]	; (8011b18 <__assert_func+0x2c>)
 8011af4:	681b      	ldr	r3, [r3, #0]
 8011af6:	4605      	mov	r5, r0
 8011af8:	68d8      	ldr	r0, [r3, #12]
 8011afa:	b14c      	cbz	r4, 8011b10 <__assert_func+0x24>
 8011afc:	4b07      	ldr	r3, [pc, #28]	; (8011b1c <__assert_func+0x30>)
 8011afe:	9100      	str	r1, [sp, #0]
 8011b00:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8011b04:	4906      	ldr	r1, [pc, #24]	; (8011b20 <__assert_func+0x34>)
 8011b06:	462b      	mov	r3, r5
 8011b08:	f000 f80e 	bl	8011b28 <fiprintf>
 8011b0c:	f000 faa4 	bl	8012058 <abort>
 8011b10:	4b04      	ldr	r3, [pc, #16]	; (8011b24 <__assert_func+0x38>)
 8011b12:	461c      	mov	r4, r3
 8011b14:	e7f3      	b.n	8011afe <__assert_func+0x12>
 8011b16:	bf00      	nop
 8011b18:	20000208 	.word	0x20000208
 8011b1c:	0801448d 	.word	0x0801448d
 8011b20:	0801449a 	.word	0x0801449a
 8011b24:	080144c8 	.word	0x080144c8

08011b28 <fiprintf>:
 8011b28:	b40e      	push	{r1, r2, r3}
 8011b2a:	b503      	push	{r0, r1, lr}
 8011b2c:	4601      	mov	r1, r0
 8011b2e:	ab03      	add	r3, sp, #12
 8011b30:	4805      	ldr	r0, [pc, #20]	; (8011b48 <fiprintf+0x20>)
 8011b32:	f853 2b04 	ldr.w	r2, [r3], #4
 8011b36:	6800      	ldr	r0, [r0, #0]
 8011b38:	9301      	str	r3, [sp, #4]
 8011b3a:	f000 f88f 	bl	8011c5c <_vfiprintf_r>
 8011b3e:	b002      	add	sp, #8
 8011b40:	f85d eb04 	ldr.w	lr, [sp], #4
 8011b44:	b003      	add	sp, #12
 8011b46:	4770      	bx	lr
 8011b48:	20000208 	.word	0x20000208

08011b4c <__retarget_lock_init_recursive>:
 8011b4c:	4770      	bx	lr

08011b4e <__retarget_lock_acquire_recursive>:
 8011b4e:	4770      	bx	lr

08011b50 <__retarget_lock_release_recursive>:
 8011b50:	4770      	bx	lr

08011b52 <__ascii_mbtowc>:
 8011b52:	b082      	sub	sp, #8
 8011b54:	b901      	cbnz	r1, 8011b58 <__ascii_mbtowc+0x6>
 8011b56:	a901      	add	r1, sp, #4
 8011b58:	b142      	cbz	r2, 8011b6c <__ascii_mbtowc+0x1a>
 8011b5a:	b14b      	cbz	r3, 8011b70 <__ascii_mbtowc+0x1e>
 8011b5c:	7813      	ldrb	r3, [r2, #0]
 8011b5e:	600b      	str	r3, [r1, #0]
 8011b60:	7812      	ldrb	r2, [r2, #0]
 8011b62:	1e10      	subs	r0, r2, #0
 8011b64:	bf18      	it	ne
 8011b66:	2001      	movne	r0, #1
 8011b68:	b002      	add	sp, #8
 8011b6a:	4770      	bx	lr
 8011b6c:	4610      	mov	r0, r2
 8011b6e:	e7fb      	b.n	8011b68 <__ascii_mbtowc+0x16>
 8011b70:	f06f 0001 	mvn.w	r0, #1
 8011b74:	e7f8      	b.n	8011b68 <__ascii_mbtowc+0x16>

08011b76 <memmove>:
 8011b76:	4288      	cmp	r0, r1
 8011b78:	b510      	push	{r4, lr}
 8011b7a:	eb01 0402 	add.w	r4, r1, r2
 8011b7e:	d902      	bls.n	8011b86 <memmove+0x10>
 8011b80:	4284      	cmp	r4, r0
 8011b82:	4623      	mov	r3, r4
 8011b84:	d807      	bhi.n	8011b96 <memmove+0x20>
 8011b86:	1e43      	subs	r3, r0, #1
 8011b88:	42a1      	cmp	r1, r4
 8011b8a:	d008      	beq.n	8011b9e <memmove+0x28>
 8011b8c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8011b90:	f803 2f01 	strb.w	r2, [r3, #1]!
 8011b94:	e7f8      	b.n	8011b88 <memmove+0x12>
 8011b96:	4402      	add	r2, r0
 8011b98:	4601      	mov	r1, r0
 8011b9a:	428a      	cmp	r2, r1
 8011b9c:	d100      	bne.n	8011ba0 <memmove+0x2a>
 8011b9e:	bd10      	pop	{r4, pc}
 8011ba0:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8011ba4:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8011ba8:	e7f7      	b.n	8011b9a <memmove+0x24>

08011baa <_realloc_r>:
 8011baa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011bae:	4680      	mov	r8, r0
 8011bb0:	4614      	mov	r4, r2
 8011bb2:	460e      	mov	r6, r1
 8011bb4:	b921      	cbnz	r1, 8011bc0 <_realloc_r+0x16>
 8011bb6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011bba:	4611      	mov	r1, r2
 8011bbc:	f7fd beec 	b.w	800f998 <_malloc_r>
 8011bc0:	b92a      	cbnz	r2, 8011bce <_realloc_r+0x24>
 8011bc2:	f7fd fe7d 	bl	800f8c0 <_free_r>
 8011bc6:	4625      	mov	r5, r4
 8011bc8:	4628      	mov	r0, r5
 8011bca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011bce:	f000 fc67 	bl	80124a0 <_malloc_usable_size_r>
 8011bd2:	4284      	cmp	r4, r0
 8011bd4:	4607      	mov	r7, r0
 8011bd6:	d802      	bhi.n	8011bde <_realloc_r+0x34>
 8011bd8:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8011bdc:	d812      	bhi.n	8011c04 <_realloc_r+0x5a>
 8011bde:	4621      	mov	r1, r4
 8011be0:	4640      	mov	r0, r8
 8011be2:	f7fd fed9 	bl	800f998 <_malloc_r>
 8011be6:	4605      	mov	r5, r0
 8011be8:	2800      	cmp	r0, #0
 8011bea:	d0ed      	beq.n	8011bc8 <_realloc_r+0x1e>
 8011bec:	42bc      	cmp	r4, r7
 8011bee:	4622      	mov	r2, r4
 8011bf0:	4631      	mov	r1, r6
 8011bf2:	bf28      	it	cs
 8011bf4:	463a      	movcs	r2, r7
 8011bf6:	f7ff fa69 	bl	80110cc <memcpy>
 8011bfa:	4631      	mov	r1, r6
 8011bfc:	4640      	mov	r0, r8
 8011bfe:	f7fd fe5f 	bl	800f8c0 <_free_r>
 8011c02:	e7e1      	b.n	8011bc8 <_realloc_r+0x1e>
 8011c04:	4635      	mov	r5, r6
 8011c06:	e7df      	b.n	8011bc8 <_realloc_r+0x1e>

08011c08 <__sfputc_r>:
 8011c08:	6893      	ldr	r3, [r2, #8]
 8011c0a:	3b01      	subs	r3, #1
 8011c0c:	2b00      	cmp	r3, #0
 8011c0e:	b410      	push	{r4}
 8011c10:	6093      	str	r3, [r2, #8]
 8011c12:	da08      	bge.n	8011c26 <__sfputc_r+0x1e>
 8011c14:	6994      	ldr	r4, [r2, #24]
 8011c16:	42a3      	cmp	r3, r4
 8011c18:	db01      	blt.n	8011c1e <__sfputc_r+0x16>
 8011c1a:	290a      	cmp	r1, #10
 8011c1c:	d103      	bne.n	8011c26 <__sfputc_r+0x1e>
 8011c1e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011c22:	f000 b94b 	b.w	8011ebc <__swbuf_r>
 8011c26:	6813      	ldr	r3, [r2, #0]
 8011c28:	1c58      	adds	r0, r3, #1
 8011c2a:	6010      	str	r0, [r2, #0]
 8011c2c:	7019      	strb	r1, [r3, #0]
 8011c2e:	4608      	mov	r0, r1
 8011c30:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011c34:	4770      	bx	lr

08011c36 <__sfputs_r>:
 8011c36:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011c38:	4606      	mov	r6, r0
 8011c3a:	460f      	mov	r7, r1
 8011c3c:	4614      	mov	r4, r2
 8011c3e:	18d5      	adds	r5, r2, r3
 8011c40:	42ac      	cmp	r4, r5
 8011c42:	d101      	bne.n	8011c48 <__sfputs_r+0x12>
 8011c44:	2000      	movs	r0, #0
 8011c46:	e007      	b.n	8011c58 <__sfputs_r+0x22>
 8011c48:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011c4c:	463a      	mov	r2, r7
 8011c4e:	4630      	mov	r0, r6
 8011c50:	f7ff ffda 	bl	8011c08 <__sfputc_r>
 8011c54:	1c43      	adds	r3, r0, #1
 8011c56:	d1f3      	bne.n	8011c40 <__sfputs_r+0xa>
 8011c58:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08011c5c <_vfiprintf_r>:
 8011c5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011c60:	460d      	mov	r5, r1
 8011c62:	b09d      	sub	sp, #116	; 0x74
 8011c64:	4614      	mov	r4, r2
 8011c66:	4698      	mov	r8, r3
 8011c68:	4606      	mov	r6, r0
 8011c6a:	b118      	cbz	r0, 8011c74 <_vfiprintf_r+0x18>
 8011c6c:	6983      	ldr	r3, [r0, #24]
 8011c6e:	b90b      	cbnz	r3, 8011c74 <_vfiprintf_r+0x18>
 8011c70:	f000 fb14 	bl	801229c <__sinit>
 8011c74:	4b89      	ldr	r3, [pc, #548]	; (8011e9c <_vfiprintf_r+0x240>)
 8011c76:	429d      	cmp	r5, r3
 8011c78:	d11b      	bne.n	8011cb2 <_vfiprintf_r+0x56>
 8011c7a:	6875      	ldr	r5, [r6, #4]
 8011c7c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8011c7e:	07d9      	lsls	r1, r3, #31
 8011c80:	d405      	bmi.n	8011c8e <_vfiprintf_r+0x32>
 8011c82:	89ab      	ldrh	r3, [r5, #12]
 8011c84:	059a      	lsls	r2, r3, #22
 8011c86:	d402      	bmi.n	8011c8e <_vfiprintf_r+0x32>
 8011c88:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8011c8a:	f7ff ff60 	bl	8011b4e <__retarget_lock_acquire_recursive>
 8011c8e:	89ab      	ldrh	r3, [r5, #12]
 8011c90:	071b      	lsls	r3, r3, #28
 8011c92:	d501      	bpl.n	8011c98 <_vfiprintf_r+0x3c>
 8011c94:	692b      	ldr	r3, [r5, #16]
 8011c96:	b9eb      	cbnz	r3, 8011cd4 <_vfiprintf_r+0x78>
 8011c98:	4629      	mov	r1, r5
 8011c9a:	4630      	mov	r0, r6
 8011c9c:	f000 f96e 	bl	8011f7c <__swsetup_r>
 8011ca0:	b1c0      	cbz	r0, 8011cd4 <_vfiprintf_r+0x78>
 8011ca2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8011ca4:	07dc      	lsls	r4, r3, #31
 8011ca6:	d50e      	bpl.n	8011cc6 <_vfiprintf_r+0x6a>
 8011ca8:	f04f 30ff 	mov.w	r0, #4294967295
 8011cac:	b01d      	add	sp, #116	; 0x74
 8011cae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011cb2:	4b7b      	ldr	r3, [pc, #492]	; (8011ea0 <_vfiprintf_r+0x244>)
 8011cb4:	429d      	cmp	r5, r3
 8011cb6:	d101      	bne.n	8011cbc <_vfiprintf_r+0x60>
 8011cb8:	68b5      	ldr	r5, [r6, #8]
 8011cba:	e7df      	b.n	8011c7c <_vfiprintf_r+0x20>
 8011cbc:	4b79      	ldr	r3, [pc, #484]	; (8011ea4 <_vfiprintf_r+0x248>)
 8011cbe:	429d      	cmp	r5, r3
 8011cc0:	bf08      	it	eq
 8011cc2:	68f5      	ldreq	r5, [r6, #12]
 8011cc4:	e7da      	b.n	8011c7c <_vfiprintf_r+0x20>
 8011cc6:	89ab      	ldrh	r3, [r5, #12]
 8011cc8:	0598      	lsls	r0, r3, #22
 8011cca:	d4ed      	bmi.n	8011ca8 <_vfiprintf_r+0x4c>
 8011ccc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8011cce:	f7ff ff3f 	bl	8011b50 <__retarget_lock_release_recursive>
 8011cd2:	e7e9      	b.n	8011ca8 <_vfiprintf_r+0x4c>
 8011cd4:	2300      	movs	r3, #0
 8011cd6:	9309      	str	r3, [sp, #36]	; 0x24
 8011cd8:	2320      	movs	r3, #32
 8011cda:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8011cde:	f8cd 800c 	str.w	r8, [sp, #12]
 8011ce2:	2330      	movs	r3, #48	; 0x30
 8011ce4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8011ea8 <_vfiprintf_r+0x24c>
 8011ce8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8011cec:	f04f 0901 	mov.w	r9, #1
 8011cf0:	4623      	mov	r3, r4
 8011cf2:	469a      	mov	sl, r3
 8011cf4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011cf8:	b10a      	cbz	r2, 8011cfe <_vfiprintf_r+0xa2>
 8011cfa:	2a25      	cmp	r2, #37	; 0x25
 8011cfc:	d1f9      	bne.n	8011cf2 <_vfiprintf_r+0x96>
 8011cfe:	ebba 0b04 	subs.w	fp, sl, r4
 8011d02:	d00b      	beq.n	8011d1c <_vfiprintf_r+0xc0>
 8011d04:	465b      	mov	r3, fp
 8011d06:	4622      	mov	r2, r4
 8011d08:	4629      	mov	r1, r5
 8011d0a:	4630      	mov	r0, r6
 8011d0c:	f7ff ff93 	bl	8011c36 <__sfputs_r>
 8011d10:	3001      	adds	r0, #1
 8011d12:	f000 80aa 	beq.w	8011e6a <_vfiprintf_r+0x20e>
 8011d16:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011d18:	445a      	add	r2, fp
 8011d1a:	9209      	str	r2, [sp, #36]	; 0x24
 8011d1c:	f89a 3000 	ldrb.w	r3, [sl]
 8011d20:	2b00      	cmp	r3, #0
 8011d22:	f000 80a2 	beq.w	8011e6a <_vfiprintf_r+0x20e>
 8011d26:	2300      	movs	r3, #0
 8011d28:	f04f 32ff 	mov.w	r2, #4294967295
 8011d2c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011d30:	f10a 0a01 	add.w	sl, sl, #1
 8011d34:	9304      	str	r3, [sp, #16]
 8011d36:	9307      	str	r3, [sp, #28]
 8011d38:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8011d3c:	931a      	str	r3, [sp, #104]	; 0x68
 8011d3e:	4654      	mov	r4, sl
 8011d40:	2205      	movs	r2, #5
 8011d42:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011d46:	4858      	ldr	r0, [pc, #352]	; (8011ea8 <_vfiprintf_r+0x24c>)
 8011d48:	f7ee fa6a 	bl	8000220 <memchr>
 8011d4c:	9a04      	ldr	r2, [sp, #16]
 8011d4e:	b9d8      	cbnz	r0, 8011d88 <_vfiprintf_r+0x12c>
 8011d50:	06d1      	lsls	r1, r2, #27
 8011d52:	bf44      	itt	mi
 8011d54:	2320      	movmi	r3, #32
 8011d56:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011d5a:	0713      	lsls	r3, r2, #28
 8011d5c:	bf44      	itt	mi
 8011d5e:	232b      	movmi	r3, #43	; 0x2b
 8011d60:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011d64:	f89a 3000 	ldrb.w	r3, [sl]
 8011d68:	2b2a      	cmp	r3, #42	; 0x2a
 8011d6a:	d015      	beq.n	8011d98 <_vfiprintf_r+0x13c>
 8011d6c:	9a07      	ldr	r2, [sp, #28]
 8011d6e:	4654      	mov	r4, sl
 8011d70:	2000      	movs	r0, #0
 8011d72:	f04f 0c0a 	mov.w	ip, #10
 8011d76:	4621      	mov	r1, r4
 8011d78:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011d7c:	3b30      	subs	r3, #48	; 0x30
 8011d7e:	2b09      	cmp	r3, #9
 8011d80:	d94e      	bls.n	8011e20 <_vfiprintf_r+0x1c4>
 8011d82:	b1b0      	cbz	r0, 8011db2 <_vfiprintf_r+0x156>
 8011d84:	9207      	str	r2, [sp, #28]
 8011d86:	e014      	b.n	8011db2 <_vfiprintf_r+0x156>
 8011d88:	eba0 0308 	sub.w	r3, r0, r8
 8011d8c:	fa09 f303 	lsl.w	r3, r9, r3
 8011d90:	4313      	orrs	r3, r2
 8011d92:	9304      	str	r3, [sp, #16]
 8011d94:	46a2      	mov	sl, r4
 8011d96:	e7d2      	b.n	8011d3e <_vfiprintf_r+0xe2>
 8011d98:	9b03      	ldr	r3, [sp, #12]
 8011d9a:	1d19      	adds	r1, r3, #4
 8011d9c:	681b      	ldr	r3, [r3, #0]
 8011d9e:	9103      	str	r1, [sp, #12]
 8011da0:	2b00      	cmp	r3, #0
 8011da2:	bfbb      	ittet	lt
 8011da4:	425b      	neglt	r3, r3
 8011da6:	f042 0202 	orrlt.w	r2, r2, #2
 8011daa:	9307      	strge	r3, [sp, #28]
 8011dac:	9307      	strlt	r3, [sp, #28]
 8011dae:	bfb8      	it	lt
 8011db0:	9204      	strlt	r2, [sp, #16]
 8011db2:	7823      	ldrb	r3, [r4, #0]
 8011db4:	2b2e      	cmp	r3, #46	; 0x2e
 8011db6:	d10c      	bne.n	8011dd2 <_vfiprintf_r+0x176>
 8011db8:	7863      	ldrb	r3, [r4, #1]
 8011dba:	2b2a      	cmp	r3, #42	; 0x2a
 8011dbc:	d135      	bne.n	8011e2a <_vfiprintf_r+0x1ce>
 8011dbe:	9b03      	ldr	r3, [sp, #12]
 8011dc0:	1d1a      	adds	r2, r3, #4
 8011dc2:	681b      	ldr	r3, [r3, #0]
 8011dc4:	9203      	str	r2, [sp, #12]
 8011dc6:	2b00      	cmp	r3, #0
 8011dc8:	bfb8      	it	lt
 8011dca:	f04f 33ff 	movlt.w	r3, #4294967295
 8011dce:	3402      	adds	r4, #2
 8011dd0:	9305      	str	r3, [sp, #20]
 8011dd2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8011eb8 <_vfiprintf_r+0x25c>
 8011dd6:	7821      	ldrb	r1, [r4, #0]
 8011dd8:	2203      	movs	r2, #3
 8011dda:	4650      	mov	r0, sl
 8011ddc:	f7ee fa20 	bl	8000220 <memchr>
 8011de0:	b140      	cbz	r0, 8011df4 <_vfiprintf_r+0x198>
 8011de2:	2340      	movs	r3, #64	; 0x40
 8011de4:	eba0 000a 	sub.w	r0, r0, sl
 8011de8:	fa03 f000 	lsl.w	r0, r3, r0
 8011dec:	9b04      	ldr	r3, [sp, #16]
 8011dee:	4303      	orrs	r3, r0
 8011df0:	3401      	adds	r4, #1
 8011df2:	9304      	str	r3, [sp, #16]
 8011df4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011df8:	482c      	ldr	r0, [pc, #176]	; (8011eac <_vfiprintf_r+0x250>)
 8011dfa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8011dfe:	2206      	movs	r2, #6
 8011e00:	f7ee fa0e 	bl	8000220 <memchr>
 8011e04:	2800      	cmp	r0, #0
 8011e06:	d03f      	beq.n	8011e88 <_vfiprintf_r+0x22c>
 8011e08:	4b29      	ldr	r3, [pc, #164]	; (8011eb0 <_vfiprintf_r+0x254>)
 8011e0a:	bb1b      	cbnz	r3, 8011e54 <_vfiprintf_r+0x1f8>
 8011e0c:	9b03      	ldr	r3, [sp, #12]
 8011e0e:	3307      	adds	r3, #7
 8011e10:	f023 0307 	bic.w	r3, r3, #7
 8011e14:	3308      	adds	r3, #8
 8011e16:	9303      	str	r3, [sp, #12]
 8011e18:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011e1a:	443b      	add	r3, r7
 8011e1c:	9309      	str	r3, [sp, #36]	; 0x24
 8011e1e:	e767      	b.n	8011cf0 <_vfiprintf_r+0x94>
 8011e20:	fb0c 3202 	mla	r2, ip, r2, r3
 8011e24:	460c      	mov	r4, r1
 8011e26:	2001      	movs	r0, #1
 8011e28:	e7a5      	b.n	8011d76 <_vfiprintf_r+0x11a>
 8011e2a:	2300      	movs	r3, #0
 8011e2c:	3401      	adds	r4, #1
 8011e2e:	9305      	str	r3, [sp, #20]
 8011e30:	4619      	mov	r1, r3
 8011e32:	f04f 0c0a 	mov.w	ip, #10
 8011e36:	4620      	mov	r0, r4
 8011e38:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011e3c:	3a30      	subs	r2, #48	; 0x30
 8011e3e:	2a09      	cmp	r2, #9
 8011e40:	d903      	bls.n	8011e4a <_vfiprintf_r+0x1ee>
 8011e42:	2b00      	cmp	r3, #0
 8011e44:	d0c5      	beq.n	8011dd2 <_vfiprintf_r+0x176>
 8011e46:	9105      	str	r1, [sp, #20]
 8011e48:	e7c3      	b.n	8011dd2 <_vfiprintf_r+0x176>
 8011e4a:	fb0c 2101 	mla	r1, ip, r1, r2
 8011e4e:	4604      	mov	r4, r0
 8011e50:	2301      	movs	r3, #1
 8011e52:	e7f0      	b.n	8011e36 <_vfiprintf_r+0x1da>
 8011e54:	ab03      	add	r3, sp, #12
 8011e56:	9300      	str	r3, [sp, #0]
 8011e58:	462a      	mov	r2, r5
 8011e5a:	4b16      	ldr	r3, [pc, #88]	; (8011eb4 <_vfiprintf_r+0x258>)
 8011e5c:	a904      	add	r1, sp, #16
 8011e5e:	4630      	mov	r0, r6
 8011e60:	f7fd feae 	bl	800fbc0 <_printf_float>
 8011e64:	4607      	mov	r7, r0
 8011e66:	1c78      	adds	r0, r7, #1
 8011e68:	d1d6      	bne.n	8011e18 <_vfiprintf_r+0x1bc>
 8011e6a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8011e6c:	07d9      	lsls	r1, r3, #31
 8011e6e:	d405      	bmi.n	8011e7c <_vfiprintf_r+0x220>
 8011e70:	89ab      	ldrh	r3, [r5, #12]
 8011e72:	059a      	lsls	r2, r3, #22
 8011e74:	d402      	bmi.n	8011e7c <_vfiprintf_r+0x220>
 8011e76:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8011e78:	f7ff fe6a 	bl	8011b50 <__retarget_lock_release_recursive>
 8011e7c:	89ab      	ldrh	r3, [r5, #12]
 8011e7e:	065b      	lsls	r3, r3, #25
 8011e80:	f53f af12 	bmi.w	8011ca8 <_vfiprintf_r+0x4c>
 8011e84:	9809      	ldr	r0, [sp, #36]	; 0x24
 8011e86:	e711      	b.n	8011cac <_vfiprintf_r+0x50>
 8011e88:	ab03      	add	r3, sp, #12
 8011e8a:	9300      	str	r3, [sp, #0]
 8011e8c:	462a      	mov	r2, r5
 8011e8e:	4b09      	ldr	r3, [pc, #36]	; (8011eb4 <_vfiprintf_r+0x258>)
 8011e90:	a904      	add	r1, sp, #16
 8011e92:	4630      	mov	r0, r6
 8011e94:	f7fe f938 	bl	8010108 <_printf_i>
 8011e98:	e7e4      	b.n	8011e64 <_vfiprintf_r+0x208>
 8011e9a:	bf00      	nop
 8011e9c:	080145f4 	.word	0x080145f4
 8011ea0:	08014614 	.word	0x08014614
 8011ea4:	080145d4 	.word	0x080145d4
 8011ea8:	0801447c 	.word	0x0801447c
 8011eac:	08014486 	.word	0x08014486
 8011eb0:	0800fbc1 	.word	0x0800fbc1
 8011eb4:	08011c37 	.word	0x08011c37
 8011eb8:	08014482 	.word	0x08014482

08011ebc <__swbuf_r>:
 8011ebc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011ebe:	460e      	mov	r6, r1
 8011ec0:	4614      	mov	r4, r2
 8011ec2:	4605      	mov	r5, r0
 8011ec4:	b118      	cbz	r0, 8011ece <__swbuf_r+0x12>
 8011ec6:	6983      	ldr	r3, [r0, #24]
 8011ec8:	b90b      	cbnz	r3, 8011ece <__swbuf_r+0x12>
 8011eca:	f000 f9e7 	bl	801229c <__sinit>
 8011ece:	4b21      	ldr	r3, [pc, #132]	; (8011f54 <__swbuf_r+0x98>)
 8011ed0:	429c      	cmp	r4, r3
 8011ed2:	d12b      	bne.n	8011f2c <__swbuf_r+0x70>
 8011ed4:	686c      	ldr	r4, [r5, #4]
 8011ed6:	69a3      	ldr	r3, [r4, #24]
 8011ed8:	60a3      	str	r3, [r4, #8]
 8011eda:	89a3      	ldrh	r3, [r4, #12]
 8011edc:	071a      	lsls	r2, r3, #28
 8011ede:	d52f      	bpl.n	8011f40 <__swbuf_r+0x84>
 8011ee0:	6923      	ldr	r3, [r4, #16]
 8011ee2:	b36b      	cbz	r3, 8011f40 <__swbuf_r+0x84>
 8011ee4:	6923      	ldr	r3, [r4, #16]
 8011ee6:	6820      	ldr	r0, [r4, #0]
 8011ee8:	1ac0      	subs	r0, r0, r3
 8011eea:	6963      	ldr	r3, [r4, #20]
 8011eec:	b2f6      	uxtb	r6, r6
 8011eee:	4283      	cmp	r3, r0
 8011ef0:	4637      	mov	r7, r6
 8011ef2:	dc04      	bgt.n	8011efe <__swbuf_r+0x42>
 8011ef4:	4621      	mov	r1, r4
 8011ef6:	4628      	mov	r0, r5
 8011ef8:	f000 f93c 	bl	8012174 <_fflush_r>
 8011efc:	bb30      	cbnz	r0, 8011f4c <__swbuf_r+0x90>
 8011efe:	68a3      	ldr	r3, [r4, #8]
 8011f00:	3b01      	subs	r3, #1
 8011f02:	60a3      	str	r3, [r4, #8]
 8011f04:	6823      	ldr	r3, [r4, #0]
 8011f06:	1c5a      	adds	r2, r3, #1
 8011f08:	6022      	str	r2, [r4, #0]
 8011f0a:	701e      	strb	r6, [r3, #0]
 8011f0c:	6963      	ldr	r3, [r4, #20]
 8011f0e:	3001      	adds	r0, #1
 8011f10:	4283      	cmp	r3, r0
 8011f12:	d004      	beq.n	8011f1e <__swbuf_r+0x62>
 8011f14:	89a3      	ldrh	r3, [r4, #12]
 8011f16:	07db      	lsls	r3, r3, #31
 8011f18:	d506      	bpl.n	8011f28 <__swbuf_r+0x6c>
 8011f1a:	2e0a      	cmp	r6, #10
 8011f1c:	d104      	bne.n	8011f28 <__swbuf_r+0x6c>
 8011f1e:	4621      	mov	r1, r4
 8011f20:	4628      	mov	r0, r5
 8011f22:	f000 f927 	bl	8012174 <_fflush_r>
 8011f26:	b988      	cbnz	r0, 8011f4c <__swbuf_r+0x90>
 8011f28:	4638      	mov	r0, r7
 8011f2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011f2c:	4b0a      	ldr	r3, [pc, #40]	; (8011f58 <__swbuf_r+0x9c>)
 8011f2e:	429c      	cmp	r4, r3
 8011f30:	d101      	bne.n	8011f36 <__swbuf_r+0x7a>
 8011f32:	68ac      	ldr	r4, [r5, #8]
 8011f34:	e7cf      	b.n	8011ed6 <__swbuf_r+0x1a>
 8011f36:	4b09      	ldr	r3, [pc, #36]	; (8011f5c <__swbuf_r+0xa0>)
 8011f38:	429c      	cmp	r4, r3
 8011f3a:	bf08      	it	eq
 8011f3c:	68ec      	ldreq	r4, [r5, #12]
 8011f3e:	e7ca      	b.n	8011ed6 <__swbuf_r+0x1a>
 8011f40:	4621      	mov	r1, r4
 8011f42:	4628      	mov	r0, r5
 8011f44:	f000 f81a 	bl	8011f7c <__swsetup_r>
 8011f48:	2800      	cmp	r0, #0
 8011f4a:	d0cb      	beq.n	8011ee4 <__swbuf_r+0x28>
 8011f4c:	f04f 37ff 	mov.w	r7, #4294967295
 8011f50:	e7ea      	b.n	8011f28 <__swbuf_r+0x6c>
 8011f52:	bf00      	nop
 8011f54:	080145f4 	.word	0x080145f4
 8011f58:	08014614 	.word	0x08014614
 8011f5c:	080145d4 	.word	0x080145d4

08011f60 <__ascii_wctomb>:
 8011f60:	b149      	cbz	r1, 8011f76 <__ascii_wctomb+0x16>
 8011f62:	2aff      	cmp	r2, #255	; 0xff
 8011f64:	bf85      	ittet	hi
 8011f66:	238a      	movhi	r3, #138	; 0x8a
 8011f68:	6003      	strhi	r3, [r0, #0]
 8011f6a:	700a      	strbls	r2, [r1, #0]
 8011f6c:	f04f 30ff 	movhi.w	r0, #4294967295
 8011f70:	bf98      	it	ls
 8011f72:	2001      	movls	r0, #1
 8011f74:	4770      	bx	lr
 8011f76:	4608      	mov	r0, r1
 8011f78:	4770      	bx	lr
	...

08011f7c <__swsetup_r>:
 8011f7c:	4b32      	ldr	r3, [pc, #200]	; (8012048 <__swsetup_r+0xcc>)
 8011f7e:	b570      	push	{r4, r5, r6, lr}
 8011f80:	681d      	ldr	r5, [r3, #0]
 8011f82:	4606      	mov	r6, r0
 8011f84:	460c      	mov	r4, r1
 8011f86:	b125      	cbz	r5, 8011f92 <__swsetup_r+0x16>
 8011f88:	69ab      	ldr	r3, [r5, #24]
 8011f8a:	b913      	cbnz	r3, 8011f92 <__swsetup_r+0x16>
 8011f8c:	4628      	mov	r0, r5
 8011f8e:	f000 f985 	bl	801229c <__sinit>
 8011f92:	4b2e      	ldr	r3, [pc, #184]	; (801204c <__swsetup_r+0xd0>)
 8011f94:	429c      	cmp	r4, r3
 8011f96:	d10f      	bne.n	8011fb8 <__swsetup_r+0x3c>
 8011f98:	686c      	ldr	r4, [r5, #4]
 8011f9a:	89a3      	ldrh	r3, [r4, #12]
 8011f9c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8011fa0:	0719      	lsls	r1, r3, #28
 8011fa2:	d42c      	bmi.n	8011ffe <__swsetup_r+0x82>
 8011fa4:	06dd      	lsls	r5, r3, #27
 8011fa6:	d411      	bmi.n	8011fcc <__swsetup_r+0x50>
 8011fa8:	2309      	movs	r3, #9
 8011faa:	6033      	str	r3, [r6, #0]
 8011fac:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8011fb0:	81a3      	strh	r3, [r4, #12]
 8011fb2:	f04f 30ff 	mov.w	r0, #4294967295
 8011fb6:	e03e      	b.n	8012036 <__swsetup_r+0xba>
 8011fb8:	4b25      	ldr	r3, [pc, #148]	; (8012050 <__swsetup_r+0xd4>)
 8011fba:	429c      	cmp	r4, r3
 8011fbc:	d101      	bne.n	8011fc2 <__swsetup_r+0x46>
 8011fbe:	68ac      	ldr	r4, [r5, #8]
 8011fc0:	e7eb      	b.n	8011f9a <__swsetup_r+0x1e>
 8011fc2:	4b24      	ldr	r3, [pc, #144]	; (8012054 <__swsetup_r+0xd8>)
 8011fc4:	429c      	cmp	r4, r3
 8011fc6:	bf08      	it	eq
 8011fc8:	68ec      	ldreq	r4, [r5, #12]
 8011fca:	e7e6      	b.n	8011f9a <__swsetup_r+0x1e>
 8011fcc:	0758      	lsls	r0, r3, #29
 8011fce:	d512      	bpl.n	8011ff6 <__swsetup_r+0x7a>
 8011fd0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8011fd2:	b141      	cbz	r1, 8011fe6 <__swsetup_r+0x6a>
 8011fd4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8011fd8:	4299      	cmp	r1, r3
 8011fda:	d002      	beq.n	8011fe2 <__swsetup_r+0x66>
 8011fdc:	4630      	mov	r0, r6
 8011fde:	f7fd fc6f 	bl	800f8c0 <_free_r>
 8011fe2:	2300      	movs	r3, #0
 8011fe4:	6363      	str	r3, [r4, #52]	; 0x34
 8011fe6:	89a3      	ldrh	r3, [r4, #12]
 8011fe8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8011fec:	81a3      	strh	r3, [r4, #12]
 8011fee:	2300      	movs	r3, #0
 8011ff0:	6063      	str	r3, [r4, #4]
 8011ff2:	6923      	ldr	r3, [r4, #16]
 8011ff4:	6023      	str	r3, [r4, #0]
 8011ff6:	89a3      	ldrh	r3, [r4, #12]
 8011ff8:	f043 0308 	orr.w	r3, r3, #8
 8011ffc:	81a3      	strh	r3, [r4, #12]
 8011ffe:	6923      	ldr	r3, [r4, #16]
 8012000:	b94b      	cbnz	r3, 8012016 <__swsetup_r+0x9a>
 8012002:	89a3      	ldrh	r3, [r4, #12]
 8012004:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8012008:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801200c:	d003      	beq.n	8012016 <__swsetup_r+0x9a>
 801200e:	4621      	mov	r1, r4
 8012010:	4630      	mov	r0, r6
 8012012:	f000 fa05 	bl	8012420 <__smakebuf_r>
 8012016:	89a0      	ldrh	r0, [r4, #12]
 8012018:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801201c:	f010 0301 	ands.w	r3, r0, #1
 8012020:	d00a      	beq.n	8012038 <__swsetup_r+0xbc>
 8012022:	2300      	movs	r3, #0
 8012024:	60a3      	str	r3, [r4, #8]
 8012026:	6963      	ldr	r3, [r4, #20]
 8012028:	425b      	negs	r3, r3
 801202a:	61a3      	str	r3, [r4, #24]
 801202c:	6923      	ldr	r3, [r4, #16]
 801202e:	b943      	cbnz	r3, 8012042 <__swsetup_r+0xc6>
 8012030:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8012034:	d1ba      	bne.n	8011fac <__swsetup_r+0x30>
 8012036:	bd70      	pop	{r4, r5, r6, pc}
 8012038:	0781      	lsls	r1, r0, #30
 801203a:	bf58      	it	pl
 801203c:	6963      	ldrpl	r3, [r4, #20]
 801203e:	60a3      	str	r3, [r4, #8]
 8012040:	e7f4      	b.n	801202c <__swsetup_r+0xb0>
 8012042:	2000      	movs	r0, #0
 8012044:	e7f7      	b.n	8012036 <__swsetup_r+0xba>
 8012046:	bf00      	nop
 8012048:	20000208 	.word	0x20000208
 801204c:	080145f4 	.word	0x080145f4
 8012050:	08014614 	.word	0x08014614
 8012054:	080145d4 	.word	0x080145d4

08012058 <abort>:
 8012058:	b508      	push	{r3, lr}
 801205a:	2006      	movs	r0, #6
 801205c:	f000 fa50 	bl	8012500 <raise>
 8012060:	2001      	movs	r0, #1
 8012062:	f7f0 fc53 	bl	800290c <_exit>
	...

08012068 <__sflush_r>:
 8012068:	898a      	ldrh	r2, [r1, #12]
 801206a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801206e:	4605      	mov	r5, r0
 8012070:	0710      	lsls	r0, r2, #28
 8012072:	460c      	mov	r4, r1
 8012074:	d458      	bmi.n	8012128 <__sflush_r+0xc0>
 8012076:	684b      	ldr	r3, [r1, #4]
 8012078:	2b00      	cmp	r3, #0
 801207a:	dc05      	bgt.n	8012088 <__sflush_r+0x20>
 801207c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801207e:	2b00      	cmp	r3, #0
 8012080:	dc02      	bgt.n	8012088 <__sflush_r+0x20>
 8012082:	2000      	movs	r0, #0
 8012084:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012088:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801208a:	2e00      	cmp	r6, #0
 801208c:	d0f9      	beq.n	8012082 <__sflush_r+0x1a>
 801208e:	2300      	movs	r3, #0
 8012090:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8012094:	682f      	ldr	r7, [r5, #0]
 8012096:	602b      	str	r3, [r5, #0]
 8012098:	d032      	beq.n	8012100 <__sflush_r+0x98>
 801209a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801209c:	89a3      	ldrh	r3, [r4, #12]
 801209e:	075a      	lsls	r2, r3, #29
 80120a0:	d505      	bpl.n	80120ae <__sflush_r+0x46>
 80120a2:	6863      	ldr	r3, [r4, #4]
 80120a4:	1ac0      	subs	r0, r0, r3
 80120a6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80120a8:	b10b      	cbz	r3, 80120ae <__sflush_r+0x46>
 80120aa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80120ac:	1ac0      	subs	r0, r0, r3
 80120ae:	2300      	movs	r3, #0
 80120b0:	4602      	mov	r2, r0
 80120b2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80120b4:	6a21      	ldr	r1, [r4, #32]
 80120b6:	4628      	mov	r0, r5
 80120b8:	47b0      	blx	r6
 80120ba:	1c43      	adds	r3, r0, #1
 80120bc:	89a3      	ldrh	r3, [r4, #12]
 80120be:	d106      	bne.n	80120ce <__sflush_r+0x66>
 80120c0:	6829      	ldr	r1, [r5, #0]
 80120c2:	291d      	cmp	r1, #29
 80120c4:	d82c      	bhi.n	8012120 <__sflush_r+0xb8>
 80120c6:	4a2a      	ldr	r2, [pc, #168]	; (8012170 <__sflush_r+0x108>)
 80120c8:	40ca      	lsrs	r2, r1
 80120ca:	07d6      	lsls	r6, r2, #31
 80120cc:	d528      	bpl.n	8012120 <__sflush_r+0xb8>
 80120ce:	2200      	movs	r2, #0
 80120d0:	6062      	str	r2, [r4, #4]
 80120d2:	04d9      	lsls	r1, r3, #19
 80120d4:	6922      	ldr	r2, [r4, #16]
 80120d6:	6022      	str	r2, [r4, #0]
 80120d8:	d504      	bpl.n	80120e4 <__sflush_r+0x7c>
 80120da:	1c42      	adds	r2, r0, #1
 80120dc:	d101      	bne.n	80120e2 <__sflush_r+0x7a>
 80120de:	682b      	ldr	r3, [r5, #0]
 80120e0:	b903      	cbnz	r3, 80120e4 <__sflush_r+0x7c>
 80120e2:	6560      	str	r0, [r4, #84]	; 0x54
 80120e4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80120e6:	602f      	str	r7, [r5, #0]
 80120e8:	2900      	cmp	r1, #0
 80120ea:	d0ca      	beq.n	8012082 <__sflush_r+0x1a>
 80120ec:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80120f0:	4299      	cmp	r1, r3
 80120f2:	d002      	beq.n	80120fa <__sflush_r+0x92>
 80120f4:	4628      	mov	r0, r5
 80120f6:	f7fd fbe3 	bl	800f8c0 <_free_r>
 80120fa:	2000      	movs	r0, #0
 80120fc:	6360      	str	r0, [r4, #52]	; 0x34
 80120fe:	e7c1      	b.n	8012084 <__sflush_r+0x1c>
 8012100:	6a21      	ldr	r1, [r4, #32]
 8012102:	2301      	movs	r3, #1
 8012104:	4628      	mov	r0, r5
 8012106:	47b0      	blx	r6
 8012108:	1c41      	adds	r1, r0, #1
 801210a:	d1c7      	bne.n	801209c <__sflush_r+0x34>
 801210c:	682b      	ldr	r3, [r5, #0]
 801210e:	2b00      	cmp	r3, #0
 8012110:	d0c4      	beq.n	801209c <__sflush_r+0x34>
 8012112:	2b1d      	cmp	r3, #29
 8012114:	d001      	beq.n	801211a <__sflush_r+0xb2>
 8012116:	2b16      	cmp	r3, #22
 8012118:	d101      	bne.n	801211e <__sflush_r+0xb6>
 801211a:	602f      	str	r7, [r5, #0]
 801211c:	e7b1      	b.n	8012082 <__sflush_r+0x1a>
 801211e:	89a3      	ldrh	r3, [r4, #12]
 8012120:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012124:	81a3      	strh	r3, [r4, #12]
 8012126:	e7ad      	b.n	8012084 <__sflush_r+0x1c>
 8012128:	690f      	ldr	r7, [r1, #16]
 801212a:	2f00      	cmp	r7, #0
 801212c:	d0a9      	beq.n	8012082 <__sflush_r+0x1a>
 801212e:	0793      	lsls	r3, r2, #30
 8012130:	680e      	ldr	r6, [r1, #0]
 8012132:	bf08      	it	eq
 8012134:	694b      	ldreq	r3, [r1, #20]
 8012136:	600f      	str	r7, [r1, #0]
 8012138:	bf18      	it	ne
 801213a:	2300      	movne	r3, #0
 801213c:	eba6 0807 	sub.w	r8, r6, r7
 8012140:	608b      	str	r3, [r1, #8]
 8012142:	f1b8 0f00 	cmp.w	r8, #0
 8012146:	dd9c      	ble.n	8012082 <__sflush_r+0x1a>
 8012148:	6a21      	ldr	r1, [r4, #32]
 801214a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801214c:	4643      	mov	r3, r8
 801214e:	463a      	mov	r2, r7
 8012150:	4628      	mov	r0, r5
 8012152:	47b0      	blx	r6
 8012154:	2800      	cmp	r0, #0
 8012156:	dc06      	bgt.n	8012166 <__sflush_r+0xfe>
 8012158:	89a3      	ldrh	r3, [r4, #12]
 801215a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801215e:	81a3      	strh	r3, [r4, #12]
 8012160:	f04f 30ff 	mov.w	r0, #4294967295
 8012164:	e78e      	b.n	8012084 <__sflush_r+0x1c>
 8012166:	4407      	add	r7, r0
 8012168:	eba8 0800 	sub.w	r8, r8, r0
 801216c:	e7e9      	b.n	8012142 <__sflush_r+0xda>
 801216e:	bf00      	nop
 8012170:	20400001 	.word	0x20400001

08012174 <_fflush_r>:
 8012174:	b538      	push	{r3, r4, r5, lr}
 8012176:	690b      	ldr	r3, [r1, #16]
 8012178:	4605      	mov	r5, r0
 801217a:	460c      	mov	r4, r1
 801217c:	b913      	cbnz	r3, 8012184 <_fflush_r+0x10>
 801217e:	2500      	movs	r5, #0
 8012180:	4628      	mov	r0, r5
 8012182:	bd38      	pop	{r3, r4, r5, pc}
 8012184:	b118      	cbz	r0, 801218e <_fflush_r+0x1a>
 8012186:	6983      	ldr	r3, [r0, #24]
 8012188:	b90b      	cbnz	r3, 801218e <_fflush_r+0x1a>
 801218a:	f000 f887 	bl	801229c <__sinit>
 801218e:	4b14      	ldr	r3, [pc, #80]	; (80121e0 <_fflush_r+0x6c>)
 8012190:	429c      	cmp	r4, r3
 8012192:	d11b      	bne.n	80121cc <_fflush_r+0x58>
 8012194:	686c      	ldr	r4, [r5, #4]
 8012196:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801219a:	2b00      	cmp	r3, #0
 801219c:	d0ef      	beq.n	801217e <_fflush_r+0xa>
 801219e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80121a0:	07d0      	lsls	r0, r2, #31
 80121a2:	d404      	bmi.n	80121ae <_fflush_r+0x3a>
 80121a4:	0599      	lsls	r1, r3, #22
 80121a6:	d402      	bmi.n	80121ae <_fflush_r+0x3a>
 80121a8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80121aa:	f7ff fcd0 	bl	8011b4e <__retarget_lock_acquire_recursive>
 80121ae:	4628      	mov	r0, r5
 80121b0:	4621      	mov	r1, r4
 80121b2:	f7ff ff59 	bl	8012068 <__sflush_r>
 80121b6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80121b8:	07da      	lsls	r2, r3, #31
 80121ba:	4605      	mov	r5, r0
 80121bc:	d4e0      	bmi.n	8012180 <_fflush_r+0xc>
 80121be:	89a3      	ldrh	r3, [r4, #12]
 80121c0:	059b      	lsls	r3, r3, #22
 80121c2:	d4dd      	bmi.n	8012180 <_fflush_r+0xc>
 80121c4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80121c6:	f7ff fcc3 	bl	8011b50 <__retarget_lock_release_recursive>
 80121ca:	e7d9      	b.n	8012180 <_fflush_r+0xc>
 80121cc:	4b05      	ldr	r3, [pc, #20]	; (80121e4 <_fflush_r+0x70>)
 80121ce:	429c      	cmp	r4, r3
 80121d0:	d101      	bne.n	80121d6 <_fflush_r+0x62>
 80121d2:	68ac      	ldr	r4, [r5, #8]
 80121d4:	e7df      	b.n	8012196 <_fflush_r+0x22>
 80121d6:	4b04      	ldr	r3, [pc, #16]	; (80121e8 <_fflush_r+0x74>)
 80121d8:	429c      	cmp	r4, r3
 80121da:	bf08      	it	eq
 80121dc:	68ec      	ldreq	r4, [r5, #12]
 80121de:	e7da      	b.n	8012196 <_fflush_r+0x22>
 80121e0:	080145f4 	.word	0x080145f4
 80121e4:	08014614 	.word	0x08014614
 80121e8:	080145d4 	.word	0x080145d4

080121ec <std>:
 80121ec:	2300      	movs	r3, #0
 80121ee:	b510      	push	{r4, lr}
 80121f0:	4604      	mov	r4, r0
 80121f2:	e9c0 3300 	strd	r3, r3, [r0]
 80121f6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80121fa:	6083      	str	r3, [r0, #8]
 80121fc:	8181      	strh	r1, [r0, #12]
 80121fe:	6643      	str	r3, [r0, #100]	; 0x64
 8012200:	81c2      	strh	r2, [r0, #14]
 8012202:	6183      	str	r3, [r0, #24]
 8012204:	4619      	mov	r1, r3
 8012206:	2208      	movs	r2, #8
 8012208:	305c      	adds	r0, #92	; 0x5c
 801220a:	f7fd fb51 	bl	800f8b0 <memset>
 801220e:	4b05      	ldr	r3, [pc, #20]	; (8012224 <std+0x38>)
 8012210:	6263      	str	r3, [r4, #36]	; 0x24
 8012212:	4b05      	ldr	r3, [pc, #20]	; (8012228 <std+0x3c>)
 8012214:	62a3      	str	r3, [r4, #40]	; 0x28
 8012216:	4b05      	ldr	r3, [pc, #20]	; (801222c <std+0x40>)
 8012218:	62e3      	str	r3, [r4, #44]	; 0x2c
 801221a:	4b05      	ldr	r3, [pc, #20]	; (8012230 <std+0x44>)
 801221c:	6224      	str	r4, [r4, #32]
 801221e:	6323      	str	r3, [r4, #48]	; 0x30
 8012220:	bd10      	pop	{r4, pc}
 8012222:	bf00      	nop
 8012224:	08012539 	.word	0x08012539
 8012228:	0801255b 	.word	0x0801255b
 801222c:	08012593 	.word	0x08012593
 8012230:	080125b7 	.word	0x080125b7

08012234 <_cleanup_r>:
 8012234:	4901      	ldr	r1, [pc, #4]	; (801223c <_cleanup_r+0x8>)
 8012236:	f000 b8af 	b.w	8012398 <_fwalk_reent>
 801223a:	bf00      	nop
 801223c:	08012175 	.word	0x08012175

08012240 <__sfmoreglue>:
 8012240:	b570      	push	{r4, r5, r6, lr}
 8012242:	2268      	movs	r2, #104	; 0x68
 8012244:	1e4d      	subs	r5, r1, #1
 8012246:	4355      	muls	r5, r2
 8012248:	460e      	mov	r6, r1
 801224a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801224e:	f7fd fba3 	bl	800f998 <_malloc_r>
 8012252:	4604      	mov	r4, r0
 8012254:	b140      	cbz	r0, 8012268 <__sfmoreglue+0x28>
 8012256:	2100      	movs	r1, #0
 8012258:	e9c0 1600 	strd	r1, r6, [r0]
 801225c:	300c      	adds	r0, #12
 801225e:	60a0      	str	r0, [r4, #8]
 8012260:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8012264:	f7fd fb24 	bl	800f8b0 <memset>
 8012268:	4620      	mov	r0, r4
 801226a:	bd70      	pop	{r4, r5, r6, pc}

0801226c <__sfp_lock_acquire>:
 801226c:	4801      	ldr	r0, [pc, #4]	; (8012274 <__sfp_lock_acquire+0x8>)
 801226e:	f7ff bc6e 	b.w	8011b4e <__retarget_lock_acquire_recursive>
 8012272:	bf00      	nop
 8012274:	200023e1 	.word	0x200023e1

08012278 <__sfp_lock_release>:
 8012278:	4801      	ldr	r0, [pc, #4]	; (8012280 <__sfp_lock_release+0x8>)
 801227a:	f7ff bc69 	b.w	8011b50 <__retarget_lock_release_recursive>
 801227e:	bf00      	nop
 8012280:	200023e1 	.word	0x200023e1

08012284 <__sinit_lock_acquire>:
 8012284:	4801      	ldr	r0, [pc, #4]	; (801228c <__sinit_lock_acquire+0x8>)
 8012286:	f7ff bc62 	b.w	8011b4e <__retarget_lock_acquire_recursive>
 801228a:	bf00      	nop
 801228c:	200023e2 	.word	0x200023e2

08012290 <__sinit_lock_release>:
 8012290:	4801      	ldr	r0, [pc, #4]	; (8012298 <__sinit_lock_release+0x8>)
 8012292:	f7ff bc5d 	b.w	8011b50 <__retarget_lock_release_recursive>
 8012296:	bf00      	nop
 8012298:	200023e2 	.word	0x200023e2

0801229c <__sinit>:
 801229c:	b510      	push	{r4, lr}
 801229e:	4604      	mov	r4, r0
 80122a0:	f7ff fff0 	bl	8012284 <__sinit_lock_acquire>
 80122a4:	69a3      	ldr	r3, [r4, #24]
 80122a6:	b11b      	cbz	r3, 80122b0 <__sinit+0x14>
 80122a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80122ac:	f7ff bff0 	b.w	8012290 <__sinit_lock_release>
 80122b0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80122b4:	6523      	str	r3, [r4, #80]	; 0x50
 80122b6:	4b13      	ldr	r3, [pc, #76]	; (8012304 <__sinit+0x68>)
 80122b8:	4a13      	ldr	r2, [pc, #76]	; (8012308 <__sinit+0x6c>)
 80122ba:	681b      	ldr	r3, [r3, #0]
 80122bc:	62a2      	str	r2, [r4, #40]	; 0x28
 80122be:	42a3      	cmp	r3, r4
 80122c0:	bf04      	itt	eq
 80122c2:	2301      	moveq	r3, #1
 80122c4:	61a3      	streq	r3, [r4, #24]
 80122c6:	4620      	mov	r0, r4
 80122c8:	f000 f820 	bl	801230c <__sfp>
 80122cc:	6060      	str	r0, [r4, #4]
 80122ce:	4620      	mov	r0, r4
 80122d0:	f000 f81c 	bl	801230c <__sfp>
 80122d4:	60a0      	str	r0, [r4, #8]
 80122d6:	4620      	mov	r0, r4
 80122d8:	f000 f818 	bl	801230c <__sfp>
 80122dc:	2200      	movs	r2, #0
 80122de:	60e0      	str	r0, [r4, #12]
 80122e0:	2104      	movs	r1, #4
 80122e2:	6860      	ldr	r0, [r4, #4]
 80122e4:	f7ff ff82 	bl	80121ec <std>
 80122e8:	68a0      	ldr	r0, [r4, #8]
 80122ea:	2201      	movs	r2, #1
 80122ec:	2109      	movs	r1, #9
 80122ee:	f7ff ff7d 	bl	80121ec <std>
 80122f2:	68e0      	ldr	r0, [r4, #12]
 80122f4:	2202      	movs	r2, #2
 80122f6:	2112      	movs	r1, #18
 80122f8:	f7ff ff78 	bl	80121ec <std>
 80122fc:	2301      	movs	r3, #1
 80122fe:	61a3      	str	r3, [r4, #24]
 8012300:	e7d2      	b.n	80122a8 <__sinit+0xc>
 8012302:	bf00      	nop
 8012304:	08014258 	.word	0x08014258
 8012308:	08012235 	.word	0x08012235

0801230c <__sfp>:
 801230c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801230e:	4607      	mov	r7, r0
 8012310:	f7ff ffac 	bl	801226c <__sfp_lock_acquire>
 8012314:	4b1e      	ldr	r3, [pc, #120]	; (8012390 <__sfp+0x84>)
 8012316:	681e      	ldr	r6, [r3, #0]
 8012318:	69b3      	ldr	r3, [r6, #24]
 801231a:	b913      	cbnz	r3, 8012322 <__sfp+0x16>
 801231c:	4630      	mov	r0, r6
 801231e:	f7ff ffbd 	bl	801229c <__sinit>
 8012322:	3648      	adds	r6, #72	; 0x48
 8012324:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8012328:	3b01      	subs	r3, #1
 801232a:	d503      	bpl.n	8012334 <__sfp+0x28>
 801232c:	6833      	ldr	r3, [r6, #0]
 801232e:	b30b      	cbz	r3, 8012374 <__sfp+0x68>
 8012330:	6836      	ldr	r6, [r6, #0]
 8012332:	e7f7      	b.n	8012324 <__sfp+0x18>
 8012334:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8012338:	b9d5      	cbnz	r5, 8012370 <__sfp+0x64>
 801233a:	4b16      	ldr	r3, [pc, #88]	; (8012394 <__sfp+0x88>)
 801233c:	60e3      	str	r3, [r4, #12]
 801233e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8012342:	6665      	str	r5, [r4, #100]	; 0x64
 8012344:	f7ff fc02 	bl	8011b4c <__retarget_lock_init_recursive>
 8012348:	f7ff ff96 	bl	8012278 <__sfp_lock_release>
 801234c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8012350:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8012354:	6025      	str	r5, [r4, #0]
 8012356:	61a5      	str	r5, [r4, #24]
 8012358:	2208      	movs	r2, #8
 801235a:	4629      	mov	r1, r5
 801235c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8012360:	f7fd faa6 	bl	800f8b0 <memset>
 8012364:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8012368:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801236c:	4620      	mov	r0, r4
 801236e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012370:	3468      	adds	r4, #104	; 0x68
 8012372:	e7d9      	b.n	8012328 <__sfp+0x1c>
 8012374:	2104      	movs	r1, #4
 8012376:	4638      	mov	r0, r7
 8012378:	f7ff ff62 	bl	8012240 <__sfmoreglue>
 801237c:	4604      	mov	r4, r0
 801237e:	6030      	str	r0, [r6, #0]
 8012380:	2800      	cmp	r0, #0
 8012382:	d1d5      	bne.n	8012330 <__sfp+0x24>
 8012384:	f7ff ff78 	bl	8012278 <__sfp_lock_release>
 8012388:	230c      	movs	r3, #12
 801238a:	603b      	str	r3, [r7, #0]
 801238c:	e7ee      	b.n	801236c <__sfp+0x60>
 801238e:	bf00      	nop
 8012390:	08014258 	.word	0x08014258
 8012394:	ffff0001 	.word	0xffff0001

08012398 <_fwalk_reent>:
 8012398:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801239c:	4606      	mov	r6, r0
 801239e:	4688      	mov	r8, r1
 80123a0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80123a4:	2700      	movs	r7, #0
 80123a6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80123aa:	f1b9 0901 	subs.w	r9, r9, #1
 80123ae:	d505      	bpl.n	80123bc <_fwalk_reent+0x24>
 80123b0:	6824      	ldr	r4, [r4, #0]
 80123b2:	2c00      	cmp	r4, #0
 80123b4:	d1f7      	bne.n	80123a6 <_fwalk_reent+0xe>
 80123b6:	4638      	mov	r0, r7
 80123b8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80123bc:	89ab      	ldrh	r3, [r5, #12]
 80123be:	2b01      	cmp	r3, #1
 80123c0:	d907      	bls.n	80123d2 <_fwalk_reent+0x3a>
 80123c2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80123c6:	3301      	adds	r3, #1
 80123c8:	d003      	beq.n	80123d2 <_fwalk_reent+0x3a>
 80123ca:	4629      	mov	r1, r5
 80123cc:	4630      	mov	r0, r6
 80123ce:	47c0      	blx	r8
 80123d0:	4307      	orrs	r7, r0
 80123d2:	3568      	adds	r5, #104	; 0x68
 80123d4:	e7e9      	b.n	80123aa <_fwalk_reent+0x12>

080123d6 <__swhatbuf_r>:
 80123d6:	b570      	push	{r4, r5, r6, lr}
 80123d8:	460e      	mov	r6, r1
 80123da:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80123de:	2900      	cmp	r1, #0
 80123e0:	b096      	sub	sp, #88	; 0x58
 80123e2:	4614      	mov	r4, r2
 80123e4:	461d      	mov	r5, r3
 80123e6:	da08      	bge.n	80123fa <__swhatbuf_r+0x24>
 80123e8:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80123ec:	2200      	movs	r2, #0
 80123ee:	602a      	str	r2, [r5, #0]
 80123f0:	061a      	lsls	r2, r3, #24
 80123f2:	d410      	bmi.n	8012416 <__swhatbuf_r+0x40>
 80123f4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80123f8:	e00e      	b.n	8012418 <__swhatbuf_r+0x42>
 80123fa:	466a      	mov	r2, sp
 80123fc:	f000 f902 	bl	8012604 <_fstat_r>
 8012400:	2800      	cmp	r0, #0
 8012402:	dbf1      	blt.n	80123e8 <__swhatbuf_r+0x12>
 8012404:	9a01      	ldr	r2, [sp, #4]
 8012406:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801240a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801240e:	425a      	negs	r2, r3
 8012410:	415a      	adcs	r2, r3
 8012412:	602a      	str	r2, [r5, #0]
 8012414:	e7ee      	b.n	80123f4 <__swhatbuf_r+0x1e>
 8012416:	2340      	movs	r3, #64	; 0x40
 8012418:	2000      	movs	r0, #0
 801241a:	6023      	str	r3, [r4, #0]
 801241c:	b016      	add	sp, #88	; 0x58
 801241e:	bd70      	pop	{r4, r5, r6, pc}

08012420 <__smakebuf_r>:
 8012420:	898b      	ldrh	r3, [r1, #12]
 8012422:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8012424:	079d      	lsls	r5, r3, #30
 8012426:	4606      	mov	r6, r0
 8012428:	460c      	mov	r4, r1
 801242a:	d507      	bpl.n	801243c <__smakebuf_r+0x1c>
 801242c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8012430:	6023      	str	r3, [r4, #0]
 8012432:	6123      	str	r3, [r4, #16]
 8012434:	2301      	movs	r3, #1
 8012436:	6163      	str	r3, [r4, #20]
 8012438:	b002      	add	sp, #8
 801243a:	bd70      	pop	{r4, r5, r6, pc}
 801243c:	ab01      	add	r3, sp, #4
 801243e:	466a      	mov	r2, sp
 8012440:	f7ff ffc9 	bl	80123d6 <__swhatbuf_r>
 8012444:	9900      	ldr	r1, [sp, #0]
 8012446:	4605      	mov	r5, r0
 8012448:	4630      	mov	r0, r6
 801244a:	f7fd faa5 	bl	800f998 <_malloc_r>
 801244e:	b948      	cbnz	r0, 8012464 <__smakebuf_r+0x44>
 8012450:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012454:	059a      	lsls	r2, r3, #22
 8012456:	d4ef      	bmi.n	8012438 <__smakebuf_r+0x18>
 8012458:	f023 0303 	bic.w	r3, r3, #3
 801245c:	f043 0302 	orr.w	r3, r3, #2
 8012460:	81a3      	strh	r3, [r4, #12]
 8012462:	e7e3      	b.n	801242c <__smakebuf_r+0xc>
 8012464:	4b0d      	ldr	r3, [pc, #52]	; (801249c <__smakebuf_r+0x7c>)
 8012466:	62b3      	str	r3, [r6, #40]	; 0x28
 8012468:	89a3      	ldrh	r3, [r4, #12]
 801246a:	6020      	str	r0, [r4, #0]
 801246c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012470:	81a3      	strh	r3, [r4, #12]
 8012472:	9b00      	ldr	r3, [sp, #0]
 8012474:	6163      	str	r3, [r4, #20]
 8012476:	9b01      	ldr	r3, [sp, #4]
 8012478:	6120      	str	r0, [r4, #16]
 801247a:	b15b      	cbz	r3, 8012494 <__smakebuf_r+0x74>
 801247c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8012480:	4630      	mov	r0, r6
 8012482:	f000 f8d1 	bl	8012628 <_isatty_r>
 8012486:	b128      	cbz	r0, 8012494 <__smakebuf_r+0x74>
 8012488:	89a3      	ldrh	r3, [r4, #12]
 801248a:	f023 0303 	bic.w	r3, r3, #3
 801248e:	f043 0301 	orr.w	r3, r3, #1
 8012492:	81a3      	strh	r3, [r4, #12]
 8012494:	89a0      	ldrh	r0, [r4, #12]
 8012496:	4305      	orrs	r5, r0
 8012498:	81a5      	strh	r5, [r4, #12]
 801249a:	e7cd      	b.n	8012438 <__smakebuf_r+0x18>
 801249c:	08012235 	.word	0x08012235

080124a0 <_malloc_usable_size_r>:
 80124a0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80124a4:	1f18      	subs	r0, r3, #4
 80124a6:	2b00      	cmp	r3, #0
 80124a8:	bfbc      	itt	lt
 80124aa:	580b      	ldrlt	r3, [r1, r0]
 80124ac:	18c0      	addlt	r0, r0, r3
 80124ae:	4770      	bx	lr

080124b0 <_raise_r>:
 80124b0:	291f      	cmp	r1, #31
 80124b2:	b538      	push	{r3, r4, r5, lr}
 80124b4:	4604      	mov	r4, r0
 80124b6:	460d      	mov	r5, r1
 80124b8:	d904      	bls.n	80124c4 <_raise_r+0x14>
 80124ba:	2316      	movs	r3, #22
 80124bc:	6003      	str	r3, [r0, #0]
 80124be:	f04f 30ff 	mov.w	r0, #4294967295
 80124c2:	bd38      	pop	{r3, r4, r5, pc}
 80124c4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80124c6:	b112      	cbz	r2, 80124ce <_raise_r+0x1e>
 80124c8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80124cc:	b94b      	cbnz	r3, 80124e2 <_raise_r+0x32>
 80124ce:	4620      	mov	r0, r4
 80124d0:	f000 f830 	bl	8012534 <_getpid_r>
 80124d4:	462a      	mov	r2, r5
 80124d6:	4601      	mov	r1, r0
 80124d8:	4620      	mov	r0, r4
 80124da:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80124de:	f000 b817 	b.w	8012510 <_kill_r>
 80124e2:	2b01      	cmp	r3, #1
 80124e4:	d00a      	beq.n	80124fc <_raise_r+0x4c>
 80124e6:	1c59      	adds	r1, r3, #1
 80124e8:	d103      	bne.n	80124f2 <_raise_r+0x42>
 80124ea:	2316      	movs	r3, #22
 80124ec:	6003      	str	r3, [r0, #0]
 80124ee:	2001      	movs	r0, #1
 80124f0:	e7e7      	b.n	80124c2 <_raise_r+0x12>
 80124f2:	2400      	movs	r4, #0
 80124f4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80124f8:	4628      	mov	r0, r5
 80124fa:	4798      	blx	r3
 80124fc:	2000      	movs	r0, #0
 80124fe:	e7e0      	b.n	80124c2 <_raise_r+0x12>

08012500 <raise>:
 8012500:	4b02      	ldr	r3, [pc, #8]	; (801250c <raise+0xc>)
 8012502:	4601      	mov	r1, r0
 8012504:	6818      	ldr	r0, [r3, #0]
 8012506:	f7ff bfd3 	b.w	80124b0 <_raise_r>
 801250a:	bf00      	nop
 801250c:	20000208 	.word	0x20000208

08012510 <_kill_r>:
 8012510:	b538      	push	{r3, r4, r5, lr}
 8012512:	4d07      	ldr	r5, [pc, #28]	; (8012530 <_kill_r+0x20>)
 8012514:	2300      	movs	r3, #0
 8012516:	4604      	mov	r4, r0
 8012518:	4608      	mov	r0, r1
 801251a:	4611      	mov	r1, r2
 801251c:	602b      	str	r3, [r5, #0]
 801251e:	f7f0 f9e5 	bl	80028ec <_kill>
 8012522:	1c43      	adds	r3, r0, #1
 8012524:	d102      	bne.n	801252c <_kill_r+0x1c>
 8012526:	682b      	ldr	r3, [r5, #0]
 8012528:	b103      	cbz	r3, 801252c <_kill_r+0x1c>
 801252a:	6023      	str	r3, [r4, #0]
 801252c:	bd38      	pop	{r3, r4, r5, pc}
 801252e:	bf00      	nop
 8012530:	200023dc 	.word	0x200023dc

08012534 <_getpid_r>:
 8012534:	f7f0 b9d2 	b.w	80028dc <_getpid>

08012538 <__sread>:
 8012538:	b510      	push	{r4, lr}
 801253a:	460c      	mov	r4, r1
 801253c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012540:	f000 f894 	bl	801266c <_read_r>
 8012544:	2800      	cmp	r0, #0
 8012546:	bfab      	itete	ge
 8012548:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801254a:	89a3      	ldrhlt	r3, [r4, #12]
 801254c:	181b      	addge	r3, r3, r0
 801254e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8012552:	bfac      	ite	ge
 8012554:	6563      	strge	r3, [r4, #84]	; 0x54
 8012556:	81a3      	strhlt	r3, [r4, #12]
 8012558:	bd10      	pop	{r4, pc}

0801255a <__swrite>:
 801255a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801255e:	461f      	mov	r7, r3
 8012560:	898b      	ldrh	r3, [r1, #12]
 8012562:	05db      	lsls	r3, r3, #23
 8012564:	4605      	mov	r5, r0
 8012566:	460c      	mov	r4, r1
 8012568:	4616      	mov	r6, r2
 801256a:	d505      	bpl.n	8012578 <__swrite+0x1e>
 801256c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012570:	2302      	movs	r3, #2
 8012572:	2200      	movs	r2, #0
 8012574:	f000 f868 	bl	8012648 <_lseek_r>
 8012578:	89a3      	ldrh	r3, [r4, #12]
 801257a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801257e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8012582:	81a3      	strh	r3, [r4, #12]
 8012584:	4632      	mov	r2, r6
 8012586:	463b      	mov	r3, r7
 8012588:	4628      	mov	r0, r5
 801258a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801258e:	f000 b817 	b.w	80125c0 <_write_r>

08012592 <__sseek>:
 8012592:	b510      	push	{r4, lr}
 8012594:	460c      	mov	r4, r1
 8012596:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801259a:	f000 f855 	bl	8012648 <_lseek_r>
 801259e:	1c43      	adds	r3, r0, #1
 80125a0:	89a3      	ldrh	r3, [r4, #12]
 80125a2:	bf15      	itete	ne
 80125a4:	6560      	strne	r0, [r4, #84]	; 0x54
 80125a6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80125aa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80125ae:	81a3      	strheq	r3, [r4, #12]
 80125b0:	bf18      	it	ne
 80125b2:	81a3      	strhne	r3, [r4, #12]
 80125b4:	bd10      	pop	{r4, pc}

080125b6 <__sclose>:
 80125b6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80125ba:	f000 b813 	b.w	80125e4 <_close_r>
	...

080125c0 <_write_r>:
 80125c0:	b538      	push	{r3, r4, r5, lr}
 80125c2:	4d07      	ldr	r5, [pc, #28]	; (80125e0 <_write_r+0x20>)
 80125c4:	4604      	mov	r4, r0
 80125c6:	4608      	mov	r0, r1
 80125c8:	4611      	mov	r1, r2
 80125ca:	2200      	movs	r2, #0
 80125cc:	602a      	str	r2, [r5, #0]
 80125ce:	461a      	mov	r2, r3
 80125d0:	f7f0 f9c3 	bl	800295a <_write>
 80125d4:	1c43      	adds	r3, r0, #1
 80125d6:	d102      	bne.n	80125de <_write_r+0x1e>
 80125d8:	682b      	ldr	r3, [r5, #0]
 80125da:	b103      	cbz	r3, 80125de <_write_r+0x1e>
 80125dc:	6023      	str	r3, [r4, #0]
 80125de:	bd38      	pop	{r3, r4, r5, pc}
 80125e0:	200023dc 	.word	0x200023dc

080125e4 <_close_r>:
 80125e4:	b538      	push	{r3, r4, r5, lr}
 80125e6:	4d06      	ldr	r5, [pc, #24]	; (8012600 <_close_r+0x1c>)
 80125e8:	2300      	movs	r3, #0
 80125ea:	4604      	mov	r4, r0
 80125ec:	4608      	mov	r0, r1
 80125ee:	602b      	str	r3, [r5, #0]
 80125f0:	f7f0 f9cf 	bl	8002992 <_close>
 80125f4:	1c43      	adds	r3, r0, #1
 80125f6:	d102      	bne.n	80125fe <_close_r+0x1a>
 80125f8:	682b      	ldr	r3, [r5, #0]
 80125fa:	b103      	cbz	r3, 80125fe <_close_r+0x1a>
 80125fc:	6023      	str	r3, [r4, #0]
 80125fe:	bd38      	pop	{r3, r4, r5, pc}
 8012600:	200023dc 	.word	0x200023dc

08012604 <_fstat_r>:
 8012604:	b538      	push	{r3, r4, r5, lr}
 8012606:	4d07      	ldr	r5, [pc, #28]	; (8012624 <_fstat_r+0x20>)
 8012608:	2300      	movs	r3, #0
 801260a:	4604      	mov	r4, r0
 801260c:	4608      	mov	r0, r1
 801260e:	4611      	mov	r1, r2
 8012610:	602b      	str	r3, [r5, #0]
 8012612:	f7f0 f9ca 	bl	80029aa <_fstat>
 8012616:	1c43      	adds	r3, r0, #1
 8012618:	d102      	bne.n	8012620 <_fstat_r+0x1c>
 801261a:	682b      	ldr	r3, [r5, #0]
 801261c:	b103      	cbz	r3, 8012620 <_fstat_r+0x1c>
 801261e:	6023      	str	r3, [r4, #0]
 8012620:	bd38      	pop	{r3, r4, r5, pc}
 8012622:	bf00      	nop
 8012624:	200023dc 	.word	0x200023dc

08012628 <_isatty_r>:
 8012628:	b538      	push	{r3, r4, r5, lr}
 801262a:	4d06      	ldr	r5, [pc, #24]	; (8012644 <_isatty_r+0x1c>)
 801262c:	2300      	movs	r3, #0
 801262e:	4604      	mov	r4, r0
 8012630:	4608      	mov	r0, r1
 8012632:	602b      	str	r3, [r5, #0]
 8012634:	f7f0 f9c9 	bl	80029ca <_isatty>
 8012638:	1c43      	adds	r3, r0, #1
 801263a:	d102      	bne.n	8012642 <_isatty_r+0x1a>
 801263c:	682b      	ldr	r3, [r5, #0]
 801263e:	b103      	cbz	r3, 8012642 <_isatty_r+0x1a>
 8012640:	6023      	str	r3, [r4, #0]
 8012642:	bd38      	pop	{r3, r4, r5, pc}
 8012644:	200023dc 	.word	0x200023dc

08012648 <_lseek_r>:
 8012648:	b538      	push	{r3, r4, r5, lr}
 801264a:	4d07      	ldr	r5, [pc, #28]	; (8012668 <_lseek_r+0x20>)
 801264c:	4604      	mov	r4, r0
 801264e:	4608      	mov	r0, r1
 8012650:	4611      	mov	r1, r2
 8012652:	2200      	movs	r2, #0
 8012654:	602a      	str	r2, [r5, #0]
 8012656:	461a      	mov	r2, r3
 8012658:	f7f0 f9c2 	bl	80029e0 <_lseek>
 801265c:	1c43      	adds	r3, r0, #1
 801265e:	d102      	bne.n	8012666 <_lseek_r+0x1e>
 8012660:	682b      	ldr	r3, [r5, #0]
 8012662:	b103      	cbz	r3, 8012666 <_lseek_r+0x1e>
 8012664:	6023      	str	r3, [r4, #0]
 8012666:	bd38      	pop	{r3, r4, r5, pc}
 8012668:	200023dc 	.word	0x200023dc

0801266c <_read_r>:
 801266c:	b538      	push	{r3, r4, r5, lr}
 801266e:	4d07      	ldr	r5, [pc, #28]	; (801268c <_read_r+0x20>)
 8012670:	4604      	mov	r4, r0
 8012672:	4608      	mov	r0, r1
 8012674:	4611      	mov	r1, r2
 8012676:	2200      	movs	r2, #0
 8012678:	602a      	str	r2, [r5, #0]
 801267a:	461a      	mov	r2, r3
 801267c:	f7f0 f950 	bl	8002920 <_read>
 8012680:	1c43      	adds	r3, r0, #1
 8012682:	d102      	bne.n	801268a <_read_r+0x1e>
 8012684:	682b      	ldr	r3, [r5, #0]
 8012686:	b103      	cbz	r3, 801268a <_read_r+0x1e>
 8012688:	6023      	str	r3, [r4, #0]
 801268a:	bd38      	pop	{r3, r4, r5, pc}
 801268c:	200023dc 	.word	0x200023dc

08012690 <cos>:
 8012690:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8012692:	ec53 2b10 	vmov	r2, r3, d0
 8012696:	4826      	ldr	r0, [pc, #152]	; (8012730 <cos+0xa0>)
 8012698:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 801269c:	4281      	cmp	r1, r0
 801269e:	dc06      	bgt.n	80126ae <cos+0x1e>
 80126a0:	ed9f 1b21 	vldr	d1, [pc, #132]	; 8012728 <cos+0x98>
 80126a4:	b005      	add	sp, #20
 80126a6:	f85d eb04 	ldr.w	lr, [sp], #4
 80126aa:	f000 bd11 	b.w	80130d0 <__kernel_cos>
 80126ae:	4821      	ldr	r0, [pc, #132]	; (8012734 <cos+0xa4>)
 80126b0:	4281      	cmp	r1, r0
 80126b2:	dd09      	ble.n	80126c8 <cos+0x38>
 80126b4:	ee10 0a10 	vmov	r0, s0
 80126b8:	4619      	mov	r1, r3
 80126ba:	f7ed fe05 	bl	80002c8 <__aeabi_dsub>
 80126be:	ec41 0b10 	vmov	d0, r0, r1
 80126c2:	b005      	add	sp, #20
 80126c4:	f85d fb04 	ldr.w	pc, [sp], #4
 80126c8:	4668      	mov	r0, sp
 80126ca:	f000 fa09 	bl	8012ae0 <__ieee754_rem_pio2>
 80126ce:	f000 0003 	and.w	r0, r0, #3
 80126d2:	2801      	cmp	r0, #1
 80126d4:	d00b      	beq.n	80126ee <cos+0x5e>
 80126d6:	2802      	cmp	r0, #2
 80126d8:	d016      	beq.n	8012708 <cos+0x78>
 80126da:	b9e0      	cbnz	r0, 8012716 <cos+0x86>
 80126dc:	ed9d 1b02 	vldr	d1, [sp, #8]
 80126e0:	ed9d 0b00 	vldr	d0, [sp]
 80126e4:	f000 fcf4 	bl	80130d0 <__kernel_cos>
 80126e8:	ec51 0b10 	vmov	r0, r1, d0
 80126ec:	e7e7      	b.n	80126be <cos+0x2e>
 80126ee:	ed9d 1b02 	vldr	d1, [sp, #8]
 80126f2:	ed9d 0b00 	vldr	d0, [sp]
 80126f6:	f001 f903 	bl	8013900 <__kernel_sin>
 80126fa:	ec53 2b10 	vmov	r2, r3, d0
 80126fe:	ee10 0a10 	vmov	r0, s0
 8012702:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8012706:	e7da      	b.n	80126be <cos+0x2e>
 8012708:	ed9d 1b02 	vldr	d1, [sp, #8]
 801270c:	ed9d 0b00 	vldr	d0, [sp]
 8012710:	f000 fcde 	bl	80130d0 <__kernel_cos>
 8012714:	e7f1      	b.n	80126fa <cos+0x6a>
 8012716:	ed9d 1b02 	vldr	d1, [sp, #8]
 801271a:	ed9d 0b00 	vldr	d0, [sp]
 801271e:	2001      	movs	r0, #1
 8012720:	f001 f8ee 	bl	8013900 <__kernel_sin>
 8012724:	e7e0      	b.n	80126e8 <cos+0x58>
 8012726:	bf00      	nop
	...
 8012730:	3fe921fb 	.word	0x3fe921fb
 8012734:	7fefffff 	.word	0x7fefffff

08012738 <sin>:
 8012738:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801273a:	ec53 2b10 	vmov	r2, r3, d0
 801273e:	4828      	ldr	r0, [pc, #160]	; (80127e0 <sin+0xa8>)
 8012740:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8012744:	4281      	cmp	r1, r0
 8012746:	dc07      	bgt.n	8012758 <sin+0x20>
 8012748:	ed9f 1b23 	vldr	d1, [pc, #140]	; 80127d8 <sin+0xa0>
 801274c:	2000      	movs	r0, #0
 801274e:	b005      	add	sp, #20
 8012750:	f85d eb04 	ldr.w	lr, [sp], #4
 8012754:	f001 b8d4 	b.w	8013900 <__kernel_sin>
 8012758:	4822      	ldr	r0, [pc, #136]	; (80127e4 <sin+0xac>)
 801275a:	4281      	cmp	r1, r0
 801275c:	dd09      	ble.n	8012772 <sin+0x3a>
 801275e:	ee10 0a10 	vmov	r0, s0
 8012762:	4619      	mov	r1, r3
 8012764:	f7ed fdb0 	bl	80002c8 <__aeabi_dsub>
 8012768:	ec41 0b10 	vmov	d0, r0, r1
 801276c:	b005      	add	sp, #20
 801276e:	f85d fb04 	ldr.w	pc, [sp], #4
 8012772:	4668      	mov	r0, sp
 8012774:	f000 f9b4 	bl	8012ae0 <__ieee754_rem_pio2>
 8012778:	f000 0003 	and.w	r0, r0, #3
 801277c:	2801      	cmp	r0, #1
 801277e:	d00c      	beq.n	801279a <sin+0x62>
 8012780:	2802      	cmp	r0, #2
 8012782:	d011      	beq.n	80127a8 <sin+0x70>
 8012784:	b9f0      	cbnz	r0, 80127c4 <sin+0x8c>
 8012786:	ed9d 1b02 	vldr	d1, [sp, #8]
 801278a:	ed9d 0b00 	vldr	d0, [sp]
 801278e:	2001      	movs	r0, #1
 8012790:	f001 f8b6 	bl	8013900 <__kernel_sin>
 8012794:	ec51 0b10 	vmov	r0, r1, d0
 8012798:	e7e6      	b.n	8012768 <sin+0x30>
 801279a:	ed9d 1b02 	vldr	d1, [sp, #8]
 801279e:	ed9d 0b00 	vldr	d0, [sp]
 80127a2:	f000 fc95 	bl	80130d0 <__kernel_cos>
 80127a6:	e7f5      	b.n	8012794 <sin+0x5c>
 80127a8:	ed9d 1b02 	vldr	d1, [sp, #8]
 80127ac:	ed9d 0b00 	vldr	d0, [sp]
 80127b0:	2001      	movs	r0, #1
 80127b2:	f001 f8a5 	bl	8013900 <__kernel_sin>
 80127b6:	ec53 2b10 	vmov	r2, r3, d0
 80127ba:	ee10 0a10 	vmov	r0, s0
 80127be:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80127c2:	e7d1      	b.n	8012768 <sin+0x30>
 80127c4:	ed9d 1b02 	vldr	d1, [sp, #8]
 80127c8:	ed9d 0b00 	vldr	d0, [sp]
 80127cc:	f000 fc80 	bl	80130d0 <__kernel_cos>
 80127d0:	e7f1      	b.n	80127b6 <sin+0x7e>
 80127d2:	bf00      	nop
 80127d4:	f3af 8000 	nop.w
	...
 80127e0:	3fe921fb 	.word	0x3fe921fb
 80127e4:	7fefffff 	.word	0x7fefffff

080127e8 <tan>:
 80127e8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80127ea:	ec53 2b10 	vmov	r2, r3, d0
 80127ee:	4816      	ldr	r0, [pc, #88]	; (8012848 <tan+0x60>)
 80127f0:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80127f4:	4281      	cmp	r1, r0
 80127f6:	dc07      	bgt.n	8012808 <tan+0x20>
 80127f8:	ed9f 1b11 	vldr	d1, [pc, #68]	; 8012840 <tan+0x58>
 80127fc:	2001      	movs	r0, #1
 80127fe:	b005      	add	sp, #20
 8012800:	f85d eb04 	ldr.w	lr, [sp], #4
 8012804:	f001 b93c 	b.w	8013a80 <__kernel_tan>
 8012808:	4810      	ldr	r0, [pc, #64]	; (801284c <tan+0x64>)
 801280a:	4281      	cmp	r1, r0
 801280c:	dd09      	ble.n	8012822 <tan+0x3a>
 801280e:	ee10 0a10 	vmov	r0, s0
 8012812:	4619      	mov	r1, r3
 8012814:	f7ed fd58 	bl	80002c8 <__aeabi_dsub>
 8012818:	ec41 0b10 	vmov	d0, r0, r1
 801281c:	b005      	add	sp, #20
 801281e:	f85d fb04 	ldr.w	pc, [sp], #4
 8012822:	4668      	mov	r0, sp
 8012824:	f000 f95c 	bl	8012ae0 <__ieee754_rem_pio2>
 8012828:	0040      	lsls	r0, r0, #1
 801282a:	f000 0002 	and.w	r0, r0, #2
 801282e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8012832:	ed9d 0b00 	vldr	d0, [sp]
 8012836:	f1c0 0001 	rsb	r0, r0, #1
 801283a:	f001 f921 	bl	8013a80 <__kernel_tan>
 801283e:	e7ed      	b.n	801281c <tan+0x34>
	...
 8012848:	3fe921fb 	.word	0x3fe921fb
 801284c:	7fefffff 	.word	0x7fefffff

08012850 <atanf>:
 8012850:	b538      	push	{r3, r4, r5, lr}
 8012852:	ee10 5a10 	vmov	r5, s0
 8012856:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 801285a:	f1b4 4fa1 	cmp.w	r4, #1350565888	; 0x50800000
 801285e:	eef0 7a40 	vmov.f32	s15, s0
 8012862:	db10      	blt.n	8012886 <atanf+0x36>
 8012864:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 8012868:	dd04      	ble.n	8012874 <atanf+0x24>
 801286a:	ee70 7a00 	vadd.f32	s15, s0, s0
 801286e:	eeb0 0a67 	vmov.f32	s0, s15
 8012872:	bd38      	pop	{r3, r4, r5, pc}
 8012874:	eddf 7a4d 	vldr	s15, [pc, #308]	; 80129ac <atanf+0x15c>
 8012878:	ed9f 0a4d 	vldr	s0, [pc, #308]	; 80129b0 <atanf+0x160>
 801287c:	2d00      	cmp	r5, #0
 801287e:	bfd8      	it	le
 8012880:	eef0 7a40 	vmovle.f32	s15, s0
 8012884:	e7f3      	b.n	801286e <atanf+0x1e>
 8012886:	4b4b      	ldr	r3, [pc, #300]	; (80129b4 <atanf+0x164>)
 8012888:	429c      	cmp	r4, r3
 801288a:	dc10      	bgt.n	80128ae <atanf+0x5e>
 801288c:	f1b4 5f44 	cmp.w	r4, #822083584	; 0x31000000
 8012890:	da0a      	bge.n	80128a8 <atanf+0x58>
 8012892:	ed9f 7a49 	vldr	s14, [pc, #292]	; 80129b8 <atanf+0x168>
 8012896:	ee30 7a07 	vadd.f32	s14, s0, s14
 801289a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801289e:	eeb4 7ae6 	vcmpe.f32	s14, s13
 80128a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80128a6:	dce2      	bgt.n	801286e <atanf+0x1e>
 80128a8:	f04f 33ff 	mov.w	r3, #4294967295
 80128ac:	e013      	b.n	80128d6 <atanf+0x86>
 80128ae:	f000 f8a3 	bl	80129f8 <fabsf>
 80128b2:	4b42      	ldr	r3, [pc, #264]	; (80129bc <atanf+0x16c>)
 80128b4:	429c      	cmp	r4, r3
 80128b6:	dc4f      	bgt.n	8012958 <atanf+0x108>
 80128b8:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 80128bc:	429c      	cmp	r4, r3
 80128be:	dc41      	bgt.n	8012944 <atanf+0xf4>
 80128c0:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 80128c4:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 80128c8:	eea0 7a27 	vfma.f32	s14, s0, s15
 80128cc:	2300      	movs	r3, #0
 80128ce:	ee30 0a27 	vadd.f32	s0, s0, s15
 80128d2:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80128d6:	1c5a      	adds	r2, r3, #1
 80128d8:	ee27 6aa7 	vmul.f32	s12, s15, s15
 80128dc:	ed9f 7a38 	vldr	s14, [pc, #224]	; 80129c0 <atanf+0x170>
 80128e0:	eddf 5a38 	vldr	s11, [pc, #224]	; 80129c4 <atanf+0x174>
 80128e4:	ed9f 5a38 	vldr	s10, [pc, #224]	; 80129c8 <atanf+0x178>
 80128e8:	ee66 6a06 	vmul.f32	s13, s12, s12
 80128ec:	eee6 5a87 	vfma.f32	s11, s13, s14
 80128f0:	ed9f 7a36 	vldr	s14, [pc, #216]	; 80129cc <atanf+0x17c>
 80128f4:	eea5 7aa6 	vfma.f32	s14, s11, s13
 80128f8:	eddf 5a35 	vldr	s11, [pc, #212]	; 80129d0 <atanf+0x180>
 80128fc:	eee7 5a26 	vfma.f32	s11, s14, s13
 8012900:	ed9f 7a34 	vldr	s14, [pc, #208]	; 80129d4 <atanf+0x184>
 8012904:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8012908:	eddf 5a33 	vldr	s11, [pc, #204]	; 80129d8 <atanf+0x188>
 801290c:	eee7 5a26 	vfma.f32	s11, s14, s13
 8012910:	ed9f 7a32 	vldr	s14, [pc, #200]	; 80129dc <atanf+0x18c>
 8012914:	eea6 5a87 	vfma.f32	s10, s13, s14
 8012918:	ed9f 7a31 	vldr	s14, [pc, #196]	; 80129e0 <atanf+0x190>
 801291c:	eea5 7a26 	vfma.f32	s14, s10, s13
 8012920:	ed9f 5a30 	vldr	s10, [pc, #192]	; 80129e4 <atanf+0x194>
 8012924:	eea7 5a26 	vfma.f32	s10, s14, s13
 8012928:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 80129e8 <atanf+0x198>
 801292c:	eea5 7a26 	vfma.f32	s14, s10, s13
 8012930:	ee27 7a26 	vmul.f32	s14, s14, s13
 8012934:	eea5 7a86 	vfma.f32	s14, s11, s12
 8012938:	ee27 7a87 	vmul.f32	s14, s15, s14
 801293c:	d121      	bne.n	8012982 <atanf+0x132>
 801293e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8012942:	e794      	b.n	801286e <atanf+0x1e>
 8012944:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8012948:	ee30 7a67 	vsub.f32	s14, s0, s15
 801294c:	ee30 0a27 	vadd.f32	s0, s0, s15
 8012950:	2301      	movs	r3, #1
 8012952:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8012956:	e7be      	b.n	80128d6 <atanf+0x86>
 8012958:	4b24      	ldr	r3, [pc, #144]	; (80129ec <atanf+0x19c>)
 801295a:	429c      	cmp	r4, r3
 801295c:	dc0b      	bgt.n	8012976 <atanf+0x126>
 801295e:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
 8012962:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8012966:	eea0 7a27 	vfma.f32	s14, s0, s15
 801296a:	2302      	movs	r3, #2
 801296c:	ee70 6a67 	vsub.f32	s13, s0, s15
 8012970:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8012974:	e7af      	b.n	80128d6 <atanf+0x86>
 8012976:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 801297a:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801297e:	2303      	movs	r3, #3
 8012980:	e7a9      	b.n	80128d6 <atanf+0x86>
 8012982:	4a1b      	ldr	r2, [pc, #108]	; (80129f0 <atanf+0x1a0>)
 8012984:	491b      	ldr	r1, [pc, #108]	; (80129f4 <atanf+0x1a4>)
 8012986:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 801298a:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 801298e:	ed93 0a00 	vldr	s0, [r3]
 8012992:	ee37 7a40 	vsub.f32	s14, s14, s0
 8012996:	ed92 0a00 	vldr	s0, [r2]
 801299a:	ee77 7a67 	vsub.f32	s15, s14, s15
 801299e:	2d00      	cmp	r5, #0
 80129a0:	ee70 7a67 	vsub.f32	s15, s0, s15
 80129a4:	bfb8      	it	lt
 80129a6:	eef1 7a67 	vneglt.f32	s15, s15
 80129aa:	e760      	b.n	801286e <atanf+0x1e>
 80129ac:	3fc90fdb 	.word	0x3fc90fdb
 80129b0:	bfc90fdb 	.word	0xbfc90fdb
 80129b4:	3edfffff 	.word	0x3edfffff
 80129b8:	7149f2ca 	.word	0x7149f2ca
 80129bc:	3f97ffff 	.word	0x3f97ffff
 80129c0:	3c8569d7 	.word	0x3c8569d7
 80129c4:	3d4bda59 	.word	0x3d4bda59
 80129c8:	bd6ef16b 	.word	0xbd6ef16b
 80129cc:	3d886b35 	.word	0x3d886b35
 80129d0:	3dba2e6e 	.word	0x3dba2e6e
 80129d4:	3e124925 	.word	0x3e124925
 80129d8:	3eaaaaab 	.word	0x3eaaaaab
 80129dc:	bd15a221 	.word	0xbd15a221
 80129e0:	bd9d8795 	.word	0xbd9d8795
 80129e4:	bde38e38 	.word	0xbde38e38
 80129e8:	be4ccccd 	.word	0xbe4ccccd
 80129ec:	401bffff 	.word	0x401bffff
 80129f0:	08014634 	.word	0x08014634
 80129f4:	08014644 	.word	0x08014644

080129f8 <fabsf>:
 80129f8:	ee10 3a10 	vmov	r3, s0
 80129fc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8012a00:	ee00 3a10 	vmov	s0, r3
 8012a04:	4770      	bx	lr
	...

08012a08 <lrintf>:
 8012a08:	ee10 3a10 	vmov	r3, s0
 8012a0c:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8012a10:	f1a2 007f 	sub.w	r0, r2, #127	; 0x7f
 8012a14:	281e      	cmp	r0, #30
 8012a16:	b082      	sub	sp, #8
 8012a18:	dc2e      	bgt.n	8012a78 <lrintf+0x70>
 8012a1a:	1c41      	adds	r1, r0, #1
 8012a1c:	da02      	bge.n	8012a24 <lrintf+0x1c>
 8012a1e:	2000      	movs	r0, #0
 8012a20:	b002      	add	sp, #8
 8012a22:	4770      	bx	lr
 8012a24:	2816      	cmp	r0, #22
 8012a26:	ea4f 71d3 	mov.w	r1, r3, lsr #31
 8012a2a:	dd09      	ble.n	8012a40 <lrintf+0x38>
 8012a2c:	f3c3 0016 	ubfx	r0, r3, #0, #23
 8012a30:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8012a34:	3a96      	subs	r2, #150	; 0x96
 8012a36:	4090      	lsls	r0, r2
 8012a38:	2900      	cmp	r1, #0
 8012a3a:	d0f1      	beq.n	8012a20 <lrintf+0x18>
 8012a3c:	4240      	negs	r0, r0
 8012a3e:	e7ef      	b.n	8012a20 <lrintf+0x18>
 8012a40:	4b10      	ldr	r3, [pc, #64]	; (8012a84 <lrintf+0x7c>)
 8012a42:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 8012a46:	ed93 7a00 	vldr	s14, [r3]
 8012a4a:	ee37 0a00 	vadd.f32	s0, s14, s0
 8012a4e:	ed8d 0a01 	vstr	s0, [sp, #4]
 8012a52:	eddd 7a01 	vldr	s15, [sp, #4]
 8012a56:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8012a5a:	ee17 3a90 	vmov	r3, s15
 8012a5e:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 8012a62:	d0dc      	beq.n	8012a1e <lrintf+0x16>
 8012a64:	f3c3 0016 	ubfx	r0, r3, #0, #23
 8012a68:	f3c3 53c7 	ubfx	r3, r3, #23, #8
 8012a6c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8012a70:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 8012a74:	40d8      	lsrs	r0, r3
 8012a76:	e7df      	b.n	8012a38 <lrintf+0x30>
 8012a78:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8012a7c:	ee17 0a90 	vmov	r0, s15
 8012a80:	e7ce      	b.n	8012a20 <lrintf+0x18>
 8012a82:	bf00      	nop
 8012a84:	08014654 	.word	0x08014654

08012a88 <asinf>:
 8012a88:	b508      	push	{r3, lr}
 8012a8a:	ed2d 8b02 	vpush	{d8}
 8012a8e:	eeb0 8a40 	vmov.f32	s16, s0
 8012a92:	f000 fa31 	bl	8012ef8 <__ieee754_asinf>
 8012a96:	eeb4 8a48 	vcmp.f32	s16, s16
 8012a9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012a9e:	eef0 8a40 	vmov.f32	s17, s0
 8012aa2:	d615      	bvs.n	8012ad0 <asinf+0x48>
 8012aa4:	eeb0 0a48 	vmov.f32	s0, s16
 8012aa8:	f7ff ffa6 	bl	80129f8 <fabsf>
 8012aac:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8012ab0:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8012ab4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012ab8:	dd0a      	ble.n	8012ad0 <asinf+0x48>
 8012aba:	f7fc febf 	bl	800f83c <__errno>
 8012abe:	ecbd 8b02 	vpop	{d8}
 8012ac2:	2321      	movs	r3, #33	; 0x21
 8012ac4:	6003      	str	r3, [r0, #0]
 8012ac6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8012aca:	4804      	ldr	r0, [pc, #16]	; (8012adc <asinf+0x54>)
 8012acc:	f001 baf2 	b.w	80140b4 <nanf>
 8012ad0:	eeb0 0a68 	vmov.f32	s0, s17
 8012ad4:	ecbd 8b02 	vpop	{d8}
 8012ad8:	bd08      	pop	{r3, pc}
 8012ada:	bf00      	nop
 8012adc:	080144c8 	.word	0x080144c8

08012ae0 <__ieee754_rem_pio2>:
 8012ae0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012ae4:	ed2d 8b02 	vpush	{d8}
 8012ae8:	ec55 4b10 	vmov	r4, r5, d0
 8012aec:	4bca      	ldr	r3, [pc, #808]	; (8012e18 <__ieee754_rem_pio2+0x338>)
 8012aee:	b08b      	sub	sp, #44	; 0x2c
 8012af0:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 8012af4:	4598      	cmp	r8, r3
 8012af6:	4682      	mov	sl, r0
 8012af8:	9502      	str	r5, [sp, #8]
 8012afa:	dc08      	bgt.n	8012b0e <__ieee754_rem_pio2+0x2e>
 8012afc:	2200      	movs	r2, #0
 8012afe:	2300      	movs	r3, #0
 8012b00:	ed80 0b00 	vstr	d0, [r0]
 8012b04:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8012b08:	f04f 0b00 	mov.w	fp, #0
 8012b0c:	e028      	b.n	8012b60 <__ieee754_rem_pio2+0x80>
 8012b0e:	4bc3      	ldr	r3, [pc, #780]	; (8012e1c <__ieee754_rem_pio2+0x33c>)
 8012b10:	4598      	cmp	r8, r3
 8012b12:	dc78      	bgt.n	8012c06 <__ieee754_rem_pio2+0x126>
 8012b14:	9b02      	ldr	r3, [sp, #8]
 8012b16:	4ec2      	ldr	r6, [pc, #776]	; (8012e20 <__ieee754_rem_pio2+0x340>)
 8012b18:	2b00      	cmp	r3, #0
 8012b1a:	ee10 0a10 	vmov	r0, s0
 8012b1e:	a3b0      	add	r3, pc, #704	; (adr r3, 8012de0 <__ieee754_rem_pio2+0x300>)
 8012b20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012b24:	4629      	mov	r1, r5
 8012b26:	dd39      	ble.n	8012b9c <__ieee754_rem_pio2+0xbc>
 8012b28:	f7ed fbce 	bl	80002c8 <__aeabi_dsub>
 8012b2c:	45b0      	cmp	r8, r6
 8012b2e:	4604      	mov	r4, r0
 8012b30:	460d      	mov	r5, r1
 8012b32:	d01b      	beq.n	8012b6c <__ieee754_rem_pio2+0x8c>
 8012b34:	a3ac      	add	r3, pc, #688	; (adr r3, 8012de8 <__ieee754_rem_pio2+0x308>)
 8012b36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012b3a:	f7ed fbc5 	bl	80002c8 <__aeabi_dsub>
 8012b3e:	4602      	mov	r2, r0
 8012b40:	460b      	mov	r3, r1
 8012b42:	e9ca 2300 	strd	r2, r3, [sl]
 8012b46:	4620      	mov	r0, r4
 8012b48:	4629      	mov	r1, r5
 8012b4a:	f7ed fbbd 	bl	80002c8 <__aeabi_dsub>
 8012b4e:	a3a6      	add	r3, pc, #664	; (adr r3, 8012de8 <__ieee754_rem_pio2+0x308>)
 8012b50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012b54:	f7ed fbb8 	bl	80002c8 <__aeabi_dsub>
 8012b58:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8012b5c:	f04f 0b01 	mov.w	fp, #1
 8012b60:	4658      	mov	r0, fp
 8012b62:	b00b      	add	sp, #44	; 0x2c
 8012b64:	ecbd 8b02 	vpop	{d8}
 8012b68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012b6c:	a3a0      	add	r3, pc, #640	; (adr r3, 8012df0 <__ieee754_rem_pio2+0x310>)
 8012b6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012b72:	f7ed fba9 	bl	80002c8 <__aeabi_dsub>
 8012b76:	a3a0      	add	r3, pc, #640	; (adr r3, 8012df8 <__ieee754_rem_pio2+0x318>)
 8012b78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012b7c:	4604      	mov	r4, r0
 8012b7e:	460d      	mov	r5, r1
 8012b80:	f7ed fba2 	bl	80002c8 <__aeabi_dsub>
 8012b84:	4602      	mov	r2, r0
 8012b86:	460b      	mov	r3, r1
 8012b88:	e9ca 2300 	strd	r2, r3, [sl]
 8012b8c:	4620      	mov	r0, r4
 8012b8e:	4629      	mov	r1, r5
 8012b90:	f7ed fb9a 	bl	80002c8 <__aeabi_dsub>
 8012b94:	a398      	add	r3, pc, #608	; (adr r3, 8012df8 <__ieee754_rem_pio2+0x318>)
 8012b96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012b9a:	e7db      	b.n	8012b54 <__ieee754_rem_pio2+0x74>
 8012b9c:	f7ed fb96 	bl	80002cc <__adddf3>
 8012ba0:	45b0      	cmp	r8, r6
 8012ba2:	4604      	mov	r4, r0
 8012ba4:	460d      	mov	r5, r1
 8012ba6:	d016      	beq.n	8012bd6 <__ieee754_rem_pio2+0xf6>
 8012ba8:	a38f      	add	r3, pc, #572	; (adr r3, 8012de8 <__ieee754_rem_pio2+0x308>)
 8012baa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012bae:	f7ed fb8d 	bl	80002cc <__adddf3>
 8012bb2:	4602      	mov	r2, r0
 8012bb4:	460b      	mov	r3, r1
 8012bb6:	e9ca 2300 	strd	r2, r3, [sl]
 8012bba:	4620      	mov	r0, r4
 8012bbc:	4629      	mov	r1, r5
 8012bbe:	f7ed fb83 	bl	80002c8 <__aeabi_dsub>
 8012bc2:	a389      	add	r3, pc, #548	; (adr r3, 8012de8 <__ieee754_rem_pio2+0x308>)
 8012bc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012bc8:	f7ed fb80 	bl	80002cc <__adddf3>
 8012bcc:	f04f 3bff 	mov.w	fp, #4294967295
 8012bd0:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8012bd4:	e7c4      	b.n	8012b60 <__ieee754_rem_pio2+0x80>
 8012bd6:	a386      	add	r3, pc, #536	; (adr r3, 8012df0 <__ieee754_rem_pio2+0x310>)
 8012bd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012bdc:	f7ed fb76 	bl	80002cc <__adddf3>
 8012be0:	a385      	add	r3, pc, #532	; (adr r3, 8012df8 <__ieee754_rem_pio2+0x318>)
 8012be2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012be6:	4604      	mov	r4, r0
 8012be8:	460d      	mov	r5, r1
 8012bea:	f7ed fb6f 	bl	80002cc <__adddf3>
 8012bee:	4602      	mov	r2, r0
 8012bf0:	460b      	mov	r3, r1
 8012bf2:	e9ca 2300 	strd	r2, r3, [sl]
 8012bf6:	4620      	mov	r0, r4
 8012bf8:	4629      	mov	r1, r5
 8012bfa:	f7ed fb65 	bl	80002c8 <__aeabi_dsub>
 8012bfe:	a37e      	add	r3, pc, #504	; (adr r3, 8012df8 <__ieee754_rem_pio2+0x318>)
 8012c00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012c04:	e7e0      	b.n	8012bc8 <__ieee754_rem_pio2+0xe8>
 8012c06:	4b87      	ldr	r3, [pc, #540]	; (8012e24 <__ieee754_rem_pio2+0x344>)
 8012c08:	4598      	cmp	r8, r3
 8012c0a:	f300 80d9 	bgt.w	8012dc0 <__ieee754_rem_pio2+0x2e0>
 8012c0e:	f001 f941 	bl	8013e94 <fabs>
 8012c12:	ec55 4b10 	vmov	r4, r5, d0
 8012c16:	ee10 0a10 	vmov	r0, s0
 8012c1a:	a379      	add	r3, pc, #484	; (adr r3, 8012e00 <__ieee754_rem_pio2+0x320>)
 8012c1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012c20:	4629      	mov	r1, r5
 8012c22:	f7ed fd09 	bl	8000638 <__aeabi_dmul>
 8012c26:	4b80      	ldr	r3, [pc, #512]	; (8012e28 <__ieee754_rem_pio2+0x348>)
 8012c28:	2200      	movs	r2, #0
 8012c2a:	f7ed fb4f 	bl	80002cc <__adddf3>
 8012c2e:	f7ed ffb3 	bl	8000b98 <__aeabi_d2iz>
 8012c32:	4683      	mov	fp, r0
 8012c34:	f7ed fc96 	bl	8000564 <__aeabi_i2d>
 8012c38:	4602      	mov	r2, r0
 8012c3a:	460b      	mov	r3, r1
 8012c3c:	ec43 2b18 	vmov	d8, r2, r3
 8012c40:	a367      	add	r3, pc, #412	; (adr r3, 8012de0 <__ieee754_rem_pio2+0x300>)
 8012c42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012c46:	f7ed fcf7 	bl	8000638 <__aeabi_dmul>
 8012c4a:	4602      	mov	r2, r0
 8012c4c:	460b      	mov	r3, r1
 8012c4e:	4620      	mov	r0, r4
 8012c50:	4629      	mov	r1, r5
 8012c52:	f7ed fb39 	bl	80002c8 <__aeabi_dsub>
 8012c56:	a364      	add	r3, pc, #400	; (adr r3, 8012de8 <__ieee754_rem_pio2+0x308>)
 8012c58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012c5c:	4606      	mov	r6, r0
 8012c5e:	460f      	mov	r7, r1
 8012c60:	ec51 0b18 	vmov	r0, r1, d8
 8012c64:	f7ed fce8 	bl	8000638 <__aeabi_dmul>
 8012c68:	f1bb 0f1f 	cmp.w	fp, #31
 8012c6c:	4604      	mov	r4, r0
 8012c6e:	460d      	mov	r5, r1
 8012c70:	dc0d      	bgt.n	8012c8e <__ieee754_rem_pio2+0x1ae>
 8012c72:	4b6e      	ldr	r3, [pc, #440]	; (8012e2c <__ieee754_rem_pio2+0x34c>)
 8012c74:	f10b 32ff 	add.w	r2, fp, #4294967295
 8012c78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012c7c:	4543      	cmp	r3, r8
 8012c7e:	d006      	beq.n	8012c8e <__ieee754_rem_pio2+0x1ae>
 8012c80:	4622      	mov	r2, r4
 8012c82:	462b      	mov	r3, r5
 8012c84:	4630      	mov	r0, r6
 8012c86:	4639      	mov	r1, r7
 8012c88:	f7ed fb1e 	bl	80002c8 <__aeabi_dsub>
 8012c8c:	e00f      	b.n	8012cae <__ieee754_rem_pio2+0x1ce>
 8012c8e:	462b      	mov	r3, r5
 8012c90:	4622      	mov	r2, r4
 8012c92:	4630      	mov	r0, r6
 8012c94:	4639      	mov	r1, r7
 8012c96:	f7ed fb17 	bl	80002c8 <__aeabi_dsub>
 8012c9a:	ea4f 5328 	mov.w	r3, r8, asr #20
 8012c9e:	9303      	str	r3, [sp, #12]
 8012ca0:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8012ca4:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 8012ca8:	f1b8 0f10 	cmp.w	r8, #16
 8012cac:	dc02      	bgt.n	8012cb4 <__ieee754_rem_pio2+0x1d4>
 8012cae:	e9ca 0100 	strd	r0, r1, [sl]
 8012cb2:	e039      	b.n	8012d28 <__ieee754_rem_pio2+0x248>
 8012cb4:	a34e      	add	r3, pc, #312	; (adr r3, 8012df0 <__ieee754_rem_pio2+0x310>)
 8012cb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012cba:	ec51 0b18 	vmov	r0, r1, d8
 8012cbe:	f7ed fcbb 	bl	8000638 <__aeabi_dmul>
 8012cc2:	4604      	mov	r4, r0
 8012cc4:	460d      	mov	r5, r1
 8012cc6:	4602      	mov	r2, r0
 8012cc8:	460b      	mov	r3, r1
 8012cca:	4630      	mov	r0, r6
 8012ccc:	4639      	mov	r1, r7
 8012cce:	f7ed fafb 	bl	80002c8 <__aeabi_dsub>
 8012cd2:	4602      	mov	r2, r0
 8012cd4:	460b      	mov	r3, r1
 8012cd6:	4680      	mov	r8, r0
 8012cd8:	4689      	mov	r9, r1
 8012cda:	4630      	mov	r0, r6
 8012cdc:	4639      	mov	r1, r7
 8012cde:	f7ed faf3 	bl	80002c8 <__aeabi_dsub>
 8012ce2:	4622      	mov	r2, r4
 8012ce4:	462b      	mov	r3, r5
 8012ce6:	f7ed faef 	bl	80002c8 <__aeabi_dsub>
 8012cea:	a343      	add	r3, pc, #268	; (adr r3, 8012df8 <__ieee754_rem_pio2+0x318>)
 8012cec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012cf0:	4604      	mov	r4, r0
 8012cf2:	460d      	mov	r5, r1
 8012cf4:	ec51 0b18 	vmov	r0, r1, d8
 8012cf8:	f7ed fc9e 	bl	8000638 <__aeabi_dmul>
 8012cfc:	4622      	mov	r2, r4
 8012cfe:	462b      	mov	r3, r5
 8012d00:	f7ed fae2 	bl	80002c8 <__aeabi_dsub>
 8012d04:	4602      	mov	r2, r0
 8012d06:	460b      	mov	r3, r1
 8012d08:	4604      	mov	r4, r0
 8012d0a:	460d      	mov	r5, r1
 8012d0c:	4640      	mov	r0, r8
 8012d0e:	4649      	mov	r1, r9
 8012d10:	f7ed fada 	bl	80002c8 <__aeabi_dsub>
 8012d14:	9a03      	ldr	r2, [sp, #12]
 8012d16:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8012d1a:	1ad3      	subs	r3, r2, r3
 8012d1c:	2b31      	cmp	r3, #49	; 0x31
 8012d1e:	dc24      	bgt.n	8012d6a <__ieee754_rem_pio2+0x28a>
 8012d20:	e9ca 0100 	strd	r0, r1, [sl]
 8012d24:	4646      	mov	r6, r8
 8012d26:	464f      	mov	r7, r9
 8012d28:	e9da 8900 	ldrd	r8, r9, [sl]
 8012d2c:	4630      	mov	r0, r6
 8012d2e:	4642      	mov	r2, r8
 8012d30:	464b      	mov	r3, r9
 8012d32:	4639      	mov	r1, r7
 8012d34:	f7ed fac8 	bl	80002c8 <__aeabi_dsub>
 8012d38:	462b      	mov	r3, r5
 8012d3a:	4622      	mov	r2, r4
 8012d3c:	f7ed fac4 	bl	80002c8 <__aeabi_dsub>
 8012d40:	9b02      	ldr	r3, [sp, #8]
 8012d42:	2b00      	cmp	r3, #0
 8012d44:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8012d48:	f6bf af0a 	bge.w	8012b60 <__ieee754_rem_pio2+0x80>
 8012d4c:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8012d50:	f8ca 3004 	str.w	r3, [sl, #4]
 8012d54:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8012d58:	f8ca 8000 	str.w	r8, [sl]
 8012d5c:	f8ca 0008 	str.w	r0, [sl, #8]
 8012d60:	f8ca 300c 	str.w	r3, [sl, #12]
 8012d64:	f1cb 0b00 	rsb	fp, fp, #0
 8012d68:	e6fa      	b.n	8012b60 <__ieee754_rem_pio2+0x80>
 8012d6a:	a327      	add	r3, pc, #156	; (adr r3, 8012e08 <__ieee754_rem_pio2+0x328>)
 8012d6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012d70:	ec51 0b18 	vmov	r0, r1, d8
 8012d74:	f7ed fc60 	bl	8000638 <__aeabi_dmul>
 8012d78:	4604      	mov	r4, r0
 8012d7a:	460d      	mov	r5, r1
 8012d7c:	4602      	mov	r2, r0
 8012d7e:	460b      	mov	r3, r1
 8012d80:	4640      	mov	r0, r8
 8012d82:	4649      	mov	r1, r9
 8012d84:	f7ed faa0 	bl	80002c8 <__aeabi_dsub>
 8012d88:	4602      	mov	r2, r0
 8012d8a:	460b      	mov	r3, r1
 8012d8c:	4606      	mov	r6, r0
 8012d8e:	460f      	mov	r7, r1
 8012d90:	4640      	mov	r0, r8
 8012d92:	4649      	mov	r1, r9
 8012d94:	f7ed fa98 	bl	80002c8 <__aeabi_dsub>
 8012d98:	4622      	mov	r2, r4
 8012d9a:	462b      	mov	r3, r5
 8012d9c:	f7ed fa94 	bl	80002c8 <__aeabi_dsub>
 8012da0:	a31b      	add	r3, pc, #108	; (adr r3, 8012e10 <__ieee754_rem_pio2+0x330>)
 8012da2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012da6:	4604      	mov	r4, r0
 8012da8:	460d      	mov	r5, r1
 8012daa:	ec51 0b18 	vmov	r0, r1, d8
 8012dae:	f7ed fc43 	bl	8000638 <__aeabi_dmul>
 8012db2:	4622      	mov	r2, r4
 8012db4:	462b      	mov	r3, r5
 8012db6:	f7ed fa87 	bl	80002c8 <__aeabi_dsub>
 8012dba:	4604      	mov	r4, r0
 8012dbc:	460d      	mov	r5, r1
 8012dbe:	e75f      	b.n	8012c80 <__ieee754_rem_pio2+0x1a0>
 8012dc0:	4b1b      	ldr	r3, [pc, #108]	; (8012e30 <__ieee754_rem_pio2+0x350>)
 8012dc2:	4598      	cmp	r8, r3
 8012dc4:	dd36      	ble.n	8012e34 <__ieee754_rem_pio2+0x354>
 8012dc6:	ee10 2a10 	vmov	r2, s0
 8012dca:	462b      	mov	r3, r5
 8012dcc:	4620      	mov	r0, r4
 8012dce:	4629      	mov	r1, r5
 8012dd0:	f7ed fa7a 	bl	80002c8 <__aeabi_dsub>
 8012dd4:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8012dd8:	e9ca 0100 	strd	r0, r1, [sl]
 8012ddc:	e694      	b.n	8012b08 <__ieee754_rem_pio2+0x28>
 8012dde:	bf00      	nop
 8012de0:	54400000 	.word	0x54400000
 8012de4:	3ff921fb 	.word	0x3ff921fb
 8012de8:	1a626331 	.word	0x1a626331
 8012dec:	3dd0b461 	.word	0x3dd0b461
 8012df0:	1a600000 	.word	0x1a600000
 8012df4:	3dd0b461 	.word	0x3dd0b461
 8012df8:	2e037073 	.word	0x2e037073
 8012dfc:	3ba3198a 	.word	0x3ba3198a
 8012e00:	6dc9c883 	.word	0x6dc9c883
 8012e04:	3fe45f30 	.word	0x3fe45f30
 8012e08:	2e000000 	.word	0x2e000000
 8012e0c:	3ba3198a 	.word	0x3ba3198a
 8012e10:	252049c1 	.word	0x252049c1
 8012e14:	397b839a 	.word	0x397b839a
 8012e18:	3fe921fb 	.word	0x3fe921fb
 8012e1c:	4002d97b 	.word	0x4002d97b
 8012e20:	3ff921fb 	.word	0x3ff921fb
 8012e24:	413921fb 	.word	0x413921fb
 8012e28:	3fe00000 	.word	0x3fe00000
 8012e2c:	0801465c 	.word	0x0801465c
 8012e30:	7fefffff 	.word	0x7fefffff
 8012e34:	ea4f 5428 	mov.w	r4, r8, asr #20
 8012e38:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 8012e3c:	ee10 0a10 	vmov	r0, s0
 8012e40:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 8012e44:	ee10 6a10 	vmov	r6, s0
 8012e48:	460f      	mov	r7, r1
 8012e4a:	f7ed fea5 	bl	8000b98 <__aeabi_d2iz>
 8012e4e:	f7ed fb89 	bl	8000564 <__aeabi_i2d>
 8012e52:	4602      	mov	r2, r0
 8012e54:	460b      	mov	r3, r1
 8012e56:	4630      	mov	r0, r6
 8012e58:	4639      	mov	r1, r7
 8012e5a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8012e5e:	f7ed fa33 	bl	80002c8 <__aeabi_dsub>
 8012e62:	4b23      	ldr	r3, [pc, #140]	; (8012ef0 <__ieee754_rem_pio2+0x410>)
 8012e64:	2200      	movs	r2, #0
 8012e66:	f7ed fbe7 	bl	8000638 <__aeabi_dmul>
 8012e6a:	460f      	mov	r7, r1
 8012e6c:	4606      	mov	r6, r0
 8012e6e:	f7ed fe93 	bl	8000b98 <__aeabi_d2iz>
 8012e72:	f7ed fb77 	bl	8000564 <__aeabi_i2d>
 8012e76:	4602      	mov	r2, r0
 8012e78:	460b      	mov	r3, r1
 8012e7a:	4630      	mov	r0, r6
 8012e7c:	4639      	mov	r1, r7
 8012e7e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8012e82:	f7ed fa21 	bl	80002c8 <__aeabi_dsub>
 8012e86:	4b1a      	ldr	r3, [pc, #104]	; (8012ef0 <__ieee754_rem_pio2+0x410>)
 8012e88:	2200      	movs	r2, #0
 8012e8a:	f7ed fbd5 	bl	8000638 <__aeabi_dmul>
 8012e8e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8012e92:	ad04      	add	r5, sp, #16
 8012e94:	f04f 0803 	mov.w	r8, #3
 8012e98:	46a9      	mov	r9, r5
 8012e9a:	2600      	movs	r6, #0
 8012e9c:	2700      	movs	r7, #0
 8012e9e:	4632      	mov	r2, r6
 8012ea0:	463b      	mov	r3, r7
 8012ea2:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 8012ea6:	46c3      	mov	fp, r8
 8012ea8:	3d08      	subs	r5, #8
 8012eaa:	f108 38ff 	add.w	r8, r8, #4294967295
 8012eae:	f7ed fe2b 	bl	8000b08 <__aeabi_dcmpeq>
 8012eb2:	2800      	cmp	r0, #0
 8012eb4:	d1f3      	bne.n	8012e9e <__ieee754_rem_pio2+0x3be>
 8012eb6:	4b0f      	ldr	r3, [pc, #60]	; (8012ef4 <__ieee754_rem_pio2+0x414>)
 8012eb8:	9301      	str	r3, [sp, #4]
 8012eba:	2302      	movs	r3, #2
 8012ebc:	9300      	str	r3, [sp, #0]
 8012ebe:	4622      	mov	r2, r4
 8012ec0:	465b      	mov	r3, fp
 8012ec2:	4651      	mov	r1, sl
 8012ec4:	4648      	mov	r0, r9
 8012ec6:	f000 f9cb 	bl	8013260 <__kernel_rem_pio2>
 8012eca:	9b02      	ldr	r3, [sp, #8]
 8012ecc:	2b00      	cmp	r3, #0
 8012ece:	4683      	mov	fp, r0
 8012ed0:	f6bf ae46 	bge.w	8012b60 <__ieee754_rem_pio2+0x80>
 8012ed4:	e9da 2100 	ldrd	r2, r1, [sl]
 8012ed8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8012edc:	e9ca 2300 	strd	r2, r3, [sl]
 8012ee0:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 8012ee4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8012ee8:	e9ca 2302 	strd	r2, r3, [sl, #8]
 8012eec:	e73a      	b.n	8012d64 <__ieee754_rem_pio2+0x284>
 8012eee:	bf00      	nop
 8012ef0:	41700000 	.word	0x41700000
 8012ef4:	080146dc 	.word	0x080146dc

08012ef8 <__ieee754_asinf>:
 8012ef8:	b538      	push	{r3, r4, r5, lr}
 8012efa:	ee10 5a10 	vmov	r5, s0
 8012efe:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 8012f02:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 8012f06:	ed2d 8b04 	vpush	{d8-d9}
 8012f0a:	d10c      	bne.n	8012f26 <__ieee754_asinf+0x2e>
 8012f0c:	eddf 7a5d 	vldr	s15, [pc, #372]	; 8013084 <__ieee754_asinf+0x18c>
 8012f10:	ed9f 7a5d 	vldr	s14, [pc, #372]	; 8013088 <__ieee754_asinf+0x190>
 8012f14:	ee60 7a27 	vmul.f32	s15, s0, s15
 8012f18:	eee0 7a07 	vfma.f32	s15, s0, s14
 8012f1c:	eeb0 0a67 	vmov.f32	s0, s15
 8012f20:	ecbd 8b04 	vpop	{d8-d9}
 8012f24:	bd38      	pop	{r3, r4, r5, pc}
 8012f26:	dd04      	ble.n	8012f32 <__ieee754_asinf+0x3a>
 8012f28:	ee70 7a40 	vsub.f32	s15, s0, s0
 8012f2c:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 8012f30:	e7f6      	b.n	8012f20 <__ieee754_asinf+0x28>
 8012f32:	f1b4 5f7c 	cmp.w	r4, #1056964608	; 0x3f000000
 8012f36:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 8012f3a:	da0b      	bge.n	8012f54 <__ieee754_asinf+0x5c>
 8012f3c:	f1b4 5f48 	cmp.w	r4, #838860800	; 0x32000000
 8012f40:	da52      	bge.n	8012fe8 <__ieee754_asinf+0xf0>
 8012f42:	eddf 7a52 	vldr	s15, [pc, #328]	; 801308c <__ieee754_asinf+0x194>
 8012f46:	ee70 7a27 	vadd.f32	s15, s0, s15
 8012f4a:	eef4 7ae8 	vcmpe.f32	s15, s17
 8012f4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012f52:	dce5      	bgt.n	8012f20 <__ieee754_asinf+0x28>
 8012f54:	f7ff fd50 	bl	80129f8 <fabsf>
 8012f58:	ee38 0ac0 	vsub.f32	s0, s17, s0
 8012f5c:	eeb6 8a00 	vmov.f32	s16, #96	; 0x3f000000  0.5
 8012f60:	ee20 8a08 	vmul.f32	s16, s0, s16
 8012f64:	eddf 7a4a 	vldr	s15, [pc, #296]	; 8013090 <__ieee754_asinf+0x198>
 8012f68:	ed9f 7a4a 	vldr	s14, [pc, #296]	; 8013094 <__ieee754_asinf+0x19c>
 8012f6c:	ed9f 9a4a 	vldr	s18, [pc, #296]	; 8013098 <__ieee754_asinf+0x1a0>
 8012f70:	eea8 7a27 	vfma.f32	s14, s16, s15
 8012f74:	eddf 7a49 	vldr	s15, [pc, #292]	; 801309c <__ieee754_asinf+0x1a4>
 8012f78:	eee7 7a08 	vfma.f32	s15, s14, s16
 8012f7c:	ed9f 7a48 	vldr	s14, [pc, #288]	; 80130a0 <__ieee754_asinf+0x1a8>
 8012f80:	eea7 7a88 	vfma.f32	s14, s15, s16
 8012f84:	eddf 7a47 	vldr	s15, [pc, #284]	; 80130a4 <__ieee754_asinf+0x1ac>
 8012f88:	eee7 7a08 	vfma.f32	s15, s14, s16
 8012f8c:	ed9f 7a46 	vldr	s14, [pc, #280]	; 80130a8 <__ieee754_asinf+0x1b0>
 8012f90:	eea7 9a88 	vfma.f32	s18, s15, s16
 8012f94:	eddf 7a45 	vldr	s15, [pc, #276]	; 80130ac <__ieee754_asinf+0x1b4>
 8012f98:	eee8 7a07 	vfma.f32	s15, s16, s14
 8012f9c:	ed9f 7a44 	vldr	s14, [pc, #272]	; 80130b0 <__ieee754_asinf+0x1b8>
 8012fa0:	eea7 7a88 	vfma.f32	s14, s15, s16
 8012fa4:	eddf 7a43 	vldr	s15, [pc, #268]	; 80130b4 <__ieee754_asinf+0x1bc>
 8012fa8:	eee7 7a08 	vfma.f32	s15, s14, s16
 8012fac:	eeb0 0a48 	vmov.f32	s0, s16
 8012fb0:	eee7 8a88 	vfma.f32	s17, s15, s16
 8012fb4:	f000 f886 	bl	80130c4 <__ieee754_sqrtf>
 8012fb8:	4b3f      	ldr	r3, [pc, #252]	; (80130b8 <__ieee754_asinf+0x1c0>)
 8012fba:	ee29 9a08 	vmul.f32	s18, s18, s16
 8012fbe:	429c      	cmp	r4, r3
 8012fc0:	ee89 6a28 	vdiv.f32	s12, s18, s17
 8012fc4:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8012fc8:	dd3d      	ble.n	8013046 <__ieee754_asinf+0x14e>
 8012fca:	eea0 0a06 	vfma.f32	s0, s0, s12
 8012fce:	eddf 7a3b 	vldr	s15, [pc, #236]	; 80130bc <__ieee754_asinf+0x1c4>
 8012fd2:	eee0 7a26 	vfma.f32	s15, s0, s13
 8012fd6:	ed9f 0a2c 	vldr	s0, [pc, #176]	; 8013088 <__ieee754_asinf+0x190>
 8012fda:	ee30 0a67 	vsub.f32	s0, s0, s15
 8012fde:	2d00      	cmp	r5, #0
 8012fe0:	bfd8      	it	le
 8012fe2:	eeb1 0a40 	vnegle.f32	s0, s0
 8012fe6:	e79b      	b.n	8012f20 <__ieee754_asinf+0x28>
 8012fe8:	ee60 7a00 	vmul.f32	s15, s0, s0
 8012fec:	eddf 6a28 	vldr	s13, [pc, #160]	; 8013090 <__ieee754_asinf+0x198>
 8012ff0:	ed9f 7a28 	vldr	s14, [pc, #160]	; 8013094 <__ieee754_asinf+0x19c>
 8012ff4:	ed9f 6a2c 	vldr	s12, [pc, #176]	; 80130a8 <__ieee754_asinf+0x1b0>
 8012ff8:	eea7 7aa6 	vfma.f32	s14, s15, s13
 8012ffc:	eddf 6a27 	vldr	s13, [pc, #156]	; 801309c <__ieee754_asinf+0x1a4>
 8013000:	eee7 6a27 	vfma.f32	s13, s14, s15
 8013004:	ed9f 7a26 	vldr	s14, [pc, #152]	; 80130a0 <__ieee754_asinf+0x1a8>
 8013008:	eea6 7aa7 	vfma.f32	s14, s13, s15
 801300c:	eddf 6a25 	vldr	s13, [pc, #148]	; 80130a4 <__ieee754_asinf+0x1ac>
 8013010:	eee7 6a27 	vfma.f32	s13, s14, s15
 8013014:	ed9f 7a20 	vldr	s14, [pc, #128]	; 8013098 <__ieee754_asinf+0x1a0>
 8013018:	eea6 7aa7 	vfma.f32	s14, s13, s15
 801301c:	eddf 6a23 	vldr	s13, [pc, #140]	; 80130ac <__ieee754_asinf+0x1b4>
 8013020:	eee7 6a86 	vfma.f32	s13, s15, s12
 8013024:	ed9f 6a22 	vldr	s12, [pc, #136]	; 80130b0 <__ieee754_asinf+0x1b8>
 8013028:	eea6 6aa7 	vfma.f32	s12, s13, s15
 801302c:	eddf 6a21 	vldr	s13, [pc, #132]	; 80130b4 <__ieee754_asinf+0x1bc>
 8013030:	eee6 6a27 	vfma.f32	s13, s12, s15
 8013034:	ee27 7a27 	vmul.f32	s14, s14, s15
 8013038:	eee6 8aa7 	vfma.f32	s17, s13, s15
 801303c:	eec7 7a28 	vdiv.f32	s15, s14, s17
 8013040:	eea0 0a27 	vfma.f32	s0, s0, s15
 8013044:	e76c      	b.n	8012f20 <__ieee754_asinf+0x28>
 8013046:	ee10 3a10 	vmov	r3, s0
 801304a:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 801304e:	f023 030f 	bic.w	r3, r3, #15
 8013052:	ee07 3a10 	vmov	s14, r3
 8013056:	eea7 8a47 	vfms.f32	s16, s14, s14
 801305a:	ee70 7a07 	vadd.f32	s15, s0, s14
 801305e:	ee30 0a00 	vadd.f32	s0, s0, s0
 8013062:	eec8 5a27 	vdiv.f32	s11, s16, s15
 8013066:	eddf 7a07 	vldr	s15, [pc, #28]	; 8013084 <__ieee754_asinf+0x18c>
 801306a:	eee5 7ae6 	vfms.f32	s15, s11, s13
 801306e:	eed0 7a06 	vfnms.f32	s15, s0, s12
 8013072:	ed9f 0a13 	vldr	s0, [pc, #76]	; 80130c0 <__ieee754_asinf+0x1c8>
 8013076:	eeb0 6a40 	vmov.f32	s12, s0
 801307a:	eea7 6a66 	vfms.f32	s12, s14, s13
 801307e:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8013082:	e7aa      	b.n	8012fda <__ieee754_asinf+0xe2>
 8013084:	b33bbd2e 	.word	0xb33bbd2e
 8013088:	3fc90fdb 	.word	0x3fc90fdb
 801308c:	7149f2ca 	.word	0x7149f2ca
 8013090:	3811ef08 	.word	0x3811ef08
 8013094:	3a4f7f04 	.word	0x3a4f7f04
 8013098:	3e2aaaab 	.word	0x3e2aaaab
 801309c:	bd241146 	.word	0xbd241146
 80130a0:	3e4e0aa8 	.word	0x3e4e0aa8
 80130a4:	bea6b090 	.word	0xbea6b090
 80130a8:	3d9dc62e 	.word	0x3d9dc62e
 80130ac:	bf303361 	.word	0xbf303361
 80130b0:	4001572d 	.word	0x4001572d
 80130b4:	c019d139 	.word	0xc019d139
 80130b8:	3f799999 	.word	0x3f799999
 80130bc:	333bbd2e 	.word	0x333bbd2e
 80130c0:	3f490fdb 	.word	0x3f490fdb

080130c4 <__ieee754_sqrtf>:
 80130c4:	eeb1 0ac0 	vsqrt.f32	s0, s0
 80130c8:	4770      	bx	lr
 80130ca:	0000      	movs	r0, r0
 80130cc:	0000      	movs	r0, r0
	...

080130d0 <__kernel_cos>:
 80130d0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80130d4:	ec57 6b10 	vmov	r6, r7, d0
 80130d8:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 80130dc:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 80130e0:	ed8d 1b00 	vstr	d1, [sp]
 80130e4:	da07      	bge.n	80130f6 <__kernel_cos+0x26>
 80130e6:	ee10 0a10 	vmov	r0, s0
 80130ea:	4639      	mov	r1, r7
 80130ec:	f7ed fd54 	bl	8000b98 <__aeabi_d2iz>
 80130f0:	2800      	cmp	r0, #0
 80130f2:	f000 8088 	beq.w	8013206 <__kernel_cos+0x136>
 80130f6:	4632      	mov	r2, r6
 80130f8:	463b      	mov	r3, r7
 80130fa:	4630      	mov	r0, r6
 80130fc:	4639      	mov	r1, r7
 80130fe:	f7ed fa9b 	bl	8000638 <__aeabi_dmul>
 8013102:	4b51      	ldr	r3, [pc, #324]	; (8013248 <__kernel_cos+0x178>)
 8013104:	2200      	movs	r2, #0
 8013106:	4604      	mov	r4, r0
 8013108:	460d      	mov	r5, r1
 801310a:	f7ed fa95 	bl	8000638 <__aeabi_dmul>
 801310e:	a340      	add	r3, pc, #256	; (adr r3, 8013210 <__kernel_cos+0x140>)
 8013110:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013114:	4682      	mov	sl, r0
 8013116:	468b      	mov	fp, r1
 8013118:	4620      	mov	r0, r4
 801311a:	4629      	mov	r1, r5
 801311c:	f7ed fa8c 	bl	8000638 <__aeabi_dmul>
 8013120:	a33d      	add	r3, pc, #244	; (adr r3, 8013218 <__kernel_cos+0x148>)
 8013122:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013126:	f7ed f8d1 	bl	80002cc <__adddf3>
 801312a:	4622      	mov	r2, r4
 801312c:	462b      	mov	r3, r5
 801312e:	f7ed fa83 	bl	8000638 <__aeabi_dmul>
 8013132:	a33b      	add	r3, pc, #236	; (adr r3, 8013220 <__kernel_cos+0x150>)
 8013134:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013138:	f7ed f8c6 	bl	80002c8 <__aeabi_dsub>
 801313c:	4622      	mov	r2, r4
 801313e:	462b      	mov	r3, r5
 8013140:	f7ed fa7a 	bl	8000638 <__aeabi_dmul>
 8013144:	a338      	add	r3, pc, #224	; (adr r3, 8013228 <__kernel_cos+0x158>)
 8013146:	e9d3 2300 	ldrd	r2, r3, [r3]
 801314a:	f7ed f8bf 	bl	80002cc <__adddf3>
 801314e:	4622      	mov	r2, r4
 8013150:	462b      	mov	r3, r5
 8013152:	f7ed fa71 	bl	8000638 <__aeabi_dmul>
 8013156:	a336      	add	r3, pc, #216	; (adr r3, 8013230 <__kernel_cos+0x160>)
 8013158:	e9d3 2300 	ldrd	r2, r3, [r3]
 801315c:	f7ed f8b4 	bl	80002c8 <__aeabi_dsub>
 8013160:	4622      	mov	r2, r4
 8013162:	462b      	mov	r3, r5
 8013164:	f7ed fa68 	bl	8000638 <__aeabi_dmul>
 8013168:	a333      	add	r3, pc, #204	; (adr r3, 8013238 <__kernel_cos+0x168>)
 801316a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801316e:	f7ed f8ad 	bl	80002cc <__adddf3>
 8013172:	4622      	mov	r2, r4
 8013174:	462b      	mov	r3, r5
 8013176:	f7ed fa5f 	bl	8000638 <__aeabi_dmul>
 801317a:	4622      	mov	r2, r4
 801317c:	462b      	mov	r3, r5
 801317e:	f7ed fa5b 	bl	8000638 <__aeabi_dmul>
 8013182:	e9dd 2300 	ldrd	r2, r3, [sp]
 8013186:	4604      	mov	r4, r0
 8013188:	460d      	mov	r5, r1
 801318a:	4630      	mov	r0, r6
 801318c:	4639      	mov	r1, r7
 801318e:	f7ed fa53 	bl	8000638 <__aeabi_dmul>
 8013192:	460b      	mov	r3, r1
 8013194:	4602      	mov	r2, r0
 8013196:	4629      	mov	r1, r5
 8013198:	4620      	mov	r0, r4
 801319a:	f7ed f895 	bl	80002c8 <__aeabi_dsub>
 801319e:	4b2b      	ldr	r3, [pc, #172]	; (801324c <__kernel_cos+0x17c>)
 80131a0:	4598      	cmp	r8, r3
 80131a2:	4606      	mov	r6, r0
 80131a4:	460f      	mov	r7, r1
 80131a6:	dc10      	bgt.n	80131ca <__kernel_cos+0xfa>
 80131a8:	4602      	mov	r2, r0
 80131aa:	460b      	mov	r3, r1
 80131ac:	4650      	mov	r0, sl
 80131ae:	4659      	mov	r1, fp
 80131b0:	f7ed f88a 	bl	80002c8 <__aeabi_dsub>
 80131b4:	460b      	mov	r3, r1
 80131b6:	4926      	ldr	r1, [pc, #152]	; (8013250 <__kernel_cos+0x180>)
 80131b8:	4602      	mov	r2, r0
 80131ba:	2000      	movs	r0, #0
 80131bc:	f7ed f884 	bl	80002c8 <__aeabi_dsub>
 80131c0:	ec41 0b10 	vmov	d0, r0, r1
 80131c4:	b003      	add	sp, #12
 80131c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80131ca:	4b22      	ldr	r3, [pc, #136]	; (8013254 <__kernel_cos+0x184>)
 80131cc:	4920      	ldr	r1, [pc, #128]	; (8013250 <__kernel_cos+0x180>)
 80131ce:	4598      	cmp	r8, r3
 80131d0:	bfcc      	ite	gt
 80131d2:	4d21      	ldrgt	r5, [pc, #132]	; (8013258 <__kernel_cos+0x188>)
 80131d4:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 80131d8:	2400      	movs	r4, #0
 80131da:	4622      	mov	r2, r4
 80131dc:	462b      	mov	r3, r5
 80131de:	2000      	movs	r0, #0
 80131e0:	f7ed f872 	bl	80002c8 <__aeabi_dsub>
 80131e4:	4622      	mov	r2, r4
 80131e6:	4680      	mov	r8, r0
 80131e8:	4689      	mov	r9, r1
 80131ea:	462b      	mov	r3, r5
 80131ec:	4650      	mov	r0, sl
 80131ee:	4659      	mov	r1, fp
 80131f0:	f7ed f86a 	bl	80002c8 <__aeabi_dsub>
 80131f4:	4632      	mov	r2, r6
 80131f6:	463b      	mov	r3, r7
 80131f8:	f7ed f866 	bl	80002c8 <__aeabi_dsub>
 80131fc:	4602      	mov	r2, r0
 80131fe:	460b      	mov	r3, r1
 8013200:	4640      	mov	r0, r8
 8013202:	4649      	mov	r1, r9
 8013204:	e7da      	b.n	80131bc <__kernel_cos+0xec>
 8013206:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 8013240 <__kernel_cos+0x170>
 801320a:	e7db      	b.n	80131c4 <__kernel_cos+0xf4>
 801320c:	f3af 8000 	nop.w
 8013210:	be8838d4 	.word	0xbe8838d4
 8013214:	bda8fae9 	.word	0xbda8fae9
 8013218:	bdb4b1c4 	.word	0xbdb4b1c4
 801321c:	3e21ee9e 	.word	0x3e21ee9e
 8013220:	809c52ad 	.word	0x809c52ad
 8013224:	3e927e4f 	.word	0x3e927e4f
 8013228:	19cb1590 	.word	0x19cb1590
 801322c:	3efa01a0 	.word	0x3efa01a0
 8013230:	16c15177 	.word	0x16c15177
 8013234:	3f56c16c 	.word	0x3f56c16c
 8013238:	5555554c 	.word	0x5555554c
 801323c:	3fa55555 	.word	0x3fa55555
 8013240:	00000000 	.word	0x00000000
 8013244:	3ff00000 	.word	0x3ff00000
 8013248:	3fe00000 	.word	0x3fe00000
 801324c:	3fd33332 	.word	0x3fd33332
 8013250:	3ff00000 	.word	0x3ff00000
 8013254:	3fe90000 	.word	0x3fe90000
 8013258:	3fd20000 	.word	0x3fd20000
 801325c:	00000000 	.word	0x00000000

08013260 <__kernel_rem_pio2>:
 8013260:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013264:	ed2d 8b02 	vpush	{d8}
 8013268:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 801326c:	f112 0f14 	cmn.w	r2, #20
 8013270:	9308      	str	r3, [sp, #32]
 8013272:	9101      	str	r1, [sp, #4]
 8013274:	4bc4      	ldr	r3, [pc, #784]	; (8013588 <__kernel_rem_pio2+0x328>)
 8013276:	99a6      	ldr	r1, [sp, #664]	; 0x298
 8013278:	900b      	str	r0, [sp, #44]	; 0x2c
 801327a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801327e:	9302      	str	r3, [sp, #8]
 8013280:	9b08      	ldr	r3, [sp, #32]
 8013282:	f103 33ff 	add.w	r3, r3, #4294967295
 8013286:	bfa8      	it	ge
 8013288:	1ed4      	subge	r4, r2, #3
 801328a:	9306      	str	r3, [sp, #24]
 801328c:	bfb2      	itee	lt
 801328e:	2400      	movlt	r4, #0
 8013290:	2318      	movge	r3, #24
 8013292:	fb94 f4f3 	sdivge	r4, r4, r3
 8013296:	f06f 0317 	mvn.w	r3, #23
 801329a:	fb04 3303 	mla	r3, r4, r3, r3
 801329e:	eb03 0a02 	add.w	sl, r3, r2
 80132a2:	9b02      	ldr	r3, [sp, #8]
 80132a4:	9a06      	ldr	r2, [sp, #24]
 80132a6:	ed9f 8bb4 	vldr	d8, [pc, #720]	; 8013578 <__kernel_rem_pio2+0x318>
 80132aa:	eb03 0802 	add.w	r8, r3, r2
 80132ae:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 80132b0:	1aa7      	subs	r7, r4, r2
 80132b2:	ae22      	add	r6, sp, #136	; 0x88
 80132b4:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 80132b8:	2500      	movs	r5, #0
 80132ba:	4545      	cmp	r5, r8
 80132bc:	dd13      	ble.n	80132e6 <__kernel_rem_pio2+0x86>
 80132be:	9b08      	ldr	r3, [sp, #32]
 80132c0:	ed9f 8bad 	vldr	d8, [pc, #692]	; 8013578 <__kernel_rem_pio2+0x318>
 80132c4:	aa22      	add	r2, sp, #136	; 0x88
 80132c6:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 80132ca:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 80132ce:	f04f 0800 	mov.w	r8, #0
 80132d2:	9b02      	ldr	r3, [sp, #8]
 80132d4:	4598      	cmp	r8, r3
 80132d6:	dc2f      	bgt.n	8013338 <__kernel_rem_pio2+0xd8>
 80132d8:	ed8d 8b04 	vstr	d8, [sp, #16]
 80132dc:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 80132e0:	462f      	mov	r7, r5
 80132e2:	2600      	movs	r6, #0
 80132e4:	e01b      	b.n	801331e <__kernel_rem_pio2+0xbe>
 80132e6:	42ef      	cmn	r7, r5
 80132e8:	d407      	bmi.n	80132fa <__kernel_rem_pio2+0x9a>
 80132ea:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 80132ee:	f7ed f939 	bl	8000564 <__aeabi_i2d>
 80132f2:	e8e6 0102 	strd	r0, r1, [r6], #8
 80132f6:	3501      	adds	r5, #1
 80132f8:	e7df      	b.n	80132ba <__kernel_rem_pio2+0x5a>
 80132fa:	ec51 0b18 	vmov	r0, r1, d8
 80132fe:	e7f8      	b.n	80132f2 <__kernel_rem_pio2+0x92>
 8013300:	e9d7 2300 	ldrd	r2, r3, [r7]
 8013304:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8013308:	f7ed f996 	bl	8000638 <__aeabi_dmul>
 801330c:	4602      	mov	r2, r0
 801330e:	460b      	mov	r3, r1
 8013310:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8013314:	f7ec ffda 	bl	80002cc <__adddf3>
 8013318:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801331c:	3601      	adds	r6, #1
 801331e:	9b06      	ldr	r3, [sp, #24]
 8013320:	429e      	cmp	r6, r3
 8013322:	f1a7 0708 	sub.w	r7, r7, #8
 8013326:	ddeb      	ble.n	8013300 <__kernel_rem_pio2+0xa0>
 8013328:	ed9d 7b04 	vldr	d7, [sp, #16]
 801332c:	f108 0801 	add.w	r8, r8, #1
 8013330:	ecab 7b02 	vstmia	fp!, {d7}
 8013334:	3508      	adds	r5, #8
 8013336:	e7cc      	b.n	80132d2 <__kernel_rem_pio2+0x72>
 8013338:	9b02      	ldr	r3, [sp, #8]
 801333a:	aa0e      	add	r2, sp, #56	; 0x38
 801333c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8013340:	930d      	str	r3, [sp, #52]	; 0x34
 8013342:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8013344:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8013348:	9c02      	ldr	r4, [sp, #8]
 801334a:	930c      	str	r3, [sp, #48]	; 0x30
 801334c:	00e3      	lsls	r3, r4, #3
 801334e:	930a      	str	r3, [sp, #40]	; 0x28
 8013350:	ab9a      	add	r3, sp, #616	; 0x268
 8013352:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8013356:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 801335a:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 801335e:	ab72      	add	r3, sp, #456	; 0x1c8
 8013360:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 8013364:	46c3      	mov	fp, r8
 8013366:	46a1      	mov	r9, r4
 8013368:	f1b9 0f00 	cmp.w	r9, #0
 801336c:	f1a5 0508 	sub.w	r5, r5, #8
 8013370:	dc77      	bgt.n	8013462 <__kernel_rem_pio2+0x202>
 8013372:	ec47 6b10 	vmov	d0, r6, r7
 8013376:	4650      	mov	r0, sl
 8013378:	f000 fe16 	bl	8013fa8 <scalbn>
 801337c:	ec57 6b10 	vmov	r6, r7, d0
 8013380:	2200      	movs	r2, #0
 8013382:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8013386:	ee10 0a10 	vmov	r0, s0
 801338a:	4639      	mov	r1, r7
 801338c:	f7ed f954 	bl	8000638 <__aeabi_dmul>
 8013390:	ec41 0b10 	vmov	d0, r0, r1
 8013394:	f000 fd88 	bl	8013ea8 <floor>
 8013398:	4b7c      	ldr	r3, [pc, #496]	; (801358c <__kernel_rem_pio2+0x32c>)
 801339a:	ec51 0b10 	vmov	r0, r1, d0
 801339e:	2200      	movs	r2, #0
 80133a0:	f7ed f94a 	bl	8000638 <__aeabi_dmul>
 80133a4:	4602      	mov	r2, r0
 80133a6:	460b      	mov	r3, r1
 80133a8:	4630      	mov	r0, r6
 80133aa:	4639      	mov	r1, r7
 80133ac:	f7ec ff8c 	bl	80002c8 <__aeabi_dsub>
 80133b0:	460f      	mov	r7, r1
 80133b2:	4606      	mov	r6, r0
 80133b4:	f7ed fbf0 	bl	8000b98 <__aeabi_d2iz>
 80133b8:	9004      	str	r0, [sp, #16]
 80133ba:	f7ed f8d3 	bl	8000564 <__aeabi_i2d>
 80133be:	4602      	mov	r2, r0
 80133c0:	460b      	mov	r3, r1
 80133c2:	4630      	mov	r0, r6
 80133c4:	4639      	mov	r1, r7
 80133c6:	f7ec ff7f 	bl	80002c8 <__aeabi_dsub>
 80133ca:	f1ba 0f00 	cmp.w	sl, #0
 80133ce:	4606      	mov	r6, r0
 80133d0:	460f      	mov	r7, r1
 80133d2:	dd6d      	ble.n	80134b0 <__kernel_rem_pio2+0x250>
 80133d4:	1e62      	subs	r2, r4, #1
 80133d6:	ab0e      	add	r3, sp, #56	; 0x38
 80133d8:	9d04      	ldr	r5, [sp, #16]
 80133da:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 80133de:	f1ca 0118 	rsb	r1, sl, #24
 80133e2:	fa40 f301 	asr.w	r3, r0, r1
 80133e6:	441d      	add	r5, r3
 80133e8:	408b      	lsls	r3, r1
 80133ea:	1ac0      	subs	r0, r0, r3
 80133ec:	ab0e      	add	r3, sp, #56	; 0x38
 80133ee:	9504      	str	r5, [sp, #16]
 80133f0:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 80133f4:	f1ca 0317 	rsb	r3, sl, #23
 80133f8:	fa40 fb03 	asr.w	fp, r0, r3
 80133fc:	f1bb 0f00 	cmp.w	fp, #0
 8013400:	dd65      	ble.n	80134ce <__kernel_rem_pio2+0x26e>
 8013402:	9b04      	ldr	r3, [sp, #16]
 8013404:	2200      	movs	r2, #0
 8013406:	3301      	adds	r3, #1
 8013408:	9304      	str	r3, [sp, #16]
 801340a:	4615      	mov	r5, r2
 801340c:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8013410:	4294      	cmp	r4, r2
 8013412:	f300 809c 	bgt.w	801354e <__kernel_rem_pio2+0x2ee>
 8013416:	f1ba 0f00 	cmp.w	sl, #0
 801341a:	dd07      	ble.n	801342c <__kernel_rem_pio2+0x1cc>
 801341c:	f1ba 0f01 	cmp.w	sl, #1
 8013420:	f000 80c0 	beq.w	80135a4 <__kernel_rem_pio2+0x344>
 8013424:	f1ba 0f02 	cmp.w	sl, #2
 8013428:	f000 80c6 	beq.w	80135b8 <__kernel_rem_pio2+0x358>
 801342c:	f1bb 0f02 	cmp.w	fp, #2
 8013430:	d14d      	bne.n	80134ce <__kernel_rem_pio2+0x26e>
 8013432:	4632      	mov	r2, r6
 8013434:	463b      	mov	r3, r7
 8013436:	4956      	ldr	r1, [pc, #344]	; (8013590 <__kernel_rem_pio2+0x330>)
 8013438:	2000      	movs	r0, #0
 801343a:	f7ec ff45 	bl	80002c8 <__aeabi_dsub>
 801343e:	4606      	mov	r6, r0
 8013440:	460f      	mov	r7, r1
 8013442:	2d00      	cmp	r5, #0
 8013444:	d043      	beq.n	80134ce <__kernel_rem_pio2+0x26e>
 8013446:	4650      	mov	r0, sl
 8013448:	ed9f 0b4d 	vldr	d0, [pc, #308]	; 8013580 <__kernel_rem_pio2+0x320>
 801344c:	f000 fdac 	bl	8013fa8 <scalbn>
 8013450:	4630      	mov	r0, r6
 8013452:	4639      	mov	r1, r7
 8013454:	ec53 2b10 	vmov	r2, r3, d0
 8013458:	f7ec ff36 	bl	80002c8 <__aeabi_dsub>
 801345c:	4606      	mov	r6, r0
 801345e:	460f      	mov	r7, r1
 8013460:	e035      	b.n	80134ce <__kernel_rem_pio2+0x26e>
 8013462:	4b4c      	ldr	r3, [pc, #304]	; (8013594 <__kernel_rem_pio2+0x334>)
 8013464:	2200      	movs	r2, #0
 8013466:	4630      	mov	r0, r6
 8013468:	4639      	mov	r1, r7
 801346a:	f7ed f8e5 	bl	8000638 <__aeabi_dmul>
 801346e:	f7ed fb93 	bl	8000b98 <__aeabi_d2iz>
 8013472:	f7ed f877 	bl	8000564 <__aeabi_i2d>
 8013476:	4602      	mov	r2, r0
 8013478:	460b      	mov	r3, r1
 801347a:	ec43 2b18 	vmov	d8, r2, r3
 801347e:	4b46      	ldr	r3, [pc, #280]	; (8013598 <__kernel_rem_pio2+0x338>)
 8013480:	2200      	movs	r2, #0
 8013482:	f7ed f8d9 	bl	8000638 <__aeabi_dmul>
 8013486:	4602      	mov	r2, r0
 8013488:	460b      	mov	r3, r1
 801348a:	4630      	mov	r0, r6
 801348c:	4639      	mov	r1, r7
 801348e:	f7ec ff1b 	bl	80002c8 <__aeabi_dsub>
 8013492:	f7ed fb81 	bl	8000b98 <__aeabi_d2iz>
 8013496:	e9d5 2300 	ldrd	r2, r3, [r5]
 801349a:	f84b 0b04 	str.w	r0, [fp], #4
 801349e:	ec51 0b18 	vmov	r0, r1, d8
 80134a2:	f7ec ff13 	bl	80002cc <__adddf3>
 80134a6:	f109 39ff 	add.w	r9, r9, #4294967295
 80134aa:	4606      	mov	r6, r0
 80134ac:	460f      	mov	r7, r1
 80134ae:	e75b      	b.n	8013368 <__kernel_rem_pio2+0x108>
 80134b0:	d106      	bne.n	80134c0 <__kernel_rem_pio2+0x260>
 80134b2:	1e63      	subs	r3, r4, #1
 80134b4:	aa0e      	add	r2, sp, #56	; 0x38
 80134b6:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80134ba:	ea4f 5be0 	mov.w	fp, r0, asr #23
 80134be:	e79d      	b.n	80133fc <__kernel_rem_pio2+0x19c>
 80134c0:	4b36      	ldr	r3, [pc, #216]	; (801359c <__kernel_rem_pio2+0x33c>)
 80134c2:	2200      	movs	r2, #0
 80134c4:	f7ed fb3e 	bl	8000b44 <__aeabi_dcmpge>
 80134c8:	2800      	cmp	r0, #0
 80134ca:	d13d      	bne.n	8013548 <__kernel_rem_pio2+0x2e8>
 80134cc:	4683      	mov	fp, r0
 80134ce:	2200      	movs	r2, #0
 80134d0:	2300      	movs	r3, #0
 80134d2:	4630      	mov	r0, r6
 80134d4:	4639      	mov	r1, r7
 80134d6:	f7ed fb17 	bl	8000b08 <__aeabi_dcmpeq>
 80134da:	2800      	cmp	r0, #0
 80134dc:	f000 80c0 	beq.w	8013660 <__kernel_rem_pio2+0x400>
 80134e0:	1e65      	subs	r5, r4, #1
 80134e2:	462b      	mov	r3, r5
 80134e4:	2200      	movs	r2, #0
 80134e6:	9902      	ldr	r1, [sp, #8]
 80134e8:	428b      	cmp	r3, r1
 80134ea:	da6c      	bge.n	80135c6 <__kernel_rem_pio2+0x366>
 80134ec:	2a00      	cmp	r2, #0
 80134ee:	f000 8089 	beq.w	8013604 <__kernel_rem_pio2+0x3a4>
 80134f2:	ab0e      	add	r3, sp, #56	; 0x38
 80134f4:	f1aa 0a18 	sub.w	sl, sl, #24
 80134f8:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 80134fc:	2b00      	cmp	r3, #0
 80134fe:	f000 80ad 	beq.w	801365c <__kernel_rem_pio2+0x3fc>
 8013502:	4650      	mov	r0, sl
 8013504:	ed9f 0b1e 	vldr	d0, [pc, #120]	; 8013580 <__kernel_rem_pio2+0x320>
 8013508:	f000 fd4e 	bl	8013fa8 <scalbn>
 801350c:	ab9a      	add	r3, sp, #616	; 0x268
 801350e:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8013512:	ec57 6b10 	vmov	r6, r7, d0
 8013516:	00ec      	lsls	r4, r5, #3
 8013518:	f1a3 0898 	sub.w	r8, r3, #152	; 0x98
 801351c:	46aa      	mov	sl, r5
 801351e:	f1ba 0f00 	cmp.w	sl, #0
 8013522:	f280 80d6 	bge.w	80136d2 <__kernel_rem_pio2+0x472>
 8013526:	ed9f 8b14 	vldr	d8, [pc, #80]	; 8013578 <__kernel_rem_pio2+0x318>
 801352a:	462e      	mov	r6, r5
 801352c:	2e00      	cmp	r6, #0
 801352e:	f2c0 8104 	blt.w	801373a <__kernel_rem_pio2+0x4da>
 8013532:	ab72      	add	r3, sp, #456	; 0x1c8
 8013534:	ed8d 8b06 	vstr	d8, [sp, #24]
 8013538:	f8df a064 	ldr.w	sl, [pc, #100]	; 80135a0 <__kernel_rem_pio2+0x340>
 801353c:	eb03 09c6 	add.w	r9, r3, r6, lsl #3
 8013540:	f04f 0800 	mov.w	r8, #0
 8013544:	1baf      	subs	r7, r5, r6
 8013546:	e0ea      	b.n	801371e <__kernel_rem_pio2+0x4be>
 8013548:	f04f 0b02 	mov.w	fp, #2
 801354c:	e759      	b.n	8013402 <__kernel_rem_pio2+0x1a2>
 801354e:	f8d8 3000 	ldr.w	r3, [r8]
 8013552:	b955      	cbnz	r5, 801356a <__kernel_rem_pio2+0x30a>
 8013554:	b123      	cbz	r3, 8013560 <__kernel_rem_pio2+0x300>
 8013556:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 801355a:	f8c8 3000 	str.w	r3, [r8]
 801355e:	2301      	movs	r3, #1
 8013560:	3201      	adds	r2, #1
 8013562:	f108 0804 	add.w	r8, r8, #4
 8013566:	461d      	mov	r5, r3
 8013568:	e752      	b.n	8013410 <__kernel_rem_pio2+0x1b0>
 801356a:	1acb      	subs	r3, r1, r3
 801356c:	f8c8 3000 	str.w	r3, [r8]
 8013570:	462b      	mov	r3, r5
 8013572:	e7f5      	b.n	8013560 <__kernel_rem_pio2+0x300>
 8013574:	f3af 8000 	nop.w
	...
 8013584:	3ff00000 	.word	0x3ff00000
 8013588:	08014828 	.word	0x08014828
 801358c:	40200000 	.word	0x40200000
 8013590:	3ff00000 	.word	0x3ff00000
 8013594:	3e700000 	.word	0x3e700000
 8013598:	41700000 	.word	0x41700000
 801359c:	3fe00000 	.word	0x3fe00000
 80135a0:	080147e8 	.word	0x080147e8
 80135a4:	1e62      	subs	r2, r4, #1
 80135a6:	ab0e      	add	r3, sp, #56	; 0x38
 80135a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80135ac:	f3c3 0316 	ubfx	r3, r3, #0, #23
 80135b0:	a90e      	add	r1, sp, #56	; 0x38
 80135b2:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 80135b6:	e739      	b.n	801342c <__kernel_rem_pio2+0x1cc>
 80135b8:	1e62      	subs	r2, r4, #1
 80135ba:	ab0e      	add	r3, sp, #56	; 0x38
 80135bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80135c0:	f3c3 0315 	ubfx	r3, r3, #0, #22
 80135c4:	e7f4      	b.n	80135b0 <__kernel_rem_pio2+0x350>
 80135c6:	a90e      	add	r1, sp, #56	; 0x38
 80135c8:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 80135cc:	3b01      	subs	r3, #1
 80135ce:	430a      	orrs	r2, r1
 80135d0:	e789      	b.n	80134e6 <__kernel_rem_pio2+0x286>
 80135d2:	3301      	adds	r3, #1
 80135d4:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 80135d8:	2900      	cmp	r1, #0
 80135da:	d0fa      	beq.n	80135d2 <__kernel_rem_pio2+0x372>
 80135dc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80135de:	f502 721a 	add.w	r2, r2, #616	; 0x268
 80135e2:	446a      	add	r2, sp
 80135e4:	3a98      	subs	r2, #152	; 0x98
 80135e6:	920a      	str	r2, [sp, #40]	; 0x28
 80135e8:	9a08      	ldr	r2, [sp, #32]
 80135ea:	18e3      	adds	r3, r4, r3
 80135ec:	18a5      	adds	r5, r4, r2
 80135ee:	aa22      	add	r2, sp, #136	; 0x88
 80135f0:	f104 0801 	add.w	r8, r4, #1
 80135f4:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 80135f8:	9304      	str	r3, [sp, #16]
 80135fa:	9b04      	ldr	r3, [sp, #16]
 80135fc:	4543      	cmp	r3, r8
 80135fe:	da04      	bge.n	801360a <__kernel_rem_pio2+0x3aa>
 8013600:	461c      	mov	r4, r3
 8013602:	e6a3      	b.n	801334c <__kernel_rem_pio2+0xec>
 8013604:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8013606:	2301      	movs	r3, #1
 8013608:	e7e4      	b.n	80135d4 <__kernel_rem_pio2+0x374>
 801360a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801360c:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8013610:	f7ec ffa8 	bl	8000564 <__aeabi_i2d>
 8013614:	e8e5 0102 	strd	r0, r1, [r5], #8
 8013618:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801361a:	46ab      	mov	fp, r5
 801361c:	461c      	mov	r4, r3
 801361e:	f04f 0900 	mov.w	r9, #0
 8013622:	2600      	movs	r6, #0
 8013624:	2700      	movs	r7, #0
 8013626:	9b06      	ldr	r3, [sp, #24]
 8013628:	4599      	cmp	r9, r3
 801362a:	dd06      	ble.n	801363a <__kernel_rem_pio2+0x3da>
 801362c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801362e:	e8e3 6702 	strd	r6, r7, [r3], #8
 8013632:	f108 0801 	add.w	r8, r8, #1
 8013636:	930a      	str	r3, [sp, #40]	; 0x28
 8013638:	e7df      	b.n	80135fa <__kernel_rem_pio2+0x39a>
 801363a:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 801363e:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 8013642:	f7ec fff9 	bl	8000638 <__aeabi_dmul>
 8013646:	4602      	mov	r2, r0
 8013648:	460b      	mov	r3, r1
 801364a:	4630      	mov	r0, r6
 801364c:	4639      	mov	r1, r7
 801364e:	f7ec fe3d 	bl	80002cc <__adddf3>
 8013652:	f109 0901 	add.w	r9, r9, #1
 8013656:	4606      	mov	r6, r0
 8013658:	460f      	mov	r7, r1
 801365a:	e7e4      	b.n	8013626 <__kernel_rem_pio2+0x3c6>
 801365c:	3d01      	subs	r5, #1
 801365e:	e748      	b.n	80134f2 <__kernel_rem_pio2+0x292>
 8013660:	ec47 6b10 	vmov	d0, r6, r7
 8013664:	f1ca 0000 	rsb	r0, sl, #0
 8013668:	f000 fc9e 	bl	8013fa8 <scalbn>
 801366c:	ec57 6b10 	vmov	r6, r7, d0
 8013670:	4ba0      	ldr	r3, [pc, #640]	; (80138f4 <__kernel_rem_pio2+0x694>)
 8013672:	ee10 0a10 	vmov	r0, s0
 8013676:	2200      	movs	r2, #0
 8013678:	4639      	mov	r1, r7
 801367a:	f7ed fa63 	bl	8000b44 <__aeabi_dcmpge>
 801367e:	b1f8      	cbz	r0, 80136c0 <__kernel_rem_pio2+0x460>
 8013680:	4b9d      	ldr	r3, [pc, #628]	; (80138f8 <__kernel_rem_pio2+0x698>)
 8013682:	2200      	movs	r2, #0
 8013684:	4630      	mov	r0, r6
 8013686:	4639      	mov	r1, r7
 8013688:	f7ec ffd6 	bl	8000638 <__aeabi_dmul>
 801368c:	f7ed fa84 	bl	8000b98 <__aeabi_d2iz>
 8013690:	4680      	mov	r8, r0
 8013692:	f7ec ff67 	bl	8000564 <__aeabi_i2d>
 8013696:	4b97      	ldr	r3, [pc, #604]	; (80138f4 <__kernel_rem_pio2+0x694>)
 8013698:	2200      	movs	r2, #0
 801369a:	f7ec ffcd 	bl	8000638 <__aeabi_dmul>
 801369e:	460b      	mov	r3, r1
 80136a0:	4602      	mov	r2, r0
 80136a2:	4639      	mov	r1, r7
 80136a4:	4630      	mov	r0, r6
 80136a6:	f7ec fe0f 	bl	80002c8 <__aeabi_dsub>
 80136aa:	f7ed fa75 	bl	8000b98 <__aeabi_d2iz>
 80136ae:	1c65      	adds	r5, r4, #1
 80136b0:	ab0e      	add	r3, sp, #56	; 0x38
 80136b2:	f10a 0a18 	add.w	sl, sl, #24
 80136b6:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 80136ba:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 80136be:	e720      	b.n	8013502 <__kernel_rem_pio2+0x2a2>
 80136c0:	4630      	mov	r0, r6
 80136c2:	4639      	mov	r1, r7
 80136c4:	f7ed fa68 	bl	8000b98 <__aeabi_d2iz>
 80136c8:	ab0e      	add	r3, sp, #56	; 0x38
 80136ca:	4625      	mov	r5, r4
 80136cc:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 80136d0:	e717      	b.n	8013502 <__kernel_rem_pio2+0x2a2>
 80136d2:	ab0e      	add	r3, sp, #56	; 0x38
 80136d4:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 80136d8:	f7ec ff44 	bl	8000564 <__aeabi_i2d>
 80136dc:	4632      	mov	r2, r6
 80136de:	463b      	mov	r3, r7
 80136e0:	f7ec ffaa 	bl	8000638 <__aeabi_dmul>
 80136e4:	4b84      	ldr	r3, [pc, #528]	; (80138f8 <__kernel_rem_pio2+0x698>)
 80136e6:	e968 0102 	strd	r0, r1, [r8, #-8]!
 80136ea:	2200      	movs	r2, #0
 80136ec:	4630      	mov	r0, r6
 80136ee:	4639      	mov	r1, r7
 80136f0:	f7ec ffa2 	bl	8000638 <__aeabi_dmul>
 80136f4:	f10a 3aff 	add.w	sl, sl, #4294967295
 80136f8:	4606      	mov	r6, r0
 80136fa:	460f      	mov	r7, r1
 80136fc:	e70f      	b.n	801351e <__kernel_rem_pio2+0x2be>
 80136fe:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 8013702:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 8013706:	f7ec ff97 	bl	8000638 <__aeabi_dmul>
 801370a:	4602      	mov	r2, r0
 801370c:	460b      	mov	r3, r1
 801370e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8013712:	f7ec fddb 	bl	80002cc <__adddf3>
 8013716:	e9cd 0106 	strd	r0, r1, [sp, #24]
 801371a:	f108 0801 	add.w	r8, r8, #1
 801371e:	9b02      	ldr	r3, [sp, #8]
 8013720:	4598      	cmp	r8, r3
 8013722:	dc01      	bgt.n	8013728 <__kernel_rem_pio2+0x4c8>
 8013724:	45b8      	cmp	r8, r7
 8013726:	ddea      	ble.n	80136fe <__kernel_rem_pio2+0x49e>
 8013728:	ed9d 7b06 	vldr	d7, [sp, #24]
 801372c:	ab4a      	add	r3, sp, #296	; 0x128
 801372e:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8013732:	ed87 7b00 	vstr	d7, [r7]
 8013736:	3e01      	subs	r6, #1
 8013738:	e6f8      	b.n	801352c <__kernel_rem_pio2+0x2cc>
 801373a:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 801373c:	2b02      	cmp	r3, #2
 801373e:	dc0b      	bgt.n	8013758 <__kernel_rem_pio2+0x4f8>
 8013740:	2b00      	cmp	r3, #0
 8013742:	dc35      	bgt.n	80137b0 <__kernel_rem_pio2+0x550>
 8013744:	d059      	beq.n	80137fa <__kernel_rem_pio2+0x59a>
 8013746:	9b04      	ldr	r3, [sp, #16]
 8013748:	f003 0007 	and.w	r0, r3, #7
 801374c:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 8013750:	ecbd 8b02 	vpop	{d8}
 8013754:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013758:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 801375a:	2b03      	cmp	r3, #3
 801375c:	d1f3      	bne.n	8013746 <__kernel_rem_pio2+0x4e6>
 801375e:	ab4a      	add	r3, sp, #296	; 0x128
 8013760:	4423      	add	r3, r4
 8013762:	9306      	str	r3, [sp, #24]
 8013764:	461c      	mov	r4, r3
 8013766:	469a      	mov	sl, r3
 8013768:	9502      	str	r5, [sp, #8]
 801376a:	9b02      	ldr	r3, [sp, #8]
 801376c:	2b00      	cmp	r3, #0
 801376e:	f1aa 0a08 	sub.w	sl, sl, #8
 8013772:	dc6b      	bgt.n	801384c <__kernel_rem_pio2+0x5ec>
 8013774:	46aa      	mov	sl, r5
 8013776:	f1ba 0f01 	cmp.w	sl, #1
 801377a:	f1a4 0408 	sub.w	r4, r4, #8
 801377e:	f300 8085 	bgt.w	801388c <__kernel_rem_pio2+0x62c>
 8013782:	9c06      	ldr	r4, [sp, #24]
 8013784:	2000      	movs	r0, #0
 8013786:	3408      	adds	r4, #8
 8013788:	2100      	movs	r1, #0
 801378a:	2d01      	cmp	r5, #1
 801378c:	f300 809d 	bgt.w	80138ca <__kernel_rem_pio2+0x66a>
 8013790:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 8013794:	e9dd 784c 	ldrd	r7, r8, [sp, #304]	; 0x130
 8013798:	f1bb 0f00 	cmp.w	fp, #0
 801379c:	f040 809b 	bne.w	80138d6 <__kernel_rem_pio2+0x676>
 80137a0:	9b01      	ldr	r3, [sp, #4]
 80137a2:	e9c3 5600 	strd	r5, r6, [r3]
 80137a6:	e9c3 7802 	strd	r7, r8, [r3, #8]
 80137aa:	e9c3 0104 	strd	r0, r1, [r3, #16]
 80137ae:	e7ca      	b.n	8013746 <__kernel_rem_pio2+0x4e6>
 80137b0:	3408      	adds	r4, #8
 80137b2:	ab4a      	add	r3, sp, #296	; 0x128
 80137b4:	441c      	add	r4, r3
 80137b6:	462e      	mov	r6, r5
 80137b8:	2000      	movs	r0, #0
 80137ba:	2100      	movs	r1, #0
 80137bc:	2e00      	cmp	r6, #0
 80137be:	da36      	bge.n	801382e <__kernel_rem_pio2+0x5ce>
 80137c0:	f1bb 0f00 	cmp.w	fp, #0
 80137c4:	d039      	beq.n	801383a <__kernel_rem_pio2+0x5da>
 80137c6:	4602      	mov	r2, r0
 80137c8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80137cc:	9c01      	ldr	r4, [sp, #4]
 80137ce:	e9c4 2300 	strd	r2, r3, [r4]
 80137d2:	4602      	mov	r2, r0
 80137d4:	460b      	mov	r3, r1
 80137d6:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 80137da:	f7ec fd75 	bl	80002c8 <__aeabi_dsub>
 80137de:	ae4c      	add	r6, sp, #304	; 0x130
 80137e0:	2401      	movs	r4, #1
 80137e2:	42a5      	cmp	r5, r4
 80137e4:	da2c      	bge.n	8013840 <__kernel_rem_pio2+0x5e0>
 80137e6:	f1bb 0f00 	cmp.w	fp, #0
 80137ea:	d002      	beq.n	80137f2 <__kernel_rem_pio2+0x592>
 80137ec:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80137f0:	4619      	mov	r1, r3
 80137f2:	9b01      	ldr	r3, [sp, #4]
 80137f4:	e9c3 0102 	strd	r0, r1, [r3, #8]
 80137f8:	e7a5      	b.n	8013746 <__kernel_rem_pio2+0x4e6>
 80137fa:	f504 731a 	add.w	r3, r4, #616	; 0x268
 80137fe:	eb0d 0403 	add.w	r4, sp, r3
 8013802:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 8013806:	2000      	movs	r0, #0
 8013808:	2100      	movs	r1, #0
 801380a:	2d00      	cmp	r5, #0
 801380c:	da09      	bge.n	8013822 <__kernel_rem_pio2+0x5c2>
 801380e:	f1bb 0f00 	cmp.w	fp, #0
 8013812:	d002      	beq.n	801381a <__kernel_rem_pio2+0x5ba>
 8013814:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8013818:	4619      	mov	r1, r3
 801381a:	9b01      	ldr	r3, [sp, #4]
 801381c:	e9c3 0100 	strd	r0, r1, [r3]
 8013820:	e791      	b.n	8013746 <__kernel_rem_pio2+0x4e6>
 8013822:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8013826:	f7ec fd51 	bl	80002cc <__adddf3>
 801382a:	3d01      	subs	r5, #1
 801382c:	e7ed      	b.n	801380a <__kernel_rem_pio2+0x5aa>
 801382e:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8013832:	f7ec fd4b 	bl	80002cc <__adddf3>
 8013836:	3e01      	subs	r6, #1
 8013838:	e7c0      	b.n	80137bc <__kernel_rem_pio2+0x55c>
 801383a:	4602      	mov	r2, r0
 801383c:	460b      	mov	r3, r1
 801383e:	e7c5      	b.n	80137cc <__kernel_rem_pio2+0x56c>
 8013840:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 8013844:	f7ec fd42 	bl	80002cc <__adddf3>
 8013848:	3401      	adds	r4, #1
 801384a:	e7ca      	b.n	80137e2 <__kernel_rem_pio2+0x582>
 801384c:	e9da 8900 	ldrd	r8, r9, [sl]
 8013850:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 8013854:	9b02      	ldr	r3, [sp, #8]
 8013856:	3b01      	subs	r3, #1
 8013858:	9302      	str	r3, [sp, #8]
 801385a:	4632      	mov	r2, r6
 801385c:	463b      	mov	r3, r7
 801385e:	4640      	mov	r0, r8
 8013860:	4649      	mov	r1, r9
 8013862:	f7ec fd33 	bl	80002cc <__adddf3>
 8013866:	e9cd 0108 	strd	r0, r1, [sp, #32]
 801386a:	4602      	mov	r2, r0
 801386c:	460b      	mov	r3, r1
 801386e:	4640      	mov	r0, r8
 8013870:	4649      	mov	r1, r9
 8013872:	f7ec fd29 	bl	80002c8 <__aeabi_dsub>
 8013876:	4632      	mov	r2, r6
 8013878:	463b      	mov	r3, r7
 801387a:	f7ec fd27 	bl	80002cc <__adddf3>
 801387e:	ed9d 7b08 	vldr	d7, [sp, #32]
 8013882:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8013886:	ed8a 7b00 	vstr	d7, [sl]
 801388a:	e76e      	b.n	801376a <__kernel_rem_pio2+0x50a>
 801388c:	e9d4 8900 	ldrd	r8, r9, [r4]
 8013890:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 8013894:	4640      	mov	r0, r8
 8013896:	4632      	mov	r2, r6
 8013898:	463b      	mov	r3, r7
 801389a:	4649      	mov	r1, r9
 801389c:	f7ec fd16 	bl	80002cc <__adddf3>
 80138a0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80138a4:	4602      	mov	r2, r0
 80138a6:	460b      	mov	r3, r1
 80138a8:	4640      	mov	r0, r8
 80138aa:	4649      	mov	r1, r9
 80138ac:	f7ec fd0c 	bl	80002c8 <__aeabi_dsub>
 80138b0:	4632      	mov	r2, r6
 80138b2:	463b      	mov	r3, r7
 80138b4:	f7ec fd0a 	bl	80002cc <__adddf3>
 80138b8:	ed9d 7b02 	vldr	d7, [sp, #8]
 80138bc:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80138c0:	ed84 7b00 	vstr	d7, [r4]
 80138c4:	f10a 3aff 	add.w	sl, sl, #4294967295
 80138c8:	e755      	b.n	8013776 <__kernel_rem_pio2+0x516>
 80138ca:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 80138ce:	f7ec fcfd 	bl	80002cc <__adddf3>
 80138d2:	3d01      	subs	r5, #1
 80138d4:	e759      	b.n	801378a <__kernel_rem_pio2+0x52a>
 80138d6:	9b01      	ldr	r3, [sp, #4]
 80138d8:	9a01      	ldr	r2, [sp, #4]
 80138da:	601d      	str	r5, [r3, #0]
 80138dc:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 80138e0:	605c      	str	r4, [r3, #4]
 80138e2:	609f      	str	r7, [r3, #8]
 80138e4:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 80138e8:	60d3      	str	r3, [r2, #12]
 80138ea:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80138ee:	6110      	str	r0, [r2, #16]
 80138f0:	6153      	str	r3, [r2, #20]
 80138f2:	e728      	b.n	8013746 <__kernel_rem_pio2+0x4e6>
 80138f4:	41700000 	.word	0x41700000
 80138f8:	3e700000 	.word	0x3e700000
 80138fc:	00000000 	.word	0x00000000

08013900 <__kernel_sin>:
 8013900:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013904:	ed2d 8b04 	vpush	{d8-d9}
 8013908:	eeb0 8a41 	vmov.f32	s16, s2
 801390c:	eef0 8a61 	vmov.f32	s17, s3
 8013910:	ec55 4b10 	vmov	r4, r5, d0
 8013914:	b083      	sub	sp, #12
 8013916:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 801391a:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 801391e:	9001      	str	r0, [sp, #4]
 8013920:	da06      	bge.n	8013930 <__kernel_sin+0x30>
 8013922:	ee10 0a10 	vmov	r0, s0
 8013926:	4629      	mov	r1, r5
 8013928:	f7ed f936 	bl	8000b98 <__aeabi_d2iz>
 801392c:	2800      	cmp	r0, #0
 801392e:	d051      	beq.n	80139d4 <__kernel_sin+0xd4>
 8013930:	4622      	mov	r2, r4
 8013932:	462b      	mov	r3, r5
 8013934:	4620      	mov	r0, r4
 8013936:	4629      	mov	r1, r5
 8013938:	f7ec fe7e 	bl	8000638 <__aeabi_dmul>
 801393c:	4682      	mov	sl, r0
 801393e:	468b      	mov	fp, r1
 8013940:	4602      	mov	r2, r0
 8013942:	460b      	mov	r3, r1
 8013944:	4620      	mov	r0, r4
 8013946:	4629      	mov	r1, r5
 8013948:	f7ec fe76 	bl	8000638 <__aeabi_dmul>
 801394c:	a341      	add	r3, pc, #260	; (adr r3, 8013a54 <__kernel_sin+0x154>)
 801394e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013952:	4680      	mov	r8, r0
 8013954:	4689      	mov	r9, r1
 8013956:	4650      	mov	r0, sl
 8013958:	4659      	mov	r1, fp
 801395a:	f7ec fe6d 	bl	8000638 <__aeabi_dmul>
 801395e:	a33f      	add	r3, pc, #252	; (adr r3, 8013a5c <__kernel_sin+0x15c>)
 8013960:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013964:	f7ec fcb0 	bl	80002c8 <__aeabi_dsub>
 8013968:	4652      	mov	r2, sl
 801396a:	465b      	mov	r3, fp
 801396c:	f7ec fe64 	bl	8000638 <__aeabi_dmul>
 8013970:	a33c      	add	r3, pc, #240	; (adr r3, 8013a64 <__kernel_sin+0x164>)
 8013972:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013976:	f7ec fca9 	bl	80002cc <__adddf3>
 801397a:	4652      	mov	r2, sl
 801397c:	465b      	mov	r3, fp
 801397e:	f7ec fe5b 	bl	8000638 <__aeabi_dmul>
 8013982:	a33a      	add	r3, pc, #232	; (adr r3, 8013a6c <__kernel_sin+0x16c>)
 8013984:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013988:	f7ec fc9e 	bl	80002c8 <__aeabi_dsub>
 801398c:	4652      	mov	r2, sl
 801398e:	465b      	mov	r3, fp
 8013990:	f7ec fe52 	bl	8000638 <__aeabi_dmul>
 8013994:	a337      	add	r3, pc, #220	; (adr r3, 8013a74 <__kernel_sin+0x174>)
 8013996:	e9d3 2300 	ldrd	r2, r3, [r3]
 801399a:	f7ec fc97 	bl	80002cc <__adddf3>
 801399e:	9b01      	ldr	r3, [sp, #4]
 80139a0:	4606      	mov	r6, r0
 80139a2:	460f      	mov	r7, r1
 80139a4:	b9eb      	cbnz	r3, 80139e2 <__kernel_sin+0xe2>
 80139a6:	4602      	mov	r2, r0
 80139a8:	460b      	mov	r3, r1
 80139aa:	4650      	mov	r0, sl
 80139ac:	4659      	mov	r1, fp
 80139ae:	f7ec fe43 	bl	8000638 <__aeabi_dmul>
 80139b2:	a325      	add	r3, pc, #148	; (adr r3, 8013a48 <__kernel_sin+0x148>)
 80139b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80139b8:	f7ec fc86 	bl	80002c8 <__aeabi_dsub>
 80139bc:	4642      	mov	r2, r8
 80139be:	464b      	mov	r3, r9
 80139c0:	f7ec fe3a 	bl	8000638 <__aeabi_dmul>
 80139c4:	4602      	mov	r2, r0
 80139c6:	460b      	mov	r3, r1
 80139c8:	4620      	mov	r0, r4
 80139ca:	4629      	mov	r1, r5
 80139cc:	f7ec fc7e 	bl	80002cc <__adddf3>
 80139d0:	4604      	mov	r4, r0
 80139d2:	460d      	mov	r5, r1
 80139d4:	ec45 4b10 	vmov	d0, r4, r5
 80139d8:	b003      	add	sp, #12
 80139da:	ecbd 8b04 	vpop	{d8-d9}
 80139de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80139e2:	4b1b      	ldr	r3, [pc, #108]	; (8013a50 <__kernel_sin+0x150>)
 80139e4:	ec51 0b18 	vmov	r0, r1, d8
 80139e8:	2200      	movs	r2, #0
 80139ea:	f7ec fe25 	bl	8000638 <__aeabi_dmul>
 80139ee:	4632      	mov	r2, r6
 80139f0:	ec41 0b19 	vmov	d9, r0, r1
 80139f4:	463b      	mov	r3, r7
 80139f6:	4640      	mov	r0, r8
 80139f8:	4649      	mov	r1, r9
 80139fa:	f7ec fe1d 	bl	8000638 <__aeabi_dmul>
 80139fe:	4602      	mov	r2, r0
 8013a00:	460b      	mov	r3, r1
 8013a02:	ec51 0b19 	vmov	r0, r1, d9
 8013a06:	f7ec fc5f 	bl	80002c8 <__aeabi_dsub>
 8013a0a:	4652      	mov	r2, sl
 8013a0c:	465b      	mov	r3, fp
 8013a0e:	f7ec fe13 	bl	8000638 <__aeabi_dmul>
 8013a12:	ec53 2b18 	vmov	r2, r3, d8
 8013a16:	f7ec fc57 	bl	80002c8 <__aeabi_dsub>
 8013a1a:	a30b      	add	r3, pc, #44	; (adr r3, 8013a48 <__kernel_sin+0x148>)
 8013a1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013a20:	4606      	mov	r6, r0
 8013a22:	460f      	mov	r7, r1
 8013a24:	4640      	mov	r0, r8
 8013a26:	4649      	mov	r1, r9
 8013a28:	f7ec fe06 	bl	8000638 <__aeabi_dmul>
 8013a2c:	4602      	mov	r2, r0
 8013a2e:	460b      	mov	r3, r1
 8013a30:	4630      	mov	r0, r6
 8013a32:	4639      	mov	r1, r7
 8013a34:	f7ec fc4a 	bl	80002cc <__adddf3>
 8013a38:	4602      	mov	r2, r0
 8013a3a:	460b      	mov	r3, r1
 8013a3c:	4620      	mov	r0, r4
 8013a3e:	4629      	mov	r1, r5
 8013a40:	f7ec fc42 	bl	80002c8 <__aeabi_dsub>
 8013a44:	e7c4      	b.n	80139d0 <__kernel_sin+0xd0>
 8013a46:	bf00      	nop
 8013a48:	55555549 	.word	0x55555549
 8013a4c:	3fc55555 	.word	0x3fc55555
 8013a50:	3fe00000 	.word	0x3fe00000
 8013a54:	5acfd57c 	.word	0x5acfd57c
 8013a58:	3de5d93a 	.word	0x3de5d93a
 8013a5c:	8a2b9ceb 	.word	0x8a2b9ceb
 8013a60:	3e5ae5e6 	.word	0x3e5ae5e6
 8013a64:	57b1fe7d 	.word	0x57b1fe7d
 8013a68:	3ec71de3 	.word	0x3ec71de3
 8013a6c:	19c161d5 	.word	0x19c161d5
 8013a70:	3f2a01a0 	.word	0x3f2a01a0
 8013a74:	1110f8a6 	.word	0x1110f8a6
 8013a78:	3f811111 	.word	0x3f811111
 8013a7c:	00000000 	.word	0x00000000

08013a80 <__kernel_tan>:
 8013a80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013a84:	ed2d 8b06 	vpush	{d8-d10}
 8013a88:	ec5b ab10 	vmov	sl, fp, d0
 8013a8c:	4be0      	ldr	r3, [pc, #896]	; (8013e10 <__kernel_tan+0x390>)
 8013a8e:	b083      	sub	sp, #12
 8013a90:	f02b 4700 	bic.w	r7, fp, #2147483648	; 0x80000000
 8013a94:	429f      	cmp	r7, r3
 8013a96:	ec59 8b11 	vmov	r8, r9, d1
 8013a9a:	4606      	mov	r6, r0
 8013a9c:	f8cd b000 	str.w	fp, [sp]
 8013aa0:	dc61      	bgt.n	8013b66 <__kernel_tan+0xe6>
 8013aa2:	ee10 0a10 	vmov	r0, s0
 8013aa6:	4659      	mov	r1, fp
 8013aa8:	f7ed f876 	bl	8000b98 <__aeabi_d2iz>
 8013aac:	4605      	mov	r5, r0
 8013aae:	2800      	cmp	r0, #0
 8013ab0:	f040 8083 	bne.w	8013bba <__kernel_tan+0x13a>
 8013ab4:	1c73      	adds	r3, r6, #1
 8013ab6:	4652      	mov	r2, sl
 8013ab8:	4313      	orrs	r3, r2
 8013aba:	433b      	orrs	r3, r7
 8013abc:	d112      	bne.n	8013ae4 <__kernel_tan+0x64>
 8013abe:	ec4b ab10 	vmov	d0, sl, fp
 8013ac2:	f000 f9e7 	bl	8013e94 <fabs>
 8013ac6:	49d3      	ldr	r1, [pc, #844]	; (8013e14 <__kernel_tan+0x394>)
 8013ac8:	ec53 2b10 	vmov	r2, r3, d0
 8013acc:	2000      	movs	r0, #0
 8013ace:	f7ec fedd 	bl	800088c <__aeabi_ddiv>
 8013ad2:	4682      	mov	sl, r0
 8013ad4:	468b      	mov	fp, r1
 8013ad6:	ec4b ab10 	vmov	d0, sl, fp
 8013ada:	b003      	add	sp, #12
 8013adc:	ecbd 8b06 	vpop	{d8-d10}
 8013ae0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013ae4:	2e01      	cmp	r6, #1
 8013ae6:	d0f6      	beq.n	8013ad6 <__kernel_tan+0x56>
 8013ae8:	4642      	mov	r2, r8
 8013aea:	464b      	mov	r3, r9
 8013aec:	4650      	mov	r0, sl
 8013aee:	4659      	mov	r1, fp
 8013af0:	f7ec fbec 	bl	80002cc <__adddf3>
 8013af4:	4602      	mov	r2, r0
 8013af6:	460b      	mov	r3, r1
 8013af8:	460f      	mov	r7, r1
 8013afa:	2000      	movs	r0, #0
 8013afc:	49c6      	ldr	r1, [pc, #792]	; (8013e18 <__kernel_tan+0x398>)
 8013afe:	f7ec fec5 	bl	800088c <__aeabi_ddiv>
 8013b02:	e9cd 0100 	strd	r0, r1, [sp]
 8013b06:	e9dd 2300 	ldrd	r2, r3, [sp]
 8013b0a:	462e      	mov	r6, r5
 8013b0c:	4652      	mov	r2, sl
 8013b0e:	462c      	mov	r4, r5
 8013b10:	4630      	mov	r0, r6
 8013b12:	461d      	mov	r5, r3
 8013b14:	4639      	mov	r1, r7
 8013b16:	465b      	mov	r3, fp
 8013b18:	f7ec fbd6 	bl	80002c8 <__aeabi_dsub>
 8013b1c:	4602      	mov	r2, r0
 8013b1e:	460b      	mov	r3, r1
 8013b20:	4640      	mov	r0, r8
 8013b22:	4649      	mov	r1, r9
 8013b24:	f7ec fbd0 	bl	80002c8 <__aeabi_dsub>
 8013b28:	4632      	mov	r2, r6
 8013b2a:	462b      	mov	r3, r5
 8013b2c:	f7ec fd84 	bl	8000638 <__aeabi_dmul>
 8013b30:	4632      	mov	r2, r6
 8013b32:	4680      	mov	r8, r0
 8013b34:	4689      	mov	r9, r1
 8013b36:	462b      	mov	r3, r5
 8013b38:	4630      	mov	r0, r6
 8013b3a:	4639      	mov	r1, r7
 8013b3c:	f7ec fd7c 	bl	8000638 <__aeabi_dmul>
 8013b40:	4bb4      	ldr	r3, [pc, #720]	; (8013e14 <__kernel_tan+0x394>)
 8013b42:	2200      	movs	r2, #0
 8013b44:	f7ec fbc2 	bl	80002cc <__adddf3>
 8013b48:	4602      	mov	r2, r0
 8013b4a:	460b      	mov	r3, r1
 8013b4c:	4640      	mov	r0, r8
 8013b4e:	4649      	mov	r1, r9
 8013b50:	f7ec fbbc 	bl	80002cc <__adddf3>
 8013b54:	e9dd 2300 	ldrd	r2, r3, [sp]
 8013b58:	f7ec fd6e 	bl	8000638 <__aeabi_dmul>
 8013b5c:	4622      	mov	r2, r4
 8013b5e:	462b      	mov	r3, r5
 8013b60:	f7ec fbb4 	bl	80002cc <__adddf3>
 8013b64:	e7b5      	b.n	8013ad2 <__kernel_tan+0x52>
 8013b66:	4bad      	ldr	r3, [pc, #692]	; (8013e1c <__kernel_tan+0x39c>)
 8013b68:	429f      	cmp	r7, r3
 8013b6a:	dd26      	ble.n	8013bba <__kernel_tan+0x13a>
 8013b6c:	9b00      	ldr	r3, [sp, #0]
 8013b6e:	2b00      	cmp	r3, #0
 8013b70:	da09      	bge.n	8013b86 <__kernel_tan+0x106>
 8013b72:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8013b76:	469b      	mov	fp, r3
 8013b78:	ee10 aa10 	vmov	sl, s0
 8013b7c:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8013b80:	ee11 8a10 	vmov	r8, s2
 8013b84:	4699      	mov	r9, r3
 8013b86:	4652      	mov	r2, sl
 8013b88:	465b      	mov	r3, fp
 8013b8a:	a183      	add	r1, pc, #524	; (adr r1, 8013d98 <__kernel_tan+0x318>)
 8013b8c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013b90:	f7ec fb9a 	bl	80002c8 <__aeabi_dsub>
 8013b94:	4642      	mov	r2, r8
 8013b96:	464b      	mov	r3, r9
 8013b98:	4604      	mov	r4, r0
 8013b9a:	460d      	mov	r5, r1
 8013b9c:	a180      	add	r1, pc, #512	; (adr r1, 8013da0 <__kernel_tan+0x320>)
 8013b9e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013ba2:	f7ec fb91 	bl	80002c8 <__aeabi_dsub>
 8013ba6:	4622      	mov	r2, r4
 8013ba8:	462b      	mov	r3, r5
 8013baa:	f7ec fb8f 	bl	80002cc <__adddf3>
 8013bae:	f04f 0800 	mov.w	r8, #0
 8013bb2:	4682      	mov	sl, r0
 8013bb4:	468b      	mov	fp, r1
 8013bb6:	f04f 0900 	mov.w	r9, #0
 8013bba:	4652      	mov	r2, sl
 8013bbc:	465b      	mov	r3, fp
 8013bbe:	4650      	mov	r0, sl
 8013bc0:	4659      	mov	r1, fp
 8013bc2:	f7ec fd39 	bl	8000638 <__aeabi_dmul>
 8013bc6:	4602      	mov	r2, r0
 8013bc8:	460b      	mov	r3, r1
 8013bca:	ec43 2b18 	vmov	d8, r2, r3
 8013bce:	f7ec fd33 	bl	8000638 <__aeabi_dmul>
 8013bd2:	ec53 2b18 	vmov	r2, r3, d8
 8013bd6:	4604      	mov	r4, r0
 8013bd8:	460d      	mov	r5, r1
 8013bda:	4650      	mov	r0, sl
 8013bdc:	4659      	mov	r1, fp
 8013bde:	f7ec fd2b 	bl	8000638 <__aeabi_dmul>
 8013be2:	a371      	add	r3, pc, #452	; (adr r3, 8013da8 <__kernel_tan+0x328>)
 8013be4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013be8:	ec41 0b19 	vmov	d9, r0, r1
 8013bec:	4620      	mov	r0, r4
 8013bee:	4629      	mov	r1, r5
 8013bf0:	f7ec fd22 	bl	8000638 <__aeabi_dmul>
 8013bf4:	a36e      	add	r3, pc, #440	; (adr r3, 8013db0 <__kernel_tan+0x330>)
 8013bf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013bfa:	f7ec fb67 	bl	80002cc <__adddf3>
 8013bfe:	4622      	mov	r2, r4
 8013c00:	462b      	mov	r3, r5
 8013c02:	f7ec fd19 	bl	8000638 <__aeabi_dmul>
 8013c06:	a36c      	add	r3, pc, #432	; (adr r3, 8013db8 <__kernel_tan+0x338>)
 8013c08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013c0c:	f7ec fb5e 	bl	80002cc <__adddf3>
 8013c10:	4622      	mov	r2, r4
 8013c12:	462b      	mov	r3, r5
 8013c14:	f7ec fd10 	bl	8000638 <__aeabi_dmul>
 8013c18:	a369      	add	r3, pc, #420	; (adr r3, 8013dc0 <__kernel_tan+0x340>)
 8013c1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013c1e:	f7ec fb55 	bl	80002cc <__adddf3>
 8013c22:	4622      	mov	r2, r4
 8013c24:	462b      	mov	r3, r5
 8013c26:	f7ec fd07 	bl	8000638 <__aeabi_dmul>
 8013c2a:	a367      	add	r3, pc, #412	; (adr r3, 8013dc8 <__kernel_tan+0x348>)
 8013c2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013c30:	f7ec fb4c 	bl	80002cc <__adddf3>
 8013c34:	4622      	mov	r2, r4
 8013c36:	462b      	mov	r3, r5
 8013c38:	f7ec fcfe 	bl	8000638 <__aeabi_dmul>
 8013c3c:	a364      	add	r3, pc, #400	; (adr r3, 8013dd0 <__kernel_tan+0x350>)
 8013c3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013c42:	f7ec fb43 	bl	80002cc <__adddf3>
 8013c46:	ec53 2b18 	vmov	r2, r3, d8
 8013c4a:	f7ec fcf5 	bl	8000638 <__aeabi_dmul>
 8013c4e:	a362      	add	r3, pc, #392	; (adr r3, 8013dd8 <__kernel_tan+0x358>)
 8013c50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013c54:	ec41 0b1a 	vmov	d10, r0, r1
 8013c58:	4620      	mov	r0, r4
 8013c5a:	4629      	mov	r1, r5
 8013c5c:	f7ec fcec 	bl	8000638 <__aeabi_dmul>
 8013c60:	a35f      	add	r3, pc, #380	; (adr r3, 8013de0 <__kernel_tan+0x360>)
 8013c62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013c66:	f7ec fb31 	bl	80002cc <__adddf3>
 8013c6a:	4622      	mov	r2, r4
 8013c6c:	462b      	mov	r3, r5
 8013c6e:	f7ec fce3 	bl	8000638 <__aeabi_dmul>
 8013c72:	a35d      	add	r3, pc, #372	; (adr r3, 8013de8 <__kernel_tan+0x368>)
 8013c74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013c78:	f7ec fb28 	bl	80002cc <__adddf3>
 8013c7c:	4622      	mov	r2, r4
 8013c7e:	462b      	mov	r3, r5
 8013c80:	f7ec fcda 	bl	8000638 <__aeabi_dmul>
 8013c84:	a35a      	add	r3, pc, #360	; (adr r3, 8013df0 <__kernel_tan+0x370>)
 8013c86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013c8a:	f7ec fb1f 	bl	80002cc <__adddf3>
 8013c8e:	4622      	mov	r2, r4
 8013c90:	462b      	mov	r3, r5
 8013c92:	f7ec fcd1 	bl	8000638 <__aeabi_dmul>
 8013c96:	a358      	add	r3, pc, #352	; (adr r3, 8013df8 <__kernel_tan+0x378>)
 8013c98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013c9c:	f7ec fb16 	bl	80002cc <__adddf3>
 8013ca0:	4622      	mov	r2, r4
 8013ca2:	462b      	mov	r3, r5
 8013ca4:	f7ec fcc8 	bl	8000638 <__aeabi_dmul>
 8013ca8:	a355      	add	r3, pc, #340	; (adr r3, 8013e00 <__kernel_tan+0x380>)
 8013caa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013cae:	f7ec fb0d 	bl	80002cc <__adddf3>
 8013cb2:	4602      	mov	r2, r0
 8013cb4:	460b      	mov	r3, r1
 8013cb6:	ec51 0b1a 	vmov	r0, r1, d10
 8013cba:	f7ec fb07 	bl	80002cc <__adddf3>
 8013cbe:	ec53 2b19 	vmov	r2, r3, d9
 8013cc2:	f7ec fcb9 	bl	8000638 <__aeabi_dmul>
 8013cc6:	4642      	mov	r2, r8
 8013cc8:	464b      	mov	r3, r9
 8013cca:	f7ec faff 	bl	80002cc <__adddf3>
 8013cce:	ec53 2b18 	vmov	r2, r3, d8
 8013cd2:	f7ec fcb1 	bl	8000638 <__aeabi_dmul>
 8013cd6:	4642      	mov	r2, r8
 8013cd8:	464b      	mov	r3, r9
 8013cda:	f7ec faf7 	bl	80002cc <__adddf3>
 8013cde:	a34a      	add	r3, pc, #296	; (adr r3, 8013e08 <__kernel_tan+0x388>)
 8013ce0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013ce4:	4604      	mov	r4, r0
 8013ce6:	460d      	mov	r5, r1
 8013ce8:	ec51 0b19 	vmov	r0, r1, d9
 8013cec:	f7ec fca4 	bl	8000638 <__aeabi_dmul>
 8013cf0:	4622      	mov	r2, r4
 8013cf2:	462b      	mov	r3, r5
 8013cf4:	f7ec faea 	bl	80002cc <__adddf3>
 8013cf8:	460b      	mov	r3, r1
 8013cfa:	ec41 0b18 	vmov	d8, r0, r1
 8013cfe:	4602      	mov	r2, r0
 8013d00:	4659      	mov	r1, fp
 8013d02:	4650      	mov	r0, sl
 8013d04:	f7ec fae2 	bl	80002cc <__adddf3>
 8013d08:	4b44      	ldr	r3, [pc, #272]	; (8013e1c <__kernel_tan+0x39c>)
 8013d0a:	429f      	cmp	r7, r3
 8013d0c:	4604      	mov	r4, r0
 8013d0e:	460d      	mov	r5, r1
 8013d10:	f340 8086 	ble.w	8013e20 <__kernel_tan+0x3a0>
 8013d14:	4630      	mov	r0, r6
 8013d16:	f7ec fc25 	bl	8000564 <__aeabi_i2d>
 8013d1a:	4622      	mov	r2, r4
 8013d1c:	4680      	mov	r8, r0
 8013d1e:	4689      	mov	r9, r1
 8013d20:	462b      	mov	r3, r5
 8013d22:	4620      	mov	r0, r4
 8013d24:	4629      	mov	r1, r5
 8013d26:	f7ec fc87 	bl	8000638 <__aeabi_dmul>
 8013d2a:	4642      	mov	r2, r8
 8013d2c:	4606      	mov	r6, r0
 8013d2e:	460f      	mov	r7, r1
 8013d30:	464b      	mov	r3, r9
 8013d32:	4620      	mov	r0, r4
 8013d34:	4629      	mov	r1, r5
 8013d36:	f7ec fac9 	bl	80002cc <__adddf3>
 8013d3a:	4602      	mov	r2, r0
 8013d3c:	460b      	mov	r3, r1
 8013d3e:	4630      	mov	r0, r6
 8013d40:	4639      	mov	r1, r7
 8013d42:	f7ec fda3 	bl	800088c <__aeabi_ddiv>
 8013d46:	ec53 2b18 	vmov	r2, r3, d8
 8013d4a:	f7ec fabd 	bl	80002c8 <__aeabi_dsub>
 8013d4e:	4602      	mov	r2, r0
 8013d50:	460b      	mov	r3, r1
 8013d52:	4650      	mov	r0, sl
 8013d54:	4659      	mov	r1, fp
 8013d56:	f7ec fab7 	bl	80002c8 <__aeabi_dsub>
 8013d5a:	4602      	mov	r2, r0
 8013d5c:	460b      	mov	r3, r1
 8013d5e:	f7ec fab5 	bl	80002cc <__adddf3>
 8013d62:	4602      	mov	r2, r0
 8013d64:	460b      	mov	r3, r1
 8013d66:	4640      	mov	r0, r8
 8013d68:	4649      	mov	r1, r9
 8013d6a:	f7ec faad 	bl	80002c8 <__aeabi_dsub>
 8013d6e:	9b00      	ldr	r3, [sp, #0]
 8013d70:	ea4f 7aa3 	mov.w	sl, r3, asr #30
 8013d74:	f00a 0a02 	and.w	sl, sl, #2
 8013d78:	4604      	mov	r4, r0
 8013d7a:	f1ca 0001 	rsb	r0, sl, #1
 8013d7e:	460d      	mov	r5, r1
 8013d80:	f7ec fbf0 	bl	8000564 <__aeabi_i2d>
 8013d84:	4602      	mov	r2, r0
 8013d86:	460b      	mov	r3, r1
 8013d88:	4620      	mov	r0, r4
 8013d8a:	4629      	mov	r1, r5
 8013d8c:	f7ec fc54 	bl	8000638 <__aeabi_dmul>
 8013d90:	e69f      	b.n	8013ad2 <__kernel_tan+0x52>
 8013d92:	bf00      	nop
 8013d94:	f3af 8000 	nop.w
 8013d98:	54442d18 	.word	0x54442d18
 8013d9c:	3fe921fb 	.word	0x3fe921fb
 8013da0:	33145c07 	.word	0x33145c07
 8013da4:	3c81a626 	.word	0x3c81a626
 8013da8:	74bf7ad4 	.word	0x74bf7ad4
 8013dac:	3efb2a70 	.word	0x3efb2a70
 8013db0:	32f0a7e9 	.word	0x32f0a7e9
 8013db4:	3f12b80f 	.word	0x3f12b80f
 8013db8:	1a8d1068 	.word	0x1a8d1068
 8013dbc:	3f3026f7 	.word	0x3f3026f7
 8013dc0:	fee08315 	.word	0xfee08315
 8013dc4:	3f57dbc8 	.word	0x3f57dbc8
 8013dc8:	e96e8493 	.word	0xe96e8493
 8013dcc:	3f8226e3 	.word	0x3f8226e3
 8013dd0:	1bb341fe 	.word	0x1bb341fe
 8013dd4:	3faba1ba 	.word	0x3faba1ba
 8013dd8:	db605373 	.word	0xdb605373
 8013ddc:	bef375cb 	.word	0xbef375cb
 8013de0:	a03792a6 	.word	0xa03792a6
 8013de4:	3f147e88 	.word	0x3f147e88
 8013de8:	f2f26501 	.word	0xf2f26501
 8013dec:	3f4344d8 	.word	0x3f4344d8
 8013df0:	c9560328 	.word	0xc9560328
 8013df4:	3f6d6d22 	.word	0x3f6d6d22
 8013df8:	8406d637 	.word	0x8406d637
 8013dfc:	3f9664f4 	.word	0x3f9664f4
 8013e00:	1110fe7a 	.word	0x1110fe7a
 8013e04:	3fc11111 	.word	0x3fc11111
 8013e08:	55555563 	.word	0x55555563
 8013e0c:	3fd55555 	.word	0x3fd55555
 8013e10:	3e2fffff 	.word	0x3e2fffff
 8013e14:	3ff00000 	.word	0x3ff00000
 8013e18:	bff00000 	.word	0xbff00000
 8013e1c:	3fe59427 	.word	0x3fe59427
 8013e20:	2e01      	cmp	r6, #1
 8013e22:	d02f      	beq.n	8013e84 <__kernel_tan+0x404>
 8013e24:	460f      	mov	r7, r1
 8013e26:	4602      	mov	r2, r0
 8013e28:	460b      	mov	r3, r1
 8013e2a:	4689      	mov	r9, r1
 8013e2c:	2000      	movs	r0, #0
 8013e2e:	4917      	ldr	r1, [pc, #92]	; (8013e8c <__kernel_tan+0x40c>)
 8013e30:	f7ec fd2c 	bl	800088c <__aeabi_ddiv>
 8013e34:	2600      	movs	r6, #0
 8013e36:	e9cd 0100 	strd	r0, r1, [sp]
 8013e3a:	4652      	mov	r2, sl
 8013e3c:	465b      	mov	r3, fp
 8013e3e:	4630      	mov	r0, r6
 8013e40:	4639      	mov	r1, r7
 8013e42:	f7ec fa41 	bl	80002c8 <__aeabi_dsub>
 8013e46:	e9dd 4500 	ldrd	r4, r5, [sp]
 8013e4a:	4602      	mov	r2, r0
 8013e4c:	460b      	mov	r3, r1
 8013e4e:	ec51 0b18 	vmov	r0, r1, d8
 8013e52:	f7ec fa39 	bl	80002c8 <__aeabi_dsub>
 8013e56:	4632      	mov	r2, r6
 8013e58:	462b      	mov	r3, r5
 8013e5a:	f7ec fbed 	bl	8000638 <__aeabi_dmul>
 8013e5e:	46b0      	mov	r8, r6
 8013e60:	460f      	mov	r7, r1
 8013e62:	4642      	mov	r2, r8
 8013e64:	462b      	mov	r3, r5
 8013e66:	4634      	mov	r4, r6
 8013e68:	4649      	mov	r1, r9
 8013e6a:	4606      	mov	r6, r0
 8013e6c:	4640      	mov	r0, r8
 8013e6e:	f7ec fbe3 	bl	8000638 <__aeabi_dmul>
 8013e72:	4b07      	ldr	r3, [pc, #28]	; (8013e90 <__kernel_tan+0x410>)
 8013e74:	2200      	movs	r2, #0
 8013e76:	f7ec fa29 	bl	80002cc <__adddf3>
 8013e7a:	4602      	mov	r2, r0
 8013e7c:	460b      	mov	r3, r1
 8013e7e:	4630      	mov	r0, r6
 8013e80:	4639      	mov	r1, r7
 8013e82:	e665      	b.n	8013b50 <__kernel_tan+0xd0>
 8013e84:	4682      	mov	sl, r0
 8013e86:	468b      	mov	fp, r1
 8013e88:	e625      	b.n	8013ad6 <__kernel_tan+0x56>
 8013e8a:	bf00      	nop
 8013e8c:	bff00000 	.word	0xbff00000
 8013e90:	3ff00000 	.word	0x3ff00000

08013e94 <fabs>:
 8013e94:	ec51 0b10 	vmov	r0, r1, d0
 8013e98:	ee10 2a10 	vmov	r2, s0
 8013e9c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8013ea0:	ec43 2b10 	vmov	d0, r2, r3
 8013ea4:	4770      	bx	lr
	...

08013ea8 <floor>:
 8013ea8:	ec51 0b10 	vmov	r0, r1, d0
 8013eac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013eb0:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8013eb4:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8013eb8:	2e13      	cmp	r6, #19
 8013eba:	ee10 5a10 	vmov	r5, s0
 8013ebe:	ee10 8a10 	vmov	r8, s0
 8013ec2:	460c      	mov	r4, r1
 8013ec4:	dc32      	bgt.n	8013f2c <floor+0x84>
 8013ec6:	2e00      	cmp	r6, #0
 8013ec8:	da14      	bge.n	8013ef4 <floor+0x4c>
 8013eca:	a333      	add	r3, pc, #204	; (adr r3, 8013f98 <floor+0xf0>)
 8013ecc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013ed0:	f7ec f9fc 	bl	80002cc <__adddf3>
 8013ed4:	2200      	movs	r2, #0
 8013ed6:	2300      	movs	r3, #0
 8013ed8:	f7ec fe3e 	bl	8000b58 <__aeabi_dcmpgt>
 8013edc:	b138      	cbz	r0, 8013eee <floor+0x46>
 8013ede:	2c00      	cmp	r4, #0
 8013ee0:	da57      	bge.n	8013f92 <floor+0xea>
 8013ee2:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8013ee6:	431d      	orrs	r5, r3
 8013ee8:	d001      	beq.n	8013eee <floor+0x46>
 8013eea:	4c2d      	ldr	r4, [pc, #180]	; (8013fa0 <floor+0xf8>)
 8013eec:	2500      	movs	r5, #0
 8013eee:	4621      	mov	r1, r4
 8013ef0:	4628      	mov	r0, r5
 8013ef2:	e025      	b.n	8013f40 <floor+0x98>
 8013ef4:	4f2b      	ldr	r7, [pc, #172]	; (8013fa4 <floor+0xfc>)
 8013ef6:	4137      	asrs	r7, r6
 8013ef8:	ea01 0307 	and.w	r3, r1, r7
 8013efc:	4303      	orrs	r3, r0
 8013efe:	d01f      	beq.n	8013f40 <floor+0x98>
 8013f00:	a325      	add	r3, pc, #148	; (adr r3, 8013f98 <floor+0xf0>)
 8013f02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013f06:	f7ec f9e1 	bl	80002cc <__adddf3>
 8013f0a:	2200      	movs	r2, #0
 8013f0c:	2300      	movs	r3, #0
 8013f0e:	f7ec fe23 	bl	8000b58 <__aeabi_dcmpgt>
 8013f12:	2800      	cmp	r0, #0
 8013f14:	d0eb      	beq.n	8013eee <floor+0x46>
 8013f16:	2c00      	cmp	r4, #0
 8013f18:	bfbe      	ittt	lt
 8013f1a:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8013f1e:	fa43 f606 	asrlt.w	r6, r3, r6
 8013f22:	19a4      	addlt	r4, r4, r6
 8013f24:	ea24 0407 	bic.w	r4, r4, r7
 8013f28:	2500      	movs	r5, #0
 8013f2a:	e7e0      	b.n	8013eee <floor+0x46>
 8013f2c:	2e33      	cmp	r6, #51	; 0x33
 8013f2e:	dd0b      	ble.n	8013f48 <floor+0xa0>
 8013f30:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8013f34:	d104      	bne.n	8013f40 <floor+0x98>
 8013f36:	ee10 2a10 	vmov	r2, s0
 8013f3a:	460b      	mov	r3, r1
 8013f3c:	f7ec f9c6 	bl	80002cc <__adddf3>
 8013f40:	ec41 0b10 	vmov	d0, r0, r1
 8013f44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013f48:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 8013f4c:	f04f 33ff 	mov.w	r3, #4294967295
 8013f50:	fa23 f707 	lsr.w	r7, r3, r7
 8013f54:	4207      	tst	r7, r0
 8013f56:	d0f3      	beq.n	8013f40 <floor+0x98>
 8013f58:	a30f      	add	r3, pc, #60	; (adr r3, 8013f98 <floor+0xf0>)
 8013f5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013f5e:	f7ec f9b5 	bl	80002cc <__adddf3>
 8013f62:	2200      	movs	r2, #0
 8013f64:	2300      	movs	r3, #0
 8013f66:	f7ec fdf7 	bl	8000b58 <__aeabi_dcmpgt>
 8013f6a:	2800      	cmp	r0, #0
 8013f6c:	d0bf      	beq.n	8013eee <floor+0x46>
 8013f6e:	2c00      	cmp	r4, #0
 8013f70:	da02      	bge.n	8013f78 <floor+0xd0>
 8013f72:	2e14      	cmp	r6, #20
 8013f74:	d103      	bne.n	8013f7e <floor+0xd6>
 8013f76:	3401      	adds	r4, #1
 8013f78:	ea25 0507 	bic.w	r5, r5, r7
 8013f7c:	e7b7      	b.n	8013eee <floor+0x46>
 8013f7e:	2301      	movs	r3, #1
 8013f80:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8013f84:	fa03 f606 	lsl.w	r6, r3, r6
 8013f88:	4435      	add	r5, r6
 8013f8a:	4545      	cmp	r5, r8
 8013f8c:	bf38      	it	cc
 8013f8e:	18e4      	addcc	r4, r4, r3
 8013f90:	e7f2      	b.n	8013f78 <floor+0xd0>
 8013f92:	2500      	movs	r5, #0
 8013f94:	462c      	mov	r4, r5
 8013f96:	e7aa      	b.n	8013eee <floor+0x46>
 8013f98:	8800759c 	.word	0x8800759c
 8013f9c:	7e37e43c 	.word	0x7e37e43c
 8013fa0:	bff00000 	.word	0xbff00000
 8013fa4:	000fffff 	.word	0x000fffff

08013fa8 <scalbn>:
 8013fa8:	b570      	push	{r4, r5, r6, lr}
 8013faa:	ec55 4b10 	vmov	r4, r5, d0
 8013fae:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8013fb2:	4606      	mov	r6, r0
 8013fb4:	462b      	mov	r3, r5
 8013fb6:	b99a      	cbnz	r2, 8013fe0 <scalbn+0x38>
 8013fb8:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8013fbc:	4323      	orrs	r3, r4
 8013fbe:	d036      	beq.n	801402e <scalbn+0x86>
 8013fc0:	4b39      	ldr	r3, [pc, #228]	; (80140a8 <scalbn+0x100>)
 8013fc2:	4629      	mov	r1, r5
 8013fc4:	ee10 0a10 	vmov	r0, s0
 8013fc8:	2200      	movs	r2, #0
 8013fca:	f7ec fb35 	bl	8000638 <__aeabi_dmul>
 8013fce:	4b37      	ldr	r3, [pc, #220]	; (80140ac <scalbn+0x104>)
 8013fd0:	429e      	cmp	r6, r3
 8013fd2:	4604      	mov	r4, r0
 8013fd4:	460d      	mov	r5, r1
 8013fd6:	da10      	bge.n	8013ffa <scalbn+0x52>
 8013fd8:	a32b      	add	r3, pc, #172	; (adr r3, 8014088 <scalbn+0xe0>)
 8013fda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013fde:	e03a      	b.n	8014056 <scalbn+0xae>
 8013fe0:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8013fe4:	428a      	cmp	r2, r1
 8013fe6:	d10c      	bne.n	8014002 <scalbn+0x5a>
 8013fe8:	ee10 2a10 	vmov	r2, s0
 8013fec:	4620      	mov	r0, r4
 8013fee:	4629      	mov	r1, r5
 8013ff0:	f7ec f96c 	bl	80002cc <__adddf3>
 8013ff4:	4604      	mov	r4, r0
 8013ff6:	460d      	mov	r5, r1
 8013ff8:	e019      	b.n	801402e <scalbn+0x86>
 8013ffa:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8013ffe:	460b      	mov	r3, r1
 8014000:	3a36      	subs	r2, #54	; 0x36
 8014002:	4432      	add	r2, r6
 8014004:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8014008:	428a      	cmp	r2, r1
 801400a:	dd08      	ble.n	801401e <scalbn+0x76>
 801400c:	2d00      	cmp	r5, #0
 801400e:	a120      	add	r1, pc, #128	; (adr r1, 8014090 <scalbn+0xe8>)
 8014010:	e9d1 0100 	ldrd	r0, r1, [r1]
 8014014:	da1c      	bge.n	8014050 <scalbn+0xa8>
 8014016:	a120      	add	r1, pc, #128	; (adr r1, 8014098 <scalbn+0xf0>)
 8014018:	e9d1 0100 	ldrd	r0, r1, [r1]
 801401c:	e018      	b.n	8014050 <scalbn+0xa8>
 801401e:	2a00      	cmp	r2, #0
 8014020:	dd08      	ble.n	8014034 <scalbn+0x8c>
 8014022:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8014026:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801402a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 801402e:	ec45 4b10 	vmov	d0, r4, r5
 8014032:	bd70      	pop	{r4, r5, r6, pc}
 8014034:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8014038:	da19      	bge.n	801406e <scalbn+0xc6>
 801403a:	f24c 3350 	movw	r3, #50000	; 0xc350
 801403e:	429e      	cmp	r6, r3
 8014040:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 8014044:	dd0a      	ble.n	801405c <scalbn+0xb4>
 8014046:	a112      	add	r1, pc, #72	; (adr r1, 8014090 <scalbn+0xe8>)
 8014048:	e9d1 0100 	ldrd	r0, r1, [r1]
 801404c:	2b00      	cmp	r3, #0
 801404e:	d1e2      	bne.n	8014016 <scalbn+0x6e>
 8014050:	a30f      	add	r3, pc, #60	; (adr r3, 8014090 <scalbn+0xe8>)
 8014052:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014056:	f7ec faef 	bl	8000638 <__aeabi_dmul>
 801405a:	e7cb      	b.n	8013ff4 <scalbn+0x4c>
 801405c:	a10a      	add	r1, pc, #40	; (adr r1, 8014088 <scalbn+0xe0>)
 801405e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8014062:	2b00      	cmp	r3, #0
 8014064:	d0b8      	beq.n	8013fd8 <scalbn+0x30>
 8014066:	a10e      	add	r1, pc, #56	; (adr r1, 80140a0 <scalbn+0xf8>)
 8014068:	e9d1 0100 	ldrd	r0, r1, [r1]
 801406c:	e7b4      	b.n	8013fd8 <scalbn+0x30>
 801406e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8014072:	3236      	adds	r2, #54	; 0x36
 8014074:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8014078:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 801407c:	4620      	mov	r0, r4
 801407e:	4b0c      	ldr	r3, [pc, #48]	; (80140b0 <scalbn+0x108>)
 8014080:	2200      	movs	r2, #0
 8014082:	e7e8      	b.n	8014056 <scalbn+0xae>
 8014084:	f3af 8000 	nop.w
 8014088:	c2f8f359 	.word	0xc2f8f359
 801408c:	01a56e1f 	.word	0x01a56e1f
 8014090:	8800759c 	.word	0x8800759c
 8014094:	7e37e43c 	.word	0x7e37e43c
 8014098:	8800759c 	.word	0x8800759c
 801409c:	fe37e43c 	.word	0xfe37e43c
 80140a0:	c2f8f359 	.word	0xc2f8f359
 80140a4:	81a56e1f 	.word	0x81a56e1f
 80140a8:	43500000 	.word	0x43500000
 80140ac:	ffff3cb0 	.word	0xffff3cb0
 80140b0:	3c900000 	.word	0x3c900000

080140b4 <nanf>:
 80140b4:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80140bc <nanf+0x8>
 80140b8:	4770      	bx	lr
 80140ba:	bf00      	nop
 80140bc:	7fc00000 	.word	0x7fc00000

080140c0 <_init>:
 80140c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80140c2:	bf00      	nop
 80140c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80140c6:	bc08      	pop	{r3}
 80140c8:	469e      	mov	lr, r3
 80140ca:	4770      	bx	lr

080140cc <_fini>:
 80140cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80140ce:	bf00      	nop
 80140d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80140d2:	bc08      	pop	{r3}
 80140d4:	469e      	mov	lr, r3
 80140d6:	4770      	bx	lr
