
DroneLab.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000145fc  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000760  080147d0  080147d0  000247d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08014f30  08014f30  000303d8  2**0
                  CONTENTS
  4 .ARM          00000008  08014f30  08014f30  00024f30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08014f38  08014f38  000303d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08014f38  08014f38  00024f38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08014f3c  08014f3c  00024f3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000003d8  20000000  08014f40  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002288  200003d8  08015318  000303d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002660  08015318  00032660  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000303d8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00030bb0  00000000  00000000  00030408  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000055f9  00000000  00000000  00060fb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000029e0  00000000  00000000  000665b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00002740  00000000  00000000  00068f98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000294e6  00000000  00000000  0006b6d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002acb4  00000000  00000000  00094bbe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e2450  00000000  00000000  000bf872  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001a1cc2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000c648  00000000  00000000  001a1d14  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200003d8 	.word	0x200003d8
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080147b4 	.word	0x080147b4

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200003dc 	.word	0x200003dc
 800020c:	080147b4 	.word	0x080147b4

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b974 	b.w	8000f88 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f806 	bl	8000cb8 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__udivmoddi4>:
 8000cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cbc:	9d08      	ldr	r5, [sp, #32]
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	468e      	mov	lr, r1
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d14d      	bne.n	8000d62 <__udivmoddi4+0xaa>
 8000cc6:	428a      	cmp	r2, r1
 8000cc8:	4694      	mov	ip, r2
 8000cca:	d969      	bls.n	8000da0 <__udivmoddi4+0xe8>
 8000ccc:	fab2 f282 	clz	r2, r2
 8000cd0:	b152      	cbz	r2, 8000ce8 <__udivmoddi4+0x30>
 8000cd2:	fa01 f302 	lsl.w	r3, r1, r2
 8000cd6:	f1c2 0120 	rsb	r1, r2, #32
 8000cda:	fa20 f101 	lsr.w	r1, r0, r1
 8000cde:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ce2:	ea41 0e03 	orr.w	lr, r1, r3
 8000ce6:	4094      	lsls	r4, r2
 8000ce8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cec:	0c21      	lsrs	r1, r4, #16
 8000cee:	fbbe f6f8 	udiv	r6, lr, r8
 8000cf2:	fa1f f78c 	uxth.w	r7, ip
 8000cf6:	fb08 e316 	mls	r3, r8, r6, lr
 8000cfa:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000cfe:	fb06 f107 	mul.w	r1, r6, r7
 8000d02:	4299      	cmp	r1, r3
 8000d04:	d90a      	bls.n	8000d1c <__udivmoddi4+0x64>
 8000d06:	eb1c 0303 	adds.w	r3, ip, r3
 8000d0a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d0e:	f080 811f 	bcs.w	8000f50 <__udivmoddi4+0x298>
 8000d12:	4299      	cmp	r1, r3
 8000d14:	f240 811c 	bls.w	8000f50 <__udivmoddi4+0x298>
 8000d18:	3e02      	subs	r6, #2
 8000d1a:	4463      	add	r3, ip
 8000d1c:	1a5b      	subs	r3, r3, r1
 8000d1e:	b2a4      	uxth	r4, r4
 8000d20:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d24:	fb08 3310 	mls	r3, r8, r0, r3
 8000d28:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d2c:	fb00 f707 	mul.w	r7, r0, r7
 8000d30:	42a7      	cmp	r7, r4
 8000d32:	d90a      	bls.n	8000d4a <__udivmoddi4+0x92>
 8000d34:	eb1c 0404 	adds.w	r4, ip, r4
 8000d38:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d3c:	f080 810a 	bcs.w	8000f54 <__udivmoddi4+0x29c>
 8000d40:	42a7      	cmp	r7, r4
 8000d42:	f240 8107 	bls.w	8000f54 <__udivmoddi4+0x29c>
 8000d46:	4464      	add	r4, ip
 8000d48:	3802      	subs	r0, #2
 8000d4a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d4e:	1be4      	subs	r4, r4, r7
 8000d50:	2600      	movs	r6, #0
 8000d52:	b11d      	cbz	r5, 8000d5c <__udivmoddi4+0xa4>
 8000d54:	40d4      	lsrs	r4, r2
 8000d56:	2300      	movs	r3, #0
 8000d58:	e9c5 4300 	strd	r4, r3, [r5]
 8000d5c:	4631      	mov	r1, r6
 8000d5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d62:	428b      	cmp	r3, r1
 8000d64:	d909      	bls.n	8000d7a <__udivmoddi4+0xc2>
 8000d66:	2d00      	cmp	r5, #0
 8000d68:	f000 80ef 	beq.w	8000f4a <__udivmoddi4+0x292>
 8000d6c:	2600      	movs	r6, #0
 8000d6e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d72:	4630      	mov	r0, r6
 8000d74:	4631      	mov	r1, r6
 8000d76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d7a:	fab3 f683 	clz	r6, r3
 8000d7e:	2e00      	cmp	r6, #0
 8000d80:	d14a      	bne.n	8000e18 <__udivmoddi4+0x160>
 8000d82:	428b      	cmp	r3, r1
 8000d84:	d302      	bcc.n	8000d8c <__udivmoddi4+0xd4>
 8000d86:	4282      	cmp	r2, r0
 8000d88:	f200 80f9 	bhi.w	8000f7e <__udivmoddi4+0x2c6>
 8000d8c:	1a84      	subs	r4, r0, r2
 8000d8e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d92:	2001      	movs	r0, #1
 8000d94:	469e      	mov	lr, r3
 8000d96:	2d00      	cmp	r5, #0
 8000d98:	d0e0      	beq.n	8000d5c <__udivmoddi4+0xa4>
 8000d9a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d9e:	e7dd      	b.n	8000d5c <__udivmoddi4+0xa4>
 8000da0:	b902      	cbnz	r2, 8000da4 <__udivmoddi4+0xec>
 8000da2:	deff      	udf	#255	; 0xff
 8000da4:	fab2 f282 	clz	r2, r2
 8000da8:	2a00      	cmp	r2, #0
 8000daa:	f040 8092 	bne.w	8000ed2 <__udivmoddi4+0x21a>
 8000dae:	eba1 010c 	sub.w	r1, r1, ip
 8000db2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000db6:	fa1f fe8c 	uxth.w	lr, ip
 8000dba:	2601      	movs	r6, #1
 8000dbc:	0c20      	lsrs	r0, r4, #16
 8000dbe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000dc2:	fb07 1113 	mls	r1, r7, r3, r1
 8000dc6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dca:	fb0e f003 	mul.w	r0, lr, r3
 8000dce:	4288      	cmp	r0, r1
 8000dd0:	d908      	bls.n	8000de4 <__udivmoddi4+0x12c>
 8000dd2:	eb1c 0101 	adds.w	r1, ip, r1
 8000dd6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000dda:	d202      	bcs.n	8000de2 <__udivmoddi4+0x12a>
 8000ddc:	4288      	cmp	r0, r1
 8000dde:	f200 80cb 	bhi.w	8000f78 <__udivmoddi4+0x2c0>
 8000de2:	4643      	mov	r3, r8
 8000de4:	1a09      	subs	r1, r1, r0
 8000de6:	b2a4      	uxth	r4, r4
 8000de8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dec:	fb07 1110 	mls	r1, r7, r0, r1
 8000df0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000df4:	fb0e fe00 	mul.w	lr, lr, r0
 8000df8:	45a6      	cmp	lr, r4
 8000dfa:	d908      	bls.n	8000e0e <__udivmoddi4+0x156>
 8000dfc:	eb1c 0404 	adds.w	r4, ip, r4
 8000e00:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e04:	d202      	bcs.n	8000e0c <__udivmoddi4+0x154>
 8000e06:	45a6      	cmp	lr, r4
 8000e08:	f200 80bb 	bhi.w	8000f82 <__udivmoddi4+0x2ca>
 8000e0c:	4608      	mov	r0, r1
 8000e0e:	eba4 040e 	sub.w	r4, r4, lr
 8000e12:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e16:	e79c      	b.n	8000d52 <__udivmoddi4+0x9a>
 8000e18:	f1c6 0720 	rsb	r7, r6, #32
 8000e1c:	40b3      	lsls	r3, r6
 8000e1e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e22:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e26:	fa20 f407 	lsr.w	r4, r0, r7
 8000e2a:	fa01 f306 	lsl.w	r3, r1, r6
 8000e2e:	431c      	orrs	r4, r3
 8000e30:	40f9      	lsrs	r1, r7
 8000e32:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e36:	fa00 f306 	lsl.w	r3, r0, r6
 8000e3a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e3e:	0c20      	lsrs	r0, r4, #16
 8000e40:	fa1f fe8c 	uxth.w	lr, ip
 8000e44:	fb09 1118 	mls	r1, r9, r8, r1
 8000e48:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e4c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e50:	4288      	cmp	r0, r1
 8000e52:	fa02 f206 	lsl.w	r2, r2, r6
 8000e56:	d90b      	bls.n	8000e70 <__udivmoddi4+0x1b8>
 8000e58:	eb1c 0101 	adds.w	r1, ip, r1
 8000e5c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e60:	f080 8088 	bcs.w	8000f74 <__udivmoddi4+0x2bc>
 8000e64:	4288      	cmp	r0, r1
 8000e66:	f240 8085 	bls.w	8000f74 <__udivmoddi4+0x2bc>
 8000e6a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e6e:	4461      	add	r1, ip
 8000e70:	1a09      	subs	r1, r1, r0
 8000e72:	b2a4      	uxth	r4, r4
 8000e74:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e78:	fb09 1110 	mls	r1, r9, r0, r1
 8000e7c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e80:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e84:	458e      	cmp	lr, r1
 8000e86:	d908      	bls.n	8000e9a <__udivmoddi4+0x1e2>
 8000e88:	eb1c 0101 	adds.w	r1, ip, r1
 8000e8c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e90:	d26c      	bcs.n	8000f6c <__udivmoddi4+0x2b4>
 8000e92:	458e      	cmp	lr, r1
 8000e94:	d96a      	bls.n	8000f6c <__udivmoddi4+0x2b4>
 8000e96:	3802      	subs	r0, #2
 8000e98:	4461      	add	r1, ip
 8000e9a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e9e:	fba0 9402 	umull	r9, r4, r0, r2
 8000ea2:	eba1 010e 	sub.w	r1, r1, lr
 8000ea6:	42a1      	cmp	r1, r4
 8000ea8:	46c8      	mov	r8, r9
 8000eaa:	46a6      	mov	lr, r4
 8000eac:	d356      	bcc.n	8000f5c <__udivmoddi4+0x2a4>
 8000eae:	d053      	beq.n	8000f58 <__udivmoddi4+0x2a0>
 8000eb0:	b15d      	cbz	r5, 8000eca <__udivmoddi4+0x212>
 8000eb2:	ebb3 0208 	subs.w	r2, r3, r8
 8000eb6:	eb61 010e 	sbc.w	r1, r1, lr
 8000eba:	fa01 f707 	lsl.w	r7, r1, r7
 8000ebe:	fa22 f306 	lsr.w	r3, r2, r6
 8000ec2:	40f1      	lsrs	r1, r6
 8000ec4:	431f      	orrs	r7, r3
 8000ec6:	e9c5 7100 	strd	r7, r1, [r5]
 8000eca:	2600      	movs	r6, #0
 8000ecc:	4631      	mov	r1, r6
 8000ece:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ed2:	f1c2 0320 	rsb	r3, r2, #32
 8000ed6:	40d8      	lsrs	r0, r3
 8000ed8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000edc:	fa21 f303 	lsr.w	r3, r1, r3
 8000ee0:	4091      	lsls	r1, r2
 8000ee2:	4301      	orrs	r1, r0
 8000ee4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ee8:	fa1f fe8c 	uxth.w	lr, ip
 8000eec:	fbb3 f0f7 	udiv	r0, r3, r7
 8000ef0:	fb07 3610 	mls	r6, r7, r0, r3
 8000ef4:	0c0b      	lsrs	r3, r1, #16
 8000ef6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000efa:	fb00 f60e 	mul.w	r6, r0, lr
 8000efe:	429e      	cmp	r6, r3
 8000f00:	fa04 f402 	lsl.w	r4, r4, r2
 8000f04:	d908      	bls.n	8000f18 <__udivmoddi4+0x260>
 8000f06:	eb1c 0303 	adds.w	r3, ip, r3
 8000f0a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f0e:	d22f      	bcs.n	8000f70 <__udivmoddi4+0x2b8>
 8000f10:	429e      	cmp	r6, r3
 8000f12:	d92d      	bls.n	8000f70 <__udivmoddi4+0x2b8>
 8000f14:	3802      	subs	r0, #2
 8000f16:	4463      	add	r3, ip
 8000f18:	1b9b      	subs	r3, r3, r6
 8000f1a:	b289      	uxth	r1, r1
 8000f1c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f20:	fb07 3316 	mls	r3, r7, r6, r3
 8000f24:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f28:	fb06 f30e 	mul.w	r3, r6, lr
 8000f2c:	428b      	cmp	r3, r1
 8000f2e:	d908      	bls.n	8000f42 <__udivmoddi4+0x28a>
 8000f30:	eb1c 0101 	adds.w	r1, ip, r1
 8000f34:	f106 38ff 	add.w	r8, r6, #4294967295
 8000f38:	d216      	bcs.n	8000f68 <__udivmoddi4+0x2b0>
 8000f3a:	428b      	cmp	r3, r1
 8000f3c:	d914      	bls.n	8000f68 <__udivmoddi4+0x2b0>
 8000f3e:	3e02      	subs	r6, #2
 8000f40:	4461      	add	r1, ip
 8000f42:	1ac9      	subs	r1, r1, r3
 8000f44:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f48:	e738      	b.n	8000dbc <__udivmoddi4+0x104>
 8000f4a:	462e      	mov	r6, r5
 8000f4c:	4628      	mov	r0, r5
 8000f4e:	e705      	b.n	8000d5c <__udivmoddi4+0xa4>
 8000f50:	4606      	mov	r6, r0
 8000f52:	e6e3      	b.n	8000d1c <__udivmoddi4+0x64>
 8000f54:	4618      	mov	r0, r3
 8000f56:	e6f8      	b.n	8000d4a <__udivmoddi4+0x92>
 8000f58:	454b      	cmp	r3, r9
 8000f5a:	d2a9      	bcs.n	8000eb0 <__udivmoddi4+0x1f8>
 8000f5c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f60:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f64:	3801      	subs	r0, #1
 8000f66:	e7a3      	b.n	8000eb0 <__udivmoddi4+0x1f8>
 8000f68:	4646      	mov	r6, r8
 8000f6a:	e7ea      	b.n	8000f42 <__udivmoddi4+0x28a>
 8000f6c:	4620      	mov	r0, r4
 8000f6e:	e794      	b.n	8000e9a <__udivmoddi4+0x1e2>
 8000f70:	4640      	mov	r0, r8
 8000f72:	e7d1      	b.n	8000f18 <__udivmoddi4+0x260>
 8000f74:	46d0      	mov	r8, sl
 8000f76:	e77b      	b.n	8000e70 <__udivmoddi4+0x1b8>
 8000f78:	3b02      	subs	r3, #2
 8000f7a:	4461      	add	r1, ip
 8000f7c:	e732      	b.n	8000de4 <__udivmoddi4+0x12c>
 8000f7e:	4630      	mov	r0, r6
 8000f80:	e709      	b.n	8000d96 <__udivmoddi4+0xde>
 8000f82:	4464      	add	r4, ip
 8000f84:	3802      	subs	r0, #2
 8000f86:	e742      	b.n	8000e0e <__udivmoddi4+0x156>

08000f88 <__aeabi_idiv0>:
 8000f88:	4770      	bx	lr
 8000f8a:	bf00      	nop

08000f8c <CONFIGURATION_Start>:
#include "dshot.h"

uint16_t motors[4] = {0, 0, 0, 0};

void CONFIGURATION_Start(uint8_t* buffer)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b086      	sub	sp, #24
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	6078      	str	r0, [r7, #4]
	while(1)
	{
		uint32_t motor0 = buffer[0] * 1000 + buffer[1] * 100 + buffer[2] * 10 + buffer[3];
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	781b      	ldrb	r3, [r3, #0]
 8000f98:	461a      	mov	r2, r3
 8000f9a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f9e:	fb03 f202 	mul.w	r2, r3, r2
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	3301      	adds	r3, #1
 8000fa6:	781b      	ldrb	r3, [r3, #0]
 8000fa8:	4619      	mov	r1, r3
 8000faa:	2364      	movs	r3, #100	; 0x64
 8000fac:	fb01 f303 	mul.w	r3, r1, r3
 8000fb0:	441a      	add	r2, r3
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	3302      	adds	r3, #2
 8000fb6:	781b      	ldrb	r3, [r3, #0]
 8000fb8:	4619      	mov	r1, r3
 8000fba:	460b      	mov	r3, r1
 8000fbc:	009b      	lsls	r3, r3, #2
 8000fbe:	440b      	add	r3, r1
 8000fc0:	005b      	lsls	r3, r3, #1
 8000fc2:	4413      	add	r3, r2
 8000fc4:	687a      	ldr	r2, [r7, #4]
 8000fc6:	3203      	adds	r2, #3
 8000fc8:	7812      	ldrb	r2, [r2, #0]
 8000fca:	4413      	add	r3, r2
 8000fcc:	617b      	str	r3, [r7, #20]
		uint32_t motor1 = buffer[4] * 1000 + buffer[5] * 100 + buffer[6] * 10 + buffer[7];
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	3304      	adds	r3, #4
 8000fd2:	781b      	ldrb	r3, [r3, #0]
 8000fd4:	461a      	mov	r2, r3
 8000fd6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fda:	fb03 f202 	mul.w	r2, r3, r2
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	3305      	adds	r3, #5
 8000fe2:	781b      	ldrb	r3, [r3, #0]
 8000fe4:	4619      	mov	r1, r3
 8000fe6:	2364      	movs	r3, #100	; 0x64
 8000fe8:	fb01 f303 	mul.w	r3, r1, r3
 8000fec:	441a      	add	r2, r3
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	3306      	adds	r3, #6
 8000ff2:	781b      	ldrb	r3, [r3, #0]
 8000ff4:	4619      	mov	r1, r3
 8000ff6:	460b      	mov	r3, r1
 8000ff8:	009b      	lsls	r3, r3, #2
 8000ffa:	440b      	add	r3, r1
 8000ffc:	005b      	lsls	r3, r3, #1
 8000ffe:	4413      	add	r3, r2
 8001000:	687a      	ldr	r2, [r7, #4]
 8001002:	3207      	adds	r2, #7
 8001004:	7812      	ldrb	r2, [r2, #0]
 8001006:	4413      	add	r3, r2
 8001008:	613b      	str	r3, [r7, #16]
		uint32_t motor2 = buffer[8] * 1000 + buffer[9] * 100 + buffer[10] * 10 + buffer[11];
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	3308      	adds	r3, #8
 800100e:	781b      	ldrb	r3, [r3, #0]
 8001010:	461a      	mov	r2, r3
 8001012:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001016:	fb03 f202 	mul.w	r2, r3, r2
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	3309      	adds	r3, #9
 800101e:	781b      	ldrb	r3, [r3, #0]
 8001020:	4619      	mov	r1, r3
 8001022:	2364      	movs	r3, #100	; 0x64
 8001024:	fb01 f303 	mul.w	r3, r1, r3
 8001028:	441a      	add	r2, r3
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	330a      	adds	r3, #10
 800102e:	781b      	ldrb	r3, [r3, #0]
 8001030:	4619      	mov	r1, r3
 8001032:	460b      	mov	r3, r1
 8001034:	009b      	lsls	r3, r3, #2
 8001036:	440b      	add	r3, r1
 8001038:	005b      	lsls	r3, r3, #1
 800103a:	4413      	add	r3, r2
 800103c:	687a      	ldr	r2, [r7, #4]
 800103e:	320b      	adds	r2, #11
 8001040:	7812      	ldrb	r2, [r2, #0]
 8001042:	4413      	add	r3, r2
 8001044:	60fb      	str	r3, [r7, #12]
		uint32_t motor3 = buffer[12] * 1000 + buffer[13] * 100 + buffer[14] * 10 + buffer[15];
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	330c      	adds	r3, #12
 800104a:	781b      	ldrb	r3, [r3, #0]
 800104c:	461a      	mov	r2, r3
 800104e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001052:	fb03 f202 	mul.w	r2, r3, r2
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	330d      	adds	r3, #13
 800105a:	781b      	ldrb	r3, [r3, #0]
 800105c:	4619      	mov	r1, r3
 800105e:	2364      	movs	r3, #100	; 0x64
 8001060:	fb01 f303 	mul.w	r3, r1, r3
 8001064:	441a      	add	r2, r3
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	330e      	adds	r3, #14
 800106a:	781b      	ldrb	r3, [r3, #0]
 800106c:	4619      	mov	r1, r3
 800106e:	460b      	mov	r3, r1
 8001070:	009b      	lsls	r3, r3, #2
 8001072:	440b      	add	r3, r1
 8001074:	005b      	lsls	r3, r3, #1
 8001076:	4413      	add	r3, r2
 8001078:	687a      	ldr	r2, [r7, #4]
 800107a:	320f      	adds	r2, #15
 800107c:	7812      	ldrb	r2, [r2, #0]
 800107e:	4413      	add	r3, r2
 8001080:	60bb      	str	r3, [r7, #8]

		motors[0] = motor0;
 8001082:	697b      	ldr	r3, [r7, #20]
 8001084:	b29a      	uxth	r2, r3
 8001086:	4b09      	ldr	r3, [pc, #36]	; (80010ac <CONFIGURATION_Start+0x120>)
 8001088:	801a      	strh	r2, [r3, #0]
		motors[1] = motor1;
 800108a:	693b      	ldr	r3, [r7, #16]
 800108c:	b29a      	uxth	r2, r3
 800108e:	4b07      	ldr	r3, [pc, #28]	; (80010ac <CONFIGURATION_Start+0x120>)
 8001090:	805a      	strh	r2, [r3, #2]
		motors[2] = motor2;
 8001092:	68fb      	ldr	r3, [r7, #12]
 8001094:	b29a      	uxth	r2, r3
 8001096:	4b05      	ldr	r3, [pc, #20]	; (80010ac <CONFIGURATION_Start+0x120>)
 8001098:	809a      	strh	r2, [r3, #4]
		motors[3] = motor3;
 800109a:	68bb      	ldr	r3, [r7, #8]
 800109c:	b29a      	uxth	r2, r3
 800109e:	4b03      	ldr	r3, [pc, #12]	; (80010ac <CONFIGURATION_Start+0x120>)
 80010a0:	80da      	strh	r2, [r3, #6]

		dshot_write(motors);
 80010a2:	4802      	ldr	r0, [pc, #8]	; (80010ac <CONFIGURATION_Start+0x120>)
 80010a4:	f000 faa3 	bl	80015ee <dshot_write>
	{
 80010a8:	e774      	b.n	8000f94 <CONFIGURATION_Start+0x8>
 80010aa:	bf00      	nop
 80010ac:	200003f4 	.word	0x200003f4

080010b0 <PID_CONTROLLERS_Roll>:
float Yaw_Error;

//setpoint is desired angle in radians - level mode
//time in millisecond elapsed since last PID calcullation
int PID_CONTROLLERS_Roll(float setpoint, int time)
{
 80010b0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80010b4:	b084      	sub	sp, #16
 80010b6:	af00      	add	r7, sp, #0
 80010b8:	ed87 0a01 	vstr	s0, [r7, #4]
 80010bc:	6038      	str	r0, [r7, #0]
	float output;
	float error = setpoint - DATA_ComplementedAnglesInDegrees.X;
 80010be:	4b4c      	ldr	r3, [pc, #304]	; (80011f0 <PID_CONTROLLERS_Roll+0x140>)
 80010c0:	edd3 7a00 	vldr	s15, [r3]
 80010c4:	ed97 7a01 	vldr	s14, [r7, #4]
 80010c8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80010cc:	edc7 7a03 	vstr	s15, [r7, #12]
	Roll_ITerm += PID_Roll.I * error * time * 0.001; // discrete integration, convert time to seconds
 80010d0:	4b48      	ldr	r3, [pc, #288]	; (80011f4 <PID_CONTROLLERS_Roll+0x144>)
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	4618      	mov	r0, r3
 80010d6:	f7ff fa57 	bl	8000588 <__aeabi_f2d>
 80010da:	4604      	mov	r4, r0
 80010dc:	460d      	mov	r5, r1
 80010de:	4b46      	ldr	r3, [pc, #280]	; (80011f8 <PID_CONTROLLERS_Roll+0x148>)
 80010e0:	ed93 7a01 	vldr	s14, [r3, #4]
 80010e4:	edd7 7a03 	vldr	s15, [r7, #12]
 80010e8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80010ec:	683b      	ldr	r3, [r7, #0]
 80010ee:	ee07 3a90 	vmov	s15, r3
 80010f2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80010f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80010fa:	ee17 0a90 	vmov	r0, s15
 80010fe:	f7ff fa43 	bl	8000588 <__aeabi_f2d>
 8001102:	a339      	add	r3, pc, #228	; (adr r3, 80011e8 <PID_CONTROLLERS_Roll+0x138>)
 8001104:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001108:	f7ff fa96 	bl	8000638 <__aeabi_dmul>
 800110c:	4602      	mov	r2, r0
 800110e:	460b      	mov	r3, r1
 8001110:	4620      	mov	r0, r4
 8001112:	4629      	mov	r1, r5
 8001114:	f7ff f8da 	bl	80002cc <__adddf3>
 8001118:	4602      	mov	r2, r0
 800111a:	460b      	mov	r3, r1
 800111c:	4610      	mov	r0, r2
 800111e:	4619      	mov	r1, r3
 8001120:	f7ff fd62 	bl	8000be8 <__aeabi_d2f>
 8001124:	4603      	mov	r3, r0
 8001126:	4a33      	ldr	r2, [pc, #204]	; (80011f4 <PID_CONTROLLERS_Roll+0x144>)
 8001128:	6013      	str	r3, [r2, #0]

	if(Roll_ITerm > CONFIG_MaximumITerm) // to avoid integral windup set check for maximum ITerm
 800112a:	4b32      	ldr	r3, [pc, #200]	; (80011f4 <PID_CONTROLLERS_Roll+0x144>)
 800112c:	edd3 7a00 	vldr	s15, [r3]
 8001130:	ed9f 7a32 	vldr	s14, [pc, #200]	; 80011fc <PID_CONTROLLERS_Roll+0x14c>
 8001134:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001138:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800113c:	dd06      	ble.n	800114c <PID_CONTROLLERS_Roll+0x9c>
	{
		Roll_ITerm = CONFIG_MaximumITerm;
 800113e:	4b2d      	ldr	r3, [pc, #180]	; (80011f4 <PID_CONTROLLERS_Roll+0x144>)
 8001140:	4a2f      	ldr	r2, [pc, #188]	; (8001200 <PID_CONTROLLERS_Roll+0x150>)
 8001142:	601a      	str	r2, [r3, #0]
		LOGGER_WriteLine("Roll ITerm exceeded maximum value, set to 400", _INFO);
 8001144:	2101      	movs	r1, #1
 8001146:	482f      	ldr	r0, [pc, #188]	; (8001204 <PID_CONTROLLERS_Roll+0x154>)
 8001148:	f000 fd82 	bl	8001c50 <LOGGER_WriteLine>
	}
	output = error * PID_Roll.P + Roll_ITerm + PID_Roll.D * ((error - Roll_Error))/(time * 0.001);
 800114c:	4b2a      	ldr	r3, [pc, #168]	; (80011f8 <PID_CONTROLLERS_Roll+0x148>)
 800114e:	ed93 7a00 	vldr	s14, [r3]
 8001152:	edd7 7a03 	vldr	s15, [r7, #12]
 8001156:	ee27 7a27 	vmul.f32	s14, s14, s15
 800115a:	4b26      	ldr	r3, [pc, #152]	; (80011f4 <PID_CONTROLLERS_Roll+0x144>)
 800115c:	edd3 7a00 	vldr	s15, [r3]
 8001160:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001164:	ee17 0a90 	vmov	r0, s15
 8001168:	f7ff fa0e 	bl	8000588 <__aeabi_f2d>
 800116c:	4604      	mov	r4, r0
 800116e:	460d      	mov	r5, r1
 8001170:	4b21      	ldr	r3, [pc, #132]	; (80011f8 <PID_CONTROLLERS_Roll+0x148>)
 8001172:	ed93 7a02 	vldr	s14, [r3, #8]
 8001176:	4b24      	ldr	r3, [pc, #144]	; (8001208 <PID_CONTROLLERS_Roll+0x158>)
 8001178:	edd3 7a00 	vldr	s15, [r3]
 800117c:	edd7 6a03 	vldr	s13, [r7, #12]
 8001180:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001184:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001188:	ee17 0a90 	vmov	r0, s15
 800118c:	f7ff f9fc 	bl	8000588 <__aeabi_f2d>
 8001190:	4680      	mov	r8, r0
 8001192:	4689      	mov	r9, r1
 8001194:	6838      	ldr	r0, [r7, #0]
 8001196:	f7ff f9e5 	bl	8000564 <__aeabi_i2d>
 800119a:	a313      	add	r3, pc, #76	; (adr r3, 80011e8 <PID_CONTROLLERS_Roll+0x138>)
 800119c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011a0:	f7ff fa4a 	bl	8000638 <__aeabi_dmul>
 80011a4:	4602      	mov	r2, r0
 80011a6:	460b      	mov	r3, r1
 80011a8:	4640      	mov	r0, r8
 80011aa:	4649      	mov	r1, r9
 80011ac:	f7ff fb6e 	bl	800088c <__aeabi_ddiv>
 80011b0:	4602      	mov	r2, r0
 80011b2:	460b      	mov	r3, r1
 80011b4:	4620      	mov	r0, r4
 80011b6:	4629      	mov	r1, r5
 80011b8:	f7ff f888 	bl	80002cc <__adddf3>
 80011bc:	4602      	mov	r2, r0
 80011be:	460b      	mov	r3, r1
 80011c0:	4610      	mov	r0, r2
 80011c2:	4619      	mov	r1, r3
 80011c4:	f7ff fd10 	bl	8000be8 <__aeabi_d2f>
 80011c8:	4603      	mov	r3, r0
 80011ca:	60bb      	str	r3, [r7, #8]

	return output;
 80011cc:	edd7 7a02 	vldr	s15, [r7, #8]
 80011d0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80011d4:	ee17 3a90 	vmov	r3, s15
}
 80011d8:	4618      	mov	r0, r3
 80011da:	3710      	adds	r7, #16
 80011dc:	46bd      	mov	sp, r7
 80011de:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80011e2:	bf00      	nop
 80011e4:	f3af 8000 	nop.w
 80011e8:	d2f1a9fc 	.word	0xd2f1a9fc
 80011ec:	3f50624d 	.word	0x3f50624d
 80011f0:	2000065c 	.word	0x2000065c
 80011f4:	200003fc 	.word	0x200003fc
 80011f8:	20000000 	.word	0x20000000
 80011fc:	43c80000 	.word	0x43c80000
 8001200:	43c80000 	.word	0x43c80000
 8001204:	080147d0 	.word	0x080147d0
 8001208:	20000408 	.word	0x20000408
 800120c:	00000000 	.word	0x00000000

08001210 <PID_CONTROLLERS_Pitch>:

int PID_CONTROLLERS_Pitch(float setpoint,  int time)
{
 8001210:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001214:	b084      	sub	sp, #16
 8001216:	af00      	add	r7, sp, #0
 8001218:	ed87 0a01 	vstr	s0, [r7, #4]
 800121c:	6038      	str	r0, [r7, #0]
	float output;
	float error = setpoint - DATA_ComplementedAnglesInDegrees.Y;
 800121e:	4b4c      	ldr	r3, [pc, #304]	; (8001350 <PID_CONTROLLERS_Pitch+0x140>)
 8001220:	edd3 7a01 	vldr	s15, [r3, #4]
 8001224:	ed97 7a01 	vldr	s14, [r7, #4]
 8001228:	ee77 7a67 	vsub.f32	s15, s14, s15
 800122c:	edc7 7a03 	vstr	s15, [r7, #12]
	Pitch_ITerm += PID_Pitch.I * error * time * 0.001; // discrete integration, convert time to seconds
 8001230:	4b48      	ldr	r3, [pc, #288]	; (8001354 <PID_CONTROLLERS_Pitch+0x144>)
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	4618      	mov	r0, r3
 8001236:	f7ff f9a7 	bl	8000588 <__aeabi_f2d>
 800123a:	4604      	mov	r4, r0
 800123c:	460d      	mov	r5, r1
 800123e:	4b46      	ldr	r3, [pc, #280]	; (8001358 <PID_CONTROLLERS_Pitch+0x148>)
 8001240:	ed93 7a01 	vldr	s14, [r3, #4]
 8001244:	edd7 7a03 	vldr	s15, [r7, #12]
 8001248:	ee27 7a27 	vmul.f32	s14, s14, s15
 800124c:	683b      	ldr	r3, [r7, #0]
 800124e:	ee07 3a90 	vmov	s15, r3
 8001252:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001256:	ee67 7a27 	vmul.f32	s15, s14, s15
 800125a:	ee17 0a90 	vmov	r0, s15
 800125e:	f7ff f993 	bl	8000588 <__aeabi_f2d>
 8001262:	a339      	add	r3, pc, #228	; (adr r3, 8001348 <PID_CONTROLLERS_Pitch+0x138>)
 8001264:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001268:	f7ff f9e6 	bl	8000638 <__aeabi_dmul>
 800126c:	4602      	mov	r2, r0
 800126e:	460b      	mov	r3, r1
 8001270:	4620      	mov	r0, r4
 8001272:	4629      	mov	r1, r5
 8001274:	f7ff f82a 	bl	80002cc <__adddf3>
 8001278:	4602      	mov	r2, r0
 800127a:	460b      	mov	r3, r1
 800127c:	4610      	mov	r0, r2
 800127e:	4619      	mov	r1, r3
 8001280:	f7ff fcb2 	bl	8000be8 <__aeabi_d2f>
 8001284:	4603      	mov	r3, r0
 8001286:	4a33      	ldr	r2, [pc, #204]	; (8001354 <PID_CONTROLLERS_Pitch+0x144>)
 8001288:	6013      	str	r3, [r2, #0]

	if(Pitch_ITerm > CONFIG_MaximumITerm) // to avoid integral windup set check for maximum ITerm
 800128a:	4b32      	ldr	r3, [pc, #200]	; (8001354 <PID_CONTROLLERS_Pitch+0x144>)
 800128c:	edd3 7a00 	vldr	s15, [r3]
 8001290:	ed9f 7a32 	vldr	s14, [pc, #200]	; 800135c <PID_CONTROLLERS_Pitch+0x14c>
 8001294:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001298:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800129c:	dd06      	ble.n	80012ac <PID_CONTROLLERS_Pitch+0x9c>
	{
		Roll_ITerm = CONFIG_MaximumITerm;
 800129e:	4b30      	ldr	r3, [pc, #192]	; (8001360 <PID_CONTROLLERS_Pitch+0x150>)
 80012a0:	4a30      	ldr	r2, [pc, #192]	; (8001364 <PID_CONTROLLERS_Pitch+0x154>)
 80012a2:	601a      	str	r2, [r3, #0]
		LOGGER_WriteLine("Roll ITerm exceeded maximum value, set to 400", _INFO);
 80012a4:	2101      	movs	r1, #1
 80012a6:	4830      	ldr	r0, [pc, #192]	; (8001368 <PID_CONTROLLERS_Pitch+0x158>)
 80012a8:	f000 fcd2 	bl	8001c50 <LOGGER_WriteLine>
	}
	output = error * PID_Pitch.P + Pitch_ITerm + PID_Pitch.D * ((error - Pitch_Error))/(time * 0.001);
 80012ac:	4b2a      	ldr	r3, [pc, #168]	; (8001358 <PID_CONTROLLERS_Pitch+0x148>)
 80012ae:	ed93 7a00 	vldr	s14, [r3]
 80012b2:	edd7 7a03 	vldr	s15, [r7, #12]
 80012b6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80012ba:	4b26      	ldr	r3, [pc, #152]	; (8001354 <PID_CONTROLLERS_Pitch+0x144>)
 80012bc:	edd3 7a00 	vldr	s15, [r3]
 80012c0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80012c4:	ee17 0a90 	vmov	r0, s15
 80012c8:	f7ff f95e 	bl	8000588 <__aeabi_f2d>
 80012cc:	4604      	mov	r4, r0
 80012ce:	460d      	mov	r5, r1
 80012d0:	4b21      	ldr	r3, [pc, #132]	; (8001358 <PID_CONTROLLERS_Pitch+0x148>)
 80012d2:	ed93 7a02 	vldr	s14, [r3, #8]
 80012d6:	4b25      	ldr	r3, [pc, #148]	; (800136c <PID_CONTROLLERS_Pitch+0x15c>)
 80012d8:	edd3 7a00 	vldr	s15, [r3]
 80012dc:	edd7 6a03 	vldr	s13, [r7, #12]
 80012e0:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80012e4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80012e8:	ee17 0a90 	vmov	r0, s15
 80012ec:	f7ff f94c 	bl	8000588 <__aeabi_f2d>
 80012f0:	4680      	mov	r8, r0
 80012f2:	4689      	mov	r9, r1
 80012f4:	6838      	ldr	r0, [r7, #0]
 80012f6:	f7ff f935 	bl	8000564 <__aeabi_i2d>
 80012fa:	a313      	add	r3, pc, #76	; (adr r3, 8001348 <PID_CONTROLLERS_Pitch+0x138>)
 80012fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001300:	f7ff f99a 	bl	8000638 <__aeabi_dmul>
 8001304:	4602      	mov	r2, r0
 8001306:	460b      	mov	r3, r1
 8001308:	4640      	mov	r0, r8
 800130a:	4649      	mov	r1, r9
 800130c:	f7ff fabe 	bl	800088c <__aeabi_ddiv>
 8001310:	4602      	mov	r2, r0
 8001312:	460b      	mov	r3, r1
 8001314:	4620      	mov	r0, r4
 8001316:	4629      	mov	r1, r5
 8001318:	f7fe ffd8 	bl	80002cc <__adddf3>
 800131c:	4602      	mov	r2, r0
 800131e:	460b      	mov	r3, r1
 8001320:	4610      	mov	r0, r2
 8001322:	4619      	mov	r1, r3
 8001324:	f7ff fc60 	bl	8000be8 <__aeabi_d2f>
 8001328:	4603      	mov	r3, r0
 800132a:	60bb      	str	r3, [r7, #8]

	return output;
 800132c:	edd7 7a02 	vldr	s15, [r7, #8]
 8001330:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001334:	ee17 3a90 	vmov	r3, s15
}
 8001338:	4618      	mov	r0, r3
 800133a:	3710      	adds	r7, #16
 800133c:	46bd      	mov	sp, r7
 800133e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001342:	bf00      	nop
 8001344:	f3af 8000 	nop.w
 8001348:	d2f1a9fc 	.word	0xd2f1a9fc
 800134c:	3f50624d 	.word	0x3f50624d
 8001350:	2000065c 	.word	0x2000065c
 8001354:	20000400 	.word	0x20000400
 8001358:	2000000c 	.word	0x2000000c
 800135c:	43c80000 	.word	0x43c80000
 8001360:	200003fc 	.word	0x200003fc
 8001364:	43c80000 	.word	0x43c80000
 8001368:	080147d0 	.word	0x080147d0
 800136c:	2000040c 	.word	0x2000040c

08001370 <PID_CONTROLLERS_Yaw>:

int PID_CONTROLLERS_Yaw(float setpoint, int time)
{
 8001370:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001374:	b084      	sub	sp, #16
 8001376:	af00      	add	r7, sp, #0
 8001378:	ed87 0a01 	vstr	s0, [r7, #4]
 800137c:	6038      	str	r0, [r7, #0]
	float output;
	float error = setpoint - DATA_ComplementedAnglesInDegrees.Z;
 800137e:	4b4c      	ldr	r3, [pc, #304]	; (80014b0 <PID_CONTROLLERS_Yaw+0x140>)
 8001380:	edd3 7a02 	vldr	s15, [r3, #8]
 8001384:	ed97 7a01 	vldr	s14, [r7, #4]
 8001388:	ee77 7a67 	vsub.f32	s15, s14, s15
 800138c:	edc7 7a03 	vstr	s15, [r7, #12]
	Yaw_ITerm += PID_Yaw.I * error * time * 0.001; // discrete integration, convert time to seconds
 8001390:	4b48      	ldr	r3, [pc, #288]	; (80014b4 <PID_CONTROLLERS_Yaw+0x144>)
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	4618      	mov	r0, r3
 8001396:	f7ff f8f7 	bl	8000588 <__aeabi_f2d>
 800139a:	4604      	mov	r4, r0
 800139c:	460d      	mov	r5, r1
 800139e:	4b46      	ldr	r3, [pc, #280]	; (80014b8 <PID_CONTROLLERS_Yaw+0x148>)
 80013a0:	ed93 7a01 	vldr	s14, [r3, #4]
 80013a4:	edd7 7a03 	vldr	s15, [r7, #12]
 80013a8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80013ac:	683b      	ldr	r3, [r7, #0]
 80013ae:	ee07 3a90 	vmov	s15, r3
 80013b2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80013b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80013ba:	ee17 0a90 	vmov	r0, s15
 80013be:	f7ff f8e3 	bl	8000588 <__aeabi_f2d>
 80013c2:	a339      	add	r3, pc, #228	; (adr r3, 80014a8 <PID_CONTROLLERS_Yaw+0x138>)
 80013c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013c8:	f7ff f936 	bl	8000638 <__aeabi_dmul>
 80013cc:	4602      	mov	r2, r0
 80013ce:	460b      	mov	r3, r1
 80013d0:	4620      	mov	r0, r4
 80013d2:	4629      	mov	r1, r5
 80013d4:	f7fe ff7a 	bl	80002cc <__adddf3>
 80013d8:	4602      	mov	r2, r0
 80013da:	460b      	mov	r3, r1
 80013dc:	4610      	mov	r0, r2
 80013de:	4619      	mov	r1, r3
 80013e0:	f7ff fc02 	bl	8000be8 <__aeabi_d2f>
 80013e4:	4603      	mov	r3, r0
 80013e6:	4a33      	ldr	r2, [pc, #204]	; (80014b4 <PID_CONTROLLERS_Yaw+0x144>)
 80013e8:	6013      	str	r3, [r2, #0]

	if(Yaw_ITerm > CONFIG_MaximumITerm) // to avoid integral windup set check for maximum ITerm
 80013ea:	4b32      	ldr	r3, [pc, #200]	; (80014b4 <PID_CONTROLLERS_Yaw+0x144>)
 80013ec:	edd3 7a00 	vldr	s15, [r3]
 80013f0:	ed9f 7a32 	vldr	s14, [pc, #200]	; 80014bc <PID_CONTROLLERS_Yaw+0x14c>
 80013f4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80013f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013fc:	dd06      	ble.n	800140c <PID_CONTROLLERS_Yaw+0x9c>
	{
		Yaw_ITerm = CONFIG_MaximumITerm;
 80013fe:	4b2d      	ldr	r3, [pc, #180]	; (80014b4 <PID_CONTROLLERS_Yaw+0x144>)
 8001400:	4a2f      	ldr	r2, [pc, #188]	; (80014c0 <PID_CONTROLLERS_Yaw+0x150>)
 8001402:	601a      	str	r2, [r3, #0]
		LOGGER_WriteLine("Roll ITerm exceeded maximum value, set to 400", _INFO);
 8001404:	2101      	movs	r1, #1
 8001406:	482f      	ldr	r0, [pc, #188]	; (80014c4 <PID_CONTROLLERS_Yaw+0x154>)
 8001408:	f000 fc22 	bl	8001c50 <LOGGER_WriteLine>
	}
	output = error * PID_Yaw.P + Yaw_ITerm + PID_Yaw.D * ((error - Yaw_Error))/(time * 0.001); // in yaw D term will be probably 0, but this part is kept here, existence of D term is defined in PID values configuration
 800140c:	4b2a      	ldr	r3, [pc, #168]	; (80014b8 <PID_CONTROLLERS_Yaw+0x148>)
 800140e:	ed93 7a00 	vldr	s14, [r3]
 8001412:	edd7 7a03 	vldr	s15, [r7, #12]
 8001416:	ee27 7a27 	vmul.f32	s14, s14, s15
 800141a:	4b26      	ldr	r3, [pc, #152]	; (80014b4 <PID_CONTROLLERS_Yaw+0x144>)
 800141c:	edd3 7a00 	vldr	s15, [r3]
 8001420:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001424:	ee17 0a90 	vmov	r0, s15
 8001428:	f7ff f8ae 	bl	8000588 <__aeabi_f2d>
 800142c:	4604      	mov	r4, r0
 800142e:	460d      	mov	r5, r1
 8001430:	4b21      	ldr	r3, [pc, #132]	; (80014b8 <PID_CONTROLLERS_Yaw+0x148>)
 8001432:	ed93 7a02 	vldr	s14, [r3, #8]
 8001436:	4b24      	ldr	r3, [pc, #144]	; (80014c8 <PID_CONTROLLERS_Yaw+0x158>)
 8001438:	edd3 7a00 	vldr	s15, [r3]
 800143c:	edd7 6a03 	vldr	s13, [r7, #12]
 8001440:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001444:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001448:	ee17 0a90 	vmov	r0, s15
 800144c:	f7ff f89c 	bl	8000588 <__aeabi_f2d>
 8001450:	4680      	mov	r8, r0
 8001452:	4689      	mov	r9, r1
 8001454:	6838      	ldr	r0, [r7, #0]
 8001456:	f7ff f885 	bl	8000564 <__aeabi_i2d>
 800145a:	a313      	add	r3, pc, #76	; (adr r3, 80014a8 <PID_CONTROLLERS_Yaw+0x138>)
 800145c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001460:	f7ff f8ea 	bl	8000638 <__aeabi_dmul>
 8001464:	4602      	mov	r2, r0
 8001466:	460b      	mov	r3, r1
 8001468:	4640      	mov	r0, r8
 800146a:	4649      	mov	r1, r9
 800146c:	f7ff fa0e 	bl	800088c <__aeabi_ddiv>
 8001470:	4602      	mov	r2, r0
 8001472:	460b      	mov	r3, r1
 8001474:	4620      	mov	r0, r4
 8001476:	4629      	mov	r1, r5
 8001478:	f7fe ff28 	bl	80002cc <__adddf3>
 800147c:	4602      	mov	r2, r0
 800147e:	460b      	mov	r3, r1
 8001480:	4610      	mov	r0, r2
 8001482:	4619      	mov	r1, r3
 8001484:	f7ff fbb0 	bl	8000be8 <__aeabi_d2f>
 8001488:	4603      	mov	r3, r0
 800148a:	60bb      	str	r3, [r7, #8]

	return output;
 800148c:	edd7 7a02 	vldr	s15, [r7, #8]
 8001490:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001494:	ee17 3a90 	vmov	r3, s15
}
 8001498:	4618      	mov	r0, r3
 800149a:	3710      	adds	r7, #16
 800149c:	46bd      	mov	sp, r7
 800149e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80014a2:	bf00      	nop
 80014a4:	f3af 8000 	nop.w
 80014a8:	d2f1a9fc 	.word	0xd2f1a9fc
 80014ac:	3f50624d 	.word	0x3f50624d
 80014b0:	2000065c 	.word	0x2000065c
 80014b4:	20000404 	.word	0x20000404
 80014b8:	20000018 	.word	0x20000018
 80014bc:	43c80000 	.word	0x43c80000
 80014c0:	43c80000 	.word	0x43c80000
 80014c4:	080147d0 	.word	0x080147d0
 80014c8:	20000410 	.word	0x20000410

080014cc <ACCEL_Init>:
#include "iks01a2_motion_sensors.h"
#include "iks01a2_motion_sensors_ex.h"
//#include "XYZ_Data.h"

void ACCEL_Init()
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	af00      	add	r7, sp, #0
	IKS01A2_MOTION_SENSOR_SetOutputDataRate(IKS01A2_LSM6DSL_0, MOTION_ACCELERO, 208);
 80014d0:	ed9f 0a06 	vldr	s0, [pc, #24]	; 80014ec <ACCEL_Init+0x20>
 80014d4:	2102      	movs	r1, #2
 80014d6:	2000      	movs	r0, #0
 80014d8:	f005 f97c 	bl	80067d4 <IKS01A2_MOTION_SENSOR_SetOutputDataRate>
	IKS01A2_MOTION_SENSOR_SetFullScale(IKS01A2_LSM6DSL_0, MOTION_ACCELERO, 16);
 80014dc:	2210      	movs	r2, #16
 80014de:	2102      	movs	r1, #2
 80014e0:	2000      	movs	r0, #0
 80014e2:	f005 f9bd 	bl	8006860 <IKS01A2_MOTION_SENSOR_SetFullScale>
}
 80014e6:	bf00      	nop
 80014e8:	bd80      	pop	{r7, pc}
 80014ea:	bf00      	nop
 80014ec:	43500000 	.word	0x43500000

080014f0 <ACCEL_GetValues>:

void ACCEL_GetValues(XYZ_Data *values)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b086      	sub	sp, #24
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	6078      	str	r0, [r7, #4]
	IKS01A2_MOTION_SENSOR_Axes_t data;
	IKS01A2_MOTION_SENSOR_GetAxes(IKS01A2_LSM6DSL_0, MOTION_ACCELERO, &data);
 80014f8:	f107 030c 	add.w	r3, r7, #12
 80014fc:	461a      	mov	r2, r3
 80014fe:	2102      	movs	r1, #2
 8001500:	2000      	movs	r0, #0
 8001502:	f005 f923 	bl	800674c <IKS01A2_MOTION_SENSOR_GetAxes>

	values->X = (float)data.x/1000.f;
 8001506:	68fb      	ldr	r3, [r7, #12]
 8001508:	ee07 3a90 	vmov	s15, r3
 800150c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001510:	eddf 6a11 	vldr	s13, [pc, #68]	; 8001558 <ACCEL_GetValues+0x68>
 8001514:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	edc3 7a00 	vstr	s15, [r3]
	values->Y = (float)data.y/1000.f;
 800151e:	693b      	ldr	r3, [r7, #16]
 8001520:	ee07 3a90 	vmov	s15, r3
 8001524:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001528:	eddf 6a0b 	vldr	s13, [pc, #44]	; 8001558 <ACCEL_GetValues+0x68>
 800152c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	edc3 7a01 	vstr	s15, [r3, #4]
	values->Z = (float)data.z/1000.f;
 8001536:	697b      	ldr	r3, [r7, #20]
 8001538:	ee07 3a90 	vmov	s15, r3
 800153c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001540:	eddf 6a05 	vldr	s13, [pc, #20]	; 8001558 <ACCEL_GetValues+0x68>
 8001544:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	edc3 7a02 	vstr	s15, [r3, #8]
}
 800154e:	bf00      	nop
 8001550:	3718      	adds	r7, #24
 8001552:	46bd      	mov	sp, r7
 8001554:	bd80      	pop	{r7, pc}
 8001556:	bf00      	nop
 8001558:	447a0000 	.word	0x447a0000

0800155c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	b082      	sub	sp, #8
 8001560:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001562:	2300      	movs	r3, #0
 8001564:	607b      	str	r3, [r7, #4]
 8001566:	4b18      	ldr	r3, [pc, #96]	; (80015c8 <MX_DMA_Init+0x6c>)
 8001568:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800156a:	4a17      	ldr	r2, [pc, #92]	; (80015c8 <MX_DMA_Init+0x6c>)
 800156c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001570:	6313      	str	r3, [r2, #48]	; 0x30
 8001572:	4b15      	ldr	r3, [pc, #84]	; (80015c8 <MX_DMA_Init+0x6c>)
 8001574:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001576:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800157a:	607b      	str	r3, [r7, #4]
 800157c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 800157e:	2200      	movs	r2, #0
 8001580:	2100      	movs	r1, #0
 8001582:	200c      	movs	r0, #12
 8001584:	f005 fd25 	bl	8006fd2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8001588:	200c      	movs	r0, #12
 800158a:	f005 fd3e 	bl	800700a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 800158e:	2200      	movs	r2, #0
 8001590:	2100      	movs	r1, #0
 8001592:	200d      	movs	r0, #13
 8001594:	f005 fd1d 	bl	8006fd2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8001598:	200d      	movs	r0, #13
 800159a:	f005 fd36 	bl	800700a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 800159e:	2200      	movs	r2, #0
 80015a0:	2100      	movs	r1, #0
 80015a2:	200f      	movs	r0, #15
 80015a4:	f005 fd15 	bl	8006fd2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 80015a8:	200f      	movs	r0, #15
 80015aa:	f005 fd2e 	bl	800700a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 80015ae:	2200      	movs	r2, #0
 80015b0:	2100      	movs	r1, #0
 80015b2:	2010      	movs	r0, #16
 80015b4:	f005 fd0d 	bl	8006fd2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 80015b8:	2010      	movs	r0, #16
 80015ba:	f005 fd26 	bl	800700a <HAL_NVIC_EnableIRQ>

}
 80015be:	bf00      	nop
 80015c0:	3708      	adds	r7, #8
 80015c2:	46bd      	mov	sp, r7
 80015c4:	bd80      	pop	{r7, pc}
 80015c6:	bf00      	nop
 80015c8:	40023800 	.word	0x40023800

080015cc <dshot_init>:
static void dshot_enable_dma_request();


/* Functions */
void dshot_init(dshot_type_e dshot_type)
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	b082      	sub	sp, #8
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	4603      	mov	r3, r0
 80015d4:	71fb      	strb	r3, [r7, #7]
	dshot_set_timer(dshot_type);
 80015d6:	79fb      	ldrb	r3, [r7, #7]
 80015d8:	4618      	mov	r0, r3
 80015da:	f000 f833 	bl	8001644 <dshot_set_timer>
	dshot_put_tc_callback_function();
 80015de:	f000 f8d5 	bl	800178c <dshot_put_tc_callback_function>
	dshot_start_pwm();
 80015e2:	f000 f8f3 	bl	80017cc <dshot_start_pwm>
}
 80015e6:	bf00      	nop
 80015e8:	3708      	adds	r7, #8
 80015ea:	46bd      	mov	sp, r7
 80015ec:	bd80      	pop	{r7, pc}

080015ee <dshot_write>:

void dshot_write(uint16_t* motor_value)
{
 80015ee:	b580      	push	{r7, lr}
 80015f0:	b082      	sub	sp, #8
 80015f2:	af00      	add	r7, sp, #0
 80015f4:	6078      	str	r0, [r7, #4]
	dshot_prepare_dmabuffer_all(motor_value);
 80015f6:	6878      	ldr	r0, [r7, #4]
 80015f8:	f000 f968 	bl	80018cc <dshot_prepare_dmabuffer_all>
	dshot_dma_start();
 80015fc:	f000 f992 	bl	8001924 <dshot_dma_start>
	dshot_enable_dma_request();
 8001600:	f000 f9ca 	bl	8001998 <dshot_enable_dma_request>
}
 8001604:	bf00      	nop
 8001606:	3708      	adds	r7, #8
 8001608:	46bd      	mov	sp, r7
 800160a:	bd80      	pop	{r7, pc}

0800160c <dshot_choose_type>:


/* Static functions */
static uint32_t dshot_choose_type(dshot_type_e dshot_type)
{
 800160c:	b480      	push	{r7}
 800160e:	b083      	sub	sp, #12
 8001610:	af00      	add	r7, sp, #0
 8001612:	4603      	mov	r3, r0
 8001614:	71fb      	strb	r3, [r7, #7]
	switch (dshot_type)
 8001616:	79fb      	ldrb	r3, [r7, #7]
 8001618:	2b01      	cmp	r3, #1
 800161a:	d003      	beq.n	8001624 <dshot_choose_type+0x18>
 800161c:	2b02      	cmp	r3, #2
 800161e:	d103      	bne.n	8001628 <dshot_choose_type+0x1c>
	{
		case(DSHOT600):
				return DSHOT600_HZ;
 8001620:	4b05      	ldr	r3, [pc, #20]	; (8001638 <dshot_choose_type+0x2c>)
 8001622:	e002      	b.n	800162a <dshot_choose_type+0x1e>

		case(DSHOT300):
				return DSHOT300_HZ;
 8001624:	4b05      	ldr	r3, [pc, #20]	; (800163c <dshot_choose_type+0x30>)
 8001626:	e000      	b.n	800162a <dshot_choose_type+0x1e>

		default:
		case(DSHOT150):
				return DSHOT150_HZ;
 8001628:	4b05      	ldr	r3, [pc, #20]	; (8001640 <dshot_choose_type+0x34>)
	}
}
 800162a:	4618      	mov	r0, r3
 800162c:	370c      	adds	r7, #12
 800162e:	46bd      	mov	sp, r7
 8001630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001634:	4770      	bx	lr
 8001636:	bf00      	nop
 8001638:	00b71b00 	.word	0x00b71b00
 800163c:	005b8d80 	.word	0x005b8d80
 8001640:	002dc6c0 	.word	0x002dc6c0

08001644 <dshot_set_timer>:

static void dshot_set_timer(dshot_type_e dshot_type)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	ed2d 8b02 	vpush	{d8}
 800164a:	b084      	sub	sp, #16
 800164c:	af00      	add	r7, sp, #0
 800164e:	4603      	mov	r3, r0
 8001650:	71fb      	strb	r3, [r7, #7]
	uint16_t dshot_prescaler;
	uint32_t timer_clock = TIMER_CLOCK; // all timer clock is same as SystemCoreClock in stm32f411
 8001652:	4b27      	ldr	r3, [pc, #156]	; (80016f0 <dshot_set_timer+0xac>)
 8001654:	60fb      	str	r3, [r7, #12]

	// Calculate prescaler by dshot type
	dshot_prescaler = lrintf((float) timer_clock / dshot_choose_type(dshot_type) + 0.01f) - 1;
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	ee07 3a90 	vmov	s15, r3
 800165c:	eeb8 8a67 	vcvt.f32.u32	s16, s15
 8001660:	79fb      	ldrb	r3, [r7, #7]
 8001662:	4618      	mov	r0, r3
 8001664:	f7ff ffd2 	bl	800160c <dshot_choose_type>
 8001668:	ee07 0a90 	vmov	s15, r0
 800166c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001670:	eec8 7a07 	vdiv.f32	s15, s16, s14
 8001674:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 80016f4 <dshot_set_timer+0xb0>
 8001678:	ee77 7a87 	vadd.f32	s15, s15, s14
 800167c:	eeb0 0a67 	vmov.f32	s0, s15
 8001680:	f011 fe5a 	bl	8013338 <lrintf>
 8001684:	4603      	mov	r3, r0
 8001686:	b29b      	uxth	r3, r3
 8001688:	3b01      	subs	r3, #1
 800168a:	817b      	strh	r3, [r7, #10]

	// motor1
	__HAL_TIM_SET_PRESCALER(MOTOR_1_TIM, dshot_prescaler);
 800168c:	4b1a      	ldr	r3, [pc, #104]	; (80016f8 <dshot_set_timer+0xb4>)
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	897a      	ldrh	r2, [r7, #10]
 8001692:	629a      	str	r2, [r3, #40]	; 0x28
	__HAL_TIM_SET_AUTORELOAD(MOTOR_1_TIM, MOTOR_BITLENGTH);
 8001694:	4b18      	ldr	r3, [pc, #96]	; (80016f8 <dshot_set_timer+0xb4>)
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	2214      	movs	r2, #20
 800169a:	62da      	str	r2, [r3, #44]	; 0x2c
 800169c:	4b16      	ldr	r3, [pc, #88]	; (80016f8 <dshot_set_timer+0xb4>)
 800169e:	2214      	movs	r2, #20
 80016a0:	60da      	str	r2, [r3, #12]

	// motor2
	__HAL_TIM_SET_PRESCALER(MOTOR_2_TIM, dshot_prescaler);
 80016a2:	4b16      	ldr	r3, [pc, #88]	; (80016fc <dshot_set_timer+0xb8>)
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	897a      	ldrh	r2, [r7, #10]
 80016a8:	629a      	str	r2, [r3, #40]	; 0x28
	__HAL_TIM_SET_AUTORELOAD(MOTOR_2_TIM, MOTOR_BITLENGTH);
 80016aa:	4b14      	ldr	r3, [pc, #80]	; (80016fc <dshot_set_timer+0xb8>)
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	2214      	movs	r2, #20
 80016b0:	62da      	str	r2, [r3, #44]	; 0x2c
 80016b2:	4b12      	ldr	r3, [pc, #72]	; (80016fc <dshot_set_timer+0xb8>)
 80016b4:	2214      	movs	r2, #20
 80016b6:	60da      	str	r2, [r3, #12]

	// motor3
	__HAL_TIM_SET_PRESCALER(MOTOR_3_TIM, dshot_prescaler);
 80016b8:	4b10      	ldr	r3, [pc, #64]	; (80016fc <dshot_set_timer+0xb8>)
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	897a      	ldrh	r2, [r7, #10]
 80016be:	629a      	str	r2, [r3, #40]	; 0x28
	__HAL_TIM_SET_AUTORELOAD(MOTOR_3_TIM, MOTOR_BITLENGTH);
 80016c0:	4b0e      	ldr	r3, [pc, #56]	; (80016fc <dshot_set_timer+0xb8>)
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	2214      	movs	r2, #20
 80016c6:	62da      	str	r2, [r3, #44]	; 0x2c
 80016c8:	4b0c      	ldr	r3, [pc, #48]	; (80016fc <dshot_set_timer+0xb8>)
 80016ca:	2214      	movs	r2, #20
 80016cc:	60da      	str	r2, [r3, #12]

	// motor4
	__HAL_TIM_SET_PRESCALER(MOTOR_4_TIM, dshot_prescaler);
 80016ce:	4b0c      	ldr	r3, [pc, #48]	; (8001700 <dshot_set_timer+0xbc>)
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	897a      	ldrh	r2, [r7, #10]
 80016d4:	629a      	str	r2, [r3, #40]	; 0x28
	__HAL_TIM_SET_AUTORELOAD(MOTOR_4_TIM, MOTOR_BITLENGTH);
 80016d6:	4b0a      	ldr	r3, [pc, #40]	; (8001700 <dshot_set_timer+0xbc>)
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	2214      	movs	r2, #20
 80016dc:	62da      	str	r2, [r3, #44]	; 0x2c
 80016de:	4b08      	ldr	r3, [pc, #32]	; (8001700 <dshot_set_timer+0xbc>)
 80016e0:	2214      	movs	r2, #20
 80016e2:	60da      	str	r2, [r3, #12]
}
 80016e4:	bf00      	nop
 80016e6:	3710      	adds	r7, #16
 80016e8:	46bd      	mov	sp, r7
 80016ea:	ecbd 8b02 	vpop	{d8}
 80016ee:	bd80      	pop	{r7, pc}
 80016f0:	044aa200 	.word	0x044aa200
 80016f4:	3c23d70a 	.word	0x3c23d70a
 80016f8:	20000748 	.word	0x20000748
 80016fc:	20000700 	.word	0x20000700
 8001700:	20000790 	.word	0x20000790

08001704 <dshot_dma_tc_callback>:

// __HAL_TIM_DISABLE_DMA is needed to eliminate the delay between different dshot signals
// I don't know why :(
static void dshot_dma_tc_callback(DMA_HandleTypeDef *hdma)
{
 8001704:	b480      	push	{r7}
 8001706:	b085      	sub	sp, #20
 8001708:	af00      	add	r7, sp, #0
 800170a:	6078      	str	r0, [r7, #4]
	TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001710:	60fb      	str	r3, [r7, #12]

	if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8001712:	68fb      	ldr	r3, [r7, #12]
 8001714:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001716:	687a      	ldr	r2, [r7, #4]
 8001718:	429a      	cmp	r2, r3
 800171a:	d108      	bne.n	800172e <dshot_dma_tc_callback+0x2a>
	{
		__HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	68da      	ldr	r2, [r3, #12]
 8001722:	68fb      	ldr	r3, [r7, #12]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800172a:	60da      	str	r2, [r3, #12]
	}
	else if(hdma == htim->hdma[TIM_DMA_ID_CC4])
	{
		__HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
	}
}
 800172c:	e028      	b.n	8001780 <dshot_dma_tc_callback+0x7c>
	else if(hdma == htim->hdma[TIM_DMA_ID_CC2])
 800172e:	68fb      	ldr	r3, [r7, #12]
 8001730:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001732:	687a      	ldr	r2, [r7, #4]
 8001734:	429a      	cmp	r2, r3
 8001736:	d108      	bne.n	800174a <dshot_dma_tc_callback+0x46>
		__HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	68da      	ldr	r2, [r3, #12]
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001746:	60da      	str	r2, [r3, #12]
}
 8001748:	e01a      	b.n	8001780 <dshot_dma_tc_callback+0x7c>
	else if(hdma == htim->hdma[TIM_DMA_ID_CC3])
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800174e:	687a      	ldr	r2, [r7, #4]
 8001750:	429a      	cmp	r2, r3
 8001752:	d108      	bne.n	8001766 <dshot_dma_tc_callback+0x62>
		__HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	68da      	ldr	r2, [r3, #12]
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001762:	60da      	str	r2, [r3, #12]
}
 8001764:	e00c      	b.n	8001780 <dshot_dma_tc_callback+0x7c>
	else if(hdma == htim->hdma[TIM_DMA_ID_CC4])
 8001766:	68fb      	ldr	r3, [r7, #12]
 8001768:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800176a:	687a      	ldr	r2, [r7, #4]
 800176c:	429a      	cmp	r2, r3
 800176e:	d107      	bne.n	8001780 <dshot_dma_tc_callback+0x7c>
		__HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	68da      	ldr	r2, [r3, #12]
 8001776:	68fb      	ldr	r3, [r7, #12]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800177e:	60da      	str	r2, [r3, #12]
}
 8001780:	bf00      	nop
 8001782:	3714      	adds	r7, #20
 8001784:	46bd      	mov	sp, r7
 8001786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178a:	4770      	bx	lr

0800178c <dshot_put_tc_callback_function>:

static void dshot_put_tc_callback_function()
{
 800178c:	b480      	push	{r7}
 800178e:	af00      	add	r7, sp, #0
	// TIM_DMA_ID_CCx depends on timer channel
	MOTOR_1_TIM->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = dshot_dma_tc_callback;
 8001790:	4b0a      	ldr	r3, [pc, #40]	; (80017bc <dshot_put_tc_callback_function+0x30>)
 8001792:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001794:	4a0a      	ldr	r2, [pc, #40]	; (80017c0 <dshot_put_tc_callback_function+0x34>)
 8001796:	63da      	str	r2, [r3, #60]	; 0x3c
	MOTOR_2_TIM->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = dshot_dma_tc_callback;
 8001798:	4b0a      	ldr	r3, [pc, #40]	; (80017c4 <dshot_put_tc_callback_function+0x38>)
 800179a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800179c:	4a08      	ldr	r2, [pc, #32]	; (80017c0 <dshot_put_tc_callback_function+0x34>)
 800179e:	63da      	str	r2, [r3, #60]	; 0x3c
	MOTOR_3_TIM->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = dshot_dma_tc_callback;
 80017a0:	4b08      	ldr	r3, [pc, #32]	; (80017c4 <dshot_put_tc_callback_function+0x38>)
 80017a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017a4:	4a06      	ldr	r2, [pc, #24]	; (80017c0 <dshot_put_tc_callback_function+0x34>)
 80017a6:	63da      	str	r2, [r3, #60]	; 0x3c
	MOTOR_4_TIM->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = dshot_dma_tc_callback;
 80017a8:	4b07      	ldr	r3, [pc, #28]	; (80017c8 <dshot_put_tc_callback_function+0x3c>)
 80017aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017ac:	4a04      	ldr	r2, [pc, #16]	; (80017c0 <dshot_put_tc_callback_function+0x34>)
 80017ae:	63da      	str	r2, [r3, #60]	; 0x3c
}
 80017b0:	bf00      	nop
 80017b2:	46bd      	mov	sp, r7
 80017b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b8:	4770      	bx	lr
 80017ba:	bf00      	nop
 80017bc:	20000748 	.word	0x20000748
 80017c0:	08001705 	.word	0x08001705
 80017c4:	20000700 	.word	0x20000700
 80017c8:	20000790 	.word	0x20000790

080017cc <dshot_start_pwm>:

static void dshot_start_pwm()
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	af00      	add	r7, sp, #0
	// Start the timer channel now.
    // Enabling/disabling DMA request can restart a new cycle without PWM start/stop.
  	HAL_TIM_PWM_Start(MOTOR_1_TIM, MOTOR_1_TIM_CHANNEL);
 80017d0:	210c      	movs	r1, #12
 80017d2:	4808      	ldr	r0, [pc, #32]	; (80017f4 <dshot_start_pwm+0x28>)
 80017d4:	f009 fe78 	bl	800b4c8 <HAL_TIM_PWM_Start>
  	HAL_TIM_PWM_Start(MOTOR_2_TIM, MOTOR_2_TIM_CHANNEL);
 80017d8:	2108      	movs	r1, #8
 80017da:	4807      	ldr	r0, [pc, #28]	; (80017f8 <dshot_start_pwm+0x2c>)
 80017dc:	f009 fe74 	bl	800b4c8 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(MOTOR_3_TIM, MOTOR_3_TIM_CHANNEL);
 80017e0:	2100      	movs	r1, #0
 80017e2:	4805      	ldr	r0, [pc, #20]	; (80017f8 <dshot_start_pwm+0x2c>)
 80017e4:	f009 fe70 	bl	800b4c8 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(MOTOR_4_TIM, MOTOR_4_TIM_CHANNEL);
 80017e8:	2104      	movs	r1, #4
 80017ea:	4804      	ldr	r0, [pc, #16]	; (80017fc <dshot_start_pwm+0x30>)
 80017ec:	f009 fe6c 	bl	800b4c8 <HAL_TIM_PWM_Start>
}
 80017f0:	bf00      	nop
 80017f2:	bd80      	pop	{r7, pc}
 80017f4:	20000748 	.word	0x20000748
 80017f8:	20000700 	.word	0x20000700
 80017fc:	20000790 	.word	0x20000790

08001800 <dshot_prepare_packet>:

static uint16_t dshot_prepare_packet(uint16_t value)
{
 8001800:	b480      	push	{r7}
 8001802:	b087      	sub	sp, #28
 8001804:	af00      	add	r7, sp, #0
 8001806:	4603      	mov	r3, r0
 8001808:	80fb      	strh	r3, [r7, #6]
	uint16_t packet;
	bool dshot_telemetry = false;
 800180a:	2300      	movs	r3, #0
 800180c:	72fb      	strb	r3, [r7, #11]

	packet = (value << 1) | (dshot_telemetry ? 1 : 0);
 800180e:	88fb      	ldrh	r3, [r7, #6]
 8001810:	005b      	lsls	r3, r3, #1
 8001812:	b21a      	sxth	r2, r3
 8001814:	7afb      	ldrb	r3, [r7, #11]
 8001816:	b21b      	sxth	r3, r3
 8001818:	4313      	orrs	r3, r2
 800181a:	b21b      	sxth	r3, r3
 800181c:	813b      	strh	r3, [r7, #8]

	// compute checksum
	unsigned csum = 0;
 800181e:	2300      	movs	r3, #0
 8001820:	617b      	str	r3, [r7, #20]
	unsigned csum_data = packet;
 8001822:	893b      	ldrh	r3, [r7, #8]
 8001824:	613b      	str	r3, [r7, #16]

	for(int i = 0; i < 3; i++)
 8001826:	2300      	movs	r3, #0
 8001828:	60fb      	str	r3, [r7, #12]
 800182a:	e009      	b.n	8001840 <dshot_prepare_packet+0x40>
	{
        csum ^=  csum_data; // xor data by nibbles
 800182c:	697a      	ldr	r2, [r7, #20]
 800182e:	693b      	ldr	r3, [r7, #16]
 8001830:	4053      	eors	r3, r2
 8001832:	617b      	str	r3, [r7, #20]
        csum_data >>= 4;
 8001834:	693b      	ldr	r3, [r7, #16]
 8001836:	091b      	lsrs	r3, r3, #4
 8001838:	613b      	str	r3, [r7, #16]
	for(int i = 0; i < 3; i++)
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	3301      	adds	r3, #1
 800183e:	60fb      	str	r3, [r7, #12]
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	2b02      	cmp	r3, #2
 8001844:	ddf2      	ble.n	800182c <dshot_prepare_packet+0x2c>
	}

	csum &= 0xf;
 8001846:	697b      	ldr	r3, [r7, #20]
 8001848:	f003 030f 	and.w	r3, r3, #15
 800184c:	617b      	str	r3, [r7, #20]
	packet = (packet << 4) | csum;
 800184e:	893b      	ldrh	r3, [r7, #8]
 8001850:	011b      	lsls	r3, r3, #4
 8001852:	b29a      	uxth	r2, r3
 8001854:	697b      	ldr	r3, [r7, #20]
 8001856:	b29b      	uxth	r3, r3
 8001858:	4313      	orrs	r3, r2
 800185a:	813b      	strh	r3, [r7, #8]

	return packet;
 800185c:	893b      	ldrh	r3, [r7, #8]
}
 800185e:	4618      	mov	r0, r3
 8001860:	371c      	adds	r7, #28
 8001862:	46bd      	mov	sp, r7
 8001864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001868:	4770      	bx	lr

0800186a <dshot_prepare_dmabuffer>:

// Convert 16 bits packet to 16 pwm signal
static void dshot_prepare_dmabuffer(uint32_t* motor_dmabuffer, uint16_t value)
{
 800186a:	b580      	push	{r7, lr}
 800186c:	b084      	sub	sp, #16
 800186e:	af00      	add	r7, sp, #0
 8001870:	6078      	str	r0, [r7, #4]
 8001872:	460b      	mov	r3, r1
 8001874:	807b      	strh	r3, [r7, #2]
	uint16_t packet;
	packet = dshot_prepare_packet(value);
 8001876:	887b      	ldrh	r3, [r7, #2]
 8001878:	4618      	mov	r0, r3
 800187a:	f7ff ffc1 	bl	8001800 <dshot_prepare_packet>
 800187e:	4603      	mov	r3, r0
 8001880:	81fb      	strh	r3, [r7, #14]

	for(int i = 0; i < 16; i++)
 8001882:	2300      	movs	r3, #0
 8001884:	60bb      	str	r3, [r7, #8]
 8001886:	e011      	b.n	80018ac <dshot_prepare_dmabuffer+0x42>
	{
		motor_dmabuffer[i] = (packet & 0x8000) ? MOTOR_BIT_1 : MOTOR_BIT_0;
 8001888:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800188c:	2b00      	cmp	r3, #0
 800188e:	da01      	bge.n	8001894 <dshot_prepare_dmabuffer+0x2a>
 8001890:	220e      	movs	r2, #14
 8001892:	e000      	b.n	8001896 <dshot_prepare_dmabuffer+0x2c>
 8001894:	2207      	movs	r2, #7
 8001896:	68bb      	ldr	r3, [r7, #8]
 8001898:	009b      	lsls	r3, r3, #2
 800189a:	6879      	ldr	r1, [r7, #4]
 800189c:	440b      	add	r3, r1
 800189e:	601a      	str	r2, [r3, #0]
		packet <<= 1;
 80018a0:	89fb      	ldrh	r3, [r7, #14]
 80018a2:	005b      	lsls	r3, r3, #1
 80018a4:	81fb      	strh	r3, [r7, #14]
	for(int i = 0; i < 16; i++)
 80018a6:	68bb      	ldr	r3, [r7, #8]
 80018a8:	3301      	adds	r3, #1
 80018aa:	60bb      	str	r3, [r7, #8]
 80018ac:	68bb      	ldr	r3, [r7, #8]
 80018ae:	2b0f      	cmp	r3, #15
 80018b0:	ddea      	ble.n	8001888 <dshot_prepare_dmabuffer+0x1e>
	}

	motor_dmabuffer[16] = 0;
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	3340      	adds	r3, #64	; 0x40
 80018b6:	2200      	movs	r2, #0
 80018b8:	601a      	str	r2, [r3, #0]
	motor_dmabuffer[17] = 0;
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	3344      	adds	r3, #68	; 0x44
 80018be:	2200      	movs	r2, #0
 80018c0:	601a      	str	r2, [r3, #0]
}
 80018c2:	bf00      	nop
 80018c4:	3710      	adds	r7, #16
 80018c6:	46bd      	mov	sp, r7
 80018c8:	bd80      	pop	{r7, pc}
	...

080018cc <dshot_prepare_dmabuffer_all>:

static void dshot_prepare_dmabuffer_all(uint16_t* motor_value)
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	b082      	sub	sp, #8
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	6078      	str	r0, [r7, #4]
	dshot_prepare_dmabuffer(motor1_dmabuffer, motor_value[0]);
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	881b      	ldrh	r3, [r3, #0]
 80018d8:	4619      	mov	r1, r3
 80018da:	480e      	ldr	r0, [pc, #56]	; (8001914 <dshot_prepare_dmabuffer_all+0x48>)
 80018dc:	f7ff ffc5 	bl	800186a <dshot_prepare_dmabuffer>
	dshot_prepare_dmabuffer(motor2_dmabuffer, motor_value[1]);
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	3302      	adds	r3, #2
 80018e4:	881b      	ldrh	r3, [r3, #0]
 80018e6:	4619      	mov	r1, r3
 80018e8:	480b      	ldr	r0, [pc, #44]	; (8001918 <dshot_prepare_dmabuffer_all+0x4c>)
 80018ea:	f7ff ffbe 	bl	800186a <dshot_prepare_dmabuffer>
	dshot_prepare_dmabuffer(motor3_dmabuffer, motor_value[2]);
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	3304      	adds	r3, #4
 80018f2:	881b      	ldrh	r3, [r3, #0]
 80018f4:	4619      	mov	r1, r3
 80018f6:	4809      	ldr	r0, [pc, #36]	; (800191c <dshot_prepare_dmabuffer_all+0x50>)
 80018f8:	f7ff ffb7 	bl	800186a <dshot_prepare_dmabuffer>
	dshot_prepare_dmabuffer(motor4_dmabuffer, motor_value[3]);
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	3306      	adds	r3, #6
 8001900:	881b      	ldrh	r3, [r3, #0]
 8001902:	4619      	mov	r1, r3
 8001904:	4806      	ldr	r0, [pc, #24]	; (8001920 <dshot_prepare_dmabuffer_all+0x54>)
 8001906:	f7ff ffb0 	bl	800186a <dshot_prepare_dmabuffer>
}
 800190a:	bf00      	nop
 800190c:	3708      	adds	r7, #8
 800190e:	46bd      	mov	sp, r7
 8001910:	bd80      	pop	{r7, pc}
 8001912:	bf00      	nop
 8001914:	20000414 	.word	0x20000414
 8001918:	2000045c 	.word	0x2000045c
 800191c:	200004a4 	.word	0x200004a4
 8001920:	200004ec 	.word	0x200004ec

08001924 <dshot_dma_start>:

static void dshot_dma_start()
{
 8001924:	b580      	push	{r7, lr}
 8001926:	af00      	add	r7, sp, #0
	HAL_DMA_Start_IT(MOTOR_1_TIM->hdma[TIM_DMA_ID_CC4], (uint32_t)motor1_dmabuffer, (uint32_t)&MOTOR_1_TIM->Instance->CCR4, DSHOT_DMA_BUFFER_SIZE);
 8001928:	4b14      	ldr	r3, [pc, #80]	; (800197c <dshot_dma_start+0x58>)
 800192a:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800192c:	4914      	ldr	r1, [pc, #80]	; (8001980 <dshot_dma_start+0x5c>)
 800192e:	4b13      	ldr	r3, [pc, #76]	; (800197c <dshot_dma_start+0x58>)
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	3340      	adds	r3, #64	; 0x40
 8001934:	461a      	mov	r2, r3
 8001936:	2312      	movs	r3, #18
 8001938:	f005 fc30 	bl	800719c <HAL_DMA_Start_IT>
	HAL_DMA_Start_IT(MOTOR_2_TIM->hdma[TIM_DMA_ID_CC3], (uint32_t)motor2_dmabuffer, (uint32_t)&MOTOR_2_TIM->Instance->CCR3, DSHOT_DMA_BUFFER_SIZE);
 800193c:	4b11      	ldr	r3, [pc, #68]	; (8001984 <dshot_dma_start+0x60>)
 800193e:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8001940:	4911      	ldr	r1, [pc, #68]	; (8001988 <dshot_dma_start+0x64>)
 8001942:	4b10      	ldr	r3, [pc, #64]	; (8001984 <dshot_dma_start+0x60>)
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	333c      	adds	r3, #60	; 0x3c
 8001948:	461a      	mov	r2, r3
 800194a:	2312      	movs	r3, #18
 800194c:	f005 fc26 	bl	800719c <HAL_DMA_Start_IT>
	HAL_DMA_Start_IT(MOTOR_3_TIM->hdma[TIM_DMA_ID_CC1], (uint32_t)motor3_dmabuffer, (uint32_t)&MOTOR_3_TIM->Instance->CCR1, DSHOT_DMA_BUFFER_SIZE);
 8001950:	4b0c      	ldr	r3, [pc, #48]	; (8001984 <dshot_dma_start+0x60>)
 8001952:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8001954:	490d      	ldr	r1, [pc, #52]	; (800198c <dshot_dma_start+0x68>)
 8001956:	4b0b      	ldr	r3, [pc, #44]	; (8001984 <dshot_dma_start+0x60>)
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	3334      	adds	r3, #52	; 0x34
 800195c:	461a      	mov	r2, r3
 800195e:	2312      	movs	r3, #18
 8001960:	f005 fc1c 	bl	800719c <HAL_DMA_Start_IT>
	HAL_DMA_Start_IT(MOTOR_4_TIM->hdma[TIM_DMA_ID_CC2], (uint32_t)motor4_dmabuffer, (uint32_t)&MOTOR_4_TIM->Instance->CCR2, DSHOT_DMA_BUFFER_SIZE);
 8001964:	4b0a      	ldr	r3, [pc, #40]	; (8001990 <dshot_dma_start+0x6c>)
 8001966:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8001968:	490a      	ldr	r1, [pc, #40]	; (8001994 <dshot_dma_start+0x70>)
 800196a:	4b09      	ldr	r3, [pc, #36]	; (8001990 <dshot_dma_start+0x6c>)
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	3338      	adds	r3, #56	; 0x38
 8001970:	461a      	mov	r2, r3
 8001972:	2312      	movs	r3, #18
 8001974:	f005 fc12 	bl	800719c <HAL_DMA_Start_IT>
}
 8001978:	bf00      	nop
 800197a:	bd80      	pop	{r7, pc}
 800197c:	20000748 	.word	0x20000748
 8001980:	20000414 	.word	0x20000414
 8001984:	20000700 	.word	0x20000700
 8001988:	2000045c 	.word	0x2000045c
 800198c:	200004a4 	.word	0x200004a4
 8001990:	20000790 	.word	0x20000790
 8001994:	200004ec 	.word	0x200004ec

08001998 <dshot_enable_dma_request>:

static void dshot_enable_dma_request()
{
 8001998:	b480      	push	{r7}
 800199a:	af00      	add	r7, sp, #0
	__HAL_TIM_ENABLE_DMA(MOTOR_1_TIM, TIM_DMA_CC4);
 800199c:	4b12      	ldr	r3, [pc, #72]	; (80019e8 <dshot_enable_dma_request+0x50>)
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	68da      	ldr	r2, [r3, #12]
 80019a2:	4b11      	ldr	r3, [pc, #68]	; (80019e8 <dshot_enable_dma_request+0x50>)
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80019aa:	60da      	str	r2, [r3, #12]
	__HAL_TIM_ENABLE_DMA(MOTOR_2_TIM, TIM_DMA_CC3);
 80019ac:	4b0f      	ldr	r3, [pc, #60]	; (80019ec <dshot_enable_dma_request+0x54>)
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	68da      	ldr	r2, [r3, #12]
 80019b2:	4b0e      	ldr	r3, [pc, #56]	; (80019ec <dshot_enable_dma_request+0x54>)
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80019ba:	60da      	str	r2, [r3, #12]
	__HAL_TIM_ENABLE_DMA(MOTOR_3_TIM, TIM_DMA_CC1);
 80019bc:	4b0b      	ldr	r3, [pc, #44]	; (80019ec <dshot_enable_dma_request+0x54>)
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	68da      	ldr	r2, [r3, #12]
 80019c2:	4b0a      	ldr	r3, [pc, #40]	; (80019ec <dshot_enable_dma_request+0x54>)
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80019ca:	60da      	str	r2, [r3, #12]
	__HAL_TIM_ENABLE_DMA(MOTOR_4_TIM, TIM_DMA_CC2);
 80019cc:	4b08      	ldr	r3, [pc, #32]	; (80019f0 <dshot_enable_dma_request+0x58>)
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	68da      	ldr	r2, [r3, #12]
 80019d2:	4b07      	ldr	r3, [pc, #28]	; (80019f0 <dshot_enable_dma_request+0x58>)
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80019da:	60da      	str	r2, [r3, #12]
}
 80019dc:	bf00      	nop
 80019de:	46bd      	mov	sp, r7
 80019e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e4:	4770      	bx	lr
 80019e6:	bf00      	nop
 80019e8:	20000748 	.word	0x20000748
 80019ec:	20000700 	.word	0x20000700
 80019f0:	20000790 	.word	0x20000790

080019f4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	b08a      	sub	sp, #40	; 0x28
 80019f8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019fa:	f107 0314 	add.w	r3, r7, #20
 80019fe:	2200      	movs	r2, #0
 8001a00:	601a      	str	r2, [r3, #0]
 8001a02:	605a      	str	r2, [r3, #4]
 8001a04:	609a      	str	r2, [r3, #8]
 8001a06:	60da      	str	r2, [r3, #12]
 8001a08:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	613b      	str	r3, [r7, #16]
 8001a0e:	4b23      	ldr	r3, [pc, #140]	; (8001a9c <MX_GPIO_Init+0xa8>)
 8001a10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a12:	4a22      	ldr	r2, [pc, #136]	; (8001a9c <MX_GPIO_Init+0xa8>)
 8001a14:	f043 0304 	orr.w	r3, r3, #4
 8001a18:	6313      	str	r3, [r2, #48]	; 0x30
 8001a1a:	4b20      	ldr	r3, [pc, #128]	; (8001a9c <MX_GPIO_Init+0xa8>)
 8001a1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a1e:	f003 0304 	and.w	r3, r3, #4
 8001a22:	613b      	str	r3, [r7, #16]
 8001a24:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001a26:	2300      	movs	r3, #0
 8001a28:	60fb      	str	r3, [r7, #12]
 8001a2a:	4b1c      	ldr	r3, [pc, #112]	; (8001a9c <MX_GPIO_Init+0xa8>)
 8001a2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a2e:	4a1b      	ldr	r2, [pc, #108]	; (8001a9c <MX_GPIO_Init+0xa8>)
 8001a30:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001a34:	6313      	str	r3, [r2, #48]	; 0x30
 8001a36:	4b19      	ldr	r3, [pc, #100]	; (8001a9c <MX_GPIO_Init+0xa8>)
 8001a38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a3e:	60fb      	str	r3, [r7, #12]
 8001a40:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a42:	2300      	movs	r3, #0
 8001a44:	60bb      	str	r3, [r7, #8]
 8001a46:	4b15      	ldr	r3, [pc, #84]	; (8001a9c <MX_GPIO_Init+0xa8>)
 8001a48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a4a:	4a14      	ldr	r2, [pc, #80]	; (8001a9c <MX_GPIO_Init+0xa8>)
 8001a4c:	f043 0301 	orr.w	r3, r3, #1
 8001a50:	6313      	str	r3, [r2, #48]	; 0x30
 8001a52:	4b12      	ldr	r3, [pc, #72]	; (8001a9c <MX_GPIO_Init+0xa8>)
 8001a54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a56:	f003 0301 	and.w	r3, r3, #1
 8001a5a:	60bb      	str	r3, [r7, #8]
 8001a5c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a5e:	2300      	movs	r3, #0
 8001a60:	607b      	str	r3, [r7, #4]
 8001a62:	4b0e      	ldr	r3, [pc, #56]	; (8001a9c <MX_GPIO_Init+0xa8>)
 8001a64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a66:	4a0d      	ldr	r2, [pc, #52]	; (8001a9c <MX_GPIO_Init+0xa8>)
 8001a68:	f043 0302 	orr.w	r3, r3, #2
 8001a6c:	6313      	str	r3, [r2, #48]	; 0x30
 8001a6e:	4b0b      	ldr	r3, [pc, #44]	; (8001a9c <MX_GPIO_Init+0xa8>)
 8001a70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a72:	f003 0302 	and.w	r3, r3, #2
 8001a76:	607b      	str	r3, [r7, #4]
 8001a78:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001a7a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001a7e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a80:	2300      	movs	r3, #0
 8001a82:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a84:	2300      	movs	r3, #0
 8001a86:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a88:	f107 0314 	add.w	r3, r7, #20
 8001a8c:	4619      	mov	r1, r3
 8001a8e:	4804      	ldr	r0, [pc, #16]	; (8001aa0 <MX_GPIO_Init+0xac>)
 8001a90:	f005 fe46 	bl	8007720 <HAL_GPIO_Init>

}
 8001a94:	bf00      	nop
 8001a96:	3728      	adds	r7, #40	; 0x28
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	bd80      	pop	{r7, pc}
 8001a9c:	40023800 	.word	0x40023800
 8001aa0:	40020800 	.word	0x40020800

08001aa4 <GYRO_Init>:
#include "iks01a2_motion_sensors_ex.h"

#include "Data.h"

void GYRO_Init()
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	af00      	add	r7, sp, #0
	IKS01A2_MOTION_SENSOR_SetOutputDataRate(IKS01A2_LSM6DSL_0, MOTION_GYRO, 1000);
 8001aa8:	ed9f 0a06 	vldr	s0, [pc, #24]	; 8001ac4 <GYRO_Init+0x20>
 8001aac:	2101      	movs	r1, #1
 8001aae:	2000      	movs	r0, #0
 8001ab0:	f004 fe90 	bl	80067d4 <IKS01A2_MOTION_SENSOR_SetOutputDataRate>
	IKS01A2_MOTION_SENSOR_SetFullScale(IKS01A2_LSM6DSL_0, MOTION_GYRO, 2000);
 8001ab4:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8001ab8:	2101      	movs	r1, #1
 8001aba:	2000      	movs	r0, #0
 8001abc:	f004 fed0 	bl	8006860 <IKS01A2_MOTION_SENSOR_SetFullScale>
}
 8001ac0:	bf00      	nop
 8001ac2:	bd80      	pop	{r7, pc}
 8001ac4:	447a0000 	.word	0x447a0000

08001ac8 <GYRO_GetValues>:

void GYRO_GetValues(XYZ_Data *values)
{
 8001ac8:	b5b0      	push	{r4, r5, r7, lr}
 8001aca:	b086      	sub	sp, #24
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	6078      	str	r0, [r7, #4]
	IKS01A2_MOTION_SENSOR_Axes_t data;
	IKS01A2_MOTION_SENSOR_GetAxes(IKS01A2_LSM6DSL_0, MOTION_GYRO, &data);
 8001ad0:	f107 030c 	add.w	r3, r7, #12
 8001ad4:	461a      	mov	r2, r3
 8001ad6:	2101      	movs	r1, #1
 8001ad8:	2000      	movs	r0, #0
 8001ada:	f004 fe37 	bl	800674c <IKS01A2_MOTION_SENSOR_GetAxes>
	//XYZ_Data result;

	//float x = ((float)data.x * 0.001 * 3.14159/180);

	//radians per second
	values->X = ((float)data.x * 0.001 * 3.14159/180) - DATA_GyroRadiansPerSecond_Offset.X;
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	ee07 3a90 	vmov	s15, r3
 8001ae4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001ae8:	ee17 0a90 	vmov	r0, s15
 8001aec:	f7fe fd4c 	bl	8000588 <__aeabi_f2d>
 8001af0:	a351      	add	r3, pc, #324	; (adr r3, 8001c38 <GYRO_GetValues+0x170>)
 8001af2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001af6:	f7fe fd9f 	bl	8000638 <__aeabi_dmul>
 8001afa:	4602      	mov	r2, r0
 8001afc:	460b      	mov	r3, r1
 8001afe:	4610      	mov	r0, r2
 8001b00:	4619      	mov	r1, r3
 8001b02:	a34f      	add	r3, pc, #316	; (adr r3, 8001c40 <GYRO_GetValues+0x178>)
 8001b04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b08:	f7fe fd96 	bl	8000638 <__aeabi_dmul>
 8001b0c:	4602      	mov	r2, r0
 8001b0e:	460b      	mov	r3, r1
 8001b10:	4610      	mov	r0, r2
 8001b12:	4619      	mov	r1, r3
 8001b14:	f04f 0200 	mov.w	r2, #0
 8001b18:	4b4b      	ldr	r3, [pc, #300]	; (8001c48 <GYRO_GetValues+0x180>)
 8001b1a:	f7fe feb7 	bl	800088c <__aeabi_ddiv>
 8001b1e:	4602      	mov	r2, r0
 8001b20:	460b      	mov	r3, r1
 8001b22:	4614      	mov	r4, r2
 8001b24:	461d      	mov	r5, r3
 8001b26:	4b49      	ldr	r3, [pc, #292]	; (8001c4c <GYRO_GetValues+0x184>)
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	f7fe fd2c 	bl	8000588 <__aeabi_f2d>
 8001b30:	4602      	mov	r2, r0
 8001b32:	460b      	mov	r3, r1
 8001b34:	4620      	mov	r0, r4
 8001b36:	4629      	mov	r1, r5
 8001b38:	f7fe fbc6 	bl	80002c8 <__aeabi_dsub>
 8001b3c:	4602      	mov	r2, r0
 8001b3e:	460b      	mov	r3, r1
 8001b40:	4610      	mov	r0, r2
 8001b42:	4619      	mov	r1, r3
 8001b44:	f7ff f850 	bl	8000be8 <__aeabi_d2f>
 8001b48:	4602      	mov	r2, r0
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	601a      	str	r2, [r3, #0]
	values->Y = ((float)data.y * 0.001 * 3.14159/180) - DATA_GyroRadiansPerSecond_Offset.Y;
 8001b4e:	693b      	ldr	r3, [r7, #16]
 8001b50:	ee07 3a90 	vmov	s15, r3
 8001b54:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001b58:	ee17 0a90 	vmov	r0, s15
 8001b5c:	f7fe fd14 	bl	8000588 <__aeabi_f2d>
 8001b60:	a335      	add	r3, pc, #212	; (adr r3, 8001c38 <GYRO_GetValues+0x170>)
 8001b62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b66:	f7fe fd67 	bl	8000638 <__aeabi_dmul>
 8001b6a:	4602      	mov	r2, r0
 8001b6c:	460b      	mov	r3, r1
 8001b6e:	4610      	mov	r0, r2
 8001b70:	4619      	mov	r1, r3
 8001b72:	a333      	add	r3, pc, #204	; (adr r3, 8001c40 <GYRO_GetValues+0x178>)
 8001b74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b78:	f7fe fd5e 	bl	8000638 <__aeabi_dmul>
 8001b7c:	4602      	mov	r2, r0
 8001b7e:	460b      	mov	r3, r1
 8001b80:	4610      	mov	r0, r2
 8001b82:	4619      	mov	r1, r3
 8001b84:	f04f 0200 	mov.w	r2, #0
 8001b88:	4b2f      	ldr	r3, [pc, #188]	; (8001c48 <GYRO_GetValues+0x180>)
 8001b8a:	f7fe fe7f 	bl	800088c <__aeabi_ddiv>
 8001b8e:	4602      	mov	r2, r0
 8001b90:	460b      	mov	r3, r1
 8001b92:	4614      	mov	r4, r2
 8001b94:	461d      	mov	r5, r3
 8001b96:	4b2d      	ldr	r3, [pc, #180]	; (8001c4c <GYRO_GetValues+0x184>)
 8001b98:	685b      	ldr	r3, [r3, #4]
 8001b9a:	4618      	mov	r0, r3
 8001b9c:	f7fe fcf4 	bl	8000588 <__aeabi_f2d>
 8001ba0:	4602      	mov	r2, r0
 8001ba2:	460b      	mov	r3, r1
 8001ba4:	4620      	mov	r0, r4
 8001ba6:	4629      	mov	r1, r5
 8001ba8:	f7fe fb8e 	bl	80002c8 <__aeabi_dsub>
 8001bac:	4602      	mov	r2, r0
 8001bae:	460b      	mov	r3, r1
 8001bb0:	4610      	mov	r0, r2
 8001bb2:	4619      	mov	r1, r3
 8001bb4:	f7ff f818 	bl	8000be8 <__aeabi_d2f>
 8001bb8:	4602      	mov	r2, r0
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	605a      	str	r2, [r3, #4]
	values->Z = ((float)data.z * 0.001 * 3.14159/180) - DATA_GyroRadiansPerSecond_Offset.Z;
 8001bbe:	697b      	ldr	r3, [r7, #20]
 8001bc0:	ee07 3a90 	vmov	s15, r3
 8001bc4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001bc8:	ee17 0a90 	vmov	r0, s15
 8001bcc:	f7fe fcdc 	bl	8000588 <__aeabi_f2d>
 8001bd0:	a319      	add	r3, pc, #100	; (adr r3, 8001c38 <GYRO_GetValues+0x170>)
 8001bd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bd6:	f7fe fd2f 	bl	8000638 <__aeabi_dmul>
 8001bda:	4602      	mov	r2, r0
 8001bdc:	460b      	mov	r3, r1
 8001bde:	4610      	mov	r0, r2
 8001be0:	4619      	mov	r1, r3
 8001be2:	a317      	add	r3, pc, #92	; (adr r3, 8001c40 <GYRO_GetValues+0x178>)
 8001be4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001be8:	f7fe fd26 	bl	8000638 <__aeabi_dmul>
 8001bec:	4602      	mov	r2, r0
 8001bee:	460b      	mov	r3, r1
 8001bf0:	4610      	mov	r0, r2
 8001bf2:	4619      	mov	r1, r3
 8001bf4:	f04f 0200 	mov.w	r2, #0
 8001bf8:	4b13      	ldr	r3, [pc, #76]	; (8001c48 <GYRO_GetValues+0x180>)
 8001bfa:	f7fe fe47 	bl	800088c <__aeabi_ddiv>
 8001bfe:	4602      	mov	r2, r0
 8001c00:	460b      	mov	r3, r1
 8001c02:	4614      	mov	r4, r2
 8001c04:	461d      	mov	r5, r3
 8001c06:	4b11      	ldr	r3, [pc, #68]	; (8001c4c <GYRO_GetValues+0x184>)
 8001c08:	689b      	ldr	r3, [r3, #8]
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	f7fe fcbc 	bl	8000588 <__aeabi_f2d>
 8001c10:	4602      	mov	r2, r0
 8001c12:	460b      	mov	r3, r1
 8001c14:	4620      	mov	r0, r4
 8001c16:	4629      	mov	r1, r5
 8001c18:	f7fe fb56 	bl	80002c8 <__aeabi_dsub>
 8001c1c:	4602      	mov	r2, r0
 8001c1e:	460b      	mov	r3, r1
 8001c20:	4610      	mov	r0, r2
 8001c22:	4619      	mov	r1, r3
 8001c24:	f7fe ffe0 	bl	8000be8 <__aeabi_d2f>
 8001c28:	4602      	mov	r2, r0
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	609a      	str	r2, [r3, #8]
	values->Y = ((float)data.y * 0.001) - DATA_GyroDegreesPerSecond_Offset.Y;
	values->Z = ((float)data.z * 0.001) - DATA_GyroDegreesPerSecond_Offset.Z;*/
	//values->X -= DATA_RadiansPerSecond_Offset.X;

	//return result;
}
 8001c2e:	bf00      	nop
 8001c30:	3718      	adds	r7, #24
 8001c32:	46bd      	mov	sp, r7
 8001c34:	bdb0      	pop	{r4, r5, r7, pc}
 8001c36:	bf00      	nop
 8001c38:	d2f1a9fc 	.word	0xd2f1a9fc
 8001c3c:	3f50624d 	.word	0x3f50624d
 8001c40:	f01b866e 	.word	0xf01b866e
 8001c44:	400921f9 	.word	0x400921f9
 8001c48:	40668000 	.word	0x40668000
 8001c4c:	20000668 	.word	0x20000668

08001c50 <LOGGER_WriteLine>:
	/*fresult = f_open(&fil, "log.txt", FA_OPEN_ALWAYS | FA_WRITE | FA_READ);
	f_lseek(&fil, fil.fptr);*/
}

void LOGGER_WriteLine(char* data, enum LogType logType)
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	b082      	sub	sp, #8
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	6078      	str	r0, [r7, #4]
 8001c58:	460b      	mov	r3, r1
 8001c5a:	70fb      	strb	r3, [r7, #3]
	LOGGER_PrepareString(data, logType);
 8001c5c:	78fb      	ldrb	r3, [r7, #3]
 8001c5e:	4619      	mov	r1, r3
 8001c60:	6878      	ldr	r0, [r7, #4]
 8001c62:	f000 f81f 	bl	8001ca4 <LOGGER_PrepareString>
	CDC_Transmit_FS(result, strlen(result));
 8001c66:	4806      	ldr	r0, [pc, #24]	; (8001c80 <LOGGER_WriteLine+0x30>)
 8001c68:	f7fe fad2 	bl	8000210 <strlen>
 8001c6c:	4603      	mov	r3, r0
 8001c6e:	4619      	mov	r1, r3
 8001c70:	4803      	ldr	r0, [pc, #12]	; (8001c80 <LOGGER_WriteLine+0x30>)
 8001c72:	f00d fda7 	bl	800f7c4 <CDC_Transmit_FS>
	//free(result);
}
 8001c76:	bf00      	nop
 8001c78:	3708      	adds	r7, #8
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	bd80      	pop	{r7, pc}
 8001c7e:	bf00      	nop
 8001c80:	20000534 	.word	0x20000534

08001c84 <LOGGER_WriteData>:

void LOGGER_WriteData()
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	af00      	add	r7, sp, #0
	//char data_[100];
	LOGGER_PrepareData();
 8001c88:	f000 f8ac 	bl	8001de4 <LOGGER_PrepareData>
	//LOGGER_PrepareString(data_, _DATA);
	CDC_Transmit_FS(result, strlen(result));
 8001c8c:	4804      	ldr	r0, [pc, #16]	; (8001ca0 <LOGGER_WriteData+0x1c>)
 8001c8e:	f7fe fabf 	bl	8000210 <strlen>
 8001c92:	4603      	mov	r3, r0
 8001c94:	4619      	mov	r1, r3
 8001c96:	4802      	ldr	r0, [pc, #8]	; (8001ca0 <LOGGER_WriteData+0x1c>)
 8001c98:	f00d fd94 	bl	800f7c4 <CDC_Transmit_FS>
	//free(data_);
}
 8001c9c:	bf00      	nop
 8001c9e:	bd80      	pop	{r7, pc}
 8001ca0:	20000534 	.word	0x20000534

08001ca4 <LOGGER_PrepareString>:
{
	/*fresult = f_close(&fil);*/
}

void LOGGER_PrepareString(char* data, enum LogType logType)
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	b082      	sub	sp, #8
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	6078      	str	r0, [r7, #4]
 8001cac:	460b      	mov	r3, r1
 8001cae:	70fb      	strb	r3, [r7, #3]
	//result = malloc(150);

	memset(result, 0, 150);
 8001cb0:	2296      	movs	r2, #150	; 0x96
 8001cb2:	2100      	movs	r1, #0
 8001cb4:	4842      	ldr	r0, [pc, #264]	; (8001dc0 <LOGGER_PrepareString+0x11c>)
 8001cb6:	f00e fa9f 	bl	80101f8 <memset>
	if(result == NULL)
	{
		return NULL;
	}

	strcpy(result, "[LOG]");
 8001cba:	4b41      	ldr	r3, [pc, #260]	; (8001dc0 <LOGGER_PrepareString+0x11c>)
 8001cbc:	4a41      	ldr	r2, [pc, #260]	; (8001dc4 <LOGGER_PrepareString+0x120>)
 8001cbe:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001cc2:	6018      	str	r0, [r3, #0]
 8001cc4:	3304      	adds	r3, #4
 8001cc6:	8019      	strh	r1, [r3, #0]

	switch(logType)
 8001cc8:	78fb      	ldrb	r3, [r7, #3]
 8001cca:	2b04      	cmp	r3, #4
 8001ccc:	d856      	bhi.n	8001d7c <LOGGER_PrepareString+0xd8>
 8001cce:	a201      	add	r2, pc, #4	; (adr r2, 8001cd4 <LOGGER_PrepareString+0x30>)
 8001cd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001cd4:	08001ce9 	.word	0x08001ce9
 8001cd8:	08001d05 	.word	0x08001d05
 8001cdc:	08001d23 	.word	0x08001d23
 8001ce0:	08001d3f 	.word	0x08001d3f
 8001ce4:	08001d5f 	.word	0x08001d5f
	{
	case _DEBUG:
		strcat(result, "(DEBUG)");
 8001ce8:	4835      	ldr	r0, [pc, #212]	; (8001dc0 <LOGGER_PrepareString+0x11c>)
 8001cea:	f7fe fa91 	bl	8000210 <strlen>
 8001cee:	4603      	mov	r3, r0
 8001cf0:	461a      	mov	r2, r3
 8001cf2:	4b33      	ldr	r3, [pc, #204]	; (8001dc0 <LOGGER_PrepareString+0x11c>)
 8001cf4:	4413      	add	r3, r2
 8001cf6:	4934      	ldr	r1, [pc, #208]	; (8001dc8 <LOGGER_PrepareString+0x124>)
 8001cf8:	461a      	mov	r2, r3
 8001cfa:	460b      	mov	r3, r1
 8001cfc:	cb03      	ldmia	r3!, {r0, r1}
 8001cfe:	6010      	str	r0, [r2, #0]
 8001d00:	6051      	str	r1, [r2, #4]
		break;
 8001d02:	e049      	b.n	8001d98 <LOGGER_PrepareString+0xf4>
	case _INFO:
		strcat(result, "(INFO)");
 8001d04:	482e      	ldr	r0, [pc, #184]	; (8001dc0 <LOGGER_PrepareString+0x11c>)
 8001d06:	f7fe fa83 	bl	8000210 <strlen>
 8001d0a:	4603      	mov	r3, r0
 8001d0c:	461a      	mov	r2, r3
 8001d0e:	4b2c      	ldr	r3, [pc, #176]	; (8001dc0 <LOGGER_PrepareString+0x11c>)
 8001d10:	4413      	add	r3, r2
 8001d12:	4a2e      	ldr	r2, [pc, #184]	; (8001dcc <LOGGER_PrepareString+0x128>)
 8001d14:	6810      	ldr	r0, [r2, #0]
 8001d16:	6018      	str	r0, [r3, #0]
 8001d18:	8891      	ldrh	r1, [r2, #4]
 8001d1a:	7992      	ldrb	r2, [r2, #6]
 8001d1c:	8099      	strh	r1, [r3, #4]
 8001d1e:	719a      	strb	r2, [r3, #6]
		break;
 8001d20:	e03a      	b.n	8001d98 <LOGGER_PrepareString+0xf4>
	case _ERROR:
		strcat(result, "(ERROR)");
 8001d22:	4827      	ldr	r0, [pc, #156]	; (8001dc0 <LOGGER_PrepareString+0x11c>)
 8001d24:	f7fe fa74 	bl	8000210 <strlen>
 8001d28:	4603      	mov	r3, r0
 8001d2a:	461a      	mov	r2, r3
 8001d2c:	4b24      	ldr	r3, [pc, #144]	; (8001dc0 <LOGGER_PrepareString+0x11c>)
 8001d2e:	4413      	add	r3, r2
 8001d30:	4927      	ldr	r1, [pc, #156]	; (8001dd0 <LOGGER_PrepareString+0x12c>)
 8001d32:	461a      	mov	r2, r3
 8001d34:	460b      	mov	r3, r1
 8001d36:	cb03      	ldmia	r3!, {r0, r1}
 8001d38:	6010      	str	r0, [r2, #0]
 8001d3a:	6051      	str	r1, [r2, #4]
		break;
 8001d3c:	e02c      	b.n	8001d98 <LOGGER_PrepareString+0xf4>
	case _WARNING:
		strcat(result, "(WARNING)");
 8001d3e:	4820      	ldr	r0, [pc, #128]	; (8001dc0 <LOGGER_PrepareString+0x11c>)
 8001d40:	f7fe fa66 	bl	8000210 <strlen>
 8001d44:	4603      	mov	r3, r0
 8001d46:	461a      	mov	r2, r3
 8001d48:	4b1d      	ldr	r3, [pc, #116]	; (8001dc0 <LOGGER_PrepareString+0x11c>)
 8001d4a:	4413      	add	r3, r2
 8001d4c:	4921      	ldr	r1, [pc, #132]	; (8001dd4 <LOGGER_PrepareString+0x130>)
 8001d4e:	461a      	mov	r2, r3
 8001d50:	460b      	mov	r3, r1
 8001d52:	cb03      	ldmia	r3!, {r0, r1}
 8001d54:	6010      	str	r0, [r2, #0]
 8001d56:	6051      	str	r1, [r2, #4]
 8001d58:	881b      	ldrh	r3, [r3, #0]
 8001d5a:	8113      	strh	r3, [r2, #8]
		break;
 8001d5c:	e01c      	b.n	8001d98 <LOGGER_PrepareString+0xf4>
	case _DATA:
			strcat(result, "(DATA)");
 8001d5e:	4818      	ldr	r0, [pc, #96]	; (8001dc0 <LOGGER_PrepareString+0x11c>)
 8001d60:	f7fe fa56 	bl	8000210 <strlen>
 8001d64:	4603      	mov	r3, r0
 8001d66:	461a      	mov	r2, r3
 8001d68:	4b15      	ldr	r3, [pc, #84]	; (8001dc0 <LOGGER_PrepareString+0x11c>)
 8001d6a:	4413      	add	r3, r2
 8001d6c:	4a1a      	ldr	r2, [pc, #104]	; (8001dd8 <LOGGER_PrepareString+0x134>)
 8001d6e:	6810      	ldr	r0, [r2, #0]
 8001d70:	6018      	str	r0, [r3, #0]
 8001d72:	8891      	ldrh	r1, [r2, #4]
 8001d74:	7992      	ldrb	r2, [r2, #6]
 8001d76:	8099      	strh	r1, [r3, #4]
 8001d78:	719a      	strb	r2, [r3, #6]
			break;
 8001d7a:	e00d      	b.n	8001d98 <LOGGER_PrepareString+0xf4>
	default:
		strcat(result, "(\?\?\?\?)");
 8001d7c:	4810      	ldr	r0, [pc, #64]	; (8001dc0 <LOGGER_PrepareString+0x11c>)
 8001d7e:	f7fe fa47 	bl	8000210 <strlen>
 8001d82:	4603      	mov	r3, r0
 8001d84:	461a      	mov	r2, r3
 8001d86:	4b0e      	ldr	r3, [pc, #56]	; (8001dc0 <LOGGER_PrepareString+0x11c>)
 8001d88:	4413      	add	r3, r2
 8001d8a:	4a14      	ldr	r2, [pc, #80]	; (8001ddc <LOGGER_PrepareString+0x138>)
 8001d8c:	6810      	ldr	r0, [r2, #0]
 8001d8e:	6018      	str	r0, [r3, #0]
 8001d90:	8891      	ldrh	r1, [r2, #4]
 8001d92:	7992      	ldrb	r2, [r2, #6]
 8001d94:	8099      	strh	r1, [r3, #4]
 8001d96:	719a      	strb	r2, [r3, #6]
	}

	strcat(result, data);
 8001d98:	6879      	ldr	r1, [r7, #4]
 8001d9a:	4809      	ldr	r0, [pc, #36]	; (8001dc0 <LOGGER_PrepareString+0x11c>)
 8001d9c:	f00e ffae 	bl	8010cfc <strcat>
	strcat(result, "\n\r");
 8001da0:	4807      	ldr	r0, [pc, #28]	; (8001dc0 <LOGGER_PrepareString+0x11c>)
 8001da2:	f7fe fa35 	bl	8000210 <strlen>
 8001da6:	4603      	mov	r3, r0
 8001da8:	461a      	mov	r2, r3
 8001daa:	4b05      	ldr	r3, [pc, #20]	; (8001dc0 <LOGGER_PrepareString+0x11c>)
 8001dac:	4413      	add	r3, r2
 8001dae:	4a0c      	ldr	r2, [pc, #48]	; (8001de0 <LOGGER_PrepareString+0x13c>)
 8001db0:	8811      	ldrh	r1, [r2, #0]
 8001db2:	7892      	ldrb	r2, [r2, #2]
 8001db4:	8019      	strh	r1, [r3, #0]
 8001db6:	709a      	strb	r2, [r3, #2]

	//char* result = strdup(startString);
	//free(startString);

	//return result;
}
 8001db8:	3708      	adds	r7, #8
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	bd80      	pop	{r7, pc}
 8001dbe:	bf00      	nop
 8001dc0:	20000534 	.word	0x20000534
 8001dc4:	08014800 	.word	0x08014800
 8001dc8:	08014808 	.word	0x08014808
 8001dcc:	08014810 	.word	0x08014810
 8001dd0:	08014818 	.word	0x08014818
 8001dd4:	08014820 	.word	0x08014820
 8001dd8:	0801482c 	.word	0x0801482c
 8001ddc:	08014834 	.word	0x08014834
 8001de0:	0801483c 	.word	0x0801483c

08001de4 <LOGGER_PrepareData>:

void LOGGER_PrepareData()
{
 8001de4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001de8:	b0ad      	sub	sp, #180	; 0xb4
 8001dea:	af1a      	add	r7, sp, #104	; 0x68
	memset(result, 0, 150);
 8001dec:	2296      	movs	r2, #150	; 0x96
 8001dee:	2100      	movs	r1, #0
 8001df0:	4849      	ldr	r0, [pc, #292]	; (8001f18 <LOGGER_PrepareData+0x134>)
 8001df2:	f00e fa01 	bl	80101f8 <memset>

	sprintf(result, "[LOG](DATA)%.2f %.2f %.2f %.2f %.2f %.2f %.2f %.2f %.2f %.2f %.2f %.2f %hu %hu %hu %hu\n\r", DATA_GyroRadiansPerSecond.X, DATA_GyroRadiansPerSecond.Y, DATA_GyroRadiansPerSecond.Z, DATA_GForce.X, DATA_GForce.Y, DATA_GForce.Z, DATA_GyroAnglesInWorldFrame.X, DATA_GyroAnglesInWorldFrame.Y, DATA_GyroAnglesInWorldFrame.Z, DATA_ComplementedAngles.X, DATA_ComplementedAngles.Y, DATA_ComplementedAngles.Z, DATA_MotorValues.motor0, DATA_MotorValues.motor1, DATA_MotorValues.motor2, DATA_MotorValues.motor3);
 8001df6:	4b49      	ldr	r3, [pc, #292]	; (8001f1c <LOGGER_PrepareData+0x138>)
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	4618      	mov	r0, r3
 8001dfc:	f7fe fbc4 	bl	8000588 <__aeabi_f2d>
 8001e00:	e9c7 0110 	strd	r0, r1, [r7, #64]	; 0x40
 8001e04:	4b45      	ldr	r3, [pc, #276]	; (8001f1c <LOGGER_PrepareData+0x138>)
 8001e06:	685b      	ldr	r3, [r3, #4]
 8001e08:	4618      	mov	r0, r3
 8001e0a:	f7fe fbbd 	bl	8000588 <__aeabi_f2d>
 8001e0e:	e9c7 010e 	strd	r0, r1, [r7, #56]	; 0x38
 8001e12:	4b42      	ldr	r3, [pc, #264]	; (8001f1c <LOGGER_PrepareData+0x138>)
 8001e14:	689b      	ldr	r3, [r3, #8]
 8001e16:	4618      	mov	r0, r3
 8001e18:	f7fe fbb6 	bl	8000588 <__aeabi_f2d>
 8001e1c:	e9c7 010c 	strd	r0, r1, [r7, #48]	; 0x30
 8001e20:	4b3f      	ldr	r3, [pc, #252]	; (8001f20 <LOGGER_PrepareData+0x13c>)
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	4618      	mov	r0, r3
 8001e26:	f7fe fbaf 	bl	8000588 <__aeabi_f2d>
 8001e2a:	e9c7 010a 	strd	r0, r1, [r7, #40]	; 0x28
 8001e2e:	4b3c      	ldr	r3, [pc, #240]	; (8001f20 <LOGGER_PrepareData+0x13c>)
 8001e30:	685b      	ldr	r3, [r3, #4]
 8001e32:	4618      	mov	r0, r3
 8001e34:	f7fe fba8 	bl	8000588 <__aeabi_f2d>
 8001e38:	e9c7 0108 	strd	r0, r1, [r7, #32]
 8001e3c:	4b38      	ldr	r3, [pc, #224]	; (8001f20 <LOGGER_PrepareData+0x13c>)
 8001e3e:	689b      	ldr	r3, [r3, #8]
 8001e40:	4618      	mov	r0, r3
 8001e42:	f7fe fba1 	bl	8000588 <__aeabi_f2d>
 8001e46:	e9c7 0106 	strd	r0, r1, [r7, #24]
 8001e4a:	4b36      	ldr	r3, [pc, #216]	; (8001f24 <LOGGER_PrepareData+0x140>)
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	4618      	mov	r0, r3
 8001e50:	f7fe fb9a 	bl	8000588 <__aeabi_f2d>
 8001e54:	e9c7 0104 	strd	r0, r1, [r7, #16]
 8001e58:	4b32      	ldr	r3, [pc, #200]	; (8001f24 <LOGGER_PrepareData+0x140>)
 8001e5a:	685b      	ldr	r3, [r3, #4]
 8001e5c:	4618      	mov	r0, r3
 8001e5e:	f7fe fb93 	bl	8000588 <__aeabi_f2d>
 8001e62:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8001e66:	4b2f      	ldr	r3, [pc, #188]	; (8001f24 <LOGGER_PrepareData+0x140>)
 8001e68:	689b      	ldr	r3, [r3, #8]
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	f7fe fb8c 	bl	8000588 <__aeabi_f2d>
 8001e70:	4682      	mov	sl, r0
 8001e72:	468b      	mov	fp, r1
 8001e74:	4b2c      	ldr	r3, [pc, #176]	; (8001f28 <LOGGER_PrepareData+0x144>)
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	4618      	mov	r0, r3
 8001e7a:	f7fe fb85 	bl	8000588 <__aeabi_f2d>
 8001e7e:	4680      	mov	r8, r0
 8001e80:	4689      	mov	r9, r1
 8001e82:	4b29      	ldr	r3, [pc, #164]	; (8001f28 <LOGGER_PrepareData+0x144>)
 8001e84:	685b      	ldr	r3, [r3, #4]
 8001e86:	4618      	mov	r0, r3
 8001e88:	f7fe fb7e 	bl	8000588 <__aeabi_f2d>
 8001e8c:	4604      	mov	r4, r0
 8001e8e:	460d      	mov	r5, r1
 8001e90:	4b25      	ldr	r3, [pc, #148]	; (8001f28 <LOGGER_PrepareData+0x144>)
 8001e92:	689b      	ldr	r3, [r3, #8]
 8001e94:	4618      	mov	r0, r3
 8001e96:	f7fe fb77 	bl	8000588 <__aeabi_f2d>
 8001e9a:	4b24      	ldr	r3, [pc, #144]	; (8001f2c <LOGGER_PrepareData+0x148>)
 8001e9c:	881b      	ldrh	r3, [r3, #0]
 8001e9e:	607b      	str	r3, [r7, #4]
 8001ea0:	4b22      	ldr	r3, [pc, #136]	; (8001f2c <LOGGER_PrepareData+0x148>)
 8001ea2:	885b      	ldrh	r3, [r3, #2]
 8001ea4:	461e      	mov	r6, r3
 8001ea6:	4b21      	ldr	r3, [pc, #132]	; (8001f2c <LOGGER_PrepareData+0x148>)
 8001ea8:	889b      	ldrh	r3, [r3, #4]
 8001eaa:	461a      	mov	r2, r3
 8001eac:	4b1f      	ldr	r3, [pc, #124]	; (8001f2c <LOGGER_PrepareData+0x148>)
 8001eae:	88db      	ldrh	r3, [r3, #6]
 8001eb0:	9319      	str	r3, [sp, #100]	; 0x64
 8001eb2:	9218      	str	r2, [sp, #96]	; 0x60
 8001eb4:	9617      	str	r6, [sp, #92]	; 0x5c
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	9316      	str	r3, [sp, #88]	; 0x58
 8001eba:	e9cd 0114 	strd	r0, r1, [sp, #80]	; 0x50
 8001ebe:	e9cd 4512 	strd	r4, r5, [sp, #72]	; 0x48
 8001ec2:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 8001ec6:	e9cd ab0e 	strd	sl, fp, [sp, #56]	; 0x38
 8001eca:	ed97 7b02 	vldr	d7, [r7, #8]
 8001ece:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 8001ed2:	ed97 7b04 	vldr	d7, [r7, #16]
 8001ed6:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8001eda:	ed97 7b06 	vldr	d7, [r7, #24]
 8001ede:	ed8d 7b08 	vstr	d7, [sp, #32]
 8001ee2:	ed97 7b08 	vldr	d7, [r7, #32]
 8001ee6:	ed8d 7b06 	vstr	d7, [sp, #24]
 8001eea:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 8001eee:	ed8d 7b04 	vstr	d7, [sp, #16]
 8001ef2:	ed97 7b0c 	vldr	d7, [r7, #48]	; 0x30
 8001ef6:	ed8d 7b02 	vstr	d7, [sp, #8]
 8001efa:	ed97 7b0e 	vldr	d7, [r7, #56]	; 0x38
 8001efe:	ed8d 7b00 	vstr	d7, [sp]
 8001f02:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8001f06:	490a      	ldr	r1, [pc, #40]	; (8001f30 <LOGGER_PrepareData+0x14c>)
 8001f08:	4803      	ldr	r0, [pc, #12]	; (8001f18 <LOGGER_PrepareData+0x134>)
 8001f0a:	f00e fed7 	bl	8010cbc <siprintf>
}
 8001f0e:	bf00      	nop
 8001f10:	374c      	adds	r7, #76	; 0x4c
 8001f12:	46bd      	mov	sp, r7
 8001f14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001f18:	20000534 	.word	0x20000534
 8001f1c:	20000614 	.word	0x20000614
 8001f20:	20000638 	.word	0x20000638
 8001f24:	2000062c 	.word	0x2000062c
 8001f28:	20000650 	.word	0x20000650
 8001f2c:	20000698 	.word	0x20000698
 8001f30:	08014840 	.word	0x08014840

08001f34 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001f34:	b580      	push	{r7, lr}
 8001f36:	b086      	sub	sp, #24
 8001f38:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001f3a:	f004 fed9 	bl	8006cf0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001f3e:	f000 f899 	bl	8002074 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001f42:	f7ff fd57 	bl	80019f4 <MX_GPIO_Init>
  MX_DMA_Init();
 8001f46:	f7ff fb09 	bl	800155c <MX_DMA_Init>
  MX_TIM2_Init();
 8001f4a:	f001 f8fd 	bl	8003148 <MX_TIM2_Init>
  MX_USB_DEVICE_Init();
 8001f4e:	f00d fb71 	bl	800f634 <MX_USB_DEVICE_Init>
  MX_TIM3_Init();
 8001f52:	f001 f95b 	bl	800320c <MX_TIM3_Init>
  MX_TIM5_Init();
 8001f56:	f001 f9b3 	bl	80032c0 <MX_TIM5_Init>
  /* USER CODE BEGIN 2 */

  //dshot_init(DSHOT600);
  MOTOR_MIXER_InitDSHOT();
 8001f5a:	f000 fd97 	bl	8002a8c <MOTOR_MIXER_InitDSHOT>

  float setpoints[4] = {0, 0, 0, 0};
 8001f5e:	1d3b      	adds	r3, r7, #4
 8001f60:	2200      	movs	r2, #0
 8001f62:	601a      	str	r2, [r3, #0]
 8001f64:	605a      	str	r2, [r3, #4]
 8001f66:	609a      	str	r2, [r3, #8]
 8001f68:	60da      	str	r2, [r3, #12]

  int i = 0;
 8001f6a:	2300      	movs	r3, #0
 8001f6c:	617b      	str	r3, [r7, #20]
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  if(!HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13))
 8001f6e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001f72:	483b      	ldr	r0, [pc, #236]	; (8002060 <main+0x12c>)
 8001f74:	f005 fe5c 	bl	8007c30 <HAL_GPIO_ReadPin>
 8001f78:	4603      	mov	r3, r0
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d102      	bne.n	8001f84 <main+0x50>
  {
	  CONFIGURATION_Start(buffer);
 8001f7e:	4839      	ldr	r0, [pc, #228]	; (8002064 <main+0x130>)
 8001f80:	f7ff f804 	bl	8000f8c <CONFIGURATION_Start>
  }

	for(i = 0; i < 15; ++i)
 8001f84:	2300      	movs	r3, #0
 8001f86:	617b      	str	r3, [r7, #20]
 8001f88:	e00a      	b.n	8001fa0 <main+0x6c>
		  {
			  LOGGER_WriteLine("Starting", _INFO);
 8001f8a:	2101      	movs	r1, #1
 8001f8c:	4836      	ldr	r0, [pc, #216]	; (8002068 <main+0x134>)
 8001f8e:	f7ff fe5f 	bl	8001c50 <LOGGER_WriteLine>
			  HAL_Delay(400);
 8001f92:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8001f96:	f004 ff1d 	bl	8006dd4 <HAL_Delay>
	for(i = 0; i < 15; ++i)
 8001f9a:	697b      	ldr	r3, [r7, #20]
 8001f9c:	3301      	adds	r3, #1
 8001f9e:	617b      	str	r3, [r7, #20]
 8001fa0:	697b      	ldr	r3, [r7, #20]
 8001fa2:	2b0e      	cmp	r3, #14
 8001fa4:	ddf1      	ble.n	8001f8a <main+0x56>
		  }

    initSensors();
 8001fa6:	f000 f8d7 	bl	8002158 <initSensors>

    for(i = 0; i < 2000; ++i)
 8001faa:	2300      	movs	r3, #0
 8001fac:	617b      	str	r3, [r7, #20]
 8001fae:	e007      	b.n	8001fc0 <main+0x8c>
	  {
    	MOTOR_MIXER_WriteMotors();
 8001fb0:	f000 fdfc 	bl	8002bac <MOTOR_MIXER_WriteMotors>
    		HAL_Delay(1);
 8001fb4:	2001      	movs	r0, #1
 8001fb6:	f004 ff0d 	bl	8006dd4 <HAL_Delay>
    for(i = 0; i < 2000; ++i)
 8001fba:	697b      	ldr	r3, [r7, #20]
 8001fbc:	3301      	adds	r3, #1
 8001fbe:	617b      	str	r3, [r7, #20]
 8001fc0:	697b      	ldr	r3, [r7, #20]
 8001fc2:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8001fc6:	dbf3      	blt.n	8001fb0 <main+0x7c>
	  }

    time = systick_micros;
 8001fc8:	4b28      	ldr	r3, [pc, #160]	; (800206c <main+0x138>)
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	4a28      	ldr	r2, [pc, #160]	; (8002070 <main+0x13c>)
 8001fce:	6013      	str	r3, [r2, #0]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(buffer[17] <= 15)
 8001fd0:	4b24      	ldr	r3, [pc, #144]	; (8002064 <main+0x130>)
 8001fd2:	7c5b      	ldrb	r3, [r3, #17]
 8001fd4:	2b0f      	cmp	r3, #15
 8001fd6:	d808      	bhi.n	8001fea <main+0xb6>
	  {
		  setpoints[1] = buffer[17];
 8001fd8:	4b22      	ldr	r3, [pc, #136]	; (8002064 <main+0x130>)
 8001fda:	7c5b      	ldrb	r3, [r3, #17]
 8001fdc:	ee07 3a90 	vmov	s15, r3
 8001fe0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001fe4:	edc7 7a02 	vstr	s15, [r7, #8]
 8001fe8:	e009      	b.n	8001ffe <main+0xca>
	  }
	  else
	  {
		  setpoints[1] = -(buffer[17] - 15);
 8001fea:	4b1e      	ldr	r3, [pc, #120]	; (8002064 <main+0x130>)
 8001fec:	7c5b      	ldrb	r3, [r3, #17]
 8001fee:	f1c3 030f 	rsb	r3, r3, #15
 8001ff2:	ee07 3a90 	vmov	s15, r3
 8001ff6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001ffa:	edc7 7a02 	vstr	s15, [r7, #8]
	  }

	  if(buffer[18] <= 15)
 8001ffe:	4b19      	ldr	r3, [pc, #100]	; (8002064 <main+0x130>)
 8002000:	7c9b      	ldrb	r3, [r3, #18]
 8002002:	2b0f      	cmp	r3, #15
 8002004:	d808      	bhi.n	8002018 <main+0xe4>
	  {
		  setpoints[2] = buffer[18];
 8002006:	4b17      	ldr	r3, [pc, #92]	; (8002064 <main+0x130>)
 8002008:	7c9b      	ldrb	r3, [r3, #18]
 800200a:	ee07 3a90 	vmov	s15, r3
 800200e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002012:	edc7 7a03 	vstr	s15, [r7, #12]
 8002016:	e009      	b.n	800202c <main+0xf8>
	  }
	  else
	  {
		  setpoints[2] = -(buffer[18] - 15);
 8002018:	4b12      	ldr	r3, [pc, #72]	; (8002064 <main+0x130>)
 800201a:	7c9b      	ldrb	r3, [r3, #18]
 800201c:	f1c3 030f 	rsb	r3, r3, #15
 8002020:	ee07 3a90 	vmov	s15, r3
 8002024:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002028:	edc7 7a03 	vstr	s15, [r7, #12]
	  }
	//dshot_write(my_motor_value);
	MOTOR_MIXER_WriteMotors();
 800202c:	f000 fdbe 	bl	8002bac <MOTOR_MIXER_WriteMotors>
	HAL_Delay(1);
 8002030:	2001      	movs	r0, #1
 8002032:	f004 fecf 	bl	8006dd4 <HAL_Delay>

	//uint8_t a = buffer[0];

	MOTION_SENSORS_UpdateData();
 8002036:	f000 f941 	bl	80022bc <MOTION_SENSORS_UpdateData>
	MOTOR_MIXER_RunPID(setpoints, systick_micros - time);
 800203a:	4b0c      	ldr	r3, [pc, #48]	; (800206c <main+0x138>)
 800203c:	681a      	ldr	r2, [r3, #0]
 800203e:	4b0c      	ldr	r3, [pc, #48]	; (8002070 <main+0x13c>)
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	1ad3      	subs	r3, r2, r3
 8002044:	461a      	mov	r2, r3
 8002046:	1d3b      	adds	r3, r7, #4
 8002048:	4611      	mov	r1, r2
 800204a:	4618      	mov	r0, r3
 800204c:	f000 fce2 	bl	8002a14 <MOTOR_MIXER_RunPID>
	time = systick_micros;
 8002050:	4b06      	ldr	r3, [pc, #24]	; (800206c <main+0x138>)
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	4a06      	ldr	r2, [pc, #24]	; (8002070 <main+0x13c>)
 8002056:	6013      	str	r3, [r2, #0]

	//sprintf(gyroString, "%.2f %.2f %.2f\n\r", DATA_ComplementedAngles.X, DATA_ComplementedAngles.Y, DATA_ComplementedAngles.Z);
	//sprintf(gyroString, "Gyro: %.2f %.2f %.2f Accel: %.2f %.2f %.2f Angle: %.2f %.2f %.2f AngleC: %.2f %.2f %.2f %hu %hu %hu %hu\n\r", DATA_RadiansPerSecond.X, DATA_RadiansPerSecond.Y, DATA_RadiansPerSecond.Z, DATA_GForce.X, DATA_GForce.Y, DATA_GForce.Z, DATA_AccelAngles.X, DATA_AccelAngles.Y, DATA_AccelAngles.Z,  DATA_ComplementedAngles.X, DATA_ComplementedAngles.Y, DATA_ComplementedAngles.Z, DATA_MotorValues.motor0, DATA_MotorValues.motor1, DATA_MotorValues.motor2, DATA_MotorValues.motor3);
	//CDC_Transmit_FS((uint8_t*)gyroString, strlen(gyroString));
	LOGGER_WriteData();
 8002058:	f7ff fe14 	bl	8001c84 <LOGGER_WriteData>
	  if(buffer[17] <= 15)
 800205c:	e7b8      	b.n	8001fd0 <main+0x9c>
 800205e:	bf00      	nop
 8002060:	40020800 	.word	0x40020800
 8002064:	200005cc 	.word	0x200005cc
 8002068:	0801489c 	.word	0x0801489c
 800206c:	200006a0 	.word	0x200006a0
 8002070:	2000060c 	.word	0x2000060c

08002074 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002074:	b580      	push	{r7, lr}
 8002076:	b094      	sub	sp, #80	; 0x50
 8002078:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800207a:	f107 031c 	add.w	r3, r7, #28
 800207e:	2234      	movs	r2, #52	; 0x34
 8002080:	2100      	movs	r1, #0
 8002082:	4618      	mov	r0, r3
 8002084:	f00e f8b8 	bl	80101f8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002088:	f107 0308 	add.w	r3, r7, #8
 800208c:	2200      	movs	r2, #0
 800208e:	601a      	str	r2, [r3, #0]
 8002090:	605a      	str	r2, [r3, #4]
 8002092:	609a      	str	r2, [r3, #8]
 8002094:	60da      	str	r2, [r3, #12]
 8002096:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002098:	2300      	movs	r3, #0
 800209a:	607b      	str	r3, [r7, #4]
 800209c:	4b29      	ldr	r3, [pc, #164]	; (8002144 <SystemClock_Config+0xd0>)
 800209e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020a0:	4a28      	ldr	r2, [pc, #160]	; (8002144 <SystemClock_Config+0xd0>)
 80020a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80020a6:	6413      	str	r3, [r2, #64]	; 0x40
 80020a8:	4b26      	ldr	r3, [pc, #152]	; (8002144 <SystemClock_Config+0xd0>)
 80020aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020b0:	607b      	str	r3, [r7, #4]
 80020b2:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80020b4:	2300      	movs	r3, #0
 80020b6:	603b      	str	r3, [r7, #0]
 80020b8:	4b23      	ldr	r3, [pc, #140]	; (8002148 <SystemClock_Config+0xd4>)
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80020c0:	4a21      	ldr	r2, [pc, #132]	; (8002148 <SystemClock_Config+0xd4>)
 80020c2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80020c6:	6013      	str	r3, [r2, #0]
 80020c8:	4b1f      	ldr	r3, [pc, #124]	; (8002148 <SystemClock_Config+0xd4>)
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80020d0:	603b      	str	r3, [r7, #0]
 80020d2:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80020d4:	2301      	movs	r3, #1
 80020d6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80020d8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80020dc:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80020de:	2302      	movs	r3, #2
 80020e0:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80020e2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80020e6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 80020e8:	2304      	movs	r3, #4
 80020ea:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 72;
 80020ec:	2348      	movs	r3, #72	; 0x48
 80020ee:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80020f0:	2302      	movs	r3, #2
 80020f2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 3;
 80020f4:	2303      	movs	r3, #3
 80020f6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80020f8:	2302      	movs	r3, #2
 80020fa:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80020fc:	f107 031c 	add.w	r3, r7, #28
 8002100:	4618      	mov	r0, r3
 8002102:	f008 fef3 	bl	800aeec <HAL_RCC_OscConfig>
 8002106:	4603      	mov	r3, r0
 8002108:	2b00      	cmp	r3, #0
 800210a:	d001      	beq.n	8002110 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 800210c:	f000 f81e 	bl	800214c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002110:	230f      	movs	r3, #15
 8002112:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002114:	2302      	movs	r3, #2
 8002116:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002118:	2300      	movs	r3, #0
 800211a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800211c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002120:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002122:	2300      	movs	r3, #0
 8002124:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002126:	f107 0308 	add.w	r3, r7, #8
 800212a:	2102      	movs	r1, #2
 800212c:	4618      	mov	r0, r3
 800212e:	f008 f87d 	bl	800a22c <HAL_RCC_ClockConfig>
 8002132:	4603      	mov	r3, r0
 8002134:	2b00      	cmp	r3, #0
 8002136:	d001      	beq.n	800213c <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8002138:	f000 f808 	bl	800214c <Error_Handler>
  }
}
 800213c:	bf00      	nop
 800213e:	3750      	adds	r7, #80	; 0x50
 8002140:	46bd      	mov	sp, r7
 8002142:	bd80      	pop	{r7, pc}
 8002144:	40023800 	.word	0x40023800
 8002148:	40007000 	.word	0x40007000

0800214c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800214c:	b480      	push	{r7}
 800214e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002150:	b672      	cpsid	i
}
 8002152:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002154:	e7fe      	b.n	8002154 <Error_Handler+0x8>
	...

08002158 <initSensors>:

float ** RotationalMatrix;


int initSensors()
{
 8002158:	b580      	push	{r7, lr}
 800215a:	b082      	sub	sp, #8
 800215c:	af00      	add	r7, sp, #0
#if defined(USE_GYRO) && defined(USE_ACCEL)

	if(IKS01A2_MOTION_SENSOR_Init(IKS01A2_LSM6DSL_0, MOTION_GYRO | MOTION_ACCELERO) == HAL_OK)
 800215e:	2103      	movs	r1, #3
 8002160:	2000      	movs	r0, #0
 8002162:	f004 f9f7 	bl	8006554 <IKS01A2_MOTION_SENSOR_Init>
 8002166:	4603      	mov	r3, r0
 8002168:	2b00      	cmp	r3, #0
 800216a:	d14c      	bne.n	8002206 <initSensors+0xae>
	{
		GYRO_Init();
 800216c:	f7ff fc9a 	bl	8001aa4 <GYRO_Init>
		ACCEL_Init();
 8002170:	f7ff f9ac 	bl	80014cc <ACCEL_Init>
		LOGGER_WriteLine("Gyro and Accel initiated", _INFO);
 8002174:	2101      	movs	r1, #1
 8002176:	483b      	ldr	r0, [pc, #236]	; (8002264 <initSensors+0x10c>)
 8002178:	f7ff fd6a 	bl	8001c50 <LOGGER_WriteLine>
#else
	LOGGER_WriteLine("Couldn't find gyro and accel file", _ERROR);

#endif

	uint8_t i = 0;
 800217c:	2300      	movs	r3, #0
 800217e:	71fb      	strb	r3, [r7, #7]

	//Set start time to current micros
	updateTime = systick_micros;
 8002180:	4b39      	ldr	r3, [pc, #228]	; (8002268 <initSensors+0x110>)
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	4a39      	ldr	r2, [pc, #228]	; (800226c <initSensors+0x114>)
 8002186:	6013      	str	r3, [r2, #0]


	//Initialize gyro readings data
	DATA_GyroRadiansPerSecond_Offset.X = 0;
 8002188:	4b39      	ldr	r3, [pc, #228]	; (8002270 <initSensors+0x118>)
 800218a:	f04f 0200 	mov.w	r2, #0
 800218e:	601a      	str	r2, [r3, #0]
	DATA_GyroRadiansPerSecond_Offset.Y = 0;
 8002190:	4b37      	ldr	r3, [pc, #220]	; (8002270 <initSensors+0x118>)
 8002192:	f04f 0200 	mov.w	r2, #0
 8002196:	605a      	str	r2, [r3, #4]
	DATA_GyroRadiansPerSecond_Offset.Z = 0;
 8002198:	4b35      	ldr	r3, [pc, #212]	; (8002270 <initSensors+0x118>)
 800219a:	f04f 0200 	mov.w	r2, #0
 800219e:	609a      	str	r2, [r3, #8]

	//Initialize Euler angles
	DATA_GyroAnglesInWorldFrame.X = 0; //phi
 80021a0:	4b34      	ldr	r3, [pc, #208]	; (8002274 <initSensors+0x11c>)
 80021a2:	f04f 0200 	mov.w	r2, #0
 80021a6:	601a      	str	r2, [r3, #0]
	DATA_GyroAnglesInWorldFrame.Y = 0; //theta
 80021a8:	4b32      	ldr	r3, [pc, #200]	; (8002274 <initSensors+0x11c>)
 80021aa:	f04f 0200 	mov.w	r2, #0
 80021ae:	605a      	str	r2, [r3, #4]
	DATA_GyroAnglesInWorldFrame.Z = 0; //psi
 80021b0:	4b30      	ldr	r3, [pc, #192]	; (8002274 <initSensors+0x11c>)
 80021b2:	f04f 0200 	mov.w	r2, #0
 80021b6:	609a      	str	r2, [r3, #8]

	//Initialize complemented angles values
	DATA_ComplementedAngles.X = 0;
 80021b8:	4b2f      	ldr	r3, [pc, #188]	; (8002278 <initSensors+0x120>)
 80021ba:	f04f 0200 	mov.w	r2, #0
 80021be:	601a      	str	r2, [r3, #0]
	DATA_ComplementedAngles.Y = 0;
 80021c0:	4b2d      	ldr	r3, [pc, #180]	; (8002278 <initSensors+0x120>)
 80021c2:	f04f 0200 	mov.w	r2, #0
 80021c6:	605a      	str	r2, [r3, #4]
	DATA_ComplementedAngles.Z = 0;
 80021c8:	4b2b      	ldr	r3, [pc, #172]	; (8002278 <initSensors+0x120>)
 80021ca:	f04f 0200 	mov.w	r2, #0
 80021ce:	609a      	str	r2, [r3, #8]

	DATA_ComplementedAnglesInDegrees.X = 0;
 80021d0:	4b2a      	ldr	r3, [pc, #168]	; (800227c <initSensors+0x124>)
 80021d2:	f04f 0200 	mov.w	r2, #0
 80021d6:	601a      	str	r2, [r3, #0]
	DATA_ComplementedAnglesInDegrees.Y = 0;
 80021d8:	4b28      	ldr	r3, [pc, #160]	; (800227c <initSensors+0x124>)
 80021da:	f04f 0200 	mov.w	r2, #0
 80021de:	605a      	str	r2, [r3, #4]
	DATA_ComplementedAnglesInDegrees.Z = 0;
 80021e0:	4b26      	ldr	r3, [pc, #152]	; (800227c <initSensors+0x124>)
 80021e2:	f04f 0200 	mov.w	r2, #0
 80021e6:	609a      	str	r2, [r3, #8]

	DATA_GForce.X = 0;
 80021e8:	4b25      	ldr	r3, [pc, #148]	; (8002280 <initSensors+0x128>)
 80021ea:	f04f 0200 	mov.w	r2, #0
 80021ee:	601a      	str	r2, [r3, #0]
	DATA_GForce.Y = 0;
 80021f0:	4b23      	ldr	r3, [pc, #140]	; (8002280 <initSensors+0x128>)
 80021f2:	f04f 0200 	mov.w	r2, #0
 80021f6:	605a      	str	r2, [r3, #4]
	DATA_GForce.Y = 0;
 80021f8:	4b21      	ldr	r3, [pc, #132]	; (8002280 <initSensors+0x128>)
 80021fa:	f04f 0200 	mov.w	r2, #0
 80021fe:	605a      	str	r2, [r3, #4]

	//Run data reading few times, to get read of first noisy data
	for(i = 0; i < 15; i ++)
 8002200:	2300      	movs	r3, #0
 8002202:	71fb      	strb	r3, [r7, #7]
 8002204:	e00e      	b.n	8002224 <initSensors+0xcc>
		LOGGER_WriteLine("Gyro and Accel initialization failed", _ERROR);
 8002206:	2102      	movs	r1, #2
 8002208:	481e      	ldr	r0, [pc, #120]	; (8002284 <initSensors+0x12c>)
 800220a:	f7ff fd21 	bl	8001c50 <LOGGER_WriteLine>
		return -1;
 800220e:	f04f 33ff 	mov.w	r3, #4294967295
 8002212:	e023      	b.n	800225c <initSensors+0x104>
	{
		MOTION_SENSORS_UpdateData();
 8002214:	f000 f852 	bl	80022bc <MOTION_SENSORS_UpdateData>
		HAL_Delay(40);
 8002218:	2028      	movs	r0, #40	; 0x28
 800221a:	f004 fddb 	bl	8006dd4 <HAL_Delay>
	for(i = 0; i < 15; i ++)
 800221e:	79fb      	ldrb	r3, [r7, #7]
 8002220:	3301      	adds	r3, #1
 8002222:	71fb      	strb	r3, [r7, #7]
 8002224:	79fb      	ldrb	r3, [r7, #7]
 8002226:	2b0e      	cmp	r3, #14
 8002228:	d9f4      	bls.n	8002214 <initSensors+0xbc>
	}

	//Set start gyro values as offsets
	DATA_GyroRadiansPerSecond_Offset.X = DATA_GyroRadiansPerSecond.X;
 800222a:	4b17      	ldr	r3, [pc, #92]	; (8002288 <initSensors+0x130>)
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	4a10      	ldr	r2, [pc, #64]	; (8002270 <initSensors+0x118>)
 8002230:	6013      	str	r3, [r2, #0]
	DATA_GyroRadiansPerSecond_Offset.Y = DATA_GyroRadiansPerSecond.Y;
 8002232:	4b15      	ldr	r3, [pc, #84]	; (8002288 <initSensors+0x130>)
 8002234:	685b      	ldr	r3, [r3, #4]
 8002236:	4a0e      	ldr	r2, [pc, #56]	; (8002270 <initSensors+0x118>)
 8002238:	6053      	str	r3, [r2, #4]
	DATA_GyroRadiansPerSecond_Offset.Z = DATA_GyroRadiansPerSecond.Z;
 800223a:	4b13      	ldr	r3, [pc, #76]	; (8002288 <initSensors+0x130>)
 800223c:	689b      	ldr	r3, [r3, #8]
 800223e:	4a0c      	ldr	r2, [pc, #48]	; (8002270 <initSensors+0x118>)
 8002240:	6093      	str	r3, [r2, #8]

	DATA_GForce_Offset.X = DATA_GForce.X;
 8002242:	4b0f      	ldr	r3, [pc, #60]	; (8002280 <initSensors+0x128>)
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	4a11      	ldr	r2, [pc, #68]	; (800228c <initSensors+0x134>)
 8002248:	6013      	str	r3, [r2, #0]
	DATA_GForce_Offset.Y = DATA_GForce.Y;
 800224a:	4b0d      	ldr	r3, [pc, #52]	; (8002280 <initSensors+0x128>)
 800224c:	685b      	ldr	r3, [r3, #4]
 800224e:	4a0f      	ldr	r2, [pc, #60]	; (800228c <initSensors+0x134>)
 8002250:	6053      	str	r3, [r2, #4]
	DATA_GForce_Offset.Z = DATA_GForce.Z;
 8002252:	4b0b      	ldr	r3, [pc, #44]	; (8002280 <initSensors+0x128>)
 8002254:	689b      	ldr	r3, [r3, #8]
 8002256:	4a0d      	ldr	r2, [pc, #52]	; (800228c <initSensors+0x134>)
 8002258:	6093      	str	r3, [r2, #8]

	return 0;
 800225a:	2300      	movs	r3, #0
}
 800225c:	4618      	mov	r0, r3
 800225e:	3708      	adds	r7, #8
 8002260:	46bd      	mov	sp, r7
 8002262:	bd80      	pop	{r7, pc}
 8002264:	080148a8 	.word	0x080148a8
 8002268:	200006a0 	.word	0x200006a0
 800226c:	20000610 	.word	0x20000610
 8002270:	20000668 	.word	0x20000668
 8002274:	2000062c 	.word	0x2000062c
 8002278:	20000650 	.word	0x20000650
 800227c:	2000065c 	.word	0x2000065c
 8002280:	20000638 	.word	0x20000638
 8002284:	080148c4 	.word	0x080148c4
 8002288:	20000614 	.word	0x20000614
 800228c:	20000674 	.word	0x20000674

08002290 <MOTION_SENSORS_GetGyro>:
/*
Description:
Gets gyro data and sets it's values to the given pointer
*/
void MOTION_SENSORS_GetGyro(XYZ_Data *values)
{
 8002290:	b580      	push	{r7, lr}
 8002292:	b082      	sub	sp, #8
 8002294:	af00      	add	r7, sp, #0
 8002296:	6078      	str	r0, [r7, #4]
	GYRO_GetValues(values);
 8002298:	6878      	ldr	r0, [r7, #4]
 800229a:	f7ff fc15 	bl	8001ac8 <GYRO_GetValues>
}
 800229e:	bf00      	nop
 80022a0:	3708      	adds	r7, #8
 80022a2:	46bd      	mov	sp, r7
 80022a4:	bd80      	pop	{r7, pc}

080022a6 <MOTION_SENSORS_GetAccel>:
/*
Description:
Gets accel data and sets it's values to the given pointer
*/
void MOTION_SENSORS_GetAccel(XYZ_Data *values)
{
 80022a6:	b580      	push	{r7, lr}
 80022a8:	b082      	sub	sp, #8
 80022aa:	af00      	add	r7, sp, #0
 80022ac:	6078      	str	r0, [r7, #4]
	ACCEL_GetValues(values);
 80022ae:	6878      	ldr	r0, [r7, #4]
 80022b0:	f7ff f91e 	bl	80014f0 <ACCEL_GetValues>
}
 80022b4:	bf00      	nop
 80022b6:	3708      	adds	r7, #8
 80022b8:	46bd      	mov	sp, r7
 80022ba:	bd80      	pop	{r7, pc}

080022bc <MOTION_SENSORS_UpdateData>:
/*
Description:
Updates data values stored in Data.h (DATA_RadiansPerSecond, DATA_GyroRadiansPerSecondInWorldFrame, DATA_GForce, DATA_AccelAngles, DATA_ComplementedAngles)
*/
void MOTION_SENSORS_UpdateData()
{
 80022bc:	b580      	push	{r7, lr}
 80022be:	af00      	add	r7, sp, #0
	MOTION_SENSORS_GetGyro(&DATA_GyroRadiansPerSecond);
 80022c0:	4810      	ldr	r0, [pc, #64]	; (8002304 <MOTION_SENSORS_UpdateData+0x48>)
 80022c2:	f7ff ffe5 	bl	8002290 <MOTION_SENSORS_GetGyro>
	ConvertGyroDataToWorldFrame();
 80022c6:	f000 f9e5 	bl	8002694 <ConvertGyroDataToWorldFrame>
	MOTION_SENSORS_GetAccel(&DATA_GForce);
 80022ca:	480f      	ldr	r0, [pc, #60]	; (8002308 <MOTION_SENSORS_UpdateData+0x4c>)
 80022cc:	f7ff ffeb 	bl	80022a6 <MOTION_SENSORS_GetAccel>
	MOTION_SENSORS_CalculateAccelAngles();
 80022d0:	f000 f8ae 	bl	8002430 <MOTION_SENSORS_CalculateAccelAngles>
	MOTION_SENSORS_Integrate(systick_micros - updateTime);
 80022d4:	4b0d      	ldr	r3, [pc, #52]	; (800230c <MOTION_SENSORS_UpdateData+0x50>)
 80022d6:	681a      	ldr	r2, [r3, #0]
 80022d8:	4b0d      	ldr	r3, [pc, #52]	; (8002310 <MOTION_SENSORS_UpdateData+0x54>)
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	1ad3      	subs	r3, r2, r3
 80022de:	4618      	mov	r0, r3
 80022e0:	f000 f81a 	bl	8002318 <MOTION_SENSORS_Integrate>
	ApplyComplementaryFilter(systick_micros - updateTime);
 80022e4:	4b09      	ldr	r3, [pc, #36]	; (800230c <MOTION_SENSORS_UpdateData+0x50>)
 80022e6:	681a      	ldr	r2, [r3, #0]
 80022e8:	4b09      	ldr	r3, [pc, #36]	; (8002310 <MOTION_SENSORS_UpdateData+0x54>)
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	1ad3      	subs	r3, r2, r3
 80022ee:	4618      	mov	r0, r3
 80022f0:	f000 fa7a 	bl	80027e8 <ApplyComplementaryFilter>
	updateTime = systick_micros;
 80022f4:	4b05      	ldr	r3, [pc, #20]	; (800230c <MOTION_SENSORS_UpdateData+0x50>)
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	4a05      	ldr	r2, [pc, #20]	; (8002310 <MOTION_SENSORS_UpdateData+0x54>)
 80022fa:	6013      	str	r3, [r2, #0]
	ConvertComplemetedAnglesToDegrees();
 80022fc:	f000 fb30 	bl	8002960 <ConvertComplemetedAnglesToDegrees>
}
 8002300:	bf00      	nop
 8002302:	bd80      	pop	{r7, pc}
 8002304:	20000614 	.word	0x20000614
 8002308:	20000638 	.word	0x20000638
 800230c:	200006a0 	.word	0x200006a0
 8002310:	20000610 	.word	0x20000610
 8002314:	00000000 	.word	0x00000000

08002318 <MOTION_SENSORS_Integrate>:
/*
Description:
Integrates gyro to data to create angles from gyro readings
*/
void MOTION_SENSORS_Integrate(uint32_t time)
{
 8002318:	b5b0      	push	{r4, r5, r7, lr}
 800231a:	b082      	sub	sp, #8
 800231c:	af00      	add	r7, sp, #0
 800231e:	6078      	str	r0, [r7, #4]
	DATA_GyroAnglesInWorldFrame.X += DATA_GyroRadiansPerSecondInWorldFrame.X * time * 0.001;
 8002320:	4b41      	ldr	r3, [pc, #260]	; (8002428 <MOTION_SENSORS_Integrate+0x110>)
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	4618      	mov	r0, r3
 8002326:	f7fe f92f 	bl	8000588 <__aeabi_f2d>
 800232a:	4604      	mov	r4, r0
 800232c:	460d      	mov	r5, r1
 800232e:	4b3f      	ldr	r3, [pc, #252]	; (800242c <MOTION_SENSORS_Integrate+0x114>)
 8002330:	ed93 7a00 	vldr	s14, [r3]
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	ee07 3a90 	vmov	s15, r3
 800233a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800233e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002342:	ee17 0a90 	vmov	r0, s15
 8002346:	f7fe f91f 	bl	8000588 <__aeabi_f2d>
 800234a:	a335      	add	r3, pc, #212	; (adr r3, 8002420 <MOTION_SENSORS_Integrate+0x108>)
 800234c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002350:	f7fe f972 	bl	8000638 <__aeabi_dmul>
 8002354:	4602      	mov	r2, r0
 8002356:	460b      	mov	r3, r1
 8002358:	4620      	mov	r0, r4
 800235a:	4629      	mov	r1, r5
 800235c:	f7fd ffb6 	bl	80002cc <__adddf3>
 8002360:	4602      	mov	r2, r0
 8002362:	460b      	mov	r3, r1
 8002364:	4610      	mov	r0, r2
 8002366:	4619      	mov	r1, r3
 8002368:	f7fe fc3e 	bl	8000be8 <__aeabi_d2f>
 800236c:	4603      	mov	r3, r0
 800236e:	4a2e      	ldr	r2, [pc, #184]	; (8002428 <MOTION_SENSORS_Integrate+0x110>)
 8002370:	6013      	str	r3, [r2, #0]
	DATA_GyroAnglesInWorldFrame.Y += DATA_GyroRadiansPerSecondInWorldFrame.Y * time * 0.001;
 8002372:	4b2d      	ldr	r3, [pc, #180]	; (8002428 <MOTION_SENSORS_Integrate+0x110>)
 8002374:	685b      	ldr	r3, [r3, #4]
 8002376:	4618      	mov	r0, r3
 8002378:	f7fe f906 	bl	8000588 <__aeabi_f2d>
 800237c:	4604      	mov	r4, r0
 800237e:	460d      	mov	r5, r1
 8002380:	4b2a      	ldr	r3, [pc, #168]	; (800242c <MOTION_SENSORS_Integrate+0x114>)
 8002382:	ed93 7a01 	vldr	s14, [r3, #4]
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	ee07 3a90 	vmov	s15, r3
 800238c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002390:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002394:	ee17 0a90 	vmov	r0, s15
 8002398:	f7fe f8f6 	bl	8000588 <__aeabi_f2d>
 800239c:	a320      	add	r3, pc, #128	; (adr r3, 8002420 <MOTION_SENSORS_Integrate+0x108>)
 800239e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023a2:	f7fe f949 	bl	8000638 <__aeabi_dmul>
 80023a6:	4602      	mov	r2, r0
 80023a8:	460b      	mov	r3, r1
 80023aa:	4620      	mov	r0, r4
 80023ac:	4629      	mov	r1, r5
 80023ae:	f7fd ff8d 	bl	80002cc <__adddf3>
 80023b2:	4602      	mov	r2, r0
 80023b4:	460b      	mov	r3, r1
 80023b6:	4610      	mov	r0, r2
 80023b8:	4619      	mov	r1, r3
 80023ba:	f7fe fc15 	bl	8000be8 <__aeabi_d2f>
 80023be:	4603      	mov	r3, r0
 80023c0:	4a19      	ldr	r2, [pc, #100]	; (8002428 <MOTION_SENSORS_Integrate+0x110>)
 80023c2:	6053      	str	r3, [r2, #4]
	DATA_GyroAnglesInWorldFrame.Z += DATA_GyroRadiansPerSecondInWorldFrame.Z * time * 0.001;
 80023c4:	4b18      	ldr	r3, [pc, #96]	; (8002428 <MOTION_SENSORS_Integrate+0x110>)
 80023c6:	689b      	ldr	r3, [r3, #8]
 80023c8:	4618      	mov	r0, r3
 80023ca:	f7fe f8dd 	bl	8000588 <__aeabi_f2d>
 80023ce:	4604      	mov	r4, r0
 80023d0:	460d      	mov	r5, r1
 80023d2:	4b16      	ldr	r3, [pc, #88]	; (800242c <MOTION_SENSORS_Integrate+0x114>)
 80023d4:	ed93 7a02 	vldr	s14, [r3, #8]
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	ee07 3a90 	vmov	s15, r3
 80023de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80023e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80023e6:	ee17 0a90 	vmov	r0, s15
 80023ea:	f7fe f8cd 	bl	8000588 <__aeabi_f2d>
 80023ee:	a30c      	add	r3, pc, #48	; (adr r3, 8002420 <MOTION_SENSORS_Integrate+0x108>)
 80023f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023f4:	f7fe f920 	bl	8000638 <__aeabi_dmul>
 80023f8:	4602      	mov	r2, r0
 80023fa:	460b      	mov	r3, r1
 80023fc:	4620      	mov	r0, r4
 80023fe:	4629      	mov	r1, r5
 8002400:	f7fd ff64 	bl	80002cc <__adddf3>
 8002404:	4602      	mov	r2, r0
 8002406:	460b      	mov	r3, r1
 8002408:	4610      	mov	r0, r2
 800240a:	4619      	mov	r1, r3
 800240c:	f7fe fbec 	bl	8000be8 <__aeabi_d2f>
 8002410:	4603      	mov	r3, r0
 8002412:	4a05      	ldr	r2, [pc, #20]	; (8002428 <MOTION_SENSORS_Integrate+0x110>)
 8002414:	6093      	str	r3, [r2, #8]
}
 8002416:	bf00      	nop
 8002418:	3708      	adds	r7, #8
 800241a:	46bd      	mov	sp, r7
 800241c:	bdb0      	pop	{r4, r5, r7, pc}
 800241e:	bf00      	nop
 8002420:	d2f1a9fc 	.word	0xd2f1a9fc
 8002424:	3f50624d 	.word	0x3f50624d
 8002428:	2000062c 	.word	0x2000062c
 800242c:	20000620 	.word	0x20000620

08002430 <MOTION_SENSORS_CalculateAccelAngles>:
/*
Description:
Calculates and sets angles from accelerometer readings (only X and Y)
*/
void MOTION_SENSORS_CalculateAccelAngles()
{
 8002430:	b580      	push	{r7, lr}
 8002432:	af00      	add	r7, sp, #0
	DATA_AccelAngles.X = atanf(DATA_GForce.Y / DATA_GForce.Z);
 8002434:	4b11      	ldr	r3, [pc, #68]	; (800247c <MOTION_SENSORS_CalculateAccelAngles+0x4c>)
 8002436:	ed93 7a01 	vldr	s14, [r3, #4]
 800243a:	4b10      	ldr	r3, [pc, #64]	; (800247c <MOTION_SENSORS_CalculateAccelAngles+0x4c>)
 800243c:	edd3 7a02 	vldr	s15, [r3, #8]
 8002440:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8002444:	eeb0 0a66 	vmov.f32	s0, s13
 8002448:	f010 fe9a 	bl	8013180 <atanf>
 800244c:	eef0 7a40 	vmov.f32	s15, s0
 8002450:	4b0b      	ldr	r3, [pc, #44]	; (8002480 <MOTION_SENSORS_CalculateAccelAngles+0x50>)
 8002452:	edc3 7a00 	vstr	s15, [r3]
	DATA_AccelAngles.Y = atanf(DATA_GForce.X / DATA_GForce.Z);
 8002456:	4b09      	ldr	r3, [pc, #36]	; (800247c <MOTION_SENSORS_CalculateAccelAngles+0x4c>)
 8002458:	ed93 7a00 	vldr	s14, [r3]
 800245c:	4b07      	ldr	r3, [pc, #28]	; (800247c <MOTION_SENSORS_CalculateAccelAngles+0x4c>)
 800245e:	edd3 7a02 	vldr	s15, [r3, #8]
 8002462:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8002466:	eeb0 0a66 	vmov.f32	s0, s13
 800246a:	f010 fe89 	bl	8013180 <atanf>
 800246e:	eef0 7a40 	vmov.f32	s15, s0
 8002472:	4b03      	ldr	r3, [pc, #12]	; (8002480 <MOTION_SENSORS_CalculateAccelAngles+0x50>)
 8002474:	edc3 7a01 	vstr	s15, [r3, #4]
}
 8002478:	bf00      	nop
 800247a:	bd80      	pop	{r7, pc}
 800247c:	20000638 	.word	0x20000638
 8002480:	20000644 	.word	0x20000644

08002484 <GetRotationalMatrix>:

Returns:
pointer to 2D matrix containing rotational matrix
*/
float ** GetRotationalMatrix(float theta, float phi)
{
 8002484:	b5b0      	push	{r4, r5, r7, lr}
 8002486:	b084      	sub	sp, #16
 8002488:	af00      	add	r7, sp, #0
 800248a:	ed87 0a01 	vstr	s0, [r7, #4]
 800248e:	edc7 0a00 	vstr	s1, [r7]
	[0,        cos(phi),             -sin(phi)      ]

	[0,  sin(phi)/cos(theta),   cos(phi)/cos(theta) ]
	*/

	RotationalMatrix = (float**)malloc(3 * sizeof(float*));
 8002492:	200c      	movs	r0, #12
 8002494:	f00d fe92 	bl	80101bc <malloc>
 8002498:	4603      	mov	r3, r0
 800249a:	461a      	mov	r2, r3
 800249c:	4b7c      	ldr	r3, [pc, #496]	; (8002690 <GetRotationalMatrix+0x20c>)
 800249e:	601a      	str	r2, [r3, #0]

	for (int i = 0; i < 3; i++) {
 80024a0:	2300      	movs	r3, #0
 80024a2:	60fb      	str	r3, [r7, #12]
 80024a4:	e00c      	b.n	80024c0 <GetRotationalMatrix+0x3c>
		RotationalMatrix[i] = (float*)malloc(3 * sizeof(float));
 80024a6:	4b7a      	ldr	r3, [pc, #488]	; (8002690 <GetRotationalMatrix+0x20c>)
 80024a8:	681a      	ldr	r2, [r3, #0]
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	009b      	lsls	r3, r3, #2
 80024ae:	18d4      	adds	r4, r2, r3
 80024b0:	200c      	movs	r0, #12
 80024b2:	f00d fe83 	bl	80101bc <malloc>
 80024b6:	4603      	mov	r3, r0
 80024b8:	6023      	str	r3, [r4, #0]
	for (int i = 0; i < 3; i++) {
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	3301      	adds	r3, #1
 80024be:	60fb      	str	r3, [r7, #12]
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	2b02      	cmp	r3, #2
 80024c4:	ddef      	ble.n	80024a6 <GetRotationalMatrix+0x22>
	}

	RotationalMatrix[0][0] = 1;
 80024c6:	4b72      	ldr	r3, [pc, #456]	; (8002690 <GetRotationalMatrix+0x20c>)
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80024d0:	601a      	str	r2, [r3, #0]
	RotationalMatrix[0][1] = tan(theta) * sin(phi);
 80024d2:	6878      	ldr	r0, [r7, #4]
 80024d4:	f7fe f858 	bl	8000588 <__aeabi_f2d>
 80024d8:	4602      	mov	r2, r0
 80024da:	460b      	mov	r3, r1
 80024dc:	ec43 2b10 	vmov	d0, r2, r3
 80024e0:	f010 fe1a 	bl	8013118 <tan>
 80024e4:	ec55 4b10 	vmov	r4, r5, d0
 80024e8:	6838      	ldr	r0, [r7, #0]
 80024ea:	f7fe f84d 	bl	8000588 <__aeabi_f2d>
 80024ee:	4602      	mov	r2, r0
 80024f0:	460b      	mov	r3, r1
 80024f2:	ec43 2b10 	vmov	d0, r2, r3
 80024f6:	f010 fdb7 	bl	8013068 <sin>
 80024fa:	ec53 2b10 	vmov	r2, r3, d0
 80024fe:	4620      	mov	r0, r4
 8002500:	4629      	mov	r1, r5
 8002502:	f7fe f899 	bl	8000638 <__aeabi_dmul>
 8002506:	4602      	mov	r2, r0
 8002508:	460b      	mov	r3, r1
 800250a:	4610      	mov	r0, r2
 800250c:	4619      	mov	r1, r3
 800250e:	4b60      	ldr	r3, [pc, #384]	; (8002690 <GetRotationalMatrix+0x20c>)
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	1d1c      	adds	r4, r3, #4
 8002516:	f7fe fb67 	bl	8000be8 <__aeabi_d2f>
 800251a:	4603      	mov	r3, r0
 800251c:	6023      	str	r3, [r4, #0]
	RotationalMatrix[0][2] = tan(theta) * cos(phi);
 800251e:	6878      	ldr	r0, [r7, #4]
 8002520:	f7fe f832 	bl	8000588 <__aeabi_f2d>
 8002524:	4602      	mov	r2, r0
 8002526:	460b      	mov	r3, r1
 8002528:	ec43 2b10 	vmov	d0, r2, r3
 800252c:	f010 fdf4 	bl	8013118 <tan>
 8002530:	ec55 4b10 	vmov	r4, r5, d0
 8002534:	6838      	ldr	r0, [r7, #0]
 8002536:	f7fe f827 	bl	8000588 <__aeabi_f2d>
 800253a:	4602      	mov	r2, r0
 800253c:	460b      	mov	r3, r1
 800253e:	ec43 2b10 	vmov	d0, r2, r3
 8002542:	f010 fd3d 	bl	8012fc0 <cos>
 8002546:	ec53 2b10 	vmov	r2, r3, d0
 800254a:	4620      	mov	r0, r4
 800254c:	4629      	mov	r1, r5
 800254e:	f7fe f873 	bl	8000638 <__aeabi_dmul>
 8002552:	4602      	mov	r2, r0
 8002554:	460b      	mov	r3, r1
 8002556:	4610      	mov	r0, r2
 8002558:	4619      	mov	r1, r3
 800255a:	4b4d      	ldr	r3, [pc, #308]	; (8002690 <GetRotationalMatrix+0x20c>)
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	f103 0408 	add.w	r4, r3, #8
 8002564:	f7fe fb40 	bl	8000be8 <__aeabi_d2f>
 8002568:	4603      	mov	r3, r0
 800256a:	6023      	str	r3, [r4, #0]
	RotationalMatrix[1][0] = 0;
 800256c:	4b48      	ldr	r3, [pc, #288]	; (8002690 <GetRotationalMatrix+0x20c>)
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	3304      	adds	r3, #4
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	f04f 0200 	mov.w	r2, #0
 8002578:	601a      	str	r2, [r3, #0]
	RotationalMatrix[1][1] = cos(phi);
 800257a:	6838      	ldr	r0, [r7, #0]
 800257c:	f7fe f804 	bl	8000588 <__aeabi_f2d>
 8002580:	4602      	mov	r2, r0
 8002582:	460b      	mov	r3, r1
 8002584:	ec43 2b10 	vmov	d0, r2, r3
 8002588:	f010 fd1a 	bl	8012fc0 <cos>
 800258c:	ec51 0b10 	vmov	r0, r1, d0
 8002590:	4b3f      	ldr	r3, [pc, #252]	; (8002690 <GetRotationalMatrix+0x20c>)
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	3304      	adds	r3, #4
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	1d1c      	adds	r4, r3, #4
 800259a:	f7fe fb25 	bl	8000be8 <__aeabi_d2f>
 800259e:	4603      	mov	r3, r0
 80025a0:	6023      	str	r3, [r4, #0]
	RotationalMatrix[1][2] = -sin(phi);
 80025a2:	6838      	ldr	r0, [r7, #0]
 80025a4:	f7fd fff0 	bl	8000588 <__aeabi_f2d>
 80025a8:	4602      	mov	r2, r0
 80025aa:	460b      	mov	r3, r1
 80025ac:	ec43 2b10 	vmov	d0, r2, r3
 80025b0:	f010 fd5a 	bl	8013068 <sin>
 80025b4:	ec53 2b10 	vmov	r2, r3, d0
 80025b8:	4610      	mov	r0, r2
 80025ba:	4619      	mov	r1, r3
 80025bc:	f7fe fb14 	bl	8000be8 <__aeabi_d2f>
 80025c0:	4602      	mov	r2, r0
 80025c2:	4b33      	ldr	r3, [pc, #204]	; (8002690 <GetRotationalMatrix+0x20c>)
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	3304      	adds	r3, #4
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	3308      	adds	r3, #8
 80025cc:	ee07 2a90 	vmov	s15, r2
 80025d0:	eef1 7a67 	vneg.f32	s15, s15
 80025d4:	edc3 7a00 	vstr	s15, [r3]
	RotationalMatrix[2][0] = 0;
 80025d8:	4b2d      	ldr	r3, [pc, #180]	; (8002690 <GetRotationalMatrix+0x20c>)
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	3308      	adds	r3, #8
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	f04f 0200 	mov.w	r2, #0
 80025e4:	601a      	str	r2, [r3, #0]
	RotationalMatrix[2][1] = sin(phi)/cos(theta);
 80025e6:	6838      	ldr	r0, [r7, #0]
 80025e8:	f7fd ffce 	bl	8000588 <__aeabi_f2d>
 80025ec:	4602      	mov	r2, r0
 80025ee:	460b      	mov	r3, r1
 80025f0:	ec43 2b10 	vmov	d0, r2, r3
 80025f4:	f010 fd38 	bl	8013068 <sin>
 80025f8:	ec55 4b10 	vmov	r4, r5, d0
 80025fc:	6878      	ldr	r0, [r7, #4]
 80025fe:	f7fd ffc3 	bl	8000588 <__aeabi_f2d>
 8002602:	4602      	mov	r2, r0
 8002604:	460b      	mov	r3, r1
 8002606:	ec43 2b10 	vmov	d0, r2, r3
 800260a:	f010 fcd9 	bl	8012fc0 <cos>
 800260e:	ec53 2b10 	vmov	r2, r3, d0
 8002612:	4620      	mov	r0, r4
 8002614:	4629      	mov	r1, r5
 8002616:	f7fe f939 	bl	800088c <__aeabi_ddiv>
 800261a:	4602      	mov	r2, r0
 800261c:	460b      	mov	r3, r1
 800261e:	4610      	mov	r0, r2
 8002620:	4619      	mov	r1, r3
 8002622:	4b1b      	ldr	r3, [pc, #108]	; (8002690 <GetRotationalMatrix+0x20c>)
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	3308      	adds	r3, #8
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	1d1c      	adds	r4, r3, #4
 800262c:	f7fe fadc 	bl	8000be8 <__aeabi_d2f>
 8002630:	4603      	mov	r3, r0
 8002632:	6023      	str	r3, [r4, #0]
	RotationalMatrix[2][2] = cos(phi)/cos(theta);
 8002634:	6838      	ldr	r0, [r7, #0]
 8002636:	f7fd ffa7 	bl	8000588 <__aeabi_f2d>
 800263a:	4602      	mov	r2, r0
 800263c:	460b      	mov	r3, r1
 800263e:	ec43 2b10 	vmov	d0, r2, r3
 8002642:	f010 fcbd 	bl	8012fc0 <cos>
 8002646:	ec55 4b10 	vmov	r4, r5, d0
 800264a:	6878      	ldr	r0, [r7, #4]
 800264c:	f7fd ff9c 	bl	8000588 <__aeabi_f2d>
 8002650:	4602      	mov	r2, r0
 8002652:	460b      	mov	r3, r1
 8002654:	ec43 2b10 	vmov	d0, r2, r3
 8002658:	f010 fcb2 	bl	8012fc0 <cos>
 800265c:	ec53 2b10 	vmov	r2, r3, d0
 8002660:	4620      	mov	r0, r4
 8002662:	4629      	mov	r1, r5
 8002664:	f7fe f912 	bl	800088c <__aeabi_ddiv>
 8002668:	4602      	mov	r2, r0
 800266a:	460b      	mov	r3, r1
 800266c:	4610      	mov	r0, r2
 800266e:	4619      	mov	r1, r3
 8002670:	4b07      	ldr	r3, [pc, #28]	; (8002690 <GetRotationalMatrix+0x20c>)
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	3308      	adds	r3, #8
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	f103 0408 	add.w	r4, r3, #8
 800267c:	f7fe fab4 	bl	8000be8 <__aeabi_d2f>
 8002680:	4603      	mov	r3, r0
 8002682:	6023      	str	r3, [r4, #0]

	return RotationalMatrix;
 8002684:	4b02      	ldr	r3, [pc, #8]	; (8002690 <GetRotationalMatrix+0x20c>)
 8002686:	681b      	ldr	r3, [r3, #0]
}
 8002688:	4618      	mov	r0, r3
 800268a:	3710      	adds	r7, #16
 800268c:	46bd      	mov	sp, r7
 800268e:	bdb0      	pop	{r4, r5, r7, pc}
 8002690:	20000680 	.word	0x20000680

08002694 <ConvertGyroDataToWorldFrame>:
/*
Description:
Converts gyro readings to world fraem using rotatinal matrix and updates the values
*/
void ConvertGyroDataToWorldFrame()
{
 8002694:	b580      	push	{r7, lr}
 8002696:	b082      	sub	sp, #8
 8002698:	af00      	add	r7, sp, #0
	float ** rotationalMatrix = GetRotationalMatrix(DATA_GyroAnglesInWorldFrame.Y, DATA_GyroAnglesInWorldFrame.X);
 800269a:	4b4f      	ldr	r3, [pc, #316]	; (80027d8 <ConvertGyroDataToWorldFrame+0x144>)
 800269c:	edd3 7a01 	vldr	s15, [r3, #4]
 80026a0:	4b4d      	ldr	r3, [pc, #308]	; (80027d8 <ConvertGyroDataToWorldFrame+0x144>)
 80026a2:	ed93 7a00 	vldr	s14, [r3]
 80026a6:	eef0 0a47 	vmov.f32	s1, s14
 80026aa:	eeb0 0a67 	vmov.f32	s0, s15
 80026ae:	f7ff fee9 	bl	8002484 <GetRotationalMatrix>
 80026b2:	6078      	str	r0, [r7, #4]

	DATA_GyroRadiansPerSecondInWorldFrame.X = rotationalMatrix[0][0] * DATA_GyroRadiansPerSecond.X + rotationalMatrix[0][1] * DATA_GyroRadiansPerSecond.Y + rotationalMatrix[0][2] * DATA_GyroRadiansPerSecond.Z;
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	ed93 7a00 	vldr	s14, [r3]
 80026bc:	4b47      	ldr	r3, [pc, #284]	; (80027dc <ConvertGyroDataToWorldFrame+0x148>)
 80026be:	edd3 7a00 	vldr	s15, [r3]
 80026c2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	3304      	adds	r3, #4
 80026cc:	edd3 6a00 	vldr	s13, [r3]
 80026d0:	4b42      	ldr	r3, [pc, #264]	; (80027dc <ConvertGyroDataToWorldFrame+0x148>)
 80026d2:	edd3 7a01 	vldr	s15, [r3, #4]
 80026d6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80026da:	ee37 7a27 	vadd.f32	s14, s14, s15
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	3308      	adds	r3, #8
 80026e4:	edd3 6a00 	vldr	s13, [r3]
 80026e8:	4b3c      	ldr	r3, [pc, #240]	; (80027dc <ConvertGyroDataToWorldFrame+0x148>)
 80026ea:	edd3 7a02 	vldr	s15, [r3, #8]
 80026ee:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80026f2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80026f6:	4b3a      	ldr	r3, [pc, #232]	; (80027e0 <ConvertGyroDataToWorldFrame+0x14c>)
 80026f8:	edc3 7a00 	vstr	s15, [r3]
	DATA_GyroRadiansPerSecondInWorldFrame.Y = rotationalMatrix[1][0] * DATA_GyroRadiansPerSecond.X + rotationalMatrix[1][1] * DATA_GyroRadiansPerSecond.Y + rotationalMatrix[1][2] * DATA_GyroRadiansPerSecond.Z;
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	3304      	adds	r3, #4
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	ed93 7a00 	vldr	s14, [r3]
 8002706:	4b35      	ldr	r3, [pc, #212]	; (80027dc <ConvertGyroDataToWorldFrame+0x148>)
 8002708:	edd3 7a00 	vldr	s15, [r3]
 800270c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	3304      	adds	r3, #4
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	3304      	adds	r3, #4
 8002718:	edd3 6a00 	vldr	s13, [r3]
 800271c:	4b2f      	ldr	r3, [pc, #188]	; (80027dc <ConvertGyroDataToWorldFrame+0x148>)
 800271e:	edd3 7a01 	vldr	s15, [r3, #4]
 8002722:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002726:	ee37 7a27 	vadd.f32	s14, s14, s15
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	3304      	adds	r3, #4
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	3308      	adds	r3, #8
 8002732:	edd3 6a00 	vldr	s13, [r3]
 8002736:	4b29      	ldr	r3, [pc, #164]	; (80027dc <ConvertGyroDataToWorldFrame+0x148>)
 8002738:	edd3 7a02 	vldr	s15, [r3, #8]
 800273c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002740:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002744:	4b26      	ldr	r3, [pc, #152]	; (80027e0 <ConvertGyroDataToWorldFrame+0x14c>)
 8002746:	edc3 7a01 	vstr	s15, [r3, #4]
	DATA_GyroRadiansPerSecondInWorldFrame.Z = rotationalMatrix[2][0] * DATA_GyroRadiansPerSecond.X + rotationalMatrix[2][1] * DATA_GyroRadiansPerSecond.Y + rotationalMatrix[2][2] * DATA_GyroRadiansPerSecond.Z;
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	3308      	adds	r3, #8
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	ed93 7a00 	vldr	s14, [r3]
 8002754:	4b21      	ldr	r3, [pc, #132]	; (80027dc <ConvertGyroDataToWorldFrame+0x148>)
 8002756:	edd3 7a00 	vldr	s15, [r3]
 800275a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	3308      	adds	r3, #8
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	3304      	adds	r3, #4
 8002766:	edd3 6a00 	vldr	s13, [r3]
 800276a:	4b1c      	ldr	r3, [pc, #112]	; (80027dc <ConvertGyroDataToWorldFrame+0x148>)
 800276c:	edd3 7a01 	vldr	s15, [r3, #4]
 8002770:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002774:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	3308      	adds	r3, #8
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	3308      	adds	r3, #8
 8002780:	edd3 6a00 	vldr	s13, [r3]
 8002784:	4b15      	ldr	r3, [pc, #84]	; (80027dc <ConvertGyroDataToWorldFrame+0x148>)
 8002786:	edd3 7a02 	vldr	s15, [r3, #8]
 800278a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800278e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002792:	4b13      	ldr	r3, [pc, #76]	; (80027e0 <ConvertGyroDataToWorldFrame+0x14c>)
 8002794:	edc3 7a02 	vstr	s15, [r3, #8]

	free(RotationalMatrix[0]);
 8002798:	4b12      	ldr	r3, [pc, #72]	; (80027e4 <ConvertGyroDataToWorldFrame+0x150>)
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	4618      	mov	r0, r3
 80027a0:	f00d fd14 	bl	80101cc <free>
	free(RotationalMatrix[1]);
 80027a4:	4b0f      	ldr	r3, [pc, #60]	; (80027e4 <ConvertGyroDataToWorldFrame+0x150>)
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	3304      	adds	r3, #4
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	4618      	mov	r0, r3
 80027ae:	f00d fd0d 	bl	80101cc <free>
	free(RotationalMatrix[2]);
 80027b2:	4b0c      	ldr	r3, [pc, #48]	; (80027e4 <ConvertGyroDataToWorldFrame+0x150>)
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	3308      	adds	r3, #8
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	4618      	mov	r0, r3
 80027bc:	f00d fd06 	bl	80101cc <free>
	free(RotationalMatrix);
 80027c0:	4b08      	ldr	r3, [pc, #32]	; (80027e4 <ConvertGyroDataToWorldFrame+0x150>)
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	4618      	mov	r0, r3
 80027c6:	f00d fd01 	bl	80101cc <free>
	free(rotationalMatrix);
 80027ca:	6878      	ldr	r0, [r7, #4]
 80027cc:	f00d fcfe 	bl	80101cc <free>
}
 80027d0:	bf00      	nop
 80027d2:	3708      	adds	r7, #8
 80027d4:	46bd      	mov	sp, r7
 80027d6:	bd80      	pop	{r7, pc}
 80027d8:	2000062c 	.word	0x2000062c
 80027dc:	20000614 	.word	0x20000614
 80027e0:	20000620 	.word	0x20000620
 80027e4:	20000680 	.word	0x20000680

080027e8 <ApplyComplementaryFilter>:
/*
Description:
Creates angles using complementary filter from gyro and accel radings and updates the values
*/
void ApplyComplementaryFilter(uint32_t time)
{
 80027e8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80027ec:	b082      	sub	sp, #8
 80027ee:	af00      	add	r7, sp, #0
 80027f0:	6078      	str	r0, [r7, #4]
	DATA_ComplementedAngles.X = CONFIG_COMPLEMENTARY_FILTER_GyroPart * 0.01 * (DATA_ComplementedAngles.X + time * 0.001 * DATA_GyroRadiansPerSecondInWorldFrame.X) + CONFIG_COMPLEMENTARY_FILTER_AccelPart * 0.01 * DATA_AccelAngles.X;
 80027f2:	4b57      	ldr	r3, [pc, #348]	; (8002950 <ApplyComplementaryFilter+0x168>)
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	4618      	mov	r0, r3
 80027f8:	f7fd fec6 	bl	8000588 <__aeabi_f2d>
 80027fc:	4604      	mov	r4, r0
 80027fe:	460d      	mov	r5, r1
 8002800:	6878      	ldr	r0, [r7, #4]
 8002802:	f7fd fe9f 	bl	8000544 <__aeabi_ui2d>
 8002806:	a34c      	add	r3, pc, #304	; (adr r3, 8002938 <ApplyComplementaryFilter+0x150>)
 8002808:	e9d3 2300 	ldrd	r2, r3, [r3]
 800280c:	f7fd ff14 	bl	8000638 <__aeabi_dmul>
 8002810:	4602      	mov	r2, r0
 8002812:	460b      	mov	r3, r1
 8002814:	4690      	mov	r8, r2
 8002816:	4699      	mov	r9, r3
 8002818:	4b4e      	ldr	r3, [pc, #312]	; (8002954 <ApplyComplementaryFilter+0x16c>)
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	4618      	mov	r0, r3
 800281e:	f7fd feb3 	bl	8000588 <__aeabi_f2d>
 8002822:	4602      	mov	r2, r0
 8002824:	460b      	mov	r3, r1
 8002826:	4640      	mov	r0, r8
 8002828:	4649      	mov	r1, r9
 800282a:	f7fd ff05 	bl	8000638 <__aeabi_dmul>
 800282e:	4602      	mov	r2, r0
 8002830:	460b      	mov	r3, r1
 8002832:	4620      	mov	r0, r4
 8002834:	4629      	mov	r1, r5
 8002836:	f7fd fd49 	bl	80002cc <__adddf3>
 800283a:	4602      	mov	r2, r0
 800283c:	460b      	mov	r3, r1
 800283e:	4610      	mov	r0, r2
 8002840:	4619      	mov	r1, r3
 8002842:	a33f      	add	r3, pc, #252	; (adr r3, 8002940 <ApplyComplementaryFilter+0x158>)
 8002844:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002848:	f7fd fef6 	bl	8000638 <__aeabi_dmul>
 800284c:	4602      	mov	r2, r0
 800284e:	460b      	mov	r3, r1
 8002850:	4614      	mov	r4, r2
 8002852:	461d      	mov	r5, r3
 8002854:	4b40      	ldr	r3, [pc, #256]	; (8002958 <ApplyComplementaryFilter+0x170>)
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	4618      	mov	r0, r3
 800285a:	f7fd fe95 	bl	8000588 <__aeabi_f2d>
 800285e:	a33a      	add	r3, pc, #232	; (adr r3, 8002948 <ApplyComplementaryFilter+0x160>)
 8002860:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002864:	f7fd fee8 	bl	8000638 <__aeabi_dmul>
 8002868:	4602      	mov	r2, r0
 800286a:	460b      	mov	r3, r1
 800286c:	4620      	mov	r0, r4
 800286e:	4629      	mov	r1, r5
 8002870:	f7fd fd2c 	bl	80002cc <__adddf3>
 8002874:	4602      	mov	r2, r0
 8002876:	460b      	mov	r3, r1
 8002878:	4610      	mov	r0, r2
 800287a:	4619      	mov	r1, r3
 800287c:	f7fe f9b4 	bl	8000be8 <__aeabi_d2f>
 8002880:	4603      	mov	r3, r0
 8002882:	4a33      	ldr	r2, [pc, #204]	; (8002950 <ApplyComplementaryFilter+0x168>)
 8002884:	6013      	str	r3, [r2, #0]
	DATA_ComplementedAngles.Y = CONFIG_COMPLEMENTARY_FILTER_GyroPart * 0.01 * (DATA_ComplementedAngles.Y + time * 0.001 * DATA_GyroRadiansPerSecondInWorldFrame.Y) + CONFIG_COMPLEMENTARY_FILTER_AccelPart * 0.01 * -DATA_AccelAngles.Y;
 8002886:	4b32      	ldr	r3, [pc, #200]	; (8002950 <ApplyComplementaryFilter+0x168>)
 8002888:	685b      	ldr	r3, [r3, #4]
 800288a:	4618      	mov	r0, r3
 800288c:	f7fd fe7c 	bl	8000588 <__aeabi_f2d>
 8002890:	4604      	mov	r4, r0
 8002892:	460d      	mov	r5, r1
 8002894:	6878      	ldr	r0, [r7, #4]
 8002896:	f7fd fe55 	bl	8000544 <__aeabi_ui2d>
 800289a:	a327      	add	r3, pc, #156	; (adr r3, 8002938 <ApplyComplementaryFilter+0x150>)
 800289c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028a0:	f7fd feca 	bl	8000638 <__aeabi_dmul>
 80028a4:	4602      	mov	r2, r0
 80028a6:	460b      	mov	r3, r1
 80028a8:	4690      	mov	r8, r2
 80028aa:	4699      	mov	r9, r3
 80028ac:	4b29      	ldr	r3, [pc, #164]	; (8002954 <ApplyComplementaryFilter+0x16c>)
 80028ae:	685b      	ldr	r3, [r3, #4]
 80028b0:	4618      	mov	r0, r3
 80028b2:	f7fd fe69 	bl	8000588 <__aeabi_f2d>
 80028b6:	4602      	mov	r2, r0
 80028b8:	460b      	mov	r3, r1
 80028ba:	4640      	mov	r0, r8
 80028bc:	4649      	mov	r1, r9
 80028be:	f7fd febb 	bl	8000638 <__aeabi_dmul>
 80028c2:	4602      	mov	r2, r0
 80028c4:	460b      	mov	r3, r1
 80028c6:	4620      	mov	r0, r4
 80028c8:	4629      	mov	r1, r5
 80028ca:	f7fd fcff 	bl	80002cc <__adddf3>
 80028ce:	4602      	mov	r2, r0
 80028d0:	460b      	mov	r3, r1
 80028d2:	4610      	mov	r0, r2
 80028d4:	4619      	mov	r1, r3
 80028d6:	a31a      	add	r3, pc, #104	; (adr r3, 8002940 <ApplyComplementaryFilter+0x158>)
 80028d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028dc:	f7fd feac 	bl	8000638 <__aeabi_dmul>
 80028e0:	4602      	mov	r2, r0
 80028e2:	460b      	mov	r3, r1
 80028e4:	4614      	mov	r4, r2
 80028e6:	461d      	mov	r5, r3
 80028e8:	4b1b      	ldr	r3, [pc, #108]	; (8002958 <ApplyComplementaryFilter+0x170>)
 80028ea:	edd3 7a01 	vldr	s15, [r3, #4]
 80028ee:	eef1 7a67 	vneg.f32	s15, s15
 80028f2:	ee17 3a90 	vmov	r3, s15
 80028f6:	4618      	mov	r0, r3
 80028f8:	f7fd fe46 	bl	8000588 <__aeabi_f2d>
 80028fc:	a312      	add	r3, pc, #72	; (adr r3, 8002948 <ApplyComplementaryFilter+0x160>)
 80028fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002902:	f7fd fe99 	bl	8000638 <__aeabi_dmul>
 8002906:	4602      	mov	r2, r0
 8002908:	460b      	mov	r3, r1
 800290a:	4620      	mov	r0, r4
 800290c:	4629      	mov	r1, r5
 800290e:	f7fd fcdd 	bl	80002cc <__adddf3>
 8002912:	4602      	mov	r2, r0
 8002914:	460b      	mov	r3, r1
 8002916:	4610      	mov	r0, r2
 8002918:	4619      	mov	r1, r3
 800291a:	f7fe f965 	bl	8000be8 <__aeabi_d2f>
 800291e:	4603      	mov	r3, r0
 8002920:	4a0b      	ldr	r2, [pc, #44]	; (8002950 <ApplyComplementaryFilter+0x168>)
 8002922:	6053      	str	r3, [r2, #4]
	DATA_ComplementedAngles.Z = DATA_GyroAnglesInWorldFrame.Z;
 8002924:	4b0d      	ldr	r3, [pc, #52]	; (800295c <ApplyComplementaryFilter+0x174>)
 8002926:	689b      	ldr	r3, [r3, #8]
 8002928:	4a09      	ldr	r2, [pc, #36]	; (8002950 <ApplyComplementaryFilter+0x168>)
 800292a:	6093      	str	r3, [r2, #8]
}
 800292c:	bf00      	nop
 800292e:	3708      	adds	r7, #8
 8002930:	46bd      	mov	sp, r7
 8002932:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002936:	bf00      	nop
 8002938:	d2f1a9fc 	.word	0xd2f1a9fc
 800293c:	3f50624d 	.word	0x3f50624d
 8002940:	66666667 	.word	0x66666667
 8002944:	3fee6666 	.word	0x3fee6666
 8002948:	9999999a 	.word	0x9999999a
 800294c:	3fa99999 	.word	0x3fa99999
 8002950:	20000650 	.word	0x20000650
 8002954:	20000620 	.word	0x20000620
 8002958:	20000644 	.word	0x20000644
 800295c:	2000062c 	.word	0x2000062c

08002960 <ConvertComplemetedAnglesToDegrees>:
/*
Description:
Converts complemented angles from radians to degrees and updates the values
*/
void ConvertComplemetedAnglesToDegrees()
{
 8002960:	b580      	push	{r7, lr}
 8002962:	af00      	add	r7, sp, #0
	DATA_ComplementedAnglesInDegrees.X = DATA_ComplementedAngles.X * 180/3.14159;
 8002964:	4b28      	ldr	r3, [pc, #160]	; (8002a08 <ConvertComplemetedAnglesToDegrees+0xa8>)
 8002966:	edd3 7a00 	vldr	s15, [r3]
 800296a:	ed9f 7a28 	vldr	s14, [pc, #160]	; 8002a0c <ConvertComplemetedAnglesToDegrees+0xac>
 800296e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002972:	ee17 0a90 	vmov	r0, s15
 8002976:	f7fd fe07 	bl	8000588 <__aeabi_f2d>
 800297a:	a321      	add	r3, pc, #132	; (adr r3, 8002a00 <ConvertComplemetedAnglesToDegrees+0xa0>)
 800297c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002980:	f7fd ff84 	bl	800088c <__aeabi_ddiv>
 8002984:	4602      	mov	r2, r0
 8002986:	460b      	mov	r3, r1
 8002988:	4610      	mov	r0, r2
 800298a:	4619      	mov	r1, r3
 800298c:	f7fe f92c 	bl	8000be8 <__aeabi_d2f>
 8002990:	4603      	mov	r3, r0
 8002992:	4a1f      	ldr	r2, [pc, #124]	; (8002a10 <ConvertComplemetedAnglesToDegrees+0xb0>)
 8002994:	6013      	str	r3, [r2, #0]
	DATA_ComplementedAnglesInDegrees.Y = DATA_ComplementedAngles.Y * 180/3.14159;
 8002996:	4b1c      	ldr	r3, [pc, #112]	; (8002a08 <ConvertComplemetedAnglesToDegrees+0xa8>)
 8002998:	edd3 7a01 	vldr	s15, [r3, #4]
 800299c:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 8002a0c <ConvertComplemetedAnglesToDegrees+0xac>
 80029a0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80029a4:	ee17 0a90 	vmov	r0, s15
 80029a8:	f7fd fdee 	bl	8000588 <__aeabi_f2d>
 80029ac:	a314      	add	r3, pc, #80	; (adr r3, 8002a00 <ConvertComplemetedAnglesToDegrees+0xa0>)
 80029ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029b2:	f7fd ff6b 	bl	800088c <__aeabi_ddiv>
 80029b6:	4602      	mov	r2, r0
 80029b8:	460b      	mov	r3, r1
 80029ba:	4610      	mov	r0, r2
 80029bc:	4619      	mov	r1, r3
 80029be:	f7fe f913 	bl	8000be8 <__aeabi_d2f>
 80029c2:	4603      	mov	r3, r0
 80029c4:	4a12      	ldr	r2, [pc, #72]	; (8002a10 <ConvertComplemetedAnglesToDegrees+0xb0>)
 80029c6:	6053      	str	r3, [r2, #4]
	DATA_ComplementedAnglesInDegrees.Z = DATA_ComplementedAngles.Z * 180/3.14159;
 80029c8:	4b0f      	ldr	r3, [pc, #60]	; (8002a08 <ConvertComplemetedAnglesToDegrees+0xa8>)
 80029ca:	edd3 7a02 	vldr	s15, [r3, #8]
 80029ce:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8002a0c <ConvertComplemetedAnglesToDegrees+0xac>
 80029d2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80029d6:	ee17 0a90 	vmov	r0, s15
 80029da:	f7fd fdd5 	bl	8000588 <__aeabi_f2d>
 80029de:	a308      	add	r3, pc, #32	; (adr r3, 8002a00 <ConvertComplemetedAnglesToDegrees+0xa0>)
 80029e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029e4:	f7fd ff52 	bl	800088c <__aeabi_ddiv>
 80029e8:	4602      	mov	r2, r0
 80029ea:	460b      	mov	r3, r1
 80029ec:	4610      	mov	r0, r2
 80029ee:	4619      	mov	r1, r3
 80029f0:	f7fe f8fa 	bl	8000be8 <__aeabi_d2f>
 80029f4:	4603      	mov	r3, r0
 80029f6:	4a06      	ldr	r2, [pc, #24]	; (8002a10 <ConvertComplemetedAnglesToDegrees+0xb0>)
 80029f8:	6093      	str	r3, [r2, #8]
}
 80029fa:	bf00      	nop
 80029fc:	bd80      	pop	{r7, pc}
 80029fe:	bf00      	nop
 8002a00:	f01b866e 	.word	0xf01b866e
 8002a04:	400921f9 	.word	0x400921f9
 8002a08:	20000650 	.word	0x20000650
 8002a0c:	43340000 	.word	0x43340000
 8002a10:	2000065c 	.word	0x2000065c

08002a14 <MOTOR_MIXER_RunPID>:

 propellers on the drone spin outside
*/

void MOTOR_MIXER_RunPID(float *setpoints, int time)
{
 8002a14:	b580      	push	{r7, lr}
 8002a16:	b082      	sub	sp, #8
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	6078      	str	r0, [r7, #4]
 8002a1c:	6039      	str	r1, [r7, #0]
	throttle = 1100;
 8002a1e:	4b17      	ldr	r3, [pc, #92]	; (8002a7c <MOTOR_MIXER_RunPID+0x68>)
 8002a20:	f240 424c 	movw	r2, #1100	; 0x44c
 8002a24:	601a      	str	r2, [r3, #0]
	roll = PID_CONTROLLERS_Roll(setpoints[1], time);
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	3304      	adds	r3, #4
 8002a2a:	edd3 7a00 	vldr	s15, [r3]
 8002a2e:	6838      	ldr	r0, [r7, #0]
 8002a30:	eeb0 0a67 	vmov.f32	s0, s15
 8002a34:	f7fe fb3c 	bl	80010b0 <PID_CONTROLLERS_Roll>
 8002a38:	4603      	mov	r3, r0
 8002a3a:	4a11      	ldr	r2, [pc, #68]	; (8002a80 <MOTOR_MIXER_RunPID+0x6c>)
 8002a3c:	6013      	str	r3, [r2, #0]
	pitch = PID_CONTROLLERS_Pitch(setpoints[2], time);
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	3308      	adds	r3, #8
 8002a42:	edd3 7a00 	vldr	s15, [r3]
 8002a46:	6838      	ldr	r0, [r7, #0]
 8002a48:	eeb0 0a67 	vmov.f32	s0, s15
 8002a4c:	f7fe fbe0 	bl	8001210 <PID_CONTROLLERS_Pitch>
 8002a50:	4603      	mov	r3, r0
 8002a52:	4a0c      	ldr	r2, [pc, #48]	; (8002a84 <MOTOR_MIXER_RunPID+0x70>)
 8002a54:	6013      	str	r3, [r2, #0]
	yaw = PID_CONTROLLERS_Yaw(setpoints[3], time);
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	330c      	adds	r3, #12
 8002a5a:	edd3 7a00 	vldr	s15, [r3]
 8002a5e:	6838      	ldr	r0, [r7, #0]
 8002a60:	eeb0 0a67 	vmov.f32	s0, s15
 8002a64:	f7fe fc84 	bl	8001370 <PID_CONTROLLERS_Yaw>
 8002a68:	4603      	mov	r3, r0
 8002a6a:	4a07      	ldr	r2, [pc, #28]	; (8002a88 <MOTOR_MIXER_RunPID+0x74>)
 8002a6c:	6013      	str	r3, [r2, #0]
	MOTOR_MIXER_Mix();
 8002a6e:	f000 f825 	bl	8002abc <MOTOR_MIXER_Mix>
}
 8002a72:	bf00      	nop
 8002a74:	3708      	adds	r7, #8
 8002a76:	46bd      	mov	sp, r7
 8002a78:	bd80      	pop	{r7, pc}
 8002a7a:	bf00      	nop
 8002a7c:	20000024 	.word	0x20000024
 8002a80:	2000068c 	.word	0x2000068c
 8002a84:	20000690 	.word	0x20000690
 8002a88:	20000694 	.word	0x20000694

08002a8c <MOTOR_MIXER_InitDSHOT>:

void MOTOR_MIXER_InitDSHOT()
{
 8002a8c:	b580      	push	{r7, lr}
 8002a8e:	af00      	add	r7, sp, #0
	dshot_init(DSHOT150);
 8002a90:	2000      	movs	r0, #0
 8002a92:	f7fe fd9b 	bl	80015cc <dshot_init>
	motorsValues[0] = 0;
 8002a96:	4b08      	ldr	r3, [pc, #32]	; (8002ab8 <MOTOR_MIXER_InitDSHOT+0x2c>)
 8002a98:	2200      	movs	r2, #0
 8002a9a:	801a      	strh	r2, [r3, #0]
	motorsValues[1] = 0;
 8002a9c:	4b06      	ldr	r3, [pc, #24]	; (8002ab8 <MOTOR_MIXER_InitDSHOT+0x2c>)
 8002a9e:	2200      	movs	r2, #0
 8002aa0:	805a      	strh	r2, [r3, #2]
	motorsValues[2] = 0;
 8002aa2:	4b05      	ldr	r3, [pc, #20]	; (8002ab8 <MOTOR_MIXER_InitDSHOT+0x2c>)
 8002aa4:	2200      	movs	r2, #0
 8002aa6:	809a      	strh	r2, [r3, #4]
	motorsValues[3] = 0;
 8002aa8:	4b03      	ldr	r3, [pc, #12]	; (8002ab8 <MOTOR_MIXER_InitDSHOT+0x2c>)
 8002aaa:	2200      	movs	r2, #0
 8002aac:	80da      	strh	r2, [r3, #6]
	dshot_write(motorsValues);
 8002aae:	4802      	ldr	r0, [pc, #8]	; (8002ab8 <MOTOR_MIXER_InitDSHOT+0x2c>)
 8002ab0:	f7fe fd9d 	bl	80015ee <dshot_write>
}
 8002ab4:	bf00      	nop
 8002ab6:	bd80      	pop	{r7, pc}
 8002ab8:	20000684 	.word	0x20000684

08002abc <MOTOR_MIXER_Mix>:

void MOTOR_MIXER_Mix()
{
 8002abc:	b480      	push	{r7}
 8002abe:	b083      	sub	sp, #12
 8002ac0:	af00      	add	r7, sp, #0
	int i = 0;
 8002ac2:	2300      	movs	r3, #0
 8002ac4:	607b      	str	r3, [r7, #4]
	motorsValues[0] = throttle - roll + pitch;// + yaw;
 8002ac6:	4b34      	ldr	r3, [pc, #208]	; (8002b98 <MOTOR_MIXER_Mix+0xdc>)
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	b29a      	uxth	r2, r3
 8002acc:	4b33      	ldr	r3, [pc, #204]	; (8002b9c <MOTOR_MIXER_Mix+0xe0>)
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	b29b      	uxth	r3, r3
 8002ad2:	1ad3      	subs	r3, r2, r3
 8002ad4:	b29a      	uxth	r2, r3
 8002ad6:	4b32      	ldr	r3, [pc, #200]	; (8002ba0 <MOTOR_MIXER_Mix+0xe4>)
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	b29b      	uxth	r3, r3
 8002adc:	4413      	add	r3, r2
 8002ade:	b29a      	uxth	r2, r3
 8002ae0:	4b30      	ldr	r3, [pc, #192]	; (8002ba4 <MOTOR_MIXER_Mix+0xe8>)
 8002ae2:	801a      	strh	r2, [r3, #0]
	motorsValues[1] = throttle - roll - pitch;// - yaw;
 8002ae4:	4b2c      	ldr	r3, [pc, #176]	; (8002b98 <MOTOR_MIXER_Mix+0xdc>)
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	b29a      	uxth	r2, r3
 8002aea:	4b2c      	ldr	r3, [pc, #176]	; (8002b9c <MOTOR_MIXER_Mix+0xe0>)
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	b29b      	uxth	r3, r3
 8002af0:	1ad3      	subs	r3, r2, r3
 8002af2:	b29a      	uxth	r2, r3
 8002af4:	4b2a      	ldr	r3, [pc, #168]	; (8002ba0 <MOTOR_MIXER_Mix+0xe4>)
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	b29b      	uxth	r3, r3
 8002afa:	1ad3      	subs	r3, r2, r3
 8002afc:	b29a      	uxth	r2, r3
 8002afe:	4b29      	ldr	r3, [pc, #164]	; (8002ba4 <MOTOR_MIXER_Mix+0xe8>)
 8002b00:	805a      	strh	r2, [r3, #2]
	motorsValues[2] = throttle + roll + pitch;// - yaw;
 8002b02:	4b25      	ldr	r3, [pc, #148]	; (8002b98 <MOTOR_MIXER_Mix+0xdc>)
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	b29a      	uxth	r2, r3
 8002b08:	4b24      	ldr	r3, [pc, #144]	; (8002b9c <MOTOR_MIXER_Mix+0xe0>)
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	b29b      	uxth	r3, r3
 8002b0e:	4413      	add	r3, r2
 8002b10:	b29a      	uxth	r2, r3
 8002b12:	4b23      	ldr	r3, [pc, #140]	; (8002ba0 <MOTOR_MIXER_Mix+0xe4>)
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	b29b      	uxth	r3, r3
 8002b18:	4413      	add	r3, r2
 8002b1a:	b29a      	uxth	r2, r3
 8002b1c:	4b21      	ldr	r3, [pc, #132]	; (8002ba4 <MOTOR_MIXER_Mix+0xe8>)
 8002b1e:	809a      	strh	r2, [r3, #4]
	motorsValues[3] = throttle + roll - pitch;// + yaw;
 8002b20:	4b1d      	ldr	r3, [pc, #116]	; (8002b98 <MOTOR_MIXER_Mix+0xdc>)
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	b29a      	uxth	r2, r3
 8002b26:	4b1d      	ldr	r3, [pc, #116]	; (8002b9c <MOTOR_MIXER_Mix+0xe0>)
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	b29b      	uxth	r3, r3
 8002b2c:	4413      	add	r3, r2
 8002b2e:	b29a      	uxth	r2, r3
 8002b30:	4b1b      	ldr	r3, [pc, #108]	; (8002ba0 <MOTOR_MIXER_Mix+0xe4>)
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	b29b      	uxth	r3, r3
 8002b36:	1ad3      	subs	r3, r2, r3
 8002b38:	b29a      	uxth	r2, r3
 8002b3a:	4b1a      	ldr	r3, [pc, #104]	; (8002ba4 <MOTOR_MIXER_Mix+0xe8>)
 8002b3c:	80da      	strh	r2, [r3, #6]

	for(i = 0; i < 4; i++)
 8002b3e:	2300      	movs	r3, #0
 8002b40:	607b      	str	r3, [r7, #4]
 8002b42:	e00f      	b.n	8002b64 <MOTOR_MIXER_Mix+0xa8>
	{
		if(motorsValues[i] < 1000)
 8002b44:	4a17      	ldr	r2, [pc, #92]	; (8002ba4 <MOTOR_MIXER_Mix+0xe8>)
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002b4c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002b50:	d205      	bcs.n	8002b5e <MOTOR_MIXER_Mix+0xa2>
		{
			motorsValues[i] = 1000;
 8002b52:	4a14      	ldr	r2, [pc, #80]	; (8002ba4 <MOTOR_MIXER_Mix+0xe8>)
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002b5a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for(i = 0; i < 4; i++)
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	3301      	adds	r3, #1
 8002b62:	607b      	str	r3, [r7, #4]
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	2b03      	cmp	r3, #3
 8002b68:	ddec      	ble.n	8002b44 <MOTOR_MIXER_Mix+0x88>
		}
	}

	DATA_MotorValues.motor0 = motorsValues[0];
 8002b6a:	4b0e      	ldr	r3, [pc, #56]	; (8002ba4 <MOTOR_MIXER_Mix+0xe8>)
 8002b6c:	881a      	ldrh	r2, [r3, #0]
 8002b6e:	4b0e      	ldr	r3, [pc, #56]	; (8002ba8 <MOTOR_MIXER_Mix+0xec>)
 8002b70:	801a      	strh	r2, [r3, #0]
	DATA_MotorValues.motor1 = motorsValues[1];
 8002b72:	4b0c      	ldr	r3, [pc, #48]	; (8002ba4 <MOTOR_MIXER_Mix+0xe8>)
 8002b74:	885a      	ldrh	r2, [r3, #2]
 8002b76:	4b0c      	ldr	r3, [pc, #48]	; (8002ba8 <MOTOR_MIXER_Mix+0xec>)
 8002b78:	805a      	strh	r2, [r3, #2]
	DATA_MotorValues.motor2 = motorsValues[2];
 8002b7a:	4b0a      	ldr	r3, [pc, #40]	; (8002ba4 <MOTOR_MIXER_Mix+0xe8>)
 8002b7c:	889a      	ldrh	r2, [r3, #4]
 8002b7e:	4b0a      	ldr	r3, [pc, #40]	; (8002ba8 <MOTOR_MIXER_Mix+0xec>)
 8002b80:	809a      	strh	r2, [r3, #4]
	DATA_MotorValues.motor3 = motorsValues[3];
 8002b82:	4b08      	ldr	r3, [pc, #32]	; (8002ba4 <MOTOR_MIXER_Mix+0xe8>)
 8002b84:	88da      	ldrh	r2, [r3, #6]
 8002b86:	4b08      	ldr	r3, [pc, #32]	; (8002ba8 <MOTOR_MIXER_Mix+0xec>)
 8002b88:	80da      	strh	r2, [r3, #6]
}
 8002b8a:	bf00      	nop
 8002b8c:	370c      	adds	r7, #12
 8002b8e:	46bd      	mov	sp, r7
 8002b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b94:	4770      	bx	lr
 8002b96:	bf00      	nop
 8002b98:	20000024 	.word	0x20000024
 8002b9c:	2000068c 	.word	0x2000068c
 8002ba0:	20000690 	.word	0x20000690
 8002ba4:	20000684 	.word	0x20000684
 8002ba8:	20000698 	.word	0x20000698

08002bac <MOTOR_MIXER_WriteMotors>:

void MOTOR_MIXER_WriteMotors()
{
 8002bac:	b580      	push	{r7, lr}
 8002bae:	af00      	add	r7, sp, #0
	dshot_write(motorsValues);
 8002bb0:	4802      	ldr	r0, [pc, #8]	; (8002bbc <MOTOR_MIXER_WriteMotors+0x10>)
 8002bb2:	f7fe fd1c 	bl	80015ee <dshot_write>
}
 8002bb6:	bf00      	nop
 8002bb8:	bd80      	pop	{r7, pc}
 8002bba:	bf00      	nop
 8002bbc:	20000684 	.word	0x20000684

08002bc0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002bc0:	b580      	push	{r7, lr}
 8002bc2:	b082      	sub	sp, #8
 8002bc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002bc6:	2300      	movs	r3, #0
 8002bc8:	607b      	str	r3, [r7, #4]
 8002bca:	4b10      	ldr	r3, [pc, #64]	; (8002c0c <HAL_MspInit+0x4c>)
 8002bcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bce:	4a0f      	ldr	r2, [pc, #60]	; (8002c0c <HAL_MspInit+0x4c>)
 8002bd0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002bd4:	6453      	str	r3, [r2, #68]	; 0x44
 8002bd6:	4b0d      	ldr	r3, [pc, #52]	; (8002c0c <HAL_MspInit+0x4c>)
 8002bd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bda:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002bde:	607b      	str	r3, [r7, #4]
 8002be0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002be2:	2300      	movs	r3, #0
 8002be4:	603b      	str	r3, [r7, #0]
 8002be6:	4b09      	ldr	r3, [pc, #36]	; (8002c0c <HAL_MspInit+0x4c>)
 8002be8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bea:	4a08      	ldr	r2, [pc, #32]	; (8002c0c <HAL_MspInit+0x4c>)
 8002bec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002bf0:	6413      	str	r3, [r2, #64]	; 0x40
 8002bf2:	4b06      	ldr	r3, [pc, #24]	; (8002c0c <HAL_MspInit+0x4c>)
 8002bf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bf6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bfa:	603b      	str	r3, [r7, #0]
 8002bfc:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8002bfe:	2007      	movs	r0, #7
 8002c00:	f004 f9dc 	bl	8006fbc <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002c04:	bf00      	nop
 8002c06:	3708      	adds	r7, #8
 8002c08:	46bd      	mov	sp, r7
 8002c0a:	bd80      	pop	{r7, pc}
 8002c0c:	40023800 	.word	0x40023800

08002c10 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002c10:	b480      	push	{r7}
 8002c12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002c14:	e7fe      	b.n	8002c14 <NMI_Handler+0x4>

08002c16 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002c16:	b480      	push	{r7}
 8002c18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002c1a:	e7fe      	b.n	8002c1a <HardFault_Handler+0x4>

08002c1c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002c1c:	b480      	push	{r7}
 8002c1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002c20:	e7fe      	b.n	8002c20 <MemManage_Handler+0x4>

08002c22 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002c22:	b480      	push	{r7}
 8002c24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002c26:	e7fe      	b.n	8002c26 <BusFault_Handler+0x4>

08002c28 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002c28:	b480      	push	{r7}
 8002c2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002c2c:	e7fe      	b.n	8002c2c <UsageFault_Handler+0x4>

08002c2e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002c2e:	b480      	push	{r7}
 8002c30:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002c32:	bf00      	nop
 8002c34:	46bd      	mov	sp, r7
 8002c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c3a:	4770      	bx	lr

08002c3c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002c3c:	b480      	push	{r7}
 8002c3e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002c40:	bf00      	nop
 8002c42:	46bd      	mov	sp, r7
 8002c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c48:	4770      	bx	lr

08002c4a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002c4a:	b480      	push	{r7}
 8002c4c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002c4e:	bf00      	nop
 8002c50:	46bd      	mov	sp, r7
 8002c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c56:	4770      	bx	lr

08002c58 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002c58:	b580      	push	{r7, lr}
 8002c5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002c5c:	f004 f89a 	bl	8006d94 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  systick_micros++;
 8002c60:	4b03      	ldr	r3, [pc, #12]	; (8002c70 <SysTick_Handler+0x18>)
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	3301      	adds	r3, #1
 8002c66:	4a02      	ldr	r2, [pc, #8]	; (8002c70 <SysTick_Handler+0x18>)
 8002c68:	6013      	str	r3, [r2, #0]

  /* USER CODE END SysTick_IRQn 1 */
}
 8002c6a:	bf00      	nop
 8002c6c:	bd80      	pop	{r7, pc}
 8002c6e:	bf00      	nop
 8002c70:	200006a0 	.word	0x200006a0

08002c74 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8002c74:	b580      	push	{r7, lr}
 8002c76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_up_ch3);
 8002c78:	4802      	ldr	r0, [pc, #8]	; (8002c84 <DMA1_Stream1_IRQHandler+0x10>)
 8002c7a:	f004 fae7 	bl	800724c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8002c7e:	bf00      	nop
 8002c80:	bd80      	pop	{r7, pc}
 8002c82:	bf00      	nop
 8002c84:	20000838 	.word	0x20000838

08002c88 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8002c88:	b580      	push	{r7, lr}
 8002c8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch4_up);
 8002c8c:	4802      	ldr	r0, [pc, #8]	; (8002c98 <DMA1_Stream2_IRQHandler+0x10>)
 8002c8e:	f004 fadd 	bl	800724c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8002c92:	bf00      	nop
 8002c94:	bd80      	pop	{r7, pc}
 8002c96:	bf00      	nop
 8002c98:	20000898 	.word	0x20000898

08002c9c <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8002c9c:	b580      	push	{r7, lr}
 8002c9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim5_ch2);
 8002ca0:	4802      	ldr	r0, [pc, #8]	; (8002cac <DMA1_Stream4_IRQHandler+0x10>)
 8002ca2:	f004 fad3 	bl	800724c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8002ca6:	bf00      	nop
 8002ca8:	bd80      	pop	{r7, pc}
 8002caa:	bf00      	nop
 8002cac:	200008f8 	.word	0x200008f8

08002cb0 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8002cb0:	b580      	push	{r7, lr}
 8002cb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch1);
 8002cb4:	4802      	ldr	r0, [pc, #8]	; (8002cc0 <DMA1_Stream5_IRQHandler+0x10>)
 8002cb6:	f004 fac9 	bl	800724c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8002cba:	bf00      	nop
 8002cbc:	bd80      	pop	{r7, pc}
 8002cbe:	bf00      	nop
 8002cc0:	200007d8 	.word	0x200007d8

08002cc4 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8002cc4:	b580      	push	{r7, lr}
 8002cc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8002cc8:	4802      	ldr	r0, [pc, #8]	; (8002cd4 <OTG_FS_IRQHandler+0x10>)
 8002cca:	f006 f93d 	bl	8008f48 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8002cce:	bf00      	nop
 8002cd0:	bd80      	pop	{r7, pc}
 8002cd2:	bf00      	nop
 8002cd4:	20001f24 	.word	0x20001f24

08002cd8 <BSP_I2C1_Init>:
/**
  * @brief  Initialize I2C HAL
  * @retval BSP status
  */
int32_t BSP_I2C1_Init(void)
{
 8002cd8:	b580      	push	{r7, lr}
 8002cda:	b082      	sub	sp, #8
 8002cdc:	af00      	add	r7, sp, #0

  int32_t ret = BSP_ERROR_NONE;
 8002cde:	2300      	movs	r3, #0
 8002ce0:	607b      	str	r3, [r7, #4]

  hi2c1.Instance  = I2C1;
 8002ce2:	4b13      	ldr	r3, [pc, #76]	; (8002d30 <BSP_I2C1_Init+0x58>)
 8002ce4:	4a13      	ldr	r2, [pc, #76]	; (8002d34 <BSP_I2C1_Init+0x5c>)
 8002ce6:	601a      	str	r2, [r3, #0]

  if(I2C1InitCounter++ == 0)
 8002ce8:	4b13      	ldr	r3, [pc, #76]	; (8002d38 <BSP_I2C1_Init+0x60>)
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	1c5a      	adds	r2, r3, #1
 8002cee:	4912      	ldr	r1, [pc, #72]	; (8002d38 <BSP_I2C1_Init+0x60>)
 8002cf0:	600a      	str	r2, [r1, #0]
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d117      	bne.n	8002d26 <BSP_I2C1_Init+0x4e>
  {
    if (HAL_I2C_GetState(&hi2c1) == HAL_I2C_STATE_RESET)
 8002cf6:	480e      	ldr	r0, [pc, #56]	; (8002d30 <BSP_I2C1_Init+0x58>)
 8002cf8:	f005 fc5a 	bl	80085b0 <HAL_I2C_GetState>
 8002cfc:	4603      	mov	r3, r0
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d111      	bne.n	8002d26 <BSP_I2C1_Init+0x4e>
    {
    #if (USE_HAL_I2C_REGISTER_CALLBACKS == 0U)
      /* Init the I2C Msp */
      I2C1_MspInit(&hi2c1);
 8002d02:	480b      	ldr	r0, [pc, #44]	; (8002d30 <BSP_I2C1_Init+0x58>)
 8002d04:	f000 f8e2 	bl	8002ecc <I2C1_MspInit>
        {
          return BSP_ERROR_MSP_FAILURE;
        }
      }
    #endif
      if(ret == BSP_ERROR_NONE)
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d10b      	bne.n	8002d26 <BSP_I2C1_Init+0x4e>
      {
        /* Init the I2C */
        if(MX_I2C1_Init(&hi2c1) != HAL_OK)
 8002d0e:	4808      	ldr	r0, [pc, #32]	; (8002d30 <BSP_I2C1_Init+0x58>)
 8002d10:	f000 f8a8 	bl	8002e64 <MX_I2C1_Init>
 8002d14:	4603      	mov	r3, r0
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d003      	beq.n	8002d22 <BSP_I2C1_Init+0x4a>
        {
          ret = BSP_ERROR_BUS_FAILURE;
 8002d1a:	f06f 0307 	mvn.w	r3, #7
 8002d1e:	607b      	str	r3, [r7, #4]
 8002d20:	e001      	b.n	8002d26 <BSP_I2C1_Init+0x4e>
        }
        else
        {
          ret = BSP_ERROR_NONE;
 8002d22:	2300      	movs	r3, #0
 8002d24:	607b      	str	r3, [r7, #4]
        }
      }
    }
  }
  return ret;
 8002d26:	687b      	ldr	r3, [r7, #4]
}
 8002d28:	4618      	mov	r0, r3
 8002d2a:	3708      	adds	r7, #8
 8002d2c:	46bd      	mov	sp, r7
 8002d2e:	bd80      	pop	{r7, pc}
 8002d30:	200006a4 	.word	0x200006a4
 8002d34:	40005400 	.word	0x40005400
 8002d38:	200006f8 	.word	0x200006f8

08002d3c <BSP_I2C1_DeInit>:
/**
  * @brief  DeInitialize I2C HAL.
  * @retval BSP status
  */
int32_t BSP_I2C1_DeInit(void)
{
 8002d3c:	b580      	push	{r7, lr}
 8002d3e:	b082      	sub	sp, #8
 8002d40:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 8002d42:	2300      	movs	r3, #0
 8002d44:	607b      	str	r3, [r7, #4]

  if (I2C1InitCounter > 0)
 8002d46:	4b0f      	ldr	r3, [pc, #60]	; (8002d84 <BSP_I2C1_DeInit+0x48>)
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d014      	beq.n	8002d78 <BSP_I2C1_DeInit+0x3c>
  {
    if (--I2C1InitCounter == 0)
 8002d4e:	4b0d      	ldr	r3, [pc, #52]	; (8002d84 <BSP_I2C1_DeInit+0x48>)
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	3b01      	subs	r3, #1
 8002d54:	4a0b      	ldr	r2, [pc, #44]	; (8002d84 <BSP_I2C1_DeInit+0x48>)
 8002d56:	6013      	str	r3, [r2, #0]
 8002d58:	4b0a      	ldr	r3, [pc, #40]	; (8002d84 <BSP_I2C1_DeInit+0x48>)
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d10b      	bne.n	8002d78 <BSP_I2C1_DeInit+0x3c>
    {
  #if (USE_HAL_I2C_REGISTER_CALLBACKS == 0U)
      /* DeInit the I2C */
      I2C1_MspDeInit(&hi2c1);
 8002d60:	4809      	ldr	r0, [pc, #36]	; (8002d88 <BSP_I2C1_DeInit+0x4c>)
 8002d62:	f000 f8fd 	bl	8002f60 <I2C1_MspDeInit>
  #endif
      /* DeInit the I2C */
      if (HAL_I2C_DeInit(&hi2c1) != HAL_OK)
 8002d66:	4808      	ldr	r0, [pc, #32]	; (8002d88 <BSP_I2C1_DeInit+0x4c>)
 8002d68:	f005 f8be 	bl	8007ee8 <HAL_I2C_DeInit>
 8002d6c:	4603      	mov	r3, r0
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d002      	beq.n	8002d78 <BSP_I2C1_DeInit+0x3c>
      {
        ret = BSP_ERROR_BUS_FAILURE;
 8002d72:	f06f 0307 	mvn.w	r3, #7
 8002d76:	607b      	str	r3, [r7, #4]
      }
    }
  }
  return ret;
 8002d78:	687b      	ldr	r3, [r7, #4]
}
 8002d7a:	4618      	mov	r0, r3
 8002d7c:	3708      	adds	r7, #8
 8002d7e:	46bd      	mov	sp, r7
 8002d80:	bd80      	pop	{r7, pc}
 8002d82:	bf00      	nop
 8002d84:	200006f8 	.word	0x200006f8
 8002d88:	200006a4 	.word	0x200006a4

08002d8c <BSP_I2C1_WriteReg>:
  * @param  Length Data Length
  * @retval BSP status
  */

int32_t BSP_I2C1_WriteReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 8002d8c:	b580      	push	{r7, lr}
 8002d8e:	b08a      	sub	sp, #40	; 0x28
 8002d90:	af04      	add	r7, sp, #16
 8002d92:	60ba      	str	r2, [r7, #8]
 8002d94:	461a      	mov	r2, r3
 8002d96:	4603      	mov	r3, r0
 8002d98:	81fb      	strh	r3, [r7, #14]
 8002d9a:	460b      	mov	r3, r1
 8002d9c:	81bb      	strh	r3, [r7, #12]
 8002d9e:	4613      	mov	r3, r2
 8002da0:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 8002da2:	2300      	movs	r3, #0
 8002da4:	617b      	str	r3, [r7, #20]

  if (HAL_I2C_Mem_Write(&hi2c1, DevAddr,Reg, I2C_MEMADD_SIZE_8BIT,pData, Length, BUS_I2C1_POLL_TIMEOUT) != HAL_OK)
 8002da6:	89ba      	ldrh	r2, [r7, #12]
 8002da8:	89f9      	ldrh	r1, [r7, #14]
 8002daa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002dae:	9302      	str	r3, [sp, #8]
 8002db0:	88fb      	ldrh	r3, [r7, #6]
 8002db2:	9301      	str	r3, [sp, #4]
 8002db4:	68bb      	ldr	r3, [r7, #8]
 8002db6:	9300      	str	r3, [sp, #0]
 8002db8:	2301      	movs	r3, #1
 8002dba:	480c      	ldr	r0, [pc, #48]	; (8002dec <BSP_I2C1_WriteReg+0x60>)
 8002dbc:	f005 f8d8 	bl	8007f70 <HAL_I2C_Mem_Write>
 8002dc0:	4603      	mov	r3, r0
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d00c      	beq.n	8002de0 <BSP_I2C1_WriteReg+0x54>
  {
    if (HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF)
 8002dc6:	4809      	ldr	r0, [pc, #36]	; (8002dec <BSP_I2C1_WriteReg+0x60>)
 8002dc8:	f005 fc00 	bl	80085cc <HAL_I2C_GetError>
 8002dcc:	4603      	mov	r3, r0
 8002dce:	2b04      	cmp	r3, #4
 8002dd0:	d103      	bne.n	8002dda <BSP_I2C1_WriteReg+0x4e>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 8002dd2:	f06f 0365 	mvn.w	r3, #101	; 0x65
 8002dd6:	617b      	str	r3, [r7, #20]
 8002dd8:	e002      	b.n	8002de0 <BSP_I2C1_WriteReg+0x54>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 8002dda:	f06f 0303 	mvn.w	r3, #3
 8002dde:	617b      	str	r3, [r7, #20]
    }
  }
  return ret;
 8002de0:	697b      	ldr	r3, [r7, #20]
}
 8002de2:	4618      	mov	r0, r3
 8002de4:	3718      	adds	r7, #24
 8002de6:	46bd      	mov	sp, r7
 8002de8:	bd80      	pop	{r7, pc}
 8002dea:	bf00      	nop
 8002dec:	200006a4 	.word	0x200006a4

08002df0 <BSP_I2C1_ReadReg>:
  * @param  pData  Pointer to data buffer to read
  * @param  Length Data Length
  * @retval BSP status
  */
int32_t  BSP_I2C1_ReadReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 8002df0:	b580      	push	{r7, lr}
 8002df2:	b08a      	sub	sp, #40	; 0x28
 8002df4:	af04      	add	r7, sp, #16
 8002df6:	60ba      	str	r2, [r7, #8]
 8002df8:	461a      	mov	r2, r3
 8002dfa:	4603      	mov	r3, r0
 8002dfc:	81fb      	strh	r3, [r7, #14]
 8002dfe:	460b      	mov	r3, r1
 8002e00:	81bb      	strh	r3, [r7, #12]
 8002e02:	4613      	mov	r3, r2
 8002e04:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 8002e06:	2300      	movs	r3, #0
 8002e08:	617b      	str	r3, [r7, #20]

  if (HAL_I2C_Mem_Read(&hi2c1, DevAddr, Reg, I2C_MEMADD_SIZE_8BIT, pData, Length, BUS_I2C1_POLL_TIMEOUT) != HAL_OK)
 8002e0a:	89ba      	ldrh	r2, [r7, #12]
 8002e0c:	89f9      	ldrh	r1, [r7, #14]
 8002e0e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002e12:	9302      	str	r3, [sp, #8]
 8002e14:	88fb      	ldrh	r3, [r7, #6]
 8002e16:	9301      	str	r3, [sp, #4]
 8002e18:	68bb      	ldr	r3, [r7, #8]
 8002e1a:	9300      	str	r3, [sp, #0]
 8002e1c:	2301      	movs	r3, #1
 8002e1e:	480c      	ldr	r0, [pc, #48]	; (8002e50 <BSP_I2C1_ReadReg+0x60>)
 8002e20:	f005 f9a0 	bl	8008164 <HAL_I2C_Mem_Read>
 8002e24:	4603      	mov	r3, r0
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d00c      	beq.n	8002e44 <BSP_I2C1_ReadReg+0x54>
  {
    if (HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF)
 8002e2a:	4809      	ldr	r0, [pc, #36]	; (8002e50 <BSP_I2C1_ReadReg+0x60>)
 8002e2c:	f005 fbce 	bl	80085cc <HAL_I2C_GetError>
 8002e30:	4603      	mov	r3, r0
 8002e32:	2b04      	cmp	r3, #4
 8002e34:	d103      	bne.n	8002e3e <BSP_I2C1_ReadReg+0x4e>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 8002e36:	f06f 0365 	mvn.w	r3, #101	; 0x65
 8002e3a:	617b      	str	r3, [r7, #20]
 8002e3c:	e002      	b.n	8002e44 <BSP_I2C1_ReadReg+0x54>
    }
    else
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8002e3e:	f06f 0303 	mvn.w	r3, #3
 8002e42:	617b      	str	r3, [r7, #20]
    }
  }
  return ret;
 8002e44:	697b      	ldr	r3, [r7, #20]
}
 8002e46:	4618      	mov	r0, r3
 8002e48:	3718      	adds	r7, #24
 8002e4a:	46bd      	mov	sp, r7
 8002e4c:	bd80      	pop	{r7, pc}
 8002e4e:	bf00      	nop
 8002e50:	200006a4 	.word	0x200006a4

08002e54 <BSP_GetTick>:

/**
  * @brief  Return system tick in ms
  * @retval Current HAL time base time stamp
  */
int32_t BSP_GetTick(void) {
 8002e54:	b580      	push	{r7, lr}
 8002e56:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8002e58:	f003 ffb0 	bl	8006dbc <HAL_GetTick>
 8002e5c:	4603      	mov	r3, r0
}
 8002e5e:	4618      	mov	r0, r3
 8002e60:	bd80      	pop	{r7, pc}
	...

08002e64 <MX_I2C1_Init>:

/* I2C1 init function */

__weak HAL_StatusTypeDef MX_I2C1_Init(I2C_HandleTypeDef* hi2c)
{
 8002e64:	b580      	push	{r7, lr}
 8002e66:	b084      	sub	sp, #16
 8002e68:	af00      	add	r7, sp, #0
 8002e6a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8002e6c:	2300      	movs	r3, #0
 8002e6e:	73fb      	strb	r3, [r7, #15]

  hi2c->Instance = I2C1;
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	4a14      	ldr	r2, [pc, #80]	; (8002ec4 <MX_I2C1_Init+0x60>)
 8002e74:	601a      	str	r2, [r3, #0]
  hi2c->Init.ClockSpeed = 100000;
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	4a13      	ldr	r2, [pc, #76]	; (8002ec8 <MX_I2C1_Init+0x64>)
 8002e7a:	605a      	str	r2, [r3, #4]
  hi2c->Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	2200      	movs	r2, #0
 8002e80:	609a      	str	r2, [r3, #8]
  hi2c->Init.OwnAddress1 = 0;
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	2200      	movs	r2, #0
 8002e86:	60da      	str	r2, [r3, #12]
  hi2c->Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002e8e:	611a      	str	r2, [r3, #16]
  hi2c->Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	2200      	movs	r2, #0
 8002e94:	615a      	str	r2, [r3, #20]
  hi2c->Init.OwnAddress2 = 0;
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	2200      	movs	r2, #0
 8002e9a:	619a      	str	r2, [r3, #24]
  hi2c->Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	2200      	movs	r2, #0
 8002ea0:	61da      	str	r2, [r3, #28]
  hi2c->Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	2200      	movs	r2, #0
 8002ea6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(hi2c) != HAL_OK)
 8002ea8:	6878      	ldr	r0, [r7, #4]
 8002eaa:	f004 fed9 	bl	8007c60 <HAL_I2C_Init>
 8002eae:	4603      	mov	r3, r0
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d001      	beq.n	8002eb8 <MX_I2C1_Init+0x54>
  {
    ret = HAL_ERROR;
 8002eb4:	2301      	movs	r3, #1
 8002eb6:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8002eb8:	7bfb      	ldrb	r3, [r7, #15]
}
 8002eba:	4618      	mov	r0, r3
 8002ebc:	3710      	adds	r7, #16
 8002ebe:	46bd      	mov	sp, r7
 8002ec0:	bd80      	pop	{r7, pc}
 8002ec2:	bf00      	nop
 8002ec4:	40005400 	.word	0x40005400
 8002ec8:	000186a0 	.word	0x000186a0

08002ecc <I2C1_MspInit>:

static void I2C1_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8002ecc:	b580      	push	{r7, lr}
 8002ece:	b08a      	sub	sp, #40	; 0x28
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ed4:	2300      	movs	r3, #0
 8002ed6:	613b      	str	r3, [r7, #16]
 8002ed8:	4b1f      	ldr	r3, [pc, #124]	; (8002f58 <I2C1_MspInit+0x8c>)
 8002eda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002edc:	4a1e      	ldr	r2, [pc, #120]	; (8002f58 <I2C1_MspInit+0x8c>)
 8002ede:	f043 0302 	orr.w	r3, r3, #2
 8002ee2:	6313      	str	r3, [r2, #48]	; 0x30
 8002ee4:	4b1c      	ldr	r3, [pc, #112]	; (8002f58 <I2C1_MspInit+0x8c>)
 8002ee6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ee8:	f003 0302 	and.w	r3, r3, #2
 8002eec:	613b      	str	r3, [r7, #16]
 8002eee:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = BUS_I2C1_SCL_GPIO_PIN;
 8002ef0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002ef4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002ef6:	2312      	movs	r3, #18
 8002ef8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002efa:	2300      	movs	r3, #0
 8002efc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002efe:	2303      	movs	r3, #3
 8002f00:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_I2C1_SCL_GPIO_AF;
 8002f02:	2304      	movs	r3, #4
 8002f04:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_I2C1_SCL_GPIO_PORT, &GPIO_InitStruct);
 8002f06:	f107 0314 	add.w	r3, r7, #20
 8002f0a:	4619      	mov	r1, r3
 8002f0c:	4813      	ldr	r0, [pc, #76]	; (8002f5c <I2C1_MspInit+0x90>)
 8002f0e:	f004 fc07 	bl	8007720 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_I2C1_SDA_GPIO_PIN;
 8002f12:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002f16:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002f18:	2312      	movs	r3, #18
 8002f1a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f1c:	2300      	movs	r3, #0
 8002f1e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f20:	2303      	movs	r3, #3
 8002f22:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_I2C1_SDA_GPIO_AF;
 8002f24:	2304      	movs	r3, #4
 8002f26:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_I2C1_SDA_GPIO_PORT, &GPIO_InitStruct);
 8002f28:	f107 0314 	add.w	r3, r7, #20
 8002f2c:	4619      	mov	r1, r3
 8002f2e:	480b      	ldr	r0, [pc, #44]	; (8002f5c <I2C1_MspInit+0x90>)
 8002f30:	f004 fbf6 	bl	8007720 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002f34:	2300      	movs	r3, #0
 8002f36:	60fb      	str	r3, [r7, #12]
 8002f38:	4b07      	ldr	r3, [pc, #28]	; (8002f58 <I2C1_MspInit+0x8c>)
 8002f3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f3c:	4a06      	ldr	r2, [pc, #24]	; (8002f58 <I2C1_MspInit+0x8c>)
 8002f3e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002f42:	6413      	str	r3, [r2, #64]	; 0x40
 8002f44:	4b04      	ldr	r3, [pc, #16]	; (8002f58 <I2C1_MspInit+0x8c>)
 8002f46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f48:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002f4c:	60fb      	str	r3, [r7, #12]
 8002f4e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
}
 8002f50:	bf00      	nop
 8002f52:	3728      	adds	r7, #40	; 0x28
 8002f54:	46bd      	mov	sp, r7
 8002f56:	bd80      	pop	{r7, pc}
 8002f58:	40023800 	.word	0x40023800
 8002f5c:	40020400 	.word	0x40020400

08002f60 <I2C1_MspDeInit>:

static void I2C1_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{
 8002f60:	b580      	push	{r7, lr}
 8002f62:	b082      	sub	sp, #8
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8002f68:	4b09      	ldr	r3, [pc, #36]	; (8002f90 <I2C1_MspDeInit+0x30>)
 8002f6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f6c:	4a08      	ldr	r2, [pc, #32]	; (8002f90 <I2C1_MspDeInit+0x30>)
 8002f6e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002f72:	6413      	str	r3, [r2, #64]	; 0x40

    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(BUS_I2C1_SCL_GPIO_PORT, BUS_I2C1_SCL_GPIO_PIN);
 8002f74:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002f78:	4806      	ldr	r0, [pc, #24]	; (8002f94 <I2C1_MspDeInit+0x34>)
 8002f7a:	f004 fd65 	bl	8007a48 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(BUS_I2C1_SDA_GPIO_PORT, BUS_I2C1_SDA_GPIO_PIN);
 8002f7e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002f82:	4804      	ldr	r0, [pc, #16]	; (8002f94 <I2C1_MspDeInit+0x34>)
 8002f84:	f004 fd60 	bl	8007a48 <HAL_GPIO_DeInit>

  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
}
 8002f88:	bf00      	nop
 8002f8a:	3708      	adds	r7, #8
 8002f8c:	46bd      	mov	sp, r7
 8002f8e:	bd80      	pop	{r7, pc}
 8002f90:	40023800 	.word	0x40023800
 8002f94:	40020400 	.word	0x40020400

08002f98 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002f98:	b480      	push	{r7}
 8002f9a:	af00      	add	r7, sp, #0
  return 1;
 8002f9c:	2301      	movs	r3, #1
}
 8002f9e:	4618      	mov	r0, r3
 8002fa0:	46bd      	mov	sp, r7
 8002fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa6:	4770      	bx	lr

08002fa8 <_kill>:

int _kill(int pid, int sig)
{
 8002fa8:	b580      	push	{r7, lr}
 8002faa:	b082      	sub	sp, #8
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	6078      	str	r0, [r7, #4]
 8002fb0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002fb2:	f00d f8d9 	bl	8010168 <__errno>
 8002fb6:	4603      	mov	r3, r0
 8002fb8:	2216      	movs	r2, #22
 8002fba:	601a      	str	r2, [r3, #0]
  return -1;
 8002fbc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002fc0:	4618      	mov	r0, r3
 8002fc2:	3708      	adds	r7, #8
 8002fc4:	46bd      	mov	sp, r7
 8002fc6:	bd80      	pop	{r7, pc}

08002fc8 <_exit>:

void _exit (int status)
{
 8002fc8:	b580      	push	{r7, lr}
 8002fca:	b082      	sub	sp, #8
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002fd0:	f04f 31ff 	mov.w	r1, #4294967295
 8002fd4:	6878      	ldr	r0, [r7, #4]
 8002fd6:	f7ff ffe7 	bl	8002fa8 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002fda:	e7fe      	b.n	8002fda <_exit+0x12>

08002fdc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002fdc:	b580      	push	{r7, lr}
 8002fde:	b086      	sub	sp, #24
 8002fe0:	af00      	add	r7, sp, #0
 8002fe2:	60f8      	str	r0, [r7, #12]
 8002fe4:	60b9      	str	r1, [r7, #8]
 8002fe6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002fe8:	2300      	movs	r3, #0
 8002fea:	617b      	str	r3, [r7, #20]
 8002fec:	e00a      	b.n	8003004 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002fee:	f3af 8000 	nop.w
 8002ff2:	4601      	mov	r1, r0
 8002ff4:	68bb      	ldr	r3, [r7, #8]
 8002ff6:	1c5a      	adds	r2, r3, #1
 8002ff8:	60ba      	str	r2, [r7, #8]
 8002ffa:	b2ca      	uxtb	r2, r1
 8002ffc:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002ffe:	697b      	ldr	r3, [r7, #20]
 8003000:	3301      	adds	r3, #1
 8003002:	617b      	str	r3, [r7, #20]
 8003004:	697a      	ldr	r2, [r7, #20]
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	429a      	cmp	r2, r3
 800300a:	dbf0      	blt.n	8002fee <_read+0x12>
  }

  return len;
 800300c:	687b      	ldr	r3, [r7, #4]
}
 800300e:	4618      	mov	r0, r3
 8003010:	3718      	adds	r7, #24
 8003012:	46bd      	mov	sp, r7
 8003014:	bd80      	pop	{r7, pc}

08003016 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003016:	b580      	push	{r7, lr}
 8003018:	b086      	sub	sp, #24
 800301a:	af00      	add	r7, sp, #0
 800301c:	60f8      	str	r0, [r7, #12]
 800301e:	60b9      	str	r1, [r7, #8]
 8003020:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003022:	2300      	movs	r3, #0
 8003024:	617b      	str	r3, [r7, #20]
 8003026:	e009      	b.n	800303c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003028:	68bb      	ldr	r3, [r7, #8]
 800302a:	1c5a      	adds	r2, r3, #1
 800302c:	60ba      	str	r2, [r7, #8]
 800302e:	781b      	ldrb	r3, [r3, #0]
 8003030:	4618      	mov	r0, r3
 8003032:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003036:	697b      	ldr	r3, [r7, #20]
 8003038:	3301      	adds	r3, #1
 800303a:	617b      	str	r3, [r7, #20]
 800303c:	697a      	ldr	r2, [r7, #20]
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	429a      	cmp	r2, r3
 8003042:	dbf1      	blt.n	8003028 <_write+0x12>
  }
  return len;
 8003044:	687b      	ldr	r3, [r7, #4]
}
 8003046:	4618      	mov	r0, r3
 8003048:	3718      	adds	r7, #24
 800304a:	46bd      	mov	sp, r7
 800304c:	bd80      	pop	{r7, pc}

0800304e <_close>:

int _close(int file)
{
 800304e:	b480      	push	{r7}
 8003050:	b083      	sub	sp, #12
 8003052:	af00      	add	r7, sp, #0
 8003054:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003056:	f04f 33ff 	mov.w	r3, #4294967295
}
 800305a:	4618      	mov	r0, r3
 800305c:	370c      	adds	r7, #12
 800305e:	46bd      	mov	sp, r7
 8003060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003064:	4770      	bx	lr

08003066 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003066:	b480      	push	{r7}
 8003068:	b083      	sub	sp, #12
 800306a:	af00      	add	r7, sp, #0
 800306c:	6078      	str	r0, [r7, #4]
 800306e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003070:	683b      	ldr	r3, [r7, #0]
 8003072:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003076:	605a      	str	r2, [r3, #4]
  return 0;
 8003078:	2300      	movs	r3, #0
}
 800307a:	4618      	mov	r0, r3
 800307c:	370c      	adds	r7, #12
 800307e:	46bd      	mov	sp, r7
 8003080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003084:	4770      	bx	lr

08003086 <_isatty>:

int _isatty(int file)
{
 8003086:	b480      	push	{r7}
 8003088:	b083      	sub	sp, #12
 800308a:	af00      	add	r7, sp, #0
 800308c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800308e:	2301      	movs	r3, #1
}
 8003090:	4618      	mov	r0, r3
 8003092:	370c      	adds	r7, #12
 8003094:	46bd      	mov	sp, r7
 8003096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800309a:	4770      	bx	lr

0800309c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800309c:	b480      	push	{r7}
 800309e:	b085      	sub	sp, #20
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	60f8      	str	r0, [r7, #12]
 80030a4:	60b9      	str	r1, [r7, #8]
 80030a6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80030a8:	2300      	movs	r3, #0
}
 80030aa:	4618      	mov	r0, r3
 80030ac:	3714      	adds	r7, #20
 80030ae:	46bd      	mov	sp, r7
 80030b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b4:	4770      	bx	lr
	...

080030b8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80030b8:	b580      	push	{r7, lr}
 80030ba:	b086      	sub	sp, #24
 80030bc:	af00      	add	r7, sp, #0
 80030be:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80030c0:	4a14      	ldr	r2, [pc, #80]	; (8003114 <_sbrk+0x5c>)
 80030c2:	4b15      	ldr	r3, [pc, #84]	; (8003118 <_sbrk+0x60>)
 80030c4:	1ad3      	subs	r3, r2, r3
 80030c6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80030c8:	697b      	ldr	r3, [r7, #20]
 80030ca:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80030cc:	4b13      	ldr	r3, [pc, #76]	; (800311c <_sbrk+0x64>)
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d102      	bne.n	80030da <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80030d4:	4b11      	ldr	r3, [pc, #68]	; (800311c <_sbrk+0x64>)
 80030d6:	4a12      	ldr	r2, [pc, #72]	; (8003120 <_sbrk+0x68>)
 80030d8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80030da:	4b10      	ldr	r3, [pc, #64]	; (800311c <_sbrk+0x64>)
 80030dc:	681a      	ldr	r2, [r3, #0]
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	4413      	add	r3, r2
 80030e2:	693a      	ldr	r2, [r7, #16]
 80030e4:	429a      	cmp	r2, r3
 80030e6:	d207      	bcs.n	80030f8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80030e8:	f00d f83e 	bl	8010168 <__errno>
 80030ec:	4603      	mov	r3, r0
 80030ee:	220c      	movs	r2, #12
 80030f0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80030f2:	f04f 33ff 	mov.w	r3, #4294967295
 80030f6:	e009      	b.n	800310c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80030f8:	4b08      	ldr	r3, [pc, #32]	; (800311c <_sbrk+0x64>)
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80030fe:	4b07      	ldr	r3, [pc, #28]	; (800311c <_sbrk+0x64>)
 8003100:	681a      	ldr	r2, [r3, #0]
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	4413      	add	r3, r2
 8003106:	4a05      	ldr	r2, [pc, #20]	; (800311c <_sbrk+0x64>)
 8003108:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800310a:	68fb      	ldr	r3, [r7, #12]
}
 800310c:	4618      	mov	r0, r3
 800310e:	3718      	adds	r7, #24
 8003110:	46bd      	mov	sp, r7
 8003112:	bd80      	pop	{r7, pc}
 8003114:	20020000 	.word	0x20020000
 8003118:	00000400 	.word	0x00000400
 800311c:	200006fc 	.word	0x200006fc
 8003120:	20002660 	.word	0x20002660

08003124 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003124:	b480      	push	{r7}
 8003126:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003128:	4b06      	ldr	r3, [pc, #24]	; (8003144 <SystemInit+0x20>)
 800312a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800312e:	4a05      	ldr	r2, [pc, #20]	; (8003144 <SystemInit+0x20>)
 8003130:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003134:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003138:	bf00      	nop
 800313a:	46bd      	mov	sp, r7
 800313c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003140:	4770      	bx	lr
 8003142:	bf00      	nop
 8003144:	e000ed00 	.word	0xe000ed00

08003148 <MX_TIM2_Init>:
DMA_HandleTypeDef hdma_tim3_ch4_up;
DMA_HandleTypeDef hdma_tim5_ch2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8003148:	b580      	push	{r7, lr}
 800314a:	b08a      	sub	sp, #40	; 0x28
 800314c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800314e:	f107 0320 	add.w	r3, r7, #32
 8003152:	2200      	movs	r2, #0
 8003154:	601a      	str	r2, [r3, #0]
 8003156:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003158:	1d3b      	adds	r3, r7, #4
 800315a:	2200      	movs	r2, #0
 800315c:	601a      	str	r2, [r3, #0]
 800315e:	605a      	str	r2, [r3, #4]
 8003160:	609a      	str	r2, [r3, #8]
 8003162:	60da      	str	r2, [r3, #12]
 8003164:	611a      	str	r2, [r3, #16]
 8003166:	615a      	str	r2, [r3, #20]
 8003168:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800316a:	4b27      	ldr	r3, [pc, #156]	; (8003208 <MX_TIM2_Init+0xc0>)
 800316c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003170:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8003172:	4b25      	ldr	r3, [pc, #148]	; (8003208 <MX_TIM2_Init+0xc0>)
 8003174:	2200      	movs	r2, #0
 8003176:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003178:	4b23      	ldr	r3, [pc, #140]	; (8003208 <MX_TIM2_Init+0xc0>)
 800317a:	2200      	movs	r2, #0
 800317c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0;
 800317e:	4b22      	ldr	r3, [pc, #136]	; (8003208 <MX_TIM2_Init+0xc0>)
 8003180:	2200      	movs	r2, #0
 8003182:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003184:	4b20      	ldr	r3, [pc, #128]	; (8003208 <MX_TIM2_Init+0xc0>)
 8003186:	2200      	movs	r2, #0
 8003188:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800318a:	4b1f      	ldr	r3, [pc, #124]	; (8003208 <MX_TIM2_Init+0xc0>)
 800318c:	2200      	movs	r2, #0
 800318e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8003190:	481d      	ldr	r0, [pc, #116]	; (8003208 <MX_TIM2_Init+0xc0>)
 8003192:	f008 f949 	bl	800b428 <HAL_TIM_PWM_Init>
 8003196:	4603      	mov	r3, r0
 8003198:	2b00      	cmp	r3, #0
 800319a:	d001      	beq.n	80031a0 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 800319c:	f7fe ffd6 	bl	800214c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80031a0:	2300      	movs	r3, #0
 80031a2:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80031a4:	2300      	movs	r3, #0
 80031a6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80031a8:	f107 0320 	add.w	r3, r7, #32
 80031ac:	4619      	mov	r1, r3
 80031ae:	4816      	ldr	r0, [pc, #88]	; (8003208 <MX_TIM2_Init+0xc0>)
 80031b0:	f008 fd8a 	bl	800bcc8 <HAL_TIMEx_MasterConfigSynchronization>
 80031b4:	4603      	mov	r3, r0
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d001      	beq.n	80031be <MX_TIM2_Init+0x76>
  {
    Error_Handler();
 80031ba:	f7fe ffc7 	bl	800214c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80031be:	2360      	movs	r3, #96	; 0x60
 80031c0:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80031c2:	2300      	movs	r3, #0
 80031c4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80031c6:	2300      	movs	r3, #0
 80031c8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80031ca:	2300      	movs	r3, #0
 80031cc:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80031ce:	1d3b      	adds	r3, r7, #4
 80031d0:	2200      	movs	r2, #0
 80031d2:	4619      	mov	r1, r3
 80031d4:	480c      	ldr	r0, [pc, #48]	; (8003208 <MX_TIM2_Init+0xc0>)
 80031d6:	f008 fa3f 	bl	800b658 <HAL_TIM_PWM_ConfigChannel>
 80031da:	4603      	mov	r3, r0
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d001      	beq.n	80031e4 <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 80031e0:	f7fe ffb4 	bl	800214c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80031e4:	1d3b      	adds	r3, r7, #4
 80031e6:	2208      	movs	r2, #8
 80031e8:	4619      	mov	r1, r3
 80031ea:	4807      	ldr	r0, [pc, #28]	; (8003208 <MX_TIM2_Init+0xc0>)
 80031ec:	f008 fa34 	bl	800b658 <HAL_TIM_PWM_ConfigChannel>
 80031f0:	4603      	mov	r3, r0
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d001      	beq.n	80031fa <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 80031f6:	f7fe ffa9 	bl	800214c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80031fa:	4803      	ldr	r0, [pc, #12]	; (8003208 <MX_TIM2_Init+0xc0>)
 80031fc:	f000 fa08 	bl	8003610 <HAL_TIM_MspPostInit>

}
 8003200:	bf00      	nop
 8003202:	3728      	adds	r7, #40	; 0x28
 8003204:	46bd      	mov	sp, r7
 8003206:	bd80      	pop	{r7, pc}
 8003208:	20000700 	.word	0x20000700

0800320c <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 800320c:	b580      	push	{r7, lr}
 800320e:	b08a      	sub	sp, #40	; 0x28
 8003210:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003212:	f107 0320 	add.w	r3, r7, #32
 8003216:	2200      	movs	r2, #0
 8003218:	601a      	str	r2, [r3, #0]
 800321a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800321c:	1d3b      	adds	r3, r7, #4
 800321e:	2200      	movs	r2, #0
 8003220:	601a      	str	r2, [r3, #0]
 8003222:	605a      	str	r2, [r3, #4]
 8003224:	609a      	str	r2, [r3, #8]
 8003226:	60da      	str	r2, [r3, #12]
 8003228:	611a      	str	r2, [r3, #16]
 800322a:	615a      	str	r2, [r3, #20]
 800322c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800322e:	4b22      	ldr	r3, [pc, #136]	; (80032b8 <MX_TIM3_Init+0xac>)
 8003230:	4a22      	ldr	r2, [pc, #136]	; (80032bc <MX_TIM3_Init+0xb0>)
 8003232:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8003234:	4b20      	ldr	r3, [pc, #128]	; (80032b8 <MX_TIM3_Init+0xac>)
 8003236:	2200      	movs	r2, #0
 8003238:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800323a:	4b1f      	ldr	r3, [pc, #124]	; (80032b8 <MX_TIM3_Init+0xac>)
 800323c:	2200      	movs	r2, #0
 800323e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8003240:	4b1d      	ldr	r3, [pc, #116]	; (80032b8 <MX_TIM3_Init+0xac>)
 8003242:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003246:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003248:	4b1b      	ldr	r3, [pc, #108]	; (80032b8 <MX_TIM3_Init+0xac>)
 800324a:	2200      	movs	r2, #0
 800324c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800324e:	4b1a      	ldr	r3, [pc, #104]	; (80032b8 <MX_TIM3_Init+0xac>)
 8003250:	2200      	movs	r2, #0
 8003252:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8003254:	4818      	ldr	r0, [pc, #96]	; (80032b8 <MX_TIM3_Init+0xac>)
 8003256:	f008 f8e7 	bl	800b428 <HAL_TIM_PWM_Init>
 800325a:	4603      	mov	r3, r0
 800325c:	2b00      	cmp	r3, #0
 800325e:	d001      	beq.n	8003264 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8003260:	f7fe ff74 	bl	800214c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003264:	2300      	movs	r3, #0
 8003266:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003268:	2300      	movs	r3, #0
 800326a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800326c:	f107 0320 	add.w	r3, r7, #32
 8003270:	4619      	mov	r1, r3
 8003272:	4811      	ldr	r0, [pc, #68]	; (80032b8 <MX_TIM3_Init+0xac>)
 8003274:	f008 fd28 	bl	800bcc8 <HAL_TIMEx_MasterConfigSynchronization>
 8003278:	4603      	mov	r3, r0
 800327a:	2b00      	cmp	r3, #0
 800327c:	d001      	beq.n	8003282 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 800327e:	f7fe ff65 	bl	800214c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003282:	2360      	movs	r3, #96	; 0x60
 8003284:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8003286:	2300      	movs	r3, #0
 8003288:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800328a:	2300      	movs	r3, #0
 800328c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800328e:	2300      	movs	r3, #0
 8003290:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8003292:	1d3b      	adds	r3, r7, #4
 8003294:	220c      	movs	r2, #12
 8003296:	4619      	mov	r1, r3
 8003298:	4807      	ldr	r0, [pc, #28]	; (80032b8 <MX_TIM3_Init+0xac>)
 800329a:	f008 f9dd 	bl	800b658 <HAL_TIM_PWM_ConfigChannel>
 800329e:	4603      	mov	r3, r0
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d001      	beq.n	80032a8 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 80032a4:	f7fe ff52 	bl	800214c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80032a8:	4803      	ldr	r0, [pc, #12]	; (80032b8 <MX_TIM3_Init+0xac>)
 80032aa:	f000 f9b1 	bl	8003610 <HAL_TIM_MspPostInit>

}
 80032ae:	bf00      	nop
 80032b0:	3728      	adds	r7, #40	; 0x28
 80032b2:	46bd      	mov	sp, r7
 80032b4:	bd80      	pop	{r7, pc}
 80032b6:	bf00      	nop
 80032b8:	20000748 	.word	0x20000748
 80032bc:	40000400 	.word	0x40000400

080032c0 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 80032c0:	b580      	push	{r7, lr}
 80032c2:	b08a      	sub	sp, #40	; 0x28
 80032c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80032c6:	f107 0320 	add.w	r3, r7, #32
 80032ca:	2200      	movs	r2, #0
 80032cc:	601a      	str	r2, [r3, #0]
 80032ce:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80032d0:	1d3b      	adds	r3, r7, #4
 80032d2:	2200      	movs	r2, #0
 80032d4:	601a      	str	r2, [r3, #0]
 80032d6:	605a      	str	r2, [r3, #4]
 80032d8:	609a      	str	r2, [r3, #8]
 80032da:	60da      	str	r2, [r3, #12]
 80032dc:	611a      	str	r2, [r3, #16]
 80032de:	615a      	str	r2, [r3, #20]
 80032e0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80032e2:	4b22      	ldr	r3, [pc, #136]	; (800336c <MX_TIM5_Init+0xac>)
 80032e4:	4a22      	ldr	r2, [pc, #136]	; (8003370 <MX_TIM5_Init+0xb0>)
 80032e6:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 80032e8:	4b20      	ldr	r3, [pc, #128]	; (800336c <MX_TIM5_Init+0xac>)
 80032ea:	2200      	movs	r2, #0
 80032ec:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80032ee:	4b1f      	ldr	r3, [pc, #124]	; (800336c <MX_TIM5_Init+0xac>)
 80032f0:	2200      	movs	r2, #0
 80032f2:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 80032f4:	4b1d      	ldr	r3, [pc, #116]	; (800336c <MX_TIM5_Init+0xac>)
 80032f6:	f04f 32ff 	mov.w	r2, #4294967295
 80032fa:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80032fc:	4b1b      	ldr	r3, [pc, #108]	; (800336c <MX_TIM5_Init+0xac>)
 80032fe:	2200      	movs	r2, #0
 8003300:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003302:	4b1a      	ldr	r3, [pc, #104]	; (800336c <MX_TIM5_Init+0xac>)
 8003304:	2200      	movs	r2, #0
 8003306:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8003308:	4818      	ldr	r0, [pc, #96]	; (800336c <MX_TIM5_Init+0xac>)
 800330a:	f008 f88d 	bl	800b428 <HAL_TIM_PWM_Init>
 800330e:	4603      	mov	r3, r0
 8003310:	2b00      	cmp	r3, #0
 8003312:	d001      	beq.n	8003318 <MX_TIM5_Init+0x58>
  {
    Error_Handler();
 8003314:	f7fe ff1a 	bl	800214c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003318:	2300      	movs	r3, #0
 800331a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800331c:	2300      	movs	r3, #0
 800331e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8003320:	f107 0320 	add.w	r3, r7, #32
 8003324:	4619      	mov	r1, r3
 8003326:	4811      	ldr	r0, [pc, #68]	; (800336c <MX_TIM5_Init+0xac>)
 8003328:	f008 fcce 	bl	800bcc8 <HAL_TIMEx_MasterConfigSynchronization>
 800332c:	4603      	mov	r3, r0
 800332e:	2b00      	cmp	r3, #0
 8003330:	d001      	beq.n	8003336 <MX_TIM5_Init+0x76>
  {
    Error_Handler();
 8003332:	f7fe ff0b 	bl	800214c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003336:	2360      	movs	r3, #96	; 0x60
 8003338:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800333a:	2300      	movs	r3, #0
 800333c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800333e:	2300      	movs	r3, #0
 8003340:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003342:	2300      	movs	r3, #0
 8003344:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003346:	1d3b      	adds	r3, r7, #4
 8003348:	2204      	movs	r2, #4
 800334a:	4619      	mov	r1, r3
 800334c:	4807      	ldr	r0, [pc, #28]	; (800336c <MX_TIM5_Init+0xac>)
 800334e:	f008 f983 	bl	800b658 <HAL_TIM_PWM_ConfigChannel>
 8003352:	4603      	mov	r3, r0
 8003354:	2b00      	cmp	r3, #0
 8003356:	d001      	beq.n	800335c <MX_TIM5_Init+0x9c>
  {
    Error_Handler();
 8003358:	f7fe fef8 	bl	800214c <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 800335c:	4803      	ldr	r0, [pc, #12]	; (800336c <MX_TIM5_Init+0xac>)
 800335e:	f000 f957 	bl	8003610 <HAL_TIM_MspPostInit>

}
 8003362:	bf00      	nop
 8003364:	3728      	adds	r7, #40	; 0x28
 8003366:	46bd      	mov	sp, r7
 8003368:	bd80      	pop	{r7, pc}
 800336a:	bf00      	nop
 800336c:	20000790 	.word	0x20000790
 8003370:	40000c00 	.word	0x40000c00

08003374 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8003374:	b580      	push	{r7, lr}
 8003376:	b086      	sub	sp, #24
 8003378:	af00      	add	r7, sp, #0
 800337a:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM2)
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003384:	f040 8089 	bne.w	800349a <HAL_TIM_PWM_MspInit+0x126>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003388:	2300      	movs	r3, #0
 800338a:	617b      	str	r3, [r7, #20]
 800338c:	4b95      	ldr	r3, [pc, #596]	; (80035e4 <HAL_TIM_PWM_MspInit+0x270>)
 800338e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003390:	4a94      	ldr	r2, [pc, #592]	; (80035e4 <HAL_TIM_PWM_MspInit+0x270>)
 8003392:	f043 0301 	orr.w	r3, r3, #1
 8003396:	6413      	str	r3, [r2, #64]	; 0x40
 8003398:	4b92      	ldr	r3, [pc, #584]	; (80035e4 <HAL_TIM_PWM_MspInit+0x270>)
 800339a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800339c:	f003 0301 	and.w	r3, r3, #1
 80033a0:	617b      	str	r3, [r7, #20]
 80033a2:	697b      	ldr	r3, [r7, #20]

    /* TIM2 DMA Init */
    /* TIM2_CH1 Init */
    hdma_tim2_ch1.Instance = DMA1_Stream5;
 80033a4:	4b90      	ldr	r3, [pc, #576]	; (80035e8 <HAL_TIM_PWM_MspInit+0x274>)
 80033a6:	4a91      	ldr	r2, [pc, #580]	; (80035ec <HAL_TIM_PWM_MspInit+0x278>)
 80033a8:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch1.Init.Channel = DMA_CHANNEL_3;
 80033aa:	4b8f      	ldr	r3, [pc, #572]	; (80035e8 <HAL_TIM_PWM_MspInit+0x274>)
 80033ac:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 80033b0:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80033b2:	4b8d      	ldr	r3, [pc, #564]	; (80035e8 <HAL_TIM_PWM_MspInit+0x274>)
 80033b4:	2240      	movs	r2, #64	; 0x40
 80033b6:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 80033b8:	4b8b      	ldr	r3, [pc, #556]	; (80035e8 <HAL_TIM_PWM_MspInit+0x274>)
 80033ba:	2200      	movs	r2, #0
 80033bc:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch1.Init.MemInc = DMA_MINC_ENABLE;
 80033be:	4b8a      	ldr	r3, [pc, #552]	; (80035e8 <HAL_TIM_PWM_MspInit+0x274>)
 80033c0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80033c4:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80033c6:	4b88      	ldr	r3, [pc, #544]	; (80035e8 <HAL_TIM_PWM_MspInit+0x274>)
 80033c8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80033cc:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80033ce:	4b86      	ldr	r3, [pc, #536]	; (80035e8 <HAL_TIM_PWM_MspInit+0x274>)
 80033d0:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80033d4:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch1.Init.Mode = DMA_NORMAL;
 80033d6:	4b84      	ldr	r3, [pc, #528]	; (80035e8 <HAL_TIM_PWM_MspInit+0x274>)
 80033d8:	2200      	movs	r2, #0
 80033da:	61da      	str	r2, [r3, #28]
    hdma_tim2_ch1.Init.Priority = DMA_PRIORITY_HIGH;
 80033dc:	4b82      	ldr	r3, [pc, #520]	; (80035e8 <HAL_TIM_PWM_MspInit+0x274>)
 80033de:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80033e2:	621a      	str	r2, [r3, #32]
    hdma_tim2_ch1.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80033e4:	4b80      	ldr	r3, [pc, #512]	; (80035e8 <HAL_TIM_PWM_MspInit+0x274>)
 80033e6:	2204      	movs	r2, #4
 80033e8:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_tim2_ch1.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_1QUARTERFULL;
 80033ea:	4b7f      	ldr	r3, [pc, #508]	; (80035e8 <HAL_TIM_PWM_MspInit+0x274>)
 80033ec:	2200      	movs	r2, #0
 80033ee:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_tim2_ch1.Init.MemBurst = DMA_MBURST_SINGLE;
 80033f0:	4b7d      	ldr	r3, [pc, #500]	; (80035e8 <HAL_TIM_PWM_MspInit+0x274>)
 80033f2:	2200      	movs	r2, #0
 80033f4:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_tim2_ch1.Init.PeriphBurst = DMA_PBURST_SINGLE;
 80033f6:	4b7c      	ldr	r3, [pc, #496]	; (80035e8 <HAL_TIM_PWM_MspInit+0x274>)
 80033f8:	2200      	movs	r2, #0
 80033fa:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_tim2_ch1) != HAL_OK)
 80033fc:	487a      	ldr	r0, [pc, #488]	; (80035e8 <HAL_TIM_PWM_MspInit+0x274>)
 80033fe:	f003 fe1f 	bl	8007040 <HAL_DMA_Init>
 8003402:	4603      	mov	r3, r0
 8003404:	2b00      	cmp	r3, #0
 8003406:	d001      	beq.n	800340c <HAL_TIM_PWM_MspInit+0x98>
    {
      Error_Handler();
 8003408:	f7fe fea0 	bl	800214c <Error_Handler>
    }

    __HAL_LINKDMA(tim_pwmHandle,hdma[TIM_DMA_ID_CC1],hdma_tim2_ch1);
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	4a76      	ldr	r2, [pc, #472]	; (80035e8 <HAL_TIM_PWM_MspInit+0x274>)
 8003410:	625a      	str	r2, [r3, #36]	; 0x24
 8003412:	4a75      	ldr	r2, [pc, #468]	; (80035e8 <HAL_TIM_PWM_MspInit+0x274>)
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	6393      	str	r3, [r2, #56]	; 0x38

    /* TIM2_UP_CH3 Init */
    hdma_tim2_up_ch3.Instance = DMA1_Stream1;
 8003418:	4b75      	ldr	r3, [pc, #468]	; (80035f0 <HAL_TIM_PWM_MspInit+0x27c>)
 800341a:	4a76      	ldr	r2, [pc, #472]	; (80035f4 <HAL_TIM_PWM_MspInit+0x280>)
 800341c:	601a      	str	r2, [r3, #0]
    hdma_tim2_up_ch3.Init.Channel = DMA_CHANNEL_3;
 800341e:	4b74      	ldr	r3, [pc, #464]	; (80035f0 <HAL_TIM_PWM_MspInit+0x27c>)
 8003420:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8003424:	605a      	str	r2, [r3, #4]
    hdma_tim2_up_ch3.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003426:	4b72      	ldr	r3, [pc, #456]	; (80035f0 <HAL_TIM_PWM_MspInit+0x27c>)
 8003428:	2240      	movs	r2, #64	; 0x40
 800342a:	609a      	str	r2, [r3, #8]
    hdma_tim2_up_ch3.Init.PeriphInc = DMA_PINC_DISABLE;
 800342c:	4b70      	ldr	r3, [pc, #448]	; (80035f0 <HAL_TIM_PWM_MspInit+0x27c>)
 800342e:	2200      	movs	r2, #0
 8003430:	60da      	str	r2, [r3, #12]
    hdma_tim2_up_ch3.Init.MemInc = DMA_MINC_ENABLE;
 8003432:	4b6f      	ldr	r3, [pc, #444]	; (80035f0 <HAL_TIM_PWM_MspInit+0x27c>)
 8003434:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003438:	611a      	str	r2, [r3, #16]
    hdma_tim2_up_ch3.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800343a:	4b6d      	ldr	r3, [pc, #436]	; (80035f0 <HAL_TIM_PWM_MspInit+0x27c>)
 800343c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003440:	615a      	str	r2, [r3, #20]
    hdma_tim2_up_ch3.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8003442:	4b6b      	ldr	r3, [pc, #428]	; (80035f0 <HAL_TIM_PWM_MspInit+0x27c>)
 8003444:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003448:	619a      	str	r2, [r3, #24]
    hdma_tim2_up_ch3.Init.Mode = DMA_NORMAL;
 800344a:	4b69      	ldr	r3, [pc, #420]	; (80035f0 <HAL_TIM_PWM_MspInit+0x27c>)
 800344c:	2200      	movs	r2, #0
 800344e:	61da      	str	r2, [r3, #28]
    hdma_tim2_up_ch3.Init.Priority = DMA_PRIORITY_HIGH;
 8003450:	4b67      	ldr	r3, [pc, #412]	; (80035f0 <HAL_TIM_PWM_MspInit+0x27c>)
 8003452:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003456:	621a      	str	r2, [r3, #32]
    hdma_tim2_up_ch3.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8003458:	4b65      	ldr	r3, [pc, #404]	; (80035f0 <HAL_TIM_PWM_MspInit+0x27c>)
 800345a:	2204      	movs	r2, #4
 800345c:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_tim2_up_ch3.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_1QUARTERFULL;
 800345e:	4b64      	ldr	r3, [pc, #400]	; (80035f0 <HAL_TIM_PWM_MspInit+0x27c>)
 8003460:	2200      	movs	r2, #0
 8003462:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_tim2_up_ch3.Init.MemBurst = DMA_MBURST_SINGLE;
 8003464:	4b62      	ldr	r3, [pc, #392]	; (80035f0 <HAL_TIM_PWM_MspInit+0x27c>)
 8003466:	2200      	movs	r2, #0
 8003468:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_tim2_up_ch3.Init.PeriphBurst = DMA_PBURST_SINGLE;
 800346a:	4b61      	ldr	r3, [pc, #388]	; (80035f0 <HAL_TIM_PWM_MspInit+0x27c>)
 800346c:	2200      	movs	r2, #0
 800346e:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_tim2_up_ch3) != HAL_OK)
 8003470:	485f      	ldr	r0, [pc, #380]	; (80035f0 <HAL_TIM_PWM_MspInit+0x27c>)
 8003472:	f003 fde5 	bl	8007040 <HAL_DMA_Init>
 8003476:	4603      	mov	r3, r0
 8003478:	2b00      	cmp	r3, #0
 800347a:	d001      	beq.n	8003480 <HAL_TIM_PWM_MspInit+0x10c>
    {
      Error_Handler();
 800347c:	f7fe fe66 	bl	800214c <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one stream to perform all the requested DMAs. */
    __HAL_LINKDMA(tim_pwmHandle,hdma[TIM_DMA_ID_UPDATE],hdma_tim2_up_ch3);
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	4a5b      	ldr	r2, [pc, #364]	; (80035f0 <HAL_TIM_PWM_MspInit+0x27c>)
 8003484:	621a      	str	r2, [r3, #32]
 8003486:	4a5a      	ldr	r2, [pc, #360]	; (80035f0 <HAL_TIM_PWM_MspInit+0x27c>)
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(tim_pwmHandle,hdma[TIM_DMA_ID_CC3],hdma_tim2_up_ch3);
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	4a58      	ldr	r2, [pc, #352]	; (80035f0 <HAL_TIM_PWM_MspInit+0x27c>)
 8003490:	62da      	str	r2, [r3, #44]	; 0x2c
 8003492:	4a57      	ldr	r2, [pc, #348]	; (80035f0 <HAL_TIM_PWM_MspInit+0x27c>)
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
}
 8003498:	e0a0      	b.n	80035dc <HAL_TIM_PWM_MspInit+0x268>
  else if(tim_pwmHandle->Instance==TIM3)
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	4a56      	ldr	r2, [pc, #344]	; (80035f8 <HAL_TIM_PWM_MspInit+0x284>)
 80034a0:	4293      	cmp	r3, r2
 80034a2:	d14e      	bne.n	8003542 <HAL_TIM_PWM_MspInit+0x1ce>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80034a4:	2300      	movs	r3, #0
 80034a6:	613b      	str	r3, [r7, #16]
 80034a8:	4b4e      	ldr	r3, [pc, #312]	; (80035e4 <HAL_TIM_PWM_MspInit+0x270>)
 80034aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034ac:	4a4d      	ldr	r2, [pc, #308]	; (80035e4 <HAL_TIM_PWM_MspInit+0x270>)
 80034ae:	f043 0302 	orr.w	r3, r3, #2
 80034b2:	6413      	str	r3, [r2, #64]	; 0x40
 80034b4:	4b4b      	ldr	r3, [pc, #300]	; (80035e4 <HAL_TIM_PWM_MspInit+0x270>)
 80034b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034b8:	f003 0302 	and.w	r3, r3, #2
 80034bc:	613b      	str	r3, [r7, #16]
 80034be:	693b      	ldr	r3, [r7, #16]
    hdma_tim3_ch4_up.Instance = DMA1_Stream2;
 80034c0:	4b4e      	ldr	r3, [pc, #312]	; (80035fc <HAL_TIM_PWM_MspInit+0x288>)
 80034c2:	4a4f      	ldr	r2, [pc, #316]	; (8003600 <HAL_TIM_PWM_MspInit+0x28c>)
 80034c4:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch4_up.Init.Channel = DMA_CHANNEL_5;
 80034c6:	4b4d      	ldr	r3, [pc, #308]	; (80035fc <HAL_TIM_PWM_MspInit+0x288>)
 80034c8:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 80034cc:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch4_up.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80034ce:	4b4b      	ldr	r3, [pc, #300]	; (80035fc <HAL_TIM_PWM_MspInit+0x288>)
 80034d0:	2240      	movs	r2, #64	; 0x40
 80034d2:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch4_up.Init.PeriphInc = DMA_PINC_DISABLE;
 80034d4:	4b49      	ldr	r3, [pc, #292]	; (80035fc <HAL_TIM_PWM_MspInit+0x288>)
 80034d6:	2200      	movs	r2, #0
 80034d8:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch4_up.Init.MemInc = DMA_MINC_ENABLE;
 80034da:	4b48      	ldr	r3, [pc, #288]	; (80035fc <HAL_TIM_PWM_MspInit+0x288>)
 80034dc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80034e0:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch4_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80034e2:	4b46      	ldr	r3, [pc, #280]	; (80035fc <HAL_TIM_PWM_MspInit+0x288>)
 80034e4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80034e8:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch4_up.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80034ea:	4b44      	ldr	r3, [pc, #272]	; (80035fc <HAL_TIM_PWM_MspInit+0x288>)
 80034ec:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80034f0:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch4_up.Init.Mode = DMA_NORMAL;
 80034f2:	4b42      	ldr	r3, [pc, #264]	; (80035fc <HAL_TIM_PWM_MspInit+0x288>)
 80034f4:	2200      	movs	r2, #0
 80034f6:	61da      	str	r2, [r3, #28]
    hdma_tim3_ch4_up.Init.Priority = DMA_PRIORITY_HIGH;
 80034f8:	4b40      	ldr	r3, [pc, #256]	; (80035fc <HAL_TIM_PWM_MspInit+0x288>)
 80034fa:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80034fe:	621a      	str	r2, [r3, #32]
    hdma_tim3_ch4_up.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8003500:	4b3e      	ldr	r3, [pc, #248]	; (80035fc <HAL_TIM_PWM_MspInit+0x288>)
 8003502:	2204      	movs	r2, #4
 8003504:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_tim3_ch4_up.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_1QUARTERFULL;
 8003506:	4b3d      	ldr	r3, [pc, #244]	; (80035fc <HAL_TIM_PWM_MspInit+0x288>)
 8003508:	2200      	movs	r2, #0
 800350a:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_tim3_ch4_up.Init.MemBurst = DMA_MBURST_SINGLE;
 800350c:	4b3b      	ldr	r3, [pc, #236]	; (80035fc <HAL_TIM_PWM_MspInit+0x288>)
 800350e:	2200      	movs	r2, #0
 8003510:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_tim3_ch4_up.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8003512:	4b3a      	ldr	r3, [pc, #232]	; (80035fc <HAL_TIM_PWM_MspInit+0x288>)
 8003514:	2200      	movs	r2, #0
 8003516:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_tim3_ch4_up) != HAL_OK)
 8003518:	4838      	ldr	r0, [pc, #224]	; (80035fc <HAL_TIM_PWM_MspInit+0x288>)
 800351a:	f003 fd91 	bl	8007040 <HAL_DMA_Init>
 800351e:	4603      	mov	r3, r0
 8003520:	2b00      	cmp	r3, #0
 8003522:	d001      	beq.n	8003528 <HAL_TIM_PWM_MspInit+0x1b4>
      Error_Handler();
 8003524:	f7fe fe12 	bl	800214c <Error_Handler>
    __HAL_LINKDMA(tim_pwmHandle,hdma[TIM_DMA_ID_CC4],hdma_tim3_ch4_up);
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	4a34      	ldr	r2, [pc, #208]	; (80035fc <HAL_TIM_PWM_MspInit+0x288>)
 800352c:	631a      	str	r2, [r3, #48]	; 0x30
 800352e:	4a33      	ldr	r2, [pc, #204]	; (80035fc <HAL_TIM_PWM_MspInit+0x288>)
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(tim_pwmHandle,hdma[TIM_DMA_ID_UPDATE],hdma_tim3_ch4_up);
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	4a31      	ldr	r2, [pc, #196]	; (80035fc <HAL_TIM_PWM_MspInit+0x288>)
 8003538:	621a      	str	r2, [r3, #32]
 800353a:	4a30      	ldr	r2, [pc, #192]	; (80035fc <HAL_TIM_PWM_MspInit+0x288>)
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	6393      	str	r3, [r2, #56]	; 0x38
}
 8003540:	e04c      	b.n	80035dc <HAL_TIM_PWM_MspInit+0x268>
  else if(tim_pwmHandle->Instance==TIM5)
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	4a2f      	ldr	r2, [pc, #188]	; (8003604 <HAL_TIM_PWM_MspInit+0x290>)
 8003548:	4293      	cmp	r3, r2
 800354a:	d147      	bne.n	80035dc <HAL_TIM_PWM_MspInit+0x268>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800354c:	2300      	movs	r3, #0
 800354e:	60fb      	str	r3, [r7, #12]
 8003550:	4b24      	ldr	r3, [pc, #144]	; (80035e4 <HAL_TIM_PWM_MspInit+0x270>)
 8003552:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003554:	4a23      	ldr	r2, [pc, #140]	; (80035e4 <HAL_TIM_PWM_MspInit+0x270>)
 8003556:	f043 0308 	orr.w	r3, r3, #8
 800355a:	6413      	str	r3, [r2, #64]	; 0x40
 800355c:	4b21      	ldr	r3, [pc, #132]	; (80035e4 <HAL_TIM_PWM_MspInit+0x270>)
 800355e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003560:	f003 0308 	and.w	r3, r3, #8
 8003564:	60fb      	str	r3, [r7, #12]
 8003566:	68fb      	ldr	r3, [r7, #12]
    hdma_tim5_ch2.Instance = DMA1_Stream4;
 8003568:	4b27      	ldr	r3, [pc, #156]	; (8003608 <HAL_TIM_PWM_MspInit+0x294>)
 800356a:	4a28      	ldr	r2, [pc, #160]	; (800360c <HAL_TIM_PWM_MspInit+0x298>)
 800356c:	601a      	str	r2, [r3, #0]
    hdma_tim5_ch2.Init.Channel = DMA_CHANNEL_6;
 800356e:	4b26      	ldr	r3, [pc, #152]	; (8003608 <HAL_TIM_PWM_MspInit+0x294>)
 8003570:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 8003574:	605a      	str	r2, [r3, #4]
    hdma_tim5_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003576:	4b24      	ldr	r3, [pc, #144]	; (8003608 <HAL_TIM_PWM_MspInit+0x294>)
 8003578:	2240      	movs	r2, #64	; 0x40
 800357a:	609a      	str	r2, [r3, #8]
    hdma_tim5_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 800357c:	4b22      	ldr	r3, [pc, #136]	; (8003608 <HAL_TIM_PWM_MspInit+0x294>)
 800357e:	2200      	movs	r2, #0
 8003580:	60da      	str	r2, [r3, #12]
    hdma_tim5_ch2.Init.MemInc = DMA_MINC_ENABLE;
 8003582:	4b21      	ldr	r3, [pc, #132]	; (8003608 <HAL_TIM_PWM_MspInit+0x294>)
 8003584:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003588:	611a      	str	r2, [r3, #16]
    hdma_tim5_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800358a:	4b1f      	ldr	r3, [pc, #124]	; (8003608 <HAL_TIM_PWM_MspInit+0x294>)
 800358c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003590:	615a      	str	r2, [r3, #20]
    hdma_tim5_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8003592:	4b1d      	ldr	r3, [pc, #116]	; (8003608 <HAL_TIM_PWM_MspInit+0x294>)
 8003594:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003598:	619a      	str	r2, [r3, #24]
    hdma_tim5_ch2.Init.Mode = DMA_NORMAL;
 800359a:	4b1b      	ldr	r3, [pc, #108]	; (8003608 <HAL_TIM_PWM_MspInit+0x294>)
 800359c:	2200      	movs	r2, #0
 800359e:	61da      	str	r2, [r3, #28]
    hdma_tim5_ch2.Init.Priority = DMA_PRIORITY_HIGH;
 80035a0:	4b19      	ldr	r3, [pc, #100]	; (8003608 <HAL_TIM_PWM_MspInit+0x294>)
 80035a2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80035a6:	621a      	str	r2, [r3, #32]
    hdma_tim5_ch2.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80035a8:	4b17      	ldr	r3, [pc, #92]	; (8003608 <HAL_TIM_PWM_MspInit+0x294>)
 80035aa:	2204      	movs	r2, #4
 80035ac:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_tim5_ch2.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_1QUARTERFULL;
 80035ae:	4b16      	ldr	r3, [pc, #88]	; (8003608 <HAL_TIM_PWM_MspInit+0x294>)
 80035b0:	2200      	movs	r2, #0
 80035b2:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_tim5_ch2.Init.MemBurst = DMA_MBURST_SINGLE;
 80035b4:	4b14      	ldr	r3, [pc, #80]	; (8003608 <HAL_TIM_PWM_MspInit+0x294>)
 80035b6:	2200      	movs	r2, #0
 80035b8:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_tim5_ch2.Init.PeriphBurst = DMA_PBURST_SINGLE;
 80035ba:	4b13      	ldr	r3, [pc, #76]	; (8003608 <HAL_TIM_PWM_MspInit+0x294>)
 80035bc:	2200      	movs	r2, #0
 80035be:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_tim5_ch2) != HAL_OK)
 80035c0:	4811      	ldr	r0, [pc, #68]	; (8003608 <HAL_TIM_PWM_MspInit+0x294>)
 80035c2:	f003 fd3d 	bl	8007040 <HAL_DMA_Init>
 80035c6:	4603      	mov	r3, r0
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d001      	beq.n	80035d0 <HAL_TIM_PWM_MspInit+0x25c>
      Error_Handler();
 80035cc:	f7fe fdbe 	bl	800214c <Error_Handler>
    __HAL_LINKDMA(tim_pwmHandle,hdma[TIM_DMA_ID_CC2],hdma_tim5_ch2);
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	4a0d      	ldr	r2, [pc, #52]	; (8003608 <HAL_TIM_PWM_MspInit+0x294>)
 80035d4:	629a      	str	r2, [r3, #40]	; 0x28
 80035d6:	4a0c      	ldr	r2, [pc, #48]	; (8003608 <HAL_TIM_PWM_MspInit+0x294>)
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	6393      	str	r3, [r2, #56]	; 0x38
}
 80035dc:	bf00      	nop
 80035de:	3718      	adds	r7, #24
 80035e0:	46bd      	mov	sp, r7
 80035e2:	bd80      	pop	{r7, pc}
 80035e4:	40023800 	.word	0x40023800
 80035e8:	200007d8 	.word	0x200007d8
 80035ec:	40026088 	.word	0x40026088
 80035f0:	20000838 	.word	0x20000838
 80035f4:	40026028 	.word	0x40026028
 80035f8:	40000400 	.word	0x40000400
 80035fc:	20000898 	.word	0x20000898
 8003600:	40026040 	.word	0x40026040
 8003604:	40000c00 	.word	0x40000c00
 8003608:	200008f8 	.word	0x200008f8
 800360c:	40026070 	.word	0x40026070

08003610 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8003610:	b580      	push	{r7, lr}
 8003612:	b08c      	sub	sp, #48	; 0x30
 8003614:	af00      	add	r7, sp, #0
 8003616:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003618:	f107 031c 	add.w	r3, r7, #28
 800361c:	2200      	movs	r2, #0
 800361e:	601a      	str	r2, [r3, #0]
 8003620:	605a      	str	r2, [r3, #4]
 8003622:	609a      	str	r2, [r3, #8]
 8003624:	60da      	str	r2, [r3, #12]
 8003626:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003630:	d13d      	bne.n	80036ae <HAL_TIM_MspPostInit+0x9e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003632:	2300      	movs	r3, #0
 8003634:	61bb      	str	r3, [r7, #24]
 8003636:	4b43      	ldr	r3, [pc, #268]	; (8003744 <HAL_TIM_MspPostInit+0x134>)
 8003638:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800363a:	4a42      	ldr	r2, [pc, #264]	; (8003744 <HAL_TIM_MspPostInit+0x134>)
 800363c:	f043 0301 	orr.w	r3, r3, #1
 8003640:	6313      	str	r3, [r2, #48]	; 0x30
 8003642:	4b40      	ldr	r3, [pc, #256]	; (8003744 <HAL_TIM_MspPostInit+0x134>)
 8003644:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003646:	f003 0301 	and.w	r3, r3, #1
 800364a:	61bb      	str	r3, [r7, #24]
 800364c:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800364e:	2300      	movs	r3, #0
 8003650:	617b      	str	r3, [r7, #20]
 8003652:	4b3c      	ldr	r3, [pc, #240]	; (8003744 <HAL_TIM_MspPostInit+0x134>)
 8003654:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003656:	4a3b      	ldr	r2, [pc, #236]	; (8003744 <HAL_TIM_MspPostInit+0x134>)
 8003658:	f043 0302 	orr.w	r3, r3, #2
 800365c:	6313      	str	r3, [r2, #48]	; 0x30
 800365e:	4b39      	ldr	r3, [pc, #228]	; (8003744 <HAL_TIM_MspPostInit+0x134>)
 8003660:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003662:	f003 0302 	and.w	r3, r3, #2
 8003666:	617b      	str	r3, [r7, #20]
 8003668:	697b      	ldr	r3, [r7, #20]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PB10     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800366a:	2301      	movs	r3, #1
 800366c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800366e:	2302      	movs	r3, #2
 8003670:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003672:	2300      	movs	r3, #0
 8003674:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003676:	2300      	movs	r3, #0
 8003678:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800367a:	2301      	movs	r3, #1
 800367c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800367e:	f107 031c 	add.w	r3, r7, #28
 8003682:	4619      	mov	r1, r3
 8003684:	4830      	ldr	r0, [pc, #192]	; (8003748 <HAL_TIM_MspPostInit+0x138>)
 8003686:	f004 f84b 	bl	8007720 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800368a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800368e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003690:	2302      	movs	r3, #2
 8003692:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003694:	2300      	movs	r3, #0
 8003696:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003698:	2300      	movs	r3, #0
 800369a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800369c:	2301      	movs	r3, #1
 800369e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80036a0:	f107 031c 	add.w	r3, r7, #28
 80036a4:	4619      	mov	r1, r3
 80036a6:	4829      	ldr	r0, [pc, #164]	; (800374c <HAL_TIM_MspPostInit+0x13c>)
 80036a8:	f004 f83a 	bl	8007720 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 80036ac:	e046      	b.n	800373c <HAL_TIM_MspPostInit+0x12c>
  else if(timHandle->Instance==TIM3)
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	4a27      	ldr	r2, [pc, #156]	; (8003750 <HAL_TIM_MspPostInit+0x140>)
 80036b4:	4293      	cmp	r3, r2
 80036b6:	d11e      	bne.n	80036f6 <HAL_TIM_MspPostInit+0xe6>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80036b8:	2300      	movs	r3, #0
 80036ba:	613b      	str	r3, [r7, #16]
 80036bc:	4b21      	ldr	r3, [pc, #132]	; (8003744 <HAL_TIM_MspPostInit+0x134>)
 80036be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036c0:	4a20      	ldr	r2, [pc, #128]	; (8003744 <HAL_TIM_MspPostInit+0x134>)
 80036c2:	f043 0302 	orr.w	r3, r3, #2
 80036c6:	6313      	str	r3, [r2, #48]	; 0x30
 80036c8:	4b1e      	ldr	r3, [pc, #120]	; (8003744 <HAL_TIM_MspPostInit+0x134>)
 80036ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036cc:	f003 0302 	and.w	r3, r3, #2
 80036d0:	613b      	str	r3, [r7, #16]
 80036d2:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80036d4:	2302      	movs	r3, #2
 80036d6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036d8:	2302      	movs	r3, #2
 80036da:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036dc:	2300      	movs	r3, #0
 80036de:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80036e0:	2300      	movs	r3, #0
 80036e2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80036e4:	2302      	movs	r3, #2
 80036e6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80036e8:	f107 031c 	add.w	r3, r7, #28
 80036ec:	4619      	mov	r1, r3
 80036ee:	4817      	ldr	r0, [pc, #92]	; (800374c <HAL_TIM_MspPostInit+0x13c>)
 80036f0:	f004 f816 	bl	8007720 <HAL_GPIO_Init>
}
 80036f4:	e022      	b.n	800373c <HAL_TIM_MspPostInit+0x12c>
  else if(timHandle->Instance==TIM5)
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	4a16      	ldr	r2, [pc, #88]	; (8003754 <HAL_TIM_MspPostInit+0x144>)
 80036fc:	4293      	cmp	r3, r2
 80036fe:	d11d      	bne.n	800373c <HAL_TIM_MspPostInit+0x12c>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003700:	2300      	movs	r3, #0
 8003702:	60fb      	str	r3, [r7, #12]
 8003704:	4b0f      	ldr	r3, [pc, #60]	; (8003744 <HAL_TIM_MspPostInit+0x134>)
 8003706:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003708:	4a0e      	ldr	r2, [pc, #56]	; (8003744 <HAL_TIM_MspPostInit+0x134>)
 800370a:	f043 0301 	orr.w	r3, r3, #1
 800370e:	6313      	str	r3, [r2, #48]	; 0x30
 8003710:	4b0c      	ldr	r3, [pc, #48]	; (8003744 <HAL_TIM_MspPostInit+0x134>)
 8003712:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003714:	f003 0301 	and.w	r3, r3, #1
 8003718:	60fb      	str	r3, [r7, #12]
 800371a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800371c:	2302      	movs	r3, #2
 800371e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003720:	2302      	movs	r3, #2
 8003722:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003724:	2300      	movs	r3, #0
 8003726:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003728:	2300      	movs	r3, #0
 800372a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 800372c:	2302      	movs	r3, #2
 800372e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003730:	f107 031c 	add.w	r3, r7, #28
 8003734:	4619      	mov	r1, r3
 8003736:	4804      	ldr	r0, [pc, #16]	; (8003748 <HAL_TIM_MspPostInit+0x138>)
 8003738:	f003 fff2 	bl	8007720 <HAL_GPIO_Init>
}
 800373c:	bf00      	nop
 800373e:	3730      	adds	r7, #48	; 0x30
 8003740:	46bd      	mov	sp, r7
 8003742:	bd80      	pop	{r7, pc}
 8003744:	40023800 	.word	0x40023800
 8003748:	40020000 	.word	0x40020000
 800374c:	40020400 	.word	0x40020400
 8003750:	40000400 	.word	0x40000400
 8003754:	40000c00 	.word	0x40000c00

08003758 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8003758:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003790 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800375c:	480d      	ldr	r0, [pc, #52]	; (8003794 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800375e:	490e      	ldr	r1, [pc, #56]	; (8003798 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003760:	4a0e      	ldr	r2, [pc, #56]	; (800379c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003762:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003764:	e002      	b.n	800376c <LoopCopyDataInit>

08003766 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003766:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003768:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800376a:	3304      	adds	r3, #4

0800376c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800376c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800376e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003770:	d3f9      	bcc.n	8003766 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003772:	4a0b      	ldr	r2, [pc, #44]	; (80037a0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003774:	4c0b      	ldr	r4, [pc, #44]	; (80037a4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8003776:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003778:	e001      	b.n	800377e <LoopFillZerobss>

0800377a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800377a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800377c:	3204      	adds	r2, #4

0800377e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800377e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003780:	d3fb      	bcc.n	800377a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8003782:	f7ff fccf 	bl	8003124 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003786:	f00c fcf5 	bl	8010174 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800378a:	f7fe fbd3 	bl	8001f34 <main>
  bx  lr    
 800378e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003790:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003794:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003798:	200003d8 	.word	0x200003d8
  ldr r2, =_sidata
 800379c:	08014f40 	.word	0x08014f40
  ldr r2, =_sbss
 80037a0:	200003d8 	.word	0x200003d8
  ldr r4, =_ebss
 80037a4:	20002660 	.word	0x20002660

080037a8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80037a8:	e7fe      	b.n	80037a8 <ADC_IRQHandler>
	...

080037ac <LSM303AGR_ACC_RegisterBusIO>:
  * @brief  Register Component Bus IO operations
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM303AGR_ACC_RegisterBusIO(LSM303AGR_ACC_Object_t *pObj, LSM303AGR_IO_t *pIO)
{
 80037ac:	b580      	push	{r7, lr}
 80037ae:	b084      	sub	sp, #16
 80037b0:	af00      	add	r7, sp, #0
 80037b2:	6078      	str	r0, [r7, #4]
 80037b4:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM303AGR_OK;
 80037b6:	2300      	movs	r3, #0
 80037b8:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d103      	bne.n	80037c8 <LSM303AGR_ACC_RegisterBusIO+0x1c>
  {
    ret = LSM303AGR_ERROR;
 80037c0:	f04f 33ff 	mov.w	r3, #4294967295
 80037c4:	60fb      	str	r3, [r7, #12]
 80037c6:	e051      	b.n	800386c <LSM303AGR_ACC_RegisterBusIO+0xc0>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 80037c8:	683b      	ldr	r3, [r7, #0]
 80037ca:	681a      	ldr	r2, [r3, #0]
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 80037d0:	683b      	ldr	r3, [r7, #0]
 80037d2:	685a      	ldr	r2, [r3, #4]
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 80037d8:	683b      	ldr	r3, [r7, #0]
 80037da:	689a      	ldr	r2, [r3, #8]
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 80037e0:	683b      	ldr	r3, [r7, #0]
 80037e2:	7b1a      	ldrb	r2, [r3, #12]
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 80037e8:	683b      	ldr	r3, [r7, #0]
 80037ea:	691a      	ldr	r2, [r3, #16]
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 80037f0:	683b      	ldr	r3, [r7, #0]
 80037f2:	695a      	ldr	r2, [r3, #20]
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 80037f8:	683b      	ldr	r3, [r7, #0]
 80037fa:	699a      	ldr	r2, [r3, #24]
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadAccRegWrap;
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	4a1d      	ldr	r2, [pc, #116]	; (8003878 <LSM303AGR_ACC_RegisterBusIO+0xcc>)
 8003804:	625a      	str	r2, [r3, #36]	; 0x24
    pObj->Ctx.write_reg = WriteAccRegWrap;
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	4a1c      	ldr	r2, [pc, #112]	; (800387c <LSM303AGR_ACC_RegisterBusIO+0xd0>)
 800380a:	621a      	str	r2, [r3, #32]
    pObj->Ctx.mdelay    = pIO->Delay;
 800380c:	683b      	ldr	r3, [r7, #0]
 800380e:	69da      	ldr	r2, [r3, #28]
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	629a      	str	r2, [r3, #40]	; 0x28
    pObj->Ctx.handle    = pObj;
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	687a      	ldr	r2, [r7, #4]
 8003818:	62da      	str	r2, [r3, #44]	; 0x2c

    if (pObj->IO.Init == NULL)
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	2b00      	cmp	r3, #0
 8003820:	d103      	bne.n	800382a <LSM303AGR_ACC_RegisterBusIO+0x7e>
    {
      ret = LSM303AGR_ERROR;
 8003822:	f04f 33ff 	mov.w	r3, #4294967295
 8003826:	60fb      	str	r3, [r7, #12]
 8003828:	e020      	b.n	800386c <LSM303AGR_ACC_RegisterBusIO+0xc0>
    }
    else if (pObj->IO.Init() != LSM303AGR_OK)
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	4798      	blx	r3
 8003830:	4603      	mov	r3, r0
 8003832:	2b00      	cmp	r3, #0
 8003834:	d003      	beq.n	800383e <LSM303AGR_ACC_RegisterBusIO+0x92>
    {
      ret = LSM303AGR_ERROR;
 8003836:	f04f 33ff 	mov.w	r3, #4294967295
 800383a:	60fb      	str	r3, [r7, #12]
 800383c:	e016      	b.n	800386c <LSM303AGR_ACC_RegisterBusIO+0xc0>
    }
    else
    {
      if (pObj->IO.BusType == LSM303AGR_SPI_3WIRES_BUS) /* SPI 3-Wires */
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	689b      	ldr	r3, [r3, #8]
 8003842:	2b01      	cmp	r3, #1
 8003844:	d112      	bne.n	800386c <LSM303AGR_ACC_RegisterBusIO+0xc0>
      {
        /* Enable the SPI 3-Wires support only the first time */
        if (pObj->is_initialized == 0U)
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800384c:	2b00      	cmp	r3, #0
 800384e:	d10d      	bne.n	800386c <LSM303AGR_ACC_RegisterBusIO+0xc0>
        {
          /* Enable SPI 3-Wires on the component */
          uint8_t data = 0x01;
 8003850:	2301      	movs	r3, #1
 8003852:	72fb      	strb	r3, [r7, #11]

          if (LSM303AGR_ACC_Write_Reg(pObj, LSM303AGR_CTRL_REG4_A, data) != LSM303AGR_OK)
 8003854:	7afb      	ldrb	r3, [r7, #11]
 8003856:	461a      	mov	r2, r3
 8003858:	2123      	movs	r1, #35	; 0x23
 800385a:	6878      	ldr	r0, [r7, #4]
 800385c:	f000 fb55 	bl	8003f0a <LSM303AGR_ACC_Write_Reg>
 8003860:	4603      	mov	r3, r0
 8003862:	2b00      	cmp	r3, #0
 8003864:	d002      	beq.n	800386c <LSM303AGR_ACC_RegisterBusIO+0xc0>
          {
            return LSM303AGR_ERROR;
 8003866:	f04f 33ff 	mov.w	r3, #4294967295
 800386a:	e000      	b.n	800386e <LSM303AGR_ACC_RegisterBusIO+0xc2>
        }
      }
    }
  }

  return ret;
 800386c:	68fb      	ldr	r3, [r7, #12]
}
 800386e:	4618      	mov	r0, r3
 8003870:	3710      	adds	r7, #16
 8003872:	46bd      	mov	sp, r7
 8003874:	bd80      	pop	{r7, pc}
 8003876:	bf00      	nop
 8003878:	08004719 	.word	0x08004719
 800387c:	0800477b 	.word	0x0800477b

08003880 <LSM303AGR_ACC_Init>:
  * @brief  Initialize the LSM303AGR sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM303AGR_ACC_Init(LSM303AGR_ACC_Object_t *pObj)
{
 8003880:	b580      	push	{r7, lr}
 8003882:	b082      	sub	sp, #8
 8003884:	af00      	add	r7, sp, #0
 8003886:	6078      	str	r0, [r7, #4]
  /* Enable BDU */
  if (lsm303agr_xl_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM303AGR_OK)
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	3320      	adds	r3, #32
 800388c:	2101      	movs	r1, #1
 800388e:	4618      	mov	r0, r3
 8003890:	f001 f94a 	bl	8004b28 <lsm303agr_xl_block_data_update_set>
 8003894:	4603      	mov	r3, r0
 8003896:	2b00      	cmp	r3, #0
 8003898:	d002      	beq.n	80038a0 <LSM303AGR_ACC_Init+0x20>
  {
    return LSM303AGR_ERROR;
 800389a:	f04f 33ff 	mov.w	r3, #4294967295
 800389e:	e02c      	b.n	80038fa <LSM303AGR_ACC_Init+0x7a>
  }

  /* FIFO mode selection */
  if (lsm303agr_xl_fifo_mode_set(&(pObj->Ctx), LSM303AGR_BYPASS_MODE) != LSM303AGR_OK)
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	3320      	adds	r3, #32
 80038a4:	2100      	movs	r1, #0
 80038a6:	4618      	mov	r0, r3
 80038a8:	f001 faed 	bl	8004e86 <lsm303agr_xl_fifo_mode_set>
 80038ac:	4603      	mov	r3, r0
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d002      	beq.n	80038b8 <LSM303AGR_ACC_Init+0x38>
  {
    return LSM303AGR_ERROR;
 80038b2:	f04f 33ff 	mov.w	r3, #4294967295
 80038b6:	e020      	b.n	80038fa <LSM303AGR_ACC_Init+0x7a>
  }

  /* Select default output data rate. */
  pObj->acc_odr = LSM303AGR_XL_ODR_100Hz;
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	2205      	movs	r2, #5
 80038bc:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32

  /* Output data rate selection - power down. */
  if (lsm303agr_xl_data_rate_set(&(pObj->Ctx), LSM303AGR_XL_POWER_DOWN) != LSM303AGR_OK)
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	3320      	adds	r3, #32
 80038c4:	2100      	movs	r1, #0
 80038c6:	4618      	mov	r0, r3
 80038c8:	f001 f84e 	bl	8004968 <lsm303agr_xl_data_rate_set>
 80038cc:	4603      	mov	r3, r0
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d002      	beq.n	80038d8 <LSM303AGR_ACC_Init+0x58>
  {
    return LSM303AGR_ERROR;
 80038d2:	f04f 33ff 	mov.w	r3, #4294967295
 80038d6:	e010      	b.n	80038fa <LSM303AGR_ACC_Init+0x7a>
  }

  /* Full scale selection. */
  if (lsm303agr_xl_full_scale_set(&(pObj->Ctx), LSM303AGR_2g) != LSM303AGR_OK)
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	3320      	adds	r3, #32
 80038dc:	2100      	movs	r1, #0
 80038de:	4618      	mov	r0, r3
 80038e0:	f001 f8c4 	bl	8004a6c <lsm303agr_xl_full_scale_set>
 80038e4:	4603      	mov	r3, r0
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d002      	beq.n	80038f0 <LSM303AGR_ACC_Init+0x70>
  {
    return LSM303AGR_ERROR;
 80038ea:	f04f 33ff 	mov.w	r3, #4294967295
 80038ee:	e004      	b.n	80038fa <LSM303AGR_ACC_Init+0x7a>
  }

  pObj->is_initialized = 1;
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	2201      	movs	r2, #1
 80038f4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return LSM303AGR_OK;
 80038f8:	2300      	movs	r3, #0
}
 80038fa:	4618      	mov	r0, r3
 80038fc:	3708      	adds	r7, #8
 80038fe:	46bd      	mov	sp, r7
 8003900:	bd80      	pop	{r7, pc}

08003902 <LSM303AGR_ACC_DeInit>:
  * @brief  Deinitialize the LSM303AGR accelerometer sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM303AGR_ACC_DeInit(LSM303AGR_ACC_Object_t *pObj)
{
 8003902:	b580      	push	{r7, lr}
 8003904:	b082      	sub	sp, #8
 8003906:	af00      	add	r7, sp, #0
 8003908:	6078      	str	r0, [r7, #4]
  /* Disable the component */
  if (LSM303AGR_ACC_Disable(pObj) != LSM303AGR_OK)
 800390a:	6878      	ldr	r0, [r7, #4]
 800390c:	f000 f87c 	bl	8003a08 <LSM303AGR_ACC_Disable>
 8003910:	4603      	mov	r3, r0
 8003912:	2b00      	cmp	r3, #0
 8003914:	d002      	beq.n	800391c <LSM303AGR_ACC_DeInit+0x1a>
  {
    return LSM303AGR_ERROR;
 8003916:	f04f 33ff 	mov.w	r3, #4294967295
 800391a:	e008      	b.n	800392e <LSM303AGR_ACC_DeInit+0x2c>
  }

  /* Reset output data rate. */
  pObj->acc_odr = LSM303AGR_XL_POWER_DOWN;
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	2200      	movs	r2, #0
 8003920:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
  pObj->is_initialized = 0;
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	2200      	movs	r2, #0
 8003928:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return LSM303AGR_OK;
 800392c:	2300      	movs	r3, #0
}
 800392e:	4618      	mov	r0, r3
 8003930:	3708      	adds	r7, #8
 8003932:	46bd      	mov	sp, r7
 8003934:	bd80      	pop	{r7, pc}

08003936 <LSM303AGR_ACC_ReadID>:
  * @param  pObj the device pObj
  * @param  Id the WHO_AM_I value
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM303AGR_ACC_ReadID(LSM303AGR_ACC_Object_t *pObj, uint8_t *Id)
{
 8003936:	b580      	push	{r7, lr}
 8003938:	b082      	sub	sp, #8
 800393a:	af00      	add	r7, sp, #0
 800393c:	6078      	str	r0, [r7, #4]
 800393e:	6039      	str	r1, [r7, #0]
  if (lsm303agr_xl_device_id_get(&(pObj->Ctx), Id) != LSM303AGR_OK)
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	3320      	adds	r3, #32
 8003944:	6839      	ldr	r1, [r7, #0]
 8003946:	4618      	mov	r0, r3
 8003948:	f001 fa55 	bl	8004df6 <lsm303agr_xl_device_id_get>
 800394c:	4603      	mov	r3, r0
 800394e:	2b00      	cmp	r3, #0
 8003950:	d002      	beq.n	8003958 <LSM303AGR_ACC_ReadID+0x22>
  {
    return LSM303AGR_ERROR;
 8003952:	f04f 33ff 	mov.w	r3, #4294967295
 8003956:	e000      	b.n	800395a <LSM303AGR_ACC_ReadID+0x24>
  }

  return LSM303AGR_OK;
 8003958:	2300      	movs	r3, #0
}
 800395a:	4618      	mov	r0, r3
 800395c:	3708      	adds	r7, #8
 800395e:	46bd      	mov	sp, r7
 8003960:	bd80      	pop	{r7, pc}
	...

08003964 <LSM303AGR_ACC_GetCapabilities>:
  * @param  pObj Component object pointer
  * @param  Capabilities pointer to LSM303AGR accelerometer sensor capabilities
  * @retval Component status
  */
int32_t LSM303AGR_ACC_GetCapabilities(LSM303AGR_ACC_Object_t *pObj, LSM303AGR_Capabilities_t *Capabilities)
{
 8003964:	b480      	push	{r7}
 8003966:	b083      	sub	sp, #12
 8003968:	af00      	add	r7, sp, #0
 800396a:	6078      	str	r0, [r7, #4]
 800396c:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Acc          = 1;
 800396e:	683b      	ldr	r3, [r7, #0]
 8003970:	2201      	movs	r2, #1
 8003972:	701a      	strb	r2, [r3, #0]
  Capabilities->Gyro         = 0;
 8003974:	683b      	ldr	r3, [r7, #0]
 8003976:	2200      	movs	r2, #0
 8003978:	705a      	strb	r2, [r3, #1]
  Capabilities->Magneto      = 0;
 800397a:	683b      	ldr	r3, [r7, #0]
 800397c:	2200      	movs	r2, #0
 800397e:	709a      	strb	r2, [r3, #2]
  Capabilities->LowPower     = 0;
 8003980:	683b      	ldr	r3, [r7, #0]
 8003982:	2200      	movs	r2, #0
 8003984:	70da      	strb	r2, [r3, #3]
  Capabilities->GyroMaxFS    = 0;
 8003986:	683b      	ldr	r3, [r7, #0]
 8003988:	2200      	movs	r2, #0
 800398a:	605a      	str	r2, [r3, #4]
  Capabilities->AccMaxFS     = 16;
 800398c:	683b      	ldr	r3, [r7, #0]
 800398e:	2210      	movs	r2, #16
 8003990:	609a      	str	r2, [r3, #8]
  Capabilities->MagMaxFS     = 0;
 8003992:	683b      	ldr	r3, [r7, #0]
 8003994:	2200      	movs	r2, #0
 8003996:	60da      	str	r2, [r3, #12]
  Capabilities->GyroMaxOdr   = 0.0f;
 8003998:	683b      	ldr	r3, [r7, #0]
 800399a:	f04f 0200 	mov.w	r2, #0
 800399e:	611a      	str	r2, [r3, #16]
  Capabilities->AccMaxOdr    = 400.0f;
 80039a0:	683b      	ldr	r3, [r7, #0]
 80039a2:	4a06      	ldr	r2, [pc, #24]	; (80039bc <LSM303AGR_ACC_GetCapabilities+0x58>)
 80039a4:	615a      	str	r2, [r3, #20]
  Capabilities->MagMaxOdr    = 0.0f;
 80039a6:	683b      	ldr	r3, [r7, #0]
 80039a8:	f04f 0200 	mov.w	r2, #0
 80039ac:	619a      	str	r2, [r3, #24]
  return LSM303AGR_OK;
 80039ae:	2300      	movs	r3, #0
}
 80039b0:	4618      	mov	r0, r3
 80039b2:	370c      	adds	r7, #12
 80039b4:	46bd      	mov	sp, r7
 80039b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ba:	4770      	bx	lr
 80039bc:	43c80000 	.word	0x43c80000

080039c0 <LSM303AGR_ACC_Enable>:
  * @brief  Enable the LSM303AGR accelerometer sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM303AGR_ACC_Enable(LSM303AGR_ACC_Object_t *pObj)
{
 80039c0:	b580      	push	{r7, lr}
 80039c2:	b082      	sub	sp, #8
 80039c4:	af00      	add	r7, sp, #0
 80039c6:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->acc_is_enabled == 1U)
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80039ce:	2b01      	cmp	r3, #1
 80039d0:	d101      	bne.n	80039d6 <LSM303AGR_ACC_Enable+0x16>
  {
    return LSM303AGR_OK;
 80039d2:	2300      	movs	r3, #0
 80039d4:	e014      	b.n	8003a00 <LSM303AGR_ACC_Enable+0x40>
  }

  /* Output data rate selection. */
  if (lsm303agr_xl_data_rate_set(&(pObj->Ctx), pObj->acc_odr) != LSM303AGR_OK)
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	f103 0220 	add.w	r2, r3, #32
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80039e2:	4619      	mov	r1, r3
 80039e4:	4610      	mov	r0, r2
 80039e6:	f000 ffbf 	bl	8004968 <lsm303agr_xl_data_rate_set>
 80039ea:	4603      	mov	r3, r0
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d002      	beq.n	80039f6 <LSM303AGR_ACC_Enable+0x36>
  {
    return LSM303AGR_ERROR;
 80039f0:	f04f 33ff 	mov.w	r3, #4294967295
 80039f4:	e004      	b.n	8003a00 <LSM303AGR_ACC_Enable+0x40>
  }

  pObj->acc_is_enabled = 1;
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	2201      	movs	r2, #1
 80039fa:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  return LSM303AGR_OK;
 80039fe:	2300      	movs	r3, #0
}
 8003a00:	4618      	mov	r0, r3
 8003a02:	3708      	adds	r7, #8
 8003a04:	46bd      	mov	sp, r7
 8003a06:	bd80      	pop	{r7, pc}

08003a08 <LSM303AGR_ACC_Disable>:
  * @brief  Disable the LSM303AGR accelerometer sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM303AGR_ACC_Disable(LSM303AGR_ACC_Object_t *pObj)
{
 8003a08:	b580      	push	{r7, lr}
 8003a0a:	b082      	sub	sp, #8
 8003a0c:	af00      	add	r7, sp, #0
 8003a0e:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->acc_is_enabled == 0U)
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d101      	bne.n	8003a1e <LSM303AGR_ACC_Disable+0x16>
  {
    return LSM303AGR_OK;
 8003a1a:	2300      	movs	r3, #0
 8003a1c:	e01f      	b.n	8003a5e <LSM303AGR_ACC_Disable+0x56>
  }

  /* Get current output data rate. */
  if (lsm303agr_xl_data_rate_get(&(pObj->Ctx), &pObj->acc_odr) != LSM303AGR_OK)
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	f103 0220 	add.w	r2, r3, #32
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	3332      	adds	r3, #50	; 0x32
 8003a28:	4619      	mov	r1, r3
 8003a2a:	4610      	mov	r0, r2
 8003a2c:	f000 ffc2 	bl	80049b4 <lsm303agr_xl_data_rate_get>
 8003a30:	4603      	mov	r3, r0
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d002      	beq.n	8003a3c <LSM303AGR_ACC_Disable+0x34>
  {
    return LSM303AGR_ERROR;
 8003a36:	f04f 33ff 	mov.w	r3, #4294967295
 8003a3a:	e010      	b.n	8003a5e <LSM303AGR_ACC_Disable+0x56>
  }

  /* Output data rate selection - power down. */
  if (lsm303agr_xl_data_rate_set(&(pObj->Ctx), LSM303AGR_XL_POWER_DOWN) != LSM303AGR_OK)
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	3320      	adds	r3, #32
 8003a40:	2100      	movs	r1, #0
 8003a42:	4618      	mov	r0, r3
 8003a44:	f000 ff90 	bl	8004968 <lsm303agr_xl_data_rate_set>
 8003a48:	4603      	mov	r3, r0
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d002      	beq.n	8003a54 <LSM303AGR_ACC_Disable+0x4c>
  {
    return LSM303AGR_ERROR;
 8003a4e:	f04f 33ff 	mov.w	r3, #4294967295
 8003a52:	e004      	b.n	8003a5e <LSM303AGR_ACC_Disable+0x56>
  }

  pObj->acc_is_enabled = 0;
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	2200      	movs	r2, #0
 8003a58:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  return LSM303AGR_OK;
 8003a5c:	2300      	movs	r3, #0
}
 8003a5e:	4618      	mov	r0, r3
 8003a60:	3708      	adds	r7, #8
 8003a62:	46bd      	mov	sp, r7
 8003a64:	bd80      	pop	{r7, pc}

08003a66 <LSM303AGR_ACC_GetSensitivity>:
  * @param  pObj the device pObj
  * @param  Sensitivity pointer
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM303AGR_ACC_GetSensitivity(LSM303AGR_ACC_Object_t *pObj, float *Sensitivity)
{
 8003a66:	b580      	push	{r7, lr}
 8003a68:	b084      	sub	sp, #16
 8003a6a:	af00      	add	r7, sp, #0
 8003a6c:	6078      	str	r0, [r7, #4]
 8003a6e:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM303AGR_OK;
 8003a70:	2300      	movs	r3, #0
 8003a72:	60fb      	str	r3, [r7, #12]
  lsm303agr_op_md_a_t op_mode;

  /* Read operative mode from sensor. */
  if (lsm303agr_xl_operating_mode_get(&(pObj->Ctx), &op_mode) != LSM303AGR_OK)
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	3320      	adds	r3, #32
 8003a78:	f107 020b 	add.w	r2, r7, #11
 8003a7c:	4611      	mov	r1, r2
 8003a7e:	4618      	mov	r0, r3
 8003a80:	f000 ff3e 	bl	8004900 <lsm303agr_xl_operating_mode_get>
 8003a84:	4603      	mov	r3, r0
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d002      	beq.n	8003a90 <LSM303AGR_ACC_GetSensitivity+0x2a>
  {
    return LSM303AGR_ERROR;
 8003a8a:	f04f 33ff 	mov.w	r3, #4294967295
 8003a8e:	e031      	b.n	8003af4 <LSM303AGR_ACC_GetSensitivity+0x8e>
  }

  /* Store the Sensitivity based on actual full scale. */
  switch (op_mode)
 8003a90:	7afb      	ldrb	r3, [r7, #11]
 8003a92:	2b02      	cmp	r3, #2
 8003a94:	d01a      	beq.n	8003acc <LSM303AGR_ACC_GetSensitivity+0x66>
 8003a96:	2b02      	cmp	r3, #2
 8003a98:	dc22      	bgt.n	8003ae0 <LSM303AGR_ACC_GetSensitivity+0x7a>
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d002      	beq.n	8003aa4 <LSM303AGR_ACC_GetSensitivity+0x3e>
 8003a9e:	2b01      	cmp	r3, #1
 8003aa0:	d00a      	beq.n	8003ab8 <LSM303AGR_ACC_GetSensitivity+0x52>
 8003aa2:	e01d      	b.n	8003ae0 <LSM303AGR_ACC_GetSensitivity+0x7a>
  {
    case LSM303AGR_HR_12bit:
      if (LSM303AGR_ACC_GetSensitivityHR(pObj, Sensitivity) != LSM303AGR_OK)
 8003aa4:	6839      	ldr	r1, [r7, #0]
 8003aa6:	6878      	ldr	r0, [r7, #4]
 8003aa8:	f000 fca8 	bl	80043fc <LSM303AGR_ACC_GetSensitivityHR>
 8003aac:	4603      	mov	r3, r0
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d01a      	beq.n	8003ae8 <LSM303AGR_ACC_GetSensitivity+0x82>
      {
        return LSM303AGR_ERROR;
 8003ab2:	f04f 33ff 	mov.w	r3, #4294967295
 8003ab6:	e01d      	b.n	8003af4 <LSM303AGR_ACC_GetSensitivity+0x8e>
      }
      break;

    case LSM303AGR_NM_10bit:
      if (LSM303AGR_ACC_GetSensitivityNM(pObj, Sensitivity) != LSM303AGR_OK)
 8003ab8:	6839      	ldr	r1, [r7, #0]
 8003aba:	6878      	ldr	r0, [r7, #4]
 8003abc:	f000 fce4 	bl	8004488 <LSM303AGR_ACC_GetSensitivityNM>
 8003ac0:	4603      	mov	r3, r0
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d012      	beq.n	8003aec <LSM303AGR_ACC_GetSensitivity+0x86>
      {
        return LSM303AGR_ERROR;
 8003ac6:	f04f 33ff 	mov.w	r3, #4294967295
 8003aca:	e013      	b.n	8003af4 <LSM303AGR_ACC_GetSensitivity+0x8e>
      }
      break;

    case LSM303AGR_LP_8bit:
      if (LSM303AGR_ACC_GetSensitivityLP(pObj, Sensitivity) != LSM303AGR_OK)
 8003acc:	6839      	ldr	r1, [r7, #0]
 8003ace:	6878      	ldr	r0, [r7, #4]
 8003ad0:	f000 fd20 	bl	8004514 <LSM303AGR_ACC_GetSensitivityLP>
 8003ad4:	4603      	mov	r3, r0
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d00a      	beq.n	8003af0 <LSM303AGR_ACC_GetSensitivity+0x8a>
      {
        return LSM303AGR_ERROR;
 8003ada:	f04f 33ff 	mov.w	r3, #4294967295
 8003ade:	e009      	b.n	8003af4 <LSM303AGR_ACC_GetSensitivity+0x8e>
      }
      break;

    default:
      ret = LSM303AGR_ERROR;
 8003ae0:	f04f 33ff 	mov.w	r3, #4294967295
 8003ae4:	60fb      	str	r3, [r7, #12]
      break;
 8003ae6:	e004      	b.n	8003af2 <LSM303AGR_ACC_GetSensitivity+0x8c>
      break;
 8003ae8:	bf00      	nop
 8003aea:	e002      	b.n	8003af2 <LSM303AGR_ACC_GetSensitivity+0x8c>
      break;
 8003aec:	bf00      	nop
 8003aee:	e000      	b.n	8003af2 <LSM303AGR_ACC_GetSensitivity+0x8c>
      break;
 8003af0:	bf00      	nop
  }

  return ret;
 8003af2:	68fb      	ldr	r3, [r7, #12]
}
 8003af4:	4618      	mov	r0, r3
 8003af6:	3710      	adds	r7, #16
 8003af8:	46bd      	mov	sp, r7
 8003afa:	bd80      	pop	{r7, pc}

08003afc <LSM303AGR_ACC_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM303AGR_ACC_GetOutputDataRate(LSM303AGR_ACC_Object_t *pObj, float *Odr)
{
 8003afc:	b580      	push	{r7, lr}
 8003afe:	b084      	sub	sp, #16
 8003b00:	af00      	add	r7, sp, #0
 8003b02:	6078      	str	r0, [r7, #4]
 8003b04:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM303AGR_OK;
 8003b06:	2300      	movs	r3, #0
 8003b08:	60fb      	str	r3, [r7, #12]
  lsm303agr_op_md_a_t op_mode;
  lsm303agr_odr_a_t odr_low_level;

  /* Read operative mode from sensor. */
  if (lsm303agr_xl_operating_mode_get(&(pObj->Ctx), &op_mode) != LSM303AGR_OK)
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	3320      	adds	r3, #32
 8003b0e:	f107 020b 	add.w	r2, r7, #11
 8003b12:	4611      	mov	r1, r2
 8003b14:	4618      	mov	r0, r3
 8003b16:	f000 fef3 	bl	8004900 <lsm303agr_xl_operating_mode_get>
 8003b1a:	4603      	mov	r3, r0
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d002      	beq.n	8003b26 <LSM303AGR_ACC_GetOutputDataRate+0x2a>
  {
    return LSM303AGR_ERROR;
 8003b20:	f04f 33ff 	mov.w	r3, #4294967295
 8003b24:	e09d      	b.n	8003c62 <LSM303AGR_ACC_GetOutputDataRate+0x166>
  }

  /* Get current output data rate. */
  if (lsm303agr_xl_data_rate_get(&(pObj->Ctx), &odr_low_level) != LSM303AGR_OK)
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	3320      	adds	r3, #32
 8003b2a:	f107 020a 	add.w	r2, r7, #10
 8003b2e:	4611      	mov	r1, r2
 8003b30:	4618      	mov	r0, r3
 8003b32:	f000 ff3f 	bl	80049b4 <lsm303agr_xl_data_rate_get>
 8003b36:	4603      	mov	r3, r0
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d002      	beq.n	8003b42 <LSM303AGR_ACC_GetOutputDataRate+0x46>
  {
    return LSM303AGR_ERROR;
 8003b3c:	f04f 33ff 	mov.w	r3, #4294967295
 8003b40:	e08f      	b.n	8003c62 <LSM303AGR_ACC_GetOutputDataRate+0x166>
  }

  if (op_mode == LSM303AGR_LP_8bit) /* LP mode */
 8003b42:	7afb      	ldrb	r3, [r7, #11]
 8003b44:	2b02      	cmp	r3, #2
 8003b46:	d147      	bne.n	8003bd8 <LSM303AGR_ACC_GetOutputDataRate+0xdc>
  {
    switch (odr_low_level)
 8003b48:	7abb      	ldrb	r3, [r7, #10]
 8003b4a:	2b09      	cmp	r3, #9
 8003b4c:	d840      	bhi.n	8003bd0 <LSM303AGR_ACC_GetOutputDataRate+0xd4>
 8003b4e:	a201      	add	r2, pc, #4	; (adr r2, 8003b54 <LSM303AGR_ACC_GetOutputDataRate+0x58>)
 8003b50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b54:	08003b7d 	.word	0x08003b7d
 8003b58:	08003b87 	.word	0x08003b87
 8003b5c:	08003b91 	.word	0x08003b91
 8003b60:	08003b99 	.word	0x08003b99
 8003b64:	08003ba1 	.word	0x08003ba1
 8003b68:	08003ba9 	.word	0x08003ba9
 8003b6c:	08003bb1 	.word	0x08003bb1
 8003b70:	08003bb9 	.word	0x08003bb9
 8003b74:	08003bc1 	.word	0x08003bc1
 8003b78:	08003bc9 	.word	0x08003bc9
    {
      case LSM303AGR_XL_POWER_DOWN:
        *Odr = 0.0f;
 8003b7c:	683b      	ldr	r3, [r7, #0]
 8003b7e:	f04f 0200 	mov.w	r2, #0
 8003b82:	601a      	str	r2, [r3, #0]
        break;
 8003b84:	e06c      	b.n	8003c60 <LSM303AGR_ACC_GetOutputDataRate+0x164>

      case LSM303AGR_XL_ODR_1Hz:
        *Odr = 1.0f;
 8003b86:	683b      	ldr	r3, [r7, #0]
 8003b88:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8003b8c:	601a      	str	r2, [r3, #0]
        break;
 8003b8e:	e067      	b.n	8003c60 <LSM303AGR_ACC_GetOutputDataRate+0x164>

      case LSM303AGR_XL_ODR_10Hz:
        *Odr = 10.0f;
 8003b90:	683b      	ldr	r3, [r7, #0]
 8003b92:	4a36      	ldr	r2, [pc, #216]	; (8003c6c <LSM303AGR_ACC_GetOutputDataRate+0x170>)
 8003b94:	601a      	str	r2, [r3, #0]
        break;
 8003b96:	e063      	b.n	8003c60 <LSM303AGR_ACC_GetOutputDataRate+0x164>

      case LSM303AGR_XL_ODR_25Hz:
        *Odr = 25.0f;
 8003b98:	683b      	ldr	r3, [r7, #0]
 8003b9a:	4a35      	ldr	r2, [pc, #212]	; (8003c70 <LSM303AGR_ACC_GetOutputDataRate+0x174>)
 8003b9c:	601a      	str	r2, [r3, #0]
        break;
 8003b9e:	e05f      	b.n	8003c60 <LSM303AGR_ACC_GetOutputDataRate+0x164>

      case LSM303AGR_XL_ODR_50Hz:
        *Odr = 50.0f;
 8003ba0:	683b      	ldr	r3, [r7, #0]
 8003ba2:	4a34      	ldr	r2, [pc, #208]	; (8003c74 <LSM303AGR_ACC_GetOutputDataRate+0x178>)
 8003ba4:	601a      	str	r2, [r3, #0]
        break;
 8003ba6:	e05b      	b.n	8003c60 <LSM303AGR_ACC_GetOutputDataRate+0x164>

      case LSM303AGR_XL_ODR_100Hz:
        *Odr = 100.0f;
 8003ba8:	683b      	ldr	r3, [r7, #0]
 8003baa:	4a33      	ldr	r2, [pc, #204]	; (8003c78 <LSM303AGR_ACC_GetOutputDataRate+0x17c>)
 8003bac:	601a      	str	r2, [r3, #0]
        break;
 8003bae:	e057      	b.n	8003c60 <LSM303AGR_ACC_GetOutputDataRate+0x164>

      case LSM303AGR_XL_ODR_200Hz:
        *Odr = 200.0f;
 8003bb0:	683b      	ldr	r3, [r7, #0]
 8003bb2:	4a32      	ldr	r2, [pc, #200]	; (8003c7c <LSM303AGR_ACC_GetOutputDataRate+0x180>)
 8003bb4:	601a      	str	r2, [r3, #0]
        break;
 8003bb6:	e053      	b.n	8003c60 <LSM303AGR_ACC_GetOutputDataRate+0x164>

      case LSM303AGR_XL_ODR_400Hz:
        *Odr = 400.0f;
 8003bb8:	683b      	ldr	r3, [r7, #0]
 8003bba:	4a31      	ldr	r2, [pc, #196]	; (8003c80 <LSM303AGR_ACC_GetOutputDataRate+0x184>)
 8003bbc:	601a      	str	r2, [r3, #0]
        break;
 8003bbe:	e04f      	b.n	8003c60 <LSM303AGR_ACC_GetOutputDataRate+0x164>

      case LSM303AGR_XL_ODR_1kHz620_LP:
        *Odr = 1620.0f;
 8003bc0:	683b      	ldr	r3, [r7, #0]
 8003bc2:	4a30      	ldr	r2, [pc, #192]	; (8003c84 <LSM303AGR_ACC_GetOutputDataRate+0x188>)
 8003bc4:	601a      	str	r2, [r3, #0]
        break;
 8003bc6:	e04b      	b.n	8003c60 <LSM303AGR_ACC_GetOutputDataRate+0x164>

      case LSM303AGR_XL_ODR_1kHz344_NM_HP_5kHz376_LP:
        *Odr = 5376.0f;
 8003bc8:	683b      	ldr	r3, [r7, #0]
 8003bca:	4a2f      	ldr	r2, [pc, #188]	; (8003c88 <LSM303AGR_ACC_GetOutputDataRate+0x18c>)
 8003bcc:	601a      	str	r2, [r3, #0]
        break;
 8003bce:	e047      	b.n	8003c60 <LSM303AGR_ACC_GetOutputDataRate+0x164>

      default:
        ret = LSM303AGR_ERROR;
 8003bd0:	f04f 33ff 	mov.w	r3, #4294967295
 8003bd4:	60fb      	str	r3, [r7, #12]
        break;
 8003bd6:	e043      	b.n	8003c60 <LSM303AGR_ACC_GetOutputDataRate+0x164>
    }
  }
  else /* HR and NM modes */
  {
    switch (odr_low_level)
 8003bd8:	7abb      	ldrb	r3, [r7, #10]
 8003bda:	2b09      	cmp	r3, #9
 8003bdc:	d83c      	bhi.n	8003c58 <LSM303AGR_ACC_GetOutputDataRate+0x15c>
 8003bde:	a201      	add	r2, pc, #4	; (adr r2, 8003be4 <LSM303AGR_ACC_GetOutputDataRate+0xe8>)
 8003be0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003be4:	08003c0d 	.word	0x08003c0d
 8003be8:	08003c17 	.word	0x08003c17
 8003bec:	08003c21 	.word	0x08003c21
 8003bf0:	08003c29 	.word	0x08003c29
 8003bf4:	08003c31 	.word	0x08003c31
 8003bf8:	08003c39 	.word	0x08003c39
 8003bfc:	08003c41 	.word	0x08003c41
 8003c00:	08003c49 	.word	0x08003c49
 8003c04:	08003c59 	.word	0x08003c59
 8003c08:	08003c51 	.word	0x08003c51
    {
      case LSM303AGR_XL_POWER_DOWN:
        *Odr = 0.0f;
 8003c0c:	683b      	ldr	r3, [r7, #0]
 8003c0e:	f04f 0200 	mov.w	r2, #0
 8003c12:	601a      	str	r2, [r3, #0]
        break;
 8003c14:	e024      	b.n	8003c60 <LSM303AGR_ACC_GetOutputDataRate+0x164>

      case LSM303AGR_XL_ODR_1Hz:
        *Odr = 1.0f;
 8003c16:	683b      	ldr	r3, [r7, #0]
 8003c18:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8003c1c:	601a      	str	r2, [r3, #0]
        break;
 8003c1e:	e01f      	b.n	8003c60 <LSM303AGR_ACC_GetOutputDataRate+0x164>

      case LSM303AGR_XL_ODR_10Hz:
        *Odr = 10.0f;
 8003c20:	683b      	ldr	r3, [r7, #0]
 8003c22:	4a12      	ldr	r2, [pc, #72]	; (8003c6c <LSM303AGR_ACC_GetOutputDataRate+0x170>)
 8003c24:	601a      	str	r2, [r3, #0]
        break;
 8003c26:	e01b      	b.n	8003c60 <LSM303AGR_ACC_GetOutputDataRate+0x164>

      case LSM303AGR_XL_ODR_25Hz:
        *Odr = 25.0f;
 8003c28:	683b      	ldr	r3, [r7, #0]
 8003c2a:	4a11      	ldr	r2, [pc, #68]	; (8003c70 <LSM303AGR_ACC_GetOutputDataRate+0x174>)
 8003c2c:	601a      	str	r2, [r3, #0]
        break;
 8003c2e:	e017      	b.n	8003c60 <LSM303AGR_ACC_GetOutputDataRate+0x164>

      case LSM303AGR_XL_ODR_50Hz:
        *Odr = 50.0f;
 8003c30:	683b      	ldr	r3, [r7, #0]
 8003c32:	4a10      	ldr	r2, [pc, #64]	; (8003c74 <LSM303AGR_ACC_GetOutputDataRate+0x178>)
 8003c34:	601a      	str	r2, [r3, #0]
        break;
 8003c36:	e013      	b.n	8003c60 <LSM303AGR_ACC_GetOutputDataRate+0x164>

      case LSM303AGR_XL_ODR_100Hz:
        *Odr = 100.0f;
 8003c38:	683b      	ldr	r3, [r7, #0]
 8003c3a:	4a0f      	ldr	r2, [pc, #60]	; (8003c78 <LSM303AGR_ACC_GetOutputDataRate+0x17c>)
 8003c3c:	601a      	str	r2, [r3, #0]
        break;
 8003c3e:	e00f      	b.n	8003c60 <LSM303AGR_ACC_GetOutputDataRate+0x164>

      case LSM303AGR_XL_ODR_200Hz:
        *Odr = 200.0f;
 8003c40:	683b      	ldr	r3, [r7, #0]
 8003c42:	4a0e      	ldr	r2, [pc, #56]	; (8003c7c <LSM303AGR_ACC_GetOutputDataRate+0x180>)
 8003c44:	601a      	str	r2, [r3, #0]
        break;
 8003c46:	e00b      	b.n	8003c60 <LSM303AGR_ACC_GetOutputDataRate+0x164>

      case LSM303AGR_XL_ODR_400Hz:
        *Odr = 400.0f;
 8003c48:	683b      	ldr	r3, [r7, #0]
 8003c4a:	4a0d      	ldr	r2, [pc, #52]	; (8003c80 <LSM303AGR_ACC_GetOutputDataRate+0x184>)
 8003c4c:	601a      	str	r2, [r3, #0]
        break;
 8003c4e:	e007      	b.n	8003c60 <LSM303AGR_ACC_GetOutputDataRate+0x164>

      case LSM303AGR_XL_ODR_1kHz344_NM_HP_5kHz376_LP:
        *Odr = 1344.0f;
 8003c50:	683b      	ldr	r3, [r7, #0]
 8003c52:	4a0e      	ldr	r2, [pc, #56]	; (8003c8c <LSM303AGR_ACC_GetOutputDataRate+0x190>)
 8003c54:	601a      	str	r2, [r3, #0]
        break;
 8003c56:	e003      	b.n	8003c60 <LSM303AGR_ACC_GetOutputDataRate+0x164>

      default:
        ret = LSM303AGR_ERROR;
 8003c58:	f04f 33ff 	mov.w	r3, #4294967295
 8003c5c:	60fb      	str	r3, [r7, #12]
        break;
 8003c5e:	bf00      	nop
    }
  }

  return ret;
 8003c60:	68fb      	ldr	r3, [r7, #12]
}
 8003c62:	4618      	mov	r0, r3
 8003c64:	3710      	adds	r7, #16
 8003c66:	46bd      	mov	sp, r7
 8003c68:	bd80      	pop	{r7, pc}
 8003c6a:	bf00      	nop
 8003c6c:	41200000 	.word	0x41200000
 8003c70:	41c80000 	.word	0x41c80000
 8003c74:	42480000 	.word	0x42480000
 8003c78:	42c80000 	.word	0x42c80000
 8003c7c:	43480000 	.word	0x43480000
 8003c80:	43c80000 	.word	0x43c80000
 8003c84:	44ca8000 	.word	0x44ca8000
 8003c88:	45a80000 	.word	0x45a80000
 8003c8c:	44a80000 	.word	0x44a80000

08003c90 <LSM303AGR_ACC_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM303AGR_ACC_SetOutputDataRate(LSM303AGR_ACC_Object_t *pObj, float Odr)
{
 8003c90:	b580      	push	{r7, lr}
 8003c92:	b082      	sub	sp, #8
 8003c94:	af00      	add	r7, sp, #0
 8003c96:	6078      	str	r0, [r7, #4]
 8003c98:	ed87 0a00 	vstr	s0, [r7]
  /* Check if the component is enabled */
  if (pObj->acc_is_enabled == 1U)
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8003ca2:	2b01      	cmp	r3, #1
 8003ca4:	d106      	bne.n	8003cb4 <LSM303AGR_ACC_SetOutputDataRate+0x24>
  {
    return LSM303AGR_ACC_SetOutputDataRate_When_Enabled(pObj, Odr);
 8003ca6:	ed97 0a00 	vldr	s0, [r7]
 8003caa:	6878      	ldr	r0, [r7, #4]
 8003cac:	f000 fc78 	bl	80045a0 <LSM303AGR_ACC_SetOutputDataRate_When_Enabled>
 8003cb0:	4603      	mov	r3, r0
 8003cb2:	e005      	b.n	8003cc0 <LSM303AGR_ACC_SetOutputDataRate+0x30>
  }
  else
  {
    return LSM303AGR_ACC_SetOutputDataRate_When_Disabled(pObj, Odr);
 8003cb4:	ed97 0a00 	vldr	s0, [r7]
 8003cb8:	6878      	ldr	r0, [r7, #4]
 8003cba:	f000 fcd3 	bl	8004664 <LSM303AGR_ACC_SetOutputDataRate_When_Disabled>
 8003cbe:	4603      	mov	r3, r0
  }
}
 8003cc0:	4618      	mov	r0, r3
 8003cc2:	3708      	adds	r7, #8
 8003cc4:	46bd      	mov	sp, r7
 8003cc6:	bd80      	pop	{r7, pc}

08003cc8 <LSM303AGR_ACC_GetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale pointer where the full scale is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM303AGR_ACC_GetFullScale(LSM303AGR_ACC_Object_t *pObj, int32_t *FullScale)
{
 8003cc8:	b580      	push	{r7, lr}
 8003cca:	b084      	sub	sp, #16
 8003ccc:	af00      	add	r7, sp, #0
 8003cce:	6078      	str	r0, [r7, #4]
 8003cd0:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM303AGR_OK;
 8003cd2:	2300      	movs	r3, #0
 8003cd4:	60fb      	str	r3, [r7, #12]
  lsm303agr_fs_a_t fs_low_level;

  /* Read actual full scale selection from sensor. */
  if (lsm303agr_xl_full_scale_get(&(pObj->Ctx), &fs_low_level) != LSM303AGR_OK)
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	3320      	adds	r3, #32
 8003cda:	f107 020b 	add.w	r2, r7, #11
 8003cde:	4611      	mov	r1, r2
 8003ce0:	4618      	mov	r0, r3
 8003ce2:	f000 fee9 	bl	8004ab8 <lsm303agr_xl_full_scale_get>
 8003ce6:	4603      	mov	r3, r0
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d002      	beq.n	8003cf2 <LSM303AGR_ACC_GetFullScale+0x2a>
  {
    return LSM303AGR_ERROR;
 8003cec:	f04f 33ff 	mov.w	r3, #4294967295
 8003cf0:	e023      	b.n	8003d3a <LSM303AGR_ACC_GetFullScale+0x72>
  }

  switch (fs_low_level)
 8003cf2:	7afb      	ldrb	r3, [r7, #11]
 8003cf4:	2b03      	cmp	r3, #3
 8003cf6:	d81b      	bhi.n	8003d30 <LSM303AGR_ACC_GetFullScale+0x68>
 8003cf8:	a201      	add	r2, pc, #4	; (adr r2, 8003d00 <LSM303AGR_ACC_GetFullScale+0x38>)
 8003cfa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cfe:	bf00      	nop
 8003d00:	08003d11 	.word	0x08003d11
 8003d04:	08003d19 	.word	0x08003d19
 8003d08:	08003d21 	.word	0x08003d21
 8003d0c:	08003d29 	.word	0x08003d29
  {
    case LSM303AGR_2g:
      *FullScale =  2;
 8003d10:	683b      	ldr	r3, [r7, #0]
 8003d12:	2202      	movs	r2, #2
 8003d14:	601a      	str	r2, [r3, #0]
      break;
 8003d16:	e00f      	b.n	8003d38 <LSM303AGR_ACC_GetFullScale+0x70>

    case LSM303AGR_4g:
      *FullScale =  4;
 8003d18:	683b      	ldr	r3, [r7, #0]
 8003d1a:	2204      	movs	r2, #4
 8003d1c:	601a      	str	r2, [r3, #0]
      break;
 8003d1e:	e00b      	b.n	8003d38 <LSM303AGR_ACC_GetFullScale+0x70>

    case LSM303AGR_8g:
      *FullScale =  8;
 8003d20:	683b      	ldr	r3, [r7, #0]
 8003d22:	2208      	movs	r2, #8
 8003d24:	601a      	str	r2, [r3, #0]
      break;
 8003d26:	e007      	b.n	8003d38 <LSM303AGR_ACC_GetFullScale+0x70>

    case LSM303AGR_16g:
      *FullScale = 16;
 8003d28:	683b      	ldr	r3, [r7, #0]
 8003d2a:	2210      	movs	r2, #16
 8003d2c:	601a      	str	r2, [r3, #0]
      break;
 8003d2e:	e003      	b.n	8003d38 <LSM303AGR_ACC_GetFullScale+0x70>

    default:
      ret = LSM303AGR_ERROR;
 8003d30:	f04f 33ff 	mov.w	r3, #4294967295
 8003d34:	60fb      	str	r3, [r7, #12]
      break;
 8003d36:	bf00      	nop
  }

  return ret;
 8003d38:	68fb      	ldr	r3, [r7, #12]
}
 8003d3a:	4618      	mov	r0, r3
 8003d3c:	3710      	adds	r7, #16
 8003d3e:	46bd      	mov	sp, r7
 8003d40:	bd80      	pop	{r7, pc}
 8003d42:	bf00      	nop

08003d44 <LSM303AGR_ACC_SetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale the functional full scale to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM303AGR_ACC_SetFullScale(LSM303AGR_ACC_Object_t *pObj, int32_t FullScale)
{
 8003d44:	b580      	push	{r7, lr}
 8003d46:	b084      	sub	sp, #16
 8003d48:	af00      	add	r7, sp, #0
 8003d4a:	6078      	str	r0, [r7, #4]
 8003d4c:	6039      	str	r1, [r7, #0]
  lsm303agr_fs_a_t new_fs;

  new_fs = (FullScale <= 2) ? LSM303AGR_2g
           : (FullScale <= 4) ? LSM303AGR_4g
 8003d4e:	683b      	ldr	r3, [r7, #0]
 8003d50:	2b02      	cmp	r3, #2
 8003d52:	dd0b      	ble.n	8003d6c <LSM303AGR_ACC_SetFullScale+0x28>
 8003d54:	683b      	ldr	r3, [r7, #0]
 8003d56:	2b04      	cmp	r3, #4
 8003d58:	dd06      	ble.n	8003d68 <LSM303AGR_ACC_SetFullScale+0x24>
 8003d5a:	683b      	ldr	r3, [r7, #0]
 8003d5c:	2b08      	cmp	r3, #8
 8003d5e:	dc01      	bgt.n	8003d64 <LSM303AGR_ACC_SetFullScale+0x20>
 8003d60:	2302      	movs	r3, #2
 8003d62:	e004      	b.n	8003d6e <LSM303AGR_ACC_SetFullScale+0x2a>
 8003d64:	2303      	movs	r3, #3
 8003d66:	e002      	b.n	8003d6e <LSM303AGR_ACC_SetFullScale+0x2a>
 8003d68:	2301      	movs	r3, #1
 8003d6a:	e000      	b.n	8003d6e <LSM303AGR_ACC_SetFullScale+0x2a>
 8003d6c:	2300      	movs	r3, #0
  new_fs = (FullScale <= 2) ? LSM303AGR_2g
 8003d6e:	73fb      	strb	r3, [r7, #15]
           : (FullScale <= 8) ? LSM303AGR_8g
           :                    LSM303AGR_16g;

  if (lsm303agr_xl_full_scale_set(&(pObj->Ctx), new_fs) != LSM303AGR_OK)
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	3320      	adds	r3, #32
 8003d74:	7bfa      	ldrb	r2, [r7, #15]
 8003d76:	4611      	mov	r1, r2
 8003d78:	4618      	mov	r0, r3
 8003d7a:	f000 fe77 	bl	8004a6c <lsm303agr_xl_full_scale_set>
 8003d7e:	4603      	mov	r3, r0
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d002      	beq.n	8003d8a <LSM303AGR_ACC_SetFullScale+0x46>
  {
    return LSM303AGR_ERROR;
 8003d84:	f04f 33ff 	mov.w	r3, #4294967295
 8003d88:	e000      	b.n	8003d8c <LSM303AGR_ACC_SetFullScale+0x48>
  }

  return LSM303AGR_OK;
 8003d8a:	2300      	movs	r3, #0
}
 8003d8c:	4618      	mov	r0, r3
 8003d8e:	3710      	adds	r7, #16
 8003d90:	46bd      	mov	sp, r7
 8003d92:	bd80      	pop	{r7, pc}

08003d94 <LSM303AGR_ACC_GetAxesRaw>:
  * @param  pObj the device pObj
  * @param  Value pointer where the raw values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM303AGR_ACC_GetAxesRaw(LSM303AGR_ACC_Object_t *pObj, LSM303AGR_AxesRaw_t *Value)
{
 8003d94:	b580      	push	{r7, lr}
 8003d96:	b088      	sub	sp, #32
 8003d98:	af00      	add	r7, sp, #0
 8003d9a:	6078      	str	r0, [r7, #4]
 8003d9c:	6039      	str	r1, [r7, #0]
  int16_t divisor = 1;
 8003d9e:	2301      	movs	r3, #1
 8003da0:	83fb      	strh	r3, [r7, #30]
  lsm303agr_axis3bit16_t data_raw;
  int32_t ret = LSM303AGR_OK;
 8003da2:	2300      	movs	r3, #0
 8003da4:	61bb      	str	r3, [r7, #24]
  lsm303agr_op_md_a_t op_mode;

  /* Read operative mode from sensor. */
  if (lsm303agr_xl_operating_mode_get(&(pObj->Ctx), &op_mode) != LSM303AGR_OK)
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	3320      	adds	r3, #32
 8003daa:	f107 020f 	add.w	r2, r7, #15
 8003dae:	4611      	mov	r1, r2
 8003db0:	4618      	mov	r0, r3
 8003db2:	f000 fda5 	bl	8004900 <lsm303agr_xl_operating_mode_get>
 8003db6:	4603      	mov	r3, r0
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d002      	beq.n	8003dc2 <LSM303AGR_ACC_GetAxesRaw+0x2e>
  {
    return LSM303AGR_ERROR;
 8003dbc:	f04f 33ff 	mov.w	r3, #4294967295
 8003dc0:	e04a      	b.n	8003e58 <LSM303AGR_ACC_GetAxesRaw+0xc4>
  }

  /* Store the sensitivity based on actual full scale. */
  switch (op_mode)
 8003dc2:	7bfb      	ldrb	r3, [r7, #15]
 8003dc4:	2b02      	cmp	r3, #2
 8003dc6:	d00c      	beq.n	8003de2 <LSM303AGR_ACC_GetAxesRaw+0x4e>
 8003dc8:	2b02      	cmp	r3, #2
 8003dca:	dc0e      	bgt.n	8003dea <LSM303AGR_ACC_GetAxesRaw+0x56>
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d002      	beq.n	8003dd6 <LSM303AGR_ACC_GetAxesRaw+0x42>
 8003dd0:	2b01      	cmp	r3, #1
 8003dd2:	d003      	beq.n	8003ddc <LSM303AGR_ACC_GetAxesRaw+0x48>
 8003dd4:	e009      	b.n	8003dea <LSM303AGR_ACC_GetAxesRaw+0x56>
  {
    case LSM303AGR_HR_12bit:
      divisor = 16;
 8003dd6:	2310      	movs	r3, #16
 8003dd8:	83fb      	strh	r3, [r7, #30]
      break;
 8003dda:	e00a      	b.n	8003df2 <LSM303AGR_ACC_GetAxesRaw+0x5e>

    case LSM303AGR_NM_10bit:
      divisor = 64;
 8003ddc:	2340      	movs	r3, #64	; 0x40
 8003dde:	83fb      	strh	r3, [r7, #30]
      break;
 8003de0:	e007      	b.n	8003df2 <LSM303AGR_ACC_GetAxesRaw+0x5e>

    case LSM303AGR_LP_8bit:
      divisor = 256;
 8003de2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003de6:	83fb      	strh	r3, [r7, #30]
      break;
 8003de8:	e003      	b.n	8003df2 <LSM303AGR_ACC_GetAxesRaw+0x5e>

    default:
      ret = LSM303AGR_ERROR;
 8003dea:	f04f 33ff 	mov.w	r3, #4294967295
 8003dee:	61bb      	str	r3, [r7, #24]
      break;
 8003df0:	bf00      	nop
  }

  if (ret == LSM303AGR_ERROR)
 8003df2:	69bb      	ldr	r3, [r7, #24]
 8003df4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003df8:	d101      	bne.n	8003dfe <LSM303AGR_ACC_GetAxesRaw+0x6a>
  {
    return ret;
 8003dfa:	69bb      	ldr	r3, [r7, #24]
 8003dfc:	e02c      	b.n	8003e58 <LSM303AGR_ACC_GetAxesRaw+0xc4>
  }

  /* Read raw data values. */
  if (lsm303agr_acceleration_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM303AGR_OK)
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	3320      	adds	r3, #32
 8003e02:	f107 0210 	add.w	r2, r7, #16
 8003e06:	4611      	mov	r1, r2
 8003e08:	4618      	mov	r0, r3
 8003e0a:	f000 feb3 	bl	8004b74 <lsm303agr_acceleration_raw_get>
 8003e0e:	4603      	mov	r3, r0
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d002      	beq.n	8003e1a <LSM303AGR_ACC_GetAxesRaw+0x86>
  {
    return LSM303AGR_ERROR;
 8003e14:	f04f 33ff 	mov.w	r3, #4294967295
 8003e18:	e01e      	b.n	8003e58 <LSM303AGR_ACC_GetAxesRaw+0xc4>
  }

  /* Format the data. */
  Value->x = (data_raw.i16bit[0] / divisor);
 8003e1a:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8003e1e:	461a      	mov	r2, r3
 8003e20:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8003e24:	fb92 f3f3 	sdiv	r3, r2, r3
 8003e28:	b21a      	sxth	r2, r3
 8003e2a:	683b      	ldr	r3, [r7, #0]
 8003e2c:	801a      	strh	r2, [r3, #0]
  Value->y = (data_raw.i16bit[1] / divisor);
 8003e2e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8003e32:	461a      	mov	r2, r3
 8003e34:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8003e38:	fb92 f3f3 	sdiv	r3, r2, r3
 8003e3c:	b21a      	sxth	r2, r3
 8003e3e:	683b      	ldr	r3, [r7, #0]
 8003e40:	805a      	strh	r2, [r3, #2]
  Value->z = (data_raw.i16bit[2] / divisor);
 8003e42:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8003e46:	461a      	mov	r2, r3
 8003e48:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8003e4c:	fb92 f3f3 	sdiv	r3, r2, r3
 8003e50:	b21a      	sxth	r2, r3
 8003e52:	683b      	ldr	r3, [r7, #0]
 8003e54:	809a      	strh	r2, [r3, #4]

  return ret;
 8003e56:	69bb      	ldr	r3, [r7, #24]
}
 8003e58:	4618      	mov	r0, r3
 8003e5a:	3720      	adds	r7, #32
 8003e5c:	46bd      	mov	sp, r7
 8003e5e:	bd80      	pop	{r7, pc}

08003e60 <LSM303AGR_ACC_GetAxes>:
  * @param  pObj the device pObj
  * @param  Acceleration pointer where the values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM303AGR_ACC_GetAxes(LSM303AGR_ACC_Object_t *pObj, LSM303AGR_Axes_t *Acceleration)
{
 8003e60:	b580      	push	{r7, lr}
 8003e62:	b086      	sub	sp, #24
 8003e64:	af00      	add	r7, sp, #0
 8003e66:	6078      	str	r0, [r7, #4]
 8003e68:	6039      	str	r1, [r7, #0]
  LSM303AGR_AxesRaw_t data_raw;
  float sensitivity = 0.0f;
 8003e6a:	f04f 0300 	mov.w	r3, #0
 8003e6e:	60fb      	str	r3, [r7, #12]

  /* Read raw data values. */
  if (LSM303AGR_ACC_GetAxesRaw(pObj, &data_raw) != LSM303AGR_OK)
 8003e70:	f107 0310 	add.w	r3, r7, #16
 8003e74:	4619      	mov	r1, r3
 8003e76:	6878      	ldr	r0, [r7, #4]
 8003e78:	f7ff ff8c 	bl	8003d94 <LSM303AGR_ACC_GetAxesRaw>
 8003e7c:	4603      	mov	r3, r0
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d002      	beq.n	8003e88 <LSM303AGR_ACC_GetAxes+0x28>
  {
    return LSM303AGR_ERROR;
 8003e82:	f04f 33ff 	mov.w	r3, #4294967295
 8003e86:	e03c      	b.n	8003f02 <LSM303AGR_ACC_GetAxes+0xa2>
  }

  /* Get LSM303AGR actual sensitivity. */
  if (LSM303AGR_ACC_GetSensitivity(pObj, &sensitivity) != LSM303AGR_OK)
 8003e88:	f107 030c 	add.w	r3, r7, #12
 8003e8c:	4619      	mov	r1, r3
 8003e8e:	6878      	ldr	r0, [r7, #4]
 8003e90:	f7ff fde9 	bl	8003a66 <LSM303AGR_ACC_GetSensitivity>
 8003e94:	4603      	mov	r3, r0
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d002      	beq.n	8003ea0 <LSM303AGR_ACC_GetAxes+0x40>
  {
    return LSM303AGR_ERROR;
 8003e9a:	f04f 33ff 	mov.w	r3, #4294967295
 8003e9e:	e030      	b.n	8003f02 <LSM303AGR_ACC_GetAxes+0xa2>
  }

  /* Calculate the data. */
  Acceleration->x = (int32_t)((float)((float)data_raw.x * sensitivity));
 8003ea0:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8003ea4:	ee07 3a90 	vmov	s15, r3
 8003ea8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003eac:	edd7 7a03 	vldr	s15, [r7, #12]
 8003eb0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003eb4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003eb8:	ee17 2a90 	vmov	r2, s15
 8003ebc:	683b      	ldr	r3, [r7, #0]
 8003ebe:	601a      	str	r2, [r3, #0]
  Acceleration->y = (int32_t)((float)((float)data_raw.y * sensitivity));
 8003ec0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8003ec4:	ee07 3a90 	vmov	s15, r3
 8003ec8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003ecc:	edd7 7a03 	vldr	s15, [r7, #12]
 8003ed0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003ed4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003ed8:	ee17 2a90 	vmov	r2, s15
 8003edc:	683b      	ldr	r3, [r7, #0]
 8003ede:	605a      	str	r2, [r3, #4]
  Acceleration->z = (int32_t)((float)((float)data_raw.z * sensitivity));
 8003ee0:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8003ee4:	ee07 3a90 	vmov	s15, r3
 8003ee8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003eec:	edd7 7a03 	vldr	s15, [r7, #12]
 8003ef0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003ef4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003ef8:	ee17 2a90 	vmov	r2, s15
 8003efc:	683b      	ldr	r3, [r7, #0]
 8003efe:	609a      	str	r2, [r3, #8]

  return LSM303AGR_OK;
 8003f00:	2300      	movs	r3, #0
}
 8003f02:	4618      	mov	r0, r3
 8003f04:	3718      	adds	r7, #24
 8003f06:	46bd      	mov	sp, r7
 8003f08:	bd80      	pop	{r7, pc}

08003f0a <LSM303AGR_ACC_Write_Reg>:
  * @param  Reg address to be written
  * @param  Data value to be written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM303AGR_ACC_Write_Reg(LSM303AGR_ACC_Object_t *pObj, uint8_t Reg, uint8_t Data)
{
 8003f0a:	b580      	push	{r7, lr}
 8003f0c:	b082      	sub	sp, #8
 8003f0e:	af00      	add	r7, sp, #0
 8003f10:	6078      	str	r0, [r7, #4]
 8003f12:	460b      	mov	r3, r1
 8003f14:	70fb      	strb	r3, [r7, #3]
 8003f16:	4613      	mov	r3, r2
 8003f18:	70bb      	strb	r3, [r7, #2]
  if (lsm303agr_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LSM303AGR_OK)
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	f103 0020 	add.w	r0, r3, #32
 8003f20:	1cba      	adds	r2, r7, #2
 8003f22:	78f9      	ldrb	r1, [r7, #3]
 8003f24:	2301      	movs	r3, #1
 8003f26:	f000 fcd3 	bl	80048d0 <lsm303agr_write_reg>
 8003f2a:	4603      	mov	r3, r0
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d002      	beq.n	8003f36 <LSM303AGR_ACC_Write_Reg+0x2c>
  {
    return LSM303AGR_ERROR;
 8003f30:	f04f 33ff 	mov.w	r3, #4294967295
 8003f34:	e000      	b.n	8003f38 <LSM303AGR_ACC_Write_Reg+0x2e>
  }

  return LSM303AGR_OK;
 8003f36:	2300      	movs	r3, #0
}
 8003f38:	4618      	mov	r0, r3
 8003f3a:	3708      	adds	r7, #8
 8003f3c:	46bd      	mov	sp, r7
 8003f3e:	bd80      	pop	{r7, pc}

08003f40 <LSM303AGR_MAG_RegisterBusIO>:
  * @brief  Register Component Bus IO operations
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM303AGR_MAG_RegisterBusIO(LSM303AGR_MAG_Object_t *pObj, LSM303AGR_IO_t *pIO)
{
 8003f40:	b580      	push	{r7, lr}
 8003f42:	b084      	sub	sp, #16
 8003f44:	af00      	add	r7, sp, #0
 8003f46:	6078      	str	r0, [r7, #4]
 8003f48:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM303AGR_OK;
 8003f4a:	2300      	movs	r3, #0
 8003f4c:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d103      	bne.n	8003f5c <LSM303AGR_MAG_RegisterBusIO+0x1c>
  {
    ret = LSM303AGR_ERROR;
 8003f54:	f04f 33ff 	mov.w	r3, #4294967295
 8003f58:	60fb      	str	r3, [r7, #12]
 8003f5a:	e04b      	b.n	8003ff4 <LSM303AGR_MAG_RegisterBusIO+0xb4>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8003f5c:	683b      	ldr	r3, [r7, #0]
 8003f5e:	681a      	ldr	r2, [r3, #0]
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8003f64:	683b      	ldr	r3, [r7, #0]
 8003f66:	685a      	ldr	r2, [r3, #4]
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 8003f6c:	683b      	ldr	r3, [r7, #0]
 8003f6e:	689a      	ldr	r2, [r3, #8]
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 8003f74:	683b      	ldr	r3, [r7, #0]
 8003f76:	7b1a      	ldrb	r2, [r3, #12]
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8003f7c:	683b      	ldr	r3, [r7, #0]
 8003f7e:	691a      	ldr	r2, [r3, #16]
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8003f84:	683b      	ldr	r3, [r7, #0]
 8003f86:	695a      	ldr	r2, [r3, #20]
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 8003f8c:	683b      	ldr	r3, [r7, #0]
 8003f8e:	699a      	ldr	r2, [r3, #24]
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadMagRegWrap;
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	4a1a      	ldr	r2, [pc, #104]	; (8004000 <LSM303AGR_MAG_RegisterBusIO+0xc0>)
 8003f98:	625a      	str	r2, [r3, #36]	; 0x24
    pObj->Ctx.write_reg = WriteMagRegWrap;
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	4a19      	ldr	r2, [pc, #100]	; (8004004 <LSM303AGR_MAG_RegisterBusIO+0xc4>)
 8003f9e:	621a      	str	r2, [r3, #32]
    pObj->Ctx.handle    = pObj;
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	687a      	ldr	r2, [r7, #4]
 8003fa4:	62da      	str	r2, [r3, #44]	; 0x2c

    if (pObj->IO.Init == NULL)
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d103      	bne.n	8003fb6 <LSM303AGR_MAG_RegisterBusIO+0x76>
    {
      ret = LSM303AGR_ERROR;
 8003fae:	f04f 33ff 	mov.w	r3, #4294967295
 8003fb2:	60fb      	str	r3, [r7, #12]
 8003fb4:	e01e      	b.n	8003ff4 <LSM303AGR_MAG_RegisterBusIO+0xb4>
    }
    else if (pObj->IO.Init() != LSM303AGR_OK)
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	4798      	blx	r3
 8003fbc:	4603      	mov	r3, r0
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d003      	beq.n	8003fca <LSM303AGR_MAG_RegisterBusIO+0x8a>
    {
      ret = LSM303AGR_ERROR;
 8003fc2:	f04f 33ff 	mov.w	r3, #4294967295
 8003fc6:	60fb      	str	r3, [r7, #12]
 8003fc8:	e014      	b.n	8003ff4 <LSM303AGR_MAG_RegisterBusIO+0xb4>
    }
    else
    {
      if (pObj->IO.BusType != LSM303AGR_I2C_BUS) /* If the bus type is not I2C */
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	689b      	ldr	r3, [r3, #8]
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d010      	beq.n	8003ff4 <LSM303AGR_MAG_RegisterBusIO+0xb4>
      {
        /* Disable I2C interface support only the first time */
        if (pObj->is_initialized == 0U)
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d10b      	bne.n	8003ff4 <LSM303AGR_MAG_RegisterBusIO+0xb4>
        {
          /* Disable I2C interface on the component */
          if (lsm303agr_mag_i2c_interface_set(&(pObj->Ctx), LSM303AGR_I2C_DISABLE) != LSM303AGR_OK)
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	3320      	adds	r3, #32
 8003fe0:	2101      	movs	r1, #1
 8003fe2:	4618      	mov	r0, r3
 8003fe4:	f000 ff75 	bl	8004ed2 <lsm303agr_mag_i2c_interface_set>
 8003fe8:	4603      	mov	r3, r0
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d002      	beq.n	8003ff4 <LSM303AGR_MAG_RegisterBusIO+0xb4>
          {
            return LSM303AGR_ERROR;
 8003fee:	f04f 33ff 	mov.w	r3, #4294967295
 8003ff2:	e000      	b.n	8003ff6 <LSM303AGR_MAG_RegisterBusIO+0xb6>
        }
      }
    }
  }

  return ret;
 8003ff4:	68fb      	ldr	r3, [r7, #12]
}
 8003ff6:	4618      	mov	r0, r3
 8003ff8:	3710      	adds	r7, #16
 8003ffa:	46bd      	mov	sp, r7
 8003ffc:	bd80      	pop	{r7, pc}
 8003ffe:	bf00      	nop
 8004000:	080047dd 	.word	0x080047dd
 8004004:	0800483f 	.word	0x0800483f

08004008 <LSM303AGR_MAG_Init>:
  * @brief  Initialize the LSM303AGR sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM303AGR_MAG_Init(LSM303AGR_MAG_Object_t *pObj)
{
 8004008:	b580      	push	{r7, lr}
 800400a:	b082      	sub	sp, #8
 800400c:	af00      	add	r7, sp, #0
 800400e:	6078      	str	r0, [r7, #4]
  /* Enable BDU */
  if (lsm303agr_mag_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM303AGR_OK)
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	3320      	adds	r3, #32
 8004014:	2101      	movs	r1, #1
 8004016:	4618      	mov	r0, r3
 8004018:	f000 fe7c 	bl	8004d14 <lsm303agr_mag_block_data_update_set>
 800401c:	4603      	mov	r3, r0
 800401e:	2b00      	cmp	r3, #0
 8004020:	d002      	beq.n	8004028 <LSM303AGR_MAG_Init+0x20>
  {
    return LSM303AGR_ERROR;
 8004022:	f04f 33ff 	mov.w	r3, #4294967295
 8004026:	e028      	b.n	800407a <LSM303AGR_MAG_Init+0x72>
  }

  /* Operating mode selection - power down */
  if (lsm303agr_mag_operating_mode_set(&(pObj->Ctx), LSM303AGR_POWER_DOWN) != LSM303AGR_OK)
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	3320      	adds	r3, #32
 800402c:	2102      	movs	r1, #2
 800402e:	4618      	mov	r0, r3
 8004030:	f000 fdeb 	bl	8004c0a <lsm303agr_mag_operating_mode_set>
 8004034:	4603      	mov	r3, r0
 8004036:	2b00      	cmp	r3, #0
 8004038:	d002      	beq.n	8004040 <LSM303AGR_MAG_Init+0x38>
  {
    return LSM303AGR_ERROR;
 800403a:	f04f 33ff 	mov.w	r3, #4294967295
 800403e:	e01c      	b.n	800407a <LSM303AGR_MAG_Init+0x72>
  }

  /* Output data rate selection */
  if (lsm303agr_mag_data_rate_set(&(pObj->Ctx), LSM303AGR_MG_ODR_100Hz) != LSM303AGR_OK)
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	3320      	adds	r3, #32
 8004044:	2103      	movs	r1, #3
 8004046:	4618      	mov	r0, r3
 8004048:	f000 fe05 	bl	8004c56 <lsm303agr_mag_data_rate_set>
 800404c:	4603      	mov	r3, r0
 800404e:	2b00      	cmp	r3, #0
 8004050:	d002      	beq.n	8004058 <LSM303AGR_MAG_Init+0x50>
  {
    return LSM303AGR_ERROR;
 8004052:	f04f 33ff 	mov.w	r3, #4294967295
 8004056:	e010      	b.n	800407a <LSM303AGR_MAG_Init+0x72>
  }

  /* Self Test disabled. */
  if (lsm303agr_mag_self_test_set(&(pObj->Ctx), PROPERTY_DISABLE) != LSM303AGR_OK)
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	3320      	adds	r3, #32
 800405c:	2100      	movs	r1, #0
 800405e:	4618      	mov	r0, r3
 8004060:	f000 feeb 	bl	8004e3a <lsm303agr_mag_self_test_set>
 8004064:	4603      	mov	r3, r0
 8004066:	2b00      	cmp	r3, #0
 8004068:	d002      	beq.n	8004070 <LSM303AGR_MAG_Init+0x68>
  {
    return LSM303AGR_ERROR;
 800406a:	f04f 33ff 	mov.w	r3, #4294967295
 800406e:	e004      	b.n	800407a <LSM303AGR_MAG_Init+0x72>
  }

  pObj->is_initialized = 1;
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	2201      	movs	r2, #1
 8004074:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return LSM303AGR_OK;
 8004078:	2300      	movs	r3, #0
}
 800407a:	4618      	mov	r0, r3
 800407c:	3708      	adds	r7, #8
 800407e:	46bd      	mov	sp, r7
 8004080:	bd80      	pop	{r7, pc}

08004082 <LSM303AGR_MAG_DeInit>:
  * @brief  Deinitialize the LSM303AGR magnetometer sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM303AGR_MAG_DeInit(LSM303AGR_MAG_Object_t *pObj)
{
 8004082:	b580      	push	{r7, lr}
 8004084:	b082      	sub	sp, #8
 8004086:	af00      	add	r7, sp, #0
 8004088:	6078      	str	r0, [r7, #4]
  /* Disable the component */
  if (LSM303AGR_MAG_Disable(pObj) != LSM303AGR_OK)
 800408a:	6878      	ldr	r0, [r7, #4]
 800408c:	f000 f874 	bl	8004178 <LSM303AGR_MAG_Disable>
 8004090:	4603      	mov	r3, r0
 8004092:	2b00      	cmp	r3, #0
 8004094:	d002      	beq.n	800409c <LSM303AGR_MAG_DeInit+0x1a>
  {
    return LSM303AGR_ERROR;
 8004096:	f04f 33ff 	mov.w	r3, #4294967295
 800409a:	e004      	b.n	80040a6 <LSM303AGR_MAG_DeInit+0x24>
  }

  pObj->is_initialized = 0;
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	2200      	movs	r2, #0
 80040a0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return LSM303AGR_OK;
 80040a4:	2300      	movs	r3, #0
}
 80040a6:	4618      	mov	r0, r3
 80040a8:	3708      	adds	r7, #8
 80040aa:	46bd      	mov	sp, r7
 80040ac:	bd80      	pop	{r7, pc}

080040ae <LSM303AGR_MAG_ReadID>:
  * @param  pObj the device pObj
  * @param  Id the WHO_AM_I value
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM303AGR_MAG_ReadID(LSM303AGR_MAG_Object_t *pObj, uint8_t *Id)
{
 80040ae:	b580      	push	{r7, lr}
 80040b0:	b082      	sub	sp, #8
 80040b2:	af00      	add	r7, sp, #0
 80040b4:	6078      	str	r0, [r7, #4]
 80040b6:	6039      	str	r1, [r7, #0]
  if (lsm303agr_mag_device_id_get(&(pObj->Ctx), Id) != LSM303AGR_OK)
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	3320      	adds	r3, #32
 80040bc:	6839      	ldr	r1, [r7, #0]
 80040be:	4618      	mov	r0, r3
 80040c0:	f000 feaa 	bl	8004e18 <lsm303agr_mag_device_id_get>
 80040c4:	4603      	mov	r3, r0
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d002      	beq.n	80040d0 <LSM303AGR_MAG_ReadID+0x22>
  {
    return LSM303AGR_ERROR;
 80040ca:	f04f 33ff 	mov.w	r3, #4294967295
 80040ce:	e000      	b.n	80040d2 <LSM303AGR_MAG_ReadID+0x24>
  }

  return LSM303AGR_OK;
 80040d0:	2300      	movs	r3, #0
}
 80040d2:	4618      	mov	r0, r3
 80040d4:	3708      	adds	r7, #8
 80040d6:	46bd      	mov	sp, r7
 80040d8:	bd80      	pop	{r7, pc}
	...

080040dc <LSM303AGR_MAG_GetCapabilities>:
  * @param  pObj Component object pointer
  * @param  Capabilities pointer to LSM303AGR magnetometer sensor capabilities
  * @retval Component status
  */
int32_t LSM303AGR_MAG_GetCapabilities(LSM303AGR_MAG_Object_t *pObj, LSM303AGR_Capabilities_t *Capabilities)
{
 80040dc:	b480      	push	{r7}
 80040de:	b083      	sub	sp, #12
 80040e0:	af00      	add	r7, sp, #0
 80040e2:	6078      	str	r0, [r7, #4]
 80040e4:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Acc          = 0;
 80040e6:	683b      	ldr	r3, [r7, #0]
 80040e8:	2200      	movs	r2, #0
 80040ea:	701a      	strb	r2, [r3, #0]
  Capabilities->Gyro         = 0;
 80040ec:	683b      	ldr	r3, [r7, #0]
 80040ee:	2200      	movs	r2, #0
 80040f0:	705a      	strb	r2, [r3, #1]
  Capabilities->Magneto      = 1;
 80040f2:	683b      	ldr	r3, [r7, #0]
 80040f4:	2201      	movs	r2, #1
 80040f6:	709a      	strb	r2, [r3, #2]
  Capabilities->LowPower     = 0;
 80040f8:	683b      	ldr	r3, [r7, #0]
 80040fa:	2200      	movs	r2, #0
 80040fc:	70da      	strb	r2, [r3, #3]
  Capabilities->GyroMaxFS    = 0;
 80040fe:	683b      	ldr	r3, [r7, #0]
 8004100:	2200      	movs	r2, #0
 8004102:	605a      	str	r2, [r3, #4]
  Capabilities->AccMaxFS     = 0;
 8004104:	683b      	ldr	r3, [r7, #0]
 8004106:	2200      	movs	r2, #0
 8004108:	609a      	str	r2, [r3, #8]
  Capabilities->MagMaxFS     = 50;
 800410a:	683b      	ldr	r3, [r7, #0]
 800410c:	2232      	movs	r2, #50	; 0x32
 800410e:	60da      	str	r2, [r3, #12]
  Capabilities->GyroMaxOdr   = 0.0f;
 8004110:	683b      	ldr	r3, [r7, #0]
 8004112:	f04f 0200 	mov.w	r2, #0
 8004116:	611a      	str	r2, [r3, #16]
  Capabilities->AccMaxOdr    = 0.0f;
 8004118:	683b      	ldr	r3, [r7, #0]
 800411a:	f04f 0200 	mov.w	r2, #0
 800411e:	615a      	str	r2, [r3, #20]
  Capabilities->MagMaxOdr    = 100.0f;
 8004120:	683b      	ldr	r3, [r7, #0]
 8004122:	4a04      	ldr	r2, [pc, #16]	; (8004134 <LSM303AGR_MAG_GetCapabilities+0x58>)
 8004124:	619a      	str	r2, [r3, #24]
  return LSM303AGR_OK;
 8004126:	2300      	movs	r3, #0
}
 8004128:	4618      	mov	r0, r3
 800412a:	370c      	adds	r7, #12
 800412c:	46bd      	mov	sp, r7
 800412e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004132:	4770      	bx	lr
 8004134:	42c80000 	.word	0x42c80000

08004138 <LSM303AGR_MAG_Enable>:
  * @brief Enable the LSM303AGR magnetometer sensor
  * @param pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM303AGR_MAG_Enable(LSM303AGR_MAG_Object_t *pObj)
{
 8004138:	b580      	push	{r7, lr}
 800413a:	b082      	sub	sp, #8
 800413c:	af00      	add	r7, sp, #0
 800413e:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->mag_is_enabled == 1U)
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8004146:	2b01      	cmp	r3, #1
 8004148:	d101      	bne.n	800414e <LSM303AGR_MAG_Enable+0x16>
  {
    return LSM303AGR_OK;
 800414a:	2300      	movs	r3, #0
 800414c:	e010      	b.n	8004170 <LSM303AGR_MAG_Enable+0x38>
  }

  /* Output data rate selection. */
  if (lsm303agr_mag_operating_mode_set(&(pObj->Ctx), LSM303AGR_CONTINUOUS_MODE) != LSM303AGR_OK)
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	3320      	adds	r3, #32
 8004152:	2100      	movs	r1, #0
 8004154:	4618      	mov	r0, r3
 8004156:	f000 fd58 	bl	8004c0a <lsm303agr_mag_operating_mode_set>
 800415a:	4603      	mov	r3, r0
 800415c:	2b00      	cmp	r3, #0
 800415e:	d002      	beq.n	8004166 <LSM303AGR_MAG_Enable+0x2e>
  {
    return LSM303AGR_ERROR;
 8004160:	f04f 33ff 	mov.w	r3, #4294967295
 8004164:	e004      	b.n	8004170 <LSM303AGR_MAG_Enable+0x38>
  }

  pObj->mag_is_enabled = 1;
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	2201      	movs	r2, #1
 800416a:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  return LSM303AGR_OK;
 800416e:	2300      	movs	r3, #0
}
 8004170:	4618      	mov	r0, r3
 8004172:	3708      	adds	r7, #8
 8004174:	46bd      	mov	sp, r7
 8004176:	bd80      	pop	{r7, pc}

08004178 <LSM303AGR_MAG_Disable>:
  * @brief Disable the LSM303AGR magnetometer sensor
  * @param pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM303AGR_MAG_Disable(LSM303AGR_MAG_Object_t *pObj)
{
 8004178:	b580      	push	{r7, lr}
 800417a:	b082      	sub	sp, #8
 800417c:	af00      	add	r7, sp, #0
 800417e:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->mag_is_enabled == 0U)
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8004186:	2b00      	cmp	r3, #0
 8004188:	d101      	bne.n	800418e <LSM303AGR_MAG_Disable+0x16>
  {
    return LSM303AGR_OK;
 800418a:	2300      	movs	r3, #0
 800418c:	e010      	b.n	80041b0 <LSM303AGR_MAG_Disable+0x38>
  }

  /* Output data rate selection - power down. */
  if (lsm303agr_mag_operating_mode_set(&(pObj->Ctx), LSM303AGR_POWER_DOWN) != LSM303AGR_OK)
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	3320      	adds	r3, #32
 8004192:	2102      	movs	r1, #2
 8004194:	4618      	mov	r0, r3
 8004196:	f000 fd38 	bl	8004c0a <lsm303agr_mag_operating_mode_set>
 800419a:	4603      	mov	r3, r0
 800419c:	2b00      	cmp	r3, #0
 800419e:	d002      	beq.n	80041a6 <LSM303AGR_MAG_Disable+0x2e>
  {
    return LSM303AGR_ERROR;
 80041a0:	f04f 33ff 	mov.w	r3, #4294967295
 80041a4:	e004      	b.n	80041b0 <LSM303AGR_MAG_Disable+0x38>
  }

  pObj->mag_is_enabled = 0;
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	2200      	movs	r2, #0
 80041aa:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  return LSM303AGR_OK;
 80041ae:	2300      	movs	r3, #0
}
 80041b0:	4618      	mov	r0, r3
 80041b2:	3708      	adds	r7, #8
 80041b4:	46bd      	mov	sp, r7
 80041b6:	bd80      	pop	{r7, pc}

080041b8 <LSM303AGR_MAG_GetSensitivity>:
  * @param  pObj the device pObj
  * @param  Sensitivity pointer
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM303AGR_MAG_GetSensitivity(LSM303AGR_MAG_Object_t *pObj, float *Sensitivity)
{
 80041b8:	b480      	push	{r7}
 80041ba:	b083      	sub	sp, #12
 80041bc:	af00      	add	r7, sp, #0
 80041be:	6078      	str	r0, [r7, #4]
 80041c0:	6039      	str	r1, [r7, #0]
  *Sensitivity = LSM303AGR_MAG_SENSITIVITY_FS_50GAUSS;
 80041c2:	683b      	ldr	r3, [r7, #0]
 80041c4:	f04f 527f 	mov.w	r2, #1069547520	; 0x3fc00000
 80041c8:	601a      	str	r2, [r3, #0]

  return LSM303AGR_OK;
 80041ca:	2300      	movs	r3, #0
}
 80041cc:	4618      	mov	r0, r3
 80041ce:	370c      	adds	r7, #12
 80041d0:	46bd      	mov	sp, r7
 80041d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d6:	4770      	bx	lr

080041d8 <LSM303AGR_MAG_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM303AGR_MAG_GetOutputDataRate(LSM303AGR_MAG_Object_t *pObj, float *Odr)
{
 80041d8:	b580      	push	{r7, lr}
 80041da:	b084      	sub	sp, #16
 80041dc:	af00      	add	r7, sp, #0
 80041de:	6078      	str	r0, [r7, #4]
 80041e0:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM303AGR_OK;
 80041e2:	2300      	movs	r3, #0
 80041e4:	60fb      	str	r3, [r7, #12]
  lsm303agr_mg_odr_m_t odr_low_level;

  /* Get current output data rate. */
  if (lsm303agr_mag_data_rate_get(&(pObj->Ctx), &odr_low_level) != LSM303AGR_OK)
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	3320      	adds	r3, #32
 80041ea:	f107 020b 	add.w	r2, r7, #11
 80041ee:	4611      	mov	r1, r2
 80041f0:	4618      	mov	r0, r3
 80041f2:	f000 fd57 	bl	8004ca4 <lsm303agr_mag_data_rate_get>
 80041f6:	4603      	mov	r3, r0
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d002      	beq.n	8004202 <LSM303AGR_MAG_GetOutputDataRate+0x2a>
  {
    return LSM303AGR_ERROR;
 80041fc:	f04f 33ff 	mov.w	r3, #4294967295
 8004200:	e023      	b.n	800424a <LSM303AGR_MAG_GetOutputDataRate+0x72>
  }

  switch (odr_low_level)
 8004202:	7afb      	ldrb	r3, [r7, #11]
 8004204:	2b03      	cmp	r3, #3
 8004206:	d81b      	bhi.n	8004240 <LSM303AGR_MAG_GetOutputDataRate+0x68>
 8004208:	a201      	add	r2, pc, #4	; (adr r2, 8004210 <LSM303AGR_MAG_GetOutputDataRate+0x38>)
 800420a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800420e:	bf00      	nop
 8004210:	08004221 	.word	0x08004221
 8004214:	08004229 	.word	0x08004229
 8004218:	08004231 	.word	0x08004231
 800421c:	08004239 	.word	0x08004239
  {
    case LSM303AGR_MG_ODR_10Hz:
      *Odr = 10.0f;
 8004220:	683b      	ldr	r3, [r7, #0]
 8004222:	4a0c      	ldr	r2, [pc, #48]	; (8004254 <LSM303AGR_MAG_GetOutputDataRate+0x7c>)
 8004224:	601a      	str	r2, [r3, #0]
      break;
 8004226:	e00f      	b.n	8004248 <LSM303AGR_MAG_GetOutputDataRate+0x70>

    case LSM303AGR_MG_ODR_20Hz:
      *Odr = 20.0f;
 8004228:	683b      	ldr	r3, [r7, #0]
 800422a:	4a0b      	ldr	r2, [pc, #44]	; (8004258 <LSM303AGR_MAG_GetOutputDataRate+0x80>)
 800422c:	601a      	str	r2, [r3, #0]
      break;
 800422e:	e00b      	b.n	8004248 <LSM303AGR_MAG_GetOutputDataRate+0x70>

    case LSM303AGR_MG_ODR_50Hz:
      *Odr = 50.0f;
 8004230:	683b      	ldr	r3, [r7, #0]
 8004232:	4a0a      	ldr	r2, [pc, #40]	; (800425c <LSM303AGR_MAG_GetOutputDataRate+0x84>)
 8004234:	601a      	str	r2, [r3, #0]
      break;
 8004236:	e007      	b.n	8004248 <LSM303AGR_MAG_GetOutputDataRate+0x70>

    case LSM303AGR_MG_ODR_100Hz:
      *Odr = 100.0f;
 8004238:	683b      	ldr	r3, [r7, #0]
 800423a:	4a09      	ldr	r2, [pc, #36]	; (8004260 <LSM303AGR_MAG_GetOutputDataRate+0x88>)
 800423c:	601a      	str	r2, [r3, #0]
      break;
 800423e:	e003      	b.n	8004248 <LSM303AGR_MAG_GetOutputDataRate+0x70>

    default:
      ret = LSM303AGR_ERROR;
 8004240:	f04f 33ff 	mov.w	r3, #4294967295
 8004244:	60fb      	str	r3, [r7, #12]
      break;
 8004246:	bf00      	nop
  }

  return ret;
 8004248:	68fb      	ldr	r3, [r7, #12]
}
 800424a:	4618      	mov	r0, r3
 800424c:	3710      	adds	r7, #16
 800424e:	46bd      	mov	sp, r7
 8004250:	bd80      	pop	{r7, pc}
 8004252:	bf00      	nop
 8004254:	41200000 	.word	0x41200000
 8004258:	41a00000 	.word	0x41a00000
 800425c:	42480000 	.word	0x42480000
 8004260:	42c80000 	.word	0x42c80000

08004264 <LSM303AGR_MAG_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM303AGR_MAG_SetOutputDataRate(LSM303AGR_MAG_Object_t *pObj, float Odr)
{
 8004264:	b580      	push	{r7, lr}
 8004266:	b084      	sub	sp, #16
 8004268:	af00      	add	r7, sp, #0
 800426a:	6078      	str	r0, [r7, #4]
 800426c:	ed87 0a00 	vstr	s0, [r7]
  lsm303agr_mg_odr_m_t new_odr;

  new_odr = (Odr <= 10.000f) ? LSM303AGR_MG_ODR_10Hz
            : (Odr <= 20.000f) ? LSM303AGR_MG_ODR_20Hz
 8004270:	edd7 7a00 	vldr	s15, [r7]
 8004274:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8004278:	eef4 7ac7 	vcmpe.f32	s15, s14
 800427c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004280:	d801      	bhi.n	8004286 <LSM303AGR_MAG_SetOutputDataRate+0x22>
 8004282:	2300      	movs	r3, #0
 8004284:	e016      	b.n	80042b4 <LSM303AGR_MAG_SetOutputDataRate+0x50>
 8004286:	edd7 7a00 	vldr	s15, [r7]
 800428a:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 800428e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004292:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004296:	d801      	bhi.n	800429c <LSM303AGR_MAG_SetOutputDataRate+0x38>
 8004298:	2301      	movs	r3, #1
 800429a:	e00b      	b.n	80042b4 <LSM303AGR_MAG_SetOutputDataRate+0x50>
 800429c:	edd7 7a00 	vldr	s15, [r7]
 80042a0:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 80042dc <LSM303AGR_MAG_SetOutputDataRate+0x78>
 80042a4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80042a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80042ac:	d801      	bhi.n	80042b2 <LSM303AGR_MAG_SetOutputDataRate+0x4e>
 80042ae:	2302      	movs	r3, #2
 80042b0:	e000      	b.n	80042b4 <LSM303AGR_MAG_SetOutputDataRate+0x50>
 80042b2:	2303      	movs	r3, #3
  new_odr = (Odr <= 10.000f) ? LSM303AGR_MG_ODR_10Hz
 80042b4:	73fb      	strb	r3, [r7, #15]
            : (Odr <= 50.000f) ? LSM303AGR_MG_ODR_50Hz
            :                    LSM303AGR_MG_ODR_100Hz;

  if (lsm303agr_mag_data_rate_set(&(pObj->Ctx), new_odr) != LSM303AGR_OK)
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	3320      	adds	r3, #32
 80042ba:	7bfa      	ldrb	r2, [r7, #15]
 80042bc:	4611      	mov	r1, r2
 80042be:	4618      	mov	r0, r3
 80042c0:	f000 fcc9 	bl	8004c56 <lsm303agr_mag_data_rate_set>
 80042c4:	4603      	mov	r3, r0
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d002      	beq.n	80042d0 <LSM303AGR_MAG_SetOutputDataRate+0x6c>
  {
    return LSM303AGR_ERROR;
 80042ca:	f04f 33ff 	mov.w	r3, #4294967295
 80042ce:	e000      	b.n	80042d2 <LSM303AGR_MAG_SetOutputDataRate+0x6e>
  }

  return LSM303AGR_OK;
 80042d0:	2300      	movs	r3, #0
}
 80042d2:	4618      	mov	r0, r3
 80042d4:	3710      	adds	r7, #16
 80042d6:	46bd      	mov	sp, r7
 80042d8:	bd80      	pop	{r7, pc}
 80042da:	bf00      	nop
 80042dc:	42480000 	.word	0x42480000

080042e0 <LSM303AGR_MAG_GetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale pointer where the full scale is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM303AGR_MAG_GetFullScale(LSM303AGR_MAG_Object_t *pObj, int32_t *FullScale)
{
 80042e0:	b480      	push	{r7}
 80042e2:	b083      	sub	sp, #12
 80042e4:	af00      	add	r7, sp, #0
 80042e6:	6078      	str	r0, [r7, #4]
 80042e8:	6039      	str	r1, [r7, #0]
  *FullScale = 50;
 80042ea:	683b      	ldr	r3, [r7, #0]
 80042ec:	2232      	movs	r2, #50	; 0x32
 80042ee:	601a      	str	r2, [r3, #0]

  return LSM303AGR_OK;
 80042f0:	2300      	movs	r3, #0
}
 80042f2:	4618      	mov	r0, r3
 80042f4:	370c      	adds	r7, #12
 80042f6:	46bd      	mov	sp, r7
 80042f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042fc:	4770      	bx	lr

080042fe <LSM303AGR_MAG_SetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale the functional full scale to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM303AGR_MAG_SetFullScale(LSM303AGR_MAG_Object_t *pObj, int32_t FullScale)
{
 80042fe:	b480      	push	{r7}
 8004300:	b083      	sub	sp, #12
 8004302:	af00      	add	r7, sp, #0
 8004304:	6078      	str	r0, [r7, #4]
 8004306:	6039      	str	r1, [r7, #0]
  return LSM303AGR_OK;
 8004308:	2300      	movs	r3, #0
}
 800430a:	4618      	mov	r0, r3
 800430c:	370c      	adds	r7, #12
 800430e:	46bd      	mov	sp, r7
 8004310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004314:	4770      	bx	lr

08004316 <LSM303AGR_MAG_GetAxesRaw>:
  * @param  pObj the device pObj
  * @param  Value pointer where the raw values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM303AGR_MAG_GetAxesRaw(LSM303AGR_MAG_Object_t *pObj, LSM303AGR_AxesRaw_t *Value)
{
 8004316:	b580      	push	{r7, lr}
 8004318:	b084      	sub	sp, #16
 800431a:	af00      	add	r7, sp, #0
 800431c:	6078      	str	r0, [r7, #4]
 800431e:	6039      	str	r1, [r7, #0]
  lsm303agr_axis3bit16_t data_raw;

  /* Read raw data values. */
  if (lsm303agr_magnetic_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM303AGR_OK)
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	3320      	adds	r3, #32
 8004324:	f107 0208 	add.w	r2, r7, #8
 8004328:	4611      	mov	r1, r2
 800432a:	4618      	mov	r0, r3
 800432c:	f000 fd18 	bl	8004d60 <lsm303agr_magnetic_raw_get>
 8004330:	4603      	mov	r3, r0
 8004332:	2b00      	cmp	r3, #0
 8004334:	d002      	beq.n	800433c <LSM303AGR_MAG_GetAxesRaw+0x26>
  {
    return LSM303AGR_ERROR;
 8004336:	f04f 33ff 	mov.w	r3, #4294967295
 800433a:	e00c      	b.n	8004356 <LSM303AGR_MAG_GetAxesRaw+0x40>
  }

  /* Format the data. */
  Value->x = data_raw.i16bit[0];
 800433c:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8004340:	683b      	ldr	r3, [r7, #0]
 8004342:	801a      	strh	r2, [r3, #0]
  Value->y = data_raw.i16bit[1];
 8004344:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8004348:	683b      	ldr	r3, [r7, #0]
 800434a:	805a      	strh	r2, [r3, #2]
  Value->z = data_raw.i16bit[2];
 800434c:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8004350:	683b      	ldr	r3, [r7, #0]
 8004352:	809a      	strh	r2, [r3, #4]

  return LSM303AGR_OK;
 8004354:	2300      	movs	r3, #0
}
 8004356:	4618      	mov	r0, r3
 8004358:	3710      	adds	r7, #16
 800435a:	46bd      	mov	sp, r7
 800435c:	bd80      	pop	{r7, pc}

0800435e <LSM303AGR_MAG_GetAxes>:
  * @param  pObj the device pObj
  * @param  MagneticField pointer where the values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM303AGR_MAG_GetAxes(LSM303AGR_MAG_Object_t *pObj, LSM303AGR_Axes_t *MagneticField)
{
 800435e:	b580      	push	{r7, lr}
 8004360:	b086      	sub	sp, #24
 8004362:	af00      	add	r7, sp, #0
 8004364:	6078      	str	r0, [r7, #4]
 8004366:	6039      	str	r1, [r7, #0]
  lsm303agr_axis3bit16_t data_raw;
  float sensitivity;

  /* Read raw data values. */
  if (lsm303agr_magnetic_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM303AGR_OK)
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	3320      	adds	r3, #32
 800436c:	f107 0210 	add.w	r2, r7, #16
 8004370:	4611      	mov	r1, r2
 8004372:	4618      	mov	r0, r3
 8004374:	f000 fcf4 	bl	8004d60 <lsm303agr_magnetic_raw_get>
 8004378:	4603      	mov	r3, r0
 800437a:	2b00      	cmp	r3, #0
 800437c:	d002      	beq.n	8004384 <LSM303AGR_MAG_GetAxes+0x26>
  {
    return LSM303AGR_ERROR;
 800437e:	f04f 33ff 	mov.w	r3, #4294967295
 8004382:	e036      	b.n	80043f2 <LSM303AGR_MAG_GetAxes+0x94>
  }

  /* Get LSM303AGR actual sensitivity. */
  (void)LSM303AGR_MAG_GetSensitivity(pObj, &sensitivity);
 8004384:	f107 030c 	add.w	r3, r7, #12
 8004388:	4619      	mov	r1, r3
 800438a:	6878      	ldr	r0, [r7, #4]
 800438c:	f7ff ff14 	bl	80041b8 <LSM303AGR_MAG_GetSensitivity>

  /* Calculate the data. */
  MagneticField->x = (int32_t)((float)((float)data_raw.i16bit[0] * sensitivity));
 8004390:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8004394:	ee07 3a90 	vmov	s15, r3
 8004398:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800439c:	edd7 7a03 	vldr	s15, [r7, #12]
 80043a0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80043a4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80043a8:	ee17 2a90 	vmov	r2, s15
 80043ac:	683b      	ldr	r3, [r7, #0]
 80043ae:	601a      	str	r2, [r3, #0]
  MagneticField->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 80043b0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80043b4:	ee07 3a90 	vmov	s15, r3
 80043b8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80043bc:	edd7 7a03 	vldr	s15, [r7, #12]
 80043c0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80043c4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80043c8:	ee17 2a90 	vmov	r2, s15
 80043cc:	683b      	ldr	r3, [r7, #0]
 80043ce:	605a      	str	r2, [r3, #4]
  MagneticField->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 80043d0:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80043d4:	ee07 3a90 	vmov	s15, r3
 80043d8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80043dc:	edd7 7a03 	vldr	s15, [r7, #12]
 80043e0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80043e4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80043e8:	ee17 2a90 	vmov	r2, s15
 80043ec:	683b      	ldr	r3, [r7, #0]
 80043ee:	609a      	str	r2, [r3, #8]

  return LSM303AGR_OK;
 80043f0:	2300      	movs	r3, #0
}
 80043f2:	4618      	mov	r0, r3
 80043f4:	3718      	adds	r7, #24
 80043f6:	46bd      	mov	sp, r7
 80043f8:	bd80      	pop	{r7, pc}
	...

080043fc <LSM303AGR_ACC_GetSensitivityHR>:
  * @param  pObj the device pObj
  * @param  Sensitivity pointer to sensitivity
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM303AGR_ACC_GetSensitivityHR(LSM303AGR_ACC_Object_t *pObj, float *Sensitivity)
{
 80043fc:	b580      	push	{r7, lr}
 80043fe:	b084      	sub	sp, #16
 8004400:	af00      	add	r7, sp, #0
 8004402:	6078      	str	r0, [r7, #4]
 8004404:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM303AGR_OK;
 8004406:	2300      	movs	r3, #0
 8004408:	60fb      	str	r3, [r7, #12]
  lsm303agr_fs_a_t fullscale;

  /* Read actual full scale selection from sensor. */
  if (lsm303agr_xl_full_scale_get(&(pObj->Ctx), &fullscale) != LSM303AGR_OK)
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	3320      	adds	r3, #32
 800440e:	f107 020b 	add.w	r2, r7, #11
 8004412:	4611      	mov	r1, r2
 8004414:	4618      	mov	r0, r3
 8004416:	f000 fb4f 	bl	8004ab8 <lsm303agr_xl_full_scale_get>
 800441a:	4603      	mov	r3, r0
 800441c:	2b00      	cmp	r3, #0
 800441e:	d002      	beq.n	8004426 <LSM303AGR_ACC_GetSensitivityHR+0x2a>
  {
    return LSM303AGR_ERROR;
 8004420:	f04f 33ff 	mov.w	r3, #4294967295
 8004424:	e023      	b.n	800446e <LSM303AGR_ACC_GetSensitivityHR+0x72>
  }

  /* Store the sensitivity based on actual full scale. */
  switch (fullscale)
 8004426:	7afb      	ldrb	r3, [r7, #11]
 8004428:	2b03      	cmp	r3, #3
 800442a:	d81b      	bhi.n	8004464 <LSM303AGR_ACC_GetSensitivityHR+0x68>
 800442c:	a201      	add	r2, pc, #4	; (adr r2, 8004434 <LSM303AGR_ACC_GetSensitivityHR+0x38>)
 800442e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004432:	bf00      	nop
 8004434:	08004445 	.word	0x08004445
 8004438:	0800444d 	.word	0x0800444d
 800443c:	08004455 	.word	0x08004455
 8004440:	0800445d 	.word	0x0800445d
  {
    case LSM303AGR_2g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_2G_HIGH_RESOLUTION_MODE;
 8004444:	683b      	ldr	r3, [r7, #0]
 8004446:	4a0c      	ldr	r2, [pc, #48]	; (8004478 <LSM303AGR_ACC_GetSensitivityHR+0x7c>)
 8004448:	601a      	str	r2, [r3, #0]
      break;
 800444a:	e00f      	b.n	800446c <LSM303AGR_ACC_GetSensitivityHR+0x70>

    case LSM303AGR_4g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_4G_HIGH_RESOLUTION_MODE;
 800444c:	683b      	ldr	r3, [r7, #0]
 800444e:	4a0b      	ldr	r2, [pc, #44]	; (800447c <LSM303AGR_ACC_GetSensitivityHR+0x80>)
 8004450:	601a      	str	r2, [r3, #0]
      break;
 8004452:	e00b      	b.n	800446c <LSM303AGR_ACC_GetSensitivityHR+0x70>

    case LSM303AGR_8g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_8G_HIGH_RESOLUTION_MODE;
 8004454:	683b      	ldr	r3, [r7, #0]
 8004456:	4a0a      	ldr	r2, [pc, #40]	; (8004480 <LSM303AGR_ACC_GetSensitivityHR+0x84>)
 8004458:	601a      	str	r2, [r3, #0]
      break;
 800445a:	e007      	b.n	800446c <LSM303AGR_ACC_GetSensitivityHR+0x70>

    case LSM303AGR_16g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_16G_HIGH_RESOLUTION_MODE;
 800445c:	683b      	ldr	r3, [r7, #0]
 800445e:	4a09      	ldr	r2, [pc, #36]	; (8004484 <LSM303AGR_ACC_GetSensitivityHR+0x88>)
 8004460:	601a      	str	r2, [r3, #0]
      break;
 8004462:	e003      	b.n	800446c <LSM303AGR_ACC_GetSensitivityHR+0x70>

    default:
      ret = LSM303AGR_ERROR;
 8004464:	f04f 33ff 	mov.w	r3, #4294967295
 8004468:	60fb      	str	r3, [r7, #12]
      break;
 800446a:	bf00      	nop
  }

  return ret;
 800446c:	68fb      	ldr	r3, [r7, #12]
}
 800446e:	4618      	mov	r0, r3
 8004470:	3710      	adds	r7, #16
 8004472:	46bd      	mov	sp, r7
 8004474:	bd80      	pop	{r7, pc}
 8004476:	bf00      	nop
 8004478:	3f7ae148 	.word	0x3f7ae148
 800447c:	3ff9999a 	.word	0x3ff9999a
 8004480:	4079999a 	.word	0x4079999a
 8004484:	413b851f 	.word	0x413b851f

08004488 <LSM303AGR_ACC_GetSensitivityNM>:
  * @param  pObj the device pObj
  * @param  Sensitivity pointer to sensitivity
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM303AGR_ACC_GetSensitivityNM(LSM303AGR_ACC_Object_t *pObj, float *Sensitivity)
{
 8004488:	b580      	push	{r7, lr}
 800448a:	b084      	sub	sp, #16
 800448c:	af00      	add	r7, sp, #0
 800448e:	6078      	str	r0, [r7, #4]
 8004490:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM303AGR_OK;
 8004492:	2300      	movs	r3, #0
 8004494:	60fb      	str	r3, [r7, #12]
  lsm303agr_fs_a_t fullscale;

  /* Read actual full scale selection from sensor. */
  if (lsm303agr_xl_full_scale_get(&(pObj->Ctx), &fullscale) != LSM303AGR_OK)
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	3320      	adds	r3, #32
 800449a:	f107 020b 	add.w	r2, r7, #11
 800449e:	4611      	mov	r1, r2
 80044a0:	4618      	mov	r0, r3
 80044a2:	f000 fb09 	bl	8004ab8 <lsm303agr_xl_full_scale_get>
 80044a6:	4603      	mov	r3, r0
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d002      	beq.n	80044b2 <LSM303AGR_ACC_GetSensitivityNM+0x2a>
  {
    return LSM303AGR_ERROR;
 80044ac:	f04f 33ff 	mov.w	r3, #4294967295
 80044b0:	e023      	b.n	80044fa <LSM303AGR_ACC_GetSensitivityNM+0x72>
  }

  /* Store the sensitivity based on actual full scale. */
  switch (fullscale)
 80044b2:	7afb      	ldrb	r3, [r7, #11]
 80044b4:	2b03      	cmp	r3, #3
 80044b6:	d81b      	bhi.n	80044f0 <LSM303AGR_ACC_GetSensitivityNM+0x68>
 80044b8:	a201      	add	r2, pc, #4	; (adr r2, 80044c0 <LSM303AGR_ACC_GetSensitivityNM+0x38>)
 80044ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044be:	bf00      	nop
 80044c0:	080044d1 	.word	0x080044d1
 80044c4:	080044d9 	.word	0x080044d9
 80044c8:	080044e1 	.word	0x080044e1
 80044cc:	080044e9 	.word	0x080044e9
  {
    case LSM303AGR_2g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_2G_NORMAL_MODE;
 80044d0:	683b      	ldr	r3, [r7, #0]
 80044d2:	4a0c      	ldr	r2, [pc, #48]	; (8004504 <LSM303AGR_ACC_GetSensitivityNM+0x7c>)
 80044d4:	601a      	str	r2, [r3, #0]
      break;
 80044d6:	e00f      	b.n	80044f8 <LSM303AGR_ACC_GetSensitivityNM+0x70>

    case LSM303AGR_4g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_4G_NORMAL_MODE;
 80044d8:	683b      	ldr	r3, [r7, #0]
 80044da:	4a0b      	ldr	r2, [pc, #44]	; (8004508 <LSM303AGR_ACC_GetSensitivityNM+0x80>)
 80044dc:	601a      	str	r2, [r3, #0]
      break;
 80044de:	e00b      	b.n	80044f8 <LSM303AGR_ACC_GetSensitivityNM+0x70>

    case LSM303AGR_8g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_8G_NORMAL_MODE;
 80044e0:	683b      	ldr	r3, [r7, #0]
 80044e2:	4a0a      	ldr	r2, [pc, #40]	; (800450c <LSM303AGR_ACC_GetSensitivityNM+0x84>)
 80044e4:	601a      	str	r2, [r3, #0]
      break;
 80044e6:	e007      	b.n	80044f8 <LSM303AGR_ACC_GetSensitivityNM+0x70>

    case LSM303AGR_16g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_16G_NORMAL_MODE;
 80044e8:	683b      	ldr	r3, [r7, #0]
 80044ea:	4a09      	ldr	r2, [pc, #36]	; (8004510 <LSM303AGR_ACC_GetSensitivityNM+0x88>)
 80044ec:	601a      	str	r2, [r3, #0]
      break;
 80044ee:	e003      	b.n	80044f8 <LSM303AGR_ACC_GetSensitivityNM+0x70>

    default:
      ret = LSM303AGR_ERROR;
 80044f0:	f04f 33ff 	mov.w	r3, #4294967295
 80044f4:	60fb      	str	r3, [r7, #12]
      break;
 80044f6:	bf00      	nop
  }

  return ret;
 80044f8:	68fb      	ldr	r3, [r7, #12]
}
 80044fa:	4618      	mov	r0, r3
 80044fc:	3710      	adds	r7, #16
 80044fe:	46bd      	mov	sp, r7
 8004500:	bd80      	pop	{r7, pc}
 8004502:	bf00      	nop
 8004504:	4079999a 	.word	0x4079999a
 8004508:	40fa3d71 	.word	0x40fa3d71
 800450c:	417a147b 	.word	0x417a147b
 8004510:	423b999a 	.word	0x423b999a

08004514 <LSM303AGR_ACC_GetSensitivityLP>:
  * @param  pObj the device pObj
  * @param  Sensitivity pointer to sensitivity
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM303AGR_ACC_GetSensitivityLP(LSM303AGR_ACC_Object_t *pObj, float *Sensitivity)
{
 8004514:	b580      	push	{r7, lr}
 8004516:	b084      	sub	sp, #16
 8004518:	af00      	add	r7, sp, #0
 800451a:	6078      	str	r0, [r7, #4]
 800451c:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM303AGR_OK;
 800451e:	2300      	movs	r3, #0
 8004520:	60fb      	str	r3, [r7, #12]
  lsm303agr_fs_a_t fullscale;

  /* Read actual full scale selection from sensor. */
  if (lsm303agr_xl_full_scale_get(&(pObj->Ctx), &fullscale) != LSM303AGR_OK)
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	3320      	adds	r3, #32
 8004526:	f107 020b 	add.w	r2, r7, #11
 800452a:	4611      	mov	r1, r2
 800452c:	4618      	mov	r0, r3
 800452e:	f000 fac3 	bl	8004ab8 <lsm303agr_xl_full_scale_get>
 8004532:	4603      	mov	r3, r0
 8004534:	2b00      	cmp	r3, #0
 8004536:	d002      	beq.n	800453e <LSM303AGR_ACC_GetSensitivityLP+0x2a>
  {
    return LSM303AGR_ERROR;
 8004538:	f04f 33ff 	mov.w	r3, #4294967295
 800453c:	e023      	b.n	8004586 <LSM303AGR_ACC_GetSensitivityLP+0x72>
  }

  /* Store the sensitivity based on actual full scale. */
  switch (fullscale)
 800453e:	7afb      	ldrb	r3, [r7, #11]
 8004540:	2b03      	cmp	r3, #3
 8004542:	d81b      	bhi.n	800457c <LSM303AGR_ACC_GetSensitivityLP+0x68>
 8004544:	a201      	add	r2, pc, #4	; (adr r2, 800454c <LSM303AGR_ACC_GetSensitivityLP+0x38>)
 8004546:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800454a:	bf00      	nop
 800454c:	0800455d 	.word	0x0800455d
 8004550:	08004565 	.word	0x08004565
 8004554:	0800456d 	.word	0x0800456d
 8004558:	08004575 	.word	0x08004575
  {
    case LSM303AGR_2g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_2G_LOW_POWER_MODE;
 800455c:	683b      	ldr	r3, [r7, #0]
 800455e:	4a0c      	ldr	r2, [pc, #48]	; (8004590 <LSM303AGR_ACC_GetSensitivityLP+0x7c>)
 8004560:	601a      	str	r2, [r3, #0]
      break;
 8004562:	e00f      	b.n	8004584 <LSM303AGR_ACC_GetSensitivityLP+0x70>

    case LSM303AGR_4g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_4G_LOW_POWER_MODE;
 8004564:	683b      	ldr	r3, [r7, #0]
 8004566:	4a0b      	ldr	r2, [pc, #44]	; (8004594 <LSM303AGR_ACC_GetSensitivityLP+0x80>)
 8004568:	601a      	str	r2, [r3, #0]
      break;
 800456a:	e00b      	b.n	8004584 <LSM303AGR_ACC_GetSensitivityLP+0x70>

    case LSM303AGR_8g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_8G_LOW_POWER_MODE;
 800456c:	683b      	ldr	r3, [r7, #0]
 800456e:	4a0a      	ldr	r2, [pc, #40]	; (8004598 <LSM303AGR_ACC_GetSensitivityLP+0x84>)
 8004570:	601a      	str	r2, [r3, #0]
      break;
 8004572:	e007      	b.n	8004584 <LSM303AGR_ACC_GetSensitivityLP+0x70>

    case LSM303AGR_16g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_16G_LOW_POWER_MODE;
 8004574:	683b      	ldr	r3, [r7, #0]
 8004576:	4a09      	ldr	r2, [pc, #36]	; (800459c <LSM303AGR_ACC_GetSensitivityLP+0x88>)
 8004578:	601a      	str	r2, [r3, #0]
      break;
 800457a:	e003      	b.n	8004584 <LSM303AGR_ACC_GetSensitivityLP+0x70>

    default:
      ret = LSM303AGR_ERROR;
 800457c:	f04f 33ff 	mov.w	r3, #4294967295
 8004580:	60fb      	str	r3, [r7, #12]
      break;
 8004582:	bf00      	nop
  }

  return ret;
 8004584:	68fb      	ldr	r3, [r7, #12]
}
 8004586:	4618      	mov	r0, r3
 8004588:	3710      	adds	r7, #16
 800458a:	46bd      	mov	sp, r7
 800458c:	bd80      	pop	{r7, pc}
 800458e:	bf00      	nop
 8004590:	417a147b 	.word	0x417a147b
 8004594:	41fa147b 	.word	0x41fa147b
 8004598:	427a147b 	.word	0x427a147b
 800459c:	433b947b 	.word	0x433b947b

080045a0 <LSM303AGR_ACC_SetOutputDataRate_When_Enabled>:
  * @param  pObj the device pObj
  * @param  Odr the functional output data rate to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM303AGR_ACC_SetOutputDataRate_When_Enabled(LSM303AGR_ACC_Object_t *pObj, float Odr)
{
 80045a0:	b580      	push	{r7, lr}
 80045a2:	b084      	sub	sp, #16
 80045a4:	af00      	add	r7, sp, #0
 80045a6:	6078      	str	r0, [r7, #4]
 80045a8:	ed87 0a00 	vstr	s0, [r7]
  lsm303agr_odr_a_t new_odr;

  new_odr = (Odr <=    1.0f) ? LSM303AGR_XL_ODR_1Hz
            : (Odr <=   10.0f) ? LSM303AGR_XL_ODR_10Hz
 80045ac:	edd7 7a00 	vldr	s15, [r7]
 80045b0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80045b4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80045b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80045bc:	d801      	bhi.n	80045c2 <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x22>
 80045be:	2301      	movs	r3, #1
 80045c0:	e037      	b.n	8004632 <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x92>
 80045c2:	edd7 7a00 	vldr	s15, [r7]
 80045c6:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80045ca:	eef4 7ac7 	vcmpe.f32	s15, s14
 80045ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80045d2:	d801      	bhi.n	80045d8 <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x38>
 80045d4:	2302      	movs	r3, #2
 80045d6:	e02c      	b.n	8004632 <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x92>
 80045d8:	edd7 7a00 	vldr	s15, [r7]
 80045dc:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 80045e0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80045e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80045e8:	d801      	bhi.n	80045ee <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x4e>
 80045ea:	2303      	movs	r3, #3
 80045ec:	e021      	b.n	8004632 <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x92>
 80045ee:	edd7 7a00 	vldr	s15, [r7]
 80045f2:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8004658 <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0xb8>
 80045f6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80045fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80045fe:	d801      	bhi.n	8004604 <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x64>
 8004600:	2304      	movs	r3, #4
 8004602:	e016      	b.n	8004632 <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x92>
 8004604:	edd7 7a00 	vldr	s15, [r7]
 8004608:	ed9f 7a14 	vldr	s14, [pc, #80]	; 800465c <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0xbc>
 800460c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004610:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004614:	d801      	bhi.n	800461a <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x7a>
 8004616:	2305      	movs	r3, #5
 8004618:	e00b      	b.n	8004632 <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x92>
 800461a:	edd7 7a00 	vldr	s15, [r7]
 800461e:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8004660 <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0xc0>
 8004622:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004626:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800462a:	d801      	bhi.n	8004630 <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x90>
 800462c:	2306      	movs	r3, #6
 800462e:	e000      	b.n	8004632 <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x92>
 8004630:	2307      	movs	r3, #7
  new_odr = (Odr <=    1.0f) ? LSM303AGR_XL_ODR_1Hz
 8004632:	73fb      	strb	r3, [r7, #15]
            : (Odr <=  100.0f) ? LSM303AGR_XL_ODR_100Hz
            : (Odr <=  200.0f) ? LSM303AGR_XL_ODR_200Hz
            :                    LSM303AGR_XL_ODR_400Hz;

  /* Output data rate selection. */
  if (lsm303agr_xl_data_rate_set(&(pObj->Ctx), new_odr) != LSM303AGR_OK)
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	3320      	adds	r3, #32
 8004638:	7bfa      	ldrb	r2, [r7, #15]
 800463a:	4611      	mov	r1, r2
 800463c:	4618      	mov	r0, r3
 800463e:	f000 f993 	bl	8004968 <lsm303agr_xl_data_rate_set>
 8004642:	4603      	mov	r3, r0
 8004644:	2b00      	cmp	r3, #0
 8004646:	d002      	beq.n	800464e <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0xae>
  {
    return LSM303AGR_ERROR;
 8004648:	f04f 33ff 	mov.w	r3, #4294967295
 800464c:	e000      	b.n	8004650 <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0xb0>
  }

  return LSM303AGR_OK;
 800464e:	2300      	movs	r3, #0
}
 8004650:	4618      	mov	r0, r3
 8004652:	3710      	adds	r7, #16
 8004654:	46bd      	mov	sp, r7
 8004656:	bd80      	pop	{r7, pc}
 8004658:	42480000 	.word	0x42480000
 800465c:	42c80000 	.word	0x42c80000
 8004660:	43480000 	.word	0x43480000

08004664 <LSM303AGR_ACC_SetOutputDataRate_When_Disabled>:
  * @param  pObj the device pObj
  * @param  Odr the functional output data rate to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM303AGR_ACC_SetOutputDataRate_When_Disabled(LSM303AGR_ACC_Object_t *pObj, float Odr)
{
 8004664:	b480      	push	{r7}
 8004666:	b083      	sub	sp, #12
 8004668:	af00      	add	r7, sp, #0
 800466a:	6078      	str	r0, [r7, #4]
 800466c:	ed87 0a00 	vstr	s0, [r7]
  pObj->acc_odr = (Odr <=    1.0f) ? LSM303AGR_XL_ODR_1Hz
                  : (Odr <=   10.0f) ? LSM303AGR_XL_ODR_10Hz
 8004670:	edd7 7a00 	vldr	s15, [r7]
 8004674:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004678:	eef4 7ac7 	vcmpe.f32	s15, s14
 800467c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004680:	d801      	bhi.n	8004686 <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0x22>
 8004682:	2301      	movs	r3, #1
 8004684:	e037      	b.n	80046f6 <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0x92>
 8004686:	edd7 7a00 	vldr	s15, [r7]
 800468a:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800468e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004692:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004696:	d801      	bhi.n	800469c <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0x38>
 8004698:	2302      	movs	r3, #2
 800469a:	e02c      	b.n	80046f6 <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0x92>
 800469c:	edd7 7a00 	vldr	s15, [r7]
 80046a0:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 80046a4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80046a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80046ac:	d801      	bhi.n	80046b2 <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0x4e>
 80046ae:	2303      	movs	r3, #3
 80046b0:	e021      	b.n	80046f6 <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0x92>
 80046b2:	edd7 7a00 	vldr	s15, [r7]
 80046b6:	ed9f 7a15 	vldr	s14, [pc, #84]	; 800470c <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0xa8>
 80046ba:	eef4 7ac7 	vcmpe.f32	s15, s14
 80046be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80046c2:	d801      	bhi.n	80046c8 <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0x64>
 80046c4:	2304      	movs	r3, #4
 80046c6:	e016      	b.n	80046f6 <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0x92>
 80046c8:	edd7 7a00 	vldr	s15, [r7]
 80046cc:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8004710 <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0xac>
 80046d0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80046d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80046d8:	d801      	bhi.n	80046de <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0x7a>
 80046da:	2305      	movs	r3, #5
 80046dc:	e00b      	b.n	80046f6 <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0x92>
 80046de:	edd7 7a00 	vldr	s15, [r7]
 80046e2:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8004714 <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0xb0>
 80046e6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80046ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80046ee:	d801      	bhi.n	80046f4 <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0x90>
 80046f0:	2306      	movs	r3, #6
 80046f2:	e000      	b.n	80046f6 <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0x92>
 80046f4:	2307      	movs	r3, #7
  pObj->acc_odr = (Odr <=    1.0f) ? LSM303AGR_XL_ODR_1Hz
 80046f6:	687a      	ldr	r2, [r7, #4]
 80046f8:	f882 3032 	strb.w	r3, [r2, #50]	; 0x32
                  : (Odr <=   50.0f) ? LSM303AGR_XL_ODR_50Hz
                  : (Odr <=  100.0f) ? LSM303AGR_XL_ODR_100Hz
                  : (Odr <=  200.0f) ? LSM303AGR_XL_ODR_200Hz
                  :                    LSM303AGR_XL_ODR_400Hz;

  return LSM303AGR_OK;
 80046fc:	2300      	movs	r3, #0
}
 80046fe:	4618      	mov	r0, r3
 8004700:	370c      	adds	r7, #12
 8004702:	46bd      	mov	sp, r7
 8004704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004708:	4770      	bx	lr
 800470a:	bf00      	nop
 800470c:	42480000 	.word	0x42480000
 8004710:	42c80000 	.word	0x42c80000
 8004714:	43480000 	.word	0x43480000

08004718 <ReadAccRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ReadAccRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8004718:	b590      	push	{r4, r7, lr}
 800471a:	b087      	sub	sp, #28
 800471c:	af00      	add	r7, sp, #0
 800471e:	60f8      	str	r0, [r7, #12]
 8004720:	607a      	str	r2, [r7, #4]
 8004722:	461a      	mov	r2, r3
 8004724:	460b      	mov	r3, r1
 8004726:	72fb      	strb	r3, [r7, #11]
 8004728:	4613      	mov	r3, r2
 800472a:	813b      	strh	r3, [r7, #8]
  LSM303AGR_ACC_Object_t *pObj = (LSM303AGR_ACC_Object_t *)Handle;
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == LSM303AGR_I2C_BUS) /* I2C */
 8004730:	697b      	ldr	r3, [r7, #20]
 8004732:	689b      	ldr	r3, [r3, #8]
 8004734:	2b00      	cmp	r3, #0
 8004736:	d10e      	bne.n	8004756 <ReadAccRegWrap+0x3e>
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 8004738:	697b      	ldr	r3, [r7, #20]
 800473a:	695c      	ldr	r4, [r3, #20]
 800473c:	697b      	ldr	r3, [r7, #20]
 800473e:	7b1b      	ldrb	r3, [r3, #12]
 8004740:	b298      	uxth	r0, r3
 8004742:	7afb      	ldrb	r3, [r7, #11]
 8004744:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004748:	b2db      	uxtb	r3, r3
 800474a:	b299      	uxth	r1, r3
 800474c:	893b      	ldrh	r3, [r7, #8]
 800474e:	687a      	ldr	r2, [r7, #4]
 8004750:	47a0      	blx	r4
 8004752:	4603      	mov	r3, r0
 8004754:	e00d      	b.n	8004772 <ReadAccRegWrap+0x5a>
  }
  else   /* SPI 3-Wires */
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 8004756:	697b      	ldr	r3, [r7, #20]
 8004758:	695c      	ldr	r4, [r3, #20]
 800475a:	697b      	ldr	r3, [r7, #20]
 800475c:	7b1b      	ldrb	r3, [r3, #12]
 800475e:	b298      	uxth	r0, r3
 8004760:	7afb      	ldrb	r3, [r7, #11]
 8004762:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004766:	b2db      	uxtb	r3, r3
 8004768:	b299      	uxth	r1, r3
 800476a:	893b      	ldrh	r3, [r7, #8]
 800476c:	687a      	ldr	r2, [r7, #4]
 800476e:	47a0      	blx	r4
 8004770:	4603      	mov	r3, r0
  }
}
 8004772:	4618      	mov	r0, r3
 8004774:	371c      	adds	r7, #28
 8004776:	46bd      	mov	sp, r7
 8004778:	bd90      	pop	{r4, r7, pc}

0800477a <WriteAccRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t WriteAccRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 800477a:	b590      	push	{r4, r7, lr}
 800477c:	b087      	sub	sp, #28
 800477e:	af00      	add	r7, sp, #0
 8004780:	60f8      	str	r0, [r7, #12]
 8004782:	607a      	str	r2, [r7, #4]
 8004784:	461a      	mov	r2, r3
 8004786:	460b      	mov	r3, r1
 8004788:	72fb      	strb	r3, [r7, #11]
 800478a:	4613      	mov	r3, r2
 800478c:	813b      	strh	r3, [r7, #8]
  LSM303AGR_ACC_Object_t *pObj = (LSM303AGR_ACC_Object_t *)Handle;
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == LSM303AGR_I2C_BUS) /* I2C */
 8004792:	697b      	ldr	r3, [r7, #20]
 8004794:	689b      	ldr	r3, [r3, #8]
 8004796:	2b00      	cmp	r3, #0
 8004798:	d10e      	bne.n	80047b8 <WriteAccRegWrap+0x3e>
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 800479a:	697b      	ldr	r3, [r7, #20]
 800479c:	691c      	ldr	r4, [r3, #16]
 800479e:	697b      	ldr	r3, [r7, #20]
 80047a0:	7b1b      	ldrb	r3, [r3, #12]
 80047a2:	b298      	uxth	r0, r3
 80047a4:	7afb      	ldrb	r3, [r7, #11]
 80047a6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80047aa:	b2db      	uxtb	r3, r3
 80047ac:	b299      	uxth	r1, r3
 80047ae:	893b      	ldrh	r3, [r7, #8]
 80047b0:	687a      	ldr	r2, [r7, #4]
 80047b2:	47a0      	blx	r4
 80047b4:	4603      	mov	r3, r0
 80047b6:	e00d      	b.n	80047d4 <WriteAccRegWrap+0x5a>
  }
  else   /* SPI 3-Wires */
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 80047b8:	697b      	ldr	r3, [r7, #20]
 80047ba:	691c      	ldr	r4, [r3, #16]
 80047bc:	697b      	ldr	r3, [r7, #20]
 80047be:	7b1b      	ldrb	r3, [r3, #12]
 80047c0:	b298      	uxth	r0, r3
 80047c2:	7afb      	ldrb	r3, [r7, #11]
 80047c4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80047c8:	b2db      	uxtb	r3, r3
 80047ca:	b299      	uxth	r1, r3
 80047cc:	893b      	ldrh	r3, [r7, #8]
 80047ce:	687a      	ldr	r2, [r7, #4]
 80047d0:	47a0      	blx	r4
 80047d2:	4603      	mov	r3, r0
  }
}
 80047d4:	4618      	mov	r0, r3
 80047d6:	371c      	adds	r7, #28
 80047d8:	46bd      	mov	sp, r7
 80047da:	bd90      	pop	{r4, r7, pc}

080047dc <ReadMagRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ReadMagRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 80047dc:	b590      	push	{r4, r7, lr}
 80047de:	b087      	sub	sp, #28
 80047e0:	af00      	add	r7, sp, #0
 80047e2:	60f8      	str	r0, [r7, #12]
 80047e4:	607a      	str	r2, [r7, #4]
 80047e6:	461a      	mov	r2, r3
 80047e8:	460b      	mov	r3, r1
 80047ea:	72fb      	strb	r3, [r7, #11]
 80047ec:	4613      	mov	r3, r2
 80047ee:	813b      	strh	r3, [r7, #8]
  LSM303AGR_MAG_Object_t *pObj = (LSM303AGR_MAG_Object_t *)Handle;
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == LSM303AGR_I2C_BUS) /* I2C */
 80047f4:	697b      	ldr	r3, [r7, #20]
 80047f6:	689b      	ldr	r3, [r3, #8]
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d10e      	bne.n	800481a <ReadMagRegWrap+0x3e>
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 80047fc:	697b      	ldr	r3, [r7, #20]
 80047fe:	695c      	ldr	r4, [r3, #20]
 8004800:	697b      	ldr	r3, [r7, #20]
 8004802:	7b1b      	ldrb	r3, [r3, #12]
 8004804:	b298      	uxth	r0, r3
 8004806:	7afb      	ldrb	r3, [r7, #11]
 8004808:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800480c:	b2db      	uxtb	r3, r3
 800480e:	b299      	uxth	r1, r3
 8004810:	893b      	ldrh	r3, [r7, #8]
 8004812:	687a      	ldr	r2, [r7, #4]
 8004814:	47a0      	blx	r4
 8004816:	4603      	mov	r3, r0
 8004818:	e00d      	b.n	8004836 <ReadMagRegWrap+0x5a>
  }
  else   /* SPI 3-Wires */
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 800481a:	697b      	ldr	r3, [r7, #20]
 800481c:	695c      	ldr	r4, [r3, #20]
 800481e:	697b      	ldr	r3, [r7, #20]
 8004820:	7b1b      	ldrb	r3, [r3, #12]
 8004822:	b298      	uxth	r0, r3
 8004824:	7afb      	ldrb	r3, [r7, #11]
 8004826:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800482a:	b2db      	uxtb	r3, r3
 800482c:	b299      	uxth	r1, r3
 800482e:	893b      	ldrh	r3, [r7, #8]
 8004830:	687a      	ldr	r2, [r7, #4]
 8004832:	47a0      	blx	r4
 8004834:	4603      	mov	r3, r0
  }
}
 8004836:	4618      	mov	r0, r3
 8004838:	371c      	adds	r7, #28
 800483a:	46bd      	mov	sp, r7
 800483c:	bd90      	pop	{r4, r7, pc}

0800483e <WriteMagRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t WriteMagRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 800483e:	b590      	push	{r4, r7, lr}
 8004840:	b087      	sub	sp, #28
 8004842:	af00      	add	r7, sp, #0
 8004844:	60f8      	str	r0, [r7, #12]
 8004846:	607a      	str	r2, [r7, #4]
 8004848:	461a      	mov	r2, r3
 800484a:	460b      	mov	r3, r1
 800484c:	72fb      	strb	r3, [r7, #11]
 800484e:	4613      	mov	r3, r2
 8004850:	813b      	strh	r3, [r7, #8]
  LSM303AGR_MAG_Object_t *pObj = (LSM303AGR_MAG_Object_t *)Handle;
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == LSM303AGR_I2C_BUS) /* I2C */
 8004856:	697b      	ldr	r3, [r7, #20]
 8004858:	689b      	ldr	r3, [r3, #8]
 800485a:	2b00      	cmp	r3, #0
 800485c:	d10e      	bne.n	800487c <WriteMagRegWrap+0x3e>
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 800485e:	697b      	ldr	r3, [r7, #20]
 8004860:	691c      	ldr	r4, [r3, #16]
 8004862:	697b      	ldr	r3, [r7, #20]
 8004864:	7b1b      	ldrb	r3, [r3, #12]
 8004866:	b298      	uxth	r0, r3
 8004868:	7afb      	ldrb	r3, [r7, #11]
 800486a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800486e:	b2db      	uxtb	r3, r3
 8004870:	b299      	uxth	r1, r3
 8004872:	893b      	ldrh	r3, [r7, #8]
 8004874:	687a      	ldr	r2, [r7, #4]
 8004876:	47a0      	blx	r4
 8004878:	4603      	mov	r3, r0
 800487a:	e00d      	b.n	8004898 <WriteMagRegWrap+0x5a>
  }
  else   /* SPI 3-Wires */
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 800487c:	697b      	ldr	r3, [r7, #20]
 800487e:	691c      	ldr	r4, [r3, #16]
 8004880:	697b      	ldr	r3, [r7, #20]
 8004882:	7b1b      	ldrb	r3, [r3, #12]
 8004884:	b298      	uxth	r0, r3
 8004886:	7afb      	ldrb	r3, [r7, #11]
 8004888:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800488c:	b2db      	uxtb	r3, r3
 800488e:	b299      	uxth	r1, r3
 8004890:	893b      	ldrh	r3, [r7, #8]
 8004892:	687a      	ldr	r2, [r7, #4]
 8004894:	47a0      	blx	r4
 8004896:	4603      	mov	r3, r0
  }
}
 8004898:	4618      	mov	r0, r3
 800489a:	371c      	adds	r7, #28
 800489c:	46bd      	mov	sp, r7
 800489e:	bd90      	pop	{r4, r7, pc}

080048a0 <lsm303agr_read_reg>:
  *
  */
int32_t lsm303agr_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                           uint8_t *data,
                           uint16_t len)
{
 80048a0:	b590      	push	{r4, r7, lr}
 80048a2:	b087      	sub	sp, #28
 80048a4:	af00      	add	r7, sp, #0
 80048a6:	60f8      	str	r0, [r7, #12]
 80048a8:	607a      	str	r2, [r7, #4]
 80048aa:	461a      	mov	r2, r3
 80048ac:	460b      	mov	r3, r1
 80048ae:	72fb      	strb	r3, [r7, #11]
 80048b0:	4613      	mov	r3, r2
 80048b2:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	685c      	ldr	r4, [r3, #4]
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	68d8      	ldr	r0, [r3, #12]
 80048bc:	893b      	ldrh	r3, [r7, #8]
 80048be:	7af9      	ldrb	r1, [r7, #11]
 80048c0:	687a      	ldr	r2, [r7, #4]
 80048c2:	47a0      	blx	r4
 80048c4:	6178      	str	r0, [r7, #20]

  return ret;
 80048c6:	697b      	ldr	r3, [r7, #20]
}
 80048c8:	4618      	mov	r0, r3
 80048ca:	371c      	adds	r7, #28
 80048cc:	46bd      	mov	sp, r7
 80048ce:	bd90      	pop	{r4, r7, pc}

080048d0 <lsm303agr_write_reg>:
  *
  */
int32_t lsm303agr_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                            uint8_t *data,
                            uint16_t len)
{
 80048d0:	b590      	push	{r4, r7, lr}
 80048d2:	b087      	sub	sp, #28
 80048d4:	af00      	add	r7, sp, #0
 80048d6:	60f8      	str	r0, [r7, #12]
 80048d8:	607a      	str	r2, [r7, #4]
 80048da:	461a      	mov	r2, r3
 80048dc:	460b      	mov	r3, r1
 80048de:	72fb      	strb	r3, [r7, #11]
 80048e0:	4613      	mov	r3, r2
 80048e2:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	681c      	ldr	r4, [r3, #0]
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	68d8      	ldr	r0, [r3, #12]
 80048ec:	893b      	ldrh	r3, [r7, #8]
 80048ee:	7af9      	ldrb	r1, [r7, #11]
 80048f0:	687a      	ldr	r2, [r7, #4]
 80048f2:	47a0      	blx	r4
 80048f4:	6178      	str	r0, [r7, #20]

  return ret;
 80048f6:	697b      	ldr	r3, [r7, #20]
}
 80048f8:	4618      	mov	r0, r3
 80048fa:	371c      	adds	r7, #28
 80048fc:	46bd      	mov	sp, r7
 80048fe:	bd90      	pop	{r4, r7, pc}

08004900 <lsm303agr_xl_operating_mode_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_xl_operating_mode_get(stmdev_ctx_t *ctx,
                                        lsm303agr_op_md_a_t *val)
{
 8004900:	b580      	push	{r7, lr}
 8004902:	b086      	sub	sp, #24
 8004904:	af00      	add	r7, sp, #0
 8004906:	6078      	str	r0, [r7, #4]
 8004908:	6039      	str	r1, [r7, #0]
  lsm303agr_ctrl_reg4_a_t ctrl_reg4_a;
  lsm303agr_ctrl_reg1_a_t ctrl_reg1_a;
  int32_t ret;

  ret = lsm303agr_read_reg(ctx, LSM303AGR_CTRL_REG1_A,
 800490a:	f107 020c 	add.w	r2, r7, #12
 800490e:	2301      	movs	r3, #1
 8004910:	2120      	movs	r1, #32
 8004912:	6878      	ldr	r0, [r7, #4]
 8004914:	f7ff ffc4 	bl	80048a0 <lsm303agr_read_reg>
 8004918:	6178      	str	r0, [r7, #20]
                           (uint8_t *)&ctrl_reg1_a, 1);

  if (ret == 0)
 800491a:	697b      	ldr	r3, [r7, #20]
 800491c:	2b00      	cmp	r3, #0
 800491e:	d107      	bne.n	8004930 <lsm303agr_xl_operating_mode_get+0x30>
  {
    ret = lsm303agr_read_reg(ctx, LSM303AGR_CTRL_REG4_A,
 8004920:	f107 0210 	add.w	r2, r7, #16
 8004924:	2301      	movs	r3, #1
 8004926:	2123      	movs	r1, #35	; 0x23
 8004928:	6878      	ldr	r0, [r7, #4]
 800492a:	f7ff ffb9 	bl	80048a0 <lsm303agr_read_reg>
 800492e:	6178      	str	r0, [r7, #20]
                             (uint8_t *)&ctrl_reg4_a, 1);
  }

  if (ctrl_reg1_a.lpen != PROPERTY_DISABLE)
 8004930:	7b3b      	ldrb	r3, [r7, #12]
 8004932:	f003 0308 	and.w	r3, r3, #8
 8004936:	b2db      	uxtb	r3, r3
 8004938:	2b00      	cmp	r3, #0
 800493a:	d003      	beq.n	8004944 <lsm303agr_xl_operating_mode_get+0x44>
  {
    *val = LSM303AGR_LP_8bit;
 800493c:	683b      	ldr	r3, [r7, #0]
 800493e:	2202      	movs	r2, #2
 8004940:	701a      	strb	r2, [r3, #0]
 8004942:	e00c      	b.n	800495e <lsm303agr_xl_operating_mode_get+0x5e>
  }

  else if (ctrl_reg4_a.hr  != PROPERTY_DISABLE)
 8004944:	7c3b      	ldrb	r3, [r7, #16]
 8004946:	f003 0308 	and.w	r3, r3, #8
 800494a:	b2db      	uxtb	r3, r3
 800494c:	2b00      	cmp	r3, #0
 800494e:	d003      	beq.n	8004958 <lsm303agr_xl_operating_mode_get+0x58>
  {
    *val = LSM303AGR_HR_12bit;
 8004950:	683b      	ldr	r3, [r7, #0]
 8004952:	2200      	movs	r2, #0
 8004954:	701a      	strb	r2, [r3, #0]
 8004956:	e002      	b.n	800495e <lsm303agr_xl_operating_mode_get+0x5e>
  }

  else
  {
    *val = LSM303AGR_NM_10bit;
 8004958:	683b      	ldr	r3, [r7, #0]
 800495a:	2201      	movs	r2, #1
 800495c:	701a      	strb	r2, [r3, #0]
  }

  return ret;
 800495e:	697b      	ldr	r3, [r7, #20]
}
 8004960:	4618      	mov	r0, r3
 8004962:	3718      	adds	r7, #24
 8004964:	46bd      	mov	sp, r7
 8004966:	bd80      	pop	{r7, pc}

08004968 <lsm303agr_xl_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_xl_data_rate_set(stmdev_ctx_t *ctx,
                                   lsm303agr_odr_a_t val)
{
 8004968:	b580      	push	{r7, lr}
 800496a:	b084      	sub	sp, #16
 800496c:	af00      	add	r7, sp, #0
 800496e:	6078      	str	r0, [r7, #4]
 8004970:	460b      	mov	r3, r1
 8004972:	70fb      	strb	r3, [r7, #3]
  lsm303agr_ctrl_reg1_a_t ctrl_reg1_a;
  int32_t ret;

  ret = lsm303agr_read_reg(ctx, LSM303AGR_CTRL_REG1_A,
 8004974:	f107 0208 	add.w	r2, r7, #8
 8004978:	2301      	movs	r3, #1
 800497a:	2120      	movs	r1, #32
 800497c:	6878      	ldr	r0, [r7, #4]
 800497e:	f7ff ff8f 	bl	80048a0 <lsm303agr_read_reg>
 8004982:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&ctrl_reg1_a, 1);

  if (ret == 0)
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	2b00      	cmp	r3, #0
 8004988:	d10f      	bne.n	80049aa <lsm303agr_xl_data_rate_set+0x42>
  {
    ctrl_reg1_a.odr = (uint8_t)val;
 800498a:	78fb      	ldrb	r3, [r7, #3]
 800498c:	f003 030f 	and.w	r3, r3, #15
 8004990:	b2da      	uxtb	r2, r3
 8004992:	7a3b      	ldrb	r3, [r7, #8]
 8004994:	f362 1307 	bfi	r3, r2, #4, #4
 8004998:	723b      	strb	r3, [r7, #8]
    ret = lsm303agr_write_reg(ctx, LSM303AGR_CTRL_REG1_A,
 800499a:	f107 0208 	add.w	r2, r7, #8
 800499e:	2301      	movs	r3, #1
 80049a0:	2120      	movs	r1, #32
 80049a2:	6878      	ldr	r0, [r7, #4]
 80049a4:	f7ff ff94 	bl	80048d0 <lsm303agr_write_reg>
 80049a8:	60f8      	str	r0, [r7, #12]
                              (uint8_t *)&ctrl_reg1_a, 1);
  }

  return ret;
 80049aa:	68fb      	ldr	r3, [r7, #12]
}
 80049ac:	4618      	mov	r0, r3
 80049ae:	3710      	adds	r7, #16
 80049b0:	46bd      	mov	sp, r7
 80049b2:	bd80      	pop	{r7, pc}

080049b4 <lsm303agr_xl_data_rate_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_xl_data_rate_get(stmdev_ctx_t *ctx,
                                   lsm303agr_odr_a_t *val)
{
 80049b4:	b580      	push	{r7, lr}
 80049b6:	b084      	sub	sp, #16
 80049b8:	af00      	add	r7, sp, #0
 80049ba:	6078      	str	r0, [r7, #4]
 80049bc:	6039      	str	r1, [r7, #0]
  lsm303agr_ctrl_reg1_a_t ctrl_reg1_a;
  int32_t ret;

  ret = lsm303agr_read_reg(ctx, LSM303AGR_CTRL_REG1_A,
 80049be:	f107 0208 	add.w	r2, r7, #8
 80049c2:	2301      	movs	r3, #1
 80049c4:	2120      	movs	r1, #32
 80049c6:	6878      	ldr	r0, [r7, #4]
 80049c8:	f7ff ff6a 	bl	80048a0 <lsm303agr_read_reg>
 80049cc:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&ctrl_reg1_a, 1);

  switch (ctrl_reg1_a.odr)
 80049ce:	7a3b      	ldrb	r3, [r7, #8]
 80049d0:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80049d4:	b2db      	uxtb	r3, r3
 80049d6:	2b09      	cmp	r3, #9
 80049d8:	d83e      	bhi.n	8004a58 <lsm303agr_xl_data_rate_get+0xa4>
 80049da:	a201      	add	r2, pc, #4	; (adr r2, 80049e0 <lsm303agr_xl_data_rate_get+0x2c>)
 80049dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049e0:	08004a09 	.word	0x08004a09
 80049e4:	08004a11 	.word	0x08004a11
 80049e8:	08004a19 	.word	0x08004a19
 80049ec:	08004a21 	.word	0x08004a21
 80049f0:	08004a29 	.word	0x08004a29
 80049f4:	08004a31 	.word	0x08004a31
 80049f8:	08004a39 	.word	0x08004a39
 80049fc:	08004a41 	.word	0x08004a41
 8004a00:	08004a49 	.word	0x08004a49
 8004a04:	08004a51 	.word	0x08004a51
  {
    case LSM303AGR_XL_POWER_DOWN:
      *val = LSM303AGR_XL_POWER_DOWN;
 8004a08:	683b      	ldr	r3, [r7, #0]
 8004a0a:	2200      	movs	r2, #0
 8004a0c:	701a      	strb	r2, [r3, #0]
      break;
 8004a0e:	e027      	b.n	8004a60 <lsm303agr_xl_data_rate_get+0xac>

    case LSM303AGR_XL_ODR_1Hz:
      *val = LSM303AGR_XL_ODR_1Hz;
 8004a10:	683b      	ldr	r3, [r7, #0]
 8004a12:	2201      	movs	r2, #1
 8004a14:	701a      	strb	r2, [r3, #0]
      break;
 8004a16:	e023      	b.n	8004a60 <lsm303agr_xl_data_rate_get+0xac>

    case LSM303AGR_XL_ODR_10Hz:
      *val = LSM303AGR_XL_ODR_10Hz;
 8004a18:	683b      	ldr	r3, [r7, #0]
 8004a1a:	2202      	movs	r2, #2
 8004a1c:	701a      	strb	r2, [r3, #0]
      break;
 8004a1e:	e01f      	b.n	8004a60 <lsm303agr_xl_data_rate_get+0xac>

    case LSM303AGR_XL_ODR_25Hz:
      *val = LSM303AGR_XL_ODR_25Hz;
 8004a20:	683b      	ldr	r3, [r7, #0]
 8004a22:	2203      	movs	r2, #3
 8004a24:	701a      	strb	r2, [r3, #0]
      break;
 8004a26:	e01b      	b.n	8004a60 <lsm303agr_xl_data_rate_get+0xac>

    case LSM303AGR_XL_ODR_50Hz:
      *val = LSM303AGR_XL_ODR_50Hz;
 8004a28:	683b      	ldr	r3, [r7, #0]
 8004a2a:	2204      	movs	r2, #4
 8004a2c:	701a      	strb	r2, [r3, #0]
      break;
 8004a2e:	e017      	b.n	8004a60 <lsm303agr_xl_data_rate_get+0xac>

    case LSM303AGR_XL_ODR_100Hz:
      *val = LSM303AGR_XL_ODR_100Hz;
 8004a30:	683b      	ldr	r3, [r7, #0]
 8004a32:	2205      	movs	r2, #5
 8004a34:	701a      	strb	r2, [r3, #0]
      break;
 8004a36:	e013      	b.n	8004a60 <lsm303agr_xl_data_rate_get+0xac>

    case LSM303AGR_XL_ODR_200Hz:
      *val = LSM303AGR_XL_ODR_200Hz;
 8004a38:	683b      	ldr	r3, [r7, #0]
 8004a3a:	2206      	movs	r2, #6
 8004a3c:	701a      	strb	r2, [r3, #0]
      break;
 8004a3e:	e00f      	b.n	8004a60 <lsm303agr_xl_data_rate_get+0xac>

    case LSM303AGR_XL_ODR_400Hz:
      *val = LSM303AGR_XL_ODR_400Hz;
 8004a40:	683b      	ldr	r3, [r7, #0]
 8004a42:	2207      	movs	r2, #7
 8004a44:	701a      	strb	r2, [r3, #0]
      break;
 8004a46:	e00b      	b.n	8004a60 <lsm303agr_xl_data_rate_get+0xac>

    case LSM303AGR_XL_ODR_1kHz620_LP:
      *val = LSM303AGR_XL_ODR_1kHz620_LP;
 8004a48:	683b      	ldr	r3, [r7, #0]
 8004a4a:	2208      	movs	r2, #8
 8004a4c:	701a      	strb	r2, [r3, #0]
      break;
 8004a4e:	e007      	b.n	8004a60 <lsm303agr_xl_data_rate_get+0xac>

    case LSM303AGR_XL_ODR_1kHz344_NM_HP_5kHz376_LP:
      *val = LSM303AGR_XL_ODR_1kHz344_NM_HP_5kHz376_LP;
 8004a50:	683b      	ldr	r3, [r7, #0]
 8004a52:	2209      	movs	r2, #9
 8004a54:	701a      	strb	r2, [r3, #0]
      break;
 8004a56:	e003      	b.n	8004a60 <lsm303agr_xl_data_rate_get+0xac>

    default:
      *val = LSM303AGR_XL_POWER_DOWN;
 8004a58:	683b      	ldr	r3, [r7, #0]
 8004a5a:	2200      	movs	r2, #0
 8004a5c:	701a      	strb	r2, [r3, #0]
      break;
 8004a5e:	bf00      	nop
  }

  return ret;
 8004a60:	68fb      	ldr	r3, [r7, #12]
}
 8004a62:	4618      	mov	r0, r3
 8004a64:	3710      	adds	r7, #16
 8004a66:	46bd      	mov	sp, r7
 8004a68:	bd80      	pop	{r7, pc}
 8004a6a:	bf00      	nop

08004a6c <lsm303agr_xl_full_scale_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_xl_full_scale_set(stmdev_ctx_t *ctx,
                                    lsm303agr_fs_a_t val)
{
 8004a6c:	b580      	push	{r7, lr}
 8004a6e:	b084      	sub	sp, #16
 8004a70:	af00      	add	r7, sp, #0
 8004a72:	6078      	str	r0, [r7, #4]
 8004a74:	460b      	mov	r3, r1
 8004a76:	70fb      	strb	r3, [r7, #3]
  lsm303agr_ctrl_reg4_a_t ctrl_reg4_a;
  int32_t ret;

  ret = lsm303agr_read_reg(ctx, LSM303AGR_CTRL_REG4_A,
 8004a78:	f107 0208 	add.w	r2, r7, #8
 8004a7c:	2301      	movs	r3, #1
 8004a7e:	2123      	movs	r1, #35	; 0x23
 8004a80:	6878      	ldr	r0, [r7, #4]
 8004a82:	f7ff ff0d 	bl	80048a0 <lsm303agr_read_reg>
 8004a86:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&ctrl_reg4_a, 1);

  if (ret == 0)
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d10f      	bne.n	8004aae <lsm303agr_xl_full_scale_set+0x42>
  {
    ctrl_reg4_a.fs = (uint8_t)val;
 8004a8e:	78fb      	ldrb	r3, [r7, #3]
 8004a90:	f003 0303 	and.w	r3, r3, #3
 8004a94:	b2da      	uxtb	r2, r3
 8004a96:	7a3b      	ldrb	r3, [r7, #8]
 8004a98:	f362 1305 	bfi	r3, r2, #4, #2
 8004a9c:	723b      	strb	r3, [r7, #8]
    ret = lsm303agr_write_reg(ctx, LSM303AGR_CTRL_REG4_A,
 8004a9e:	f107 0208 	add.w	r2, r7, #8
 8004aa2:	2301      	movs	r3, #1
 8004aa4:	2123      	movs	r1, #35	; 0x23
 8004aa6:	6878      	ldr	r0, [r7, #4]
 8004aa8:	f7ff ff12 	bl	80048d0 <lsm303agr_write_reg>
 8004aac:	60f8      	str	r0, [r7, #12]
                              (uint8_t *)&ctrl_reg4_a, 1);
  }

  return ret;
 8004aae:	68fb      	ldr	r3, [r7, #12]
}
 8004ab0:	4618      	mov	r0, r3
 8004ab2:	3710      	adds	r7, #16
 8004ab4:	46bd      	mov	sp, r7
 8004ab6:	bd80      	pop	{r7, pc}

08004ab8 <lsm303agr_xl_full_scale_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_xl_full_scale_get(stmdev_ctx_t *ctx,
                                    lsm303agr_fs_a_t *val)
{
 8004ab8:	b580      	push	{r7, lr}
 8004aba:	b084      	sub	sp, #16
 8004abc:	af00      	add	r7, sp, #0
 8004abe:	6078      	str	r0, [r7, #4]
 8004ac0:	6039      	str	r1, [r7, #0]
  lsm303agr_ctrl_reg4_a_t ctrl_reg4_a;
  int32_t ret;

  ret = lsm303agr_read_reg(ctx, LSM303AGR_CTRL_REG4_A,
 8004ac2:	f107 0208 	add.w	r2, r7, #8
 8004ac6:	2301      	movs	r3, #1
 8004ac8:	2123      	movs	r1, #35	; 0x23
 8004aca:	6878      	ldr	r0, [r7, #4]
 8004acc:	f7ff fee8 	bl	80048a0 <lsm303agr_read_reg>
 8004ad0:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&ctrl_reg4_a, 1);

  switch (ctrl_reg4_a.fs)
 8004ad2:	7a3b      	ldrb	r3, [r7, #8]
 8004ad4:	f3c3 1301 	ubfx	r3, r3, #4, #2
 8004ad8:	b2db      	uxtb	r3, r3
 8004ada:	2b03      	cmp	r3, #3
 8004adc:	d81a      	bhi.n	8004b14 <lsm303agr_xl_full_scale_get+0x5c>
 8004ade:	a201      	add	r2, pc, #4	; (adr r2, 8004ae4 <lsm303agr_xl_full_scale_get+0x2c>)
 8004ae0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ae4:	08004af5 	.word	0x08004af5
 8004ae8:	08004afd 	.word	0x08004afd
 8004aec:	08004b05 	.word	0x08004b05
 8004af0:	08004b0d 	.word	0x08004b0d
  {
    case LSM303AGR_2g:
      *val = LSM303AGR_2g;
 8004af4:	683b      	ldr	r3, [r7, #0]
 8004af6:	2200      	movs	r2, #0
 8004af8:	701a      	strb	r2, [r3, #0]
      break;
 8004afa:	e00f      	b.n	8004b1c <lsm303agr_xl_full_scale_get+0x64>

    case LSM303AGR_4g:
      *val = LSM303AGR_4g;
 8004afc:	683b      	ldr	r3, [r7, #0]
 8004afe:	2201      	movs	r2, #1
 8004b00:	701a      	strb	r2, [r3, #0]
      break;
 8004b02:	e00b      	b.n	8004b1c <lsm303agr_xl_full_scale_get+0x64>

    case LSM303AGR_8g:
      *val = LSM303AGR_8g;
 8004b04:	683b      	ldr	r3, [r7, #0]
 8004b06:	2202      	movs	r2, #2
 8004b08:	701a      	strb	r2, [r3, #0]
      break;
 8004b0a:	e007      	b.n	8004b1c <lsm303agr_xl_full_scale_get+0x64>

    case LSM303AGR_16g:
      *val = LSM303AGR_16g;
 8004b0c:	683b      	ldr	r3, [r7, #0]
 8004b0e:	2203      	movs	r2, #3
 8004b10:	701a      	strb	r2, [r3, #0]
      break;
 8004b12:	e003      	b.n	8004b1c <lsm303agr_xl_full_scale_get+0x64>

    default:
      *val = LSM303AGR_2g;
 8004b14:	683b      	ldr	r3, [r7, #0]
 8004b16:	2200      	movs	r2, #0
 8004b18:	701a      	strb	r2, [r3, #0]
      break;
 8004b1a:	bf00      	nop
  }

  return ret;
 8004b1c:	68fb      	ldr	r3, [r7, #12]
}
 8004b1e:	4618      	mov	r0, r3
 8004b20:	3710      	adds	r7, #16
 8004b22:	46bd      	mov	sp, r7
 8004b24:	bd80      	pop	{r7, pc}
 8004b26:	bf00      	nop

08004b28 <lsm303agr_xl_block_data_update_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_xl_block_data_update_set(stmdev_ctx_t *ctx,
                                           uint8_t val)
{
 8004b28:	b580      	push	{r7, lr}
 8004b2a:	b084      	sub	sp, #16
 8004b2c:	af00      	add	r7, sp, #0
 8004b2e:	6078      	str	r0, [r7, #4]
 8004b30:	460b      	mov	r3, r1
 8004b32:	70fb      	strb	r3, [r7, #3]
  lsm303agr_ctrl_reg4_a_t ctrl_reg4_a;
  int32_t ret;

  ret = lsm303agr_read_reg(ctx, LSM303AGR_CTRL_REG4_A,
 8004b34:	f107 0208 	add.w	r2, r7, #8
 8004b38:	2301      	movs	r3, #1
 8004b3a:	2123      	movs	r1, #35	; 0x23
 8004b3c:	6878      	ldr	r0, [r7, #4]
 8004b3e:	f7ff feaf 	bl	80048a0 <lsm303agr_read_reg>
 8004b42:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&ctrl_reg4_a, 1);

  if (ret == 0)
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d10f      	bne.n	8004b6a <lsm303agr_xl_block_data_update_set+0x42>
  {
    ctrl_reg4_a.bdu = (uint8_t)val;
 8004b4a:	78fb      	ldrb	r3, [r7, #3]
 8004b4c:	f003 0301 	and.w	r3, r3, #1
 8004b50:	b2da      	uxtb	r2, r3
 8004b52:	7a3b      	ldrb	r3, [r7, #8]
 8004b54:	f362 13c7 	bfi	r3, r2, #7, #1
 8004b58:	723b      	strb	r3, [r7, #8]
    ret = lsm303agr_write_reg(ctx, LSM303AGR_CTRL_REG4_A,
 8004b5a:	f107 0208 	add.w	r2, r7, #8
 8004b5e:	2301      	movs	r3, #1
 8004b60:	2123      	movs	r1, #35	; 0x23
 8004b62:	6878      	ldr	r0, [r7, #4]
 8004b64:	f7ff feb4 	bl	80048d0 <lsm303agr_write_reg>
 8004b68:	60f8      	str	r0, [r7, #12]
                              (uint8_t *)&ctrl_reg4_a, 1);
  }

  return ret;
 8004b6a:	68fb      	ldr	r3, [r7, #12]
}
 8004b6c:	4618      	mov	r0, r3
 8004b6e:	3710      	adds	r7, #16
 8004b70:	46bd      	mov	sp, r7
 8004b72:	bd80      	pop	{r7, pc}

08004b74 <lsm303agr_acceleration_raw_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_acceleration_raw_get(stmdev_ctx_t *ctx,
                                       int16_t *val)
{
 8004b74:	b580      	push	{r7, lr}
 8004b76:	b086      	sub	sp, #24
 8004b78:	af00      	add	r7, sp, #0
 8004b7a:	6078      	str	r0, [r7, #4]
 8004b7c:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lsm303agr_read_reg(ctx, LSM303AGR_OUT_X_L_A, buff, 6);
 8004b7e:	f107 020c 	add.w	r2, r7, #12
 8004b82:	2306      	movs	r3, #6
 8004b84:	2128      	movs	r1, #40	; 0x28
 8004b86:	6878      	ldr	r0, [r7, #4]
 8004b88:	f7ff fe8a 	bl	80048a0 <lsm303agr_read_reg>
 8004b8c:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 8004b8e:	7b7b      	ldrb	r3, [r7, #13]
 8004b90:	b21a      	sxth	r2, r3
 8004b92:	683b      	ldr	r3, [r7, #0]
 8004b94:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 8004b96:	683b      	ldr	r3, [r7, #0]
 8004b98:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004b9c:	b29b      	uxth	r3, r3
 8004b9e:	021b      	lsls	r3, r3, #8
 8004ba0:	b29a      	uxth	r2, r3
 8004ba2:	7b3b      	ldrb	r3, [r7, #12]
 8004ba4:	b29b      	uxth	r3, r3
 8004ba6:	4413      	add	r3, r2
 8004ba8:	b29b      	uxth	r3, r3
 8004baa:	b21a      	sxth	r2, r3
 8004bac:	683b      	ldr	r3, [r7, #0]
 8004bae:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 8004bb0:	7bfa      	ldrb	r2, [r7, #15]
 8004bb2:	683b      	ldr	r3, [r7, #0]
 8004bb4:	3302      	adds	r3, #2
 8004bb6:	b212      	sxth	r2, r2
 8004bb8:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8004bba:	683b      	ldr	r3, [r7, #0]
 8004bbc:	3302      	adds	r3, #2
 8004bbe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004bc2:	b29b      	uxth	r3, r3
 8004bc4:	021b      	lsls	r3, r3, #8
 8004bc6:	b29a      	uxth	r2, r3
 8004bc8:	7bbb      	ldrb	r3, [r7, #14]
 8004bca:	b29b      	uxth	r3, r3
 8004bcc:	4413      	add	r3, r2
 8004bce:	b29a      	uxth	r2, r3
 8004bd0:	683b      	ldr	r3, [r7, #0]
 8004bd2:	3302      	adds	r3, #2
 8004bd4:	b212      	sxth	r2, r2
 8004bd6:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 8004bd8:	7c7a      	ldrb	r2, [r7, #17]
 8004bda:	683b      	ldr	r3, [r7, #0]
 8004bdc:	3304      	adds	r3, #4
 8004bde:	b212      	sxth	r2, r2
 8004be0:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8004be2:	683b      	ldr	r3, [r7, #0]
 8004be4:	3304      	adds	r3, #4
 8004be6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004bea:	b29b      	uxth	r3, r3
 8004bec:	021b      	lsls	r3, r3, #8
 8004bee:	b29a      	uxth	r2, r3
 8004bf0:	7c3b      	ldrb	r3, [r7, #16]
 8004bf2:	b29b      	uxth	r3, r3
 8004bf4:	4413      	add	r3, r2
 8004bf6:	b29a      	uxth	r2, r3
 8004bf8:	683b      	ldr	r3, [r7, #0]
 8004bfa:	3304      	adds	r3, #4
 8004bfc:	b212      	sxth	r2, r2
 8004bfe:	801a      	strh	r2, [r3, #0]

  return ret;
 8004c00:	697b      	ldr	r3, [r7, #20]
}
 8004c02:	4618      	mov	r0, r3
 8004c04:	3718      	adds	r7, #24
 8004c06:	46bd      	mov	sp, r7
 8004c08:	bd80      	pop	{r7, pc}

08004c0a <lsm303agr_mag_operating_mode_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_mag_operating_mode_set(stmdev_ctx_t *ctx,
                                         lsm303agr_md_m_t val)
{
 8004c0a:	b580      	push	{r7, lr}
 8004c0c:	b084      	sub	sp, #16
 8004c0e:	af00      	add	r7, sp, #0
 8004c10:	6078      	str	r0, [r7, #4]
 8004c12:	460b      	mov	r3, r1
 8004c14:	70fb      	strb	r3, [r7, #3]
  lsm303agr_cfg_reg_a_m_t cfg_reg_a_m;
  int32_t ret;

  ret = lsm303agr_read_reg(ctx, LSM303AGR_CFG_REG_A_M,
 8004c16:	f107 0208 	add.w	r2, r7, #8
 8004c1a:	2301      	movs	r3, #1
 8004c1c:	2160      	movs	r1, #96	; 0x60
 8004c1e:	6878      	ldr	r0, [r7, #4]
 8004c20:	f7ff fe3e 	bl	80048a0 <lsm303agr_read_reg>
 8004c24:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&cfg_reg_a_m, 1);

  if (ret == 0)
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d10f      	bne.n	8004c4c <lsm303agr_mag_operating_mode_set+0x42>
  {
    cfg_reg_a_m.md = (uint8_t)val;
 8004c2c:	78fb      	ldrb	r3, [r7, #3]
 8004c2e:	f003 0303 	and.w	r3, r3, #3
 8004c32:	b2da      	uxtb	r2, r3
 8004c34:	7a3b      	ldrb	r3, [r7, #8]
 8004c36:	f362 0301 	bfi	r3, r2, #0, #2
 8004c3a:	723b      	strb	r3, [r7, #8]
    ret = lsm303agr_write_reg(ctx, LSM303AGR_CFG_REG_A_M,
 8004c3c:	f107 0208 	add.w	r2, r7, #8
 8004c40:	2301      	movs	r3, #1
 8004c42:	2160      	movs	r1, #96	; 0x60
 8004c44:	6878      	ldr	r0, [r7, #4]
 8004c46:	f7ff fe43 	bl	80048d0 <lsm303agr_write_reg>
 8004c4a:	60f8      	str	r0, [r7, #12]
                              (uint8_t *)&cfg_reg_a_m, 1);
  }

  return ret;
 8004c4c:	68fb      	ldr	r3, [r7, #12]
}
 8004c4e:	4618      	mov	r0, r3
 8004c50:	3710      	adds	r7, #16
 8004c52:	46bd      	mov	sp, r7
 8004c54:	bd80      	pop	{r7, pc}

08004c56 <lsm303agr_mag_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_mag_data_rate_set(stmdev_ctx_t *ctx,
                                    lsm303agr_mg_odr_m_t val)
{
 8004c56:	b580      	push	{r7, lr}
 8004c58:	b084      	sub	sp, #16
 8004c5a:	af00      	add	r7, sp, #0
 8004c5c:	6078      	str	r0, [r7, #4]
 8004c5e:	460b      	mov	r3, r1
 8004c60:	70fb      	strb	r3, [r7, #3]
  lsm303agr_cfg_reg_a_m_t cfg_reg_a_m;
  int32_t ret;

  ret = lsm303agr_read_reg(ctx, LSM303AGR_CFG_REG_A_M,
 8004c62:	f107 0208 	add.w	r2, r7, #8
 8004c66:	2301      	movs	r3, #1
 8004c68:	2160      	movs	r1, #96	; 0x60
 8004c6a:	6878      	ldr	r0, [r7, #4]
 8004c6c:	f7ff fe18 	bl	80048a0 <lsm303agr_read_reg>
 8004c70:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&cfg_reg_a_m, 1);

  if (ret == 0)
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d10f      	bne.n	8004c98 <lsm303agr_mag_data_rate_set+0x42>
  {
    cfg_reg_a_m.odr = (uint8_t)val;
 8004c78:	78fb      	ldrb	r3, [r7, #3]
 8004c7a:	f003 0303 	and.w	r3, r3, #3
 8004c7e:	b2da      	uxtb	r2, r3
 8004c80:	7a3b      	ldrb	r3, [r7, #8]
 8004c82:	f362 0383 	bfi	r3, r2, #2, #2
 8004c86:	723b      	strb	r3, [r7, #8]
    ret = lsm303agr_write_reg(ctx, LSM303AGR_CFG_REG_A_M,
 8004c88:	f107 0208 	add.w	r2, r7, #8
 8004c8c:	2301      	movs	r3, #1
 8004c8e:	2160      	movs	r1, #96	; 0x60
 8004c90:	6878      	ldr	r0, [r7, #4]
 8004c92:	f7ff fe1d 	bl	80048d0 <lsm303agr_write_reg>
 8004c96:	60f8      	str	r0, [r7, #12]
                              (uint8_t *)&cfg_reg_a_m, 1);
  }

  return ret;
 8004c98:	68fb      	ldr	r3, [r7, #12]
}
 8004c9a:	4618      	mov	r0, r3
 8004c9c:	3710      	adds	r7, #16
 8004c9e:	46bd      	mov	sp, r7
 8004ca0:	bd80      	pop	{r7, pc}
	...

08004ca4 <lsm303agr_mag_data_rate_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_mag_data_rate_get(stmdev_ctx_t *ctx,
                                    lsm303agr_mg_odr_m_t *val)
{
 8004ca4:	b580      	push	{r7, lr}
 8004ca6:	b084      	sub	sp, #16
 8004ca8:	af00      	add	r7, sp, #0
 8004caa:	6078      	str	r0, [r7, #4]
 8004cac:	6039      	str	r1, [r7, #0]
  lsm303agr_cfg_reg_a_m_t cfg_reg_a_m;
  int32_t ret;

  ret = lsm303agr_read_reg(ctx, LSM303AGR_CFG_REG_A_M,
 8004cae:	f107 0208 	add.w	r2, r7, #8
 8004cb2:	2301      	movs	r3, #1
 8004cb4:	2160      	movs	r1, #96	; 0x60
 8004cb6:	6878      	ldr	r0, [r7, #4]
 8004cb8:	f7ff fdf2 	bl	80048a0 <lsm303agr_read_reg>
 8004cbc:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&cfg_reg_a_m, 1);

  switch (cfg_reg_a_m.odr)
 8004cbe:	7a3b      	ldrb	r3, [r7, #8]
 8004cc0:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8004cc4:	b2db      	uxtb	r3, r3
 8004cc6:	2b03      	cmp	r3, #3
 8004cc8:	d81a      	bhi.n	8004d00 <lsm303agr_mag_data_rate_get+0x5c>
 8004cca:	a201      	add	r2, pc, #4	; (adr r2, 8004cd0 <lsm303agr_mag_data_rate_get+0x2c>)
 8004ccc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cd0:	08004ce1 	.word	0x08004ce1
 8004cd4:	08004ce9 	.word	0x08004ce9
 8004cd8:	08004cf1 	.word	0x08004cf1
 8004cdc:	08004cf9 	.word	0x08004cf9
  {
    case LSM303AGR_MG_ODR_10Hz:
      *val = LSM303AGR_MG_ODR_10Hz;
 8004ce0:	683b      	ldr	r3, [r7, #0]
 8004ce2:	2200      	movs	r2, #0
 8004ce4:	701a      	strb	r2, [r3, #0]
      break;
 8004ce6:	e00f      	b.n	8004d08 <lsm303agr_mag_data_rate_get+0x64>

    case LSM303AGR_MG_ODR_20Hz:
      *val = LSM303AGR_MG_ODR_20Hz;
 8004ce8:	683b      	ldr	r3, [r7, #0]
 8004cea:	2201      	movs	r2, #1
 8004cec:	701a      	strb	r2, [r3, #0]
      break;
 8004cee:	e00b      	b.n	8004d08 <lsm303agr_mag_data_rate_get+0x64>

    case LSM303AGR_MG_ODR_50Hz:
      *val = LSM303AGR_MG_ODR_50Hz;
 8004cf0:	683b      	ldr	r3, [r7, #0]
 8004cf2:	2202      	movs	r2, #2
 8004cf4:	701a      	strb	r2, [r3, #0]
      break;
 8004cf6:	e007      	b.n	8004d08 <lsm303agr_mag_data_rate_get+0x64>

    case LSM303AGR_MG_ODR_100Hz:
      *val = LSM303AGR_MG_ODR_100Hz;
 8004cf8:	683b      	ldr	r3, [r7, #0]
 8004cfa:	2203      	movs	r2, #3
 8004cfc:	701a      	strb	r2, [r3, #0]
      break;
 8004cfe:	e003      	b.n	8004d08 <lsm303agr_mag_data_rate_get+0x64>

    default:
      *val = LSM303AGR_MG_ODR_10Hz;
 8004d00:	683b      	ldr	r3, [r7, #0]
 8004d02:	2200      	movs	r2, #0
 8004d04:	701a      	strb	r2, [r3, #0]
      break;
 8004d06:	bf00      	nop
  }

  return ret;
 8004d08:	68fb      	ldr	r3, [r7, #12]
}
 8004d0a:	4618      	mov	r0, r3
 8004d0c:	3710      	adds	r7, #16
 8004d0e:	46bd      	mov	sp, r7
 8004d10:	bd80      	pop	{r7, pc}
 8004d12:	bf00      	nop

08004d14 <lsm303agr_mag_block_data_update_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_mag_block_data_update_set(stmdev_ctx_t *ctx,
                                            uint8_t val)
{
 8004d14:	b580      	push	{r7, lr}
 8004d16:	b084      	sub	sp, #16
 8004d18:	af00      	add	r7, sp, #0
 8004d1a:	6078      	str	r0, [r7, #4]
 8004d1c:	460b      	mov	r3, r1
 8004d1e:	70fb      	strb	r3, [r7, #3]
  lsm303agr_cfg_reg_c_m_t cfg_reg_c_m;
  int32_t ret;

  ret = lsm303agr_read_reg(ctx, LSM303AGR_CFG_REG_C_M,
 8004d20:	f107 0208 	add.w	r2, r7, #8
 8004d24:	2301      	movs	r3, #1
 8004d26:	2162      	movs	r1, #98	; 0x62
 8004d28:	6878      	ldr	r0, [r7, #4]
 8004d2a:	f7ff fdb9 	bl	80048a0 <lsm303agr_read_reg>
 8004d2e:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&cfg_reg_c_m, 1);

  if (ret == 0)
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d10f      	bne.n	8004d56 <lsm303agr_mag_block_data_update_set+0x42>
  {
    cfg_reg_c_m.bdu = (uint8_t)val;
 8004d36:	78fb      	ldrb	r3, [r7, #3]
 8004d38:	f003 0301 	and.w	r3, r3, #1
 8004d3c:	b2da      	uxtb	r2, r3
 8004d3e:	7a3b      	ldrb	r3, [r7, #8]
 8004d40:	f362 1304 	bfi	r3, r2, #4, #1
 8004d44:	723b      	strb	r3, [r7, #8]
    ret = lsm303agr_write_reg(ctx, LSM303AGR_CFG_REG_C_M,
 8004d46:	f107 0208 	add.w	r2, r7, #8
 8004d4a:	2301      	movs	r3, #1
 8004d4c:	2162      	movs	r1, #98	; 0x62
 8004d4e:	6878      	ldr	r0, [r7, #4]
 8004d50:	f7ff fdbe 	bl	80048d0 <lsm303agr_write_reg>
 8004d54:	60f8      	str	r0, [r7, #12]
                              (uint8_t *)&cfg_reg_c_m, 1);
  }

  return ret;
 8004d56:	68fb      	ldr	r3, [r7, #12]
}
 8004d58:	4618      	mov	r0, r3
 8004d5a:	3710      	adds	r7, #16
 8004d5c:	46bd      	mov	sp, r7
 8004d5e:	bd80      	pop	{r7, pc}

08004d60 <lsm303agr_magnetic_raw_get>:
  * @param  buff   Buffer that stores data read.(ptr)
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_magnetic_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8004d60:	b580      	push	{r7, lr}
 8004d62:	b086      	sub	sp, #24
 8004d64:	af00      	add	r7, sp, #0
 8004d66:	6078      	str	r0, [r7, #4]
 8004d68:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lsm303agr_read_reg(ctx, LSM303AGR_OUTX_L_REG_M, buff, 6);
 8004d6a:	f107 020c 	add.w	r2, r7, #12
 8004d6e:	2306      	movs	r3, #6
 8004d70:	2168      	movs	r1, #104	; 0x68
 8004d72:	6878      	ldr	r0, [r7, #4]
 8004d74:	f7ff fd94 	bl	80048a0 <lsm303agr_read_reg>
 8004d78:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 8004d7a:	7b7b      	ldrb	r3, [r7, #13]
 8004d7c:	b21a      	sxth	r2, r3
 8004d7e:	683b      	ldr	r3, [r7, #0]
 8004d80:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 8004d82:	683b      	ldr	r3, [r7, #0]
 8004d84:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004d88:	b29b      	uxth	r3, r3
 8004d8a:	021b      	lsls	r3, r3, #8
 8004d8c:	b29a      	uxth	r2, r3
 8004d8e:	7b3b      	ldrb	r3, [r7, #12]
 8004d90:	b29b      	uxth	r3, r3
 8004d92:	4413      	add	r3, r2
 8004d94:	b29b      	uxth	r3, r3
 8004d96:	b21a      	sxth	r2, r3
 8004d98:	683b      	ldr	r3, [r7, #0]
 8004d9a:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 8004d9c:	7bfa      	ldrb	r2, [r7, #15]
 8004d9e:	683b      	ldr	r3, [r7, #0]
 8004da0:	3302      	adds	r3, #2
 8004da2:	b212      	sxth	r2, r2
 8004da4:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8004da6:	683b      	ldr	r3, [r7, #0]
 8004da8:	3302      	adds	r3, #2
 8004daa:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004dae:	b29b      	uxth	r3, r3
 8004db0:	021b      	lsls	r3, r3, #8
 8004db2:	b29a      	uxth	r2, r3
 8004db4:	7bbb      	ldrb	r3, [r7, #14]
 8004db6:	b29b      	uxth	r3, r3
 8004db8:	4413      	add	r3, r2
 8004dba:	b29a      	uxth	r2, r3
 8004dbc:	683b      	ldr	r3, [r7, #0]
 8004dbe:	3302      	adds	r3, #2
 8004dc0:	b212      	sxth	r2, r2
 8004dc2:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 8004dc4:	7c7a      	ldrb	r2, [r7, #17]
 8004dc6:	683b      	ldr	r3, [r7, #0]
 8004dc8:	3304      	adds	r3, #4
 8004dca:	b212      	sxth	r2, r2
 8004dcc:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8004dce:	683b      	ldr	r3, [r7, #0]
 8004dd0:	3304      	adds	r3, #4
 8004dd2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004dd6:	b29b      	uxth	r3, r3
 8004dd8:	021b      	lsls	r3, r3, #8
 8004dda:	b29a      	uxth	r2, r3
 8004ddc:	7c3b      	ldrb	r3, [r7, #16]
 8004dde:	b29b      	uxth	r3, r3
 8004de0:	4413      	add	r3, r2
 8004de2:	b29a      	uxth	r2, r3
 8004de4:	683b      	ldr	r3, [r7, #0]
 8004de6:	3304      	adds	r3, #4
 8004de8:	b212      	sxth	r2, r2
 8004dea:	801a      	strh	r2, [r3, #0]

  return ret;
 8004dec:	697b      	ldr	r3, [r7, #20]
}
 8004dee:	4618      	mov	r0, r3
 8004df0:	3718      	adds	r7, #24
 8004df2:	46bd      	mov	sp, r7
 8004df4:	bd80      	pop	{r7, pc}

08004df6 <lsm303agr_xl_device_id_get>:
  * @param  buff   Buffer that stores data read.(ptr)
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_xl_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8004df6:	b580      	push	{r7, lr}
 8004df8:	b084      	sub	sp, #16
 8004dfa:	af00      	add	r7, sp, #0
 8004dfc:	6078      	str	r0, [r7, #4]
 8004dfe:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lsm303agr_read_reg(ctx, LSM303AGR_WHO_AM_I_A, buff, 1);
 8004e00:	2301      	movs	r3, #1
 8004e02:	683a      	ldr	r2, [r7, #0]
 8004e04:	210f      	movs	r1, #15
 8004e06:	6878      	ldr	r0, [r7, #4]
 8004e08:	f7ff fd4a 	bl	80048a0 <lsm303agr_read_reg>
 8004e0c:	60f8      	str	r0, [r7, #12]

  return ret;
 8004e0e:	68fb      	ldr	r3, [r7, #12]
}
 8004e10:	4618      	mov	r0, r3
 8004e12:	3710      	adds	r7, #16
 8004e14:	46bd      	mov	sp, r7
 8004e16:	bd80      	pop	{r7, pc}

08004e18 <lsm303agr_mag_device_id_get>:
  * @param  buff   Buffer that stores data read.(ptr)
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_mag_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8004e18:	b580      	push	{r7, lr}
 8004e1a:	b084      	sub	sp, #16
 8004e1c:	af00      	add	r7, sp, #0
 8004e1e:	6078      	str	r0, [r7, #4]
 8004e20:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lsm303agr_read_reg(ctx, LSM303AGR_WHO_AM_I_M, buff, 1);
 8004e22:	2301      	movs	r3, #1
 8004e24:	683a      	ldr	r2, [r7, #0]
 8004e26:	214f      	movs	r1, #79	; 0x4f
 8004e28:	6878      	ldr	r0, [r7, #4]
 8004e2a:	f7ff fd39 	bl	80048a0 <lsm303agr_read_reg>
 8004e2e:	60f8      	str	r0, [r7, #12]

  return ret;
 8004e30:	68fb      	ldr	r3, [r7, #12]
}
 8004e32:	4618      	mov	r0, r3
 8004e34:	3710      	adds	r7, #16
 8004e36:	46bd      	mov	sp, r7
 8004e38:	bd80      	pop	{r7, pc}

08004e3a <lsm303agr_mag_self_test_set>:
  * @param  val    Change the values of self_test in reg CFG_REG_C_M
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_mag_self_test_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8004e3a:	b580      	push	{r7, lr}
 8004e3c:	b084      	sub	sp, #16
 8004e3e:	af00      	add	r7, sp, #0
 8004e40:	6078      	str	r0, [r7, #4]
 8004e42:	460b      	mov	r3, r1
 8004e44:	70fb      	strb	r3, [r7, #3]
  lsm303agr_cfg_reg_c_m_t cfg_reg_c_m;
  int32_t ret;

  ret = lsm303agr_read_reg(ctx, LSM303AGR_CFG_REG_C_M,
 8004e46:	f107 0208 	add.w	r2, r7, #8
 8004e4a:	2301      	movs	r3, #1
 8004e4c:	2162      	movs	r1, #98	; 0x62
 8004e4e:	6878      	ldr	r0, [r7, #4]
 8004e50:	f7ff fd26 	bl	80048a0 <lsm303agr_read_reg>
 8004e54:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&cfg_reg_c_m, 1);

  if (ret == 0)
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d10f      	bne.n	8004e7c <lsm303agr_mag_self_test_set+0x42>
  {
    cfg_reg_c_m.self_test = (uint8_t)val;
 8004e5c:	78fb      	ldrb	r3, [r7, #3]
 8004e5e:	f003 0301 	and.w	r3, r3, #1
 8004e62:	b2da      	uxtb	r2, r3
 8004e64:	7a3b      	ldrb	r3, [r7, #8]
 8004e66:	f362 0341 	bfi	r3, r2, #1, #1
 8004e6a:	723b      	strb	r3, [r7, #8]
    ret = lsm303agr_write_reg(ctx, LSM303AGR_CFG_REG_C_M,
 8004e6c:	f107 0208 	add.w	r2, r7, #8
 8004e70:	2301      	movs	r3, #1
 8004e72:	2162      	movs	r1, #98	; 0x62
 8004e74:	6878      	ldr	r0, [r7, #4]
 8004e76:	f7ff fd2b 	bl	80048d0 <lsm303agr_write_reg>
 8004e7a:	60f8      	str	r0, [r7, #12]
                              (uint8_t *)&cfg_reg_c_m, 1);
  }

  return ret;
 8004e7c:	68fb      	ldr	r3, [r7, #12]
}
 8004e7e:	4618      	mov	r0, r3
 8004e80:	3710      	adds	r7, #16
 8004e82:	46bd      	mov	sp, r7
 8004e84:	bd80      	pop	{r7, pc}

08004e86 <lsm303agr_xl_fifo_mode_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_xl_fifo_mode_set(stmdev_ctx_t *ctx,
                                   lsm303agr_fm_a_t val)
{
 8004e86:	b580      	push	{r7, lr}
 8004e88:	b084      	sub	sp, #16
 8004e8a:	af00      	add	r7, sp, #0
 8004e8c:	6078      	str	r0, [r7, #4]
 8004e8e:	460b      	mov	r3, r1
 8004e90:	70fb      	strb	r3, [r7, #3]
  lsm303agr_fifo_ctrl_reg_a_t fifo_ctrl_reg_a;
  int32_t ret;

  ret = lsm303agr_read_reg(ctx, LSM303AGR_FIFO_CTRL_REG_A,
 8004e92:	f107 0208 	add.w	r2, r7, #8
 8004e96:	2301      	movs	r3, #1
 8004e98:	212e      	movs	r1, #46	; 0x2e
 8004e9a:	6878      	ldr	r0, [r7, #4]
 8004e9c:	f7ff fd00 	bl	80048a0 <lsm303agr_read_reg>
 8004ea0:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&fifo_ctrl_reg_a, 1);

  if (ret == 0)
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d10f      	bne.n	8004ec8 <lsm303agr_xl_fifo_mode_set+0x42>
  {
    fifo_ctrl_reg_a.fm = (uint8_t)val;
 8004ea8:	78fb      	ldrb	r3, [r7, #3]
 8004eaa:	f003 0303 	and.w	r3, r3, #3
 8004eae:	b2da      	uxtb	r2, r3
 8004eb0:	7a3b      	ldrb	r3, [r7, #8]
 8004eb2:	f362 1387 	bfi	r3, r2, #6, #2
 8004eb6:	723b      	strb	r3, [r7, #8]
    ret = lsm303agr_write_reg(ctx, LSM303AGR_FIFO_CTRL_REG_A,
 8004eb8:	f107 0208 	add.w	r2, r7, #8
 8004ebc:	2301      	movs	r3, #1
 8004ebe:	212e      	movs	r1, #46	; 0x2e
 8004ec0:	6878      	ldr	r0, [r7, #4]
 8004ec2:	f7ff fd05 	bl	80048d0 <lsm303agr_write_reg>
 8004ec6:	60f8      	str	r0, [r7, #12]
                              (uint8_t *)&fifo_ctrl_reg_a, 1);
  }

  return ret;
 8004ec8:	68fb      	ldr	r3, [r7, #12]
}
 8004eca:	4618      	mov	r0, r3
 8004ecc:	3710      	adds	r7, #16
 8004ece:	46bd      	mov	sp, r7
 8004ed0:	bd80      	pop	{r7, pc}

08004ed2 <lsm303agr_mag_i2c_interface_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_mag_i2c_interface_set(stmdev_ctx_t *ctx,
                                        lsm303agr_i2c_dis_m_t val)
{
 8004ed2:	b580      	push	{r7, lr}
 8004ed4:	b084      	sub	sp, #16
 8004ed6:	af00      	add	r7, sp, #0
 8004ed8:	6078      	str	r0, [r7, #4]
 8004eda:	460b      	mov	r3, r1
 8004edc:	70fb      	strb	r3, [r7, #3]
  lsm303agr_cfg_reg_c_m_t cfg_reg_c_m;
  int32_t ret;

  ret = lsm303agr_read_reg(ctx, LSM303AGR_CFG_REG_C_M,
 8004ede:	f107 0208 	add.w	r2, r7, #8
 8004ee2:	2301      	movs	r3, #1
 8004ee4:	2162      	movs	r1, #98	; 0x62
 8004ee6:	6878      	ldr	r0, [r7, #4]
 8004ee8:	f7ff fcda 	bl	80048a0 <lsm303agr_read_reg>
 8004eec:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&cfg_reg_c_m, 1);

  if (ret == 0)
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d10f      	bne.n	8004f14 <lsm303agr_mag_i2c_interface_set+0x42>
  {
    cfg_reg_c_m.i2c_dis = (uint8_t)val;
 8004ef4:	78fb      	ldrb	r3, [r7, #3]
 8004ef6:	f003 0301 	and.w	r3, r3, #1
 8004efa:	b2da      	uxtb	r2, r3
 8004efc:	7a3b      	ldrb	r3, [r7, #8]
 8004efe:	f362 1345 	bfi	r3, r2, #5, #1
 8004f02:	723b      	strb	r3, [r7, #8]
    ret = lsm303agr_write_reg(ctx, LSM303AGR_CFG_REG_C_M,
 8004f04:	f107 0208 	add.w	r2, r7, #8
 8004f08:	2301      	movs	r3, #1
 8004f0a:	2162      	movs	r1, #98	; 0x62
 8004f0c:	6878      	ldr	r0, [r7, #4]
 8004f0e:	f7ff fcdf 	bl	80048d0 <lsm303agr_write_reg>
 8004f12:	60f8      	str	r0, [r7, #12]
                              (uint8_t *)&cfg_reg_c_m, 1);
  }

  return ret;
 8004f14:	68fb      	ldr	r3, [r7, #12]
}
 8004f16:	4618      	mov	r0, r3
 8004f18:	3710      	adds	r7, #16
 8004f1a:	46bd      	mov	sp, r7
 8004f1c:	bd80      	pop	{r7, pc}
	...

08004f20 <LSM6DSL_RegisterBusIO>:
  * @brief  Register Component Bus IO operations
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSL_RegisterBusIO(LSM6DSL_Object_t *pObj, LSM6DSL_IO_t *pIO)
{
 8004f20:	b580      	push	{r7, lr}
 8004f22:	b084      	sub	sp, #16
 8004f24:	af00      	add	r7, sp, #0
 8004f26:	6078      	str	r0, [r7, #4]
 8004f28:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSL_OK;
 8004f2a:	2300      	movs	r3, #0
 8004f2c:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d103      	bne.n	8004f3c <LSM6DSL_RegisterBusIO+0x1c>
  {
    ret = LSM6DSL_ERROR;
 8004f34:	f04f 33ff 	mov.w	r3, #4294967295
 8004f38:	60fb      	str	r3, [r7, #12]
 8004f3a:	e051      	b.n	8004fe0 <LSM6DSL_RegisterBusIO+0xc0>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8004f3c:	683b      	ldr	r3, [r7, #0]
 8004f3e:	681a      	ldr	r2, [r3, #0]
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8004f44:	683b      	ldr	r3, [r7, #0]
 8004f46:	685a      	ldr	r2, [r3, #4]
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 8004f4c:	683b      	ldr	r3, [r7, #0]
 8004f4e:	689a      	ldr	r2, [r3, #8]
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 8004f54:	683b      	ldr	r3, [r7, #0]
 8004f56:	7b1a      	ldrb	r2, [r3, #12]
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8004f5c:	683b      	ldr	r3, [r7, #0]
 8004f5e:	691a      	ldr	r2, [r3, #16]
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8004f64:	683b      	ldr	r3, [r7, #0]
 8004f66:	695a      	ldr	r2, [r3, #20]
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 8004f6c:	683b      	ldr	r3, [r7, #0]
 8004f6e:	699a      	ldr	r2, [r3, #24]
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadRegWrap;
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	4a1d      	ldr	r2, [pc, #116]	; (8004fec <LSM6DSL_RegisterBusIO+0xcc>)
 8004f78:	625a      	str	r2, [r3, #36]	; 0x24
    pObj->Ctx.write_reg = WriteRegWrap;
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	4a1c      	ldr	r2, [pc, #112]	; (8004ff0 <LSM6DSL_RegisterBusIO+0xd0>)
 8004f7e:	621a      	str	r2, [r3, #32]
    pObj->Ctx.mdelay    = pIO->Delay;
 8004f80:	683b      	ldr	r3, [r7, #0]
 8004f82:	69da      	ldr	r2, [r3, #28]
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	629a      	str	r2, [r3, #40]	; 0x28
    pObj->Ctx.handle   = pObj;
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	687a      	ldr	r2, [r7, #4]
 8004f8c:	62da      	str	r2, [r3, #44]	; 0x2c

    if (pObj->IO.Init == NULL)
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d103      	bne.n	8004f9e <LSM6DSL_RegisterBusIO+0x7e>
    {
      ret = LSM6DSL_ERROR;
 8004f96:	f04f 33ff 	mov.w	r3, #4294967295
 8004f9a:	60fb      	str	r3, [r7, #12]
 8004f9c:	e020      	b.n	8004fe0 <LSM6DSL_RegisterBusIO+0xc0>
    }
    else if (pObj->IO.Init() != LSM6DSL_OK)
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	4798      	blx	r3
 8004fa4:	4603      	mov	r3, r0
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d003      	beq.n	8004fb2 <LSM6DSL_RegisterBusIO+0x92>
    {
      ret = LSM6DSL_ERROR;
 8004faa:	f04f 33ff 	mov.w	r3, #4294967295
 8004fae:	60fb      	str	r3, [r7, #12]
 8004fb0:	e016      	b.n	8004fe0 <LSM6DSL_RegisterBusIO+0xc0>
    }
    else
    {
      if (pObj->IO.BusType == LSM6DSL_SPI_3WIRES_BUS) /* SPI 3-Wires */
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	689b      	ldr	r3, [r3, #8]
 8004fb6:	2b02      	cmp	r3, #2
 8004fb8:	d112      	bne.n	8004fe0 <LSM6DSL_RegisterBusIO+0xc0>
      {
        /* Enable the SPI 3-Wires support only the first time */
        if (pObj->is_initialized == 0U)
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d10d      	bne.n	8004fe0 <LSM6DSL_RegisterBusIO+0xc0>
        {
          /* Enable SPI 3-Wires on the component */
          uint8_t data = 0x0C;
 8004fc4:	230c      	movs	r3, #12
 8004fc6:	72fb      	strb	r3, [r7, #11]

          if (LSM6DSL_Write_Reg(pObj, LSM6DSL_CTRL3_C, data) != LSM6DSL_OK)
 8004fc8:	7afb      	ldrb	r3, [r7, #11]
 8004fca:	461a      	mov	r2, r3
 8004fcc:	2112      	movs	r1, #18
 8004fce:	6878      	ldr	r0, [r7, #4]
 8004fd0:	f000 fd2d 	bl	8005a2e <LSM6DSL_Write_Reg>
 8004fd4:	4603      	mov	r3, r0
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d002      	beq.n	8004fe0 <LSM6DSL_RegisterBusIO+0xc0>
          {
            ret = LSM6DSL_ERROR;
 8004fda:	f04f 33ff 	mov.w	r3, #4294967295
 8004fde:	60fb      	str	r3, [r7, #12]
        }
      }
    }
  }

  return ret;
 8004fe0:	68fb      	ldr	r3, [r7, #12]
}
 8004fe2:	4618      	mov	r0, r3
 8004fe4:	3710      	adds	r7, #16
 8004fe6:	46bd      	mov	sp, r7
 8004fe8:	bd80      	pop	{r7, pc}
 8004fea:	bf00      	nop
 8004fec:	08005e9d 	.word	0x08005e9d
 8004ff0:	08005ed3 	.word	0x08005ed3

08004ff4 <LSM6DSL_Init>:
  * @brief  Initialize the LSM6DSL sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSL_Init(LSM6DSL_Object_t *pObj)
{
 8004ff4:	b580      	push	{r7, lr}
 8004ff6:	b082      	sub	sp, #8
 8004ff8:	af00      	add	r7, sp, #0
 8004ffa:	6078      	str	r0, [r7, #4]
  /* Enable register address automatically incremented during a multiple byte
  access with a serial interface. */
  if (lsm6dsl_auto_increment_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM6DSL_OK)
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	3320      	adds	r3, #32
 8005000:	2101      	movs	r1, #1
 8005002:	4618      	mov	r0, r3
 8005004:	f001 fa59 	bl	80064ba <lsm6dsl_auto_increment_set>
 8005008:	4603      	mov	r3, r0
 800500a:	2b00      	cmp	r3, #0
 800500c:	d002      	beq.n	8005014 <LSM6DSL_Init+0x20>
  {
    return LSM6DSL_ERROR;
 800500e:	f04f 33ff 	mov.w	r3, #4294967295
 8005012:	e054      	b.n	80050be <LSM6DSL_Init+0xca>
  }

  /* Enable BDU */
  if (lsm6dsl_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM6DSL_OK)
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	3320      	adds	r3, #32
 8005018:	2101      	movs	r1, #1
 800501a:	4618      	mov	r0, r3
 800501c:	f001 f980 	bl	8006320 <lsm6dsl_block_data_update_set>
 8005020:	4603      	mov	r3, r0
 8005022:	2b00      	cmp	r3, #0
 8005024:	d002      	beq.n	800502c <LSM6DSL_Init+0x38>
  {
    return LSM6DSL_ERROR;
 8005026:	f04f 33ff 	mov.w	r3, #4294967295
 800502a:	e048      	b.n	80050be <LSM6DSL_Init+0xca>
  }

  /* FIFO mode selection */
  if (lsm6dsl_fifo_mode_set(&(pObj->Ctx), LSM6DSL_BYPASS_MODE) != LSM6DSL_OK)
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	3320      	adds	r3, #32
 8005030:	2100      	movs	r1, #0
 8005032:	4618      	mov	r0, r3
 8005034:	f001 fa67 	bl	8006506 <lsm6dsl_fifo_mode_set>
 8005038:	4603      	mov	r3, r0
 800503a:	2b00      	cmp	r3, #0
 800503c:	d002      	beq.n	8005044 <LSM6DSL_Init+0x50>
  {
    return LSM6DSL_ERROR;
 800503e:	f04f 33ff 	mov.w	r3, #4294967295
 8005042:	e03c      	b.n	80050be <LSM6DSL_Init+0xca>
  }

  /* Select default output data rate. */
  pObj->acc_odr = LSM6DSL_XL_ODR_104Hz;
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	2204      	movs	r2, #4
 8005048:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33

  /* Output data rate selection - power down. */
  if (lsm6dsl_xl_data_rate_set(&(pObj->Ctx), LSM6DSL_XL_ODR_OFF) != LSM6DSL_OK)
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	3320      	adds	r3, #32
 8005050:	2100      	movs	r1, #0
 8005052:	4618      	mov	r0, r3
 8005054:	f000 ffe6 	bl	8006024 <lsm6dsl_xl_data_rate_set>
 8005058:	4603      	mov	r3, r0
 800505a:	2b00      	cmp	r3, #0
 800505c:	d002      	beq.n	8005064 <LSM6DSL_Init+0x70>
  {
    return LSM6DSL_ERROR;
 800505e:	f04f 33ff 	mov.w	r3, #4294967295
 8005062:	e02c      	b.n	80050be <LSM6DSL_Init+0xca>
  }

  /* Full scale selection. */
  if (lsm6dsl_xl_full_scale_set(&(pObj->Ctx), LSM6DSL_2g) != LSM6DSL_OK)
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	3320      	adds	r3, #32
 8005068:	2100      	movs	r1, #0
 800506a:	4618      	mov	r0, r3
 800506c:	f000 ff7c 	bl	8005f68 <lsm6dsl_xl_full_scale_set>
 8005070:	4603      	mov	r3, r0
 8005072:	2b00      	cmp	r3, #0
 8005074:	d002      	beq.n	800507c <LSM6DSL_Init+0x88>
  {
    return LSM6DSL_ERROR;
 8005076:	f04f 33ff 	mov.w	r3, #4294967295
 800507a:	e020      	b.n	80050be <LSM6DSL_Init+0xca>
  }

  /* Select default output data rate. */
  pObj->gyro_odr = LSM6DSL_GY_ODR_104Hz;
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	2204      	movs	r2, #4
 8005080:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Output data rate selection - power down. */
  if (lsm6dsl_gy_data_rate_set(&(pObj->Ctx), LSM6DSL_GY_ODR_OFF) != LSM6DSL_OK)
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	3320      	adds	r3, #32
 8005088:	2100      	movs	r1, #0
 800508a:	4618      	mov	r0, r3
 800508c:	f001 f8c0 	bl	8006210 <lsm6dsl_gy_data_rate_set>
 8005090:	4603      	mov	r3, r0
 8005092:	2b00      	cmp	r3, #0
 8005094:	d002      	beq.n	800509c <LSM6DSL_Init+0xa8>
  {
    return LSM6DSL_ERROR;
 8005096:	f04f 33ff 	mov.w	r3, #4294967295
 800509a:	e010      	b.n	80050be <LSM6DSL_Init+0xca>
  }

  /* Full scale selection. */
  if (lsm6dsl_gy_full_scale_set(&(pObj->Ctx), LSM6DSL_2000dps) != LSM6DSL_OK)
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	3320      	adds	r3, #32
 80050a0:	2106      	movs	r1, #6
 80050a2:	4618      	mov	r0, r3
 80050a4:	f001 f84c 	bl	8006140 <lsm6dsl_gy_full_scale_set>
 80050a8:	4603      	mov	r3, r0
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d002      	beq.n	80050b4 <LSM6DSL_Init+0xc0>
  {
    return LSM6DSL_ERROR;
 80050ae:	f04f 33ff 	mov.w	r3, #4294967295
 80050b2:	e004      	b.n	80050be <LSM6DSL_Init+0xca>
  }

  pObj->is_initialized = 1;
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	2201      	movs	r2, #1
 80050b8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return LSM6DSL_OK;
 80050bc:	2300      	movs	r3, #0
}
 80050be:	4618      	mov	r0, r3
 80050c0:	3708      	adds	r7, #8
 80050c2:	46bd      	mov	sp, r7
 80050c4:	bd80      	pop	{r7, pc}

080050c6 <LSM6DSL_DeInit>:
  * @brief  Deinitialize the LSM6DSL sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSL_DeInit(LSM6DSL_Object_t *pObj)
{
 80050c6:	b580      	push	{r7, lr}
 80050c8:	b082      	sub	sp, #8
 80050ca:	af00      	add	r7, sp, #0
 80050cc:	6078      	str	r0, [r7, #4]
  /* Disable the component */
  if (LSM6DSL_ACC_Disable(pObj) != LSM6DSL_OK)
 80050ce:	6878      	ldr	r0, [r7, #4]
 80050d0:	f000 f888 	bl	80051e4 <LSM6DSL_ACC_Disable>
 80050d4:	4603      	mov	r3, r0
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d002      	beq.n	80050e0 <LSM6DSL_DeInit+0x1a>
  {
    return LSM6DSL_ERROR;
 80050da:	f04f 33ff 	mov.w	r3, #4294967295
 80050de:	e015      	b.n	800510c <LSM6DSL_DeInit+0x46>
  }

  if (LSM6DSL_GYRO_Disable(pObj) != LSM6DSL_OK)
 80050e0:	6878      	ldr	r0, [r7, #4]
 80050e2:	f000 fa9a 	bl	800561a <LSM6DSL_GYRO_Disable>
 80050e6:	4603      	mov	r3, r0
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d002      	beq.n	80050f2 <LSM6DSL_DeInit+0x2c>
  {
    return LSM6DSL_ERROR;
 80050ec:	f04f 33ff 	mov.w	r3, #4294967295
 80050f0:	e00c      	b.n	800510c <LSM6DSL_DeInit+0x46>
  }

  /* Reset output data rate. */
  pObj->acc_odr = LSM6DSL_XL_ODR_OFF;
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	2200      	movs	r2, #0
 80050f6:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
  pObj->gyro_odr = LSM6DSL_GY_ODR_OFF;
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	2200      	movs	r2, #0
 80050fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  pObj->is_initialized = 0;
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	2200      	movs	r2, #0
 8005106:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return LSM6DSL_OK;
 800510a:	2300      	movs	r3, #0
}
 800510c:	4618      	mov	r0, r3
 800510e:	3708      	adds	r7, #8
 8005110:	46bd      	mov	sp, r7
 8005112:	bd80      	pop	{r7, pc}

08005114 <LSM6DSL_ReadID>:
  * @param  pObj the device pObj
  * @param  Id the WHO_AM_I value
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSL_ReadID(LSM6DSL_Object_t *pObj, uint8_t *Id)
{
 8005114:	b580      	push	{r7, lr}
 8005116:	b082      	sub	sp, #8
 8005118:	af00      	add	r7, sp, #0
 800511a:	6078      	str	r0, [r7, #4]
 800511c:	6039      	str	r1, [r7, #0]
  if (lsm6dsl_device_id_get(&(pObj->Ctx), Id) != LSM6DSL_OK)
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	3320      	adds	r3, #32
 8005122:	6839      	ldr	r1, [r7, #0]
 8005124:	4618      	mov	r0, r3
 8005126:	f001 f9b7 	bl	8006498 <lsm6dsl_device_id_get>
 800512a:	4603      	mov	r3, r0
 800512c:	2b00      	cmp	r3, #0
 800512e:	d002      	beq.n	8005136 <LSM6DSL_ReadID+0x22>
  {
    return LSM6DSL_ERROR;
 8005130:	f04f 33ff 	mov.w	r3, #4294967295
 8005134:	e000      	b.n	8005138 <LSM6DSL_ReadID+0x24>
  }

  return LSM6DSL_OK;
 8005136:	2300      	movs	r3, #0
}
 8005138:	4618      	mov	r0, r3
 800513a:	3708      	adds	r7, #8
 800513c:	46bd      	mov	sp, r7
 800513e:	bd80      	pop	{r7, pc}

08005140 <LSM6DSL_GetCapabilities>:
  * @param  pObj Component object pointer
  * @param  Capabilities pointer to LSM6DSL sensor capabilities
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSL_GetCapabilities(LSM6DSL_Object_t *pObj, LSM6DSL_Capabilities_t *Capabilities)
{
 8005140:	b480      	push	{r7}
 8005142:	b083      	sub	sp, #12
 8005144:	af00      	add	r7, sp, #0
 8005146:	6078      	str	r0, [r7, #4]
 8005148:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Acc          = 1;
 800514a:	683b      	ldr	r3, [r7, #0]
 800514c:	2201      	movs	r2, #1
 800514e:	701a      	strb	r2, [r3, #0]
  Capabilities->Gyro         = 1;
 8005150:	683b      	ldr	r3, [r7, #0]
 8005152:	2201      	movs	r2, #1
 8005154:	705a      	strb	r2, [r3, #1]
  Capabilities->Magneto      = 0;
 8005156:	683b      	ldr	r3, [r7, #0]
 8005158:	2200      	movs	r2, #0
 800515a:	709a      	strb	r2, [r3, #2]
  Capabilities->LowPower     = 0;
 800515c:	683b      	ldr	r3, [r7, #0]
 800515e:	2200      	movs	r2, #0
 8005160:	70da      	strb	r2, [r3, #3]
  Capabilities->GyroMaxFS    = 2000;
 8005162:	683b      	ldr	r3, [r7, #0]
 8005164:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8005168:	605a      	str	r2, [r3, #4]
  Capabilities->AccMaxFS     = 16;
 800516a:	683b      	ldr	r3, [r7, #0]
 800516c:	2210      	movs	r2, #16
 800516e:	609a      	str	r2, [r3, #8]
  Capabilities->MagMaxFS     = 0;
 8005170:	683b      	ldr	r3, [r7, #0]
 8005172:	2200      	movs	r2, #0
 8005174:	60da      	str	r2, [r3, #12]
  Capabilities->GyroMaxOdr   = 6660.0f;
 8005176:	683b      	ldr	r3, [r7, #0]
 8005178:	4a07      	ldr	r2, [pc, #28]	; (8005198 <LSM6DSL_GetCapabilities+0x58>)
 800517a:	611a      	str	r2, [r3, #16]
  Capabilities->AccMaxOdr    = 6660.0f;
 800517c:	683b      	ldr	r3, [r7, #0]
 800517e:	4a06      	ldr	r2, [pc, #24]	; (8005198 <LSM6DSL_GetCapabilities+0x58>)
 8005180:	615a      	str	r2, [r3, #20]
  Capabilities->MagMaxOdr    = 0.0f;
 8005182:	683b      	ldr	r3, [r7, #0]
 8005184:	f04f 0200 	mov.w	r2, #0
 8005188:	619a      	str	r2, [r3, #24]
  return LSM6DSL_OK;
 800518a:	2300      	movs	r3, #0
}
 800518c:	4618      	mov	r0, r3
 800518e:	370c      	adds	r7, #12
 8005190:	46bd      	mov	sp, r7
 8005192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005196:	4770      	bx	lr
 8005198:	45d02000 	.word	0x45d02000

0800519c <LSM6DSL_ACC_Enable>:
  * @brief  Enable the LSM6DSL accelerometer sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSL_ACC_Enable(LSM6DSL_Object_t *pObj)
{
 800519c:	b580      	push	{r7, lr}
 800519e:	b082      	sub	sp, #8
 80051a0:	af00      	add	r7, sp, #0
 80051a2:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->acc_is_enabled == 1U)
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80051aa:	2b01      	cmp	r3, #1
 80051ac:	d101      	bne.n	80051b2 <LSM6DSL_ACC_Enable+0x16>
  {
    return LSM6DSL_OK;
 80051ae:	2300      	movs	r3, #0
 80051b0:	e014      	b.n	80051dc <LSM6DSL_ACC_Enable+0x40>
  }

  /* Output data rate selection. */
  if (lsm6dsl_xl_data_rate_set(&(pObj->Ctx), pObj->acc_odr) != LSM6DSL_OK)
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	f103 0220 	add.w	r2, r3, #32
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 80051be:	4619      	mov	r1, r3
 80051c0:	4610      	mov	r0, r2
 80051c2:	f000 ff2f 	bl	8006024 <lsm6dsl_xl_data_rate_set>
 80051c6:	4603      	mov	r3, r0
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d002      	beq.n	80051d2 <LSM6DSL_ACC_Enable+0x36>
  {
    return LSM6DSL_ERROR;
 80051cc:	f04f 33ff 	mov.w	r3, #4294967295
 80051d0:	e004      	b.n	80051dc <LSM6DSL_ACC_Enable+0x40>
  }

  pObj->acc_is_enabled = 1;
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	2201      	movs	r2, #1
 80051d6:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  return LSM6DSL_OK;
 80051da:	2300      	movs	r3, #0
}
 80051dc:	4618      	mov	r0, r3
 80051de:	3708      	adds	r7, #8
 80051e0:	46bd      	mov	sp, r7
 80051e2:	bd80      	pop	{r7, pc}

080051e4 <LSM6DSL_ACC_Disable>:
  * @brief  Disable the LSM6DSL accelerometer sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSL_ACC_Disable(LSM6DSL_Object_t *pObj)
{
 80051e4:	b580      	push	{r7, lr}
 80051e6:	b082      	sub	sp, #8
 80051e8:	af00      	add	r7, sp, #0
 80051ea:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->acc_is_enabled == 0U)
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d101      	bne.n	80051fa <LSM6DSL_ACC_Disable+0x16>
  {
    return LSM6DSL_OK;
 80051f6:	2300      	movs	r3, #0
 80051f8:	e01f      	b.n	800523a <LSM6DSL_ACC_Disable+0x56>
  }

  /* Get current output data rate. */
  if (lsm6dsl_xl_data_rate_get(&(pObj->Ctx), &pObj->acc_odr) != LSM6DSL_OK)
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	f103 0220 	add.w	r2, r3, #32
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	3333      	adds	r3, #51	; 0x33
 8005204:	4619      	mov	r1, r3
 8005206:	4610      	mov	r0, r2
 8005208:	f000 ff32 	bl	8006070 <lsm6dsl_xl_data_rate_get>
 800520c:	4603      	mov	r3, r0
 800520e:	2b00      	cmp	r3, #0
 8005210:	d002      	beq.n	8005218 <LSM6DSL_ACC_Disable+0x34>
  {
    return LSM6DSL_ERROR;
 8005212:	f04f 33ff 	mov.w	r3, #4294967295
 8005216:	e010      	b.n	800523a <LSM6DSL_ACC_Disable+0x56>
  }

  /* Output data rate selection - power down. */
  if (lsm6dsl_xl_data_rate_set(&(pObj->Ctx), LSM6DSL_XL_ODR_OFF) != LSM6DSL_OK)
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	3320      	adds	r3, #32
 800521c:	2100      	movs	r1, #0
 800521e:	4618      	mov	r0, r3
 8005220:	f000 ff00 	bl	8006024 <lsm6dsl_xl_data_rate_set>
 8005224:	4603      	mov	r3, r0
 8005226:	2b00      	cmp	r3, #0
 8005228:	d002      	beq.n	8005230 <LSM6DSL_ACC_Disable+0x4c>
  {
    return LSM6DSL_ERROR;
 800522a:	f04f 33ff 	mov.w	r3, #4294967295
 800522e:	e004      	b.n	800523a <LSM6DSL_ACC_Disable+0x56>
  }

  pObj->acc_is_enabled = 0;
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	2200      	movs	r2, #0
 8005234:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  return LSM6DSL_OK;
 8005238:	2300      	movs	r3, #0
}
 800523a:	4618      	mov	r0, r3
 800523c:	3708      	adds	r7, #8
 800523e:	46bd      	mov	sp, r7
 8005240:	bd80      	pop	{r7, pc}
	...

08005244 <LSM6DSL_ACC_GetSensitivity>:
  * @param  pObj the device pObj
  * @param  Sensitivity pointer
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSL_ACC_GetSensitivity(LSM6DSL_Object_t *pObj, float *Sensitivity)
{
 8005244:	b580      	push	{r7, lr}
 8005246:	b084      	sub	sp, #16
 8005248:	af00      	add	r7, sp, #0
 800524a:	6078      	str	r0, [r7, #4]
 800524c:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSL_OK;
 800524e:	2300      	movs	r3, #0
 8005250:	60fb      	str	r3, [r7, #12]
  lsm6dsl_fs_xl_t full_scale;

  /* Read actual full scale selection from sensor. */
  if (lsm6dsl_xl_full_scale_get(&(pObj->Ctx), &full_scale) != LSM6DSL_OK)
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	3320      	adds	r3, #32
 8005256:	f107 020b 	add.w	r2, r7, #11
 800525a:	4611      	mov	r1, r2
 800525c:	4618      	mov	r0, r3
 800525e:	f000 fea9 	bl	8005fb4 <lsm6dsl_xl_full_scale_get>
 8005262:	4603      	mov	r3, r0
 8005264:	2b00      	cmp	r3, #0
 8005266:	d002      	beq.n	800526e <LSM6DSL_ACC_GetSensitivity+0x2a>
  {
    return LSM6DSL_ERROR;
 8005268:	f04f 33ff 	mov.w	r3, #4294967295
 800526c:	e023      	b.n	80052b6 <LSM6DSL_ACC_GetSensitivity+0x72>
  }

  /* Store the Sensitivity based on actual full scale. */
  switch (full_scale)
 800526e:	7afb      	ldrb	r3, [r7, #11]
 8005270:	2b03      	cmp	r3, #3
 8005272:	d81b      	bhi.n	80052ac <LSM6DSL_ACC_GetSensitivity+0x68>
 8005274:	a201      	add	r2, pc, #4	; (adr r2, 800527c <LSM6DSL_ACC_GetSensitivity+0x38>)
 8005276:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800527a:	bf00      	nop
 800527c:	0800528d 	.word	0x0800528d
 8005280:	080052a5 	.word	0x080052a5
 8005284:	08005295 	.word	0x08005295
 8005288:	0800529d 	.word	0x0800529d
  {
    case LSM6DSL_2g:
      *Sensitivity = LSM6DSL_ACC_SENSITIVITY_FS_2G;
 800528c:	683b      	ldr	r3, [r7, #0]
 800528e:	4a0c      	ldr	r2, [pc, #48]	; (80052c0 <LSM6DSL_ACC_GetSensitivity+0x7c>)
 8005290:	601a      	str	r2, [r3, #0]
      break;
 8005292:	e00f      	b.n	80052b4 <LSM6DSL_ACC_GetSensitivity+0x70>

    case LSM6DSL_4g:
      *Sensitivity = LSM6DSL_ACC_SENSITIVITY_FS_4G;
 8005294:	683b      	ldr	r3, [r7, #0]
 8005296:	4a0b      	ldr	r2, [pc, #44]	; (80052c4 <LSM6DSL_ACC_GetSensitivity+0x80>)
 8005298:	601a      	str	r2, [r3, #0]
      break;
 800529a:	e00b      	b.n	80052b4 <LSM6DSL_ACC_GetSensitivity+0x70>

    case LSM6DSL_8g:
      *Sensitivity = LSM6DSL_ACC_SENSITIVITY_FS_8G;
 800529c:	683b      	ldr	r3, [r7, #0]
 800529e:	4a0a      	ldr	r2, [pc, #40]	; (80052c8 <LSM6DSL_ACC_GetSensitivity+0x84>)
 80052a0:	601a      	str	r2, [r3, #0]
      break;
 80052a2:	e007      	b.n	80052b4 <LSM6DSL_ACC_GetSensitivity+0x70>

    case LSM6DSL_16g:
      *Sensitivity = LSM6DSL_ACC_SENSITIVITY_FS_16G;
 80052a4:	683b      	ldr	r3, [r7, #0]
 80052a6:	4a09      	ldr	r2, [pc, #36]	; (80052cc <LSM6DSL_ACC_GetSensitivity+0x88>)
 80052a8:	601a      	str	r2, [r3, #0]
      break;
 80052aa:	e003      	b.n	80052b4 <LSM6DSL_ACC_GetSensitivity+0x70>

    default:
      ret = LSM6DSL_ERROR;
 80052ac:	f04f 33ff 	mov.w	r3, #4294967295
 80052b0:	60fb      	str	r3, [r7, #12]
      break;
 80052b2:	bf00      	nop
  }

  return ret;
 80052b4:	68fb      	ldr	r3, [r7, #12]
}
 80052b6:	4618      	mov	r0, r3
 80052b8:	3710      	adds	r7, #16
 80052ba:	46bd      	mov	sp, r7
 80052bc:	bd80      	pop	{r7, pc}
 80052be:	bf00      	nop
 80052c0:	3d79db23 	.word	0x3d79db23
 80052c4:	3df9db23 	.word	0x3df9db23
 80052c8:	3e79db23 	.word	0x3e79db23
 80052cc:	3ef9db23 	.word	0x3ef9db23

080052d0 <LSM6DSL_ACC_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSL_ACC_GetOutputDataRate(LSM6DSL_Object_t *pObj, float *Odr)
{
 80052d0:	b580      	push	{r7, lr}
 80052d2:	b084      	sub	sp, #16
 80052d4:	af00      	add	r7, sp, #0
 80052d6:	6078      	str	r0, [r7, #4]
 80052d8:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSL_OK;
 80052da:	2300      	movs	r3, #0
 80052dc:	60fb      	str	r3, [r7, #12]
  lsm6dsl_odr_xl_t odr_low_level;

  /* Get current output data rate. */
  if (lsm6dsl_xl_data_rate_get(&(pObj->Ctx), &odr_low_level) != LSM6DSL_OK)
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	3320      	adds	r3, #32
 80052e2:	f107 020b 	add.w	r2, r7, #11
 80052e6:	4611      	mov	r1, r2
 80052e8:	4618      	mov	r0, r3
 80052ea:	f000 fec1 	bl	8006070 <lsm6dsl_xl_data_rate_get>
 80052ee:	4603      	mov	r3, r0
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d002      	beq.n	80052fa <LSM6DSL_ACC_GetOutputDataRate+0x2a>
  {
    return LSM6DSL_ERROR;
 80052f4:	f04f 33ff 	mov.w	r3, #4294967295
 80052f8:	e054      	b.n	80053a4 <LSM6DSL_ACC_GetOutputDataRate+0xd4>
  }

  switch (odr_low_level)
 80052fa:	7afb      	ldrb	r3, [r7, #11]
 80052fc:	2b0b      	cmp	r3, #11
 80052fe:	d84c      	bhi.n	800539a <LSM6DSL_ACC_GetOutputDataRate+0xca>
 8005300:	a201      	add	r2, pc, #4	; (adr r2, 8005308 <LSM6DSL_ACC_GetOutputDataRate+0x38>)
 8005302:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005306:	bf00      	nop
 8005308:	08005339 	.word	0x08005339
 800530c:	0800534b 	.word	0x0800534b
 8005310:	08005353 	.word	0x08005353
 8005314:	0800535b 	.word	0x0800535b
 8005318:	08005363 	.word	0x08005363
 800531c:	0800536b 	.word	0x0800536b
 8005320:	08005373 	.word	0x08005373
 8005324:	0800537b 	.word	0x0800537b
 8005328:	08005383 	.word	0x08005383
 800532c:	0800538b 	.word	0x0800538b
 8005330:	08005393 	.word	0x08005393
 8005334:	08005343 	.word	0x08005343
  {
    case LSM6DSL_XL_ODR_OFF:
      *Odr = 0.0f;
 8005338:	683b      	ldr	r3, [r7, #0]
 800533a:	f04f 0200 	mov.w	r2, #0
 800533e:	601a      	str	r2, [r3, #0]
      break;
 8005340:	e02f      	b.n	80053a2 <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    case LSM6DSL_XL_ODR_1Hz6:
      *Odr = 1.6f;
 8005342:	683b      	ldr	r3, [r7, #0]
 8005344:	4a19      	ldr	r2, [pc, #100]	; (80053ac <LSM6DSL_ACC_GetOutputDataRate+0xdc>)
 8005346:	601a      	str	r2, [r3, #0]
      break;
 8005348:	e02b      	b.n	80053a2 <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    case LSM6DSL_XL_ODR_12Hz5:
      *Odr = 12.5f;
 800534a:	683b      	ldr	r3, [r7, #0]
 800534c:	4a18      	ldr	r2, [pc, #96]	; (80053b0 <LSM6DSL_ACC_GetOutputDataRate+0xe0>)
 800534e:	601a      	str	r2, [r3, #0]
      break;
 8005350:	e027      	b.n	80053a2 <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    case LSM6DSL_XL_ODR_26Hz:
      *Odr = 26.0f;
 8005352:	683b      	ldr	r3, [r7, #0]
 8005354:	4a17      	ldr	r2, [pc, #92]	; (80053b4 <LSM6DSL_ACC_GetOutputDataRate+0xe4>)
 8005356:	601a      	str	r2, [r3, #0]
      break;
 8005358:	e023      	b.n	80053a2 <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    case LSM6DSL_XL_ODR_52Hz:
      *Odr = 52.0f;
 800535a:	683b      	ldr	r3, [r7, #0]
 800535c:	4a16      	ldr	r2, [pc, #88]	; (80053b8 <LSM6DSL_ACC_GetOutputDataRate+0xe8>)
 800535e:	601a      	str	r2, [r3, #0]
      break;
 8005360:	e01f      	b.n	80053a2 <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    case LSM6DSL_XL_ODR_104Hz:
      *Odr = 104.0f;
 8005362:	683b      	ldr	r3, [r7, #0]
 8005364:	4a15      	ldr	r2, [pc, #84]	; (80053bc <LSM6DSL_ACC_GetOutputDataRate+0xec>)
 8005366:	601a      	str	r2, [r3, #0]
      break;
 8005368:	e01b      	b.n	80053a2 <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    case LSM6DSL_XL_ODR_208Hz:
      *Odr = 208.0f;
 800536a:	683b      	ldr	r3, [r7, #0]
 800536c:	4a14      	ldr	r2, [pc, #80]	; (80053c0 <LSM6DSL_ACC_GetOutputDataRate+0xf0>)
 800536e:	601a      	str	r2, [r3, #0]
      break;
 8005370:	e017      	b.n	80053a2 <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    case LSM6DSL_XL_ODR_416Hz:
      *Odr = 416.0f;
 8005372:	683b      	ldr	r3, [r7, #0]
 8005374:	4a13      	ldr	r2, [pc, #76]	; (80053c4 <LSM6DSL_ACC_GetOutputDataRate+0xf4>)
 8005376:	601a      	str	r2, [r3, #0]
      break;
 8005378:	e013      	b.n	80053a2 <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    case LSM6DSL_XL_ODR_833Hz:
      *Odr = 833.0f;
 800537a:	683b      	ldr	r3, [r7, #0]
 800537c:	4a12      	ldr	r2, [pc, #72]	; (80053c8 <LSM6DSL_ACC_GetOutputDataRate+0xf8>)
 800537e:	601a      	str	r2, [r3, #0]
      break;
 8005380:	e00f      	b.n	80053a2 <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    case LSM6DSL_XL_ODR_1k66Hz:
      *Odr = 1660.0f;
 8005382:	683b      	ldr	r3, [r7, #0]
 8005384:	4a11      	ldr	r2, [pc, #68]	; (80053cc <LSM6DSL_ACC_GetOutputDataRate+0xfc>)
 8005386:	601a      	str	r2, [r3, #0]
      break;
 8005388:	e00b      	b.n	80053a2 <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    case LSM6DSL_XL_ODR_3k33Hz:
      *Odr = 3330.0f;
 800538a:	683b      	ldr	r3, [r7, #0]
 800538c:	4a10      	ldr	r2, [pc, #64]	; (80053d0 <LSM6DSL_ACC_GetOutputDataRate+0x100>)
 800538e:	601a      	str	r2, [r3, #0]
      break;
 8005390:	e007      	b.n	80053a2 <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    case LSM6DSL_XL_ODR_6k66Hz:
      *Odr = 6660.0f;
 8005392:	683b      	ldr	r3, [r7, #0]
 8005394:	4a0f      	ldr	r2, [pc, #60]	; (80053d4 <LSM6DSL_ACC_GetOutputDataRate+0x104>)
 8005396:	601a      	str	r2, [r3, #0]
      break;
 8005398:	e003      	b.n	80053a2 <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    default:
      ret = LSM6DSL_ERROR;
 800539a:	f04f 33ff 	mov.w	r3, #4294967295
 800539e:	60fb      	str	r3, [r7, #12]
      break;
 80053a0:	bf00      	nop
  }

  return ret;
 80053a2:	68fb      	ldr	r3, [r7, #12]
}
 80053a4:	4618      	mov	r0, r3
 80053a6:	3710      	adds	r7, #16
 80053a8:	46bd      	mov	sp, r7
 80053aa:	bd80      	pop	{r7, pc}
 80053ac:	3fcccccd 	.word	0x3fcccccd
 80053b0:	41480000 	.word	0x41480000
 80053b4:	41d00000 	.word	0x41d00000
 80053b8:	42500000 	.word	0x42500000
 80053bc:	42d00000 	.word	0x42d00000
 80053c0:	43500000 	.word	0x43500000
 80053c4:	43d00000 	.word	0x43d00000
 80053c8:	44504000 	.word	0x44504000
 80053cc:	44cf8000 	.word	0x44cf8000
 80053d0:	45502000 	.word	0x45502000
 80053d4:	45d02000 	.word	0x45d02000

080053d8 <LSM6DSL_ACC_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSL_ACC_SetOutputDataRate(LSM6DSL_Object_t *pObj, float Odr)
{
 80053d8:	b580      	push	{r7, lr}
 80053da:	b082      	sub	sp, #8
 80053dc:	af00      	add	r7, sp, #0
 80053de:	6078      	str	r0, [r7, #4]
 80053e0:	ed87 0a00 	vstr	s0, [r7]
  /* Check if the component is enabled */
  if (pObj->acc_is_enabled == 1U)
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80053ea:	2b01      	cmp	r3, #1
 80053ec:	d106      	bne.n	80053fc <LSM6DSL_ACC_SetOutputDataRate+0x24>
  {
    return LSM6DSL_ACC_SetOutputDataRate_When_Enabled(pObj, Odr);
 80053ee:	ed97 0a00 	vldr	s0, [r7]
 80053f2:	6878      	ldr	r0, [r7, #4]
 80053f4:	f000 fb36 	bl	8005a64 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled>
 80053f8:	4603      	mov	r3, r0
 80053fa:	e005      	b.n	8005408 <LSM6DSL_ACC_SetOutputDataRate+0x30>
  }
  else
  {
    return LSM6DSL_ACC_SetOutputDataRate_When_Disabled(pObj, Odr);
 80053fc:	ed97 0a00 	vldr	s0, [r7]
 8005400:	6878      	ldr	r0, [r7, #4]
 8005402:	f000 fbbb 	bl	8005b7c <LSM6DSL_ACC_SetOutputDataRate_When_Disabled>
 8005406:	4603      	mov	r3, r0
  }
}
 8005408:	4618      	mov	r0, r3
 800540a:	3708      	adds	r7, #8
 800540c:	46bd      	mov	sp, r7
 800540e:	bd80      	pop	{r7, pc}

08005410 <LSM6DSL_ACC_GetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale pointer where the full scale is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSL_ACC_GetFullScale(LSM6DSL_Object_t *pObj, int32_t *FullScale)
{
 8005410:	b580      	push	{r7, lr}
 8005412:	b084      	sub	sp, #16
 8005414:	af00      	add	r7, sp, #0
 8005416:	6078      	str	r0, [r7, #4]
 8005418:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSL_OK;
 800541a:	2300      	movs	r3, #0
 800541c:	60fb      	str	r3, [r7, #12]
  lsm6dsl_fs_xl_t fs_low_level;

  /* Read actual full scale selection from sensor. */
  if (lsm6dsl_xl_full_scale_get(&(pObj->Ctx), &fs_low_level) != LSM6DSL_OK)
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	3320      	adds	r3, #32
 8005422:	f107 020b 	add.w	r2, r7, #11
 8005426:	4611      	mov	r1, r2
 8005428:	4618      	mov	r0, r3
 800542a:	f000 fdc3 	bl	8005fb4 <lsm6dsl_xl_full_scale_get>
 800542e:	4603      	mov	r3, r0
 8005430:	2b00      	cmp	r3, #0
 8005432:	d002      	beq.n	800543a <LSM6DSL_ACC_GetFullScale+0x2a>
  {
    return LSM6DSL_ERROR;
 8005434:	f04f 33ff 	mov.w	r3, #4294967295
 8005438:	e023      	b.n	8005482 <LSM6DSL_ACC_GetFullScale+0x72>
  }

  switch (fs_low_level)
 800543a:	7afb      	ldrb	r3, [r7, #11]
 800543c:	2b03      	cmp	r3, #3
 800543e:	d81b      	bhi.n	8005478 <LSM6DSL_ACC_GetFullScale+0x68>
 8005440:	a201      	add	r2, pc, #4	; (adr r2, 8005448 <LSM6DSL_ACC_GetFullScale+0x38>)
 8005442:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005446:	bf00      	nop
 8005448:	08005459 	.word	0x08005459
 800544c:	08005471 	.word	0x08005471
 8005450:	08005461 	.word	0x08005461
 8005454:	08005469 	.word	0x08005469
  {
    case LSM6DSL_2g:
      *FullScale =  2;
 8005458:	683b      	ldr	r3, [r7, #0]
 800545a:	2202      	movs	r2, #2
 800545c:	601a      	str	r2, [r3, #0]
      break;
 800545e:	e00f      	b.n	8005480 <LSM6DSL_ACC_GetFullScale+0x70>

    case LSM6DSL_4g:
      *FullScale =  4;
 8005460:	683b      	ldr	r3, [r7, #0]
 8005462:	2204      	movs	r2, #4
 8005464:	601a      	str	r2, [r3, #0]
      break;
 8005466:	e00b      	b.n	8005480 <LSM6DSL_ACC_GetFullScale+0x70>

    case LSM6DSL_8g:
      *FullScale =  8;
 8005468:	683b      	ldr	r3, [r7, #0]
 800546a:	2208      	movs	r2, #8
 800546c:	601a      	str	r2, [r3, #0]
      break;
 800546e:	e007      	b.n	8005480 <LSM6DSL_ACC_GetFullScale+0x70>

    case LSM6DSL_16g:
      *FullScale = 16;
 8005470:	683b      	ldr	r3, [r7, #0]
 8005472:	2210      	movs	r2, #16
 8005474:	601a      	str	r2, [r3, #0]
      break;
 8005476:	e003      	b.n	8005480 <LSM6DSL_ACC_GetFullScale+0x70>

    default:
      ret = LSM6DSL_ERROR;
 8005478:	f04f 33ff 	mov.w	r3, #4294967295
 800547c:	60fb      	str	r3, [r7, #12]
      break;
 800547e:	bf00      	nop
  }

  return ret;
 8005480:	68fb      	ldr	r3, [r7, #12]
}
 8005482:	4618      	mov	r0, r3
 8005484:	3710      	adds	r7, #16
 8005486:	46bd      	mov	sp, r7
 8005488:	bd80      	pop	{r7, pc}
 800548a:	bf00      	nop

0800548c <LSM6DSL_ACC_SetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale the functional full scale to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSL_ACC_SetFullScale(LSM6DSL_Object_t *pObj, int32_t FullScale)
{
 800548c:	b580      	push	{r7, lr}
 800548e:	b084      	sub	sp, #16
 8005490:	af00      	add	r7, sp, #0
 8005492:	6078      	str	r0, [r7, #4]
 8005494:	6039      	str	r1, [r7, #0]
  lsm6dsl_fs_xl_t new_fs;

  /* Seems like MISRA C-2012 rule 14.3a violation but only from single file statical analysis point of view because
     the parameter passed to the function is not known at the moment of analysis */
  new_fs = (FullScale <= 2) ? LSM6DSL_2g
           : (FullScale <= 4) ? LSM6DSL_4g
 8005496:	683b      	ldr	r3, [r7, #0]
 8005498:	2b02      	cmp	r3, #2
 800549a:	dd0b      	ble.n	80054b4 <LSM6DSL_ACC_SetFullScale+0x28>
 800549c:	683b      	ldr	r3, [r7, #0]
 800549e:	2b04      	cmp	r3, #4
 80054a0:	dd06      	ble.n	80054b0 <LSM6DSL_ACC_SetFullScale+0x24>
 80054a2:	683b      	ldr	r3, [r7, #0]
 80054a4:	2b08      	cmp	r3, #8
 80054a6:	dc01      	bgt.n	80054ac <LSM6DSL_ACC_SetFullScale+0x20>
 80054a8:	2303      	movs	r3, #3
 80054aa:	e004      	b.n	80054b6 <LSM6DSL_ACC_SetFullScale+0x2a>
 80054ac:	2301      	movs	r3, #1
 80054ae:	e002      	b.n	80054b6 <LSM6DSL_ACC_SetFullScale+0x2a>
 80054b0:	2302      	movs	r3, #2
 80054b2:	e000      	b.n	80054b6 <LSM6DSL_ACC_SetFullScale+0x2a>
 80054b4:	2300      	movs	r3, #0
  new_fs = (FullScale <= 2) ? LSM6DSL_2g
 80054b6:	73fb      	strb	r3, [r7, #15]
           : (FullScale <= 8) ? LSM6DSL_8g
           :                    LSM6DSL_16g;

  if (lsm6dsl_xl_full_scale_set(&(pObj->Ctx), new_fs) != LSM6DSL_OK)
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	3320      	adds	r3, #32
 80054bc:	7bfa      	ldrb	r2, [r7, #15]
 80054be:	4611      	mov	r1, r2
 80054c0:	4618      	mov	r0, r3
 80054c2:	f000 fd51 	bl	8005f68 <lsm6dsl_xl_full_scale_set>
 80054c6:	4603      	mov	r3, r0
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d002      	beq.n	80054d2 <LSM6DSL_ACC_SetFullScale+0x46>
  {
    return LSM6DSL_ERROR;
 80054cc:	f04f 33ff 	mov.w	r3, #4294967295
 80054d0:	e000      	b.n	80054d4 <LSM6DSL_ACC_SetFullScale+0x48>
  }

  return LSM6DSL_OK;
 80054d2:	2300      	movs	r3, #0
}
 80054d4:	4618      	mov	r0, r3
 80054d6:	3710      	adds	r7, #16
 80054d8:	46bd      	mov	sp, r7
 80054da:	bd80      	pop	{r7, pc}

080054dc <LSM6DSL_ACC_GetAxesRaw>:
  * @param  pObj the device pObj
  * @param  Value pointer where the raw values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSL_ACC_GetAxesRaw(LSM6DSL_Object_t *pObj, LSM6DSL_AxesRaw_t *Value)
{
 80054dc:	b580      	push	{r7, lr}
 80054de:	b084      	sub	sp, #16
 80054e0:	af00      	add	r7, sp, #0
 80054e2:	6078      	str	r0, [r7, #4]
 80054e4:	6039      	str	r1, [r7, #0]
  lsm6dsl_axis3bit16_t data_raw;

  /* Read raw data values. */
  if (lsm6dsl_acceleration_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM6DSL_OK)
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	3320      	adds	r3, #32
 80054ea:	f107 0208 	add.w	r2, r7, #8
 80054ee:	4611      	mov	r1, r2
 80054f0:	4618      	mov	r0, r3
 80054f2:	f000 ff86 	bl	8006402 <lsm6dsl_acceleration_raw_get>
 80054f6:	4603      	mov	r3, r0
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d002      	beq.n	8005502 <LSM6DSL_ACC_GetAxesRaw+0x26>
  {
    return LSM6DSL_ERROR;
 80054fc:	f04f 33ff 	mov.w	r3, #4294967295
 8005500:	e00c      	b.n	800551c <LSM6DSL_ACC_GetAxesRaw+0x40>
  }

  /* Format the data. */
  Value->x = data_raw.i16bit[0];
 8005502:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8005506:	683b      	ldr	r3, [r7, #0]
 8005508:	801a      	strh	r2, [r3, #0]
  Value->y = data_raw.i16bit[1];
 800550a:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 800550e:	683b      	ldr	r3, [r7, #0]
 8005510:	805a      	strh	r2, [r3, #2]
  Value->z = data_raw.i16bit[2];
 8005512:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8005516:	683b      	ldr	r3, [r7, #0]
 8005518:	809a      	strh	r2, [r3, #4]

  return LSM6DSL_OK;
 800551a:	2300      	movs	r3, #0
}
 800551c:	4618      	mov	r0, r3
 800551e:	3710      	adds	r7, #16
 8005520:	46bd      	mov	sp, r7
 8005522:	bd80      	pop	{r7, pc}

08005524 <LSM6DSL_ACC_GetAxes>:
  * @param  pObj the device pObj
  * @param  Acceleration pointer where the values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSL_ACC_GetAxes(LSM6DSL_Object_t *pObj, LSM6DSL_Axes_t *Acceleration)
{
 8005524:	b580      	push	{r7, lr}
 8005526:	b086      	sub	sp, #24
 8005528:	af00      	add	r7, sp, #0
 800552a:	6078      	str	r0, [r7, #4]
 800552c:	6039      	str	r1, [r7, #0]
  lsm6dsl_axis3bit16_t data_raw;
  float sensitivity = 0.0f;
 800552e:	f04f 0300 	mov.w	r3, #0
 8005532:	60fb      	str	r3, [r7, #12]

  /* Read raw data values. */
  if (lsm6dsl_acceleration_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM6DSL_OK)
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	3320      	adds	r3, #32
 8005538:	f107 0210 	add.w	r2, r7, #16
 800553c:	4611      	mov	r1, r2
 800553e:	4618      	mov	r0, r3
 8005540:	f000 ff5f 	bl	8006402 <lsm6dsl_acceleration_raw_get>
 8005544:	4603      	mov	r3, r0
 8005546:	2b00      	cmp	r3, #0
 8005548:	d002      	beq.n	8005550 <LSM6DSL_ACC_GetAxes+0x2c>
  {
    return LSM6DSL_ERROR;
 800554a:	f04f 33ff 	mov.w	r3, #4294967295
 800554e:	e03c      	b.n	80055ca <LSM6DSL_ACC_GetAxes+0xa6>
  }

  /* Get LSM6DSL actual sensitivity. */
  if (LSM6DSL_ACC_GetSensitivity(pObj, &sensitivity) != LSM6DSL_OK)
 8005550:	f107 030c 	add.w	r3, r7, #12
 8005554:	4619      	mov	r1, r3
 8005556:	6878      	ldr	r0, [r7, #4]
 8005558:	f7ff fe74 	bl	8005244 <LSM6DSL_ACC_GetSensitivity>
 800555c:	4603      	mov	r3, r0
 800555e:	2b00      	cmp	r3, #0
 8005560:	d002      	beq.n	8005568 <LSM6DSL_ACC_GetAxes+0x44>
  {
    return LSM6DSL_ERROR;
 8005562:	f04f 33ff 	mov.w	r3, #4294967295
 8005566:	e030      	b.n	80055ca <LSM6DSL_ACC_GetAxes+0xa6>
  }

  /* Calculate the data. */
  Acceleration->x = (int32_t)((float)((float)data_raw.i16bit[0] * sensitivity));
 8005568:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800556c:	ee07 3a90 	vmov	s15, r3
 8005570:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005574:	edd7 7a03 	vldr	s15, [r7, #12]
 8005578:	ee67 7a27 	vmul.f32	s15, s14, s15
 800557c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005580:	ee17 2a90 	vmov	r2, s15
 8005584:	683b      	ldr	r3, [r7, #0]
 8005586:	601a      	str	r2, [r3, #0]
  Acceleration->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 8005588:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800558c:	ee07 3a90 	vmov	s15, r3
 8005590:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005594:	edd7 7a03 	vldr	s15, [r7, #12]
 8005598:	ee67 7a27 	vmul.f32	s15, s14, s15
 800559c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80055a0:	ee17 2a90 	vmov	r2, s15
 80055a4:	683b      	ldr	r3, [r7, #0]
 80055a6:	605a      	str	r2, [r3, #4]
  Acceleration->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 80055a8:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80055ac:	ee07 3a90 	vmov	s15, r3
 80055b0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80055b4:	edd7 7a03 	vldr	s15, [r7, #12]
 80055b8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80055bc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80055c0:	ee17 2a90 	vmov	r2, s15
 80055c4:	683b      	ldr	r3, [r7, #0]
 80055c6:	609a      	str	r2, [r3, #8]

  return LSM6DSL_OK;
 80055c8:	2300      	movs	r3, #0
}
 80055ca:	4618      	mov	r0, r3
 80055cc:	3718      	adds	r7, #24
 80055ce:	46bd      	mov	sp, r7
 80055d0:	bd80      	pop	{r7, pc}

080055d2 <LSM6DSL_GYRO_Enable>:
  * @brief  Enable the LSM6DSL gyroscope sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSL_GYRO_Enable(LSM6DSL_Object_t *pObj)
{
 80055d2:	b580      	push	{r7, lr}
 80055d4:	b082      	sub	sp, #8
 80055d6:	af00      	add	r7, sp, #0
 80055d8:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->gyro_is_enabled == 1U)
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80055e0:	2b01      	cmp	r3, #1
 80055e2:	d101      	bne.n	80055e8 <LSM6DSL_GYRO_Enable+0x16>
  {
    return LSM6DSL_OK;
 80055e4:	2300      	movs	r3, #0
 80055e6:	e014      	b.n	8005612 <LSM6DSL_GYRO_Enable+0x40>
  }

  /* Output data rate selection. */
  if (lsm6dsl_gy_data_rate_set(&(pObj->Ctx), pObj->gyro_odr) != LSM6DSL_OK)
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	f103 0220 	add.w	r2, r3, #32
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80055f4:	4619      	mov	r1, r3
 80055f6:	4610      	mov	r0, r2
 80055f8:	f000 fe0a 	bl	8006210 <lsm6dsl_gy_data_rate_set>
 80055fc:	4603      	mov	r3, r0
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d002      	beq.n	8005608 <LSM6DSL_GYRO_Enable+0x36>
  {
    return LSM6DSL_ERROR;
 8005602:	f04f 33ff 	mov.w	r3, #4294967295
 8005606:	e004      	b.n	8005612 <LSM6DSL_GYRO_Enable+0x40>
  }

  pObj->gyro_is_enabled = 1;
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	2201      	movs	r2, #1
 800560c:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32

  return LSM6DSL_OK;
 8005610:	2300      	movs	r3, #0
}
 8005612:	4618      	mov	r0, r3
 8005614:	3708      	adds	r7, #8
 8005616:	46bd      	mov	sp, r7
 8005618:	bd80      	pop	{r7, pc}

0800561a <LSM6DSL_GYRO_Disable>:
  * @brief  Disable the LSM6DSL gyroscope sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSL_GYRO_Disable(LSM6DSL_Object_t *pObj)
{
 800561a:	b580      	push	{r7, lr}
 800561c:	b082      	sub	sp, #8
 800561e:	af00      	add	r7, sp, #0
 8005620:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->gyro_is_enabled == 0U)
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8005628:	2b00      	cmp	r3, #0
 800562a:	d101      	bne.n	8005630 <LSM6DSL_GYRO_Disable+0x16>
  {
    return LSM6DSL_OK;
 800562c:	2300      	movs	r3, #0
 800562e:	e01f      	b.n	8005670 <LSM6DSL_GYRO_Disable+0x56>
  }

  /* Get current output data rate. */
  if (lsm6dsl_gy_data_rate_get(&(pObj->Ctx), &pObj->gyro_odr) != LSM6DSL_OK)
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	f103 0220 	add.w	r2, r3, #32
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	3334      	adds	r3, #52	; 0x34
 800563a:	4619      	mov	r1, r3
 800563c:	4610      	mov	r0, r2
 800563e:	f000 fe0d 	bl	800625c <lsm6dsl_gy_data_rate_get>
 8005642:	4603      	mov	r3, r0
 8005644:	2b00      	cmp	r3, #0
 8005646:	d002      	beq.n	800564e <LSM6DSL_GYRO_Disable+0x34>
  {
    return LSM6DSL_ERROR;
 8005648:	f04f 33ff 	mov.w	r3, #4294967295
 800564c:	e010      	b.n	8005670 <LSM6DSL_GYRO_Disable+0x56>
  }

  /* Output data rate selection - power down. */
  if (lsm6dsl_gy_data_rate_set(&(pObj->Ctx), LSM6DSL_GY_ODR_OFF) != LSM6DSL_OK)
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	3320      	adds	r3, #32
 8005652:	2100      	movs	r1, #0
 8005654:	4618      	mov	r0, r3
 8005656:	f000 fddb 	bl	8006210 <lsm6dsl_gy_data_rate_set>
 800565a:	4603      	mov	r3, r0
 800565c:	2b00      	cmp	r3, #0
 800565e:	d002      	beq.n	8005666 <LSM6DSL_GYRO_Disable+0x4c>
  {
    return LSM6DSL_ERROR;
 8005660:	f04f 33ff 	mov.w	r3, #4294967295
 8005664:	e004      	b.n	8005670 <LSM6DSL_GYRO_Disable+0x56>
  }

  pObj->gyro_is_enabled = 0;
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	2200      	movs	r2, #0
 800566a:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32

  return LSM6DSL_OK;
 800566e:	2300      	movs	r3, #0
}
 8005670:	4618      	mov	r0, r3
 8005672:	3708      	adds	r7, #8
 8005674:	46bd      	mov	sp, r7
 8005676:	bd80      	pop	{r7, pc}

08005678 <LSM6DSL_GYRO_GetSensitivity>:
  * @param  pObj the device pObj
  * @param  Sensitivity pointer
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSL_GYRO_GetSensitivity(LSM6DSL_Object_t *pObj, float *Sensitivity)
{
 8005678:	b580      	push	{r7, lr}
 800567a:	b084      	sub	sp, #16
 800567c:	af00      	add	r7, sp, #0
 800567e:	6078      	str	r0, [r7, #4]
 8005680:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSL_OK;
 8005682:	2300      	movs	r3, #0
 8005684:	60fb      	str	r3, [r7, #12]
  lsm6dsl_fs_g_t full_scale;

  /* Read actual full scale selection from sensor. */
  if (lsm6dsl_gy_full_scale_get(&(pObj->Ctx), &full_scale) != LSM6DSL_OK)
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	3320      	adds	r3, #32
 800568a:	f107 020b 	add.w	r2, r7, #11
 800568e:	4611      	mov	r1, r2
 8005690:	4618      	mov	r0, r3
 8005692:	f000 fd7b 	bl	800618c <lsm6dsl_gy_full_scale_get>
 8005696:	4603      	mov	r3, r0
 8005698:	2b00      	cmp	r3, #0
 800569a:	d002      	beq.n	80056a2 <LSM6DSL_GYRO_GetSensitivity+0x2a>
  {
    return LSM6DSL_ERROR;
 800569c:	f04f 33ff 	mov.w	r3, #4294967295
 80056a0:	e02d      	b.n	80056fe <LSM6DSL_GYRO_GetSensitivity+0x86>
  }

  /* Store the sensitivity based on actual full scale. */
  switch (full_scale)
 80056a2:	7afb      	ldrb	r3, [r7, #11]
 80056a4:	2b06      	cmp	r3, #6
 80056a6:	d825      	bhi.n	80056f4 <LSM6DSL_GYRO_GetSensitivity+0x7c>
 80056a8:	a201      	add	r2, pc, #4	; (adr r2, 80056b0 <LSM6DSL_GYRO_GetSensitivity+0x38>)
 80056aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056ae:	bf00      	nop
 80056b0:	080056d5 	.word	0x080056d5
 80056b4:	080056cd 	.word	0x080056cd
 80056b8:	080056dd 	.word	0x080056dd
 80056bc:	080056f5 	.word	0x080056f5
 80056c0:	080056e5 	.word	0x080056e5
 80056c4:	080056f5 	.word	0x080056f5
 80056c8:	080056ed 	.word	0x080056ed
  {
    case LSM6DSL_125dps:
      *Sensitivity = LSM6DSL_GYRO_SENSITIVITY_FS_125DPS;
 80056cc:	683b      	ldr	r3, [r7, #0]
 80056ce:	4a0e      	ldr	r2, [pc, #56]	; (8005708 <LSM6DSL_GYRO_GetSensitivity+0x90>)
 80056d0:	601a      	str	r2, [r3, #0]
      break;
 80056d2:	e013      	b.n	80056fc <LSM6DSL_GYRO_GetSensitivity+0x84>

    case LSM6DSL_250dps:
      *Sensitivity = LSM6DSL_GYRO_SENSITIVITY_FS_250DPS;
 80056d4:	683b      	ldr	r3, [r7, #0]
 80056d6:	4a0d      	ldr	r2, [pc, #52]	; (800570c <LSM6DSL_GYRO_GetSensitivity+0x94>)
 80056d8:	601a      	str	r2, [r3, #0]
      break;
 80056da:	e00f      	b.n	80056fc <LSM6DSL_GYRO_GetSensitivity+0x84>

    case LSM6DSL_500dps:
      *Sensitivity = LSM6DSL_GYRO_SENSITIVITY_FS_500DPS;
 80056dc:	683b      	ldr	r3, [r7, #0]
 80056de:	4a0c      	ldr	r2, [pc, #48]	; (8005710 <LSM6DSL_GYRO_GetSensitivity+0x98>)
 80056e0:	601a      	str	r2, [r3, #0]
      break;
 80056e2:	e00b      	b.n	80056fc <LSM6DSL_GYRO_GetSensitivity+0x84>

    case LSM6DSL_1000dps:
      *Sensitivity = LSM6DSL_GYRO_SENSITIVITY_FS_1000DPS;
 80056e4:	683b      	ldr	r3, [r7, #0]
 80056e6:	4a0b      	ldr	r2, [pc, #44]	; (8005714 <LSM6DSL_GYRO_GetSensitivity+0x9c>)
 80056e8:	601a      	str	r2, [r3, #0]
      break;
 80056ea:	e007      	b.n	80056fc <LSM6DSL_GYRO_GetSensitivity+0x84>

    case LSM6DSL_2000dps:
      *Sensitivity = LSM6DSL_GYRO_SENSITIVITY_FS_2000DPS;
 80056ec:	683b      	ldr	r3, [r7, #0]
 80056ee:	4a0a      	ldr	r2, [pc, #40]	; (8005718 <LSM6DSL_GYRO_GetSensitivity+0xa0>)
 80056f0:	601a      	str	r2, [r3, #0]
      break;
 80056f2:	e003      	b.n	80056fc <LSM6DSL_GYRO_GetSensitivity+0x84>

    default:
      ret = LSM6DSL_ERROR;
 80056f4:	f04f 33ff 	mov.w	r3, #4294967295
 80056f8:	60fb      	str	r3, [r7, #12]
      break;
 80056fa:	bf00      	nop
  }

  return ret;
 80056fc:	68fb      	ldr	r3, [r7, #12]
}
 80056fe:	4618      	mov	r0, r3
 8005700:	3710      	adds	r7, #16
 8005702:	46bd      	mov	sp, r7
 8005704:	bd80      	pop	{r7, pc}
 8005706:	bf00      	nop
 8005708:	408c0000 	.word	0x408c0000
 800570c:	410c0000 	.word	0x410c0000
 8005710:	418c0000 	.word	0x418c0000
 8005714:	420c0000 	.word	0x420c0000
 8005718:	428c0000 	.word	0x428c0000

0800571c <LSM6DSL_GYRO_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSL_GYRO_GetOutputDataRate(LSM6DSL_Object_t *pObj, float *Odr)
{
 800571c:	b580      	push	{r7, lr}
 800571e:	b084      	sub	sp, #16
 8005720:	af00      	add	r7, sp, #0
 8005722:	6078      	str	r0, [r7, #4]
 8005724:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSL_OK;
 8005726:	2300      	movs	r3, #0
 8005728:	60fb      	str	r3, [r7, #12]
  lsm6dsl_odr_g_t odr_low_level;

  /* Get current output data rate. */
  if (lsm6dsl_gy_data_rate_get(&(pObj->Ctx), &odr_low_level) != LSM6DSL_OK)
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	3320      	adds	r3, #32
 800572e:	f107 020b 	add.w	r2, r7, #11
 8005732:	4611      	mov	r1, r2
 8005734:	4618      	mov	r0, r3
 8005736:	f000 fd91 	bl	800625c <lsm6dsl_gy_data_rate_get>
 800573a:	4603      	mov	r3, r0
 800573c:	2b00      	cmp	r3, #0
 800573e:	d002      	beq.n	8005746 <LSM6DSL_GYRO_GetOutputDataRate+0x2a>
  {
    return LSM6DSL_ERROR;
 8005740:	f04f 33ff 	mov.w	r3, #4294967295
 8005744:	e04e      	b.n	80057e4 <LSM6DSL_GYRO_GetOutputDataRate+0xc8>
  }

  switch (odr_low_level)
 8005746:	7afb      	ldrb	r3, [r7, #11]
 8005748:	2b0a      	cmp	r3, #10
 800574a:	d846      	bhi.n	80057da <LSM6DSL_GYRO_GetOutputDataRate+0xbe>
 800574c:	a201      	add	r2, pc, #4	; (adr r2, 8005754 <LSM6DSL_GYRO_GetOutputDataRate+0x38>)
 800574e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005752:	bf00      	nop
 8005754:	08005781 	.word	0x08005781
 8005758:	0800578b 	.word	0x0800578b
 800575c:	08005793 	.word	0x08005793
 8005760:	0800579b 	.word	0x0800579b
 8005764:	080057a3 	.word	0x080057a3
 8005768:	080057ab 	.word	0x080057ab
 800576c:	080057b3 	.word	0x080057b3
 8005770:	080057bb 	.word	0x080057bb
 8005774:	080057c3 	.word	0x080057c3
 8005778:	080057cb 	.word	0x080057cb
 800577c:	080057d3 	.word	0x080057d3
  {
    case LSM6DSL_GY_ODR_OFF:
      *Odr = 0.0f;
 8005780:	683b      	ldr	r3, [r7, #0]
 8005782:	f04f 0200 	mov.w	r2, #0
 8005786:	601a      	str	r2, [r3, #0]
      break;
 8005788:	e02b      	b.n	80057e2 <LSM6DSL_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSL_GY_ODR_12Hz5:
      *Odr = 12.5f;
 800578a:	683b      	ldr	r3, [r7, #0]
 800578c:	4a17      	ldr	r2, [pc, #92]	; (80057ec <LSM6DSL_GYRO_GetOutputDataRate+0xd0>)
 800578e:	601a      	str	r2, [r3, #0]
      break;
 8005790:	e027      	b.n	80057e2 <LSM6DSL_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSL_GY_ODR_26Hz:
      *Odr = 26.0f;
 8005792:	683b      	ldr	r3, [r7, #0]
 8005794:	4a16      	ldr	r2, [pc, #88]	; (80057f0 <LSM6DSL_GYRO_GetOutputDataRate+0xd4>)
 8005796:	601a      	str	r2, [r3, #0]
      break;
 8005798:	e023      	b.n	80057e2 <LSM6DSL_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSL_GY_ODR_52Hz:
      *Odr = 52.0f;
 800579a:	683b      	ldr	r3, [r7, #0]
 800579c:	4a15      	ldr	r2, [pc, #84]	; (80057f4 <LSM6DSL_GYRO_GetOutputDataRate+0xd8>)
 800579e:	601a      	str	r2, [r3, #0]
      break;
 80057a0:	e01f      	b.n	80057e2 <LSM6DSL_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSL_GY_ODR_104Hz:
      *Odr = 104.0f;
 80057a2:	683b      	ldr	r3, [r7, #0]
 80057a4:	4a14      	ldr	r2, [pc, #80]	; (80057f8 <LSM6DSL_GYRO_GetOutputDataRate+0xdc>)
 80057a6:	601a      	str	r2, [r3, #0]
      break;
 80057a8:	e01b      	b.n	80057e2 <LSM6DSL_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSL_GY_ODR_208Hz:
      *Odr = 208.0f;
 80057aa:	683b      	ldr	r3, [r7, #0]
 80057ac:	4a13      	ldr	r2, [pc, #76]	; (80057fc <LSM6DSL_GYRO_GetOutputDataRate+0xe0>)
 80057ae:	601a      	str	r2, [r3, #0]
      break;
 80057b0:	e017      	b.n	80057e2 <LSM6DSL_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSL_GY_ODR_416Hz:
      *Odr = 416.0f;
 80057b2:	683b      	ldr	r3, [r7, #0]
 80057b4:	4a12      	ldr	r2, [pc, #72]	; (8005800 <LSM6DSL_GYRO_GetOutputDataRate+0xe4>)
 80057b6:	601a      	str	r2, [r3, #0]
      break;
 80057b8:	e013      	b.n	80057e2 <LSM6DSL_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSL_GY_ODR_833Hz:
      *Odr = 833.0f;
 80057ba:	683b      	ldr	r3, [r7, #0]
 80057bc:	4a11      	ldr	r2, [pc, #68]	; (8005804 <LSM6DSL_GYRO_GetOutputDataRate+0xe8>)
 80057be:	601a      	str	r2, [r3, #0]
      break;
 80057c0:	e00f      	b.n	80057e2 <LSM6DSL_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSL_GY_ODR_1k66Hz:
      *Odr =  1660.0f;
 80057c2:	683b      	ldr	r3, [r7, #0]
 80057c4:	4a10      	ldr	r2, [pc, #64]	; (8005808 <LSM6DSL_GYRO_GetOutputDataRate+0xec>)
 80057c6:	601a      	str	r2, [r3, #0]
      break;
 80057c8:	e00b      	b.n	80057e2 <LSM6DSL_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSL_GY_ODR_3k33Hz:
      *Odr =  3330.0f;
 80057ca:	683b      	ldr	r3, [r7, #0]
 80057cc:	4a0f      	ldr	r2, [pc, #60]	; (800580c <LSM6DSL_GYRO_GetOutputDataRate+0xf0>)
 80057ce:	601a      	str	r2, [r3, #0]
      break;
 80057d0:	e007      	b.n	80057e2 <LSM6DSL_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSL_GY_ODR_6k66Hz:
      *Odr =  6660.0f;
 80057d2:	683b      	ldr	r3, [r7, #0]
 80057d4:	4a0e      	ldr	r2, [pc, #56]	; (8005810 <LSM6DSL_GYRO_GetOutputDataRate+0xf4>)
 80057d6:	601a      	str	r2, [r3, #0]
      break;
 80057d8:	e003      	b.n	80057e2 <LSM6DSL_GYRO_GetOutputDataRate+0xc6>

    default:
      ret = LSM6DSL_ERROR;
 80057da:	f04f 33ff 	mov.w	r3, #4294967295
 80057de:	60fb      	str	r3, [r7, #12]
      break;
 80057e0:	bf00      	nop
  }

  return ret;
 80057e2:	68fb      	ldr	r3, [r7, #12]
}
 80057e4:	4618      	mov	r0, r3
 80057e6:	3710      	adds	r7, #16
 80057e8:	46bd      	mov	sp, r7
 80057ea:	bd80      	pop	{r7, pc}
 80057ec:	41480000 	.word	0x41480000
 80057f0:	41d00000 	.word	0x41d00000
 80057f4:	42500000 	.word	0x42500000
 80057f8:	42d00000 	.word	0x42d00000
 80057fc:	43500000 	.word	0x43500000
 8005800:	43d00000 	.word	0x43d00000
 8005804:	44504000 	.word	0x44504000
 8005808:	44cf8000 	.word	0x44cf8000
 800580c:	45502000 	.word	0x45502000
 8005810:	45d02000 	.word	0x45d02000

08005814 <LSM6DSL_GYRO_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSL_GYRO_SetOutputDataRate(LSM6DSL_Object_t *pObj, float Odr)
{
 8005814:	b580      	push	{r7, lr}
 8005816:	b082      	sub	sp, #8
 8005818:	af00      	add	r7, sp, #0
 800581a:	6078      	str	r0, [r7, #4]
 800581c:	ed87 0a00 	vstr	s0, [r7]
  /* Check if the component is enabled */
  if (pObj->gyro_is_enabled == 1U)
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8005826:	2b01      	cmp	r3, #1
 8005828:	d106      	bne.n	8005838 <LSM6DSL_GYRO_SetOutputDataRate+0x24>
  {
    return LSM6DSL_GYRO_SetOutputDataRate_When_Enabled(pObj, Odr);
 800582a:	ed97 0a00 	vldr	s0, [r7]
 800582e:	6878      	ldr	r0, [r7, #4]
 8005830:	f000 fa26 	bl	8005c80 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled>
 8005834:	4603      	mov	r3, r0
 8005836:	e005      	b.n	8005844 <LSM6DSL_GYRO_SetOutputDataRate+0x30>
  }
  else
  {
    return LSM6DSL_GYRO_SetOutputDataRate_When_Disabled(pObj, Odr);
 8005838:	ed97 0a00 	vldr	s0, [r7]
 800583c:	6878      	ldr	r0, [r7, #4]
 800583e:	f000 faab 	bl	8005d98 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled>
 8005842:	4603      	mov	r3, r0
  }
}
 8005844:	4618      	mov	r0, r3
 8005846:	3708      	adds	r7, #8
 8005848:	46bd      	mov	sp, r7
 800584a:	bd80      	pop	{r7, pc}

0800584c <LSM6DSL_GYRO_GetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale pointer where the full scale is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSL_GYRO_GetFullScale(LSM6DSL_Object_t *pObj, int32_t  *FullScale)
{
 800584c:	b580      	push	{r7, lr}
 800584e:	b084      	sub	sp, #16
 8005850:	af00      	add	r7, sp, #0
 8005852:	6078      	str	r0, [r7, #4]
 8005854:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSL_OK;
 8005856:	2300      	movs	r3, #0
 8005858:	60fb      	str	r3, [r7, #12]
  lsm6dsl_fs_g_t fs_low_level;

  /* Read actual full scale selection from sensor. */
  if (lsm6dsl_gy_full_scale_get(&(pObj->Ctx), &fs_low_level) != LSM6DSL_OK)
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	3320      	adds	r3, #32
 800585e:	f107 020b 	add.w	r2, r7, #11
 8005862:	4611      	mov	r1, r2
 8005864:	4618      	mov	r0, r3
 8005866:	f000 fc91 	bl	800618c <lsm6dsl_gy_full_scale_get>
 800586a:	4603      	mov	r3, r0
 800586c:	2b00      	cmp	r3, #0
 800586e:	d002      	beq.n	8005876 <LSM6DSL_GYRO_GetFullScale+0x2a>
  {
    return LSM6DSL_ERROR;
 8005870:	f04f 33ff 	mov.w	r3, #4294967295
 8005874:	e030      	b.n	80058d8 <LSM6DSL_GYRO_GetFullScale+0x8c>
  }

  switch (fs_low_level)
 8005876:	7afb      	ldrb	r3, [r7, #11]
 8005878:	2b06      	cmp	r3, #6
 800587a:	d828      	bhi.n	80058ce <LSM6DSL_GYRO_GetFullScale+0x82>
 800587c:	a201      	add	r2, pc, #4	; (adr r2, 8005884 <LSM6DSL_GYRO_GetFullScale+0x38>)
 800587e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005882:	bf00      	nop
 8005884:	080058a9 	.word	0x080058a9
 8005888:	080058a1 	.word	0x080058a1
 800588c:	080058b1 	.word	0x080058b1
 8005890:	080058cf 	.word	0x080058cf
 8005894:	080058bb 	.word	0x080058bb
 8005898:	080058cf 	.word	0x080058cf
 800589c:	080058c5 	.word	0x080058c5
  {
    case LSM6DSL_125dps:
      *FullScale =  125;
 80058a0:	683b      	ldr	r3, [r7, #0]
 80058a2:	227d      	movs	r2, #125	; 0x7d
 80058a4:	601a      	str	r2, [r3, #0]
      break;
 80058a6:	e016      	b.n	80058d6 <LSM6DSL_GYRO_GetFullScale+0x8a>

    case LSM6DSL_250dps:
      *FullScale =  250;
 80058a8:	683b      	ldr	r3, [r7, #0]
 80058aa:	22fa      	movs	r2, #250	; 0xfa
 80058ac:	601a      	str	r2, [r3, #0]
      break;
 80058ae:	e012      	b.n	80058d6 <LSM6DSL_GYRO_GetFullScale+0x8a>

    case LSM6DSL_500dps:
      *FullScale =  500;
 80058b0:	683b      	ldr	r3, [r7, #0]
 80058b2:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80058b6:	601a      	str	r2, [r3, #0]
      break;
 80058b8:	e00d      	b.n	80058d6 <LSM6DSL_GYRO_GetFullScale+0x8a>

    case LSM6DSL_1000dps:
      *FullScale = 1000;
 80058ba:	683b      	ldr	r3, [r7, #0]
 80058bc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80058c0:	601a      	str	r2, [r3, #0]
      break;
 80058c2:	e008      	b.n	80058d6 <LSM6DSL_GYRO_GetFullScale+0x8a>

    case LSM6DSL_2000dps:
      *FullScale = 2000;
 80058c4:	683b      	ldr	r3, [r7, #0]
 80058c6:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80058ca:	601a      	str	r2, [r3, #0]
      break;
 80058cc:	e003      	b.n	80058d6 <LSM6DSL_GYRO_GetFullScale+0x8a>

    default:
      ret = LSM6DSL_ERROR;
 80058ce:	f04f 33ff 	mov.w	r3, #4294967295
 80058d2:	60fb      	str	r3, [r7, #12]
      break;
 80058d4:	bf00      	nop
  }

  return ret;
 80058d6:	68fb      	ldr	r3, [r7, #12]
}
 80058d8:	4618      	mov	r0, r3
 80058da:	3710      	adds	r7, #16
 80058dc:	46bd      	mov	sp, r7
 80058de:	bd80      	pop	{r7, pc}

080058e0 <LSM6DSL_GYRO_SetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale the functional full scale to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSL_GYRO_SetFullScale(LSM6DSL_Object_t *pObj, int32_t FullScale)
{
 80058e0:	b580      	push	{r7, lr}
 80058e2:	b084      	sub	sp, #16
 80058e4:	af00      	add	r7, sp, #0
 80058e6:	6078      	str	r0, [r7, #4]
 80058e8:	6039      	str	r1, [r7, #0]
  lsm6dsl_fs_g_t new_fs;

  new_fs = (FullScale <= 125)  ? LSM6DSL_125dps
           : (FullScale <= 250)  ? LSM6DSL_250dps
 80058ea:	683b      	ldr	r3, [r7, #0]
 80058ec:	2b7d      	cmp	r3, #125	; 0x7d
 80058ee:	dd12      	ble.n	8005916 <LSM6DSL_GYRO_SetFullScale+0x36>
 80058f0:	683b      	ldr	r3, [r7, #0]
 80058f2:	2bfa      	cmp	r3, #250	; 0xfa
 80058f4:	dd0d      	ble.n	8005912 <LSM6DSL_GYRO_SetFullScale+0x32>
 80058f6:	683b      	ldr	r3, [r7, #0]
 80058f8:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80058fc:	dd07      	ble.n	800590e <LSM6DSL_GYRO_SetFullScale+0x2e>
 80058fe:	683b      	ldr	r3, [r7, #0]
 8005900:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005904:	dc01      	bgt.n	800590a <LSM6DSL_GYRO_SetFullScale+0x2a>
 8005906:	2304      	movs	r3, #4
 8005908:	e006      	b.n	8005918 <LSM6DSL_GYRO_SetFullScale+0x38>
 800590a:	2306      	movs	r3, #6
 800590c:	e004      	b.n	8005918 <LSM6DSL_GYRO_SetFullScale+0x38>
 800590e:	2302      	movs	r3, #2
 8005910:	e002      	b.n	8005918 <LSM6DSL_GYRO_SetFullScale+0x38>
 8005912:	2300      	movs	r3, #0
 8005914:	e000      	b.n	8005918 <LSM6DSL_GYRO_SetFullScale+0x38>
 8005916:	2301      	movs	r3, #1
  new_fs = (FullScale <= 125)  ? LSM6DSL_125dps
 8005918:	73fb      	strb	r3, [r7, #15]
           : (FullScale <= 500)  ? LSM6DSL_500dps
           : (FullScale <= 1000) ? LSM6DSL_1000dps
           :                       LSM6DSL_2000dps;

  if (lsm6dsl_gy_full_scale_set(&(pObj->Ctx), new_fs) != LSM6DSL_OK)
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	3320      	adds	r3, #32
 800591e:	7bfa      	ldrb	r2, [r7, #15]
 8005920:	4611      	mov	r1, r2
 8005922:	4618      	mov	r0, r3
 8005924:	f000 fc0c 	bl	8006140 <lsm6dsl_gy_full_scale_set>
 8005928:	4603      	mov	r3, r0
 800592a:	2b00      	cmp	r3, #0
 800592c:	d002      	beq.n	8005934 <LSM6DSL_GYRO_SetFullScale+0x54>
  {
    return LSM6DSL_ERROR;
 800592e:	f04f 33ff 	mov.w	r3, #4294967295
 8005932:	e000      	b.n	8005936 <LSM6DSL_GYRO_SetFullScale+0x56>
  }

  return LSM6DSL_OK;
 8005934:	2300      	movs	r3, #0
}
 8005936:	4618      	mov	r0, r3
 8005938:	3710      	adds	r7, #16
 800593a:	46bd      	mov	sp, r7
 800593c:	bd80      	pop	{r7, pc}

0800593e <LSM6DSL_GYRO_GetAxesRaw>:
  * @param  pObj the device pObj
  * @param  Value pointer where the raw values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSL_GYRO_GetAxesRaw(LSM6DSL_Object_t *pObj, LSM6DSL_AxesRaw_t *Value)
{
 800593e:	b580      	push	{r7, lr}
 8005940:	b084      	sub	sp, #16
 8005942:	af00      	add	r7, sp, #0
 8005944:	6078      	str	r0, [r7, #4]
 8005946:	6039      	str	r1, [r7, #0]
  lsm6dsl_axis3bit16_t data_raw;

  /* Read raw data values. */
  if (lsm6dsl_angular_rate_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM6DSL_OK)
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	3320      	adds	r3, #32
 800594c:	f107 0208 	add.w	r2, r7, #8
 8005950:	4611      	mov	r1, r2
 8005952:	4618      	mov	r0, r3
 8005954:	f000 fd0a 	bl	800636c <lsm6dsl_angular_rate_raw_get>
 8005958:	4603      	mov	r3, r0
 800595a:	2b00      	cmp	r3, #0
 800595c:	d002      	beq.n	8005964 <LSM6DSL_GYRO_GetAxesRaw+0x26>
  {
    return LSM6DSL_ERROR;
 800595e:	f04f 33ff 	mov.w	r3, #4294967295
 8005962:	e00c      	b.n	800597e <LSM6DSL_GYRO_GetAxesRaw+0x40>
  }

  /* Format the data. */
  Value->x = data_raw.i16bit[0];
 8005964:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8005968:	683b      	ldr	r3, [r7, #0]
 800596a:	801a      	strh	r2, [r3, #0]
  Value->y = data_raw.i16bit[1];
 800596c:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8005970:	683b      	ldr	r3, [r7, #0]
 8005972:	805a      	strh	r2, [r3, #2]
  Value->z = data_raw.i16bit[2];
 8005974:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8005978:	683b      	ldr	r3, [r7, #0]
 800597a:	809a      	strh	r2, [r3, #4]

  return LSM6DSL_OK;
 800597c:	2300      	movs	r3, #0
}
 800597e:	4618      	mov	r0, r3
 8005980:	3710      	adds	r7, #16
 8005982:	46bd      	mov	sp, r7
 8005984:	bd80      	pop	{r7, pc}

08005986 <LSM6DSL_GYRO_GetAxes>:
  * @param  pObj the device pObj
  * @param  AngularRate pointer where the values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSL_GYRO_GetAxes(LSM6DSL_Object_t *pObj, LSM6DSL_Axes_t *AngularRate)
{
 8005986:	b580      	push	{r7, lr}
 8005988:	b086      	sub	sp, #24
 800598a:	af00      	add	r7, sp, #0
 800598c:	6078      	str	r0, [r7, #4]
 800598e:	6039      	str	r1, [r7, #0]
  lsm6dsl_axis3bit16_t data_raw;
  float sensitivity;

  /* Read raw data values. */
  if (lsm6dsl_angular_rate_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM6DSL_OK)
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	3320      	adds	r3, #32
 8005994:	f107 0210 	add.w	r2, r7, #16
 8005998:	4611      	mov	r1, r2
 800599a:	4618      	mov	r0, r3
 800599c:	f000 fce6 	bl	800636c <lsm6dsl_angular_rate_raw_get>
 80059a0:	4603      	mov	r3, r0
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d002      	beq.n	80059ac <LSM6DSL_GYRO_GetAxes+0x26>
  {
    return LSM6DSL_ERROR;
 80059a6:	f04f 33ff 	mov.w	r3, #4294967295
 80059aa:	e03c      	b.n	8005a26 <LSM6DSL_GYRO_GetAxes+0xa0>
  }

  /* Get LSM6DSL actual sensitivity. */
  if (LSM6DSL_GYRO_GetSensitivity(pObj, &sensitivity) != LSM6DSL_OK)
 80059ac:	f107 030c 	add.w	r3, r7, #12
 80059b0:	4619      	mov	r1, r3
 80059b2:	6878      	ldr	r0, [r7, #4]
 80059b4:	f7ff fe60 	bl	8005678 <LSM6DSL_GYRO_GetSensitivity>
 80059b8:	4603      	mov	r3, r0
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d002      	beq.n	80059c4 <LSM6DSL_GYRO_GetAxes+0x3e>
  {
    return LSM6DSL_ERROR;
 80059be:	f04f 33ff 	mov.w	r3, #4294967295
 80059c2:	e030      	b.n	8005a26 <LSM6DSL_GYRO_GetAxes+0xa0>
  }

  /* Calculate the data. */
  AngularRate->x = (int32_t)((float)((float)data_raw.i16bit[0] * sensitivity));
 80059c4:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80059c8:	ee07 3a90 	vmov	s15, r3
 80059cc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80059d0:	edd7 7a03 	vldr	s15, [r7, #12]
 80059d4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80059d8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80059dc:	ee17 2a90 	vmov	r2, s15
 80059e0:	683b      	ldr	r3, [r7, #0]
 80059e2:	601a      	str	r2, [r3, #0]
  AngularRate->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 80059e4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80059e8:	ee07 3a90 	vmov	s15, r3
 80059ec:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80059f0:	edd7 7a03 	vldr	s15, [r7, #12]
 80059f4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80059f8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80059fc:	ee17 2a90 	vmov	r2, s15
 8005a00:	683b      	ldr	r3, [r7, #0]
 8005a02:	605a      	str	r2, [r3, #4]
  AngularRate->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 8005a04:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8005a08:	ee07 3a90 	vmov	s15, r3
 8005a0c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005a10:	edd7 7a03 	vldr	s15, [r7, #12]
 8005a14:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005a18:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005a1c:	ee17 2a90 	vmov	r2, s15
 8005a20:	683b      	ldr	r3, [r7, #0]
 8005a22:	609a      	str	r2, [r3, #8]

  return LSM6DSL_OK;
 8005a24:	2300      	movs	r3, #0
}
 8005a26:	4618      	mov	r0, r3
 8005a28:	3718      	adds	r7, #24
 8005a2a:	46bd      	mov	sp, r7
 8005a2c:	bd80      	pop	{r7, pc}

08005a2e <LSM6DSL_Write_Reg>:
  * @param  Reg address to be written
  * @param  Data value to be written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSL_Write_Reg(LSM6DSL_Object_t *pObj, uint8_t Reg, uint8_t Data)
{
 8005a2e:	b580      	push	{r7, lr}
 8005a30:	b082      	sub	sp, #8
 8005a32:	af00      	add	r7, sp, #0
 8005a34:	6078      	str	r0, [r7, #4]
 8005a36:	460b      	mov	r3, r1
 8005a38:	70fb      	strb	r3, [r7, #3]
 8005a3a:	4613      	mov	r3, r2
 8005a3c:	70bb      	strb	r3, [r7, #2]
  if (lsm6dsl_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LSM6DSL_OK)
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	f103 0020 	add.w	r0, r3, #32
 8005a44:	1cba      	adds	r2, r7, #2
 8005a46:	78f9      	ldrb	r1, [r7, #3]
 8005a48:	2301      	movs	r3, #1
 8005a4a:	f000 fa75 	bl	8005f38 <lsm6dsl_write_reg>
 8005a4e:	4603      	mov	r3, r0
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d002      	beq.n	8005a5a <LSM6DSL_Write_Reg+0x2c>
  {
    return LSM6DSL_ERROR;
 8005a54:	f04f 33ff 	mov.w	r3, #4294967295
 8005a58:	e000      	b.n	8005a5c <LSM6DSL_Write_Reg+0x2e>
  }

  return LSM6DSL_OK;
 8005a5a:	2300      	movs	r3, #0
}
 8005a5c:	4618      	mov	r0, r3
 8005a5e:	3708      	adds	r7, #8
 8005a60:	46bd      	mov	sp, r7
 8005a62:	bd80      	pop	{r7, pc}

08005a64 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled>:
  * @param  pObj the device pObj
  * @param  Odr the functional output data rate to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM6DSL_ACC_SetOutputDataRate_When_Enabled(LSM6DSL_Object_t *pObj, float Odr)
{
 8005a64:	b580      	push	{r7, lr}
 8005a66:	b084      	sub	sp, #16
 8005a68:	af00      	add	r7, sp, #0
 8005a6a:	6078      	str	r0, [r7, #4]
 8005a6c:	ed87 0a00 	vstr	s0, [r7]
  lsm6dsl_odr_xl_t new_odr;

  new_odr = (Odr <=   12.5f) ? LSM6DSL_XL_ODR_12Hz5
            : (Odr <=   26.0f) ? LSM6DSL_XL_ODR_26Hz
 8005a70:	edd7 7a00 	vldr	s15, [r7]
 8005a74:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 8005a78:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005a7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005a80:	d801      	bhi.n	8005a86 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x22>
 8005a82:	2301      	movs	r3, #1
 8005a84:	e058      	b.n	8005b38 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 8005a86:	edd7 7a00 	vldr	s15, [r7]
 8005a8a:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 8005a8e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005a92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005a96:	d801      	bhi.n	8005a9c <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x38>
 8005a98:	2302      	movs	r3, #2
 8005a9a:	e04d      	b.n	8005b38 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 8005a9c:	edd7 7a00 	vldr	s15, [r7]
 8005aa0:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8005b60 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xfc>
 8005aa4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005aa8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005aac:	d801      	bhi.n	8005ab2 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x4e>
 8005aae:	2303      	movs	r3, #3
 8005ab0:	e042      	b.n	8005b38 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 8005ab2:	edd7 7a00 	vldr	s15, [r7]
 8005ab6:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 8005b64 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x100>
 8005aba:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005abe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005ac2:	d801      	bhi.n	8005ac8 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x64>
 8005ac4:	2304      	movs	r3, #4
 8005ac6:	e037      	b.n	8005b38 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 8005ac8:	edd7 7a00 	vldr	s15, [r7]
 8005acc:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8005b68 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x104>
 8005ad0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005ad4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005ad8:	d801      	bhi.n	8005ade <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x7a>
 8005ada:	2305      	movs	r3, #5
 8005adc:	e02c      	b.n	8005b38 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 8005ade:	edd7 7a00 	vldr	s15, [r7]
 8005ae2:	ed9f 7a22 	vldr	s14, [pc, #136]	; 8005b6c <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x108>
 8005ae6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005aea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005aee:	d801      	bhi.n	8005af4 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x90>
 8005af0:	2306      	movs	r3, #6
 8005af2:	e021      	b.n	8005b38 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 8005af4:	edd7 7a00 	vldr	s15, [r7]
 8005af8:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8005b70 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x10c>
 8005afc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005b00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005b04:	d801      	bhi.n	8005b0a <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xa6>
 8005b06:	2307      	movs	r3, #7
 8005b08:	e016      	b.n	8005b38 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 8005b0a:	edd7 7a00 	vldr	s15, [r7]
 8005b0e:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8005b74 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x110>
 8005b12:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005b16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005b1a:	d801      	bhi.n	8005b20 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xbc>
 8005b1c:	2308      	movs	r3, #8
 8005b1e:	e00b      	b.n	8005b38 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 8005b20:	edd7 7a00 	vldr	s15, [r7]
 8005b24:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8005b78 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x114>
 8005b28:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005b2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005b30:	d801      	bhi.n	8005b36 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd2>
 8005b32:	2309      	movs	r3, #9
 8005b34:	e000      	b.n	8005b38 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 8005b36:	230a      	movs	r3, #10
  new_odr = (Odr <=   12.5f) ? LSM6DSL_XL_ODR_12Hz5
 8005b38:	73fb      	strb	r3, [r7, #15]
            : (Odr <= 1660.0f) ? LSM6DSL_XL_ODR_1k66Hz
            : (Odr <= 3330.0f) ? LSM6DSL_XL_ODR_3k33Hz
            :                    LSM6DSL_XL_ODR_6k66Hz;

  /* Output data rate selection. */
  if (lsm6dsl_xl_data_rate_set(&(pObj->Ctx), new_odr) != LSM6DSL_OK)
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	3320      	adds	r3, #32
 8005b3e:	7bfa      	ldrb	r2, [r7, #15]
 8005b40:	4611      	mov	r1, r2
 8005b42:	4618      	mov	r0, r3
 8005b44:	f000 fa6e 	bl	8006024 <lsm6dsl_xl_data_rate_set>
 8005b48:	4603      	mov	r3, r0
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d002      	beq.n	8005b54 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xf0>
  {
    return LSM6DSL_ERROR;
 8005b4e:	f04f 33ff 	mov.w	r3, #4294967295
 8005b52:	e000      	b.n	8005b56 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xf2>
  }

  return LSM6DSL_OK;
 8005b54:	2300      	movs	r3, #0
}
 8005b56:	4618      	mov	r0, r3
 8005b58:	3710      	adds	r7, #16
 8005b5a:	46bd      	mov	sp, r7
 8005b5c:	bd80      	pop	{r7, pc}
 8005b5e:	bf00      	nop
 8005b60:	42500000 	.word	0x42500000
 8005b64:	42d00000 	.word	0x42d00000
 8005b68:	43500000 	.word	0x43500000
 8005b6c:	43d00000 	.word	0x43d00000
 8005b70:	44504000 	.word	0x44504000
 8005b74:	44cf8000 	.word	0x44cf8000
 8005b78:	45502000 	.word	0x45502000

08005b7c <LSM6DSL_ACC_SetOutputDataRate_When_Disabled>:
  * @param  pObj the device pObj
  * @param  Odr the functional output data rate to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM6DSL_ACC_SetOutputDataRate_When_Disabled(LSM6DSL_Object_t *pObj, float Odr)
{
 8005b7c:	b480      	push	{r7}
 8005b7e:	b083      	sub	sp, #12
 8005b80:	af00      	add	r7, sp, #0
 8005b82:	6078      	str	r0, [r7, #4]
 8005b84:	ed87 0a00 	vstr	s0, [r7]
  pObj->acc_odr = (Odr <=   12.5f) ? LSM6DSL_XL_ODR_12Hz5
                  : (Odr <=   26.0f) ? LSM6DSL_XL_ODR_26Hz
 8005b88:	edd7 7a00 	vldr	s15, [r7]
 8005b8c:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 8005b90:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005b94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005b98:	d801      	bhi.n	8005b9e <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0x22>
 8005b9a:	2301      	movs	r3, #1
 8005b9c:	e058      	b.n	8005c50 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8005b9e:	edd7 7a00 	vldr	s15, [r7]
 8005ba2:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 8005ba6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005baa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005bae:	d801      	bhi.n	8005bb4 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0x38>
 8005bb0:	2302      	movs	r3, #2
 8005bb2:	e04d      	b.n	8005c50 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8005bb4:	edd7 7a00 	vldr	s15, [r7]
 8005bb8:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 8005c64 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xe8>
 8005bbc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005bc0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005bc4:	d801      	bhi.n	8005bca <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0x4e>
 8005bc6:	2303      	movs	r3, #3
 8005bc8:	e042      	b.n	8005c50 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8005bca:	edd7 7a00 	vldr	s15, [r7]
 8005bce:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8005c68 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xec>
 8005bd2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005bd6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005bda:	d801      	bhi.n	8005be0 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0x64>
 8005bdc:	2304      	movs	r3, #4
 8005bde:	e037      	b.n	8005c50 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8005be0:	edd7 7a00 	vldr	s15, [r7]
 8005be4:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8005c6c <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xf0>
 8005be8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005bec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005bf0:	d801      	bhi.n	8005bf6 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0x7a>
 8005bf2:	2305      	movs	r3, #5
 8005bf4:	e02c      	b.n	8005c50 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8005bf6:	edd7 7a00 	vldr	s15, [r7]
 8005bfa:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8005c70 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xf4>
 8005bfe:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005c02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005c06:	d801      	bhi.n	8005c0c <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0x90>
 8005c08:	2306      	movs	r3, #6
 8005c0a:	e021      	b.n	8005c50 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8005c0c:	edd7 7a00 	vldr	s15, [r7]
 8005c10:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8005c74 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xf8>
 8005c14:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005c18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005c1c:	d801      	bhi.n	8005c22 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xa6>
 8005c1e:	2307      	movs	r3, #7
 8005c20:	e016      	b.n	8005c50 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8005c22:	edd7 7a00 	vldr	s15, [r7]
 8005c26:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8005c78 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xfc>
 8005c2a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005c2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005c32:	d801      	bhi.n	8005c38 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xbc>
 8005c34:	2308      	movs	r3, #8
 8005c36:	e00b      	b.n	8005c50 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8005c38:	edd7 7a00 	vldr	s15, [r7]
 8005c3c:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8005c7c <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0x100>
 8005c40:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005c44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005c48:	d801      	bhi.n	8005c4e <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd2>
 8005c4a:	2309      	movs	r3, #9
 8005c4c:	e000      	b.n	8005c50 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8005c4e:	230a      	movs	r3, #10
  pObj->acc_odr = (Odr <=   12.5f) ? LSM6DSL_XL_ODR_12Hz5
 8005c50:	687a      	ldr	r2, [r7, #4]
 8005c52:	f882 3033 	strb.w	r3, [r2, #51]	; 0x33
                  : (Odr <=  833.0f) ? LSM6DSL_XL_ODR_833Hz
                  : (Odr <= 1660.0f) ? LSM6DSL_XL_ODR_1k66Hz
                  : (Odr <= 3330.0f) ? LSM6DSL_XL_ODR_3k33Hz
                  :                    LSM6DSL_XL_ODR_6k66Hz;

  return LSM6DSL_OK;
 8005c56:	2300      	movs	r3, #0
}
 8005c58:	4618      	mov	r0, r3
 8005c5a:	370c      	adds	r7, #12
 8005c5c:	46bd      	mov	sp, r7
 8005c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c62:	4770      	bx	lr
 8005c64:	42500000 	.word	0x42500000
 8005c68:	42d00000 	.word	0x42d00000
 8005c6c:	43500000 	.word	0x43500000
 8005c70:	43d00000 	.word	0x43d00000
 8005c74:	44504000 	.word	0x44504000
 8005c78:	44cf8000 	.word	0x44cf8000
 8005c7c:	45502000 	.word	0x45502000

08005c80 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled>:
  * @param  pObj the device pObj
  * @param  Odr the functional output data rate to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM6DSL_GYRO_SetOutputDataRate_When_Enabled(LSM6DSL_Object_t *pObj, float Odr)
{
 8005c80:	b580      	push	{r7, lr}
 8005c82:	b084      	sub	sp, #16
 8005c84:	af00      	add	r7, sp, #0
 8005c86:	6078      	str	r0, [r7, #4]
 8005c88:	ed87 0a00 	vstr	s0, [r7]
  lsm6dsl_odr_g_t new_odr;

  new_odr = (Odr <=   12.5f) ? LSM6DSL_GY_ODR_12Hz5
            : (Odr <=   26.0f) ? LSM6DSL_GY_ODR_26Hz
 8005c8c:	edd7 7a00 	vldr	s15, [r7]
 8005c90:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 8005c94:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005c98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005c9c:	d801      	bhi.n	8005ca2 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x22>
 8005c9e:	2301      	movs	r3, #1
 8005ca0:	e058      	b.n	8005d54 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8005ca2:	edd7 7a00 	vldr	s15, [r7]
 8005ca6:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 8005caa:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005cae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005cb2:	d801      	bhi.n	8005cb8 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x38>
 8005cb4:	2302      	movs	r3, #2
 8005cb6:	e04d      	b.n	8005d54 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8005cb8:	edd7 7a00 	vldr	s15, [r7]
 8005cbc:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8005d7c <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xfc>
 8005cc0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005cc4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005cc8:	d801      	bhi.n	8005cce <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x4e>
 8005cca:	2303      	movs	r3, #3
 8005ccc:	e042      	b.n	8005d54 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8005cce:	edd7 7a00 	vldr	s15, [r7]
 8005cd2:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 8005d80 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x100>
 8005cd6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005cda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005cde:	d801      	bhi.n	8005ce4 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x64>
 8005ce0:	2304      	movs	r3, #4
 8005ce2:	e037      	b.n	8005d54 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8005ce4:	edd7 7a00 	vldr	s15, [r7]
 8005ce8:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8005d84 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x104>
 8005cec:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005cf0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005cf4:	d801      	bhi.n	8005cfa <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x7a>
 8005cf6:	2305      	movs	r3, #5
 8005cf8:	e02c      	b.n	8005d54 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8005cfa:	edd7 7a00 	vldr	s15, [r7]
 8005cfe:	ed9f 7a22 	vldr	s14, [pc, #136]	; 8005d88 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x108>
 8005d02:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005d06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005d0a:	d801      	bhi.n	8005d10 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x90>
 8005d0c:	2306      	movs	r3, #6
 8005d0e:	e021      	b.n	8005d54 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8005d10:	edd7 7a00 	vldr	s15, [r7]
 8005d14:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8005d8c <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x10c>
 8005d18:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005d1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005d20:	d801      	bhi.n	8005d26 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xa6>
 8005d22:	2307      	movs	r3, #7
 8005d24:	e016      	b.n	8005d54 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8005d26:	edd7 7a00 	vldr	s15, [r7]
 8005d2a:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8005d90 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x110>
 8005d2e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005d32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005d36:	d801      	bhi.n	8005d3c <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xbc>
 8005d38:	2308      	movs	r3, #8
 8005d3a:	e00b      	b.n	8005d54 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8005d3c:	edd7 7a00 	vldr	s15, [r7]
 8005d40:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8005d94 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x114>
 8005d44:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005d48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005d4c:	d801      	bhi.n	8005d52 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xd2>
 8005d4e:	2309      	movs	r3, #9
 8005d50:	e000      	b.n	8005d54 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8005d52:	230a      	movs	r3, #10
  new_odr = (Odr <=   12.5f) ? LSM6DSL_GY_ODR_12Hz5
 8005d54:	73fb      	strb	r3, [r7, #15]
            : (Odr <= 1660.0f) ? LSM6DSL_GY_ODR_1k66Hz
            : (Odr <= 3330.0f) ? LSM6DSL_GY_ODR_3k33Hz
            :                    LSM6DSL_GY_ODR_6k66Hz;

  /* Output data rate selection. */
  if (lsm6dsl_gy_data_rate_set(&(pObj->Ctx), new_odr) != LSM6DSL_OK)
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	3320      	adds	r3, #32
 8005d5a:	7bfa      	ldrb	r2, [r7, #15]
 8005d5c:	4611      	mov	r1, r2
 8005d5e:	4618      	mov	r0, r3
 8005d60:	f000 fa56 	bl	8006210 <lsm6dsl_gy_data_rate_set>
 8005d64:	4603      	mov	r3, r0
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d002      	beq.n	8005d70 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xf0>
  {
    return LSM6DSL_ERROR;
 8005d6a:	f04f 33ff 	mov.w	r3, #4294967295
 8005d6e:	e000      	b.n	8005d72 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xf2>
  }

  return LSM6DSL_OK;
 8005d70:	2300      	movs	r3, #0
}
 8005d72:	4618      	mov	r0, r3
 8005d74:	3710      	adds	r7, #16
 8005d76:	46bd      	mov	sp, r7
 8005d78:	bd80      	pop	{r7, pc}
 8005d7a:	bf00      	nop
 8005d7c:	42500000 	.word	0x42500000
 8005d80:	42d00000 	.word	0x42d00000
 8005d84:	43500000 	.word	0x43500000
 8005d88:	43d00000 	.word	0x43d00000
 8005d8c:	44504000 	.word	0x44504000
 8005d90:	44cf8000 	.word	0x44cf8000
 8005d94:	45502000 	.word	0x45502000

08005d98 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled>:
  * @param  pObj the device pObj
  * @param  Odr the functional output data rate to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM6DSL_GYRO_SetOutputDataRate_When_Disabled(LSM6DSL_Object_t *pObj, float Odr)
{
 8005d98:	b480      	push	{r7}
 8005d9a:	b083      	sub	sp, #12
 8005d9c:	af00      	add	r7, sp, #0
 8005d9e:	6078      	str	r0, [r7, #4]
 8005da0:	ed87 0a00 	vstr	s0, [r7]
  pObj->gyro_odr = (Odr <=   12.5f) ? LSM6DSL_GY_ODR_12Hz5
                   : (Odr <=   26.0f) ? LSM6DSL_GY_ODR_26Hz
 8005da4:	edd7 7a00 	vldr	s15, [r7]
 8005da8:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 8005dac:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005db0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005db4:	d801      	bhi.n	8005dba <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0x22>
 8005db6:	2301      	movs	r3, #1
 8005db8:	e058      	b.n	8005e6c <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8005dba:	edd7 7a00 	vldr	s15, [r7]
 8005dbe:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 8005dc2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005dc6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005dca:	d801      	bhi.n	8005dd0 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0x38>
 8005dcc:	2302      	movs	r3, #2
 8005dce:	e04d      	b.n	8005e6c <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8005dd0:	edd7 7a00 	vldr	s15, [r7]
 8005dd4:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 8005e80 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xe8>
 8005dd8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005ddc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005de0:	d801      	bhi.n	8005de6 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0x4e>
 8005de2:	2303      	movs	r3, #3
 8005de4:	e042      	b.n	8005e6c <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8005de6:	edd7 7a00 	vldr	s15, [r7]
 8005dea:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8005e84 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xec>
 8005dee:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005df2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005df6:	d801      	bhi.n	8005dfc <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0x64>
 8005df8:	2304      	movs	r3, #4
 8005dfa:	e037      	b.n	8005e6c <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8005dfc:	edd7 7a00 	vldr	s15, [r7]
 8005e00:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8005e88 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xf0>
 8005e04:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005e08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005e0c:	d801      	bhi.n	8005e12 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0x7a>
 8005e0e:	2305      	movs	r3, #5
 8005e10:	e02c      	b.n	8005e6c <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8005e12:	edd7 7a00 	vldr	s15, [r7]
 8005e16:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8005e8c <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xf4>
 8005e1a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005e1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005e22:	d801      	bhi.n	8005e28 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0x90>
 8005e24:	2306      	movs	r3, #6
 8005e26:	e021      	b.n	8005e6c <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8005e28:	edd7 7a00 	vldr	s15, [r7]
 8005e2c:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8005e90 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xf8>
 8005e30:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005e34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005e38:	d801      	bhi.n	8005e3e <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xa6>
 8005e3a:	2307      	movs	r3, #7
 8005e3c:	e016      	b.n	8005e6c <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8005e3e:	edd7 7a00 	vldr	s15, [r7]
 8005e42:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8005e94 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xfc>
 8005e46:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005e4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005e4e:	d801      	bhi.n	8005e54 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xbc>
 8005e50:	2308      	movs	r3, #8
 8005e52:	e00b      	b.n	8005e6c <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8005e54:	edd7 7a00 	vldr	s15, [r7]
 8005e58:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8005e98 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0x100>
 8005e5c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005e60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005e64:	d801      	bhi.n	8005e6a <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xd2>
 8005e66:	2309      	movs	r3, #9
 8005e68:	e000      	b.n	8005e6c <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8005e6a:	230a      	movs	r3, #10
  pObj->gyro_odr = (Odr <=   12.5f) ? LSM6DSL_GY_ODR_12Hz5
 8005e6c:	687a      	ldr	r2, [r7, #4]
 8005e6e:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
                   : (Odr <=  833.0f) ? LSM6DSL_GY_ODR_833Hz
                   : (Odr <= 1660.0f) ? LSM6DSL_GY_ODR_1k66Hz
                   : (Odr <= 3330.0f) ? LSM6DSL_GY_ODR_3k33Hz
                   :                    LSM6DSL_GY_ODR_6k66Hz;

  return LSM6DSL_OK;
 8005e72:	2300      	movs	r3, #0
}
 8005e74:	4618      	mov	r0, r3
 8005e76:	370c      	adds	r7, #12
 8005e78:	46bd      	mov	sp, r7
 8005e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e7e:	4770      	bx	lr
 8005e80:	42500000 	.word	0x42500000
 8005e84:	42d00000 	.word	0x42d00000
 8005e88:	43500000 	.word	0x43500000
 8005e8c:	43d00000 	.word	0x43d00000
 8005e90:	44504000 	.word	0x44504000
 8005e94:	44cf8000 	.word	0x44cf8000
 8005e98:	45502000 	.word	0x45502000

08005e9c <ReadRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8005e9c:	b590      	push	{r4, r7, lr}
 8005e9e:	b087      	sub	sp, #28
 8005ea0:	af00      	add	r7, sp, #0
 8005ea2:	60f8      	str	r0, [r7, #12]
 8005ea4:	607a      	str	r2, [r7, #4]
 8005ea6:	461a      	mov	r2, r3
 8005ea8:	460b      	mov	r3, r1
 8005eaa:	72fb      	strb	r3, [r7, #11]
 8005eac:	4613      	mov	r3, r2
 8005eae:	813b      	strh	r3, [r7, #8]
  LSM6DSL_Object_t *pObj = (LSM6DSL_Object_t *)Handle;
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8005eb4:	697b      	ldr	r3, [r7, #20]
 8005eb6:	695c      	ldr	r4, [r3, #20]
 8005eb8:	697b      	ldr	r3, [r7, #20]
 8005eba:	7b1b      	ldrb	r3, [r3, #12]
 8005ebc:	b298      	uxth	r0, r3
 8005ebe:	7afb      	ldrb	r3, [r7, #11]
 8005ec0:	b299      	uxth	r1, r3
 8005ec2:	893b      	ldrh	r3, [r7, #8]
 8005ec4:	687a      	ldr	r2, [r7, #4]
 8005ec6:	47a0      	blx	r4
 8005ec8:	4603      	mov	r3, r0
}
 8005eca:	4618      	mov	r0, r3
 8005ecc:	371c      	adds	r7, #28
 8005ece:	46bd      	mov	sp, r7
 8005ed0:	bd90      	pop	{r4, r7, pc}

08005ed2 <WriteRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8005ed2:	b590      	push	{r4, r7, lr}
 8005ed4:	b087      	sub	sp, #28
 8005ed6:	af00      	add	r7, sp, #0
 8005ed8:	60f8      	str	r0, [r7, #12]
 8005eda:	607a      	str	r2, [r7, #4]
 8005edc:	461a      	mov	r2, r3
 8005ede:	460b      	mov	r3, r1
 8005ee0:	72fb      	strb	r3, [r7, #11]
 8005ee2:	4613      	mov	r3, r2
 8005ee4:	813b      	strh	r3, [r7, #8]
  LSM6DSL_Object_t *pObj = (LSM6DSL_Object_t *)Handle;
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	617b      	str	r3, [r7, #20]

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8005eea:	697b      	ldr	r3, [r7, #20]
 8005eec:	691c      	ldr	r4, [r3, #16]
 8005eee:	697b      	ldr	r3, [r7, #20]
 8005ef0:	7b1b      	ldrb	r3, [r3, #12]
 8005ef2:	b298      	uxth	r0, r3
 8005ef4:	7afb      	ldrb	r3, [r7, #11]
 8005ef6:	b299      	uxth	r1, r3
 8005ef8:	893b      	ldrh	r3, [r7, #8]
 8005efa:	687a      	ldr	r2, [r7, #4]
 8005efc:	47a0      	blx	r4
 8005efe:	4603      	mov	r3, r0
}
 8005f00:	4618      	mov	r0, r3
 8005f02:	371c      	adds	r7, #28
 8005f04:	46bd      	mov	sp, r7
 8005f06:	bd90      	pop	{r4, r7, pc}

08005f08 <lsm6dsl_read_reg>:
  *
  */
int32_t lsm6dsl_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                         uint8_t *data,
                         uint16_t len)
{
 8005f08:	b590      	push	{r4, r7, lr}
 8005f0a:	b087      	sub	sp, #28
 8005f0c:	af00      	add	r7, sp, #0
 8005f0e:	60f8      	str	r0, [r7, #12]
 8005f10:	607a      	str	r2, [r7, #4]
 8005f12:	461a      	mov	r2, r3
 8005f14:	460b      	mov	r3, r1
 8005f16:	72fb      	strb	r3, [r7, #11]
 8005f18:	4613      	mov	r3, r2
 8005f1a:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	685c      	ldr	r4, [r3, #4]
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	68d8      	ldr	r0, [r3, #12]
 8005f24:	893b      	ldrh	r3, [r7, #8]
 8005f26:	7af9      	ldrb	r1, [r7, #11]
 8005f28:	687a      	ldr	r2, [r7, #4]
 8005f2a:	47a0      	blx	r4
 8005f2c:	6178      	str	r0, [r7, #20]

  return ret;
 8005f2e:	697b      	ldr	r3, [r7, #20]
}
 8005f30:	4618      	mov	r0, r3
 8005f32:	371c      	adds	r7, #28
 8005f34:	46bd      	mov	sp, r7
 8005f36:	bd90      	pop	{r4, r7, pc}

08005f38 <lsm6dsl_write_reg>:
  *
  */
int32_t lsm6dsl_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                          uint8_t *data,
                          uint16_t len)
{
 8005f38:	b590      	push	{r4, r7, lr}
 8005f3a:	b087      	sub	sp, #28
 8005f3c:	af00      	add	r7, sp, #0
 8005f3e:	60f8      	str	r0, [r7, #12]
 8005f40:	607a      	str	r2, [r7, #4]
 8005f42:	461a      	mov	r2, r3
 8005f44:	460b      	mov	r3, r1
 8005f46:	72fb      	strb	r3, [r7, #11]
 8005f48:	4613      	mov	r3, r2
 8005f4a:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	681c      	ldr	r4, [r3, #0]
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	68d8      	ldr	r0, [r3, #12]
 8005f54:	893b      	ldrh	r3, [r7, #8]
 8005f56:	7af9      	ldrb	r1, [r7, #11]
 8005f58:	687a      	ldr	r2, [r7, #4]
 8005f5a:	47a0      	blx	r4
 8005f5c:	6178      	str	r0, [r7, #20]

  return ret;
 8005f5e:	697b      	ldr	r3, [r7, #20]
}
 8005f60:	4618      	mov	r0, r3
 8005f62:	371c      	adds	r7, #28
 8005f64:	46bd      	mov	sp, r7
 8005f66:	bd90      	pop	{r4, r7, pc}

08005f68 <lsm6dsl_xl_full_scale_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_xl_full_scale_set(stmdev_ctx_t *ctx,
                                  lsm6dsl_fs_xl_t val)
{
 8005f68:	b580      	push	{r7, lr}
 8005f6a:	b084      	sub	sp, #16
 8005f6c:	af00      	add	r7, sp, #0
 8005f6e:	6078      	str	r0, [r7, #4]
 8005f70:	460b      	mov	r3, r1
 8005f72:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl1_xl_t ctrl1_xl;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 8005f74:	f107 0208 	add.w	r2, r7, #8
 8005f78:	2301      	movs	r3, #1
 8005f7a:	2110      	movs	r1, #16
 8005f7c:	6878      	ldr	r0, [r7, #4]
 8005f7e:	f7ff ffc3 	bl	8005f08 <lsm6dsl_read_reg>
 8005f82:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d10f      	bne.n	8005faa <lsm6dsl_xl_full_scale_set+0x42>
  {
    ctrl1_xl.fs_xl = (uint8_t) val;
 8005f8a:	78fb      	ldrb	r3, [r7, #3]
 8005f8c:	f003 0303 	and.w	r3, r3, #3
 8005f90:	b2da      	uxtb	r2, r3
 8005f92:	7a3b      	ldrb	r3, [r7, #8]
 8005f94:	f362 0383 	bfi	r3, r2, #2, #2
 8005f98:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 8005f9a:	f107 0208 	add.w	r2, r7, #8
 8005f9e:	2301      	movs	r3, #1
 8005fa0:	2110      	movs	r1, #16
 8005fa2:	6878      	ldr	r0, [r7, #4]
 8005fa4:	f7ff ffc8 	bl	8005f38 <lsm6dsl_write_reg>
 8005fa8:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8005faa:	68fb      	ldr	r3, [r7, #12]
}
 8005fac:	4618      	mov	r0, r3
 8005fae:	3710      	adds	r7, #16
 8005fb0:	46bd      	mov	sp, r7
 8005fb2:	bd80      	pop	{r7, pc}

08005fb4 <lsm6dsl_xl_full_scale_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_xl_full_scale_get(stmdev_ctx_t *ctx,
                                  lsm6dsl_fs_xl_t *val)
{
 8005fb4:	b580      	push	{r7, lr}
 8005fb6:	b084      	sub	sp, #16
 8005fb8:	af00      	add	r7, sp, #0
 8005fba:	6078      	str	r0, [r7, #4]
 8005fbc:	6039      	str	r1, [r7, #0]
  lsm6dsl_ctrl1_xl_t ctrl1_xl;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 8005fbe:	f107 0208 	add.w	r2, r7, #8
 8005fc2:	2301      	movs	r3, #1
 8005fc4:	2110      	movs	r1, #16
 8005fc6:	6878      	ldr	r0, [r7, #4]
 8005fc8:	f7ff ff9e 	bl	8005f08 <lsm6dsl_read_reg>
 8005fcc:	60f8      	str	r0, [r7, #12]

  switch (ctrl1_xl.fs_xl)
 8005fce:	7a3b      	ldrb	r3, [r7, #8]
 8005fd0:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8005fd4:	b2db      	uxtb	r3, r3
 8005fd6:	2b03      	cmp	r3, #3
 8005fd8:	d81a      	bhi.n	8006010 <lsm6dsl_xl_full_scale_get+0x5c>
 8005fda:	a201      	add	r2, pc, #4	; (adr r2, 8005fe0 <lsm6dsl_xl_full_scale_get+0x2c>)
 8005fdc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fe0:	08005ff1 	.word	0x08005ff1
 8005fe4:	08005ff9 	.word	0x08005ff9
 8005fe8:	08006001 	.word	0x08006001
 8005fec:	08006009 	.word	0x08006009
  {
    case LSM6DSL_2g:
      *val = LSM6DSL_2g;
 8005ff0:	683b      	ldr	r3, [r7, #0]
 8005ff2:	2200      	movs	r2, #0
 8005ff4:	701a      	strb	r2, [r3, #0]
      break;
 8005ff6:	e00f      	b.n	8006018 <lsm6dsl_xl_full_scale_get+0x64>

    case LSM6DSL_16g:
      *val = LSM6DSL_16g;
 8005ff8:	683b      	ldr	r3, [r7, #0]
 8005ffa:	2201      	movs	r2, #1
 8005ffc:	701a      	strb	r2, [r3, #0]
      break;
 8005ffe:	e00b      	b.n	8006018 <lsm6dsl_xl_full_scale_get+0x64>

    case LSM6DSL_4g:
      *val = LSM6DSL_4g;
 8006000:	683b      	ldr	r3, [r7, #0]
 8006002:	2202      	movs	r2, #2
 8006004:	701a      	strb	r2, [r3, #0]
      break;
 8006006:	e007      	b.n	8006018 <lsm6dsl_xl_full_scale_get+0x64>

    case LSM6DSL_8g:
      *val = LSM6DSL_8g;
 8006008:	683b      	ldr	r3, [r7, #0]
 800600a:	2203      	movs	r2, #3
 800600c:	701a      	strb	r2, [r3, #0]
      break;
 800600e:	e003      	b.n	8006018 <lsm6dsl_xl_full_scale_get+0x64>

    default:
      *val = LSM6DSL_XL_FS_ND;
 8006010:	683b      	ldr	r3, [r7, #0]
 8006012:	2204      	movs	r2, #4
 8006014:	701a      	strb	r2, [r3, #0]
      break;
 8006016:	bf00      	nop
  }

  return ret;
 8006018:	68fb      	ldr	r3, [r7, #12]
}
 800601a:	4618      	mov	r0, r3
 800601c:	3710      	adds	r7, #16
 800601e:	46bd      	mov	sp, r7
 8006020:	bd80      	pop	{r7, pc}
 8006022:	bf00      	nop

08006024 <lsm6dsl_xl_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_xl_data_rate_set(stmdev_ctx_t *ctx,
                                 lsm6dsl_odr_xl_t val)
{
 8006024:	b580      	push	{r7, lr}
 8006026:	b084      	sub	sp, #16
 8006028:	af00      	add	r7, sp, #0
 800602a:	6078      	str	r0, [r7, #4]
 800602c:	460b      	mov	r3, r1
 800602e:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl1_xl_t ctrl1_xl;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 8006030:	f107 0208 	add.w	r2, r7, #8
 8006034:	2301      	movs	r3, #1
 8006036:	2110      	movs	r1, #16
 8006038:	6878      	ldr	r0, [r7, #4]
 800603a:	f7ff ff65 	bl	8005f08 <lsm6dsl_read_reg>
 800603e:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	2b00      	cmp	r3, #0
 8006044:	d10f      	bne.n	8006066 <lsm6dsl_xl_data_rate_set+0x42>
  {
    ctrl1_xl.odr_xl = (uint8_t) val;
 8006046:	78fb      	ldrb	r3, [r7, #3]
 8006048:	f003 030f 	and.w	r3, r3, #15
 800604c:	b2da      	uxtb	r2, r3
 800604e:	7a3b      	ldrb	r3, [r7, #8]
 8006050:	f362 1307 	bfi	r3, r2, #4, #4
 8006054:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 8006056:	f107 0208 	add.w	r2, r7, #8
 800605a:	2301      	movs	r3, #1
 800605c:	2110      	movs	r1, #16
 800605e:	6878      	ldr	r0, [r7, #4]
 8006060:	f7ff ff6a 	bl	8005f38 <lsm6dsl_write_reg>
 8006064:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8006066:	68fb      	ldr	r3, [r7, #12]
}
 8006068:	4618      	mov	r0, r3
 800606a:	3710      	adds	r7, #16
 800606c:	46bd      	mov	sp, r7
 800606e:	bd80      	pop	{r7, pc}

08006070 <lsm6dsl_xl_data_rate_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_xl_data_rate_get(stmdev_ctx_t *ctx,
                                 lsm6dsl_odr_xl_t *val)
{
 8006070:	b580      	push	{r7, lr}
 8006072:	b084      	sub	sp, #16
 8006074:	af00      	add	r7, sp, #0
 8006076:	6078      	str	r0, [r7, #4]
 8006078:	6039      	str	r1, [r7, #0]
  lsm6dsl_ctrl1_xl_t ctrl1_xl;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 800607a:	f107 0208 	add.w	r2, r7, #8
 800607e:	2301      	movs	r3, #1
 8006080:	2110      	movs	r1, #16
 8006082:	6878      	ldr	r0, [r7, #4]
 8006084:	f7ff ff40 	bl	8005f08 <lsm6dsl_read_reg>
 8006088:	60f8      	str	r0, [r7, #12]

  switch (ctrl1_xl.odr_xl)
 800608a:	7a3b      	ldrb	r3, [r7, #8]
 800608c:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8006090:	b2db      	uxtb	r3, r3
 8006092:	2b0b      	cmp	r3, #11
 8006094:	d84a      	bhi.n	800612c <lsm6dsl_xl_data_rate_get+0xbc>
 8006096:	a201      	add	r2, pc, #4	; (adr r2, 800609c <lsm6dsl_xl_data_rate_get+0x2c>)
 8006098:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800609c:	080060cd 	.word	0x080060cd
 80060a0:	080060d5 	.word	0x080060d5
 80060a4:	080060dd 	.word	0x080060dd
 80060a8:	080060e5 	.word	0x080060e5
 80060ac:	080060ed 	.word	0x080060ed
 80060b0:	080060f5 	.word	0x080060f5
 80060b4:	080060fd 	.word	0x080060fd
 80060b8:	08006105 	.word	0x08006105
 80060bc:	0800610d 	.word	0x0800610d
 80060c0:	08006115 	.word	0x08006115
 80060c4:	0800611d 	.word	0x0800611d
 80060c8:	08006125 	.word	0x08006125
  {
    case LSM6DSL_XL_ODR_OFF:
      *val = LSM6DSL_XL_ODR_OFF;
 80060cc:	683b      	ldr	r3, [r7, #0]
 80060ce:	2200      	movs	r2, #0
 80060d0:	701a      	strb	r2, [r3, #0]
      break;
 80060d2:	e02f      	b.n	8006134 <lsm6dsl_xl_data_rate_get+0xc4>

    case LSM6DSL_XL_ODR_12Hz5:
      *val = LSM6DSL_XL_ODR_12Hz5;
 80060d4:	683b      	ldr	r3, [r7, #0]
 80060d6:	2201      	movs	r2, #1
 80060d8:	701a      	strb	r2, [r3, #0]
      break;
 80060da:	e02b      	b.n	8006134 <lsm6dsl_xl_data_rate_get+0xc4>

    case LSM6DSL_XL_ODR_26Hz:
      *val = LSM6DSL_XL_ODR_26Hz;
 80060dc:	683b      	ldr	r3, [r7, #0]
 80060de:	2202      	movs	r2, #2
 80060e0:	701a      	strb	r2, [r3, #0]
      break;
 80060e2:	e027      	b.n	8006134 <lsm6dsl_xl_data_rate_get+0xc4>

    case LSM6DSL_XL_ODR_52Hz:
      *val = LSM6DSL_XL_ODR_52Hz;
 80060e4:	683b      	ldr	r3, [r7, #0]
 80060e6:	2203      	movs	r2, #3
 80060e8:	701a      	strb	r2, [r3, #0]
      break;
 80060ea:	e023      	b.n	8006134 <lsm6dsl_xl_data_rate_get+0xc4>

    case LSM6DSL_XL_ODR_104Hz:
      *val = LSM6DSL_XL_ODR_104Hz;
 80060ec:	683b      	ldr	r3, [r7, #0]
 80060ee:	2204      	movs	r2, #4
 80060f0:	701a      	strb	r2, [r3, #0]
      break;
 80060f2:	e01f      	b.n	8006134 <lsm6dsl_xl_data_rate_get+0xc4>

    case LSM6DSL_XL_ODR_208Hz:
      *val = LSM6DSL_XL_ODR_208Hz;
 80060f4:	683b      	ldr	r3, [r7, #0]
 80060f6:	2205      	movs	r2, #5
 80060f8:	701a      	strb	r2, [r3, #0]
      break;
 80060fa:	e01b      	b.n	8006134 <lsm6dsl_xl_data_rate_get+0xc4>

    case LSM6DSL_XL_ODR_416Hz:
      *val = LSM6DSL_XL_ODR_416Hz;
 80060fc:	683b      	ldr	r3, [r7, #0]
 80060fe:	2206      	movs	r2, #6
 8006100:	701a      	strb	r2, [r3, #0]
      break;
 8006102:	e017      	b.n	8006134 <lsm6dsl_xl_data_rate_get+0xc4>

    case LSM6DSL_XL_ODR_833Hz:
      *val = LSM6DSL_XL_ODR_833Hz;
 8006104:	683b      	ldr	r3, [r7, #0]
 8006106:	2207      	movs	r2, #7
 8006108:	701a      	strb	r2, [r3, #0]
      break;
 800610a:	e013      	b.n	8006134 <lsm6dsl_xl_data_rate_get+0xc4>

    case LSM6DSL_XL_ODR_1k66Hz:
      *val = LSM6DSL_XL_ODR_1k66Hz;
 800610c:	683b      	ldr	r3, [r7, #0]
 800610e:	2208      	movs	r2, #8
 8006110:	701a      	strb	r2, [r3, #0]
      break;
 8006112:	e00f      	b.n	8006134 <lsm6dsl_xl_data_rate_get+0xc4>

    case LSM6DSL_XL_ODR_3k33Hz:
      *val = LSM6DSL_XL_ODR_3k33Hz;
 8006114:	683b      	ldr	r3, [r7, #0]
 8006116:	2209      	movs	r2, #9
 8006118:	701a      	strb	r2, [r3, #0]
      break;
 800611a:	e00b      	b.n	8006134 <lsm6dsl_xl_data_rate_get+0xc4>

    case LSM6DSL_XL_ODR_6k66Hz:
      *val = LSM6DSL_XL_ODR_6k66Hz;
 800611c:	683b      	ldr	r3, [r7, #0]
 800611e:	220a      	movs	r2, #10
 8006120:	701a      	strb	r2, [r3, #0]
      break;
 8006122:	e007      	b.n	8006134 <lsm6dsl_xl_data_rate_get+0xc4>

    case LSM6DSL_XL_ODR_1Hz6:
      *val = LSM6DSL_XL_ODR_1Hz6;
 8006124:	683b      	ldr	r3, [r7, #0]
 8006126:	220b      	movs	r2, #11
 8006128:	701a      	strb	r2, [r3, #0]
      break;
 800612a:	e003      	b.n	8006134 <lsm6dsl_xl_data_rate_get+0xc4>

    default:
      *val = LSM6DSL_XL_ODR_ND;
 800612c:	683b      	ldr	r3, [r7, #0]
 800612e:	220c      	movs	r2, #12
 8006130:	701a      	strb	r2, [r3, #0]
      break;
 8006132:	bf00      	nop
  }

  return ret;
 8006134:	68fb      	ldr	r3, [r7, #12]
}
 8006136:	4618      	mov	r0, r3
 8006138:	3710      	adds	r7, #16
 800613a:	46bd      	mov	sp, r7
 800613c:	bd80      	pop	{r7, pc}
 800613e:	bf00      	nop

08006140 <lsm6dsl_gy_full_scale_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_gy_full_scale_set(stmdev_ctx_t *ctx,
                                  lsm6dsl_fs_g_t val)
{
 8006140:	b580      	push	{r7, lr}
 8006142:	b084      	sub	sp, #16
 8006144:	af00      	add	r7, sp, #0
 8006146:	6078      	str	r0, [r7, #4]
 8006148:	460b      	mov	r3, r1
 800614a:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl2_g_t ctrl2_g;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 800614c:	f107 0208 	add.w	r2, r7, #8
 8006150:	2301      	movs	r3, #1
 8006152:	2111      	movs	r1, #17
 8006154:	6878      	ldr	r0, [r7, #4]
 8006156:	f7ff fed7 	bl	8005f08 <lsm6dsl_read_reg>
 800615a:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	2b00      	cmp	r3, #0
 8006160:	d10f      	bne.n	8006182 <lsm6dsl_gy_full_scale_set+0x42>
  {
    ctrl2_g.fs_g = (uint8_t) val;
 8006162:	78fb      	ldrb	r3, [r7, #3]
 8006164:	f003 0307 	and.w	r3, r3, #7
 8006168:	b2da      	uxtb	r2, r3
 800616a:	7a3b      	ldrb	r3, [r7, #8]
 800616c:	f362 0343 	bfi	r3, r2, #1, #3
 8006170:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 8006172:	f107 0208 	add.w	r2, r7, #8
 8006176:	2301      	movs	r3, #1
 8006178:	2111      	movs	r1, #17
 800617a:	6878      	ldr	r0, [r7, #4]
 800617c:	f7ff fedc 	bl	8005f38 <lsm6dsl_write_reg>
 8006180:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8006182:	68fb      	ldr	r3, [r7, #12]
}
 8006184:	4618      	mov	r0, r3
 8006186:	3710      	adds	r7, #16
 8006188:	46bd      	mov	sp, r7
 800618a:	bd80      	pop	{r7, pc}

0800618c <lsm6dsl_gy_full_scale_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_gy_full_scale_get(stmdev_ctx_t *ctx,
                                  lsm6dsl_fs_g_t *val)
{
 800618c:	b580      	push	{r7, lr}
 800618e:	b084      	sub	sp, #16
 8006190:	af00      	add	r7, sp, #0
 8006192:	6078      	str	r0, [r7, #4]
 8006194:	6039      	str	r1, [r7, #0]
  lsm6dsl_ctrl2_g_t ctrl2_g;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 8006196:	f107 0208 	add.w	r2, r7, #8
 800619a:	2301      	movs	r3, #1
 800619c:	2111      	movs	r1, #17
 800619e:	6878      	ldr	r0, [r7, #4]
 80061a0:	f7ff feb2 	bl	8005f08 <lsm6dsl_read_reg>
 80061a4:	60f8      	str	r0, [r7, #12]

  switch (ctrl2_g.fs_g)
 80061a6:	7a3b      	ldrb	r3, [r7, #8]
 80061a8:	f3c3 0342 	ubfx	r3, r3, #1, #3
 80061ac:	b2db      	uxtb	r3, r3
 80061ae:	2b06      	cmp	r3, #6
 80061b0:	d824      	bhi.n	80061fc <lsm6dsl_gy_full_scale_get+0x70>
 80061b2:	a201      	add	r2, pc, #4	; (adr r2, 80061b8 <lsm6dsl_gy_full_scale_get+0x2c>)
 80061b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061b8:	080061d5 	.word	0x080061d5
 80061bc:	080061dd 	.word	0x080061dd
 80061c0:	080061e5 	.word	0x080061e5
 80061c4:	080061fd 	.word	0x080061fd
 80061c8:	080061ed 	.word	0x080061ed
 80061cc:	080061fd 	.word	0x080061fd
 80061d0:	080061f5 	.word	0x080061f5
  {
    case LSM6DSL_250dps:
      *val = LSM6DSL_250dps;
 80061d4:	683b      	ldr	r3, [r7, #0]
 80061d6:	2200      	movs	r2, #0
 80061d8:	701a      	strb	r2, [r3, #0]
      break;
 80061da:	e013      	b.n	8006204 <lsm6dsl_gy_full_scale_get+0x78>

    case LSM6DSL_125dps:
      *val = LSM6DSL_125dps;
 80061dc:	683b      	ldr	r3, [r7, #0]
 80061de:	2201      	movs	r2, #1
 80061e0:	701a      	strb	r2, [r3, #0]
      break;
 80061e2:	e00f      	b.n	8006204 <lsm6dsl_gy_full_scale_get+0x78>

    case LSM6DSL_500dps:
      *val = LSM6DSL_500dps;
 80061e4:	683b      	ldr	r3, [r7, #0]
 80061e6:	2202      	movs	r2, #2
 80061e8:	701a      	strb	r2, [r3, #0]
      break;
 80061ea:	e00b      	b.n	8006204 <lsm6dsl_gy_full_scale_get+0x78>

    case LSM6DSL_1000dps:
      *val = LSM6DSL_1000dps;
 80061ec:	683b      	ldr	r3, [r7, #0]
 80061ee:	2204      	movs	r2, #4
 80061f0:	701a      	strb	r2, [r3, #0]
      break;
 80061f2:	e007      	b.n	8006204 <lsm6dsl_gy_full_scale_get+0x78>

    case LSM6DSL_2000dps:
      *val = LSM6DSL_2000dps;
 80061f4:	683b      	ldr	r3, [r7, #0]
 80061f6:	2206      	movs	r2, #6
 80061f8:	701a      	strb	r2, [r3, #0]
      break;
 80061fa:	e003      	b.n	8006204 <lsm6dsl_gy_full_scale_get+0x78>

    default:
      *val = LSM6DSL_GY_FS_ND;
 80061fc:	683b      	ldr	r3, [r7, #0]
 80061fe:	2207      	movs	r2, #7
 8006200:	701a      	strb	r2, [r3, #0]
      break;
 8006202:	bf00      	nop
  }

  return ret;
 8006204:	68fb      	ldr	r3, [r7, #12]
}
 8006206:	4618      	mov	r0, r3
 8006208:	3710      	adds	r7, #16
 800620a:	46bd      	mov	sp, r7
 800620c:	bd80      	pop	{r7, pc}
 800620e:	bf00      	nop

08006210 <lsm6dsl_gy_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_gy_data_rate_set(stmdev_ctx_t *ctx,
                                 lsm6dsl_odr_g_t val)
{
 8006210:	b580      	push	{r7, lr}
 8006212:	b084      	sub	sp, #16
 8006214:	af00      	add	r7, sp, #0
 8006216:	6078      	str	r0, [r7, #4]
 8006218:	460b      	mov	r3, r1
 800621a:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl2_g_t ctrl2_g;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 800621c:	f107 0208 	add.w	r2, r7, #8
 8006220:	2301      	movs	r3, #1
 8006222:	2111      	movs	r1, #17
 8006224:	6878      	ldr	r0, [r7, #4]
 8006226:	f7ff fe6f 	bl	8005f08 <lsm6dsl_read_reg>
 800622a:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	2b00      	cmp	r3, #0
 8006230:	d10f      	bne.n	8006252 <lsm6dsl_gy_data_rate_set+0x42>
  {
    ctrl2_g.odr_g = (uint8_t) val;
 8006232:	78fb      	ldrb	r3, [r7, #3]
 8006234:	f003 030f 	and.w	r3, r3, #15
 8006238:	b2da      	uxtb	r2, r3
 800623a:	7a3b      	ldrb	r3, [r7, #8]
 800623c:	f362 1307 	bfi	r3, r2, #4, #4
 8006240:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 8006242:	f107 0208 	add.w	r2, r7, #8
 8006246:	2301      	movs	r3, #1
 8006248:	2111      	movs	r1, #17
 800624a:	6878      	ldr	r0, [r7, #4]
 800624c:	f7ff fe74 	bl	8005f38 <lsm6dsl_write_reg>
 8006250:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8006252:	68fb      	ldr	r3, [r7, #12]
}
 8006254:	4618      	mov	r0, r3
 8006256:	3710      	adds	r7, #16
 8006258:	46bd      	mov	sp, r7
 800625a:	bd80      	pop	{r7, pc}

0800625c <lsm6dsl_gy_data_rate_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_gy_data_rate_get(stmdev_ctx_t *ctx,
                                 lsm6dsl_odr_g_t *val)
{
 800625c:	b580      	push	{r7, lr}
 800625e:	b084      	sub	sp, #16
 8006260:	af00      	add	r7, sp, #0
 8006262:	6078      	str	r0, [r7, #4]
 8006264:	6039      	str	r1, [r7, #0]
  lsm6dsl_ctrl2_g_t ctrl2_g;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 8006266:	f107 0208 	add.w	r2, r7, #8
 800626a:	2301      	movs	r3, #1
 800626c:	2111      	movs	r1, #17
 800626e:	6878      	ldr	r0, [r7, #4]
 8006270:	f7ff fe4a 	bl	8005f08 <lsm6dsl_read_reg>
 8006274:	60f8      	str	r0, [r7, #12]

  switch (ctrl2_g.odr_g)
 8006276:	7a3b      	ldrb	r3, [r7, #8]
 8006278:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800627c:	b2db      	uxtb	r3, r3
 800627e:	2b0a      	cmp	r3, #10
 8006280:	d844      	bhi.n	800630c <lsm6dsl_gy_data_rate_get+0xb0>
 8006282:	a201      	add	r2, pc, #4	; (adr r2, 8006288 <lsm6dsl_gy_data_rate_get+0x2c>)
 8006284:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006288:	080062b5 	.word	0x080062b5
 800628c:	080062bd 	.word	0x080062bd
 8006290:	080062c5 	.word	0x080062c5
 8006294:	080062cd 	.word	0x080062cd
 8006298:	080062d5 	.word	0x080062d5
 800629c:	080062dd 	.word	0x080062dd
 80062a0:	080062e5 	.word	0x080062e5
 80062a4:	080062ed 	.word	0x080062ed
 80062a8:	080062f5 	.word	0x080062f5
 80062ac:	080062fd 	.word	0x080062fd
 80062b0:	08006305 	.word	0x08006305
  {
    case LSM6DSL_GY_ODR_OFF:
      *val = LSM6DSL_GY_ODR_OFF;
 80062b4:	683b      	ldr	r3, [r7, #0]
 80062b6:	2200      	movs	r2, #0
 80062b8:	701a      	strb	r2, [r3, #0]
      break;
 80062ba:	e02b      	b.n	8006314 <lsm6dsl_gy_data_rate_get+0xb8>

    case LSM6DSL_GY_ODR_12Hz5:
      *val = LSM6DSL_GY_ODR_12Hz5;
 80062bc:	683b      	ldr	r3, [r7, #0]
 80062be:	2201      	movs	r2, #1
 80062c0:	701a      	strb	r2, [r3, #0]
      break;
 80062c2:	e027      	b.n	8006314 <lsm6dsl_gy_data_rate_get+0xb8>

    case LSM6DSL_GY_ODR_26Hz:
      *val = LSM6DSL_GY_ODR_26Hz;
 80062c4:	683b      	ldr	r3, [r7, #0]
 80062c6:	2202      	movs	r2, #2
 80062c8:	701a      	strb	r2, [r3, #0]
      break;
 80062ca:	e023      	b.n	8006314 <lsm6dsl_gy_data_rate_get+0xb8>

    case LSM6DSL_GY_ODR_52Hz:
      *val = LSM6DSL_GY_ODR_52Hz;
 80062cc:	683b      	ldr	r3, [r7, #0]
 80062ce:	2203      	movs	r2, #3
 80062d0:	701a      	strb	r2, [r3, #0]
      break;
 80062d2:	e01f      	b.n	8006314 <lsm6dsl_gy_data_rate_get+0xb8>

    case LSM6DSL_GY_ODR_104Hz:
      *val = LSM6DSL_GY_ODR_104Hz;
 80062d4:	683b      	ldr	r3, [r7, #0]
 80062d6:	2204      	movs	r2, #4
 80062d8:	701a      	strb	r2, [r3, #0]
      break;
 80062da:	e01b      	b.n	8006314 <lsm6dsl_gy_data_rate_get+0xb8>

    case LSM6DSL_GY_ODR_208Hz:
      *val = LSM6DSL_GY_ODR_208Hz;
 80062dc:	683b      	ldr	r3, [r7, #0]
 80062de:	2205      	movs	r2, #5
 80062e0:	701a      	strb	r2, [r3, #0]
      break;
 80062e2:	e017      	b.n	8006314 <lsm6dsl_gy_data_rate_get+0xb8>

    case LSM6DSL_GY_ODR_416Hz:
      *val = LSM6DSL_GY_ODR_416Hz;
 80062e4:	683b      	ldr	r3, [r7, #0]
 80062e6:	2206      	movs	r2, #6
 80062e8:	701a      	strb	r2, [r3, #0]
      break;
 80062ea:	e013      	b.n	8006314 <lsm6dsl_gy_data_rate_get+0xb8>

    case LSM6DSL_GY_ODR_833Hz:
      *val = LSM6DSL_GY_ODR_833Hz;
 80062ec:	683b      	ldr	r3, [r7, #0]
 80062ee:	2207      	movs	r2, #7
 80062f0:	701a      	strb	r2, [r3, #0]
      break;
 80062f2:	e00f      	b.n	8006314 <lsm6dsl_gy_data_rate_get+0xb8>

    case LSM6DSL_GY_ODR_1k66Hz:
      *val = LSM6DSL_GY_ODR_1k66Hz;
 80062f4:	683b      	ldr	r3, [r7, #0]
 80062f6:	2208      	movs	r2, #8
 80062f8:	701a      	strb	r2, [r3, #0]
      break;
 80062fa:	e00b      	b.n	8006314 <lsm6dsl_gy_data_rate_get+0xb8>

    case LSM6DSL_GY_ODR_3k33Hz:
      *val = LSM6DSL_GY_ODR_3k33Hz;
 80062fc:	683b      	ldr	r3, [r7, #0]
 80062fe:	2209      	movs	r2, #9
 8006300:	701a      	strb	r2, [r3, #0]
      break;
 8006302:	e007      	b.n	8006314 <lsm6dsl_gy_data_rate_get+0xb8>

    case LSM6DSL_GY_ODR_6k66Hz:
      *val = LSM6DSL_GY_ODR_6k66Hz;
 8006304:	683b      	ldr	r3, [r7, #0]
 8006306:	220a      	movs	r2, #10
 8006308:	701a      	strb	r2, [r3, #0]
      break;
 800630a:	e003      	b.n	8006314 <lsm6dsl_gy_data_rate_get+0xb8>

    default:
      *val = LSM6DSL_GY_ODR_ND;
 800630c:	683b      	ldr	r3, [r7, #0]
 800630e:	220b      	movs	r2, #11
 8006310:	701a      	strb	r2, [r3, #0]
      break;
 8006312:	bf00      	nop
  }

  return ret;
 8006314:	68fb      	ldr	r3, [r7, #12]
}
 8006316:	4618      	mov	r0, r3
 8006318:	3710      	adds	r7, #16
 800631a:	46bd      	mov	sp, r7
 800631c:	bd80      	pop	{r7, pc}
 800631e:	bf00      	nop

08006320 <lsm6dsl_block_data_update_set>:
  * @param  val    Change the values of bdu in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8006320:	b580      	push	{r7, lr}
 8006322:	b084      	sub	sp, #16
 8006324:	af00      	add	r7, sp, #0
 8006326:	6078      	str	r0, [r7, #4]
 8006328:	460b      	mov	r3, r1
 800632a:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl3_c_t ctrl3_c;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 800632c:	f107 0208 	add.w	r2, r7, #8
 8006330:	2301      	movs	r3, #1
 8006332:	2112      	movs	r1, #18
 8006334:	6878      	ldr	r0, [r7, #4]
 8006336:	f7ff fde7 	bl	8005f08 <lsm6dsl_read_reg>
 800633a:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	2b00      	cmp	r3, #0
 8006340:	d10f      	bne.n	8006362 <lsm6dsl_block_data_update_set+0x42>
  {
    ctrl3_c.bdu = val;
 8006342:	78fb      	ldrb	r3, [r7, #3]
 8006344:	f003 0301 	and.w	r3, r3, #1
 8006348:	b2da      	uxtb	r2, r3
 800634a:	7a3b      	ldrb	r3, [r7, #8]
 800634c:	f362 1386 	bfi	r3, r2, #6, #1
 8006350:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 8006352:	f107 0208 	add.w	r2, r7, #8
 8006356:	2301      	movs	r3, #1
 8006358:	2112      	movs	r1, #18
 800635a:	6878      	ldr	r0, [r7, #4]
 800635c:	f7ff fdec 	bl	8005f38 <lsm6dsl_write_reg>
 8006360:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8006362:	68fb      	ldr	r3, [r7, #12]
}
 8006364:	4618      	mov	r0, r3
 8006366:	3710      	adds	r7, #16
 8006368:	46bd      	mov	sp, r7
 800636a:	bd80      	pop	{r7, pc}

0800636c <lsm6dsl_angular_rate_raw_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_angular_rate_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 800636c:	b580      	push	{r7, lr}
 800636e:	b086      	sub	sp, #24
 8006370:	af00      	add	r7, sp, #0
 8006372:	6078      	str	r0, [r7, #4]
 8006374:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_OUTX_L_G, buff, 6);
 8006376:	f107 020c 	add.w	r2, r7, #12
 800637a:	2306      	movs	r3, #6
 800637c:	2122      	movs	r1, #34	; 0x22
 800637e:	6878      	ldr	r0, [r7, #4]
 8006380:	f7ff fdc2 	bl	8005f08 <lsm6dsl_read_reg>
 8006384:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 8006386:	7b7b      	ldrb	r3, [r7, #13]
 8006388:	b21a      	sxth	r2, r3
 800638a:	683b      	ldr	r3, [r7, #0]
 800638c:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 800638e:	683b      	ldr	r3, [r7, #0]
 8006390:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006394:	b29b      	uxth	r3, r3
 8006396:	021b      	lsls	r3, r3, #8
 8006398:	b29a      	uxth	r2, r3
 800639a:	7b3b      	ldrb	r3, [r7, #12]
 800639c:	b29b      	uxth	r3, r3
 800639e:	4413      	add	r3, r2
 80063a0:	b29b      	uxth	r3, r3
 80063a2:	b21a      	sxth	r2, r3
 80063a4:	683b      	ldr	r3, [r7, #0]
 80063a6:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 80063a8:	7bfa      	ldrb	r2, [r7, #15]
 80063aa:	683b      	ldr	r3, [r7, #0]
 80063ac:	3302      	adds	r3, #2
 80063ae:	b212      	sxth	r2, r2
 80063b0:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 80063b2:	683b      	ldr	r3, [r7, #0]
 80063b4:	3302      	adds	r3, #2
 80063b6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80063ba:	b29b      	uxth	r3, r3
 80063bc:	021b      	lsls	r3, r3, #8
 80063be:	b29a      	uxth	r2, r3
 80063c0:	7bbb      	ldrb	r3, [r7, #14]
 80063c2:	b29b      	uxth	r3, r3
 80063c4:	4413      	add	r3, r2
 80063c6:	b29a      	uxth	r2, r3
 80063c8:	683b      	ldr	r3, [r7, #0]
 80063ca:	3302      	adds	r3, #2
 80063cc:	b212      	sxth	r2, r2
 80063ce:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 80063d0:	7c7a      	ldrb	r2, [r7, #17]
 80063d2:	683b      	ldr	r3, [r7, #0]
 80063d4:	3304      	adds	r3, #4
 80063d6:	b212      	sxth	r2, r2
 80063d8:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 80063da:	683b      	ldr	r3, [r7, #0]
 80063dc:	3304      	adds	r3, #4
 80063de:	f9b3 3000 	ldrsh.w	r3, [r3]
 80063e2:	b29b      	uxth	r3, r3
 80063e4:	021b      	lsls	r3, r3, #8
 80063e6:	b29a      	uxth	r2, r3
 80063e8:	7c3b      	ldrb	r3, [r7, #16]
 80063ea:	b29b      	uxth	r3, r3
 80063ec:	4413      	add	r3, r2
 80063ee:	b29a      	uxth	r2, r3
 80063f0:	683b      	ldr	r3, [r7, #0]
 80063f2:	3304      	adds	r3, #4
 80063f4:	b212      	sxth	r2, r2
 80063f6:	801a      	strh	r2, [r3, #0]

  return ret;
 80063f8:	697b      	ldr	r3, [r7, #20]
}
 80063fa:	4618      	mov	r0, r3
 80063fc:	3718      	adds	r7, #24
 80063fe:	46bd      	mov	sp, r7
 8006400:	bd80      	pop	{r7, pc}

08006402 <lsm6dsl_acceleration_raw_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_acceleration_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8006402:	b580      	push	{r7, lr}
 8006404:	b086      	sub	sp, #24
 8006406:	af00      	add	r7, sp, #0
 8006408:	6078      	str	r0, [r7, #4]
 800640a:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_OUTX_L_XL, buff, 6);
 800640c:	f107 020c 	add.w	r2, r7, #12
 8006410:	2306      	movs	r3, #6
 8006412:	2128      	movs	r1, #40	; 0x28
 8006414:	6878      	ldr	r0, [r7, #4]
 8006416:	f7ff fd77 	bl	8005f08 <lsm6dsl_read_reg>
 800641a:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 800641c:	7b7b      	ldrb	r3, [r7, #13]
 800641e:	b21a      	sxth	r2, r3
 8006420:	683b      	ldr	r3, [r7, #0]
 8006422:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 8006424:	683b      	ldr	r3, [r7, #0]
 8006426:	f9b3 3000 	ldrsh.w	r3, [r3]
 800642a:	b29b      	uxth	r3, r3
 800642c:	021b      	lsls	r3, r3, #8
 800642e:	b29a      	uxth	r2, r3
 8006430:	7b3b      	ldrb	r3, [r7, #12]
 8006432:	b29b      	uxth	r3, r3
 8006434:	4413      	add	r3, r2
 8006436:	b29b      	uxth	r3, r3
 8006438:	b21a      	sxth	r2, r3
 800643a:	683b      	ldr	r3, [r7, #0]
 800643c:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 800643e:	7bfa      	ldrb	r2, [r7, #15]
 8006440:	683b      	ldr	r3, [r7, #0]
 8006442:	3302      	adds	r3, #2
 8006444:	b212      	sxth	r2, r2
 8006446:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8006448:	683b      	ldr	r3, [r7, #0]
 800644a:	3302      	adds	r3, #2
 800644c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006450:	b29b      	uxth	r3, r3
 8006452:	021b      	lsls	r3, r3, #8
 8006454:	b29a      	uxth	r2, r3
 8006456:	7bbb      	ldrb	r3, [r7, #14]
 8006458:	b29b      	uxth	r3, r3
 800645a:	4413      	add	r3, r2
 800645c:	b29a      	uxth	r2, r3
 800645e:	683b      	ldr	r3, [r7, #0]
 8006460:	3302      	adds	r3, #2
 8006462:	b212      	sxth	r2, r2
 8006464:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 8006466:	7c7a      	ldrb	r2, [r7, #17]
 8006468:	683b      	ldr	r3, [r7, #0]
 800646a:	3304      	adds	r3, #4
 800646c:	b212      	sxth	r2, r2
 800646e:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8006470:	683b      	ldr	r3, [r7, #0]
 8006472:	3304      	adds	r3, #4
 8006474:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006478:	b29b      	uxth	r3, r3
 800647a:	021b      	lsls	r3, r3, #8
 800647c:	b29a      	uxth	r2, r3
 800647e:	7c3b      	ldrb	r3, [r7, #16]
 8006480:	b29b      	uxth	r3, r3
 8006482:	4413      	add	r3, r2
 8006484:	b29a      	uxth	r2, r3
 8006486:	683b      	ldr	r3, [r7, #0]
 8006488:	3304      	adds	r3, #4
 800648a:	b212      	sxth	r2, r2
 800648c:	801a      	strh	r2, [r3, #0]

  return ret;
 800648e:	697b      	ldr	r3, [r7, #20]
}
 8006490:	4618      	mov	r0, r3
 8006492:	3718      	adds	r7, #24
 8006494:	46bd      	mov	sp, r7
 8006496:	bd80      	pop	{r7, pc}

08006498 <lsm6dsl_device_id_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8006498:	b580      	push	{r7, lr}
 800649a:	b084      	sub	sp, #16
 800649c:	af00      	add	r7, sp, #0
 800649e:	6078      	str	r0, [r7, #4]
 80064a0:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_WHO_AM_I, buff, 1);
 80064a2:	2301      	movs	r3, #1
 80064a4:	683a      	ldr	r2, [r7, #0]
 80064a6:	210f      	movs	r1, #15
 80064a8:	6878      	ldr	r0, [r7, #4]
 80064aa:	f7ff fd2d 	bl	8005f08 <lsm6dsl_read_reg>
 80064ae:	60f8      	str	r0, [r7, #12]

  return ret;
 80064b0:	68fb      	ldr	r3, [r7, #12]
}
 80064b2:	4618      	mov	r0, r3
 80064b4:	3710      	adds	r7, #16
 80064b6:	46bd      	mov	sp, r7
 80064b8:	bd80      	pop	{r7, pc}

080064ba <lsm6dsl_auto_increment_set>:
  * @param  val    Change the values of if_inc in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_auto_increment_set(stmdev_ctx_t *ctx, uint8_t val)
{
 80064ba:	b580      	push	{r7, lr}
 80064bc:	b084      	sub	sp, #16
 80064be:	af00      	add	r7, sp, #0
 80064c0:	6078      	str	r0, [r7, #4]
 80064c2:	460b      	mov	r3, r1
 80064c4:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl3_c_t ctrl3_c;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 80064c6:	f107 0208 	add.w	r2, r7, #8
 80064ca:	2301      	movs	r3, #1
 80064cc:	2112      	movs	r1, #18
 80064ce:	6878      	ldr	r0, [r7, #4]
 80064d0:	f7ff fd1a 	bl	8005f08 <lsm6dsl_read_reg>
 80064d4:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d10f      	bne.n	80064fc <lsm6dsl_auto_increment_set+0x42>
  {
    ctrl3_c.if_inc = val;
 80064dc:	78fb      	ldrb	r3, [r7, #3]
 80064de:	f003 0301 	and.w	r3, r3, #1
 80064e2:	b2da      	uxtb	r2, r3
 80064e4:	7a3b      	ldrb	r3, [r7, #8]
 80064e6:	f362 0382 	bfi	r3, r2, #2, #1
 80064ea:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 80064ec:	f107 0208 	add.w	r2, r7, #8
 80064f0:	2301      	movs	r3, #1
 80064f2:	2112      	movs	r1, #18
 80064f4:	6878      	ldr	r0, [r7, #4]
 80064f6:	f7ff fd1f 	bl	8005f38 <lsm6dsl_write_reg>
 80064fa:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80064fc:	68fb      	ldr	r3, [r7, #12]
}
 80064fe:	4618      	mov	r0, r3
 8006500:	3710      	adds	r7, #16
 8006502:	46bd      	mov	sp, r7
 8006504:	bd80      	pop	{r7, pc}

08006506 <lsm6dsl_fifo_mode_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_fifo_mode_set(stmdev_ctx_t *ctx,
                              lsm6dsl_fifo_mode_t val)
{
 8006506:	b580      	push	{r7, lr}
 8006508:	b084      	sub	sp, #16
 800650a:	af00      	add	r7, sp, #0
 800650c:	6078      	str	r0, [r7, #4]
 800650e:	460b      	mov	r3, r1
 8006510:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_fifo_ctrl5_t fifo_ctrl5;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_FIFO_CTRL5,
 8006512:	f107 0208 	add.w	r2, r7, #8
 8006516:	2301      	movs	r3, #1
 8006518:	210a      	movs	r1, #10
 800651a:	6878      	ldr	r0, [r7, #4]
 800651c:	f7ff fcf4 	bl	8005f08 <lsm6dsl_read_reg>
 8006520:	60f8      	str	r0, [r7, #12]
                         (uint8_t *)&fifo_ctrl5, 1);

  if (ret == 0)
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	2b00      	cmp	r3, #0
 8006526:	d10f      	bne.n	8006548 <lsm6dsl_fifo_mode_set+0x42>
  {
    fifo_ctrl5.fifo_mode = (uint8_t)val;
 8006528:	78fb      	ldrb	r3, [r7, #3]
 800652a:	f003 0307 	and.w	r3, r3, #7
 800652e:	b2da      	uxtb	r2, r3
 8006530:	7a3b      	ldrb	r3, [r7, #8]
 8006532:	f362 0302 	bfi	r3, r2, #0, #3
 8006536:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_FIFO_CTRL5,
 8006538:	f107 0208 	add.w	r2, r7, #8
 800653c:	2301      	movs	r3, #1
 800653e:	210a      	movs	r1, #10
 8006540:	6878      	ldr	r0, [r7, #4]
 8006542:	f7ff fcf9 	bl	8005f38 <lsm6dsl_write_reg>
 8006546:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&fifo_ctrl5, 1);
  }

  return ret;
 8006548:	68fb      	ldr	r3, [r7, #12]
}
 800654a:	4618      	mov	r0, r3
 800654c:	3710      	adds	r7, #16
 800654e:	46bd      	mov	sp, r7
 8006550:	bd80      	pop	{r7, pc}
	...

08006554 <IKS01A2_MOTION_SENSOR_Init>:
  *         - MOTION_ACCELERO for instance 1
  *         - MOTION_MAGNETO for instance 2
  * @retval BSP status
  */
int32_t IKS01A2_MOTION_SENSOR_Init(uint32_t Instance, uint32_t Functions)
{
 8006554:	b580      	push	{r7, lr}
 8006556:	b08e      	sub	sp, #56	; 0x38
 8006558:	af00      	add	r7, sp, #0
 800655a:	6078      	str	r0, [r7, #4]
 800655c:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 800655e:	2300      	movs	r3, #0
 8006560:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t function = MOTION_GYRO;
 8006562:	2301      	movs	r3, #1
 8006564:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t i;
  uint32_t component_functions = 0;
 8006566:	2300      	movs	r3, #0
 8006568:	62bb      	str	r3, [r7, #40]	; 0x28
  IKS01A2_MOTION_SENSOR_Capabilities_t cap;

  switch (Instance)
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	2b02      	cmp	r3, #2
 800656e:	d06e      	beq.n	800664e <IKS01A2_MOTION_SENSOR_Init+0xfa>
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	2b02      	cmp	r3, #2
 8006574:	f200 809d 	bhi.w	80066b2 <IKS01A2_MOTION_SENSOR_Init+0x15e>
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	2b00      	cmp	r3, #0
 800657c:	d003      	beq.n	8006586 <IKS01A2_MOTION_SENSOR_Init+0x32>
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	2b01      	cmp	r3, #1
 8006582:	d032      	beq.n	80065ea <IKS01A2_MOTION_SENSOR_Init+0x96>
 8006584:	e095      	b.n	80066b2 <IKS01A2_MOTION_SENSOR_Init+0x15e>
  {
#if (USE_IKS01A2_MOTION_SENSOR_LSM6DSL_0 == 1)
    case IKS01A2_LSM6DSL_0:
      if (LSM6DSL_0_Probe(Functions) != BSP_ERROR_NONE)
 8006586:	6838      	ldr	r0, [r7, #0]
 8006588:	f000 f9ae 	bl	80068e8 <LSM6DSL_0_Probe>
 800658c:	4603      	mov	r3, r0
 800658e:	2b00      	cmp	r3, #0
 8006590:	d002      	beq.n	8006598 <IKS01A2_MOTION_SENSOR_Init+0x44>
      {
        return BSP_ERROR_NO_INIT;
 8006592:	f04f 33ff 	mov.w	r3, #4294967295
 8006596:	e0cc      	b.n	8006732 <IKS01A2_MOTION_SENSOR_Init+0x1de>
      }
      if (MotionDrv[Instance]->GetCapabilities(MotionCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 8006598:	4a68      	ldr	r2, [pc, #416]	; (800673c <IKS01A2_MOTION_SENSOR_Init+0x1e8>)
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80065a0:	68db      	ldr	r3, [r3, #12]
 80065a2:	4967      	ldr	r1, [pc, #412]	; (8006740 <IKS01A2_MOTION_SENSOR_Init+0x1ec>)
 80065a4:	687a      	ldr	r2, [r7, #4]
 80065a6:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80065aa:	f107 010c 	add.w	r1, r7, #12
 80065ae:	4610      	mov	r0, r2
 80065b0:	4798      	blx	r3
 80065b2:	4603      	mov	r3, r0
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d002      	beq.n	80065be <IKS01A2_MOTION_SENSOR_Init+0x6a>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 80065b8:	f06f 0306 	mvn.w	r3, #6
 80065bc:	e0b9      	b.n	8006732 <IKS01A2_MOTION_SENSOR_Init+0x1de>
      }
      if (cap.Acc == 1U)
 80065be:	7b3b      	ldrb	r3, [r7, #12]
 80065c0:	2b01      	cmp	r3, #1
 80065c2:	d103      	bne.n	80065cc <IKS01A2_MOTION_SENSOR_Init+0x78>
      {
        component_functions |= MOTION_ACCELERO;
 80065c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065c6:	f043 0302 	orr.w	r3, r3, #2
 80065ca:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if (cap.Gyro == 1U)
 80065cc:	7b7b      	ldrb	r3, [r7, #13]
 80065ce:	2b01      	cmp	r3, #1
 80065d0:	d103      	bne.n	80065da <IKS01A2_MOTION_SENSOR_Init+0x86>
      {
        component_functions |= MOTION_GYRO;
 80065d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065d4:	f043 0301 	orr.w	r3, r3, #1
 80065d8:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if (cap.Magneto == 1U)
 80065da:	7bbb      	ldrb	r3, [r7, #14]
 80065dc:	2b01      	cmp	r3, #1
 80065de:	d16c      	bne.n	80066ba <IKS01A2_MOTION_SENSOR_Init+0x166>
      {
        component_functions |= MOTION_MAGNETO;
 80065e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065e2:	f043 0304 	orr.w	r3, r3, #4
 80065e6:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      break;
 80065e8:	e067      	b.n	80066ba <IKS01A2_MOTION_SENSOR_Init+0x166>
#endif

#if (USE_IKS01A2_MOTION_SENSOR_LSM303AGR_ACC_0 == 1)
    case IKS01A2_LSM303AGR_ACC_0:
      if (LSM303AGR_ACC_0_Probe(Functions) != BSP_ERROR_NONE)
 80065ea:	6838      	ldr	r0, [r7, #0]
 80065ec:	f000 fa38 	bl	8006a60 <LSM303AGR_ACC_0_Probe>
 80065f0:	4603      	mov	r3, r0
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d002      	beq.n	80065fc <IKS01A2_MOTION_SENSOR_Init+0xa8>
      {
        return BSP_ERROR_NO_INIT;
 80065f6:	f04f 33ff 	mov.w	r3, #4294967295
 80065fa:	e09a      	b.n	8006732 <IKS01A2_MOTION_SENSOR_Init+0x1de>
      }
      if (MotionDrv[Instance]->GetCapabilities(MotionCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 80065fc:	4a4f      	ldr	r2, [pc, #316]	; (800673c <IKS01A2_MOTION_SENSOR_Init+0x1e8>)
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006604:	68db      	ldr	r3, [r3, #12]
 8006606:	494e      	ldr	r1, [pc, #312]	; (8006740 <IKS01A2_MOTION_SENSOR_Init+0x1ec>)
 8006608:	687a      	ldr	r2, [r7, #4]
 800660a:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800660e:	f107 010c 	add.w	r1, r7, #12
 8006612:	4610      	mov	r0, r2
 8006614:	4798      	blx	r3
 8006616:	4603      	mov	r3, r0
 8006618:	2b00      	cmp	r3, #0
 800661a:	d002      	beq.n	8006622 <IKS01A2_MOTION_SENSOR_Init+0xce>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 800661c:	f06f 0306 	mvn.w	r3, #6
 8006620:	e087      	b.n	8006732 <IKS01A2_MOTION_SENSOR_Init+0x1de>
      }
      if (cap.Acc == 1U)
 8006622:	7b3b      	ldrb	r3, [r7, #12]
 8006624:	2b01      	cmp	r3, #1
 8006626:	d103      	bne.n	8006630 <IKS01A2_MOTION_SENSOR_Init+0xdc>
      {
        component_functions |= MOTION_ACCELERO;
 8006628:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800662a:	f043 0302 	orr.w	r3, r3, #2
 800662e:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if (cap.Gyro == 1U)
 8006630:	7b7b      	ldrb	r3, [r7, #13]
 8006632:	2b01      	cmp	r3, #1
 8006634:	d103      	bne.n	800663e <IKS01A2_MOTION_SENSOR_Init+0xea>
      {
        component_functions |= MOTION_GYRO;
 8006636:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006638:	f043 0301 	orr.w	r3, r3, #1
 800663c:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if (cap.Magneto == 1U)
 800663e:	7bbb      	ldrb	r3, [r7, #14]
 8006640:	2b01      	cmp	r3, #1
 8006642:	d13c      	bne.n	80066be <IKS01A2_MOTION_SENSOR_Init+0x16a>
      {
        component_functions |= MOTION_MAGNETO;
 8006644:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006646:	f043 0304 	orr.w	r3, r3, #4
 800664a:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      break;
 800664c:	e037      	b.n	80066be <IKS01A2_MOTION_SENSOR_Init+0x16a>
#endif

#if (USE_IKS01A2_MOTION_SENSOR_LSM303AGR_MAG_0 == 1)
    case IKS01A2_LSM303AGR_MAG_0:
      if (LSM303AGR_MAG_0_Probe(Functions) != BSP_ERROR_NONE)
 800664e:	6838      	ldr	r0, [r7, #0]
 8006650:	f000 faaa 	bl	8006ba8 <LSM303AGR_MAG_0_Probe>
 8006654:	4603      	mov	r3, r0
 8006656:	2b00      	cmp	r3, #0
 8006658:	d002      	beq.n	8006660 <IKS01A2_MOTION_SENSOR_Init+0x10c>
      {
        return BSP_ERROR_NO_INIT;
 800665a:	f04f 33ff 	mov.w	r3, #4294967295
 800665e:	e068      	b.n	8006732 <IKS01A2_MOTION_SENSOR_Init+0x1de>
      }
      if (MotionDrv[Instance]->GetCapabilities(MotionCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 8006660:	4a36      	ldr	r2, [pc, #216]	; (800673c <IKS01A2_MOTION_SENSOR_Init+0x1e8>)
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006668:	68db      	ldr	r3, [r3, #12]
 800666a:	4935      	ldr	r1, [pc, #212]	; (8006740 <IKS01A2_MOTION_SENSOR_Init+0x1ec>)
 800666c:	687a      	ldr	r2, [r7, #4]
 800666e:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8006672:	f107 010c 	add.w	r1, r7, #12
 8006676:	4610      	mov	r0, r2
 8006678:	4798      	blx	r3
 800667a:	4603      	mov	r3, r0
 800667c:	2b00      	cmp	r3, #0
 800667e:	d002      	beq.n	8006686 <IKS01A2_MOTION_SENSOR_Init+0x132>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 8006680:	f06f 0306 	mvn.w	r3, #6
 8006684:	e055      	b.n	8006732 <IKS01A2_MOTION_SENSOR_Init+0x1de>
      }
      if (cap.Acc == 1U)
 8006686:	7b3b      	ldrb	r3, [r7, #12]
 8006688:	2b01      	cmp	r3, #1
 800668a:	d103      	bne.n	8006694 <IKS01A2_MOTION_SENSOR_Init+0x140>
      {
        component_functions |= MOTION_ACCELERO;
 800668c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800668e:	f043 0302 	orr.w	r3, r3, #2
 8006692:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if (cap.Gyro == 1U)
 8006694:	7b7b      	ldrb	r3, [r7, #13]
 8006696:	2b01      	cmp	r3, #1
 8006698:	d103      	bne.n	80066a2 <IKS01A2_MOTION_SENSOR_Init+0x14e>
      {
        component_functions |= MOTION_GYRO;
 800669a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800669c:	f043 0301 	orr.w	r3, r3, #1
 80066a0:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if (cap.Magneto == 1U)
 80066a2:	7bbb      	ldrb	r3, [r7, #14]
 80066a4:	2b01      	cmp	r3, #1
 80066a6:	d10c      	bne.n	80066c2 <IKS01A2_MOTION_SENSOR_Init+0x16e>
      {
        component_functions |= MOTION_MAGNETO;
 80066a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066aa:	f043 0304 	orr.w	r3, r3, #4
 80066ae:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      break;
 80066b0:	e007      	b.n	80066c2 <IKS01A2_MOTION_SENSOR_Init+0x16e>
      }
      break;
#endif

    default:
      ret = BSP_ERROR_WRONG_PARAM;
 80066b2:	f06f 0301 	mvn.w	r3, #1
 80066b6:	637b      	str	r3, [r7, #52]	; 0x34
      break;
 80066b8:	e004      	b.n	80066c4 <IKS01A2_MOTION_SENSOR_Init+0x170>
      break;
 80066ba:	bf00      	nop
 80066bc:	e002      	b.n	80066c4 <IKS01A2_MOTION_SENSOR_Init+0x170>
      break;
 80066be:	bf00      	nop
 80066c0:	e000      	b.n	80066c4 <IKS01A2_MOTION_SENSOR_Init+0x170>
      break;
 80066c2:	bf00      	nop
  }

  if (ret != BSP_ERROR_NONE)
 80066c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d001      	beq.n	80066ce <IKS01A2_MOTION_SENSOR_Init+0x17a>
  {
    return ret;
 80066ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80066cc:	e031      	b.n	8006732 <IKS01A2_MOTION_SENSOR_Init+0x1de>
  }

  for (i = 0; i < IKS01A2_MOTION_FUNCTIONS_NBR; i++)
 80066ce:	2300      	movs	r3, #0
 80066d0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80066d2:	e02a      	b.n	800672a <IKS01A2_MOTION_SENSOR_Init+0x1d6>
  {
    if (((Functions & function) == function) && ((component_functions & function) == function))
 80066d4:	683a      	ldr	r2, [r7, #0]
 80066d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066d8:	4013      	ands	r3, r2
 80066da:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80066dc:	429a      	cmp	r2, r3
 80066de:	d11e      	bne.n	800671e <IKS01A2_MOTION_SENSOR_Init+0x1ca>
 80066e0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80066e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066e4:	4013      	ands	r3, r2
 80066e6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80066e8:	429a      	cmp	r2, r3
 80066ea:	d118      	bne.n	800671e <IKS01A2_MOTION_SENSOR_Init+0x1ca>
    {
      if (MotionFuncDrv[Instance][FunctionIndex[function]]->Enable(MotionCompObj[Instance]) != BSP_ERROR_NONE)
 80066ec:	4a15      	ldr	r2, [pc, #84]	; (8006744 <IKS01A2_MOTION_SENSOR_Init+0x1f0>)
 80066ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066f0:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80066f4:	4814      	ldr	r0, [pc, #80]	; (8006748 <IKS01A2_MOTION_SENSOR_Init+0x1f4>)
 80066f6:	687a      	ldr	r2, [r7, #4]
 80066f8:	4613      	mov	r3, r2
 80066fa:	005b      	lsls	r3, r3, #1
 80066fc:	4413      	add	r3, r2
 80066fe:	440b      	add	r3, r1
 8006700:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	490e      	ldr	r1, [pc, #56]	; (8006740 <IKS01A2_MOTION_SENSOR_Init+0x1ec>)
 8006708:	687a      	ldr	r2, [r7, #4]
 800670a:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800670e:	4610      	mov	r0, r2
 8006710:	4798      	blx	r3
 8006712:	4603      	mov	r3, r0
 8006714:	2b00      	cmp	r3, #0
 8006716:	d002      	beq.n	800671e <IKS01A2_MOTION_SENSOR_Init+0x1ca>
      {
        return BSP_ERROR_COMPONENT_FAILURE;
 8006718:	f06f 0304 	mvn.w	r3, #4
 800671c:	e009      	b.n	8006732 <IKS01A2_MOTION_SENSOR_Init+0x1de>
      }
    }
    function = function << 1;
 800671e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006720:	005b      	lsls	r3, r3, #1
 8006722:	633b      	str	r3, [r7, #48]	; 0x30
  for (i = 0; i < IKS01A2_MOTION_FUNCTIONS_NBR; i++)
 8006724:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006726:	3301      	adds	r3, #1
 8006728:	62fb      	str	r3, [r7, #44]	; 0x2c
 800672a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800672c:	2b02      	cmp	r3, #2
 800672e:	d9d1      	bls.n	80066d4 <IKS01A2_MOTION_SENSOR_Init+0x180>
  }

  return ret;
 8006730:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8006732:	4618      	mov	r0, r3
 8006734:	3738      	adds	r7, #56	; 0x38
 8006736:	46bd      	mov	sp, r7
 8006738:	bd80      	pop	{r7, pc}
 800673a:	bf00      	nop
 800673c:	20000988 	.word	0x20000988
 8006740:	20000958 	.word	0x20000958
 8006744:	200000ec 	.word	0x200000ec
 8006748:	20000964 	.word	0x20000964

0800674c <IKS01A2_MOTION_SENSOR_GetAxes>:
  *         - MOTION_MAGNETO for instance 2
  * @param  Axes pointer to axes data structure
  * @retval BSP status
  */
int32_t IKS01A2_MOTION_SENSOR_GetAxes(uint32_t Instance, uint32_t Function, IKS01A2_MOTION_SENSOR_Axes_t *Axes)
{
 800674c:	b580      	push	{r7, lr}
 800674e:	b086      	sub	sp, #24
 8006750:	af00      	add	r7, sp, #0
 8006752:	60f8      	str	r0, [r7, #12]
 8006754:	60b9      	str	r1, [r7, #8]
 8006756:	607a      	str	r2, [r7, #4]
  int32_t ret;

  if (Instance >= IKS01A2_MOTION_INSTANCES_NBR)
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	2b02      	cmp	r3, #2
 800675c:	d903      	bls.n	8006766 <IKS01A2_MOTION_SENSOR_GetAxes+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800675e:	f06f 0301 	mvn.w	r3, #1
 8006762:	617b      	str	r3, [r7, #20]
 8006764:	e029      	b.n	80067ba <IKS01A2_MOTION_SENSOR_GetAxes+0x6e>
  }
  else
  {
    if ((MotionCtx[Instance].Functions & Function) == Function)
 8006766:	4a17      	ldr	r2, [pc, #92]	; (80067c4 <IKS01A2_MOTION_SENSOR_GetAxes+0x78>)
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800676e:	68bb      	ldr	r3, [r7, #8]
 8006770:	4013      	ands	r3, r2
 8006772:	68ba      	ldr	r2, [r7, #8]
 8006774:	429a      	cmp	r2, r3
 8006776:	d11d      	bne.n	80067b4 <IKS01A2_MOTION_SENSOR_GetAxes+0x68>
    {
      if (MotionFuncDrv[Instance][FunctionIndex[Function]]->GetAxes(MotionCompObj[Instance], Axes) != BSP_ERROR_NONE)
 8006778:	4a13      	ldr	r2, [pc, #76]	; (80067c8 <IKS01A2_MOTION_SENSOR_GetAxes+0x7c>)
 800677a:	68bb      	ldr	r3, [r7, #8]
 800677c:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8006780:	4812      	ldr	r0, [pc, #72]	; (80067cc <IKS01A2_MOTION_SENSOR_GetAxes+0x80>)
 8006782:	68fa      	ldr	r2, [r7, #12]
 8006784:	4613      	mov	r3, r2
 8006786:	005b      	lsls	r3, r3, #1
 8006788:	4413      	add	r3, r2
 800678a:	440b      	add	r3, r1
 800678c:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8006790:	69db      	ldr	r3, [r3, #28]
 8006792:	490f      	ldr	r1, [pc, #60]	; (80067d0 <IKS01A2_MOTION_SENSOR_GetAxes+0x84>)
 8006794:	68fa      	ldr	r2, [r7, #12]
 8006796:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800679a:	6879      	ldr	r1, [r7, #4]
 800679c:	4610      	mov	r0, r2
 800679e:	4798      	blx	r3
 80067a0:	4603      	mov	r3, r0
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d003      	beq.n	80067ae <IKS01A2_MOTION_SENSOR_GetAxes+0x62>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 80067a6:	f06f 0304 	mvn.w	r3, #4
 80067aa:	617b      	str	r3, [r7, #20]
 80067ac:	e005      	b.n	80067ba <IKS01A2_MOTION_SENSOR_GetAxes+0x6e>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 80067ae:	2300      	movs	r3, #0
 80067b0:	617b      	str	r3, [r7, #20]
 80067b2:	e002      	b.n	80067ba <IKS01A2_MOTION_SENSOR_GetAxes+0x6e>
      }
    }
    else
    {
      ret = BSP_ERROR_WRONG_PARAM;
 80067b4:	f06f 0301 	mvn.w	r3, #1
 80067b8:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 80067ba:	697b      	ldr	r3, [r7, #20]
}
 80067bc:	4618      	mov	r0, r3
 80067be:	3718      	adds	r7, #24
 80067c0:	46bd      	mov	sp, r7
 80067c2:	bd80      	pop	{r7, pc}
 80067c4:	20000994 	.word	0x20000994
 80067c8:	200000ec 	.word	0x200000ec
 80067cc:	20000964 	.word	0x20000964
 80067d0:	20000958 	.word	0x20000958

080067d4 <IKS01A2_MOTION_SENSOR_SetOutputDataRate>:
  *         - MOTION_MAGNETO for instance 2
  * @param  Odr Output Data Rate value to be set
  * @retval BSP status
  */
int32_t IKS01A2_MOTION_SENSOR_SetOutputDataRate(uint32_t Instance, uint32_t Function, float Odr)
{
 80067d4:	b580      	push	{r7, lr}
 80067d6:	b086      	sub	sp, #24
 80067d8:	af00      	add	r7, sp, #0
 80067da:	60f8      	str	r0, [r7, #12]
 80067dc:	60b9      	str	r1, [r7, #8]
 80067de:	ed87 0a01 	vstr	s0, [r7, #4]
  int32_t ret;

  if (Instance >= IKS01A2_MOTION_INSTANCES_NBR)
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	2b02      	cmp	r3, #2
 80067e6:	d903      	bls.n	80067f0 <IKS01A2_MOTION_SENSOR_SetOutputDataRate+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80067e8:	f06f 0301 	mvn.w	r3, #1
 80067ec:	617b      	str	r3, [r7, #20]
 80067ee:	e02a      	b.n	8006846 <IKS01A2_MOTION_SENSOR_SetOutputDataRate+0x72>
  }
  else
  {
    if ((MotionCtx[Instance].Functions & Function) == Function)
 80067f0:	4a17      	ldr	r2, [pc, #92]	; (8006850 <IKS01A2_MOTION_SENSOR_SetOutputDataRate+0x7c>)
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80067f8:	68bb      	ldr	r3, [r7, #8]
 80067fa:	4013      	ands	r3, r2
 80067fc:	68ba      	ldr	r2, [r7, #8]
 80067fe:	429a      	cmp	r2, r3
 8006800:	d11e      	bne.n	8006840 <IKS01A2_MOTION_SENSOR_SetOutputDataRate+0x6c>
    {
      if (MotionFuncDrv[Instance][FunctionIndex[Function]]->SetOutputDataRate(MotionCompObj[Instance], Odr) != BSP_ERROR_NONE)
 8006802:	4a14      	ldr	r2, [pc, #80]	; (8006854 <IKS01A2_MOTION_SENSOR_SetOutputDataRate+0x80>)
 8006804:	68bb      	ldr	r3, [r7, #8]
 8006806:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800680a:	4813      	ldr	r0, [pc, #76]	; (8006858 <IKS01A2_MOTION_SENSOR_SetOutputDataRate+0x84>)
 800680c:	68fa      	ldr	r2, [r7, #12]
 800680e:	4613      	mov	r3, r2
 8006810:	005b      	lsls	r3, r3, #1
 8006812:	4413      	add	r3, r2
 8006814:	440b      	add	r3, r1
 8006816:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800681a:	691b      	ldr	r3, [r3, #16]
 800681c:	490f      	ldr	r1, [pc, #60]	; (800685c <IKS01A2_MOTION_SENSOR_SetOutputDataRate+0x88>)
 800681e:	68fa      	ldr	r2, [r7, #12]
 8006820:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8006824:	ed97 0a01 	vldr	s0, [r7, #4]
 8006828:	4610      	mov	r0, r2
 800682a:	4798      	blx	r3
 800682c:	4603      	mov	r3, r0
 800682e:	2b00      	cmp	r3, #0
 8006830:	d003      	beq.n	800683a <IKS01A2_MOTION_SENSOR_SetOutputDataRate+0x66>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8006832:	f06f 0304 	mvn.w	r3, #4
 8006836:	617b      	str	r3, [r7, #20]
 8006838:	e005      	b.n	8006846 <IKS01A2_MOTION_SENSOR_SetOutputDataRate+0x72>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800683a:	2300      	movs	r3, #0
 800683c:	617b      	str	r3, [r7, #20]
 800683e:	e002      	b.n	8006846 <IKS01A2_MOTION_SENSOR_SetOutputDataRate+0x72>
      }
    }
    else
    {
      ret = BSP_ERROR_WRONG_PARAM;
 8006840:	f06f 0301 	mvn.w	r3, #1
 8006844:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 8006846:	697b      	ldr	r3, [r7, #20]
}
 8006848:	4618      	mov	r0, r3
 800684a:	3718      	adds	r7, #24
 800684c:	46bd      	mov	sp, r7
 800684e:	bd80      	pop	{r7, pc}
 8006850:	20000994 	.word	0x20000994
 8006854:	200000ec 	.word	0x200000ec
 8006858:	20000964 	.word	0x20000964
 800685c:	20000958 	.word	0x20000958

08006860 <IKS01A2_MOTION_SENSOR_SetFullScale>:
  *         - MOTION_MAGNETO for instance 2
  * @param  Fullscale Fullscale value to be set
  * @retval BSP status
  */
int32_t IKS01A2_MOTION_SENSOR_SetFullScale(uint32_t Instance, uint32_t Function, int32_t Fullscale)
{
 8006860:	b580      	push	{r7, lr}
 8006862:	b086      	sub	sp, #24
 8006864:	af00      	add	r7, sp, #0
 8006866:	60f8      	str	r0, [r7, #12]
 8006868:	60b9      	str	r1, [r7, #8]
 800686a:	607a      	str	r2, [r7, #4]
  int32_t ret;

  if (Instance >= IKS01A2_MOTION_INSTANCES_NBR)
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	2b02      	cmp	r3, #2
 8006870:	d903      	bls.n	800687a <IKS01A2_MOTION_SENSOR_SetFullScale+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8006872:	f06f 0301 	mvn.w	r3, #1
 8006876:	617b      	str	r3, [r7, #20]
 8006878:	e029      	b.n	80068ce <IKS01A2_MOTION_SENSOR_SetFullScale+0x6e>
  }
  else
  {
    if ((MotionCtx[Instance].Functions & Function) == Function)
 800687a:	4a17      	ldr	r2, [pc, #92]	; (80068d8 <IKS01A2_MOTION_SENSOR_SetFullScale+0x78>)
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8006882:	68bb      	ldr	r3, [r7, #8]
 8006884:	4013      	ands	r3, r2
 8006886:	68ba      	ldr	r2, [r7, #8]
 8006888:	429a      	cmp	r2, r3
 800688a:	d11d      	bne.n	80068c8 <IKS01A2_MOTION_SENSOR_SetFullScale+0x68>
    {
      if (MotionFuncDrv[Instance][FunctionIndex[Function]]->SetFullScale(MotionCompObj[Instance],
 800688c:	4a13      	ldr	r2, [pc, #76]	; (80068dc <IKS01A2_MOTION_SENSOR_SetFullScale+0x7c>)
 800688e:	68bb      	ldr	r3, [r7, #8]
 8006890:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8006894:	4812      	ldr	r0, [pc, #72]	; (80068e0 <IKS01A2_MOTION_SENSOR_SetFullScale+0x80>)
 8006896:	68fa      	ldr	r2, [r7, #12]
 8006898:	4613      	mov	r3, r2
 800689a:	005b      	lsls	r3, r3, #1
 800689c:	4413      	add	r3, r2
 800689e:	440b      	add	r3, r1
 80068a0:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80068a4:	699b      	ldr	r3, [r3, #24]
 80068a6:	490f      	ldr	r1, [pc, #60]	; (80068e4 <IKS01A2_MOTION_SENSOR_SetFullScale+0x84>)
 80068a8:	68fa      	ldr	r2, [r7, #12]
 80068aa:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80068ae:	6879      	ldr	r1, [r7, #4]
 80068b0:	4610      	mov	r0, r2
 80068b2:	4798      	blx	r3
 80068b4:	4603      	mov	r3, r0
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d003      	beq.n	80068c2 <IKS01A2_MOTION_SENSOR_SetFullScale+0x62>
                                                                         Fullscale) != BSP_ERROR_NONE)
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 80068ba:	f06f 0304 	mvn.w	r3, #4
 80068be:	617b      	str	r3, [r7, #20]
 80068c0:	e005      	b.n	80068ce <IKS01A2_MOTION_SENSOR_SetFullScale+0x6e>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 80068c2:	2300      	movs	r3, #0
 80068c4:	617b      	str	r3, [r7, #20]
 80068c6:	e002      	b.n	80068ce <IKS01A2_MOTION_SENSOR_SetFullScale+0x6e>
      }
    }
    else
    {
      ret = BSP_ERROR_WRONG_PARAM;
 80068c8:	f06f 0301 	mvn.w	r3, #1
 80068cc:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 80068ce:	697b      	ldr	r3, [r7, #20]
}
 80068d0:	4618      	mov	r0, r3
 80068d2:	3718      	adds	r7, #24
 80068d4:	46bd      	mov	sp, r7
 80068d6:	bd80      	pop	{r7, pc}
 80068d8:	20000994 	.word	0x20000994
 80068dc:	200000ec 	.word	0x200000ec
 80068e0:	20000964 	.word	0x20000964
 80068e4:	20000958 	.word	0x20000958

080068e8 <LSM6DSL_0_Probe>:
/**
  * @brief  Register Bus IOs for instance 0 if component ID is OK
  * @retval BSP status
  */
static int32_t LSM6DSL_0_Probe(uint32_t Functions)
{
 80068e8:	b580      	push	{r7, lr}
 80068ea:	b094      	sub	sp, #80	; 0x50
 80068ec:	af00      	add	r7, sp, #0
 80068ee:	6078      	str	r0, [r7, #4]
  LSM6DSL_IO_t            io_ctx;
  uint8_t                 id;
  static LSM6DSL_Object_t lsm6dsl_obj_0;
  LSM6DSL_Capabilities_t  cap;
  int32_t ret = BSP_ERROR_NONE;
 80068f0:	2300      	movs	r3, #0
 80068f2:	64fb      	str	r3, [r7, #76]	; 0x4c

  /* Configure the accelero driver */
  io_ctx.BusType     = LSM6DSL_I2C_BUS; /* I2C */
 80068f4:	2300      	movs	r3, #0
 80068f6:	637b      	str	r3, [r7, #52]	; 0x34
  io_ctx.Address     = LSM6DSL_I2C_ADD_H;
 80068f8:	23d7      	movs	r3, #215	; 0xd7
 80068fa:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  io_ctx.Init        = IKS01A2_I2C_Init;
 80068fe:	4b4a      	ldr	r3, [pc, #296]	; (8006a28 <LSM6DSL_0_Probe+0x140>)
 8006900:	62fb      	str	r3, [r7, #44]	; 0x2c
  io_ctx.DeInit      = IKS01A2_I2C_DeInit;
 8006902:	4b4a      	ldr	r3, [pc, #296]	; (8006a2c <LSM6DSL_0_Probe+0x144>)
 8006904:	633b      	str	r3, [r7, #48]	; 0x30
  io_ctx.ReadReg     = IKS01A2_I2C_ReadReg;
 8006906:	4b4a      	ldr	r3, [pc, #296]	; (8006a30 <LSM6DSL_0_Probe+0x148>)
 8006908:	643b      	str	r3, [r7, #64]	; 0x40
  io_ctx.WriteReg    = IKS01A2_I2C_WriteReg;
 800690a:	4b4a      	ldr	r3, [pc, #296]	; (8006a34 <LSM6DSL_0_Probe+0x14c>)
 800690c:	63fb      	str	r3, [r7, #60]	; 0x3c
  io_ctx.GetTick     = IKS01A2_GetTick;
 800690e:	4b4a      	ldr	r3, [pc, #296]	; (8006a38 <LSM6DSL_0_Probe+0x150>)
 8006910:	647b      	str	r3, [r7, #68]	; 0x44

  if (LSM6DSL_RegisterBusIO(&lsm6dsl_obj_0, &io_ctx) != LSM6DSL_OK)
 8006912:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8006916:	4619      	mov	r1, r3
 8006918:	4848      	ldr	r0, [pc, #288]	; (8006a3c <LSM6DSL_0_Probe+0x154>)
 800691a:	f7fe fb01 	bl	8004f20 <LSM6DSL_RegisterBusIO>
 800691e:	4603      	mov	r3, r0
 8006920:	2b00      	cmp	r3, #0
 8006922:	d003      	beq.n	800692c <LSM6DSL_0_Probe+0x44>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8006924:	f06f 0306 	mvn.w	r3, #6
 8006928:	64fb      	str	r3, [r7, #76]	; 0x4c
 800692a:	e077      	b.n	8006a1c <LSM6DSL_0_Probe+0x134>
  }
  else if (LSM6DSL_ReadID(&lsm6dsl_obj_0, &id) != LSM6DSL_OK)
 800692c:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 8006930:	4619      	mov	r1, r3
 8006932:	4842      	ldr	r0, [pc, #264]	; (8006a3c <LSM6DSL_0_Probe+0x154>)
 8006934:	f7fe fbee 	bl	8005114 <LSM6DSL_ReadID>
 8006938:	4603      	mov	r3, r0
 800693a:	2b00      	cmp	r3, #0
 800693c:	d003      	beq.n	8006946 <LSM6DSL_0_Probe+0x5e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800693e:	f06f 0306 	mvn.w	r3, #6
 8006942:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006944:	e06a      	b.n	8006a1c <LSM6DSL_0_Probe+0x134>
  }
  else if (id != LSM6DSL_ID)
 8006946:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800694a:	2b6a      	cmp	r3, #106	; 0x6a
 800694c:	d003      	beq.n	8006956 <LSM6DSL_0_Probe+0x6e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800694e:	f06f 0306 	mvn.w	r3, #6
 8006952:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006954:	e062      	b.n	8006a1c <LSM6DSL_0_Probe+0x134>
  }
  else
  {
    (void)LSM6DSL_GetCapabilities(&lsm6dsl_obj_0, &cap);
 8006956:	f107 030c 	add.w	r3, r7, #12
 800695a:	4619      	mov	r1, r3
 800695c:	4837      	ldr	r0, [pc, #220]	; (8006a3c <LSM6DSL_0_Probe+0x154>)
 800695e:	f7fe fbef 	bl	8005140 <LSM6DSL_GetCapabilities>
    MotionCtx[IKS01A2_LSM6DSL_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((uint32_t)cap.Magneto << 2);
 8006962:	7b7b      	ldrb	r3, [r7, #13]
 8006964:	461a      	mov	r2, r3
 8006966:	7b3b      	ldrb	r3, [r7, #12]
 8006968:	005b      	lsls	r3, r3, #1
 800696a:	431a      	orrs	r2, r3
 800696c:	7bbb      	ldrb	r3, [r7, #14]
 800696e:	009b      	lsls	r3, r3, #2
 8006970:	4313      	orrs	r3, r2
 8006972:	4a33      	ldr	r2, [pc, #204]	; (8006a40 <LSM6DSL_0_Probe+0x158>)
 8006974:	6013      	str	r3, [r2, #0]

    MotionCompObj[IKS01A2_LSM6DSL_0] = &lsm6dsl_obj_0;
 8006976:	4b33      	ldr	r3, [pc, #204]	; (8006a44 <LSM6DSL_0_Probe+0x15c>)
 8006978:	4a30      	ldr	r2, [pc, #192]	; (8006a3c <LSM6DSL_0_Probe+0x154>)
 800697a:	601a      	str	r2, [r3, #0]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    MotionDrv[IKS01A2_LSM6DSL_0] = (MOTION_SENSOR_CommonDrv_t *)(void *)&LSM6DSL_COMMON_Driver;
 800697c:	4b32      	ldr	r3, [pc, #200]	; (8006a48 <LSM6DSL_0_Probe+0x160>)
 800697e:	4a33      	ldr	r2, [pc, #204]	; (8006a4c <LSM6DSL_0_Probe+0x164>)
 8006980:	601a      	str	r2, [r3, #0]

    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_GYRO) == MOTION_GYRO) && (cap.Gyro == 1U))
 8006982:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006984:	2b00      	cmp	r3, #0
 8006986:	d11d      	bne.n	80069c4 <LSM6DSL_0_Probe+0xdc>
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	f003 0301 	and.w	r3, r3, #1
 800698e:	2b00      	cmp	r3, #0
 8006990:	d018      	beq.n	80069c4 <LSM6DSL_0_Probe+0xdc>
 8006992:	7b7b      	ldrb	r3, [r7, #13]
 8006994:	2b01      	cmp	r3, #1
 8006996:	d115      	bne.n	80069c4 <LSM6DSL_0_Probe+0xdc>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[IKS01A2_LSM6DSL_0][FunctionIndex[MOTION_GYRO]] = (MOTION_SENSOR_FuncDrv_t *)(void *)&LSM6DSL_GYRO_Driver;
 8006998:	4b2d      	ldr	r3, [pc, #180]	; (8006a50 <LSM6DSL_0_Probe+0x168>)
 800699a:	685b      	ldr	r3, [r3, #4]
 800699c:	4a2d      	ldr	r2, [pc, #180]	; (8006a54 <LSM6DSL_0_Probe+0x16c>)
 800699e:	492e      	ldr	r1, [pc, #184]	; (8006a58 <LSM6DSL_0_Probe+0x170>)
 80069a0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

      if (MotionDrv[IKS01A2_LSM6DSL_0]->Init(MotionCompObj[IKS01A2_LSM6DSL_0]) != LSM6DSL_OK)
 80069a4:	4b28      	ldr	r3, [pc, #160]	; (8006a48 <LSM6DSL_0_Probe+0x160>)
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	4a26      	ldr	r2, [pc, #152]	; (8006a44 <LSM6DSL_0_Probe+0x15c>)
 80069ac:	6812      	ldr	r2, [r2, #0]
 80069ae:	4610      	mov	r0, r2
 80069b0:	4798      	blx	r3
 80069b2:	4603      	mov	r3, r0
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	d003      	beq.n	80069c0 <LSM6DSL_0_Probe+0xd8>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 80069b8:	f06f 0304 	mvn.w	r3, #4
 80069bc:	64fb      	str	r3, [r7, #76]	; 0x4c
 80069be:	e001      	b.n	80069c4 <LSM6DSL_0_Probe+0xdc>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 80069c0:	2300      	movs	r3, #0
 80069c2:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_ACCELERO) == MOTION_ACCELERO) && (cap.Acc == 1U))
 80069c4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d11d      	bne.n	8006a06 <LSM6DSL_0_Probe+0x11e>
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	f003 0302 	and.w	r3, r3, #2
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d018      	beq.n	8006a06 <LSM6DSL_0_Probe+0x11e>
 80069d4:	7b3b      	ldrb	r3, [r7, #12]
 80069d6:	2b01      	cmp	r3, #1
 80069d8:	d115      	bne.n	8006a06 <LSM6DSL_0_Probe+0x11e>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[IKS01A2_LSM6DSL_0][FunctionIndex[MOTION_ACCELERO]] = (MOTION_SENSOR_FuncDrv_t *)(
 80069da:	4b1d      	ldr	r3, [pc, #116]	; (8006a50 <LSM6DSL_0_Probe+0x168>)
 80069dc:	689b      	ldr	r3, [r3, #8]
 80069de:	4a1d      	ldr	r2, [pc, #116]	; (8006a54 <LSM6DSL_0_Probe+0x16c>)
 80069e0:	491e      	ldr	r1, [pc, #120]	; (8006a5c <LSM6DSL_0_Probe+0x174>)
 80069e2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                                                                           void *)&LSM6DSL_ACC_Driver;

      if (MotionDrv[IKS01A2_LSM6DSL_0]->Init(MotionCompObj[IKS01A2_LSM6DSL_0]) != LSM6DSL_OK)
 80069e6:	4b18      	ldr	r3, [pc, #96]	; (8006a48 <LSM6DSL_0_Probe+0x160>)
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	4a15      	ldr	r2, [pc, #84]	; (8006a44 <LSM6DSL_0_Probe+0x15c>)
 80069ee:	6812      	ldr	r2, [r2, #0]
 80069f0:	4610      	mov	r0, r2
 80069f2:	4798      	blx	r3
 80069f4:	4603      	mov	r3, r0
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d003      	beq.n	8006a02 <LSM6DSL_0_Probe+0x11a>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 80069fa:	f06f 0304 	mvn.w	r3, #4
 80069fe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006a00:	e001      	b.n	8006a06 <LSM6DSL_0_Probe+0x11e>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8006a02:	2300      	movs	r3, #0
 8006a04:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_MAGNETO) == MOTION_MAGNETO))
 8006a06:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d107      	bne.n	8006a1c <LSM6DSL_0_Probe+0x134>
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	f003 0304 	and.w	r3, r3, #4
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d002      	beq.n	8006a1c <LSM6DSL_0_Probe+0x134>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8006a16:	f06f 0304 	mvn.w	r3, #4
 8006a1a:	64fb      	str	r3, [r7, #76]	; 0x4c
    }
  }
  return ret;
 8006a1c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
}
 8006a1e:	4618      	mov	r0, r3
 8006a20:	3750      	adds	r7, #80	; 0x50
 8006a22:	46bd      	mov	sp, r7
 8006a24:	bd80      	pop	{r7, pc}
 8006a26:	bf00      	nop
 8006a28:	08002cd9 	.word	0x08002cd9
 8006a2c:	08002d3d 	.word	0x08002d3d
 8006a30:	08002df1 	.word	0x08002df1
 8006a34:	08002d8d 	.word	0x08002d8d
 8006a38:	08002e55 	.word	0x08002e55
 8006a3c:	200009a0 	.word	0x200009a0
 8006a40:	20000994 	.word	0x20000994
 8006a44:	20000958 	.word	0x20000958
 8006a48:	20000988 	.word	0x20000988
 8006a4c:	20000094 	.word	0x20000094
 8006a50:	200000ec 	.word	0x200000ec
 8006a54:	20000964 	.word	0x20000964
 8006a58:	200000c8 	.word	0x200000c8
 8006a5c:	200000a4 	.word	0x200000a4

08006a60 <LSM303AGR_ACC_0_Probe>:
/**
  * @brief  Register Bus IOs for instance 1 if component ID is OK
  * @retval error status
  */
static int32_t LSM303AGR_ACC_0_Probe(uint32_t Functions)
{
 8006a60:	b580      	push	{r7, lr}
 8006a62:	b094      	sub	sp, #80	; 0x50
 8006a64:	af00      	add	r7, sp, #0
 8006a66:	6078      	str	r0, [r7, #4]
  LSM303AGR_IO_t                io_ctx;
  uint8_t                       id;
  static LSM303AGR_ACC_Object_t lsm303agr_acc_obj_0;
  LSM303AGR_Capabilities_t      cap;
  int32_t ret = BSP_ERROR_NONE;
 8006a68:	2300      	movs	r3, #0
 8006a6a:	64fb      	str	r3, [r7, #76]	; 0x4c

  /* Configure the accelero driver */
  io_ctx.BusType     = LSM303AGR_I2C_BUS; /* I2C */
 8006a6c:	2300      	movs	r3, #0
 8006a6e:	637b      	str	r3, [r7, #52]	; 0x34
  io_ctx.Address     = LSM303AGR_I2C_ADD_XL;
 8006a70:	2333      	movs	r3, #51	; 0x33
 8006a72:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  io_ctx.Init        = IKS01A2_I2C_Init;
 8006a76:	4b3f      	ldr	r3, [pc, #252]	; (8006b74 <LSM303AGR_ACC_0_Probe+0x114>)
 8006a78:	62fb      	str	r3, [r7, #44]	; 0x2c
  io_ctx.DeInit      = IKS01A2_I2C_DeInit;
 8006a7a:	4b3f      	ldr	r3, [pc, #252]	; (8006b78 <LSM303AGR_ACC_0_Probe+0x118>)
 8006a7c:	633b      	str	r3, [r7, #48]	; 0x30
  io_ctx.ReadReg     = IKS01A2_I2C_ReadReg;
 8006a7e:	4b3f      	ldr	r3, [pc, #252]	; (8006b7c <LSM303AGR_ACC_0_Probe+0x11c>)
 8006a80:	643b      	str	r3, [r7, #64]	; 0x40
  io_ctx.WriteReg    = IKS01A2_I2C_WriteReg;
 8006a82:	4b3f      	ldr	r3, [pc, #252]	; (8006b80 <LSM303AGR_ACC_0_Probe+0x120>)
 8006a84:	63fb      	str	r3, [r7, #60]	; 0x3c
  io_ctx.GetTick     = IKS01A2_GetTick;
 8006a86:	4b3f      	ldr	r3, [pc, #252]	; (8006b84 <LSM303AGR_ACC_0_Probe+0x124>)
 8006a88:	647b      	str	r3, [r7, #68]	; 0x44

  if (LSM303AGR_ACC_RegisterBusIO(&lsm303agr_acc_obj_0, &io_ctx) != LSM303AGR_OK)
 8006a8a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8006a8e:	4619      	mov	r1, r3
 8006a90:	483d      	ldr	r0, [pc, #244]	; (8006b88 <LSM303AGR_ACC_0_Probe+0x128>)
 8006a92:	f7fc fe8b 	bl	80037ac <LSM303AGR_ACC_RegisterBusIO>
 8006a96:	4603      	mov	r3, r0
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d003      	beq.n	8006aa4 <LSM303AGR_ACC_0_Probe+0x44>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8006a9c:	f06f 0306 	mvn.w	r3, #6
 8006aa0:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006aa2:	e062      	b.n	8006b6a <LSM303AGR_ACC_0_Probe+0x10a>
  }
  else if (LSM303AGR_ACC_ReadID(&lsm303agr_acc_obj_0, &id) != LSM303AGR_OK)
 8006aa4:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 8006aa8:	4619      	mov	r1, r3
 8006aaa:	4837      	ldr	r0, [pc, #220]	; (8006b88 <LSM303AGR_ACC_0_Probe+0x128>)
 8006aac:	f7fc ff43 	bl	8003936 <LSM303AGR_ACC_ReadID>
 8006ab0:	4603      	mov	r3, r0
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d003      	beq.n	8006abe <LSM303AGR_ACC_0_Probe+0x5e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8006ab6:	f06f 0306 	mvn.w	r3, #6
 8006aba:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006abc:	e055      	b.n	8006b6a <LSM303AGR_ACC_0_Probe+0x10a>
  }
  else if (id != (uint8_t)LSM303AGR_ID_XL)
 8006abe:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006ac2:	2b33      	cmp	r3, #51	; 0x33
 8006ac4:	d003      	beq.n	8006ace <LSM303AGR_ACC_0_Probe+0x6e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8006ac6:	f06f 0306 	mvn.w	r3, #6
 8006aca:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006acc:	e04d      	b.n	8006b6a <LSM303AGR_ACC_0_Probe+0x10a>
  }
  else
  {
    (void)LSM303AGR_ACC_GetCapabilities(&lsm303agr_acc_obj_0, &cap);
 8006ace:	f107 030c 	add.w	r3, r7, #12
 8006ad2:	4619      	mov	r1, r3
 8006ad4:	482c      	ldr	r0, [pc, #176]	; (8006b88 <LSM303AGR_ACC_0_Probe+0x128>)
 8006ad6:	f7fc ff45 	bl	8003964 <LSM303AGR_ACC_GetCapabilities>
    MotionCtx[IKS01A2_LSM303AGR_ACC_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((
 8006ada:	7b7b      	ldrb	r3, [r7, #13]
 8006adc:	461a      	mov	r2, r3
 8006ade:	7b3b      	ldrb	r3, [r7, #12]
 8006ae0:	005b      	lsls	r3, r3, #1
 8006ae2:	431a      	orrs	r2, r3
                                                     uint32_t)cap.Magneto << 2);
 8006ae4:	7bbb      	ldrb	r3, [r7, #14]
 8006ae6:	009b      	lsls	r3, r3, #2
    MotionCtx[IKS01A2_LSM303AGR_ACC_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((
 8006ae8:	4313      	orrs	r3, r2
 8006aea:	4a28      	ldr	r2, [pc, #160]	; (8006b8c <LSM303AGR_ACC_0_Probe+0x12c>)
 8006aec:	6053      	str	r3, [r2, #4]

    MotionCompObj[IKS01A2_LSM303AGR_ACC_0] = &lsm303agr_acc_obj_0;
 8006aee:	4b28      	ldr	r3, [pc, #160]	; (8006b90 <LSM303AGR_ACC_0_Probe+0x130>)
 8006af0:	4a25      	ldr	r2, [pc, #148]	; (8006b88 <LSM303AGR_ACC_0_Probe+0x128>)
 8006af2:	605a      	str	r2, [r3, #4]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    MotionDrv[IKS01A2_LSM303AGR_ACC_0] = (MOTION_SENSOR_CommonDrv_t *)(void *)&LSM303AGR_ACC_COMMON_Driver;
 8006af4:	4b27      	ldr	r3, [pc, #156]	; (8006b94 <LSM303AGR_ACC_0_Probe+0x134>)
 8006af6:	4a28      	ldr	r2, [pc, #160]	; (8006b98 <LSM303AGR_ACC_0_Probe+0x138>)
 8006af8:	605a      	str	r2, [r3, #4]

    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_ACCELERO) == MOTION_ACCELERO) && (cap.Acc == 1U))
 8006afa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	d11e      	bne.n	8006b3e <LSM303AGR_ACC_0_Probe+0xde>
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	f003 0302 	and.w	r3, r3, #2
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d019      	beq.n	8006b3e <LSM303AGR_ACC_0_Probe+0xde>
 8006b0a:	7b3b      	ldrb	r3, [r7, #12]
 8006b0c:	2b01      	cmp	r3, #1
 8006b0e:	d116      	bne.n	8006b3e <LSM303AGR_ACC_0_Probe+0xde>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[IKS01A2_LSM303AGR_ACC_0][FunctionIndex[MOTION_ACCELERO]] = (MOTION_SENSOR_FuncDrv_t *)(
 8006b10:	4b22      	ldr	r3, [pc, #136]	; (8006b9c <LSM303AGR_ACC_0_Probe+0x13c>)
 8006b12:	689b      	ldr	r3, [r3, #8]
 8006b14:	4a22      	ldr	r2, [pc, #136]	; (8006ba0 <LSM303AGR_ACC_0_Probe+0x140>)
 8006b16:	3303      	adds	r3, #3
 8006b18:	4922      	ldr	r1, [pc, #136]	; (8006ba4 <LSM303AGR_ACC_0_Probe+0x144>)
 8006b1a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                                                                                 void *)&LSM303AGR_ACC_Driver;

      if (MotionDrv[IKS01A2_LSM303AGR_ACC_0]->Init(MotionCompObj[IKS01A2_LSM303AGR_ACC_0]) != LSM303AGR_OK)
 8006b1e:	4b1d      	ldr	r3, [pc, #116]	; (8006b94 <LSM303AGR_ACC_0_Probe+0x134>)
 8006b20:	685b      	ldr	r3, [r3, #4]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	4a1a      	ldr	r2, [pc, #104]	; (8006b90 <LSM303AGR_ACC_0_Probe+0x130>)
 8006b26:	6852      	ldr	r2, [r2, #4]
 8006b28:	4610      	mov	r0, r2
 8006b2a:	4798      	blx	r3
 8006b2c:	4603      	mov	r3, r0
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d003      	beq.n	8006b3a <LSM303AGR_ACC_0_Probe+0xda>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8006b32:	f06f 0304 	mvn.w	r3, #4
 8006b36:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006b38:	e001      	b.n	8006b3e <LSM303AGR_ACC_0_Probe+0xde>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8006b3a:	2300      	movs	r3, #0
 8006b3c:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_GYRO) == MOTION_GYRO))
 8006b3e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	d107      	bne.n	8006b54 <LSM303AGR_ACC_0_Probe+0xf4>
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	f003 0301 	and.w	r3, r3, #1
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d002      	beq.n	8006b54 <LSM303AGR_ACC_0_Probe+0xf4>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8006b4e:	f06f 0304 	mvn.w	r3, #4
 8006b52:	64fb      	str	r3, [r7, #76]	; 0x4c
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_MAGNETO) == MOTION_MAGNETO))
 8006b54:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d107      	bne.n	8006b6a <LSM303AGR_ACC_0_Probe+0x10a>
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	f003 0304 	and.w	r3, r3, #4
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	d002      	beq.n	8006b6a <LSM303AGR_ACC_0_Probe+0x10a>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8006b64:	f06f 0304 	mvn.w	r3, #4
 8006b68:	64fb      	str	r3, [r7, #76]	; 0x4c
    }
  }

  return ret;
 8006b6a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
}
 8006b6c:	4618      	mov	r0, r3
 8006b6e:	3750      	adds	r7, #80	; 0x50
 8006b70:	46bd      	mov	sp, r7
 8006b72:	bd80      	pop	{r7, pc}
 8006b74:	08002cd9 	.word	0x08002cd9
 8006b78:	08002d3d 	.word	0x08002d3d
 8006b7c:	08002df1 	.word	0x08002df1
 8006b80:	08002d8d 	.word	0x08002d8d
 8006b84:	08002e55 	.word	0x08002e55
 8006b88:	200009d8 	.word	0x200009d8
 8006b8c:	20000994 	.word	0x20000994
 8006b90:	20000958 	.word	0x20000958
 8006b94:	20000988 	.word	0x20000988
 8006b98:	2000002c 	.word	0x2000002c
 8006b9c:	200000ec 	.word	0x200000ec
 8006ba0:	20000964 	.word	0x20000964
 8006ba4:	2000003c 	.word	0x2000003c

08006ba8 <LSM303AGR_MAG_0_Probe>:
/**
  * @brief  Register Bus IOs for instance 2 if component ID is OK
  * @retval error status
  */
static int32_t LSM303AGR_MAG_0_Probe(uint32_t Functions)
{
 8006ba8:	b580      	push	{r7, lr}
 8006baa:	b094      	sub	sp, #80	; 0x50
 8006bac:	af00      	add	r7, sp, #0
 8006bae:	6078      	str	r0, [r7, #4]
  LSM303AGR_IO_t                io_ctx;
  uint8_t                       id;
  static LSM303AGR_MAG_Object_t lsm303agr_mag_obj_0;
  LSM303AGR_Capabilities_t      cap;
  int32_t ret = BSP_ERROR_NONE;
 8006bb0:	2300      	movs	r3, #0
 8006bb2:	64fb      	str	r3, [r7, #76]	; 0x4c

  /* Configure the magneto driver */
  io_ctx.BusType     = LSM303AGR_I2C_BUS; /* I2C */
 8006bb4:	2300      	movs	r3, #0
 8006bb6:	637b      	str	r3, [r7, #52]	; 0x34
  io_ctx.Address     = LSM303AGR_I2C_ADD_MG;
 8006bb8:	233d      	movs	r3, #61	; 0x3d
 8006bba:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  io_ctx.Init        = IKS01A2_I2C_Init;
 8006bbe:	4b3f      	ldr	r3, [pc, #252]	; (8006cbc <LSM303AGR_MAG_0_Probe+0x114>)
 8006bc0:	62fb      	str	r3, [r7, #44]	; 0x2c
  io_ctx.DeInit      = IKS01A2_I2C_DeInit;
 8006bc2:	4b3f      	ldr	r3, [pc, #252]	; (8006cc0 <LSM303AGR_MAG_0_Probe+0x118>)
 8006bc4:	633b      	str	r3, [r7, #48]	; 0x30
  io_ctx.ReadReg     = IKS01A2_I2C_ReadReg;
 8006bc6:	4b3f      	ldr	r3, [pc, #252]	; (8006cc4 <LSM303AGR_MAG_0_Probe+0x11c>)
 8006bc8:	643b      	str	r3, [r7, #64]	; 0x40
  io_ctx.WriteReg    = IKS01A2_I2C_WriteReg;
 8006bca:	4b3f      	ldr	r3, [pc, #252]	; (8006cc8 <LSM303AGR_MAG_0_Probe+0x120>)
 8006bcc:	63fb      	str	r3, [r7, #60]	; 0x3c
  io_ctx.GetTick     = IKS01A2_GetTick;
 8006bce:	4b3f      	ldr	r3, [pc, #252]	; (8006ccc <LSM303AGR_MAG_0_Probe+0x124>)
 8006bd0:	647b      	str	r3, [r7, #68]	; 0x44

  if (LSM303AGR_MAG_RegisterBusIO(&lsm303agr_mag_obj_0, &io_ctx) != LSM303AGR_OK)
 8006bd2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8006bd6:	4619      	mov	r1, r3
 8006bd8:	483d      	ldr	r0, [pc, #244]	; (8006cd0 <LSM303AGR_MAG_0_Probe+0x128>)
 8006bda:	f7fd f9b1 	bl	8003f40 <LSM303AGR_MAG_RegisterBusIO>
 8006bde:	4603      	mov	r3, r0
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	d003      	beq.n	8006bec <LSM303AGR_MAG_0_Probe+0x44>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8006be4:	f06f 0306 	mvn.w	r3, #6
 8006be8:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006bea:	e062      	b.n	8006cb2 <LSM303AGR_MAG_0_Probe+0x10a>
  }
  else if (LSM303AGR_MAG_ReadID(&lsm303agr_mag_obj_0, &id) != LSM303AGR_OK)
 8006bec:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 8006bf0:	4619      	mov	r1, r3
 8006bf2:	4837      	ldr	r0, [pc, #220]	; (8006cd0 <LSM303AGR_MAG_0_Probe+0x128>)
 8006bf4:	f7fd fa5b 	bl	80040ae <LSM303AGR_MAG_ReadID>
 8006bf8:	4603      	mov	r3, r0
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d003      	beq.n	8006c06 <LSM303AGR_MAG_0_Probe+0x5e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8006bfe:	f06f 0306 	mvn.w	r3, #6
 8006c02:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006c04:	e055      	b.n	8006cb2 <LSM303AGR_MAG_0_Probe+0x10a>
  }
  else if (id != (uint8_t)LSM303AGR_ID_MG)
 8006c06:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006c0a:	2b40      	cmp	r3, #64	; 0x40
 8006c0c:	d003      	beq.n	8006c16 <LSM303AGR_MAG_0_Probe+0x6e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8006c0e:	f06f 0306 	mvn.w	r3, #6
 8006c12:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006c14:	e04d      	b.n	8006cb2 <LSM303AGR_MAG_0_Probe+0x10a>
  }
  else
  {
    (void)LSM303AGR_MAG_GetCapabilities(&lsm303agr_mag_obj_0, &cap);
 8006c16:	f107 030c 	add.w	r3, r7, #12
 8006c1a:	4619      	mov	r1, r3
 8006c1c:	482c      	ldr	r0, [pc, #176]	; (8006cd0 <LSM303AGR_MAG_0_Probe+0x128>)
 8006c1e:	f7fd fa5d 	bl	80040dc <LSM303AGR_MAG_GetCapabilities>
    MotionCtx[IKS01A2_LSM303AGR_MAG_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((
 8006c22:	7b7b      	ldrb	r3, [r7, #13]
 8006c24:	461a      	mov	r2, r3
 8006c26:	7b3b      	ldrb	r3, [r7, #12]
 8006c28:	005b      	lsls	r3, r3, #1
 8006c2a:	431a      	orrs	r2, r3
                                                     uint32_t)cap.Magneto << 2);
 8006c2c:	7bbb      	ldrb	r3, [r7, #14]
 8006c2e:	009b      	lsls	r3, r3, #2
    MotionCtx[IKS01A2_LSM303AGR_MAG_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((
 8006c30:	4313      	orrs	r3, r2
 8006c32:	4a28      	ldr	r2, [pc, #160]	; (8006cd4 <LSM303AGR_MAG_0_Probe+0x12c>)
 8006c34:	6093      	str	r3, [r2, #8]

    MotionCompObj[IKS01A2_LSM303AGR_MAG_0] = &lsm303agr_mag_obj_0;
 8006c36:	4b28      	ldr	r3, [pc, #160]	; (8006cd8 <LSM303AGR_MAG_0_Probe+0x130>)
 8006c38:	4a25      	ldr	r2, [pc, #148]	; (8006cd0 <LSM303AGR_MAG_0_Probe+0x128>)
 8006c3a:	609a      	str	r2, [r3, #8]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    MotionDrv[IKS01A2_LSM303AGR_MAG_0] = (MOTION_SENSOR_CommonDrv_t *)(void *)&LSM303AGR_MAG_COMMON_Driver;
 8006c3c:	4b27      	ldr	r3, [pc, #156]	; (8006cdc <LSM303AGR_MAG_0_Probe+0x134>)
 8006c3e:	4a28      	ldr	r2, [pc, #160]	; (8006ce0 <LSM303AGR_MAG_0_Probe+0x138>)
 8006c40:	609a      	str	r2, [r3, #8]

    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_MAGNETO) == MOTION_MAGNETO) && (cap.Magneto == 1U))
 8006c42:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d11e      	bne.n	8006c86 <LSM303AGR_MAG_0_Probe+0xde>
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	f003 0304 	and.w	r3, r3, #4
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d019      	beq.n	8006c86 <LSM303AGR_MAG_0_Probe+0xde>
 8006c52:	7bbb      	ldrb	r3, [r7, #14]
 8006c54:	2b01      	cmp	r3, #1
 8006c56:	d116      	bne.n	8006c86 <LSM303AGR_MAG_0_Probe+0xde>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[IKS01A2_LSM303AGR_MAG_0][FunctionIndex[MOTION_MAGNETO]] = (MOTION_SENSOR_FuncDrv_t *)(
 8006c58:	4b22      	ldr	r3, [pc, #136]	; (8006ce4 <LSM303AGR_MAG_0_Probe+0x13c>)
 8006c5a:	691b      	ldr	r3, [r3, #16]
 8006c5c:	4a22      	ldr	r2, [pc, #136]	; (8006ce8 <LSM303AGR_MAG_0_Probe+0x140>)
 8006c5e:	3306      	adds	r3, #6
 8006c60:	4922      	ldr	r1, [pc, #136]	; (8006cec <LSM303AGR_MAG_0_Probe+0x144>)
 8006c62:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                                                                                void *)&LSM303AGR_MAG_Driver;

      if (MotionDrv[IKS01A2_LSM303AGR_MAG_0]->Init(MotionCompObj[IKS01A2_LSM303AGR_MAG_0]) != LSM303AGR_OK)
 8006c66:	4b1d      	ldr	r3, [pc, #116]	; (8006cdc <LSM303AGR_MAG_0_Probe+0x134>)
 8006c68:	689b      	ldr	r3, [r3, #8]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	4a1a      	ldr	r2, [pc, #104]	; (8006cd8 <LSM303AGR_MAG_0_Probe+0x130>)
 8006c6e:	6892      	ldr	r2, [r2, #8]
 8006c70:	4610      	mov	r0, r2
 8006c72:	4798      	blx	r3
 8006c74:	4603      	mov	r3, r0
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d003      	beq.n	8006c82 <LSM303AGR_MAG_0_Probe+0xda>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8006c7a:	f06f 0304 	mvn.w	r3, #4
 8006c7e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006c80:	e001      	b.n	8006c86 <LSM303AGR_MAG_0_Probe+0xde>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8006c82:	2300      	movs	r3, #0
 8006c84:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_ACCELERO) == MOTION_ACCELERO))
 8006c86:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	d107      	bne.n	8006c9c <LSM303AGR_MAG_0_Probe+0xf4>
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	f003 0302 	and.w	r3, r3, #2
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d002      	beq.n	8006c9c <LSM303AGR_MAG_0_Probe+0xf4>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8006c96:	f06f 0304 	mvn.w	r3, #4
 8006c9a:	64fb      	str	r3, [r7, #76]	; 0x4c
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_GYRO) == MOTION_GYRO))
 8006c9c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	d107      	bne.n	8006cb2 <LSM303AGR_MAG_0_Probe+0x10a>
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	f003 0301 	and.w	r3, r3, #1
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	d002      	beq.n	8006cb2 <LSM303AGR_MAG_0_Probe+0x10a>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8006cac:	f06f 0304 	mvn.w	r3, #4
 8006cb0:	64fb      	str	r3, [r7, #76]	; 0x4c
    }
  }

  return ret;
 8006cb2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
}
 8006cb4:	4618      	mov	r0, r3
 8006cb6:	3750      	adds	r7, #80	; 0x50
 8006cb8:	46bd      	mov	sp, r7
 8006cba:	bd80      	pop	{r7, pc}
 8006cbc:	08002cd9 	.word	0x08002cd9
 8006cc0:	08002d3d 	.word	0x08002d3d
 8006cc4:	08002df1 	.word	0x08002df1
 8006cc8:	08002d8d 	.word	0x08002d8d
 8006ccc:	08002e55 	.word	0x08002e55
 8006cd0:	20000a0c 	.word	0x20000a0c
 8006cd4:	20000994 	.word	0x20000994
 8006cd8:	20000958 	.word	0x20000958
 8006cdc:	20000988 	.word	0x20000988
 8006ce0:	20000060 	.word	0x20000060
 8006ce4:	200000ec 	.word	0x200000ec
 8006ce8:	20000964 	.word	0x20000964
 8006cec:	20000070 	.word	0x20000070

08006cf0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8006cf0:	b580      	push	{r7, lr}
 8006cf2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8006cf4:	4b0e      	ldr	r3, [pc, #56]	; (8006d30 <HAL_Init+0x40>)
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	4a0d      	ldr	r2, [pc, #52]	; (8006d30 <HAL_Init+0x40>)
 8006cfa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006cfe:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8006d00:	4b0b      	ldr	r3, [pc, #44]	; (8006d30 <HAL_Init+0x40>)
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	4a0a      	ldr	r2, [pc, #40]	; (8006d30 <HAL_Init+0x40>)
 8006d06:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006d0a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8006d0c:	4b08      	ldr	r3, [pc, #32]	; (8006d30 <HAL_Init+0x40>)
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	4a07      	ldr	r2, [pc, #28]	; (8006d30 <HAL_Init+0x40>)
 8006d12:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006d16:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8006d18:	2003      	movs	r0, #3
 8006d1a:	f000 f94f 	bl	8006fbc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8006d1e:	2000      	movs	r0, #0
 8006d20:	f000 f808 	bl	8006d34 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8006d24:	f7fb ff4c 	bl	8002bc0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8006d28:	2300      	movs	r3, #0
}
 8006d2a:	4618      	mov	r0, r3
 8006d2c:	bd80      	pop	{r7, pc}
 8006d2e:	bf00      	nop
 8006d30:	40023c00 	.word	0x40023c00

08006d34 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8006d34:	b580      	push	{r7, lr}
 8006d36:	b082      	sub	sp, #8
 8006d38:	af00      	add	r7, sp, #0
 8006d3a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8006d3c:	4b12      	ldr	r3, [pc, #72]	; (8006d88 <HAL_InitTick+0x54>)
 8006d3e:	681a      	ldr	r2, [r3, #0]
 8006d40:	4b12      	ldr	r3, [pc, #72]	; (8006d8c <HAL_InitTick+0x58>)
 8006d42:	781b      	ldrb	r3, [r3, #0]
 8006d44:	4619      	mov	r1, r3
 8006d46:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006d4a:	fbb3 f3f1 	udiv	r3, r3, r1
 8006d4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d52:	4618      	mov	r0, r3
 8006d54:	f000 f967 	bl	8007026 <HAL_SYSTICK_Config>
 8006d58:	4603      	mov	r3, r0
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	d001      	beq.n	8006d62 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8006d5e:	2301      	movs	r3, #1
 8006d60:	e00e      	b.n	8006d80 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	2b0f      	cmp	r3, #15
 8006d66:	d80a      	bhi.n	8006d7e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8006d68:	2200      	movs	r2, #0
 8006d6a:	6879      	ldr	r1, [r7, #4]
 8006d6c:	f04f 30ff 	mov.w	r0, #4294967295
 8006d70:	f000 f92f 	bl	8006fd2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8006d74:	4a06      	ldr	r2, [pc, #24]	; (8006d90 <HAL_InitTick+0x5c>)
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8006d7a:	2300      	movs	r3, #0
 8006d7c:	e000      	b.n	8006d80 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8006d7e:	2301      	movs	r3, #1
}
 8006d80:	4618      	mov	r0, r3
 8006d82:	3708      	adds	r7, #8
 8006d84:	46bd      	mov	sp, r7
 8006d86:	bd80      	pop	{r7, pc}
 8006d88:	20000028 	.word	0x20000028
 8006d8c:	20000104 	.word	0x20000104
 8006d90:	20000100 	.word	0x20000100

08006d94 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8006d94:	b480      	push	{r7}
 8006d96:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8006d98:	4b06      	ldr	r3, [pc, #24]	; (8006db4 <HAL_IncTick+0x20>)
 8006d9a:	781b      	ldrb	r3, [r3, #0]
 8006d9c:	461a      	mov	r2, r3
 8006d9e:	4b06      	ldr	r3, [pc, #24]	; (8006db8 <HAL_IncTick+0x24>)
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	4413      	add	r3, r2
 8006da4:	4a04      	ldr	r2, [pc, #16]	; (8006db8 <HAL_IncTick+0x24>)
 8006da6:	6013      	str	r3, [r2, #0]
}
 8006da8:	bf00      	nop
 8006daa:	46bd      	mov	sp, r7
 8006dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006db0:	4770      	bx	lr
 8006db2:	bf00      	nop
 8006db4:	20000104 	.word	0x20000104
 8006db8:	20000a40 	.word	0x20000a40

08006dbc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8006dbc:	b480      	push	{r7}
 8006dbe:	af00      	add	r7, sp, #0
  return uwTick;
 8006dc0:	4b03      	ldr	r3, [pc, #12]	; (8006dd0 <HAL_GetTick+0x14>)
 8006dc2:	681b      	ldr	r3, [r3, #0]
}
 8006dc4:	4618      	mov	r0, r3
 8006dc6:	46bd      	mov	sp, r7
 8006dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dcc:	4770      	bx	lr
 8006dce:	bf00      	nop
 8006dd0:	20000a40 	.word	0x20000a40

08006dd4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8006dd4:	b580      	push	{r7, lr}
 8006dd6:	b084      	sub	sp, #16
 8006dd8:	af00      	add	r7, sp, #0
 8006dda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8006ddc:	f7ff ffee 	bl	8006dbc <HAL_GetTick>
 8006de0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006dec:	d005      	beq.n	8006dfa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8006dee:	4b0a      	ldr	r3, [pc, #40]	; (8006e18 <HAL_Delay+0x44>)
 8006df0:	781b      	ldrb	r3, [r3, #0]
 8006df2:	461a      	mov	r2, r3
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	4413      	add	r3, r2
 8006df8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8006dfa:	bf00      	nop
 8006dfc:	f7ff ffde 	bl	8006dbc <HAL_GetTick>
 8006e00:	4602      	mov	r2, r0
 8006e02:	68bb      	ldr	r3, [r7, #8]
 8006e04:	1ad3      	subs	r3, r2, r3
 8006e06:	68fa      	ldr	r2, [r7, #12]
 8006e08:	429a      	cmp	r2, r3
 8006e0a:	d8f7      	bhi.n	8006dfc <HAL_Delay+0x28>
  {
  }
}
 8006e0c:	bf00      	nop
 8006e0e:	bf00      	nop
 8006e10:	3710      	adds	r7, #16
 8006e12:	46bd      	mov	sp, r7
 8006e14:	bd80      	pop	{r7, pc}
 8006e16:	bf00      	nop
 8006e18:	20000104 	.word	0x20000104

08006e1c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006e1c:	b480      	push	{r7}
 8006e1e:	b085      	sub	sp, #20
 8006e20:	af00      	add	r7, sp, #0
 8006e22:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	f003 0307 	and.w	r3, r3, #7
 8006e2a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006e2c:	4b0c      	ldr	r3, [pc, #48]	; (8006e60 <__NVIC_SetPriorityGrouping+0x44>)
 8006e2e:	68db      	ldr	r3, [r3, #12]
 8006e30:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006e32:	68ba      	ldr	r2, [r7, #8]
 8006e34:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8006e38:	4013      	ands	r3, r2
 8006e3a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006e40:	68bb      	ldr	r3, [r7, #8]
 8006e42:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8006e44:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8006e48:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006e4c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8006e4e:	4a04      	ldr	r2, [pc, #16]	; (8006e60 <__NVIC_SetPriorityGrouping+0x44>)
 8006e50:	68bb      	ldr	r3, [r7, #8]
 8006e52:	60d3      	str	r3, [r2, #12]
}
 8006e54:	bf00      	nop
 8006e56:	3714      	adds	r7, #20
 8006e58:	46bd      	mov	sp, r7
 8006e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e5e:	4770      	bx	lr
 8006e60:	e000ed00 	.word	0xe000ed00

08006e64 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8006e64:	b480      	push	{r7}
 8006e66:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006e68:	4b04      	ldr	r3, [pc, #16]	; (8006e7c <__NVIC_GetPriorityGrouping+0x18>)
 8006e6a:	68db      	ldr	r3, [r3, #12]
 8006e6c:	0a1b      	lsrs	r3, r3, #8
 8006e6e:	f003 0307 	and.w	r3, r3, #7
}
 8006e72:	4618      	mov	r0, r3
 8006e74:	46bd      	mov	sp, r7
 8006e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e7a:	4770      	bx	lr
 8006e7c:	e000ed00 	.word	0xe000ed00

08006e80 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006e80:	b480      	push	{r7}
 8006e82:	b083      	sub	sp, #12
 8006e84:	af00      	add	r7, sp, #0
 8006e86:	4603      	mov	r3, r0
 8006e88:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006e8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	db0b      	blt.n	8006eaa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006e92:	79fb      	ldrb	r3, [r7, #7]
 8006e94:	f003 021f 	and.w	r2, r3, #31
 8006e98:	4907      	ldr	r1, [pc, #28]	; (8006eb8 <__NVIC_EnableIRQ+0x38>)
 8006e9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006e9e:	095b      	lsrs	r3, r3, #5
 8006ea0:	2001      	movs	r0, #1
 8006ea2:	fa00 f202 	lsl.w	r2, r0, r2
 8006ea6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8006eaa:	bf00      	nop
 8006eac:	370c      	adds	r7, #12
 8006eae:	46bd      	mov	sp, r7
 8006eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eb4:	4770      	bx	lr
 8006eb6:	bf00      	nop
 8006eb8:	e000e100 	.word	0xe000e100

08006ebc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006ebc:	b480      	push	{r7}
 8006ebe:	b083      	sub	sp, #12
 8006ec0:	af00      	add	r7, sp, #0
 8006ec2:	4603      	mov	r3, r0
 8006ec4:	6039      	str	r1, [r7, #0]
 8006ec6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006ec8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	db0a      	blt.n	8006ee6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006ed0:	683b      	ldr	r3, [r7, #0]
 8006ed2:	b2da      	uxtb	r2, r3
 8006ed4:	490c      	ldr	r1, [pc, #48]	; (8006f08 <__NVIC_SetPriority+0x4c>)
 8006ed6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006eda:	0112      	lsls	r2, r2, #4
 8006edc:	b2d2      	uxtb	r2, r2
 8006ede:	440b      	add	r3, r1
 8006ee0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8006ee4:	e00a      	b.n	8006efc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006ee6:	683b      	ldr	r3, [r7, #0]
 8006ee8:	b2da      	uxtb	r2, r3
 8006eea:	4908      	ldr	r1, [pc, #32]	; (8006f0c <__NVIC_SetPriority+0x50>)
 8006eec:	79fb      	ldrb	r3, [r7, #7]
 8006eee:	f003 030f 	and.w	r3, r3, #15
 8006ef2:	3b04      	subs	r3, #4
 8006ef4:	0112      	lsls	r2, r2, #4
 8006ef6:	b2d2      	uxtb	r2, r2
 8006ef8:	440b      	add	r3, r1
 8006efa:	761a      	strb	r2, [r3, #24]
}
 8006efc:	bf00      	nop
 8006efe:	370c      	adds	r7, #12
 8006f00:	46bd      	mov	sp, r7
 8006f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f06:	4770      	bx	lr
 8006f08:	e000e100 	.word	0xe000e100
 8006f0c:	e000ed00 	.word	0xe000ed00

08006f10 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006f10:	b480      	push	{r7}
 8006f12:	b089      	sub	sp, #36	; 0x24
 8006f14:	af00      	add	r7, sp, #0
 8006f16:	60f8      	str	r0, [r7, #12]
 8006f18:	60b9      	str	r1, [r7, #8]
 8006f1a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	f003 0307 	and.w	r3, r3, #7
 8006f22:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006f24:	69fb      	ldr	r3, [r7, #28]
 8006f26:	f1c3 0307 	rsb	r3, r3, #7
 8006f2a:	2b04      	cmp	r3, #4
 8006f2c:	bf28      	it	cs
 8006f2e:	2304      	movcs	r3, #4
 8006f30:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006f32:	69fb      	ldr	r3, [r7, #28]
 8006f34:	3304      	adds	r3, #4
 8006f36:	2b06      	cmp	r3, #6
 8006f38:	d902      	bls.n	8006f40 <NVIC_EncodePriority+0x30>
 8006f3a:	69fb      	ldr	r3, [r7, #28]
 8006f3c:	3b03      	subs	r3, #3
 8006f3e:	e000      	b.n	8006f42 <NVIC_EncodePriority+0x32>
 8006f40:	2300      	movs	r3, #0
 8006f42:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006f44:	f04f 32ff 	mov.w	r2, #4294967295
 8006f48:	69bb      	ldr	r3, [r7, #24]
 8006f4a:	fa02 f303 	lsl.w	r3, r2, r3
 8006f4e:	43da      	mvns	r2, r3
 8006f50:	68bb      	ldr	r3, [r7, #8]
 8006f52:	401a      	ands	r2, r3
 8006f54:	697b      	ldr	r3, [r7, #20]
 8006f56:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006f58:	f04f 31ff 	mov.w	r1, #4294967295
 8006f5c:	697b      	ldr	r3, [r7, #20]
 8006f5e:	fa01 f303 	lsl.w	r3, r1, r3
 8006f62:	43d9      	mvns	r1, r3
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006f68:	4313      	orrs	r3, r2
         );
}
 8006f6a:	4618      	mov	r0, r3
 8006f6c:	3724      	adds	r7, #36	; 0x24
 8006f6e:	46bd      	mov	sp, r7
 8006f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f74:	4770      	bx	lr
	...

08006f78 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8006f78:	b580      	push	{r7, lr}
 8006f7a:	b082      	sub	sp, #8
 8006f7c:	af00      	add	r7, sp, #0
 8006f7e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	3b01      	subs	r3, #1
 8006f84:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006f88:	d301      	bcc.n	8006f8e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8006f8a:	2301      	movs	r3, #1
 8006f8c:	e00f      	b.n	8006fae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8006f8e:	4a0a      	ldr	r2, [pc, #40]	; (8006fb8 <SysTick_Config+0x40>)
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	3b01      	subs	r3, #1
 8006f94:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8006f96:	210f      	movs	r1, #15
 8006f98:	f04f 30ff 	mov.w	r0, #4294967295
 8006f9c:	f7ff ff8e 	bl	8006ebc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006fa0:	4b05      	ldr	r3, [pc, #20]	; (8006fb8 <SysTick_Config+0x40>)
 8006fa2:	2200      	movs	r2, #0
 8006fa4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006fa6:	4b04      	ldr	r3, [pc, #16]	; (8006fb8 <SysTick_Config+0x40>)
 8006fa8:	2207      	movs	r2, #7
 8006faa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006fac:	2300      	movs	r3, #0
}
 8006fae:	4618      	mov	r0, r3
 8006fb0:	3708      	adds	r7, #8
 8006fb2:	46bd      	mov	sp, r7
 8006fb4:	bd80      	pop	{r7, pc}
 8006fb6:	bf00      	nop
 8006fb8:	e000e010 	.word	0xe000e010

08006fbc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006fbc:	b580      	push	{r7, lr}
 8006fbe:	b082      	sub	sp, #8
 8006fc0:	af00      	add	r7, sp, #0
 8006fc2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006fc4:	6878      	ldr	r0, [r7, #4]
 8006fc6:	f7ff ff29 	bl	8006e1c <__NVIC_SetPriorityGrouping>
}
 8006fca:	bf00      	nop
 8006fcc:	3708      	adds	r7, #8
 8006fce:	46bd      	mov	sp, r7
 8006fd0:	bd80      	pop	{r7, pc}

08006fd2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8006fd2:	b580      	push	{r7, lr}
 8006fd4:	b086      	sub	sp, #24
 8006fd6:	af00      	add	r7, sp, #0
 8006fd8:	4603      	mov	r3, r0
 8006fda:	60b9      	str	r1, [r7, #8]
 8006fdc:	607a      	str	r2, [r7, #4]
 8006fde:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8006fe0:	2300      	movs	r3, #0
 8006fe2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8006fe4:	f7ff ff3e 	bl	8006e64 <__NVIC_GetPriorityGrouping>
 8006fe8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006fea:	687a      	ldr	r2, [r7, #4]
 8006fec:	68b9      	ldr	r1, [r7, #8]
 8006fee:	6978      	ldr	r0, [r7, #20]
 8006ff0:	f7ff ff8e 	bl	8006f10 <NVIC_EncodePriority>
 8006ff4:	4602      	mov	r2, r0
 8006ff6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006ffa:	4611      	mov	r1, r2
 8006ffc:	4618      	mov	r0, r3
 8006ffe:	f7ff ff5d 	bl	8006ebc <__NVIC_SetPriority>
}
 8007002:	bf00      	nop
 8007004:	3718      	adds	r7, #24
 8007006:	46bd      	mov	sp, r7
 8007008:	bd80      	pop	{r7, pc}

0800700a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800700a:	b580      	push	{r7, lr}
 800700c:	b082      	sub	sp, #8
 800700e:	af00      	add	r7, sp, #0
 8007010:	4603      	mov	r3, r0
 8007012:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8007014:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007018:	4618      	mov	r0, r3
 800701a:	f7ff ff31 	bl	8006e80 <__NVIC_EnableIRQ>
}
 800701e:	bf00      	nop
 8007020:	3708      	adds	r7, #8
 8007022:	46bd      	mov	sp, r7
 8007024:	bd80      	pop	{r7, pc}

08007026 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8007026:	b580      	push	{r7, lr}
 8007028:	b082      	sub	sp, #8
 800702a:	af00      	add	r7, sp, #0
 800702c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800702e:	6878      	ldr	r0, [r7, #4]
 8007030:	f7ff ffa2 	bl	8006f78 <SysTick_Config>
 8007034:	4603      	mov	r3, r0
}
 8007036:	4618      	mov	r0, r3
 8007038:	3708      	adds	r7, #8
 800703a:	46bd      	mov	sp, r7
 800703c:	bd80      	pop	{r7, pc}
	...

08007040 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8007040:	b580      	push	{r7, lr}
 8007042:	b086      	sub	sp, #24
 8007044:	af00      	add	r7, sp, #0
 8007046:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8007048:	2300      	movs	r3, #0
 800704a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800704c:	f7ff feb6 	bl	8006dbc <HAL_GetTick>
 8007050:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	2b00      	cmp	r3, #0
 8007056:	d101      	bne.n	800705c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8007058:	2301      	movs	r3, #1
 800705a:	e099      	b.n	8007190 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	2202      	movs	r2, #2
 8007060:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	2200      	movs	r2, #0
 8007068:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	681a      	ldr	r2, [r3, #0]
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	f022 0201 	bic.w	r2, r2, #1
 800707a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800707c:	e00f      	b.n	800709e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800707e:	f7ff fe9d 	bl	8006dbc <HAL_GetTick>
 8007082:	4602      	mov	r2, r0
 8007084:	693b      	ldr	r3, [r7, #16]
 8007086:	1ad3      	subs	r3, r2, r3
 8007088:	2b05      	cmp	r3, #5
 800708a:	d908      	bls.n	800709e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	2220      	movs	r2, #32
 8007090:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	2203      	movs	r2, #3
 8007096:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800709a:	2303      	movs	r3, #3
 800709c:	e078      	b.n	8007190 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	f003 0301 	and.w	r3, r3, #1
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	d1e8      	bne.n	800707e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80070b4:	697a      	ldr	r2, [r7, #20]
 80070b6:	4b38      	ldr	r3, [pc, #224]	; (8007198 <HAL_DMA_Init+0x158>)
 80070b8:	4013      	ands	r3, r2
 80070ba:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	685a      	ldr	r2, [r3, #4]
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	689b      	ldr	r3, [r3, #8]
 80070c4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80070ca:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	691b      	ldr	r3, [r3, #16]
 80070d0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80070d6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	699b      	ldr	r3, [r3, #24]
 80070dc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80070e2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	6a1b      	ldr	r3, [r3, #32]
 80070e8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80070ea:	697a      	ldr	r2, [r7, #20]
 80070ec:	4313      	orrs	r3, r2
 80070ee:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070f4:	2b04      	cmp	r3, #4
 80070f6:	d107      	bne.n	8007108 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007100:	4313      	orrs	r3, r2
 8007102:	697a      	ldr	r2, [r7, #20]
 8007104:	4313      	orrs	r3, r2
 8007106:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	697a      	ldr	r2, [r7, #20]
 800710e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	695b      	ldr	r3, [r3, #20]
 8007116:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8007118:	697b      	ldr	r3, [r7, #20]
 800711a:	f023 0307 	bic.w	r3, r3, #7
 800711e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007124:	697a      	ldr	r2, [r7, #20]
 8007126:	4313      	orrs	r3, r2
 8007128:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800712e:	2b04      	cmp	r3, #4
 8007130:	d117      	bne.n	8007162 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007136:	697a      	ldr	r2, [r7, #20]
 8007138:	4313      	orrs	r3, r2
 800713a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007140:	2b00      	cmp	r3, #0
 8007142:	d00e      	beq.n	8007162 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8007144:	6878      	ldr	r0, [r7, #4]
 8007146:	f000 fa6f 	bl	8007628 <DMA_CheckFifoParam>
 800714a:	4603      	mov	r3, r0
 800714c:	2b00      	cmp	r3, #0
 800714e:	d008      	beq.n	8007162 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	2240      	movs	r2, #64	; 0x40
 8007154:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	2201      	movs	r2, #1
 800715a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800715e:	2301      	movs	r3, #1
 8007160:	e016      	b.n	8007190 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	697a      	ldr	r2, [r7, #20]
 8007168:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800716a:	6878      	ldr	r0, [r7, #4]
 800716c:	f000 fa26 	bl	80075bc <DMA_CalcBaseAndBitshift>
 8007170:	4603      	mov	r3, r0
 8007172:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007178:	223f      	movs	r2, #63	; 0x3f
 800717a:	409a      	lsls	r2, r3
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	2200      	movs	r2, #0
 8007184:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	2201      	movs	r2, #1
 800718a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800718e:	2300      	movs	r3, #0
}
 8007190:	4618      	mov	r0, r3
 8007192:	3718      	adds	r7, #24
 8007194:	46bd      	mov	sp, r7
 8007196:	bd80      	pop	{r7, pc}
 8007198:	f010803f 	.word	0xf010803f

0800719c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800719c:	b580      	push	{r7, lr}
 800719e:	b086      	sub	sp, #24
 80071a0:	af00      	add	r7, sp, #0
 80071a2:	60f8      	str	r0, [r7, #12]
 80071a4:	60b9      	str	r1, [r7, #8]
 80071a6:	607a      	str	r2, [r7, #4]
 80071a8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80071aa:	2300      	movs	r3, #0
 80071ac:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80071b2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80071ba:	2b01      	cmp	r3, #1
 80071bc:	d101      	bne.n	80071c2 <HAL_DMA_Start_IT+0x26>
 80071be:	2302      	movs	r3, #2
 80071c0:	e040      	b.n	8007244 <HAL_DMA_Start_IT+0xa8>
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	2201      	movs	r2, #1
 80071c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80071d0:	b2db      	uxtb	r3, r3
 80071d2:	2b01      	cmp	r3, #1
 80071d4:	d12f      	bne.n	8007236 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	2202      	movs	r2, #2
 80071da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	2200      	movs	r2, #0
 80071e2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80071e4:	683b      	ldr	r3, [r7, #0]
 80071e6:	687a      	ldr	r2, [r7, #4]
 80071e8:	68b9      	ldr	r1, [r7, #8]
 80071ea:	68f8      	ldr	r0, [r7, #12]
 80071ec:	f000 f9b8 	bl	8007560 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80071f4:	223f      	movs	r2, #63	; 0x3f
 80071f6:	409a      	lsls	r2, r3
 80071f8:	693b      	ldr	r3, [r7, #16]
 80071fa:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	681a      	ldr	r2, [r3, #0]
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	f042 0216 	orr.w	r2, r2, #22
 800720a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007210:	2b00      	cmp	r3, #0
 8007212:	d007      	beq.n	8007224 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	681a      	ldr	r2, [r3, #0]
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	f042 0208 	orr.w	r2, r2, #8
 8007222:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	681a      	ldr	r2, [r3, #0]
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	f042 0201 	orr.w	r2, r2, #1
 8007232:	601a      	str	r2, [r3, #0]
 8007234:	e005      	b.n	8007242 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	2200      	movs	r2, #0
 800723a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800723e:	2302      	movs	r3, #2
 8007240:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8007242:	7dfb      	ldrb	r3, [r7, #23]
}
 8007244:	4618      	mov	r0, r3
 8007246:	3718      	adds	r7, #24
 8007248:	46bd      	mov	sp, r7
 800724a:	bd80      	pop	{r7, pc}

0800724c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800724c:	b580      	push	{r7, lr}
 800724e:	b086      	sub	sp, #24
 8007250:	af00      	add	r7, sp, #0
 8007252:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8007254:	2300      	movs	r3, #0
 8007256:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8007258:	4b8e      	ldr	r3, [pc, #568]	; (8007494 <HAL_DMA_IRQHandler+0x248>)
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	4a8e      	ldr	r2, [pc, #568]	; (8007498 <HAL_DMA_IRQHandler+0x24c>)
 800725e:	fba2 2303 	umull	r2, r3, r2, r3
 8007262:	0a9b      	lsrs	r3, r3, #10
 8007264:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800726a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800726c:	693b      	ldr	r3, [r7, #16]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007276:	2208      	movs	r2, #8
 8007278:	409a      	lsls	r2, r3
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	4013      	ands	r3, r2
 800727e:	2b00      	cmp	r3, #0
 8007280:	d01a      	beq.n	80072b8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	f003 0304 	and.w	r3, r3, #4
 800728c:	2b00      	cmp	r3, #0
 800728e:	d013      	beq.n	80072b8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	681a      	ldr	r2, [r3, #0]
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	f022 0204 	bic.w	r2, r2, #4
 800729e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80072a4:	2208      	movs	r2, #8
 80072a6:	409a      	lsls	r2, r3
 80072a8:	693b      	ldr	r3, [r7, #16]
 80072aa:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80072b0:	f043 0201 	orr.w	r2, r3, #1
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80072bc:	2201      	movs	r2, #1
 80072be:	409a      	lsls	r2, r3
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	4013      	ands	r3, r2
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	d012      	beq.n	80072ee <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	695b      	ldr	r3, [r3, #20]
 80072ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	d00b      	beq.n	80072ee <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80072da:	2201      	movs	r2, #1
 80072dc:	409a      	lsls	r2, r3
 80072de:	693b      	ldr	r3, [r7, #16]
 80072e0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80072e6:	f043 0202 	orr.w	r2, r3, #2
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80072f2:	2204      	movs	r2, #4
 80072f4:	409a      	lsls	r2, r3
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	4013      	ands	r3, r2
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d012      	beq.n	8007324 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	f003 0302 	and.w	r3, r3, #2
 8007308:	2b00      	cmp	r3, #0
 800730a:	d00b      	beq.n	8007324 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007310:	2204      	movs	r2, #4
 8007312:	409a      	lsls	r2, r3
 8007314:	693b      	ldr	r3, [r7, #16]
 8007316:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800731c:	f043 0204 	orr.w	r2, r3, #4
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007328:	2210      	movs	r2, #16
 800732a:	409a      	lsls	r2, r3
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	4013      	ands	r3, r2
 8007330:	2b00      	cmp	r3, #0
 8007332:	d043      	beq.n	80073bc <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	f003 0308 	and.w	r3, r3, #8
 800733e:	2b00      	cmp	r3, #0
 8007340:	d03c      	beq.n	80073bc <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007346:	2210      	movs	r2, #16
 8007348:	409a      	lsls	r2, r3
 800734a:	693b      	ldr	r3, [r7, #16]
 800734c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007358:	2b00      	cmp	r3, #0
 800735a:	d018      	beq.n	800738e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007366:	2b00      	cmp	r3, #0
 8007368:	d108      	bne.n	800737c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800736e:	2b00      	cmp	r3, #0
 8007370:	d024      	beq.n	80073bc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007376:	6878      	ldr	r0, [r7, #4]
 8007378:	4798      	blx	r3
 800737a:	e01f      	b.n	80073bc <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007380:	2b00      	cmp	r3, #0
 8007382:	d01b      	beq.n	80073bc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007388:	6878      	ldr	r0, [r7, #4]
 800738a:	4798      	blx	r3
 800738c:	e016      	b.n	80073bc <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007398:	2b00      	cmp	r3, #0
 800739a:	d107      	bne.n	80073ac <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	681a      	ldr	r2, [r3, #0]
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	f022 0208 	bic.w	r2, r2, #8
 80073aa:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	d003      	beq.n	80073bc <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073b8:	6878      	ldr	r0, [r7, #4]
 80073ba:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80073c0:	2220      	movs	r2, #32
 80073c2:	409a      	lsls	r2, r3
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	4013      	ands	r3, r2
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	f000 808f 	beq.w	80074ec <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	f003 0310 	and.w	r3, r3, #16
 80073d8:	2b00      	cmp	r3, #0
 80073da:	f000 8087 	beq.w	80074ec <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80073e2:	2220      	movs	r2, #32
 80073e4:	409a      	lsls	r2, r3
 80073e6:	693b      	ldr	r3, [r7, #16]
 80073e8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80073f0:	b2db      	uxtb	r3, r3
 80073f2:	2b05      	cmp	r3, #5
 80073f4:	d136      	bne.n	8007464 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	681a      	ldr	r2, [r3, #0]
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	f022 0216 	bic.w	r2, r2, #22
 8007404:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	695a      	ldr	r2, [r3, #20]
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007414:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800741a:	2b00      	cmp	r3, #0
 800741c:	d103      	bne.n	8007426 <HAL_DMA_IRQHandler+0x1da>
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007422:	2b00      	cmp	r3, #0
 8007424:	d007      	beq.n	8007436 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	681a      	ldr	r2, [r3, #0]
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	f022 0208 	bic.w	r2, r2, #8
 8007434:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800743a:	223f      	movs	r2, #63	; 0x3f
 800743c:	409a      	lsls	r2, r3
 800743e:	693b      	ldr	r3, [r7, #16]
 8007440:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	2201      	movs	r2, #1
 8007446:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	2200      	movs	r2, #0
 800744e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007456:	2b00      	cmp	r3, #0
 8007458:	d07e      	beq.n	8007558 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800745e:	6878      	ldr	r0, [r7, #4]
 8007460:	4798      	blx	r3
        }
        return;
 8007462:	e079      	b.n	8007558 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800746e:	2b00      	cmp	r3, #0
 8007470:	d01d      	beq.n	80074ae <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800747c:	2b00      	cmp	r3, #0
 800747e:	d10d      	bne.n	800749c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007484:	2b00      	cmp	r3, #0
 8007486:	d031      	beq.n	80074ec <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800748c:	6878      	ldr	r0, [r7, #4]
 800748e:	4798      	blx	r3
 8007490:	e02c      	b.n	80074ec <HAL_DMA_IRQHandler+0x2a0>
 8007492:	bf00      	nop
 8007494:	20000028 	.word	0x20000028
 8007498:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80074a0:	2b00      	cmp	r3, #0
 80074a2:	d023      	beq.n	80074ec <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80074a8:	6878      	ldr	r0, [r7, #4]
 80074aa:	4798      	blx	r3
 80074ac:	e01e      	b.n	80074ec <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	d10f      	bne.n	80074dc <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	681a      	ldr	r2, [r3, #0]
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	f022 0210 	bic.w	r2, r2, #16
 80074ca:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	2201      	movs	r2, #1
 80074d0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	2200      	movs	r2, #0
 80074d8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	d003      	beq.n	80074ec <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80074e8:	6878      	ldr	r0, [r7, #4]
 80074ea:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	d032      	beq.n	800755a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80074f8:	f003 0301 	and.w	r3, r3, #1
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	d022      	beq.n	8007546 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	2205      	movs	r2, #5
 8007504:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	681a      	ldr	r2, [r3, #0]
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	f022 0201 	bic.w	r2, r2, #1
 8007516:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8007518:	68bb      	ldr	r3, [r7, #8]
 800751a:	3301      	adds	r3, #1
 800751c:	60bb      	str	r3, [r7, #8]
 800751e:	697a      	ldr	r2, [r7, #20]
 8007520:	429a      	cmp	r2, r3
 8007522:	d307      	bcc.n	8007534 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	f003 0301 	and.w	r3, r3, #1
 800752e:	2b00      	cmp	r3, #0
 8007530:	d1f2      	bne.n	8007518 <HAL_DMA_IRQHandler+0x2cc>
 8007532:	e000      	b.n	8007536 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8007534:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	2201      	movs	r2, #1
 800753a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	2200      	movs	r2, #0
 8007542:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800754a:	2b00      	cmp	r3, #0
 800754c:	d005      	beq.n	800755a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007552:	6878      	ldr	r0, [r7, #4]
 8007554:	4798      	blx	r3
 8007556:	e000      	b.n	800755a <HAL_DMA_IRQHandler+0x30e>
        return;
 8007558:	bf00      	nop
    }
  }
}
 800755a:	3718      	adds	r7, #24
 800755c:	46bd      	mov	sp, r7
 800755e:	bd80      	pop	{r7, pc}

08007560 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007560:	b480      	push	{r7}
 8007562:	b085      	sub	sp, #20
 8007564:	af00      	add	r7, sp, #0
 8007566:	60f8      	str	r0, [r7, #12]
 8007568:	60b9      	str	r1, [r7, #8]
 800756a:	607a      	str	r2, [r7, #4]
 800756c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	681a      	ldr	r2, [r3, #0]
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800757c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	683a      	ldr	r2, [r7, #0]
 8007584:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8007586:	68fb      	ldr	r3, [r7, #12]
 8007588:	689b      	ldr	r3, [r3, #8]
 800758a:	2b40      	cmp	r3, #64	; 0x40
 800758c:	d108      	bne.n	80075a0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	687a      	ldr	r2, [r7, #4]
 8007594:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	68ba      	ldr	r2, [r7, #8]
 800759c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800759e:	e007      	b.n	80075b0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	68ba      	ldr	r2, [r7, #8]
 80075a6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	687a      	ldr	r2, [r7, #4]
 80075ae:	60da      	str	r2, [r3, #12]
}
 80075b0:	bf00      	nop
 80075b2:	3714      	adds	r7, #20
 80075b4:	46bd      	mov	sp, r7
 80075b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ba:	4770      	bx	lr

080075bc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80075bc:	b480      	push	{r7}
 80075be:	b085      	sub	sp, #20
 80075c0:	af00      	add	r7, sp, #0
 80075c2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	b2db      	uxtb	r3, r3
 80075ca:	3b10      	subs	r3, #16
 80075cc:	4a14      	ldr	r2, [pc, #80]	; (8007620 <DMA_CalcBaseAndBitshift+0x64>)
 80075ce:	fba2 2303 	umull	r2, r3, r2, r3
 80075d2:	091b      	lsrs	r3, r3, #4
 80075d4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80075d6:	4a13      	ldr	r2, [pc, #76]	; (8007624 <DMA_CalcBaseAndBitshift+0x68>)
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	4413      	add	r3, r2
 80075dc:	781b      	ldrb	r3, [r3, #0]
 80075de:	461a      	mov	r2, r3
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	2b03      	cmp	r3, #3
 80075e8:	d909      	bls.n	80075fe <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80075f2:	f023 0303 	bic.w	r3, r3, #3
 80075f6:	1d1a      	adds	r2, r3, #4
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	659a      	str	r2, [r3, #88]	; 0x58
 80075fc:	e007      	b.n	800760e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8007606:	f023 0303 	bic.w	r3, r3, #3
 800760a:	687a      	ldr	r2, [r7, #4]
 800760c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8007612:	4618      	mov	r0, r3
 8007614:	3714      	adds	r7, #20
 8007616:	46bd      	mov	sp, r7
 8007618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800761c:	4770      	bx	lr
 800761e:	bf00      	nop
 8007620:	aaaaaaab 	.word	0xaaaaaaab
 8007624:	0801494c 	.word	0x0801494c

08007628 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8007628:	b480      	push	{r7}
 800762a:	b085      	sub	sp, #20
 800762c:	af00      	add	r7, sp, #0
 800762e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007630:	2300      	movs	r3, #0
 8007632:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007638:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	699b      	ldr	r3, [r3, #24]
 800763e:	2b00      	cmp	r3, #0
 8007640:	d11f      	bne.n	8007682 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8007642:	68bb      	ldr	r3, [r7, #8]
 8007644:	2b03      	cmp	r3, #3
 8007646:	d856      	bhi.n	80076f6 <DMA_CheckFifoParam+0xce>
 8007648:	a201      	add	r2, pc, #4	; (adr r2, 8007650 <DMA_CheckFifoParam+0x28>)
 800764a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800764e:	bf00      	nop
 8007650:	08007661 	.word	0x08007661
 8007654:	08007673 	.word	0x08007673
 8007658:	08007661 	.word	0x08007661
 800765c:	080076f7 	.word	0x080076f7
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007664:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007668:	2b00      	cmp	r3, #0
 800766a:	d046      	beq.n	80076fa <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800766c:	2301      	movs	r3, #1
 800766e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007670:	e043      	b.n	80076fa <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007676:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800767a:	d140      	bne.n	80076fe <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800767c:	2301      	movs	r3, #1
 800767e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007680:	e03d      	b.n	80076fe <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	699b      	ldr	r3, [r3, #24]
 8007686:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800768a:	d121      	bne.n	80076d0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800768c:	68bb      	ldr	r3, [r7, #8]
 800768e:	2b03      	cmp	r3, #3
 8007690:	d837      	bhi.n	8007702 <DMA_CheckFifoParam+0xda>
 8007692:	a201      	add	r2, pc, #4	; (adr r2, 8007698 <DMA_CheckFifoParam+0x70>)
 8007694:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007698:	080076a9 	.word	0x080076a9
 800769c:	080076af 	.word	0x080076af
 80076a0:	080076a9 	.word	0x080076a9
 80076a4:	080076c1 	.word	0x080076c1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80076a8:	2301      	movs	r3, #1
 80076aa:	73fb      	strb	r3, [r7, #15]
      break;
 80076ac:	e030      	b.n	8007710 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076b2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	d025      	beq.n	8007706 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80076ba:	2301      	movs	r3, #1
 80076bc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80076be:	e022      	b.n	8007706 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076c4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80076c8:	d11f      	bne.n	800770a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80076ca:	2301      	movs	r3, #1
 80076cc:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80076ce:	e01c      	b.n	800770a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80076d0:	68bb      	ldr	r3, [r7, #8]
 80076d2:	2b02      	cmp	r3, #2
 80076d4:	d903      	bls.n	80076de <DMA_CheckFifoParam+0xb6>
 80076d6:	68bb      	ldr	r3, [r7, #8]
 80076d8:	2b03      	cmp	r3, #3
 80076da:	d003      	beq.n	80076e4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80076dc:	e018      	b.n	8007710 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80076de:	2301      	movs	r3, #1
 80076e0:	73fb      	strb	r3, [r7, #15]
      break;
 80076e2:	e015      	b.n	8007710 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076e8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	d00e      	beq.n	800770e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80076f0:	2301      	movs	r3, #1
 80076f2:	73fb      	strb	r3, [r7, #15]
      break;
 80076f4:	e00b      	b.n	800770e <DMA_CheckFifoParam+0xe6>
      break;
 80076f6:	bf00      	nop
 80076f8:	e00a      	b.n	8007710 <DMA_CheckFifoParam+0xe8>
      break;
 80076fa:	bf00      	nop
 80076fc:	e008      	b.n	8007710 <DMA_CheckFifoParam+0xe8>
      break;
 80076fe:	bf00      	nop
 8007700:	e006      	b.n	8007710 <DMA_CheckFifoParam+0xe8>
      break;
 8007702:	bf00      	nop
 8007704:	e004      	b.n	8007710 <DMA_CheckFifoParam+0xe8>
      break;
 8007706:	bf00      	nop
 8007708:	e002      	b.n	8007710 <DMA_CheckFifoParam+0xe8>
      break;   
 800770a:	bf00      	nop
 800770c:	e000      	b.n	8007710 <DMA_CheckFifoParam+0xe8>
      break;
 800770e:	bf00      	nop
    }
  } 
  
  return status; 
 8007710:	7bfb      	ldrb	r3, [r7, #15]
}
 8007712:	4618      	mov	r0, r3
 8007714:	3714      	adds	r7, #20
 8007716:	46bd      	mov	sp, r7
 8007718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800771c:	4770      	bx	lr
 800771e:	bf00      	nop

08007720 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007720:	b480      	push	{r7}
 8007722:	b089      	sub	sp, #36	; 0x24
 8007724:	af00      	add	r7, sp, #0
 8007726:	6078      	str	r0, [r7, #4]
 8007728:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800772a:	2300      	movs	r3, #0
 800772c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800772e:	2300      	movs	r3, #0
 8007730:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8007732:	2300      	movs	r3, #0
 8007734:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8007736:	2300      	movs	r3, #0
 8007738:	61fb      	str	r3, [r7, #28]
 800773a:	e165      	b.n	8007a08 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800773c:	2201      	movs	r2, #1
 800773e:	69fb      	ldr	r3, [r7, #28]
 8007740:	fa02 f303 	lsl.w	r3, r2, r3
 8007744:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8007746:	683b      	ldr	r3, [r7, #0]
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	697a      	ldr	r2, [r7, #20]
 800774c:	4013      	ands	r3, r2
 800774e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8007750:	693a      	ldr	r2, [r7, #16]
 8007752:	697b      	ldr	r3, [r7, #20]
 8007754:	429a      	cmp	r2, r3
 8007756:	f040 8154 	bne.w	8007a02 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800775a:	683b      	ldr	r3, [r7, #0]
 800775c:	685b      	ldr	r3, [r3, #4]
 800775e:	f003 0303 	and.w	r3, r3, #3
 8007762:	2b01      	cmp	r3, #1
 8007764:	d005      	beq.n	8007772 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007766:	683b      	ldr	r3, [r7, #0]
 8007768:	685b      	ldr	r3, [r3, #4]
 800776a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800776e:	2b02      	cmp	r3, #2
 8007770:	d130      	bne.n	80077d4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	689b      	ldr	r3, [r3, #8]
 8007776:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8007778:	69fb      	ldr	r3, [r7, #28]
 800777a:	005b      	lsls	r3, r3, #1
 800777c:	2203      	movs	r2, #3
 800777e:	fa02 f303 	lsl.w	r3, r2, r3
 8007782:	43db      	mvns	r3, r3
 8007784:	69ba      	ldr	r2, [r7, #24]
 8007786:	4013      	ands	r3, r2
 8007788:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800778a:	683b      	ldr	r3, [r7, #0]
 800778c:	68da      	ldr	r2, [r3, #12]
 800778e:	69fb      	ldr	r3, [r7, #28]
 8007790:	005b      	lsls	r3, r3, #1
 8007792:	fa02 f303 	lsl.w	r3, r2, r3
 8007796:	69ba      	ldr	r2, [r7, #24]
 8007798:	4313      	orrs	r3, r2
 800779a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	69ba      	ldr	r2, [r7, #24]
 80077a0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	685b      	ldr	r3, [r3, #4]
 80077a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80077a8:	2201      	movs	r2, #1
 80077aa:	69fb      	ldr	r3, [r7, #28]
 80077ac:	fa02 f303 	lsl.w	r3, r2, r3
 80077b0:	43db      	mvns	r3, r3
 80077b2:	69ba      	ldr	r2, [r7, #24]
 80077b4:	4013      	ands	r3, r2
 80077b6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80077b8:	683b      	ldr	r3, [r7, #0]
 80077ba:	685b      	ldr	r3, [r3, #4]
 80077bc:	091b      	lsrs	r3, r3, #4
 80077be:	f003 0201 	and.w	r2, r3, #1
 80077c2:	69fb      	ldr	r3, [r7, #28]
 80077c4:	fa02 f303 	lsl.w	r3, r2, r3
 80077c8:	69ba      	ldr	r2, [r7, #24]
 80077ca:	4313      	orrs	r3, r2
 80077cc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	69ba      	ldr	r2, [r7, #24]
 80077d2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80077d4:	683b      	ldr	r3, [r7, #0]
 80077d6:	685b      	ldr	r3, [r3, #4]
 80077d8:	f003 0303 	and.w	r3, r3, #3
 80077dc:	2b03      	cmp	r3, #3
 80077de:	d017      	beq.n	8007810 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	68db      	ldr	r3, [r3, #12]
 80077e4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80077e6:	69fb      	ldr	r3, [r7, #28]
 80077e8:	005b      	lsls	r3, r3, #1
 80077ea:	2203      	movs	r2, #3
 80077ec:	fa02 f303 	lsl.w	r3, r2, r3
 80077f0:	43db      	mvns	r3, r3
 80077f2:	69ba      	ldr	r2, [r7, #24]
 80077f4:	4013      	ands	r3, r2
 80077f6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80077f8:	683b      	ldr	r3, [r7, #0]
 80077fa:	689a      	ldr	r2, [r3, #8]
 80077fc:	69fb      	ldr	r3, [r7, #28]
 80077fe:	005b      	lsls	r3, r3, #1
 8007800:	fa02 f303 	lsl.w	r3, r2, r3
 8007804:	69ba      	ldr	r2, [r7, #24]
 8007806:	4313      	orrs	r3, r2
 8007808:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	69ba      	ldr	r2, [r7, #24]
 800780e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007810:	683b      	ldr	r3, [r7, #0]
 8007812:	685b      	ldr	r3, [r3, #4]
 8007814:	f003 0303 	and.w	r3, r3, #3
 8007818:	2b02      	cmp	r3, #2
 800781a:	d123      	bne.n	8007864 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800781c:	69fb      	ldr	r3, [r7, #28]
 800781e:	08da      	lsrs	r2, r3, #3
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	3208      	adds	r2, #8
 8007824:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007828:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800782a:	69fb      	ldr	r3, [r7, #28]
 800782c:	f003 0307 	and.w	r3, r3, #7
 8007830:	009b      	lsls	r3, r3, #2
 8007832:	220f      	movs	r2, #15
 8007834:	fa02 f303 	lsl.w	r3, r2, r3
 8007838:	43db      	mvns	r3, r3
 800783a:	69ba      	ldr	r2, [r7, #24]
 800783c:	4013      	ands	r3, r2
 800783e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8007840:	683b      	ldr	r3, [r7, #0]
 8007842:	691a      	ldr	r2, [r3, #16]
 8007844:	69fb      	ldr	r3, [r7, #28]
 8007846:	f003 0307 	and.w	r3, r3, #7
 800784a:	009b      	lsls	r3, r3, #2
 800784c:	fa02 f303 	lsl.w	r3, r2, r3
 8007850:	69ba      	ldr	r2, [r7, #24]
 8007852:	4313      	orrs	r3, r2
 8007854:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8007856:	69fb      	ldr	r3, [r7, #28]
 8007858:	08da      	lsrs	r2, r3, #3
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	3208      	adds	r2, #8
 800785e:	69b9      	ldr	r1, [r7, #24]
 8007860:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800786a:	69fb      	ldr	r3, [r7, #28]
 800786c:	005b      	lsls	r3, r3, #1
 800786e:	2203      	movs	r2, #3
 8007870:	fa02 f303 	lsl.w	r3, r2, r3
 8007874:	43db      	mvns	r3, r3
 8007876:	69ba      	ldr	r2, [r7, #24]
 8007878:	4013      	ands	r3, r2
 800787a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800787c:	683b      	ldr	r3, [r7, #0]
 800787e:	685b      	ldr	r3, [r3, #4]
 8007880:	f003 0203 	and.w	r2, r3, #3
 8007884:	69fb      	ldr	r3, [r7, #28]
 8007886:	005b      	lsls	r3, r3, #1
 8007888:	fa02 f303 	lsl.w	r3, r2, r3
 800788c:	69ba      	ldr	r2, [r7, #24]
 800788e:	4313      	orrs	r3, r2
 8007890:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	69ba      	ldr	r2, [r7, #24]
 8007896:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8007898:	683b      	ldr	r3, [r7, #0]
 800789a:	685b      	ldr	r3, [r3, #4]
 800789c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80078a0:	2b00      	cmp	r3, #0
 80078a2:	f000 80ae 	beq.w	8007a02 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80078a6:	2300      	movs	r3, #0
 80078a8:	60fb      	str	r3, [r7, #12]
 80078aa:	4b5d      	ldr	r3, [pc, #372]	; (8007a20 <HAL_GPIO_Init+0x300>)
 80078ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80078ae:	4a5c      	ldr	r2, [pc, #368]	; (8007a20 <HAL_GPIO_Init+0x300>)
 80078b0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80078b4:	6453      	str	r3, [r2, #68]	; 0x44
 80078b6:	4b5a      	ldr	r3, [pc, #360]	; (8007a20 <HAL_GPIO_Init+0x300>)
 80078b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80078ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80078be:	60fb      	str	r3, [r7, #12]
 80078c0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80078c2:	4a58      	ldr	r2, [pc, #352]	; (8007a24 <HAL_GPIO_Init+0x304>)
 80078c4:	69fb      	ldr	r3, [r7, #28]
 80078c6:	089b      	lsrs	r3, r3, #2
 80078c8:	3302      	adds	r3, #2
 80078ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80078ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80078d0:	69fb      	ldr	r3, [r7, #28]
 80078d2:	f003 0303 	and.w	r3, r3, #3
 80078d6:	009b      	lsls	r3, r3, #2
 80078d8:	220f      	movs	r2, #15
 80078da:	fa02 f303 	lsl.w	r3, r2, r3
 80078de:	43db      	mvns	r3, r3
 80078e0:	69ba      	ldr	r2, [r7, #24]
 80078e2:	4013      	ands	r3, r2
 80078e4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	4a4f      	ldr	r2, [pc, #316]	; (8007a28 <HAL_GPIO_Init+0x308>)
 80078ea:	4293      	cmp	r3, r2
 80078ec:	d025      	beq.n	800793a <HAL_GPIO_Init+0x21a>
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	4a4e      	ldr	r2, [pc, #312]	; (8007a2c <HAL_GPIO_Init+0x30c>)
 80078f2:	4293      	cmp	r3, r2
 80078f4:	d01f      	beq.n	8007936 <HAL_GPIO_Init+0x216>
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	4a4d      	ldr	r2, [pc, #308]	; (8007a30 <HAL_GPIO_Init+0x310>)
 80078fa:	4293      	cmp	r3, r2
 80078fc:	d019      	beq.n	8007932 <HAL_GPIO_Init+0x212>
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	4a4c      	ldr	r2, [pc, #304]	; (8007a34 <HAL_GPIO_Init+0x314>)
 8007902:	4293      	cmp	r3, r2
 8007904:	d013      	beq.n	800792e <HAL_GPIO_Init+0x20e>
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	4a4b      	ldr	r2, [pc, #300]	; (8007a38 <HAL_GPIO_Init+0x318>)
 800790a:	4293      	cmp	r3, r2
 800790c:	d00d      	beq.n	800792a <HAL_GPIO_Init+0x20a>
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	4a4a      	ldr	r2, [pc, #296]	; (8007a3c <HAL_GPIO_Init+0x31c>)
 8007912:	4293      	cmp	r3, r2
 8007914:	d007      	beq.n	8007926 <HAL_GPIO_Init+0x206>
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	4a49      	ldr	r2, [pc, #292]	; (8007a40 <HAL_GPIO_Init+0x320>)
 800791a:	4293      	cmp	r3, r2
 800791c:	d101      	bne.n	8007922 <HAL_GPIO_Init+0x202>
 800791e:	2306      	movs	r3, #6
 8007920:	e00c      	b.n	800793c <HAL_GPIO_Init+0x21c>
 8007922:	2307      	movs	r3, #7
 8007924:	e00a      	b.n	800793c <HAL_GPIO_Init+0x21c>
 8007926:	2305      	movs	r3, #5
 8007928:	e008      	b.n	800793c <HAL_GPIO_Init+0x21c>
 800792a:	2304      	movs	r3, #4
 800792c:	e006      	b.n	800793c <HAL_GPIO_Init+0x21c>
 800792e:	2303      	movs	r3, #3
 8007930:	e004      	b.n	800793c <HAL_GPIO_Init+0x21c>
 8007932:	2302      	movs	r3, #2
 8007934:	e002      	b.n	800793c <HAL_GPIO_Init+0x21c>
 8007936:	2301      	movs	r3, #1
 8007938:	e000      	b.n	800793c <HAL_GPIO_Init+0x21c>
 800793a:	2300      	movs	r3, #0
 800793c:	69fa      	ldr	r2, [r7, #28]
 800793e:	f002 0203 	and.w	r2, r2, #3
 8007942:	0092      	lsls	r2, r2, #2
 8007944:	4093      	lsls	r3, r2
 8007946:	69ba      	ldr	r2, [r7, #24]
 8007948:	4313      	orrs	r3, r2
 800794a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800794c:	4935      	ldr	r1, [pc, #212]	; (8007a24 <HAL_GPIO_Init+0x304>)
 800794e:	69fb      	ldr	r3, [r7, #28]
 8007950:	089b      	lsrs	r3, r3, #2
 8007952:	3302      	adds	r3, #2
 8007954:	69ba      	ldr	r2, [r7, #24]
 8007956:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800795a:	4b3a      	ldr	r3, [pc, #232]	; (8007a44 <HAL_GPIO_Init+0x324>)
 800795c:	689b      	ldr	r3, [r3, #8]
 800795e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007960:	693b      	ldr	r3, [r7, #16]
 8007962:	43db      	mvns	r3, r3
 8007964:	69ba      	ldr	r2, [r7, #24]
 8007966:	4013      	ands	r3, r2
 8007968:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800796a:	683b      	ldr	r3, [r7, #0]
 800796c:	685b      	ldr	r3, [r3, #4]
 800796e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007972:	2b00      	cmp	r3, #0
 8007974:	d003      	beq.n	800797e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8007976:	69ba      	ldr	r2, [r7, #24]
 8007978:	693b      	ldr	r3, [r7, #16]
 800797a:	4313      	orrs	r3, r2
 800797c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800797e:	4a31      	ldr	r2, [pc, #196]	; (8007a44 <HAL_GPIO_Init+0x324>)
 8007980:	69bb      	ldr	r3, [r7, #24]
 8007982:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8007984:	4b2f      	ldr	r3, [pc, #188]	; (8007a44 <HAL_GPIO_Init+0x324>)
 8007986:	68db      	ldr	r3, [r3, #12]
 8007988:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800798a:	693b      	ldr	r3, [r7, #16]
 800798c:	43db      	mvns	r3, r3
 800798e:	69ba      	ldr	r2, [r7, #24]
 8007990:	4013      	ands	r3, r2
 8007992:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8007994:	683b      	ldr	r3, [r7, #0]
 8007996:	685b      	ldr	r3, [r3, #4]
 8007998:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800799c:	2b00      	cmp	r3, #0
 800799e:	d003      	beq.n	80079a8 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80079a0:	69ba      	ldr	r2, [r7, #24]
 80079a2:	693b      	ldr	r3, [r7, #16]
 80079a4:	4313      	orrs	r3, r2
 80079a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80079a8:	4a26      	ldr	r2, [pc, #152]	; (8007a44 <HAL_GPIO_Init+0x324>)
 80079aa:	69bb      	ldr	r3, [r7, #24]
 80079ac:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80079ae:	4b25      	ldr	r3, [pc, #148]	; (8007a44 <HAL_GPIO_Init+0x324>)
 80079b0:	685b      	ldr	r3, [r3, #4]
 80079b2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80079b4:	693b      	ldr	r3, [r7, #16]
 80079b6:	43db      	mvns	r3, r3
 80079b8:	69ba      	ldr	r2, [r7, #24]
 80079ba:	4013      	ands	r3, r2
 80079bc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80079be:	683b      	ldr	r3, [r7, #0]
 80079c0:	685b      	ldr	r3, [r3, #4]
 80079c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	d003      	beq.n	80079d2 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80079ca:	69ba      	ldr	r2, [r7, #24]
 80079cc:	693b      	ldr	r3, [r7, #16]
 80079ce:	4313      	orrs	r3, r2
 80079d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80079d2:	4a1c      	ldr	r2, [pc, #112]	; (8007a44 <HAL_GPIO_Init+0x324>)
 80079d4:	69bb      	ldr	r3, [r7, #24]
 80079d6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80079d8:	4b1a      	ldr	r3, [pc, #104]	; (8007a44 <HAL_GPIO_Init+0x324>)
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80079de:	693b      	ldr	r3, [r7, #16]
 80079e0:	43db      	mvns	r3, r3
 80079e2:	69ba      	ldr	r2, [r7, #24]
 80079e4:	4013      	ands	r3, r2
 80079e6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80079e8:	683b      	ldr	r3, [r7, #0]
 80079ea:	685b      	ldr	r3, [r3, #4]
 80079ec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80079f0:	2b00      	cmp	r3, #0
 80079f2:	d003      	beq.n	80079fc <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80079f4:	69ba      	ldr	r2, [r7, #24]
 80079f6:	693b      	ldr	r3, [r7, #16]
 80079f8:	4313      	orrs	r3, r2
 80079fa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80079fc:	4a11      	ldr	r2, [pc, #68]	; (8007a44 <HAL_GPIO_Init+0x324>)
 80079fe:	69bb      	ldr	r3, [r7, #24]
 8007a00:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8007a02:	69fb      	ldr	r3, [r7, #28]
 8007a04:	3301      	adds	r3, #1
 8007a06:	61fb      	str	r3, [r7, #28]
 8007a08:	69fb      	ldr	r3, [r7, #28]
 8007a0a:	2b0f      	cmp	r3, #15
 8007a0c:	f67f ae96 	bls.w	800773c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8007a10:	bf00      	nop
 8007a12:	bf00      	nop
 8007a14:	3724      	adds	r7, #36	; 0x24
 8007a16:	46bd      	mov	sp, r7
 8007a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a1c:	4770      	bx	lr
 8007a1e:	bf00      	nop
 8007a20:	40023800 	.word	0x40023800
 8007a24:	40013800 	.word	0x40013800
 8007a28:	40020000 	.word	0x40020000
 8007a2c:	40020400 	.word	0x40020400
 8007a30:	40020800 	.word	0x40020800
 8007a34:	40020c00 	.word	0x40020c00
 8007a38:	40021000 	.word	0x40021000
 8007a3c:	40021400 	.word	0x40021400
 8007a40:	40021800 	.word	0x40021800
 8007a44:	40013c00 	.word	0x40013c00

08007a48 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8007a48:	b480      	push	{r7}
 8007a4a:	b087      	sub	sp, #28
 8007a4c:	af00      	add	r7, sp, #0
 8007a4e:	6078      	str	r0, [r7, #4]
 8007a50:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8007a52:	2300      	movs	r3, #0
 8007a54:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 8007a56:	2300      	movs	r3, #0
 8007a58:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 8007a5a:	2300      	movs	r3, #0
 8007a5c:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8007a5e:	2300      	movs	r3, #0
 8007a60:	617b      	str	r3, [r7, #20]
 8007a62:	e0c7      	b.n	8007bf4 <HAL_GPIO_DeInit+0x1ac>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8007a64:	2201      	movs	r2, #1
 8007a66:	697b      	ldr	r3, [r7, #20]
 8007a68:	fa02 f303 	lsl.w	r3, r2, r3
 8007a6c:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8007a6e:	683a      	ldr	r2, [r7, #0]
 8007a70:	693b      	ldr	r3, [r7, #16]
 8007a72:	4013      	ands	r3, r2
 8007a74:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8007a76:	68fa      	ldr	r2, [r7, #12]
 8007a78:	693b      	ldr	r3, [r7, #16]
 8007a7a:	429a      	cmp	r2, r3
 8007a7c:	f040 80b7 	bne.w	8007bee <HAL_GPIO_DeInit+0x1a6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8007a80:	4a62      	ldr	r2, [pc, #392]	; (8007c0c <HAL_GPIO_DeInit+0x1c4>)
 8007a82:	697b      	ldr	r3, [r7, #20]
 8007a84:	089b      	lsrs	r3, r3, #2
 8007a86:	3302      	adds	r3, #2
 8007a88:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007a8c:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8007a8e:	697b      	ldr	r3, [r7, #20]
 8007a90:	f003 0303 	and.w	r3, r3, #3
 8007a94:	009b      	lsls	r3, r3, #2
 8007a96:	220f      	movs	r2, #15
 8007a98:	fa02 f303 	lsl.w	r3, r2, r3
 8007a9c:	68ba      	ldr	r2, [r7, #8]
 8007a9e:	4013      	ands	r3, r2
 8007aa0:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	4a5a      	ldr	r2, [pc, #360]	; (8007c10 <HAL_GPIO_DeInit+0x1c8>)
 8007aa6:	4293      	cmp	r3, r2
 8007aa8:	d025      	beq.n	8007af6 <HAL_GPIO_DeInit+0xae>
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	4a59      	ldr	r2, [pc, #356]	; (8007c14 <HAL_GPIO_DeInit+0x1cc>)
 8007aae:	4293      	cmp	r3, r2
 8007ab0:	d01f      	beq.n	8007af2 <HAL_GPIO_DeInit+0xaa>
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	4a58      	ldr	r2, [pc, #352]	; (8007c18 <HAL_GPIO_DeInit+0x1d0>)
 8007ab6:	4293      	cmp	r3, r2
 8007ab8:	d019      	beq.n	8007aee <HAL_GPIO_DeInit+0xa6>
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	4a57      	ldr	r2, [pc, #348]	; (8007c1c <HAL_GPIO_DeInit+0x1d4>)
 8007abe:	4293      	cmp	r3, r2
 8007ac0:	d013      	beq.n	8007aea <HAL_GPIO_DeInit+0xa2>
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	4a56      	ldr	r2, [pc, #344]	; (8007c20 <HAL_GPIO_DeInit+0x1d8>)
 8007ac6:	4293      	cmp	r3, r2
 8007ac8:	d00d      	beq.n	8007ae6 <HAL_GPIO_DeInit+0x9e>
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	4a55      	ldr	r2, [pc, #340]	; (8007c24 <HAL_GPIO_DeInit+0x1dc>)
 8007ace:	4293      	cmp	r3, r2
 8007ad0:	d007      	beq.n	8007ae2 <HAL_GPIO_DeInit+0x9a>
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	4a54      	ldr	r2, [pc, #336]	; (8007c28 <HAL_GPIO_DeInit+0x1e0>)
 8007ad6:	4293      	cmp	r3, r2
 8007ad8:	d101      	bne.n	8007ade <HAL_GPIO_DeInit+0x96>
 8007ada:	2306      	movs	r3, #6
 8007adc:	e00c      	b.n	8007af8 <HAL_GPIO_DeInit+0xb0>
 8007ade:	2307      	movs	r3, #7
 8007ae0:	e00a      	b.n	8007af8 <HAL_GPIO_DeInit+0xb0>
 8007ae2:	2305      	movs	r3, #5
 8007ae4:	e008      	b.n	8007af8 <HAL_GPIO_DeInit+0xb0>
 8007ae6:	2304      	movs	r3, #4
 8007ae8:	e006      	b.n	8007af8 <HAL_GPIO_DeInit+0xb0>
 8007aea:	2303      	movs	r3, #3
 8007aec:	e004      	b.n	8007af8 <HAL_GPIO_DeInit+0xb0>
 8007aee:	2302      	movs	r3, #2
 8007af0:	e002      	b.n	8007af8 <HAL_GPIO_DeInit+0xb0>
 8007af2:	2301      	movs	r3, #1
 8007af4:	e000      	b.n	8007af8 <HAL_GPIO_DeInit+0xb0>
 8007af6:	2300      	movs	r3, #0
 8007af8:	697a      	ldr	r2, [r7, #20]
 8007afa:	f002 0203 	and.w	r2, r2, #3
 8007afe:	0092      	lsls	r2, r2, #2
 8007b00:	4093      	lsls	r3, r2
 8007b02:	68ba      	ldr	r2, [r7, #8]
 8007b04:	429a      	cmp	r2, r3
 8007b06:	d132      	bne.n	8007b6e <HAL_GPIO_DeInit+0x126>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8007b08:	4b48      	ldr	r3, [pc, #288]	; (8007c2c <HAL_GPIO_DeInit+0x1e4>)
 8007b0a:	681a      	ldr	r2, [r3, #0]
 8007b0c:	68fb      	ldr	r3, [r7, #12]
 8007b0e:	43db      	mvns	r3, r3
 8007b10:	4946      	ldr	r1, [pc, #280]	; (8007c2c <HAL_GPIO_DeInit+0x1e4>)
 8007b12:	4013      	ands	r3, r2
 8007b14:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8007b16:	4b45      	ldr	r3, [pc, #276]	; (8007c2c <HAL_GPIO_DeInit+0x1e4>)
 8007b18:	685a      	ldr	r2, [r3, #4]
 8007b1a:	68fb      	ldr	r3, [r7, #12]
 8007b1c:	43db      	mvns	r3, r3
 8007b1e:	4943      	ldr	r1, [pc, #268]	; (8007c2c <HAL_GPIO_DeInit+0x1e4>)
 8007b20:	4013      	ands	r3, r2
 8007b22:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8007b24:	4b41      	ldr	r3, [pc, #260]	; (8007c2c <HAL_GPIO_DeInit+0x1e4>)
 8007b26:	68da      	ldr	r2, [r3, #12]
 8007b28:	68fb      	ldr	r3, [r7, #12]
 8007b2a:	43db      	mvns	r3, r3
 8007b2c:	493f      	ldr	r1, [pc, #252]	; (8007c2c <HAL_GPIO_DeInit+0x1e4>)
 8007b2e:	4013      	ands	r3, r2
 8007b30:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8007b32:	4b3e      	ldr	r3, [pc, #248]	; (8007c2c <HAL_GPIO_DeInit+0x1e4>)
 8007b34:	689a      	ldr	r2, [r3, #8]
 8007b36:	68fb      	ldr	r3, [r7, #12]
 8007b38:	43db      	mvns	r3, r3
 8007b3a:	493c      	ldr	r1, [pc, #240]	; (8007c2c <HAL_GPIO_DeInit+0x1e4>)
 8007b3c:	4013      	ands	r3, r2
 8007b3e:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8007b40:	697b      	ldr	r3, [r7, #20]
 8007b42:	f003 0303 	and.w	r3, r3, #3
 8007b46:	009b      	lsls	r3, r3, #2
 8007b48:	220f      	movs	r2, #15
 8007b4a:	fa02 f303 	lsl.w	r3, r2, r3
 8007b4e:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8007b50:	4a2e      	ldr	r2, [pc, #184]	; (8007c0c <HAL_GPIO_DeInit+0x1c4>)
 8007b52:	697b      	ldr	r3, [r7, #20]
 8007b54:	089b      	lsrs	r3, r3, #2
 8007b56:	3302      	adds	r3, #2
 8007b58:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8007b5c:	68bb      	ldr	r3, [r7, #8]
 8007b5e:	43da      	mvns	r2, r3
 8007b60:	482a      	ldr	r0, [pc, #168]	; (8007c0c <HAL_GPIO_DeInit+0x1c4>)
 8007b62:	697b      	ldr	r3, [r7, #20]
 8007b64:	089b      	lsrs	r3, r3, #2
 8007b66:	400a      	ands	r2, r1
 8007b68:	3302      	adds	r3, #2
 8007b6a:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	681a      	ldr	r2, [r3, #0]
 8007b72:	697b      	ldr	r3, [r7, #20]
 8007b74:	005b      	lsls	r3, r3, #1
 8007b76:	2103      	movs	r1, #3
 8007b78:	fa01 f303 	lsl.w	r3, r1, r3
 8007b7c:	43db      	mvns	r3, r3
 8007b7e:	401a      	ands	r2, r3
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8007b84:	697b      	ldr	r3, [r7, #20]
 8007b86:	08da      	lsrs	r2, r3, #3
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	3208      	adds	r2, #8
 8007b8c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007b90:	697b      	ldr	r3, [r7, #20]
 8007b92:	f003 0307 	and.w	r3, r3, #7
 8007b96:	009b      	lsls	r3, r3, #2
 8007b98:	220f      	movs	r2, #15
 8007b9a:	fa02 f303 	lsl.w	r3, r2, r3
 8007b9e:	43db      	mvns	r3, r3
 8007ba0:	697a      	ldr	r2, [r7, #20]
 8007ba2:	08d2      	lsrs	r2, r2, #3
 8007ba4:	4019      	ands	r1, r3
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	3208      	adds	r2, #8
 8007baa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	68da      	ldr	r2, [r3, #12]
 8007bb2:	697b      	ldr	r3, [r7, #20]
 8007bb4:	005b      	lsls	r3, r3, #1
 8007bb6:	2103      	movs	r1, #3
 8007bb8:	fa01 f303 	lsl.w	r3, r1, r3
 8007bbc:	43db      	mvns	r3, r3
 8007bbe:	401a      	ands	r2, r3
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	685a      	ldr	r2, [r3, #4]
 8007bc8:	2101      	movs	r1, #1
 8007bca:	697b      	ldr	r3, [r7, #20]
 8007bcc:	fa01 f303 	lsl.w	r3, r1, r3
 8007bd0:	43db      	mvns	r3, r3
 8007bd2:	401a      	ands	r2, r3
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	689a      	ldr	r2, [r3, #8]
 8007bdc:	697b      	ldr	r3, [r7, #20]
 8007bde:	005b      	lsls	r3, r3, #1
 8007be0:	2103      	movs	r1, #3
 8007be2:	fa01 f303 	lsl.w	r3, r1, r3
 8007be6:	43db      	mvns	r3, r3
 8007be8:	401a      	ands	r2, r3
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8007bee:	697b      	ldr	r3, [r7, #20]
 8007bf0:	3301      	adds	r3, #1
 8007bf2:	617b      	str	r3, [r7, #20]
 8007bf4:	697b      	ldr	r3, [r7, #20]
 8007bf6:	2b0f      	cmp	r3, #15
 8007bf8:	f67f af34 	bls.w	8007a64 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8007bfc:	bf00      	nop
 8007bfe:	bf00      	nop
 8007c00:	371c      	adds	r7, #28
 8007c02:	46bd      	mov	sp, r7
 8007c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c08:	4770      	bx	lr
 8007c0a:	bf00      	nop
 8007c0c:	40013800 	.word	0x40013800
 8007c10:	40020000 	.word	0x40020000
 8007c14:	40020400 	.word	0x40020400
 8007c18:	40020800 	.word	0x40020800
 8007c1c:	40020c00 	.word	0x40020c00
 8007c20:	40021000 	.word	0x40021000
 8007c24:	40021400 	.word	0x40021400
 8007c28:	40021800 	.word	0x40021800
 8007c2c:	40013c00 	.word	0x40013c00

08007c30 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8007c30:	b480      	push	{r7}
 8007c32:	b085      	sub	sp, #20
 8007c34:	af00      	add	r7, sp, #0
 8007c36:	6078      	str	r0, [r7, #4]
 8007c38:	460b      	mov	r3, r1
 8007c3a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	691a      	ldr	r2, [r3, #16]
 8007c40:	887b      	ldrh	r3, [r7, #2]
 8007c42:	4013      	ands	r3, r2
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	d002      	beq.n	8007c4e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8007c48:	2301      	movs	r3, #1
 8007c4a:	73fb      	strb	r3, [r7, #15]
 8007c4c:	e001      	b.n	8007c52 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8007c4e:	2300      	movs	r3, #0
 8007c50:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8007c52:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c54:	4618      	mov	r0, r3
 8007c56:	3714      	adds	r7, #20
 8007c58:	46bd      	mov	sp, r7
 8007c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c5e:	4770      	bx	lr

08007c60 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8007c60:	b580      	push	{r7, lr}
 8007c62:	b084      	sub	sp, #16
 8007c64:	af00      	add	r7, sp, #0
 8007c66:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	2b00      	cmp	r3, #0
 8007c6c:	d101      	bne.n	8007c72 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8007c6e:	2301      	movs	r3, #1
 8007c70:	e12b      	b.n	8007eca <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007c78:	b2db      	uxtb	r3, r3
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	d106      	bne.n	8007c8c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	2200      	movs	r2, #0
 8007c82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8007c86:	6878      	ldr	r0, [r7, #4]
 8007c88:	f000 f95d 	bl	8007f46 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	2224      	movs	r2, #36	; 0x24
 8007c90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	681a      	ldr	r2, [r3, #0]
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	f022 0201 	bic.w	r2, r2, #1
 8007ca2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	681a      	ldr	r2, [r3, #0]
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007cb2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	681a      	ldr	r2, [r3, #0]
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007cc2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8007cc4:	f002 fba4 	bl	800a410 <HAL_RCC_GetPCLK1Freq>
 8007cc8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	685b      	ldr	r3, [r3, #4]
 8007cce:	4a81      	ldr	r2, [pc, #516]	; (8007ed4 <HAL_I2C_Init+0x274>)
 8007cd0:	4293      	cmp	r3, r2
 8007cd2:	d807      	bhi.n	8007ce4 <HAL_I2C_Init+0x84>
 8007cd4:	68fb      	ldr	r3, [r7, #12]
 8007cd6:	4a80      	ldr	r2, [pc, #512]	; (8007ed8 <HAL_I2C_Init+0x278>)
 8007cd8:	4293      	cmp	r3, r2
 8007cda:	bf94      	ite	ls
 8007cdc:	2301      	movls	r3, #1
 8007cde:	2300      	movhi	r3, #0
 8007ce0:	b2db      	uxtb	r3, r3
 8007ce2:	e006      	b.n	8007cf2 <HAL_I2C_Init+0x92>
 8007ce4:	68fb      	ldr	r3, [r7, #12]
 8007ce6:	4a7d      	ldr	r2, [pc, #500]	; (8007edc <HAL_I2C_Init+0x27c>)
 8007ce8:	4293      	cmp	r3, r2
 8007cea:	bf94      	ite	ls
 8007cec:	2301      	movls	r3, #1
 8007cee:	2300      	movhi	r3, #0
 8007cf0:	b2db      	uxtb	r3, r3
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	d001      	beq.n	8007cfa <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8007cf6:	2301      	movs	r3, #1
 8007cf8:	e0e7      	b.n	8007eca <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8007cfa:	68fb      	ldr	r3, [r7, #12]
 8007cfc:	4a78      	ldr	r2, [pc, #480]	; (8007ee0 <HAL_I2C_Init+0x280>)
 8007cfe:	fba2 2303 	umull	r2, r3, r2, r3
 8007d02:	0c9b      	lsrs	r3, r3, #18
 8007d04:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	685b      	ldr	r3, [r3, #4]
 8007d0c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	68ba      	ldr	r2, [r7, #8]
 8007d16:	430a      	orrs	r2, r1
 8007d18:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	6a1b      	ldr	r3, [r3, #32]
 8007d20:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	685b      	ldr	r3, [r3, #4]
 8007d28:	4a6a      	ldr	r2, [pc, #424]	; (8007ed4 <HAL_I2C_Init+0x274>)
 8007d2a:	4293      	cmp	r3, r2
 8007d2c:	d802      	bhi.n	8007d34 <HAL_I2C_Init+0xd4>
 8007d2e:	68bb      	ldr	r3, [r7, #8]
 8007d30:	3301      	adds	r3, #1
 8007d32:	e009      	b.n	8007d48 <HAL_I2C_Init+0xe8>
 8007d34:	68bb      	ldr	r3, [r7, #8]
 8007d36:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8007d3a:	fb02 f303 	mul.w	r3, r2, r3
 8007d3e:	4a69      	ldr	r2, [pc, #420]	; (8007ee4 <HAL_I2C_Init+0x284>)
 8007d40:	fba2 2303 	umull	r2, r3, r2, r3
 8007d44:	099b      	lsrs	r3, r3, #6
 8007d46:	3301      	adds	r3, #1
 8007d48:	687a      	ldr	r2, [r7, #4]
 8007d4a:	6812      	ldr	r2, [r2, #0]
 8007d4c:	430b      	orrs	r3, r1
 8007d4e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	69db      	ldr	r3, [r3, #28]
 8007d56:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8007d5a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	685b      	ldr	r3, [r3, #4]
 8007d62:	495c      	ldr	r1, [pc, #368]	; (8007ed4 <HAL_I2C_Init+0x274>)
 8007d64:	428b      	cmp	r3, r1
 8007d66:	d819      	bhi.n	8007d9c <HAL_I2C_Init+0x13c>
 8007d68:	68fb      	ldr	r3, [r7, #12]
 8007d6a:	1e59      	subs	r1, r3, #1
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	685b      	ldr	r3, [r3, #4]
 8007d70:	005b      	lsls	r3, r3, #1
 8007d72:	fbb1 f3f3 	udiv	r3, r1, r3
 8007d76:	1c59      	adds	r1, r3, #1
 8007d78:	f640 73fc 	movw	r3, #4092	; 0xffc
 8007d7c:	400b      	ands	r3, r1
 8007d7e:	2b00      	cmp	r3, #0
 8007d80:	d00a      	beq.n	8007d98 <HAL_I2C_Init+0x138>
 8007d82:	68fb      	ldr	r3, [r7, #12]
 8007d84:	1e59      	subs	r1, r3, #1
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	685b      	ldr	r3, [r3, #4]
 8007d8a:	005b      	lsls	r3, r3, #1
 8007d8c:	fbb1 f3f3 	udiv	r3, r1, r3
 8007d90:	3301      	adds	r3, #1
 8007d92:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007d96:	e051      	b.n	8007e3c <HAL_I2C_Init+0x1dc>
 8007d98:	2304      	movs	r3, #4
 8007d9a:	e04f      	b.n	8007e3c <HAL_I2C_Init+0x1dc>
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	689b      	ldr	r3, [r3, #8]
 8007da0:	2b00      	cmp	r3, #0
 8007da2:	d111      	bne.n	8007dc8 <HAL_I2C_Init+0x168>
 8007da4:	68fb      	ldr	r3, [r7, #12]
 8007da6:	1e58      	subs	r0, r3, #1
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	6859      	ldr	r1, [r3, #4]
 8007dac:	460b      	mov	r3, r1
 8007dae:	005b      	lsls	r3, r3, #1
 8007db0:	440b      	add	r3, r1
 8007db2:	fbb0 f3f3 	udiv	r3, r0, r3
 8007db6:	3301      	adds	r3, #1
 8007db8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007dbc:	2b00      	cmp	r3, #0
 8007dbe:	bf0c      	ite	eq
 8007dc0:	2301      	moveq	r3, #1
 8007dc2:	2300      	movne	r3, #0
 8007dc4:	b2db      	uxtb	r3, r3
 8007dc6:	e012      	b.n	8007dee <HAL_I2C_Init+0x18e>
 8007dc8:	68fb      	ldr	r3, [r7, #12]
 8007dca:	1e58      	subs	r0, r3, #1
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	6859      	ldr	r1, [r3, #4]
 8007dd0:	460b      	mov	r3, r1
 8007dd2:	009b      	lsls	r3, r3, #2
 8007dd4:	440b      	add	r3, r1
 8007dd6:	0099      	lsls	r1, r3, #2
 8007dd8:	440b      	add	r3, r1
 8007dda:	fbb0 f3f3 	udiv	r3, r0, r3
 8007dde:	3301      	adds	r3, #1
 8007de0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007de4:	2b00      	cmp	r3, #0
 8007de6:	bf0c      	ite	eq
 8007de8:	2301      	moveq	r3, #1
 8007dea:	2300      	movne	r3, #0
 8007dec:	b2db      	uxtb	r3, r3
 8007dee:	2b00      	cmp	r3, #0
 8007df0:	d001      	beq.n	8007df6 <HAL_I2C_Init+0x196>
 8007df2:	2301      	movs	r3, #1
 8007df4:	e022      	b.n	8007e3c <HAL_I2C_Init+0x1dc>
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	689b      	ldr	r3, [r3, #8]
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	d10e      	bne.n	8007e1c <HAL_I2C_Init+0x1bc>
 8007dfe:	68fb      	ldr	r3, [r7, #12]
 8007e00:	1e58      	subs	r0, r3, #1
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	6859      	ldr	r1, [r3, #4]
 8007e06:	460b      	mov	r3, r1
 8007e08:	005b      	lsls	r3, r3, #1
 8007e0a:	440b      	add	r3, r1
 8007e0c:	fbb0 f3f3 	udiv	r3, r0, r3
 8007e10:	3301      	adds	r3, #1
 8007e12:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007e16:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007e1a:	e00f      	b.n	8007e3c <HAL_I2C_Init+0x1dc>
 8007e1c:	68fb      	ldr	r3, [r7, #12]
 8007e1e:	1e58      	subs	r0, r3, #1
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	6859      	ldr	r1, [r3, #4]
 8007e24:	460b      	mov	r3, r1
 8007e26:	009b      	lsls	r3, r3, #2
 8007e28:	440b      	add	r3, r1
 8007e2a:	0099      	lsls	r1, r3, #2
 8007e2c:	440b      	add	r3, r1
 8007e2e:	fbb0 f3f3 	udiv	r3, r0, r3
 8007e32:	3301      	adds	r3, #1
 8007e34:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007e38:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007e3c:	6879      	ldr	r1, [r7, #4]
 8007e3e:	6809      	ldr	r1, [r1, #0]
 8007e40:	4313      	orrs	r3, r2
 8007e42:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	69da      	ldr	r2, [r3, #28]
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	6a1b      	ldr	r3, [r3, #32]
 8007e56:	431a      	orrs	r2, r3
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	430a      	orrs	r2, r1
 8007e5e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	689b      	ldr	r3, [r3, #8]
 8007e66:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8007e6a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8007e6e:	687a      	ldr	r2, [r7, #4]
 8007e70:	6911      	ldr	r1, [r2, #16]
 8007e72:	687a      	ldr	r2, [r7, #4]
 8007e74:	68d2      	ldr	r2, [r2, #12]
 8007e76:	4311      	orrs	r1, r2
 8007e78:	687a      	ldr	r2, [r7, #4]
 8007e7a:	6812      	ldr	r2, [r2, #0]
 8007e7c:	430b      	orrs	r3, r1
 8007e7e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	68db      	ldr	r3, [r3, #12]
 8007e86:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	695a      	ldr	r2, [r3, #20]
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	699b      	ldr	r3, [r3, #24]
 8007e92:	431a      	orrs	r2, r3
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	430a      	orrs	r2, r1
 8007e9a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	681a      	ldr	r2, [r3, #0]
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	f042 0201 	orr.w	r2, r2, #1
 8007eaa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	2200      	movs	r2, #0
 8007eb0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	2220      	movs	r2, #32
 8007eb6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	2200      	movs	r2, #0
 8007ebe:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	2200      	movs	r2, #0
 8007ec4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8007ec8:	2300      	movs	r3, #0
}
 8007eca:	4618      	mov	r0, r3
 8007ecc:	3710      	adds	r7, #16
 8007ece:	46bd      	mov	sp, r7
 8007ed0:	bd80      	pop	{r7, pc}
 8007ed2:	bf00      	nop
 8007ed4:	000186a0 	.word	0x000186a0
 8007ed8:	001e847f 	.word	0x001e847f
 8007edc:	003d08ff 	.word	0x003d08ff
 8007ee0:	431bde83 	.word	0x431bde83
 8007ee4:	10624dd3 	.word	0x10624dd3

08007ee8 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8007ee8:	b580      	push	{r7, lr}
 8007eea:	b082      	sub	sp, #8
 8007eec:	af00      	add	r7, sp, #0
 8007eee:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	d101      	bne.n	8007efa <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8007ef6:	2301      	movs	r3, #1
 8007ef8:	e021      	b.n	8007f3e <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	2224      	movs	r2, #36	; 0x24
 8007efe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	681a      	ldr	r2, [r3, #0]
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	f022 0201 	bic.w	r2, r2, #1
 8007f10:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8007f12:	6878      	ldr	r0, [r7, #4]
 8007f14:	f000 f821 	bl	8007f5a <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	2200      	movs	r2, #0
 8007f1c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	2200      	movs	r2, #0
 8007f22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	2200      	movs	r2, #0
 8007f2a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	2200      	movs	r2, #0
 8007f30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	2200      	movs	r2, #0
 8007f38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007f3c:	2300      	movs	r3, #0
}
 8007f3e:	4618      	mov	r0, r3
 8007f40:	3708      	adds	r7, #8
 8007f42:	46bd      	mov	sp, r7
 8007f44:	bd80      	pop	{r7, pc}

08007f46 <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 8007f46:	b480      	push	{r7}
 8007f48:	b083      	sub	sp, #12
 8007f4a:	af00      	add	r7, sp, #0
 8007f4c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 8007f4e:	bf00      	nop
 8007f50:	370c      	adds	r7, #12
 8007f52:	46bd      	mov	sp, r7
 8007f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f58:	4770      	bx	lr

08007f5a <HAL_I2C_MspDeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
{
 8007f5a:	b480      	push	{r7}
 8007f5c:	b083      	sub	sp, #12
 8007f5e:	af00      	add	r7, sp, #0
 8007f60:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspDeInit could be implemented in the user file
   */
}
 8007f62:	bf00      	nop
 8007f64:	370c      	adds	r7, #12
 8007f66:	46bd      	mov	sp, r7
 8007f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f6c:	4770      	bx	lr
	...

08007f70 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007f70:	b580      	push	{r7, lr}
 8007f72:	b088      	sub	sp, #32
 8007f74:	af02      	add	r7, sp, #8
 8007f76:	60f8      	str	r0, [r7, #12]
 8007f78:	4608      	mov	r0, r1
 8007f7a:	4611      	mov	r1, r2
 8007f7c:	461a      	mov	r2, r3
 8007f7e:	4603      	mov	r3, r0
 8007f80:	817b      	strh	r3, [r7, #10]
 8007f82:	460b      	mov	r3, r1
 8007f84:	813b      	strh	r3, [r7, #8]
 8007f86:	4613      	mov	r3, r2
 8007f88:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8007f8a:	f7fe ff17 	bl	8006dbc <HAL_GetTick>
 8007f8e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007f90:	68fb      	ldr	r3, [r7, #12]
 8007f92:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007f96:	b2db      	uxtb	r3, r3
 8007f98:	2b20      	cmp	r3, #32
 8007f9a:	f040 80d9 	bne.w	8008150 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8007f9e:	697b      	ldr	r3, [r7, #20]
 8007fa0:	9300      	str	r3, [sp, #0]
 8007fa2:	2319      	movs	r3, #25
 8007fa4:	2201      	movs	r2, #1
 8007fa6:	496d      	ldr	r1, [pc, #436]	; (800815c <HAL_I2C_Mem_Write+0x1ec>)
 8007fa8:	68f8      	ldr	r0, [r7, #12]
 8007faa:	f000 fc99 	bl	80088e0 <I2C_WaitOnFlagUntilTimeout>
 8007fae:	4603      	mov	r3, r0
 8007fb0:	2b00      	cmp	r3, #0
 8007fb2:	d001      	beq.n	8007fb8 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8007fb4:	2302      	movs	r3, #2
 8007fb6:	e0cc      	b.n	8008152 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007fb8:	68fb      	ldr	r3, [r7, #12]
 8007fba:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007fbe:	2b01      	cmp	r3, #1
 8007fc0:	d101      	bne.n	8007fc6 <HAL_I2C_Mem_Write+0x56>
 8007fc2:	2302      	movs	r3, #2
 8007fc4:	e0c5      	b.n	8008152 <HAL_I2C_Mem_Write+0x1e2>
 8007fc6:	68fb      	ldr	r3, [r7, #12]
 8007fc8:	2201      	movs	r2, #1
 8007fca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8007fce:	68fb      	ldr	r3, [r7, #12]
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	f003 0301 	and.w	r3, r3, #1
 8007fd8:	2b01      	cmp	r3, #1
 8007fda:	d007      	beq.n	8007fec <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8007fdc:	68fb      	ldr	r3, [r7, #12]
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	681a      	ldr	r2, [r3, #0]
 8007fe2:	68fb      	ldr	r3, [r7, #12]
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	f042 0201 	orr.w	r2, r2, #1
 8007fea:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007fec:	68fb      	ldr	r3, [r7, #12]
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	681a      	ldr	r2, [r3, #0]
 8007ff2:	68fb      	ldr	r3, [r7, #12]
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007ffa:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8007ffc:	68fb      	ldr	r3, [r7, #12]
 8007ffe:	2221      	movs	r2, #33	; 0x21
 8008000:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8008004:	68fb      	ldr	r3, [r7, #12]
 8008006:	2240      	movs	r2, #64	; 0x40
 8008008:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800800c:	68fb      	ldr	r3, [r7, #12]
 800800e:	2200      	movs	r2, #0
 8008010:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8008012:	68fb      	ldr	r3, [r7, #12]
 8008014:	6a3a      	ldr	r2, [r7, #32]
 8008016:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8008018:	68fb      	ldr	r3, [r7, #12]
 800801a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800801c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800801e:	68fb      	ldr	r3, [r7, #12]
 8008020:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008022:	b29a      	uxth	r2, r3
 8008024:	68fb      	ldr	r3, [r7, #12]
 8008026:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8008028:	68fb      	ldr	r3, [r7, #12]
 800802a:	4a4d      	ldr	r2, [pc, #308]	; (8008160 <HAL_I2C_Mem_Write+0x1f0>)
 800802c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800802e:	88f8      	ldrh	r0, [r7, #6]
 8008030:	893a      	ldrh	r2, [r7, #8]
 8008032:	8979      	ldrh	r1, [r7, #10]
 8008034:	697b      	ldr	r3, [r7, #20]
 8008036:	9301      	str	r3, [sp, #4]
 8008038:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800803a:	9300      	str	r3, [sp, #0]
 800803c:	4603      	mov	r3, r0
 800803e:	68f8      	ldr	r0, [r7, #12]
 8008040:	f000 fad0 	bl	80085e4 <I2C_RequestMemoryWrite>
 8008044:	4603      	mov	r3, r0
 8008046:	2b00      	cmp	r3, #0
 8008048:	d052      	beq.n	80080f0 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800804a:	2301      	movs	r3, #1
 800804c:	e081      	b.n	8008152 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800804e:	697a      	ldr	r2, [r7, #20]
 8008050:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008052:	68f8      	ldr	r0, [r7, #12]
 8008054:	f000 fd1a 	bl	8008a8c <I2C_WaitOnTXEFlagUntilTimeout>
 8008058:	4603      	mov	r3, r0
 800805a:	2b00      	cmp	r3, #0
 800805c:	d00d      	beq.n	800807a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800805e:	68fb      	ldr	r3, [r7, #12]
 8008060:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008062:	2b04      	cmp	r3, #4
 8008064:	d107      	bne.n	8008076 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008066:	68fb      	ldr	r3, [r7, #12]
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	681a      	ldr	r2, [r3, #0]
 800806c:	68fb      	ldr	r3, [r7, #12]
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008074:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8008076:	2301      	movs	r3, #1
 8008078:	e06b      	b.n	8008152 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800807a:	68fb      	ldr	r3, [r7, #12]
 800807c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800807e:	781a      	ldrb	r2, [r3, #0]
 8008080:	68fb      	ldr	r3, [r7, #12]
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008086:	68fb      	ldr	r3, [r7, #12]
 8008088:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800808a:	1c5a      	adds	r2, r3, #1
 800808c:	68fb      	ldr	r3, [r7, #12]
 800808e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8008090:	68fb      	ldr	r3, [r7, #12]
 8008092:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008094:	3b01      	subs	r3, #1
 8008096:	b29a      	uxth	r2, r3
 8008098:	68fb      	ldr	r3, [r7, #12]
 800809a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800809c:	68fb      	ldr	r3, [r7, #12]
 800809e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80080a0:	b29b      	uxth	r3, r3
 80080a2:	3b01      	subs	r3, #1
 80080a4:	b29a      	uxth	r2, r3
 80080a6:	68fb      	ldr	r3, [r7, #12]
 80080a8:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80080aa:	68fb      	ldr	r3, [r7, #12]
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	695b      	ldr	r3, [r3, #20]
 80080b0:	f003 0304 	and.w	r3, r3, #4
 80080b4:	2b04      	cmp	r3, #4
 80080b6:	d11b      	bne.n	80080f0 <HAL_I2C_Mem_Write+0x180>
 80080b8:	68fb      	ldr	r3, [r7, #12]
 80080ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80080bc:	2b00      	cmp	r3, #0
 80080be:	d017      	beq.n	80080f0 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80080c0:	68fb      	ldr	r3, [r7, #12]
 80080c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080c4:	781a      	ldrb	r2, [r3, #0]
 80080c6:	68fb      	ldr	r3, [r7, #12]
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80080cc:	68fb      	ldr	r3, [r7, #12]
 80080ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080d0:	1c5a      	adds	r2, r3, #1
 80080d2:	68fb      	ldr	r3, [r7, #12]
 80080d4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80080d6:	68fb      	ldr	r3, [r7, #12]
 80080d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80080da:	3b01      	subs	r3, #1
 80080dc:	b29a      	uxth	r2, r3
 80080de:	68fb      	ldr	r3, [r7, #12]
 80080e0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80080e2:	68fb      	ldr	r3, [r7, #12]
 80080e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80080e6:	b29b      	uxth	r3, r3
 80080e8:	3b01      	subs	r3, #1
 80080ea:	b29a      	uxth	r2, r3
 80080ec:	68fb      	ldr	r3, [r7, #12]
 80080ee:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80080f0:	68fb      	ldr	r3, [r7, #12]
 80080f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80080f4:	2b00      	cmp	r3, #0
 80080f6:	d1aa      	bne.n	800804e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80080f8:	697a      	ldr	r2, [r7, #20]
 80080fa:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80080fc:	68f8      	ldr	r0, [r7, #12]
 80080fe:	f000 fd06 	bl	8008b0e <I2C_WaitOnBTFFlagUntilTimeout>
 8008102:	4603      	mov	r3, r0
 8008104:	2b00      	cmp	r3, #0
 8008106:	d00d      	beq.n	8008124 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008108:	68fb      	ldr	r3, [r7, #12]
 800810a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800810c:	2b04      	cmp	r3, #4
 800810e:	d107      	bne.n	8008120 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008110:	68fb      	ldr	r3, [r7, #12]
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	681a      	ldr	r2, [r3, #0]
 8008116:	68fb      	ldr	r3, [r7, #12]
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800811e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8008120:	2301      	movs	r3, #1
 8008122:	e016      	b.n	8008152 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008124:	68fb      	ldr	r3, [r7, #12]
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	681a      	ldr	r2, [r3, #0]
 800812a:	68fb      	ldr	r3, [r7, #12]
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008132:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008134:	68fb      	ldr	r3, [r7, #12]
 8008136:	2220      	movs	r2, #32
 8008138:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800813c:	68fb      	ldr	r3, [r7, #12]
 800813e:	2200      	movs	r2, #0
 8008140:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008144:	68fb      	ldr	r3, [r7, #12]
 8008146:	2200      	movs	r2, #0
 8008148:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800814c:	2300      	movs	r3, #0
 800814e:	e000      	b.n	8008152 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8008150:	2302      	movs	r3, #2
  }
}
 8008152:	4618      	mov	r0, r3
 8008154:	3718      	adds	r7, #24
 8008156:	46bd      	mov	sp, r7
 8008158:	bd80      	pop	{r7, pc}
 800815a:	bf00      	nop
 800815c:	00100002 	.word	0x00100002
 8008160:	ffff0000 	.word	0xffff0000

08008164 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008164:	b580      	push	{r7, lr}
 8008166:	b08c      	sub	sp, #48	; 0x30
 8008168:	af02      	add	r7, sp, #8
 800816a:	60f8      	str	r0, [r7, #12]
 800816c:	4608      	mov	r0, r1
 800816e:	4611      	mov	r1, r2
 8008170:	461a      	mov	r2, r3
 8008172:	4603      	mov	r3, r0
 8008174:	817b      	strh	r3, [r7, #10]
 8008176:	460b      	mov	r3, r1
 8008178:	813b      	strh	r3, [r7, #8]
 800817a:	4613      	mov	r3, r2
 800817c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800817e:	f7fe fe1d 	bl	8006dbc <HAL_GetTick>
 8008182:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008184:	68fb      	ldr	r3, [r7, #12]
 8008186:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800818a:	b2db      	uxtb	r3, r3
 800818c:	2b20      	cmp	r3, #32
 800818e:	f040 8208 	bne.w	80085a2 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8008192:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008194:	9300      	str	r3, [sp, #0]
 8008196:	2319      	movs	r3, #25
 8008198:	2201      	movs	r2, #1
 800819a:	497b      	ldr	r1, [pc, #492]	; (8008388 <HAL_I2C_Mem_Read+0x224>)
 800819c:	68f8      	ldr	r0, [r7, #12]
 800819e:	f000 fb9f 	bl	80088e0 <I2C_WaitOnFlagUntilTimeout>
 80081a2:	4603      	mov	r3, r0
 80081a4:	2b00      	cmp	r3, #0
 80081a6:	d001      	beq.n	80081ac <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80081a8:	2302      	movs	r3, #2
 80081aa:	e1fb      	b.n	80085a4 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80081ac:	68fb      	ldr	r3, [r7, #12]
 80081ae:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80081b2:	2b01      	cmp	r3, #1
 80081b4:	d101      	bne.n	80081ba <HAL_I2C_Mem_Read+0x56>
 80081b6:	2302      	movs	r3, #2
 80081b8:	e1f4      	b.n	80085a4 <HAL_I2C_Mem_Read+0x440>
 80081ba:	68fb      	ldr	r3, [r7, #12]
 80081bc:	2201      	movs	r2, #1
 80081be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80081c2:	68fb      	ldr	r3, [r7, #12]
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	f003 0301 	and.w	r3, r3, #1
 80081cc:	2b01      	cmp	r3, #1
 80081ce:	d007      	beq.n	80081e0 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80081d0:	68fb      	ldr	r3, [r7, #12]
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	681a      	ldr	r2, [r3, #0]
 80081d6:	68fb      	ldr	r3, [r7, #12]
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	f042 0201 	orr.w	r2, r2, #1
 80081de:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80081e0:	68fb      	ldr	r3, [r7, #12]
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	681a      	ldr	r2, [r3, #0]
 80081e6:	68fb      	ldr	r3, [r7, #12]
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80081ee:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80081f0:	68fb      	ldr	r3, [r7, #12]
 80081f2:	2222      	movs	r2, #34	; 0x22
 80081f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80081f8:	68fb      	ldr	r3, [r7, #12]
 80081fa:	2240      	movs	r2, #64	; 0x40
 80081fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008200:	68fb      	ldr	r3, [r7, #12]
 8008202:	2200      	movs	r2, #0
 8008204:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8008206:	68fb      	ldr	r3, [r7, #12]
 8008208:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800820a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800820c:	68fb      	ldr	r3, [r7, #12]
 800820e:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8008210:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8008212:	68fb      	ldr	r3, [r7, #12]
 8008214:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008216:	b29a      	uxth	r2, r3
 8008218:	68fb      	ldr	r3, [r7, #12]
 800821a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800821c:	68fb      	ldr	r3, [r7, #12]
 800821e:	4a5b      	ldr	r2, [pc, #364]	; (800838c <HAL_I2C_Mem_Read+0x228>)
 8008220:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8008222:	88f8      	ldrh	r0, [r7, #6]
 8008224:	893a      	ldrh	r2, [r7, #8]
 8008226:	8979      	ldrh	r1, [r7, #10]
 8008228:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800822a:	9301      	str	r3, [sp, #4]
 800822c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800822e:	9300      	str	r3, [sp, #0]
 8008230:	4603      	mov	r3, r0
 8008232:	68f8      	ldr	r0, [r7, #12]
 8008234:	f000 fa6c 	bl	8008710 <I2C_RequestMemoryRead>
 8008238:	4603      	mov	r3, r0
 800823a:	2b00      	cmp	r3, #0
 800823c:	d001      	beq.n	8008242 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800823e:	2301      	movs	r3, #1
 8008240:	e1b0      	b.n	80085a4 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8008242:	68fb      	ldr	r3, [r7, #12]
 8008244:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008246:	2b00      	cmp	r3, #0
 8008248:	d113      	bne.n	8008272 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800824a:	2300      	movs	r3, #0
 800824c:	623b      	str	r3, [r7, #32]
 800824e:	68fb      	ldr	r3, [r7, #12]
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	695b      	ldr	r3, [r3, #20]
 8008254:	623b      	str	r3, [r7, #32]
 8008256:	68fb      	ldr	r3, [r7, #12]
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	699b      	ldr	r3, [r3, #24]
 800825c:	623b      	str	r3, [r7, #32]
 800825e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008260:	68fb      	ldr	r3, [r7, #12]
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	681a      	ldr	r2, [r3, #0]
 8008266:	68fb      	ldr	r3, [r7, #12]
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800826e:	601a      	str	r2, [r3, #0]
 8008270:	e184      	b.n	800857c <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8008272:	68fb      	ldr	r3, [r7, #12]
 8008274:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008276:	2b01      	cmp	r3, #1
 8008278:	d11b      	bne.n	80082b2 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800827a:	68fb      	ldr	r3, [r7, #12]
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	681a      	ldr	r2, [r3, #0]
 8008280:	68fb      	ldr	r3, [r7, #12]
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008288:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800828a:	2300      	movs	r3, #0
 800828c:	61fb      	str	r3, [r7, #28]
 800828e:	68fb      	ldr	r3, [r7, #12]
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	695b      	ldr	r3, [r3, #20]
 8008294:	61fb      	str	r3, [r7, #28]
 8008296:	68fb      	ldr	r3, [r7, #12]
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	699b      	ldr	r3, [r3, #24]
 800829c:	61fb      	str	r3, [r7, #28]
 800829e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80082a0:	68fb      	ldr	r3, [r7, #12]
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	681a      	ldr	r2, [r3, #0]
 80082a6:	68fb      	ldr	r3, [r7, #12]
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80082ae:	601a      	str	r2, [r3, #0]
 80082b0:	e164      	b.n	800857c <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80082b2:	68fb      	ldr	r3, [r7, #12]
 80082b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80082b6:	2b02      	cmp	r3, #2
 80082b8:	d11b      	bne.n	80082f2 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80082ba:	68fb      	ldr	r3, [r7, #12]
 80082bc:	681b      	ldr	r3, [r3, #0]
 80082be:	681a      	ldr	r2, [r3, #0]
 80082c0:	68fb      	ldr	r3, [r7, #12]
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80082c8:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80082ca:	68fb      	ldr	r3, [r7, #12]
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	681a      	ldr	r2, [r3, #0]
 80082d0:	68fb      	ldr	r3, [r7, #12]
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80082d8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80082da:	2300      	movs	r3, #0
 80082dc:	61bb      	str	r3, [r7, #24]
 80082de:	68fb      	ldr	r3, [r7, #12]
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	695b      	ldr	r3, [r3, #20]
 80082e4:	61bb      	str	r3, [r7, #24]
 80082e6:	68fb      	ldr	r3, [r7, #12]
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	699b      	ldr	r3, [r3, #24]
 80082ec:	61bb      	str	r3, [r7, #24]
 80082ee:	69bb      	ldr	r3, [r7, #24]
 80082f0:	e144      	b.n	800857c <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80082f2:	2300      	movs	r3, #0
 80082f4:	617b      	str	r3, [r7, #20]
 80082f6:	68fb      	ldr	r3, [r7, #12]
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	695b      	ldr	r3, [r3, #20]
 80082fc:	617b      	str	r3, [r7, #20]
 80082fe:	68fb      	ldr	r3, [r7, #12]
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	699b      	ldr	r3, [r3, #24]
 8008304:	617b      	str	r3, [r7, #20]
 8008306:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8008308:	e138      	b.n	800857c <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800830a:	68fb      	ldr	r3, [r7, #12]
 800830c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800830e:	2b03      	cmp	r3, #3
 8008310:	f200 80f1 	bhi.w	80084f6 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8008314:	68fb      	ldr	r3, [r7, #12]
 8008316:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008318:	2b01      	cmp	r3, #1
 800831a:	d123      	bne.n	8008364 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800831c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800831e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008320:	68f8      	ldr	r0, [r7, #12]
 8008322:	f000 fc35 	bl	8008b90 <I2C_WaitOnRXNEFlagUntilTimeout>
 8008326:	4603      	mov	r3, r0
 8008328:	2b00      	cmp	r3, #0
 800832a:	d001      	beq.n	8008330 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 800832c:	2301      	movs	r3, #1
 800832e:	e139      	b.n	80085a4 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008330:	68fb      	ldr	r3, [r7, #12]
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	691a      	ldr	r2, [r3, #16]
 8008336:	68fb      	ldr	r3, [r7, #12]
 8008338:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800833a:	b2d2      	uxtb	r2, r2
 800833c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800833e:	68fb      	ldr	r3, [r7, #12]
 8008340:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008342:	1c5a      	adds	r2, r3, #1
 8008344:	68fb      	ldr	r3, [r7, #12]
 8008346:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008348:	68fb      	ldr	r3, [r7, #12]
 800834a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800834c:	3b01      	subs	r3, #1
 800834e:	b29a      	uxth	r2, r3
 8008350:	68fb      	ldr	r3, [r7, #12]
 8008352:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8008354:	68fb      	ldr	r3, [r7, #12]
 8008356:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008358:	b29b      	uxth	r3, r3
 800835a:	3b01      	subs	r3, #1
 800835c:	b29a      	uxth	r2, r3
 800835e:	68fb      	ldr	r3, [r7, #12]
 8008360:	855a      	strh	r2, [r3, #42]	; 0x2a
 8008362:	e10b      	b.n	800857c <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8008364:	68fb      	ldr	r3, [r7, #12]
 8008366:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008368:	2b02      	cmp	r3, #2
 800836a:	d14e      	bne.n	800840a <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800836c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800836e:	9300      	str	r3, [sp, #0]
 8008370:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008372:	2200      	movs	r2, #0
 8008374:	4906      	ldr	r1, [pc, #24]	; (8008390 <HAL_I2C_Mem_Read+0x22c>)
 8008376:	68f8      	ldr	r0, [r7, #12]
 8008378:	f000 fab2 	bl	80088e0 <I2C_WaitOnFlagUntilTimeout>
 800837c:	4603      	mov	r3, r0
 800837e:	2b00      	cmp	r3, #0
 8008380:	d008      	beq.n	8008394 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8008382:	2301      	movs	r3, #1
 8008384:	e10e      	b.n	80085a4 <HAL_I2C_Mem_Read+0x440>
 8008386:	bf00      	nop
 8008388:	00100002 	.word	0x00100002
 800838c:	ffff0000 	.word	0xffff0000
 8008390:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008394:	68fb      	ldr	r3, [r7, #12]
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	681a      	ldr	r2, [r3, #0]
 800839a:	68fb      	ldr	r3, [r7, #12]
 800839c:	681b      	ldr	r3, [r3, #0]
 800839e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80083a2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80083a4:	68fb      	ldr	r3, [r7, #12]
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	691a      	ldr	r2, [r3, #16]
 80083aa:	68fb      	ldr	r3, [r7, #12]
 80083ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083ae:	b2d2      	uxtb	r2, r2
 80083b0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80083b2:	68fb      	ldr	r3, [r7, #12]
 80083b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083b6:	1c5a      	adds	r2, r3, #1
 80083b8:	68fb      	ldr	r3, [r7, #12]
 80083ba:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80083bc:	68fb      	ldr	r3, [r7, #12]
 80083be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80083c0:	3b01      	subs	r3, #1
 80083c2:	b29a      	uxth	r2, r3
 80083c4:	68fb      	ldr	r3, [r7, #12]
 80083c6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80083c8:	68fb      	ldr	r3, [r7, #12]
 80083ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80083cc:	b29b      	uxth	r3, r3
 80083ce:	3b01      	subs	r3, #1
 80083d0:	b29a      	uxth	r2, r3
 80083d2:	68fb      	ldr	r3, [r7, #12]
 80083d4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80083d6:	68fb      	ldr	r3, [r7, #12]
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	691a      	ldr	r2, [r3, #16]
 80083dc:	68fb      	ldr	r3, [r7, #12]
 80083de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083e0:	b2d2      	uxtb	r2, r2
 80083e2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80083e4:	68fb      	ldr	r3, [r7, #12]
 80083e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083e8:	1c5a      	adds	r2, r3, #1
 80083ea:	68fb      	ldr	r3, [r7, #12]
 80083ec:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80083ee:	68fb      	ldr	r3, [r7, #12]
 80083f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80083f2:	3b01      	subs	r3, #1
 80083f4:	b29a      	uxth	r2, r3
 80083f6:	68fb      	ldr	r3, [r7, #12]
 80083f8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80083fa:	68fb      	ldr	r3, [r7, #12]
 80083fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80083fe:	b29b      	uxth	r3, r3
 8008400:	3b01      	subs	r3, #1
 8008402:	b29a      	uxth	r2, r3
 8008404:	68fb      	ldr	r3, [r7, #12]
 8008406:	855a      	strh	r2, [r3, #42]	; 0x2a
 8008408:	e0b8      	b.n	800857c <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800840a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800840c:	9300      	str	r3, [sp, #0]
 800840e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008410:	2200      	movs	r2, #0
 8008412:	4966      	ldr	r1, [pc, #408]	; (80085ac <HAL_I2C_Mem_Read+0x448>)
 8008414:	68f8      	ldr	r0, [r7, #12]
 8008416:	f000 fa63 	bl	80088e0 <I2C_WaitOnFlagUntilTimeout>
 800841a:	4603      	mov	r3, r0
 800841c:	2b00      	cmp	r3, #0
 800841e:	d001      	beq.n	8008424 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8008420:	2301      	movs	r3, #1
 8008422:	e0bf      	b.n	80085a4 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008424:	68fb      	ldr	r3, [r7, #12]
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	681a      	ldr	r2, [r3, #0]
 800842a:	68fb      	ldr	r3, [r7, #12]
 800842c:	681b      	ldr	r3, [r3, #0]
 800842e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008432:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008434:	68fb      	ldr	r3, [r7, #12]
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	691a      	ldr	r2, [r3, #16]
 800843a:	68fb      	ldr	r3, [r7, #12]
 800843c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800843e:	b2d2      	uxtb	r2, r2
 8008440:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008442:	68fb      	ldr	r3, [r7, #12]
 8008444:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008446:	1c5a      	adds	r2, r3, #1
 8008448:	68fb      	ldr	r3, [r7, #12]
 800844a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800844c:	68fb      	ldr	r3, [r7, #12]
 800844e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008450:	3b01      	subs	r3, #1
 8008452:	b29a      	uxth	r2, r3
 8008454:	68fb      	ldr	r3, [r7, #12]
 8008456:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8008458:	68fb      	ldr	r3, [r7, #12]
 800845a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800845c:	b29b      	uxth	r3, r3
 800845e:	3b01      	subs	r3, #1
 8008460:	b29a      	uxth	r2, r3
 8008462:	68fb      	ldr	r3, [r7, #12]
 8008464:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8008466:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008468:	9300      	str	r3, [sp, #0]
 800846a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800846c:	2200      	movs	r2, #0
 800846e:	494f      	ldr	r1, [pc, #316]	; (80085ac <HAL_I2C_Mem_Read+0x448>)
 8008470:	68f8      	ldr	r0, [r7, #12]
 8008472:	f000 fa35 	bl	80088e0 <I2C_WaitOnFlagUntilTimeout>
 8008476:	4603      	mov	r3, r0
 8008478:	2b00      	cmp	r3, #0
 800847a:	d001      	beq.n	8008480 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 800847c:	2301      	movs	r3, #1
 800847e:	e091      	b.n	80085a4 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008480:	68fb      	ldr	r3, [r7, #12]
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	681a      	ldr	r2, [r3, #0]
 8008486:	68fb      	ldr	r3, [r7, #12]
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800848e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008490:	68fb      	ldr	r3, [r7, #12]
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	691a      	ldr	r2, [r3, #16]
 8008496:	68fb      	ldr	r3, [r7, #12]
 8008498:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800849a:	b2d2      	uxtb	r2, r2
 800849c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800849e:	68fb      	ldr	r3, [r7, #12]
 80084a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084a2:	1c5a      	adds	r2, r3, #1
 80084a4:	68fb      	ldr	r3, [r7, #12]
 80084a6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80084a8:	68fb      	ldr	r3, [r7, #12]
 80084aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80084ac:	3b01      	subs	r3, #1
 80084ae:	b29a      	uxth	r2, r3
 80084b0:	68fb      	ldr	r3, [r7, #12]
 80084b2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80084b4:	68fb      	ldr	r3, [r7, #12]
 80084b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80084b8:	b29b      	uxth	r3, r3
 80084ba:	3b01      	subs	r3, #1
 80084bc:	b29a      	uxth	r2, r3
 80084be:	68fb      	ldr	r3, [r7, #12]
 80084c0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80084c2:	68fb      	ldr	r3, [r7, #12]
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	691a      	ldr	r2, [r3, #16]
 80084c8:	68fb      	ldr	r3, [r7, #12]
 80084ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084cc:	b2d2      	uxtb	r2, r2
 80084ce:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80084d0:	68fb      	ldr	r3, [r7, #12]
 80084d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084d4:	1c5a      	adds	r2, r3, #1
 80084d6:	68fb      	ldr	r3, [r7, #12]
 80084d8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80084da:	68fb      	ldr	r3, [r7, #12]
 80084dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80084de:	3b01      	subs	r3, #1
 80084e0:	b29a      	uxth	r2, r3
 80084e2:	68fb      	ldr	r3, [r7, #12]
 80084e4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80084e6:	68fb      	ldr	r3, [r7, #12]
 80084e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80084ea:	b29b      	uxth	r3, r3
 80084ec:	3b01      	subs	r3, #1
 80084ee:	b29a      	uxth	r2, r3
 80084f0:	68fb      	ldr	r3, [r7, #12]
 80084f2:	855a      	strh	r2, [r3, #42]	; 0x2a
 80084f4:	e042      	b.n	800857c <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80084f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80084f8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80084fa:	68f8      	ldr	r0, [r7, #12]
 80084fc:	f000 fb48 	bl	8008b90 <I2C_WaitOnRXNEFlagUntilTimeout>
 8008500:	4603      	mov	r3, r0
 8008502:	2b00      	cmp	r3, #0
 8008504:	d001      	beq.n	800850a <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8008506:	2301      	movs	r3, #1
 8008508:	e04c      	b.n	80085a4 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800850a:	68fb      	ldr	r3, [r7, #12]
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	691a      	ldr	r2, [r3, #16]
 8008510:	68fb      	ldr	r3, [r7, #12]
 8008512:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008514:	b2d2      	uxtb	r2, r2
 8008516:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8008518:	68fb      	ldr	r3, [r7, #12]
 800851a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800851c:	1c5a      	adds	r2, r3, #1
 800851e:	68fb      	ldr	r3, [r7, #12]
 8008520:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8008522:	68fb      	ldr	r3, [r7, #12]
 8008524:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008526:	3b01      	subs	r3, #1
 8008528:	b29a      	uxth	r2, r3
 800852a:	68fb      	ldr	r3, [r7, #12]
 800852c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800852e:	68fb      	ldr	r3, [r7, #12]
 8008530:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008532:	b29b      	uxth	r3, r3
 8008534:	3b01      	subs	r3, #1
 8008536:	b29a      	uxth	r2, r3
 8008538:	68fb      	ldr	r3, [r7, #12]
 800853a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800853c:	68fb      	ldr	r3, [r7, #12]
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	695b      	ldr	r3, [r3, #20]
 8008542:	f003 0304 	and.w	r3, r3, #4
 8008546:	2b04      	cmp	r3, #4
 8008548:	d118      	bne.n	800857c <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800854a:	68fb      	ldr	r3, [r7, #12]
 800854c:	681b      	ldr	r3, [r3, #0]
 800854e:	691a      	ldr	r2, [r3, #16]
 8008550:	68fb      	ldr	r3, [r7, #12]
 8008552:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008554:	b2d2      	uxtb	r2, r2
 8008556:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008558:	68fb      	ldr	r3, [r7, #12]
 800855a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800855c:	1c5a      	adds	r2, r3, #1
 800855e:	68fb      	ldr	r3, [r7, #12]
 8008560:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008562:	68fb      	ldr	r3, [r7, #12]
 8008564:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008566:	3b01      	subs	r3, #1
 8008568:	b29a      	uxth	r2, r3
 800856a:	68fb      	ldr	r3, [r7, #12]
 800856c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800856e:	68fb      	ldr	r3, [r7, #12]
 8008570:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008572:	b29b      	uxth	r3, r3
 8008574:	3b01      	subs	r3, #1
 8008576:	b29a      	uxth	r2, r3
 8008578:	68fb      	ldr	r3, [r7, #12]
 800857a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800857c:	68fb      	ldr	r3, [r7, #12]
 800857e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008580:	2b00      	cmp	r3, #0
 8008582:	f47f aec2 	bne.w	800830a <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8008586:	68fb      	ldr	r3, [r7, #12]
 8008588:	2220      	movs	r2, #32
 800858a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800858e:	68fb      	ldr	r3, [r7, #12]
 8008590:	2200      	movs	r2, #0
 8008592:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008596:	68fb      	ldr	r3, [r7, #12]
 8008598:	2200      	movs	r2, #0
 800859a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800859e:	2300      	movs	r3, #0
 80085a0:	e000      	b.n	80085a4 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 80085a2:	2302      	movs	r3, #2
  }
}
 80085a4:	4618      	mov	r0, r3
 80085a6:	3728      	adds	r7, #40	; 0x28
 80085a8:	46bd      	mov	sp, r7
 80085aa:	bd80      	pop	{r7, pc}
 80085ac:	00010004 	.word	0x00010004

080085b0 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 80085b0:	b480      	push	{r7}
 80085b2:	b083      	sub	sp, #12
 80085b4:	af00      	add	r7, sp, #0
 80085b6:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80085be:	b2db      	uxtb	r3, r3
}
 80085c0:	4618      	mov	r0, r3
 80085c2:	370c      	adds	r7, #12
 80085c4:	46bd      	mov	sp, r7
 80085c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ca:	4770      	bx	lr

080085cc <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 80085cc:	b480      	push	{r7}
 80085ce:	b083      	sub	sp, #12
 80085d0:	af00      	add	r7, sp, #0
 80085d2:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 80085d8:	4618      	mov	r0, r3
 80085da:	370c      	adds	r7, #12
 80085dc:	46bd      	mov	sp, r7
 80085de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085e2:	4770      	bx	lr

080085e4 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80085e4:	b580      	push	{r7, lr}
 80085e6:	b088      	sub	sp, #32
 80085e8:	af02      	add	r7, sp, #8
 80085ea:	60f8      	str	r0, [r7, #12]
 80085ec:	4608      	mov	r0, r1
 80085ee:	4611      	mov	r1, r2
 80085f0:	461a      	mov	r2, r3
 80085f2:	4603      	mov	r3, r0
 80085f4:	817b      	strh	r3, [r7, #10]
 80085f6:	460b      	mov	r3, r1
 80085f8:	813b      	strh	r3, [r7, #8]
 80085fa:	4613      	mov	r3, r2
 80085fc:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80085fe:	68fb      	ldr	r3, [r7, #12]
 8008600:	681b      	ldr	r3, [r3, #0]
 8008602:	681a      	ldr	r2, [r3, #0]
 8008604:	68fb      	ldr	r3, [r7, #12]
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800860c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800860e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008610:	9300      	str	r3, [sp, #0]
 8008612:	6a3b      	ldr	r3, [r7, #32]
 8008614:	2200      	movs	r2, #0
 8008616:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800861a:	68f8      	ldr	r0, [r7, #12]
 800861c:	f000 f960 	bl	80088e0 <I2C_WaitOnFlagUntilTimeout>
 8008620:	4603      	mov	r3, r0
 8008622:	2b00      	cmp	r3, #0
 8008624:	d00d      	beq.n	8008642 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8008626:	68fb      	ldr	r3, [r7, #12]
 8008628:	681b      	ldr	r3, [r3, #0]
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008630:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008634:	d103      	bne.n	800863e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8008636:	68fb      	ldr	r3, [r7, #12]
 8008638:	f44f 7200 	mov.w	r2, #512	; 0x200
 800863c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800863e:	2303      	movs	r3, #3
 8008640:	e05f      	b.n	8008702 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8008642:	897b      	ldrh	r3, [r7, #10]
 8008644:	b2db      	uxtb	r3, r3
 8008646:	461a      	mov	r2, r3
 8008648:	68fb      	ldr	r3, [r7, #12]
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8008650:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8008652:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008654:	6a3a      	ldr	r2, [r7, #32]
 8008656:	492d      	ldr	r1, [pc, #180]	; (800870c <I2C_RequestMemoryWrite+0x128>)
 8008658:	68f8      	ldr	r0, [r7, #12]
 800865a:	f000 f998 	bl	800898e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800865e:	4603      	mov	r3, r0
 8008660:	2b00      	cmp	r3, #0
 8008662:	d001      	beq.n	8008668 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8008664:	2301      	movs	r3, #1
 8008666:	e04c      	b.n	8008702 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008668:	2300      	movs	r3, #0
 800866a:	617b      	str	r3, [r7, #20]
 800866c:	68fb      	ldr	r3, [r7, #12]
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	695b      	ldr	r3, [r3, #20]
 8008672:	617b      	str	r3, [r7, #20]
 8008674:	68fb      	ldr	r3, [r7, #12]
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	699b      	ldr	r3, [r3, #24]
 800867a:	617b      	str	r3, [r7, #20]
 800867c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800867e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008680:	6a39      	ldr	r1, [r7, #32]
 8008682:	68f8      	ldr	r0, [r7, #12]
 8008684:	f000 fa02 	bl	8008a8c <I2C_WaitOnTXEFlagUntilTimeout>
 8008688:	4603      	mov	r3, r0
 800868a:	2b00      	cmp	r3, #0
 800868c:	d00d      	beq.n	80086aa <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800868e:	68fb      	ldr	r3, [r7, #12]
 8008690:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008692:	2b04      	cmp	r3, #4
 8008694:	d107      	bne.n	80086a6 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008696:	68fb      	ldr	r3, [r7, #12]
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	681a      	ldr	r2, [r3, #0]
 800869c:	68fb      	ldr	r3, [r7, #12]
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80086a4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80086a6:	2301      	movs	r3, #1
 80086a8:	e02b      	b.n	8008702 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80086aa:	88fb      	ldrh	r3, [r7, #6]
 80086ac:	2b01      	cmp	r3, #1
 80086ae:	d105      	bne.n	80086bc <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80086b0:	893b      	ldrh	r3, [r7, #8]
 80086b2:	b2da      	uxtb	r2, r3
 80086b4:	68fb      	ldr	r3, [r7, #12]
 80086b6:	681b      	ldr	r3, [r3, #0]
 80086b8:	611a      	str	r2, [r3, #16]
 80086ba:	e021      	b.n	8008700 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80086bc:	893b      	ldrh	r3, [r7, #8]
 80086be:	0a1b      	lsrs	r3, r3, #8
 80086c0:	b29b      	uxth	r3, r3
 80086c2:	b2da      	uxtb	r2, r3
 80086c4:	68fb      	ldr	r3, [r7, #12]
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80086ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80086cc:	6a39      	ldr	r1, [r7, #32]
 80086ce:	68f8      	ldr	r0, [r7, #12]
 80086d0:	f000 f9dc 	bl	8008a8c <I2C_WaitOnTXEFlagUntilTimeout>
 80086d4:	4603      	mov	r3, r0
 80086d6:	2b00      	cmp	r3, #0
 80086d8:	d00d      	beq.n	80086f6 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80086da:	68fb      	ldr	r3, [r7, #12]
 80086dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086de:	2b04      	cmp	r3, #4
 80086e0:	d107      	bne.n	80086f2 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80086e2:	68fb      	ldr	r3, [r7, #12]
 80086e4:	681b      	ldr	r3, [r3, #0]
 80086e6:	681a      	ldr	r2, [r3, #0]
 80086e8:	68fb      	ldr	r3, [r7, #12]
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80086f0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80086f2:	2301      	movs	r3, #1
 80086f4:	e005      	b.n	8008702 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80086f6:	893b      	ldrh	r3, [r7, #8]
 80086f8:	b2da      	uxtb	r2, r3
 80086fa:	68fb      	ldr	r3, [r7, #12]
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8008700:	2300      	movs	r3, #0
}
 8008702:	4618      	mov	r0, r3
 8008704:	3718      	adds	r7, #24
 8008706:	46bd      	mov	sp, r7
 8008708:	bd80      	pop	{r7, pc}
 800870a:	bf00      	nop
 800870c:	00010002 	.word	0x00010002

08008710 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8008710:	b580      	push	{r7, lr}
 8008712:	b088      	sub	sp, #32
 8008714:	af02      	add	r7, sp, #8
 8008716:	60f8      	str	r0, [r7, #12]
 8008718:	4608      	mov	r0, r1
 800871a:	4611      	mov	r1, r2
 800871c:	461a      	mov	r2, r3
 800871e:	4603      	mov	r3, r0
 8008720:	817b      	strh	r3, [r7, #10]
 8008722:	460b      	mov	r3, r1
 8008724:	813b      	strh	r3, [r7, #8]
 8008726:	4613      	mov	r3, r2
 8008728:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800872a:	68fb      	ldr	r3, [r7, #12]
 800872c:	681b      	ldr	r3, [r3, #0]
 800872e:	681a      	ldr	r2, [r3, #0]
 8008730:	68fb      	ldr	r3, [r7, #12]
 8008732:	681b      	ldr	r3, [r3, #0]
 8008734:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8008738:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800873a:	68fb      	ldr	r3, [r7, #12]
 800873c:	681b      	ldr	r3, [r3, #0]
 800873e:	681a      	ldr	r2, [r3, #0]
 8008740:	68fb      	ldr	r3, [r7, #12]
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008748:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800874a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800874c:	9300      	str	r3, [sp, #0]
 800874e:	6a3b      	ldr	r3, [r7, #32]
 8008750:	2200      	movs	r2, #0
 8008752:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8008756:	68f8      	ldr	r0, [r7, #12]
 8008758:	f000 f8c2 	bl	80088e0 <I2C_WaitOnFlagUntilTimeout>
 800875c:	4603      	mov	r3, r0
 800875e:	2b00      	cmp	r3, #0
 8008760:	d00d      	beq.n	800877e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8008762:	68fb      	ldr	r3, [r7, #12]
 8008764:	681b      	ldr	r3, [r3, #0]
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800876c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008770:	d103      	bne.n	800877a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8008772:	68fb      	ldr	r3, [r7, #12]
 8008774:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008778:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800877a:	2303      	movs	r3, #3
 800877c:	e0aa      	b.n	80088d4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800877e:	897b      	ldrh	r3, [r7, #10]
 8008780:	b2db      	uxtb	r3, r3
 8008782:	461a      	mov	r2, r3
 8008784:	68fb      	ldr	r3, [r7, #12]
 8008786:	681b      	ldr	r3, [r3, #0]
 8008788:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800878c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800878e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008790:	6a3a      	ldr	r2, [r7, #32]
 8008792:	4952      	ldr	r1, [pc, #328]	; (80088dc <I2C_RequestMemoryRead+0x1cc>)
 8008794:	68f8      	ldr	r0, [r7, #12]
 8008796:	f000 f8fa 	bl	800898e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800879a:	4603      	mov	r3, r0
 800879c:	2b00      	cmp	r3, #0
 800879e:	d001      	beq.n	80087a4 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80087a0:	2301      	movs	r3, #1
 80087a2:	e097      	b.n	80088d4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80087a4:	2300      	movs	r3, #0
 80087a6:	617b      	str	r3, [r7, #20]
 80087a8:	68fb      	ldr	r3, [r7, #12]
 80087aa:	681b      	ldr	r3, [r3, #0]
 80087ac:	695b      	ldr	r3, [r3, #20]
 80087ae:	617b      	str	r3, [r7, #20]
 80087b0:	68fb      	ldr	r3, [r7, #12]
 80087b2:	681b      	ldr	r3, [r3, #0]
 80087b4:	699b      	ldr	r3, [r3, #24]
 80087b6:	617b      	str	r3, [r7, #20]
 80087b8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80087ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80087bc:	6a39      	ldr	r1, [r7, #32]
 80087be:	68f8      	ldr	r0, [r7, #12]
 80087c0:	f000 f964 	bl	8008a8c <I2C_WaitOnTXEFlagUntilTimeout>
 80087c4:	4603      	mov	r3, r0
 80087c6:	2b00      	cmp	r3, #0
 80087c8:	d00d      	beq.n	80087e6 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80087ca:	68fb      	ldr	r3, [r7, #12]
 80087cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80087ce:	2b04      	cmp	r3, #4
 80087d0:	d107      	bne.n	80087e2 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80087d2:	68fb      	ldr	r3, [r7, #12]
 80087d4:	681b      	ldr	r3, [r3, #0]
 80087d6:	681a      	ldr	r2, [r3, #0]
 80087d8:	68fb      	ldr	r3, [r7, #12]
 80087da:	681b      	ldr	r3, [r3, #0]
 80087dc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80087e0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80087e2:	2301      	movs	r3, #1
 80087e4:	e076      	b.n	80088d4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80087e6:	88fb      	ldrh	r3, [r7, #6]
 80087e8:	2b01      	cmp	r3, #1
 80087ea:	d105      	bne.n	80087f8 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80087ec:	893b      	ldrh	r3, [r7, #8]
 80087ee:	b2da      	uxtb	r2, r3
 80087f0:	68fb      	ldr	r3, [r7, #12]
 80087f2:	681b      	ldr	r3, [r3, #0]
 80087f4:	611a      	str	r2, [r3, #16]
 80087f6:	e021      	b.n	800883c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80087f8:	893b      	ldrh	r3, [r7, #8]
 80087fa:	0a1b      	lsrs	r3, r3, #8
 80087fc:	b29b      	uxth	r3, r3
 80087fe:	b2da      	uxtb	r2, r3
 8008800:	68fb      	ldr	r3, [r7, #12]
 8008802:	681b      	ldr	r3, [r3, #0]
 8008804:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008806:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008808:	6a39      	ldr	r1, [r7, #32]
 800880a:	68f8      	ldr	r0, [r7, #12]
 800880c:	f000 f93e 	bl	8008a8c <I2C_WaitOnTXEFlagUntilTimeout>
 8008810:	4603      	mov	r3, r0
 8008812:	2b00      	cmp	r3, #0
 8008814:	d00d      	beq.n	8008832 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008816:	68fb      	ldr	r3, [r7, #12]
 8008818:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800881a:	2b04      	cmp	r3, #4
 800881c:	d107      	bne.n	800882e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800881e:	68fb      	ldr	r3, [r7, #12]
 8008820:	681b      	ldr	r3, [r3, #0]
 8008822:	681a      	ldr	r2, [r3, #0]
 8008824:	68fb      	ldr	r3, [r7, #12]
 8008826:	681b      	ldr	r3, [r3, #0]
 8008828:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800882c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800882e:	2301      	movs	r3, #1
 8008830:	e050      	b.n	80088d4 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8008832:	893b      	ldrh	r3, [r7, #8]
 8008834:	b2da      	uxtb	r2, r3
 8008836:	68fb      	ldr	r3, [r7, #12]
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800883c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800883e:	6a39      	ldr	r1, [r7, #32]
 8008840:	68f8      	ldr	r0, [r7, #12]
 8008842:	f000 f923 	bl	8008a8c <I2C_WaitOnTXEFlagUntilTimeout>
 8008846:	4603      	mov	r3, r0
 8008848:	2b00      	cmp	r3, #0
 800884a:	d00d      	beq.n	8008868 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800884c:	68fb      	ldr	r3, [r7, #12]
 800884e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008850:	2b04      	cmp	r3, #4
 8008852:	d107      	bne.n	8008864 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008854:	68fb      	ldr	r3, [r7, #12]
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	681a      	ldr	r2, [r3, #0]
 800885a:	68fb      	ldr	r3, [r7, #12]
 800885c:	681b      	ldr	r3, [r3, #0]
 800885e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008862:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8008864:	2301      	movs	r3, #1
 8008866:	e035      	b.n	80088d4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008868:	68fb      	ldr	r3, [r7, #12]
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	681a      	ldr	r2, [r3, #0]
 800886e:	68fb      	ldr	r3, [r7, #12]
 8008870:	681b      	ldr	r3, [r3, #0]
 8008872:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008876:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8008878:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800887a:	9300      	str	r3, [sp, #0]
 800887c:	6a3b      	ldr	r3, [r7, #32]
 800887e:	2200      	movs	r2, #0
 8008880:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8008884:	68f8      	ldr	r0, [r7, #12]
 8008886:	f000 f82b 	bl	80088e0 <I2C_WaitOnFlagUntilTimeout>
 800888a:	4603      	mov	r3, r0
 800888c:	2b00      	cmp	r3, #0
 800888e:	d00d      	beq.n	80088ac <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8008890:	68fb      	ldr	r3, [r7, #12]
 8008892:	681b      	ldr	r3, [r3, #0]
 8008894:	681b      	ldr	r3, [r3, #0]
 8008896:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800889a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800889e:	d103      	bne.n	80088a8 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80088a0:	68fb      	ldr	r3, [r7, #12]
 80088a2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80088a6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80088a8:	2303      	movs	r3, #3
 80088aa:	e013      	b.n	80088d4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80088ac:	897b      	ldrh	r3, [r7, #10]
 80088ae:	b2db      	uxtb	r3, r3
 80088b0:	f043 0301 	orr.w	r3, r3, #1
 80088b4:	b2da      	uxtb	r2, r3
 80088b6:	68fb      	ldr	r3, [r7, #12]
 80088b8:	681b      	ldr	r3, [r3, #0]
 80088ba:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80088bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088be:	6a3a      	ldr	r2, [r7, #32]
 80088c0:	4906      	ldr	r1, [pc, #24]	; (80088dc <I2C_RequestMemoryRead+0x1cc>)
 80088c2:	68f8      	ldr	r0, [r7, #12]
 80088c4:	f000 f863 	bl	800898e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80088c8:	4603      	mov	r3, r0
 80088ca:	2b00      	cmp	r3, #0
 80088cc:	d001      	beq.n	80088d2 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80088ce:	2301      	movs	r3, #1
 80088d0:	e000      	b.n	80088d4 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80088d2:	2300      	movs	r3, #0
}
 80088d4:	4618      	mov	r0, r3
 80088d6:	3718      	adds	r7, #24
 80088d8:	46bd      	mov	sp, r7
 80088da:	bd80      	pop	{r7, pc}
 80088dc:	00010002 	.word	0x00010002

080088e0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80088e0:	b580      	push	{r7, lr}
 80088e2:	b084      	sub	sp, #16
 80088e4:	af00      	add	r7, sp, #0
 80088e6:	60f8      	str	r0, [r7, #12]
 80088e8:	60b9      	str	r1, [r7, #8]
 80088ea:	603b      	str	r3, [r7, #0]
 80088ec:	4613      	mov	r3, r2
 80088ee:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80088f0:	e025      	b.n	800893e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80088f2:	683b      	ldr	r3, [r7, #0]
 80088f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80088f8:	d021      	beq.n	800893e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80088fa:	f7fe fa5f 	bl	8006dbc <HAL_GetTick>
 80088fe:	4602      	mov	r2, r0
 8008900:	69bb      	ldr	r3, [r7, #24]
 8008902:	1ad3      	subs	r3, r2, r3
 8008904:	683a      	ldr	r2, [r7, #0]
 8008906:	429a      	cmp	r2, r3
 8008908:	d302      	bcc.n	8008910 <I2C_WaitOnFlagUntilTimeout+0x30>
 800890a:	683b      	ldr	r3, [r7, #0]
 800890c:	2b00      	cmp	r3, #0
 800890e:	d116      	bne.n	800893e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8008910:	68fb      	ldr	r3, [r7, #12]
 8008912:	2200      	movs	r2, #0
 8008914:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8008916:	68fb      	ldr	r3, [r7, #12]
 8008918:	2220      	movs	r2, #32
 800891a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800891e:	68fb      	ldr	r3, [r7, #12]
 8008920:	2200      	movs	r2, #0
 8008922:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8008926:	68fb      	ldr	r3, [r7, #12]
 8008928:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800892a:	f043 0220 	orr.w	r2, r3, #32
 800892e:	68fb      	ldr	r3, [r7, #12]
 8008930:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008932:	68fb      	ldr	r3, [r7, #12]
 8008934:	2200      	movs	r2, #0
 8008936:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800893a:	2301      	movs	r3, #1
 800893c:	e023      	b.n	8008986 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800893e:	68bb      	ldr	r3, [r7, #8]
 8008940:	0c1b      	lsrs	r3, r3, #16
 8008942:	b2db      	uxtb	r3, r3
 8008944:	2b01      	cmp	r3, #1
 8008946:	d10d      	bne.n	8008964 <I2C_WaitOnFlagUntilTimeout+0x84>
 8008948:	68fb      	ldr	r3, [r7, #12]
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	695b      	ldr	r3, [r3, #20]
 800894e:	43da      	mvns	r2, r3
 8008950:	68bb      	ldr	r3, [r7, #8]
 8008952:	4013      	ands	r3, r2
 8008954:	b29b      	uxth	r3, r3
 8008956:	2b00      	cmp	r3, #0
 8008958:	bf0c      	ite	eq
 800895a:	2301      	moveq	r3, #1
 800895c:	2300      	movne	r3, #0
 800895e:	b2db      	uxtb	r3, r3
 8008960:	461a      	mov	r2, r3
 8008962:	e00c      	b.n	800897e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8008964:	68fb      	ldr	r3, [r7, #12]
 8008966:	681b      	ldr	r3, [r3, #0]
 8008968:	699b      	ldr	r3, [r3, #24]
 800896a:	43da      	mvns	r2, r3
 800896c:	68bb      	ldr	r3, [r7, #8]
 800896e:	4013      	ands	r3, r2
 8008970:	b29b      	uxth	r3, r3
 8008972:	2b00      	cmp	r3, #0
 8008974:	bf0c      	ite	eq
 8008976:	2301      	moveq	r3, #1
 8008978:	2300      	movne	r3, #0
 800897a:	b2db      	uxtb	r3, r3
 800897c:	461a      	mov	r2, r3
 800897e:	79fb      	ldrb	r3, [r7, #7]
 8008980:	429a      	cmp	r2, r3
 8008982:	d0b6      	beq.n	80088f2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8008984:	2300      	movs	r3, #0
}
 8008986:	4618      	mov	r0, r3
 8008988:	3710      	adds	r7, #16
 800898a:	46bd      	mov	sp, r7
 800898c:	bd80      	pop	{r7, pc}

0800898e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800898e:	b580      	push	{r7, lr}
 8008990:	b084      	sub	sp, #16
 8008992:	af00      	add	r7, sp, #0
 8008994:	60f8      	str	r0, [r7, #12]
 8008996:	60b9      	str	r1, [r7, #8]
 8008998:	607a      	str	r2, [r7, #4]
 800899a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800899c:	e051      	b.n	8008a42 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800899e:	68fb      	ldr	r3, [r7, #12]
 80089a0:	681b      	ldr	r3, [r3, #0]
 80089a2:	695b      	ldr	r3, [r3, #20]
 80089a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80089a8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80089ac:	d123      	bne.n	80089f6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80089ae:	68fb      	ldr	r3, [r7, #12]
 80089b0:	681b      	ldr	r3, [r3, #0]
 80089b2:	681a      	ldr	r2, [r3, #0]
 80089b4:	68fb      	ldr	r3, [r7, #12]
 80089b6:	681b      	ldr	r3, [r3, #0]
 80089b8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80089bc:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80089be:	68fb      	ldr	r3, [r7, #12]
 80089c0:	681b      	ldr	r3, [r3, #0]
 80089c2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80089c6:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80089c8:	68fb      	ldr	r3, [r7, #12]
 80089ca:	2200      	movs	r2, #0
 80089cc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80089ce:	68fb      	ldr	r3, [r7, #12]
 80089d0:	2220      	movs	r2, #32
 80089d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80089d6:	68fb      	ldr	r3, [r7, #12]
 80089d8:	2200      	movs	r2, #0
 80089da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80089de:	68fb      	ldr	r3, [r7, #12]
 80089e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80089e2:	f043 0204 	orr.w	r2, r3, #4
 80089e6:	68fb      	ldr	r3, [r7, #12]
 80089e8:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80089ea:	68fb      	ldr	r3, [r7, #12]
 80089ec:	2200      	movs	r2, #0
 80089ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80089f2:	2301      	movs	r3, #1
 80089f4:	e046      	b.n	8008a84 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80089fc:	d021      	beq.n	8008a42 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80089fe:	f7fe f9dd 	bl	8006dbc <HAL_GetTick>
 8008a02:	4602      	mov	r2, r0
 8008a04:	683b      	ldr	r3, [r7, #0]
 8008a06:	1ad3      	subs	r3, r2, r3
 8008a08:	687a      	ldr	r2, [r7, #4]
 8008a0a:	429a      	cmp	r2, r3
 8008a0c:	d302      	bcc.n	8008a14 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	2b00      	cmp	r3, #0
 8008a12:	d116      	bne.n	8008a42 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8008a14:	68fb      	ldr	r3, [r7, #12]
 8008a16:	2200      	movs	r2, #0
 8008a18:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8008a1a:	68fb      	ldr	r3, [r7, #12]
 8008a1c:	2220      	movs	r2, #32
 8008a1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008a22:	68fb      	ldr	r3, [r7, #12]
 8008a24:	2200      	movs	r2, #0
 8008a26:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008a2a:	68fb      	ldr	r3, [r7, #12]
 8008a2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a2e:	f043 0220 	orr.w	r2, r3, #32
 8008a32:	68fb      	ldr	r3, [r7, #12]
 8008a34:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008a36:	68fb      	ldr	r3, [r7, #12]
 8008a38:	2200      	movs	r2, #0
 8008a3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8008a3e:	2301      	movs	r3, #1
 8008a40:	e020      	b.n	8008a84 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8008a42:	68bb      	ldr	r3, [r7, #8]
 8008a44:	0c1b      	lsrs	r3, r3, #16
 8008a46:	b2db      	uxtb	r3, r3
 8008a48:	2b01      	cmp	r3, #1
 8008a4a:	d10c      	bne.n	8008a66 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8008a4c:	68fb      	ldr	r3, [r7, #12]
 8008a4e:	681b      	ldr	r3, [r3, #0]
 8008a50:	695b      	ldr	r3, [r3, #20]
 8008a52:	43da      	mvns	r2, r3
 8008a54:	68bb      	ldr	r3, [r7, #8]
 8008a56:	4013      	ands	r3, r2
 8008a58:	b29b      	uxth	r3, r3
 8008a5a:	2b00      	cmp	r3, #0
 8008a5c:	bf14      	ite	ne
 8008a5e:	2301      	movne	r3, #1
 8008a60:	2300      	moveq	r3, #0
 8008a62:	b2db      	uxtb	r3, r3
 8008a64:	e00b      	b.n	8008a7e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8008a66:	68fb      	ldr	r3, [r7, #12]
 8008a68:	681b      	ldr	r3, [r3, #0]
 8008a6a:	699b      	ldr	r3, [r3, #24]
 8008a6c:	43da      	mvns	r2, r3
 8008a6e:	68bb      	ldr	r3, [r7, #8]
 8008a70:	4013      	ands	r3, r2
 8008a72:	b29b      	uxth	r3, r3
 8008a74:	2b00      	cmp	r3, #0
 8008a76:	bf14      	ite	ne
 8008a78:	2301      	movne	r3, #1
 8008a7a:	2300      	moveq	r3, #0
 8008a7c:	b2db      	uxtb	r3, r3
 8008a7e:	2b00      	cmp	r3, #0
 8008a80:	d18d      	bne.n	800899e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8008a82:	2300      	movs	r3, #0
}
 8008a84:	4618      	mov	r0, r3
 8008a86:	3710      	adds	r7, #16
 8008a88:	46bd      	mov	sp, r7
 8008a8a:	bd80      	pop	{r7, pc}

08008a8c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008a8c:	b580      	push	{r7, lr}
 8008a8e:	b084      	sub	sp, #16
 8008a90:	af00      	add	r7, sp, #0
 8008a92:	60f8      	str	r0, [r7, #12]
 8008a94:	60b9      	str	r1, [r7, #8]
 8008a96:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8008a98:	e02d      	b.n	8008af6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8008a9a:	68f8      	ldr	r0, [r7, #12]
 8008a9c:	f000 f8ce 	bl	8008c3c <I2C_IsAcknowledgeFailed>
 8008aa0:	4603      	mov	r3, r0
 8008aa2:	2b00      	cmp	r3, #0
 8008aa4:	d001      	beq.n	8008aaa <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8008aa6:	2301      	movs	r3, #1
 8008aa8:	e02d      	b.n	8008b06 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008aaa:	68bb      	ldr	r3, [r7, #8]
 8008aac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008ab0:	d021      	beq.n	8008af6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008ab2:	f7fe f983 	bl	8006dbc <HAL_GetTick>
 8008ab6:	4602      	mov	r2, r0
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	1ad3      	subs	r3, r2, r3
 8008abc:	68ba      	ldr	r2, [r7, #8]
 8008abe:	429a      	cmp	r2, r3
 8008ac0:	d302      	bcc.n	8008ac8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8008ac2:	68bb      	ldr	r3, [r7, #8]
 8008ac4:	2b00      	cmp	r3, #0
 8008ac6:	d116      	bne.n	8008af6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8008ac8:	68fb      	ldr	r3, [r7, #12]
 8008aca:	2200      	movs	r2, #0
 8008acc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8008ace:	68fb      	ldr	r3, [r7, #12]
 8008ad0:	2220      	movs	r2, #32
 8008ad2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008ad6:	68fb      	ldr	r3, [r7, #12]
 8008ad8:	2200      	movs	r2, #0
 8008ada:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008ade:	68fb      	ldr	r3, [r7, #12]
 8008ae0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ae2:	f043 0220 	orr.w	r2, r3, #32
 8008ae6:	68fb      	ldr	r3, [r7, #12]
 8008ae8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008aea:	68fb      	ldr	r3, [r7, #12]
 8008aec:	2200      	movs	r2, #0
 8008aee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8008af2:	2301      	movs	r3, #1
 8008af4:	e007      	b.n	8008b06 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8008af6:	68fb      	ldr	r3, [r7, #12]
 8008af8:	681b      	ldr	r3, [r3, #0]
 8008afa:	695b      	ldr	r3, [r3, #20]
 8008afc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008b00:	2b80      	cmp	r3, #128	; 0x80
 8008b02:	d1ca      	bne.n	8008a9a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8008b04:	2300      	movs	r3, #0
}
 8008b06:	4618      	mov	r0, r3
 8008b08:	3710      	adds	r7, #16
 8008b0a:	46bd      	mov	sp, r7
 8008b0c:	bd80      	pop	{r7, pc}

08008b0e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008b0e:	b580      	push	{r7, lr}
 8008b10:	b084      	sub	sp, #16
 8008b12:	af00      	add	r7, sp, #0
 8008b14:	60f8      	str	r0, [r7, #12]
 8008b16:	60b9      	str	r1, [r7, #8]
 8008b18:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8008b1a:	e02d      	b.n	8008b78 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8008b1c:	68f8      	ldr	r0, [r7, #12]
 8008b1e:	f000 f88d 	bl	8008c3c <I2C_IsAcknowledgeFailed>
 8008b22:	4603      	mov	r3, r0
 8008b24:	2b00      	cmp	r3, #0
 8008b26:	d001      	beq.n	8008b2c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8008b28:	2301      	movs	r3, #1
 8008b2a:	e02d      	b.n	8008b88 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008b2c:	68bb      	ldr	r3, [r7, #8]
 8008b2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b32:	d021      	beq.n	8008b78 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008b34:	f7fe f942 	bl	8006dbc <HAL_GetTick>
 8008b38:	4602      	mov	r2, r0
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	1ad3      	subs	r3, r2, r3
 8008b3e:	68ba      	ldr	r2, [r7, #8]
 8008b40:	429a      	cmp	r2, r3
 8008b42:	d302      	bcc.n	8008b4a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8008b44:	68bb      	ldr	r3, [r7, #8]
 8008b46:	2b00      	cmp	r3, #0
 8008b48:	d116      	bne.n	8008b78 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8008b4a:	68fb      	ldr	r3, [r7, #12]
 8008b4c:	2200      	movs	r2, #0
 8008b4e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8008b50:	68fb      	ldr	r3, [r7, #12]
 8008b52:	2220      	movs	r2, #32
 8008b54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008b58:	68fb      	ldr	r3, [r7, #12]
 8008b5a:	2200      	movs	r2, #0
 8008b5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008b60:	68fb      	ldr	r3, [r7, #12]
 8008b62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b64:	f043 0220 	orr.w	r2, r3, #32
 8008b68:	68fb      	ldr	r3, [r7, #12]
 8008b6a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008b6c:	68fb      	ldr	r3, [r7, #12]
 8008b6e:	2200      	movs	r2, #0
 8008b70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8008b74:	2301      	movs	r3, #1
 8008b76:	e007      	b.n	8008b88 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8008b78:	68fb      	ldr	r3, [r7, #12]
 8008b7a:	681b      	ldr	r3, [r3, #0]
 8008b7c:	695b      	ldr	r3, [r3, #20]
 8008b7e:	f003 0304 	and.w	r3, r3, #4
 8008b82:	2b04      	cmp	r3, #4
 8008b84:	d1ca      	bne.n	8008b1c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8008b86:	2300      	movs	r3, #0
}
 8008b88:	4618      	mov	r0, r3
 8008b8a:	3710      	adds	r7, #16
 8008b8c:	46bd      	mov	sp, r7
 8008b8e:	bd80      	pop	{r7, pc}

08008b90 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008b90:	b580      	push	{r7, lr}
 8008b92:	b084      	sub	sp, #16
 8008b94:	af00      	add	r7, sp, #0
 8008b96:	60f8      	str	r0, [r7, #12]
 8008b98:	60b9      	str	r1, [r7, #8]
 8008b9a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8008b9c:	e042      	b.n	8008c24 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8008b9e:	68fb      	ldr	r3, [r7, #12]
 8008ba0:	681b      	ldr	r3, [r3, #0]
 8008ba2:	695b      	ldr	r3, [r3, #20]
 8008ba4:	f003 0310 	and.w	r3, r3, #16
 8008ba8:	2b10      	cmp	r3, #16
 8008baa:	d119      	bne.n	8008be0 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008bac:	68fb      	ldr	r3, [r7, #12]
 8008bae:	681b      	ldr	r3, [r3, #0]
 8008bb0:	f06f 0210 	mvn.w	r2, #16
 8008bb4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8008bb6:	68fb      	ldr	r3, [r7, #12]
 8008bb8:	2200      	movs	r2, #0
 8008bba:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8008bbc:	68fb      	ldr	r3, [r7, #12]
 8008bbe:	2220      	movs	r2, #32
 8008bc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008bc4:	68fb      	ldr	r3, [r7, #12]
 8008bc6:	2200      	movs	r2, #0
 8008bc8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8008bcc:	68fb      	ldr	r3, [r7, #12]
 8008bce:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008bd0:	68fb      	ldr	r3, [r7, #12]
 8008bd2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008bd4:	68fb      	ldr	r3, [r7, #12]
 8008bd6:	2200      	movs	r2, #0
 8008bd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8008bdc:	2301      	movs	r3, #1
 8008bde:	e029      	b.n	8008c34 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008be0:	f7fe f8ec 	bl	8006dbc <HAL_GetTick>
 8008be4:	4602      	mov	r2, r0
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	1ad3      	subs	r3, r2, r3
 8008bea:	68ba      	ldr	r2, [r7, #8]
 8008bec:	429a      	cmp	r2, r3
 8008bee:	d302      	bcc.n	8008bf6 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8008bf0:	68bb      	ldr	r3, [r7, #8]
 8008bf2:	2b00      	cmp	r3, #0
 8008bf4:	d116      	bne.n	8008c24 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8008bf6:	68fb      	ldr	r3, [r7, #12]
 8008bf8:	2200      	movs	r2, #0
 8008bfa:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8008bfc:	68fb      	ldr	r3, [r7, #12]
 8008bfe:	2220      	movs	r2, #32
 8008c00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008c04:	68fb      	ldr	r3, [r7, #12]
 8008c06:	2200      	movs	r2, #0
 8008c08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008c0c:	68fb      	ldr	r3, [r7, #12]
 8008c0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c10:	f043 0220 	orr.w	r2, r3, #32
 8008c14:	68fb      	ldr	r3, [r7, #12]
 8008c16:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008c18:	68fb      	ldr	r3, [r7, #12]
 8008c1a:	2200      	movs	r2, #0
 8008c1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8008c20:	2301      	movs	r3, #1
 8008c22:	e007      	b.n	8008c34 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8008c24:	68fb      	ldr	r3, [r7, #12]
 8008c26:	681b      	ldr	r3, [r3, #0]
 8008c28:	695b      	ldr	r3, [r3, #20]
 8008c2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008c2e:	2b40      	cmp	r3, #64	; 0x40
 8008c30:	d1b5      	bne.n	8008b9e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8008c32:	2300      	movs	r3, #0
}
 8008c34:	4618      	mov	r0, r3
 8008c36:	3710      	adds	r7, #16
 8008c38:	46bd      	mov	sp, r7
 8008c3a:	bd80      	pop	{r7, pc}

08008c3c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8008c3c:	b480      	push	{r7}
 8008c3e:	b083      	sub	sp, #12
 8008c40:	af00      	add	r7, sp, #0
 8008c42:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	681b      	ldr	r3, [r3, #0]
 8008c48:	695b      	ldr	r3, [r3, #20]
 8008c4a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008c4e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008c52:	d11b      	bne.n	8008c8c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	681b      	ldr	r3, [r3, #0]
 8008c58:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8008c5c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	2200      	movs	r2, #0
 8008c62:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	2220      	movs	r2, #32
 8008c68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	2200      	movs	r2, #0
 8008c70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c78:	f043 0204 	orr.w	r2, r3, #4
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	2200      	movs	r2, #0
 8008c84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8008c88:	2301      	movs	r3, #1
 8008c8a:	e000      	b.n	8008c8e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8008c8c:	2300      	movs	r3, #0
}
 8008c8e:	4618      	mov	r0, r3
 8008c90:	370c      	adds	r7, #12
 8008c92:	46bd      	mov	sp, r7
 8008c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c98:	4770      	bx	lr

08008c9a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8008c9a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008c9c:	b08f      	sub	sp, #60	; 0x3c
 8008c9e:	af0a      	add	r7, sp, #40	; 0x28
 8008ca0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	2b00      	cmp	r3, #0
 8008ca6:	d101      	bne.n	8008cac <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8008ca8:	2301      	movs	r3, #1
 8008caa:	e116      	b.n	8008eda <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	681b      	ldr	r3, [r3, #0]
 8008cb0:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8008cb8:	b2db      	uxtb	r3, r3
 8008cba:	2b00      	cmp	r3, #0
 8008cbc:	d106      	bne.n	8008ccc <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	2200      	movs	r2, #0
 8008cc2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8008cc6:	6878      	ldr	r0, [r7, #4]
 8008cc8:	f006 fed6 	bl	800fa78 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	2203      	movs	r2, #3
 8008cd0:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8008cd4:	68bb      	ldr	r3, [r7, #8]
 8008cd6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008cd8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008cdc:	2b00      	cmp	r3, #0
 8008cde:	d102      	bne.n	8008ce6 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	2200      	movs	r2, #0
 8008ce4:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	681b      	ldr	r3, [r3, #0]
 8008cea:	4618      	mov	r0, r3
 8008cec:	f003 f97d 	bl	800bfea <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	681b      	ldr	r3, [r3, #0]
 8008cf4:	603b      	str	r3, [r7, #0]
 8008cf6:	687e      	ldr	r6, [r7, #4]
 8008cf8:	466d      	mov	r5, sp
 8008cfa:	f106 0410 	add.w	r4, r6, #16
 8008cfe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8008d00:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8008d02:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8008d04:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8008d06:	e894 0003 	ldmia.w	r4, {r0, r1}
 8008d0a:	e885 0003 	stmia.w	r5, {r0, r1}
 8008d0e:	1d33      	adds	r3, r6, #4
 8008d10:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008d12:	6838      	ldr	r0, [r7, #0]
 8008d14:	f003 f854 	bl	800bdc0 <USB_CoreInit>
 8008d18:	4603      	mov	r3, r0
 8008d1a:	2b00      	cmp	r3, #0
 8008d1c:	d005      	beq.n	8008d2a <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	2202      	movs	r2, #2
 8008d22:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8008d26:	2301      	movs	r3, #1
 8008d28:	e0d7      	b.n	8008eda <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	681b      	ldr	r3, [r3, #0]
 8008d2e:	2100      	movs	r1, #0
 8008d30:	4618      	mov	r0, r3
 8008d32:	f003 f96b 	bl	800c00c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008d36:	2300      	movs	r3, #0
 8008d38:	73fb      	strb	r3, [r7, #15]
 8008d3a:	e04a      	b.n	8008dd2 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8008d3c:	7bfa      	ldrb	r2, [r7, #15]
 8008d3e:	6879      	ldr	r1, [r7, #4]
 8008d40:	4613      	mov	r3, r2
 8008d42:	00db      	lsls	r3, r3, #3
 8008d44:	4413      	add	r3, r2
 8008d46:	009b      	lsls	r3, r3, #2
 8008d48:	440b      	add	r3, r1
 8008d4a:	333d      	adds	r3, #61	; 0x3d
 8008d4c:	2201      	movs	r2, #1
 8008d4e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8008d50:	7bfa      	ldrb	r2, [r7, #15]
 8008d52:	6879      	ldr	r1, [r7, #4]
 8008d54:	4613      	mov	r3, r2
 8008d56:	00db      	lsls	r3, r3, #3
 8008d58:	4413      	add	r3, r2
 8008d5a:	009b      	lsls	r3, r3, #2
 8008d5c:	440b      	add	r3, r1
 8008d5e:	333c      	adds	r3, #60	; 0x3c
 8008d60:	7bfa      	ldrb	r2, [r7, #15]
 8008d62:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8008d64:	7bfa      	ldrb	r2, [r7, #15]
 8008d66:	7bfb      	ldrb	r3, [r7, #15]
 8008d68:	b298      	uxth	r0, r3
 8008d6a:	6879      	ldr	r1, [r7, #4]
 8008d6c:	4613      	mov	r3, r2
 8008d6e:	00db      	lsls	r3, r3, #3
 8008d70:	4413      	add	r3, r2
 8008d72:	009b      	lsls	r3, r3, #2
 8008d74:	440b      	add	r3, r1
 8008d76:	3344      	adds	r3, #68	; 0x44
 8008d78:	4602      	mov	r2, r0
 8008d7a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8008d7c:	7bfa      	ldrb	r2, [r7, #15]
 8008d7e:	6879      	ldr	r1, [r7, #4]
 8008d80:	4613      	mov	r3, r2
 8008d82:	00db      	lsls	r3, r3, #3
 8008d84:	4413      	add	r3, r2
 8008d86:	009b      	lsls	r3, r3, #2
 8008d88:	440b      	add	r3, r1
 8008d8a:	3340      	adds	r3, #64	; 0x40
 8008d8c:	2200      	movs	r2, #0
 8008d8e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8008d90:	7bfa      	ldrb	r2, [r7, #15]
 8008d92:	6879      	ldr	r1, [r7, #4]
 8008d94:	4613      	mov	r3, r2
 8008d96:	00db      	lsls	r3, r3, #3
 8008d98:	4413      	add	r3, r2
 8008d9a:	009b      	lsls	r3, r3, #2
 8008d9c:	440b      	add	r3, r1
 8008d9e:	3348      	adds	r3, #72	; 0x48
 8008da0:	2200      	movs	r2, #0
 8008da2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8008da4:	7bfa      	ldrb	r2, [r7, #15]
 8008da6:	6879      	ldr	r1, [r7, #4]
 8008da8:	4613      	mov	r3, r2
 8008daa:	00db      	lsls	r3, r3, #3
 8008dac:	4413      	add	r3, r2
 8008dae:	009b      	lsls	r3, r3, #2
 8008db0:	440b      	add	r3, r1
 8008db2:	334c      	adds	r3, #76	; 0x4c
 8008db4:	2200      	movs	r2, #0
 8008db6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8008db8:	7bfa      	ldrb	r2, [r7, #15]
 8008dba:	6879      	ldr	r1, [r7, #4]
 8008dbc:	4613      	mov	r3, r2
 8008dbe:	00db      	lsls	r3, r3, #3
 8008dc0:	4413      	add	r3, r2
 8008dc2:	009b      	lsls	r3, r3, #2
 8008dc4:	440b      	add	r3, r1
 8008dc6:	3354      	adds	r3, #84	; 0x54
 8008dc8:	2200      	movs	r2, #0
 8008dca:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008dcc:	7bfb      	ldrb	r3, [r7, #15]
 8008dce:	3301      	adds	r3, #1
 8008dd0:	73fb      	strb	r3, [r7, #15]
 8008dd2:	7bfa      	ldrb	r2, [r7, #15]
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	685b      	ldr	r3, [r3, #4]
 8008dd8:	429a      	cmp	r2, r3
 8008dda:	d3af      	bcc.n	8008d3c <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008ddc:	2300      	movs	r3, #0
 8008dde:	73fb      	strb	r3, [r7, #15]
 8008de0:	e044      	b.n	8008e6c <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8008de2:	7bfa      	ldrb	r2, [r7, #15]
 8008de4:	6879      	ldr	r1, [r7, #4]
 8008de6:	4613      	mov	r3, r2
 8008de8:	00db      	lsls	r3, r3, #3
 8008dea:	4413      	add	r3, r2
 8008dec:	009b      	lsls	r3, r3, #2
 8008dee:	440b      	add	r3, r1
 8008df0:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8008df4:	2200      	movs	r2, #0
 8008df6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8008df8:	7bfa      	ldrb	r2, [r7, #15]
 8008dfa:	6879      	ldr	r1, [r7, #4]
 8008dfc:	4613      	mov	r3, r2
 8008dfe:	00db      	lsls	r3, r3, #3
 8008e00:	4413      	add	r3, r2
 8008e02:	009b      	lsls	r3, r3, #2
 8008e04:	440b      	add	r3, r1
 8008e06:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8008e0a:	7bfa      	ldrb	r2, [r7, #15]
 8008e0c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8008e0e:	7bfa      	ldrb	r2, [r7, #15]
 8008e10:	6879      	ldr	r1, [r7, #4]
 8008e12:	4613      	mov	r3, r2
 8008e14:	00db      	lsls	r3, r3, #3
 8008e16:	4413      	add	r3, r2
 8008e18:	009b      	lsls	r3, r3, #2
 8008e1a:	440b      	add	r3, r1
 8008e1c:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8008e20:	2200      	movs	r2, #0
 8008e22:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8008e24:	7bfa      	ldrb	r2, [r7, #15]
 8008e26:	6879      	ldr	r1, [r7, #4]
 8008e28:	4613      	mov	r3, r2
 8008e2a:	00db      	lsls	r3, r3, #3
 8008e2c:	4413      	add	r3, r2
 8008e2e:	009b      	lsls	r3, r3, #2
 8008e30:	440b      	add	r3, r1
 8008e32:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8008e36:	2200      	movs	r2, #0
 8008e38:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8008e3a:	7bfa      	ldrb	r2, [r7, #15]
 8008e3c:	6879      	ldr	r1, [r7, #4]
 8008e3e:	4613      	mov	r3, r2
 8008e40:	00db      	lsls	r3, r3, #3
 8008e42:	4413      	add	r3, r2
 8008e44:	009b      	lsls	r3, r3, #2
 8008e46:	440b      	add	r3, r1
 8008e48:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8008e4c:	2200      	movs	r2, #0
 8008e4e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8008e50:	7bfa      	ldrb	r2, [r7, #15]
 8008e52:	6879      	ldr	r1, [r7, #4]
 8008e54:	4613      	mov	r3, r2
 8008e56:	00db      	lsls	r3, r3, #3
 8008e58:	4413      	add	r3, r2
 8008e5a:	009b      	lsls	r3, r3, #2
 8008e5c:	440b      	add	r3, r1
 8008e5e:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8008e62:	2200      	movs	r2, #0
 8008e64:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008e66:	7bfb      	ldrb	r3, [r7, #15]
 8008e68:	3301      	adds	r3, #1
 8008e6a:	73fb      	strb	r3, [r7, #15]
 8008e6c:	7bfa      	ldrb	r2, [r7, #15]
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	685b      	ldr	r3, [r3, #4]
 8008e72:	429a      	cmp	r2, r3
 8008e74:	d3b5      	bcc.n	8008de2 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	681b      	ldr	r3, [r3, #0]
 8008e7a:	603b      	str	r3, [r7, #0]
 8008e7c:	687e      	ldr	r6, [r7, #4]
 8008e7e:	466d      	mov	r5, sp
 8008e80:	f106 0410 	add.w	r4, r6, #16
 8008e84:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8008e86:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8008e88:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8008e8a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8008e8c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8008e90:	e885 0003 	stmia.w	r5, {r0, r1}
 8008e94:	1d33      	adds	r3, r6, #4
 8008e96:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008e98:	6838      	ldr	r0, [r7, #0]
 8008e9a:	f003 f903 	bl	800c0a4 <USB_DevInit>
 8008e9e:	4603      	mov	r3, r0
 8008ea0:	2b00      	cmp	r3, #0
 8008ea2:	d005      	beq.n	8008eb0 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	2202      	movs	r2, #2
 8008ea8:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8008eac:	2301      	movs	r3, #1
 8008eae:	e014      	b.n	8008eda <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	2200      	movs	r2, #0
 8008eb4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	2201      	movs	r2, #1
 8008ebc:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ec4:	2b01      	cmp	r3, #1
 8008ec6:	d102      	bne.n	8008ece <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8008ec8:	6878      	ldr	r0, [r7, #4]
 8008eca:	f001 f98b 	bl	800a1e4 <HAL_PCDEx_ActivateLPM>
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	681b      	ldr	r3, [r3, #0]
 8008ed2:	4618      	mov	r0, r3
 8008ed4:	f004 fa45 	bl	800d362 <USB_DevDisconnect>

  return HAL_OK;
 8008ed8:	2300      	movs	r3, #0
}
 8008eda:	4618      	mov	r0, r3
 8008edc:	3714      	adds	r7, #20
 8008ede:	46bd      	mov	sp, r7
 8008ee0:	bdf0      	pop	{r4, r5, r6, r7, pc}

08008ee2 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8008ee2:	b580      	push	{r7, lr}
 8008ee4:	b084      	sub	sp, #16
 8008ee6:	af00      	add	r7, sp, #0
 8008ee8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	681b      	ldr	r3, [r3, #0]
 8008eee:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8008ef6:	2b01      	cmp	r3, #1
 8008ef8:	d101      	bne.n	8008efe <HAL_PCD_Start+0x1c>
 8008efa:	2302      	movs	r3, #2
 8008efc:	e020      	b.n	8008f40 <HAL_PCD_Start+0x5e>
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	2201      	movs	r2, #1
 8008f02:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f0a:	2b01      	cmp	r3, #1
 8008f0c:	d109      	bne.n	8008f22 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8008f12:	2b01      	cmp	r3, #1
 8008f14:	d005      	beq.n	8008f22 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8008f16:	68fb      	ldr	r3, [r7, #12]
 8008f18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f1a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8008f1e:	68fb      	ldr	r3, [r7, #12]
 8008f20:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	681b      	ldr	r3, [r3, #0]
 8008f26:	4618      	mov	r0, r3
 8008f28:	f003 f84e 	bl	800bfc8 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	681b      	ldr	r3, [r3, #0]
 8008f30:	4618      	mov	r0, r3
 8008f32:	f004 f9f5 	bl	800d320 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	2200      	movs	r2, #0
 8008f3a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8008f3e:	2300      	movs	r3, #0
}
 8008f40:	4618      	mov	r0, r3
 8008f42:	3710      	adds	r7, #16
 8008f44:	46bd      	mov	sp, r7
 8008f46:	bd80      	pop	{r7, pc}

08008f48 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8008f48:	b590      	push	{r4, r7, lr}
 8008f4a:	b08d      	sub	sp, #52	; 0x34
 8008f4c:	af00      	add	r7, sp, #0
 8008f4e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	681b      	ldr	r3, [r3, #0]
 8008f54:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008f56:	6a3b      	ldr	r3, [r7, #32]
 8008f58:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	681b      	ldr	r3, [r3, #0]
 8008f5e:	4618      	mov	r0, r3
 8008f60:	f004 fab3 	bl	800d4ca <USB_GetMode>
 8008f64:	4603      	mov	r3, r0
 8008f66:	2b00      	cmp	r3, #0
 8008f68:	f040 84b7 	bne.w	80098da <HAL_PCD_IRQHandler+0x992>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	681b      	ldr	r3, [r3, #0]
 8008f70:	4618      	mov	r0, r3
 8008f72:	f004 fa17 	bl	800d3a4 <USB_ReadInterrupts>
 8008f76:	4603      	mov	r3, r0
 8008f78:	2b00      	cmp	r3, #0
 8008f7a:	f000 84ad 	beq.w	80098d8 <HAL_PCD_IRQHandler+0x990>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8008f7e:	69fb      	ldr	r3, [r7, #28]
 8008f80:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008f84:	689b      	ldr	r3, [r3, #8]
 8008f86:	0a1b      	lsrs	r3, r3, #8
 8008f88:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	681b      	ldr	r3, [r3, #0]
 8008f96:	4618      	mov	r0, r3
 8008f98:	f004 fa04 	bl	800d3a4 <USB_ReadInterrupts>
 8008f9c:	4603      	mov	r3, r0
 8008f9e:	f003 0302 	and.w	r3, r3, #2
 8008fa2:	2b02      	cmp	r3, #2
 8008fa4:	d107      	bne.n	8008fb6 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	681b      	ldr	r3, [r3, #0]
 8008faa:	695a      	ldr	r2, [r3, #20]
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	681b      	ldr	r3, [r3, #0]
 8008fb0:	f002 0202 	and.w	r2, r2, #2
 8008fb4:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	681b      	ldr	r3, [r3, #0]
 8008fba:	4618      	mov	r0, r3
 8008fbc:	f004 f9f2 	bl	800d3a4 <USB_ReadInterrupts>
 8008fc0:	4603      	mov	r3, r0
 8008fc2:	f003 0310 	and.w	r3, r3, #16
 8008fc6:	2b10      	cmp	r3, #16
 8008fc8:	d161      	bne.n	800908e <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	681b      	ldr	r3, [r3, #0]
 8008fce:	699a      	ldr	r2, [r3, #24]
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	681b      	ldr	r3, [r3, #0]
 8008fd4:	f022 0210 	bic.w	r2, r2, #16
 8008fd8:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8008fda:	6a3b      	ldr	r3, [r7, #32]
 8008fdc:	6a1b      	ldr	r3, [r3, #32]
 8008fde:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8008fe0:	69bb      	ldr	r3, [r7, #24]
 8008fe2:	f003 020f 	and.w	r2, r3, #15
 8008fe6:	4613      	mov	r3, r2
 8008fe8:	00db      	lsls	r3, r3, #3
 8008fea:	4413      	add	r3, r2
 8008fec:	009b      	lsls	r3, r3, #2
 8008fee:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8008ff2:	687a      	ldr	r2, [r7, #4]
 8008ff4:	4413      	add	r3, r2
 8008ff6:	3304      	adds	r3, #4
 8008ff8:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8008ffa:	69bb      	ldr	r3, [r7, #24]
 8008ffc:	0c5b      	lsrs	r3, r3, #17
 8008ffe:	f003 030f 	and.w	r3, r3, #15
 8009002:	2b02      	cmp	r3, #2
 8009004:	d124      	bne.n	8009050 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8009006:	69ba      	ldr	r2, [r7, #24]
 8009008:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800900c:	4013      	ands	r3, r2
 800900e:	2b00      	cmp	r3, #0
 8009010:	d035      	beq.n	800907e <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8009012:	697b      	ldr	r3, [r7, #20]
 8009014:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8009016:	69bb      	ldr	r3, [r7, #24]
 8009018:	091b      	lsrs	r3, r3, #4
 800901a:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800901c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8009020:	b29b      	uxth	r3, r3
 8009022:	461a      	mov	r2, r3
 8009024:	6a38      	ldr	r0, [r7, #32]
 8009026:	f004 f829 	bl	800d07c <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800902a:	697b      	ldr	r3, [r7, #20]
 800902c:	691a      	ldr	r2, [r3, #16]
 800902e:	69bb      	ldr	r3, [r7, #24]
 8009030:	091b      	lsrs	r3, r3, #4
 8009032:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8009036:	441a      	add	r2, r3
 8009038:	697b      	ldr	r3, [r7, #20]
 800903a:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800903c:	697b      	ldr	r3, [r7, #20]
 800903e:	6a1a      	ldr	r2, [r3, #32]
 8009040:	69bb      	ldr	r3, [r7, #24]
 8009042:	091b      	lsrs	r3, r3, #4
 8009044:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8009048:	441a      	add	r2, r3
 800904a:	697b      	ldr	r3, [r7, #20]
 800904c:	621a      	str	r2, [r3, #32]
 800904e:	e016      	b.n	800907e <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8009050:	69bb      	ldr	r3, [r7, #24]
 8009052:	0c5b      	lsrs	r3, r3, #17
 8009054:	f003 030f 	and.w	r3, r3, #15
 8009058:	2b06      	cmp	r3, #6
 800905a:	d110      	bne.n	800907e <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8009062:	2208      	movs	r2, #8
 8009064:	4619      	mov	r1, r3
 8009066:	6a38      	ldr	r0, [r7, #32]
 8009068:	f004 f808 	bl	800d07c <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800906c:	697b      	ldr	r3, [r7, #20]
 800906e:	6a1a      	ldr	r2, [r3, #32]
 8009070:	69bb      	ldr	r3, [r7, #24]
 8009072:	091b      	lsrs	r3, r3, #4
 8009074:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8009078:	441a      	add	r2, r3
 800907a:	697b      	ldr	r3, [r7, #20]
 800907c:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	681b      	ldr	r3, [r3, #0]
 8009082:	699a      	ldr	r2, [r3, #24]
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	681b      	ldr	r3, [r3, #0]
 8009088:	f042 0210 	orr.w	r2, r2, #16
 800908c:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	681b      	ldr	r3, [r3, #0]
 8009092:	4618      	mov	r0, r3
 8009094:	f004 f986 	bl	800d3a4 <USB_ReadInterrupts>
 8009098:	4603      	mov	r3, r0
 800909a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800909e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80090a2:	f040 80a7 	bne.w	80091f4 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80090a6:	2300      	movs	r3, #0
 80090a8:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	681b      	ldr	r3, [r3, #0]
 80090ae:	4618      	mov	r0, r3
 80090b0:	f004 f98b 	bl	800d3ca <USB_ReadDevAllOutEpInterrupt>
 80090b4:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80090b6:	e099      	b.n	80091ec <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80090b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090ba:	f003 0301 	and.w	r3, r3, #1
 80090be:	2b00      	cmp	r3, #0
 80090c0:	f000 808e 	beq.w	80091e0 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	681b      	ldr	r3, [r3, #0]
 80090c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80090ca:	b2d2      	uxtb	r2, r2
 80090cc:	4611      	mov	r1, r2
 80090ce:	4618      	mov	r0, r3
 80090d0:	f004 f9af 	bl	800d432 <USB_ReadDevOutEPInterrupt>
 80090d4:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80090d6:	693b      	ldr	r3, [r7, #16]
 80090d8:	f003 0301 	and.w	r3, r3, #1
 80090dc:	2b00      	cmp	r3, #0
 80090de:	d00c      	beq.n	80090fa <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80090e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090e2:	015a      	lsls	r2, r3, #5
 80090e4:	69fb      	ldr	r3, [r7, #28]
 80090e6:	4413      	add	r3, r2
 80090e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80090ec:	461a      	mov	r2, r3
 80090ee:	2301      	movs	r3, #1
 80090f0:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80090f2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80090f4:	6878      	ldr	r0, [r7, #4]
 80090f6:	f000 feef 	bl	8009ed8 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80090fa:	693b      	ldr	r3, [r7, #16]
 80090fc:	f003 0308 	and.w	r3, r3, #8
 8009100:	2b00      	cmp	r3, #0
 8009102:	d00c      	beq.n	800911e <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8009104:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009106:	015a      	lsls	r2, r3, #5
 8009108:	69fb      	ldr	r3, [r7, #28]
 800910a:	4413      	add	r3, r2
 800910c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009110:	461a      	mov	r2, r3
 8009112:	2308      	movs	r3, #8
 8009114:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8009116:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009118:	6878      	ldr	r0, [r7, #4]
 800911a:	f000 ffc5 	bl	800a0a8 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800911e:	693b      	ldr	r3, [r7, #16]
 8009120:	f003 0310 	and.w	r3, r3, #16
 8009124:	2b00      	cmp	r3, #0
 8009126:	d008      	beq.n	800913a <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8009128:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800912a:	015a      	lsls	r2, r3, #5
 800912c:	69fb      	ldr	r3, [r7, #28]
 800912e:	4413      	add	r3, r2
 8009130:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009134:	461a      	mov	r2, r3
 8009136:	2310      	movs	r3, #16
 8009138:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 800913a:	693b      	ldr	r3, [r7, #16]
 800913c:	f003 0302 	and.w	r3, r3, #2
 8009140:	2b00      	cmp	r3, #0
 8009142:	d030      	beq.n	80091a6 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8009144:	6a3b      	ldr	r3, [r7, #32]
 8009146:	695b      	ldr	r3, [r3, #20]
 8009148:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800914c:	2b80      	cmp	r3, #128	; 0x80
 800914e:	d109      	bne.n	8009164 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8009150:	69fb      	ldr	r3, [r7, #28]
 8009152:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009156:	685b      	ldr	r3, [r3, #4]
 8009158:	69fa      	ldr	r2, [r7, #28]
 800915a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800915e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8009162:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8009164:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009166:	4613      	mov	r3, r2
 8009168:	00db      	lsls	r3, r3, #3
 800916a:	4413      	add	r3, r2
 800916c:	009b      	lsls	r3, r3, #2
 800916e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8009172:	687a      	ldr	r2, [r7, #4]
 8009174:	4413      	add	r3, r2
 8009176:	3304      	adds	r3, #4
 8009178:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800917a:	697b      	ldr	r3, [r7, #20]
 800917c:	78db      	ldrb	r3, [r3, #3]
 800917e:	2b01      	cmp	r3, #1
 8009180:	d108      	bne.n	8009194 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8009182:	697b      	ldr	r3, [r7, #20]
 8009184:	2200      	movs	r2, #0
 8009186:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8009188:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800918a:	b2db      	uxtb	r3, r3
 800918c:	4619      	mov	r1, r3
 800918e:	6878      	ldr	r0, [r7, #4]
 8009190:	f006 fd8e 	bl	800fcb0 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8009194:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009196:	015a      	lsls	r2, r3, #5
 8009198:	69fb      	ldr	r3, [r7, #28]
 800919a:	4413      	add	r3, r2
 800919c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80091a0:	461a      	mov	r2, r3
 80091a2:	2302      	movs	r3, #2
 80091a4:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80091a6:	693b      	ldr	r3, [r7, #16]
 80091a8:	f003 0320 	and.w	r3, r3, #32
 80091ac:	2b00      	cmp	r3, #0
 80091ae:	d008      	beq.n	80091c2 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80091b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091b2:	015a      	lsls	r2, r3, #5
 80091b4:	69fb      	ldr	r3, [r7, #28]
 80091b6:	4413      	add	r3, r2
 80091b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80091bc:	461a      	mov	r2, r3
 80091be:	2320      	movs	r3, #32
 80091c0:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80091c2:	693b      	ldr	r3, [r7, #16]
 80091c4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80091c8:	2b00      	cmp	r3, #0
 80091ca:	d009      	beq.n	80091e0 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80091cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091ce:	015a      	lsls	r2, r3, #5
 80091d0:	69fb      	ldr	r3, [r7, #28]
 80091d2:	4413      	add	r3, r2
 80091d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80091d8:	461a      	mov	r2, r3
 80091da:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80091de:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80091e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091e2:	3301      	adds	r3, #1
 80091e4:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80091e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091e8:	085b      	lsrs	r3, r3, #1
 80091ea:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80091ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091ee:	2b00      	cmp	r3, #0
 80091f0:	f47f af62 	bne.w	80090b8 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	681b      	ldr	r3, [r3, #0]
 80091f8:	4618      	mov	r0, r3
 80091fa:	f004 f8d3 	bl	800d3a4 <USB_ReadInterrupts>
 80091fe:	4603      	mov	r3, r0
 8009200:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009204:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8009208:	f040 80db 	bne.w	80093c2 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	681b      	ldr	r3, [r3, #0]
 8009210:	4618      	mov	r0, r3
 8009212:	f004 f8f4 	bl	800d3fe <USB_ReadDevAllInEpInterrupt>
 8009216:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8009218:	2300      	movs	r3, #0
 800921a:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 800921c:	e0cd      	b.n	80093ba <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800921e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009220:	f003 0301 	and.w	r3, r3, #1
 8009224:	2b00      	cmp	r3, #0
 8009226:	f000 80c2 	beq.w	80093ae <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	681b      	ldr	r3, [r3, #0]
 800922e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009230:	b2d2      	uxtb	r2, r2
 8009232:	4611      	mov	r1, r2
 8009234:	4618      	mov	r0, r3
 8009236:	f004 f91a 	bl	800d46e <USB_ReadDevInEPInterrupt>
 800923a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800923c:	693b      	ldr	r3, [r7, #16]
 800923e:	f003 0301 	and.w	r3, r3, #1
 8009242:	2b00      	cmp	r3, #0
 8009244:	d057      	beq.n	80092f6 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8009246:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009248:	f003 030f 	and.w	r3, r3, #15
 800924c:	2201      	movs	r2, #1
 800924e:	fa02 f303 	lsl.w	r3, r2, r3
 8009252:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8009254:	69fb      	ldr	r3, [r7, #28]
 8009256:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800925a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800925c:	68fb      	ldr	r3, [r7, #12]
 800925e:	43db      	mvns	r3, r3
 8009260:	69f9      	ldr	r1, [r7, #28]
 8009262:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009266:	4013      	ands	r3, r2
 8009268:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800926a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800926c:	015a      	lsls	r2, r3, #5
 800926e:	69fb      	ldr	r3, [r7, #28]
 8009270:	4413      	add	r3, r2
 8009272:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009276:	461a      	mov	r2, r3
 8009278:	2301      	movs	r3, #1
 800927a:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	691b      	ldr	r3, [r3, #16]
 8009280:	2b01      	cmp	r3, #1
 8009282:	d132      	bne.n	80092ea <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8009284:	6879      	ldr	r1, [r7, #4]
 8009286:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009288:	4613      	mov	r3, r2
 800928a:	00db      	lsls	r3, r3, #3
 800928c:	4413      	add	r3, r2
 800928e:	009b      	lsls	r3, r3, #2
 8009290:	440b      	add	r3, r1
 8009292:	334c      	adds	r3, #76	; 0x4c
 8009294:	6819      	ldr	r1, [r3, #0]
 8009296:	6878      	ldr	r0, [r7, #4]
 8009298:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800929a:	4613      	mov	r3, r2
 800929c:	00db      	lsls	r3, r3, #3
 800929e:	4413      	add	r3, r2
 80092a0:	009b      	lsls	r3, r3, #2
 80092a2:	4403      	add	r3, r0
 80092a4:	3348      	adds	r3, #72	; 0x48
 80092a6:	681b      	ldr	r3, [r3, #0]
 80092a8:	4419      	add	r1, r3
 80092aa:	6878      	ldr	r0, [r7, #4]
 80092ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80092ae:	4613      	mov	r3, r2
 80092b0:	00db      	lsls	r3, r3, #3
 80092b2:	4413      	add	r3, r2
 80092b4:	009b      	lsls	r3, r3, #2
 80092b6:	4403      	add	r3, r0
 80092b8:	334c      	adds	r3, #76	; 0x4c
 80092ba:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80092bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092be:	2b00      	cmp	r3, #0
 80092c0:	d113      	bne.n	80092ea <HAL_PCD_IRQHandler+0x3a2>
 80092c2:	6879      	ldr	r1, [r7, #4]
 80092c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80092c6:	4613      	mov	r3, r2
 80092c8:	00db      	lsls	r3, r3, #3
 80092ca:	4413      	add	r3, r2
 80092cc:	009b      	lsls	r3, r3, #2
 80092ce:	440b      	add	r3, r1
 80092d0:	3354      	adds	r3, #84	; 0x54
 80092d2:	681b      	ldr	r3, [r3, #0]
 80092d4:	2b00      	cmp	r3, #0
 80092d6:	d108      	bne.n	80092ea <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	6818      	ldr	r0, [r3, #0]
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80092e2:	461a      	mov	r2, r3
 80092e4:	2101      	movs	r1, #1
 80092e6:	f004 f921 	bl	800d52c <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80092ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092ec:	b2db      	uxtb	r3, r3
 80092ee:	4619      	mov	r1, r3
 80092f0:	6878      	ldr	r0, [r7, #4]
 80092f2:	f006 fc58 	bl	800fba6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80092f6:	693b      	ldr	r3, [r7, #16]
 80092f8:	f003 0308 	and.w	r3, r3, #8
 80092fc:	2b00      	cmp	r3, #0
 80092fe:	d008      	beq.n	8009312 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8009300:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009302:	015a      	lsls	r2, r3, #5
 8009304:	69fb      	ldr	r3, [r7, #28]
 8009306:	4413      	add	r3, r2
 8009308:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800930c:	461a      	mov	r2, r3
 800930e:	2308      	movs	r3, #8
 8009310:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8009312:	693b      	ldr	r3, [r7, #16]
 8009314:	f003 0310 	and.w	r3, r3, #16
 8009318:	2b00      	cmp	r3, #0
 800931a:	d008      	beq.n	800932e <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800931c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800931e:	015a      	lsls	r2, r3, #5
 8009320:	69fb      	ldr	r3, [r7, #28]
 8009322:	4413      	add	r3, r2
 8009324:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009328:	461a      	mov	r2, r3
 800932a:	2310      	movs	r3, #16
 800932c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800932e:	693b      	ldr	r3, [r7, #16]
 8009330:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009334:	2b00      	cmp	r3, #0
 8009336:	d008      	beq.n	800934a <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8009338:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800933a:	015a      	lsls	r2, r3, #5
 800933c:	69fb      	ldr	r3, [r7, #28]
 800933e:	4413      	add	r3, r2
 8009340:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009344:	461a      	mov	r2, r3
 8009346:	2340      	movs	r3, #64	; 0x40
 8009348:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800934a:	693b      	ldr	r3, [r7, #16]
 800934c:	f003 0302 	and.w	r3, r3, #2
 8009350:	2b00      	cmp	r3, #0
 8009352:	d023      	beq.n	800939c <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8009354:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009356:	6a38      	ldr	r0, [r7, #32]
 8009358:	f003 f802 	bl	800c360 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 800935c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800935e:	4613      	mov	r3, r2
 8009360:	00db      	lsls	r3, r3, #3
 8009362:	4413      	add	r3, r2
 8009364:	009b      	lsls	r3, r3, #2
 8009366:	3338      	adds	r3, #56	; 0x38
 8009368:	687a      	ldr	r2, [r7, #4]
 800936a:	4413      	add	r3, r2
 800936c:	3304      	adds	r3, #4
 800936e:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8009370:	697b      	ldr	r3, [r7, #20]
 8009372:	78db      	ldrb	r3, [r3, #3]
 8009374:	2b01      	cmp	r3, #1
 8009376:	d108      	bne.n	800938a <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8009378:	697b      	ldr	r3, [r7, #20]
 800937a:	2200      	movs	r2, #0
 800937c:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800937e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009380:	b2db      	uxtb	r3, r3
 8009382:	4619      	mov	r1, r3
 8009384:	6878      	ldr	r0, [r7, #4]
 8009386:	f006 fca5 	bl	800fcd4 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800938a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800938c:	015a      	lsls	r2, r3, #5
 800938e:	69fb      	ldr	r3, [r7, #28]
 8009390:	4413      	add	r3, r2
 8009392:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009396:	461a      	mov	r2, r3
 8009398:	2302      	movs	r3, #2
 800939a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800939c:	693b      	ldr	r3, [r7, #16]
 800939e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80093a2:	2b00      	cmp	r3, #0
 80093a4:	d003      	beq.n	80093ae <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80093a6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80093a8:	6878      	ldr	r0, [r7, #4]
 80093aa:	f000 fd08 	bl	8009dbe <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80093ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093b0:	3301      	adds	r3, #1
 80093b2:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80093b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093b6:	085b      	lsrs	r3, r3, #1
 80093b8:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80093ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093bc:	2b00      	cmp	r3, #0
 80093be:	f47f af2e 	bne.w	800921e <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	681b      	ldr	r3, [r3, #0]
 80093c6:	4618      	mov	r0, r3
 80093c8:	f003 ffec 	bl	800d3a4 <USB_ReadInterrupts>
 80093cc:	4603      	mov	r3, r0
 80093ce:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80093d2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80093d6:	d122      	bne.n	800941e <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80093d8:	69fb      	ldr	r3, [r7, #28]
 80093da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80093de:	685b      	ldr	r3, [r3, #4]
 80093e0:	69fa      	ldr	r2, [r7, #28]
 80093e2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80093e6:	f023 0301 	bic.w	r3, r3, #1
 80093ea:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 80093f2:	2b01      	cmp	r3, #1
 80093f4:	d108      	bne.n	8009408 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	2200      	movs	r2, #0
 80093fa:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80093fe:	2100      	movs	r1, #0
 8009400:	6878      	ldr	r0, [r7, #4]
 8009402:	f006 fe1f 	bl	8010044 <HAL_PCDEx_LPM_Callback>
 8009406:	e002      	b.n	800940e <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8009408:	6878      	ldr	r0, [r7, #4]
 800940a:	f006 fc43 	bl	800fc94 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	681b      	ldr	r3, [r3, #0]
 8009412:	695a      	ldr	r2, [r3, #20]
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	681b      	ldr	r3, [r3, #0]
 8009418:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800941c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	681b      	ldr	r3, [r3, #0]
 8009422:	4618      	mov	r0, r3
 8009424:	f003 ffbe 	bl	800d3a4 <USB_ReadInterrupts>
 8009428:	4603      	mov	r3, r0
 800942a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800942e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009432:	d112      	bne.n	800945a <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8009434:	69fb      	ldr	r3, [r7, #28]
 8009436:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800943a:	689b      	ldr	r3, [r3, #8]
 800943c:	f003 0301 	and.w	r3, r3, #1
 8009440:	2b01      	cmp	r3, #1
 8009442:	d102      	bne.n	800944a <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8009444:	6878      	ldr	r0, [r7, #4]
 8009446:	f006 fbff 	bl	800fc48 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	681b      	ldr	r3, [r3, #0]
 800944e:	695a      	ldr	r2, [r3, #20]
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	681b      	ldr	r3, [r3, #0]
 8009454:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8009458:	615a      	str	r2, [r3, #20]
    }
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	681b      	ldr	r3, [r3, #0]
 800945e:	4618      	mov	r0, r3
 8009460:	f003 ffa0 	bl	800d3a4 <USB_ReadInterrupts>
 8009464:	4603      	mov	r3, r0
 8009466:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800946a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800946e:	d121      	bne.n	80094b4 <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	681b      	ldr	r3, [r3, #0]
 8009474:	695a      	ldr	r2, [r3, #20]
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	681b      	ldr	r3, [r3, #0]
 800947a:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 800947e:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8009486:	2b00      	cmp	r3, #0
 8009488:	d111      	bne.n	80094ae <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	2201      	movs	r2, #1
 800948e:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	681b      	ldr	r3, [r3, #0]
 8009496:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009498:	089b      	lsrs	r3, r3, #2
 800949a:	f003 020f 	and.w	r2, r3, #15
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 80094a4:	2101      	movs	r1, #1
 80094a6:	6878      	ldr	r0, [r7, #4]
 80094a8:	f006 fdcc 	bl	8010044 <HAL_PCDEx_LPM_Callback>
 80094ac:	e002      	b.n	80094b4 <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80094ae:	6878      	ldr	r0, [r7, #4]
 80094b0:	f006 fbca 	bl	800fc48 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	681b      	ldr	r3, [r3, #0]
 80094b8:	4618      	mov	r0, r3
 80094ba:	f003 ff73 	bl	800d3a4 <USB_ReadInterrupts>
 80094be:	4603      	mov	r3, r0
 80094c0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80094c4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80094c8:	f040 80b7 	bne.w	800963a <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80094cc:	69fb      	ldr	r3, [r7, #28]
 80094ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80094d2:	685b      	ldr	r3, [r3, #4]
 80094d4:	69fa      	ldr	r2, [r7, #28]
 80094d6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80094da:	f023 0301 	bic.w	r3, r3, #1
 80094de:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	681b      	ldr	r3, [r3, #0]
 80094e4:	2110      	movs	r1, #16
 80094e6:	4618      	mov	r0, r3
 80094e8:	f002 ff3a 	bl	800c360 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80094ec:	2300      	movs	r3, #0
 80094ee:	62fb      	str	r3, [r7, #44]	; 0x2c
 80094f0:	e046      	b.n	8009580 <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80094f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80094f4:	015a      	lsls	r2, r3, #5
 80094f6:	69fb      	ldr	r3, [r7, #28]
 80094f8:	4413      	add	r3, r2
 80094fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80094fe:	461a      	mov	r2, r3
 8009500:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8009504:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8009506:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009508:	015a      	lsls	r2, r3, #5
 800950a:	69fb      	ldr	r3, [r7, #28]
 800950c:	4413      	add	r3, r2
 800950e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009512:	681b      	ldr	r3, [r3, #0]
 8009514:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009516:	0151      	lsls	r1, r2, #5
 8009518:	69fa      	ldr	r2, [r7, #28]
 800951a:	440a      	add	r2, r1
 800951c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009520:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8009524:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8009526:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009528:	015a      	lsls	r2, r3, #5
 800952a:	69fb      	ldr	r3, [r7, #28]
 800952c:	4413      	add	r3, r2
 800952e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009532:	461a      	mov	r2, r3
 8009534:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8009538:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800953a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800953c:	015a      	lsls	r2, r3, #5
 800953e:	69fb      	ldr	r3, [r7, #28]
 8009540:	4413      	add	r3, r2
 8009542:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009546:	681b      	ldr	r3, [r3, #0]
 8009548:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800954a:	0151      	lsls	r1, r2, #5
 800954c:	69fa      	ldr	r2, [r7, #28]
 800954e:	440a      	add	r2, r1
 8009550:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009554:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8009558:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800955a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800955c:	015a      	lsls	r2, r3, #5
 800955e:	69fb      	ldr	r3, [r7, #28]
 8009560:	4413      	add	r3, r2
 8009562:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009566:	681b      	ldr	r3, [r3, #0]
 8009568:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800956a:	0151      	lsls	r1, r2, #5
 800956c:	69fa      	ldr	r2, [r7, #28]
 800956e:	440a      	add	r2, r1
 8009570:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009574:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8009578:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800957a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800957c:	3301      	adds	r3, #1
 800957e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	685b      	ldr	r3, [r3, #4]
 8009584:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009586:	429a      	cmp	r2, r3
 8009588:	d3b3      	bcc.n	80094f2 <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800958a:	69fb      	ldr	r3, [r7, #28]
 800958c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009590:	69db      	ldr	r3, [r3, #28]
 8009592:	69fa      	ldr	r2, [r7, #28]
 8009594:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009598:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 800959c:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80095a2:	2b00      	cmp	r3, #0
 80095a4:	d016      	beq.n	80095d4 <HAL_PCD_IRQHandler+0x68c>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80095a6:	69fb      	ldr	r3, [r7, #28]
 80095a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80095ac:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80095b0:	69fa      	ldr	r2, [r7, #28]
 80095b2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80095b6:	f043 030b 	orr.w	r3, r3, #11
 80095ba:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80095be:	69fb      	ldr	r3, [r7, #28]
 80095c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80095c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80095c6:	69fa      	ldr	r2, [r7, #28]
 80095c8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80095cc:	f043 030b 	orr.w	r3, r3, #11
 80095d0:	6453      	str	r3, [r2, #68]	; 0x44
 80095d2:	e015      	b.n	8009600 <HAL_PCD_IRQHandler+0x6b8>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80095d4:	69fb      	ldr	r3, [r7, #28]
 80095d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80095da:	695b      	ldr	r3, [r3, #20]
 80095dc:	69fa      	ldr	r2, [r7, #28]
 80095de:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80095e2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80095e6:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 80095ea:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80095ec:	69fb      	ldr	r3, [r7, #28]
 80095ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80095f2:	691b      	ldr	r3, [r3, #16]
 80095f4:	69fa      	ldr	r2, [r7, #28]
 80095f6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80095fa:	f043 030b 	orr.w	r3, r3, #11
 80095fe:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8009600:	69fb      	ldr	r3, [r7, #28]
 8009602:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009606:	681b      	ldr	r3, [r3, #0]
 8009608:	69fa      	ldr	r2, [r7, #28]
 800960a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800960e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8009612:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	6818      	ldr	r0, [r3, #0]
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	691b      	ldr	r3, [r3, #16]
 800961c:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8009624:	461a      	mov	r2, r3
 8009626:	f003 ff81 	bl	800d52c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	681b      	ldr	r3, [r3, #0]
 800962e:	695a      	ldr	r2, [r3, #20]
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	681b      	ldr	r3, [r3, #0]
 8009634:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8009638:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	681b      	ldr	r3, [r3, #0]
 800963e:	4618      	mov	r0, r3
 8009640:	f003 feb0 	bl	800d3a4 <USB_ReadInterrupts>
 8009644:	4603      	mov	r3, r0
 8009646:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800964a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800964e:	d124      	bne.n	800969a <HAL_PCD_IRQHandler+0x752>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	681b      	ldr	r3, [r3, #0]
 8009654:	4618      	mov	r0, r3
 8009656:	f003 ff46 	bl	800d4e6 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	681b      	ldr	r3, [r3, #0]
 800965e:	4618      	mov	r0, r3
 8009660:	f002 fefb 	bl	800c45a <USB_GetDevSpeed>
 8009664:	4603      	mov	r3, r0
 8009666:	461a      	mov	r2, r3
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	681c      	ldr	r4, [r3, #0]
 8009670:	f000 fec2 	bl	800a3f8 <HAL_RCC_GetHCLKFreq>
 8009674:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800967a:	b2db      	uxtb	r3, r3
 800967c:	461a      	mov	r2, r3
 800967e:	4620      	mov	r0, r4
 8009680:	f002 fc00 	bl	800be84 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8009684:	6878      	ldr	r0, [r7, #4]
 8009686:	f006 fab6 	bl	800fbf6 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	681b      	ldr	r3, [r3, #0]
 800968e:	695a      	ldr	r2, [r3, #20]
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	681b      	ldr	r3, [r3, #0]
 8009694:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8009698:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	681b      	ldr	r3, [r3, #0]
 800969e:	4618      	mov	r0, r3
 80096a0:	f003 fe80 	bl	800d3a4 <USB_ReadInterrupts>
 80096a4:	4603      	mov	r3, r0
 80096a6:	f003 0308 	and.w	r3, r3, #8
 80096aa:	2b08      	cmp	r3, #8
 80096ac:	d10a      	bne.n	80096c4 <HAL_PCD_IRQHandler+0x77c>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80096ae:	6878      	ldr	r0, [r7, #4]
 80096b0:	f006 fa93 	bl	800fbda <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	681b      	ldr	r3, [r3, #0]
 80096b8:	695a      	ldr	r2, [r3, #20]
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	681b      	ldr	r3, [r3, #0]
 80096be:	f002 0208 	and.w	r2, r2, #8
 80096c2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	681b      	ldr	r3, [r3, #0]
 80096c8:	4618      	mov	r0, r3
 80096ca:	f003 fe6b 	bl	800d3a4 <USB_ReadInterrupts>
 80096ce:	4603      	mov	r3, r0
 80096d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80096d4:	2b80      	cmp	r3, #128	; 0x80
 80096d6:	d122      	bne.n	800971e <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80096d8:	6a3b      	ldr	r3, [r7, #32]
 80096da:	699b      	ldr	r3, [r3, #24]
 80096dc:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80096e0:	6a3b      	ldr	r3, [r7, #32]
 80096e2:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80096e4:	2301      	movs	r3, #1
 80096e6:	627b      	str	r3, [r7, #36]	; 0x24
 80096e8:	e014      	b.n	8009714 <HAL_PCD_IRQHandler+0x7cc>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80096ea:	6879      	ldr	r1, [r7, #4]
 80096ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80096ee:	4613      	mov	r3, r2
 80096f0:	00db      	lsls	r3, r3, #3
 80096f2:	4413      	add	r3, r2
 80096f4:	009b      	lsls	r3, r3, #2
 80096f6:	440b      	add	r3, r1
 80096f8:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80096fc:	781b      	ldrb	r3, [r3, #0]
 80096fe:	2b01      	cmp	r3, #1
 8009700:	d105      	bne.n	800970e <HAL_PCD_IRQHandler+0x7c6>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8009702:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009704:	b2db      	uxtb	r3, r3
 8009706:	4619      	mov	r1, r3
 8009708:	6878      	ldr	r0, [r7, #4]
 800970a:	f000 fb27 	bl	8009d5c <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800970e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009710:	3301      	adds	r3, #1
 8009712:	627b      	str	r3, [r7, #36]	; 0x24
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	685b      	ldr	r3, [r3, #4]
 8009718:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800971a:	429a      	cmp	r2, r3
 800971c:	d3e5      	bcc.n	80096ea <HAL_PCD_IRQHandler+0x7a2>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	681b      	ldr	r3, [r3, #0]
 8009722:	4618      	mov	r0, r3
 8009724:	f003 fe3e 	bl	800d3a4 <USB_ReadInterrupts>
 8009728:	4603      	mov	r3, r0
 800972a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800972e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009732:	d13b      	bne.n	80097ac <HAL_PCD_IRQHandler+0x864>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8009734:	2301      	movs	r3, #1
 8009736:	627b      	str	r3, [r7, #36]	; 0x24
 8009738:	e02b      	b.n	8009792 <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 800973a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800973c:	015a      	lsls	r2, r3, #5
 800973e:	69fb      	ldr	r3, [r7, #28]
 8009740:	4413      	add	r3, r2
 8009742:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009746:	681b      	ldr	r3, [r3, #0]
 8009748:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800974a:	6879      	ldr	r1, [r7, #4]
 800974c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800974e:	4613      	mov	r3, r2
 8009750:	00db      	lsls	r3, r3, #3
 8009752:	4413      	add	r3, r2
 8009754:	009b      	lsls	r3, r3, #2
 8009756:	440b      	add	r3, r1
 8009758:	3340      	adds	r3, #64	; 0x40
 800975a:	781b      	ldrb	r3, [r3, #0]
 800975c:	2b01      	cmp	r3, #1
 800975e:	d115      	bne.n	800978c <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8009760:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8009762:	2b00      	cmp	r3, #0
 8009764:	da12      	bge.n	800978c <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8009766:	6879      	ldr	r1, [r7, #4]
 8009768:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800976a:	4613      	mov	r3, r2
 800976c:	00db      	lsls	r3, r3, #3
 800976e:	4413      	add	r3, r2
 8009770:	009b      	lsls	r3, r3, #2
 8009772:	440b      	add	r3, r1
 8009774:	333f      	adds	r3, #63	; 0x3f
 8009776:	2201      	movs	r2, #1
 8009778:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 800977a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800977c:	b2db      	uxtb	r3, r3
 800977e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8009782:	b2db      	uxtb	r3, r3
 8009784:	4619      	mov	r1, r3
 8009786:	6878      	ldr	r0, [r7, #4]
 8009788:	f000 fae8 	bl	8009d5c <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800978c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800978e:	3301      	adds	r3, #1
 8009790:	627b      	str	r3, [r7, #36]	; 0x24
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	685b      	ldr	r3, [r3, #4]
 8009796:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009798:	429a      	cmp	r2, r3
 800979a:	d3ce      	bcc.n	800973a <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	681b      	ldr	r3, [r3, #0]
 80097a0:	695a      	ldr	r2, [r3, #20]
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	681b      	ldr	r3, [r3, #0]
 80097a6:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80097aa:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	681b      	ldr	r3, [r3, #0]
 80097b0:	4618      	mov	r0, r3
 80097b2:	f003 fdf7 	bl	800d3a4 <USB_ReadInterrupts>
 80097b6:	4603      	mov	r3, r0
 80097b8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80097bc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80097c0:	d155      	bne.n	800986e <HAL_PCD_IRQHandler+0x926>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80097c2:	2301      	movs	r3, #1
 80097c4:	627b      	str	r3, [r7, #36]	; 0x24
 80097c6:	e045      	b.n	8009854 <HAL_PCD_IRQHandler+0x90c>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 80097c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097ca:	015a      	lsls	r2, r3, #5
 80097cc:	69fb      	ldr	r3, [r7, #28]
 80097ce:	4413      	add	r3, r2
 80097d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80097d4:	681b      	ldr	r3, [r3, #0]
 80097d6:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80097d8:	6879      	ldr	r1, [r7, #4]
 80097da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80097dc:	4613      	mov	r3, r2
 80097de:	00db      	lsls	r3, r3, #3
 80097e0:	4413      	add	r3, r2
 80097e2:	009b      	lsls	r3, r3, #2
 80097e4:	440b      	add	r3, r1
 80097e6:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80097ea:	781b      	ldrb	r3, [r3, #0]
 80097ec:	2b01      	cmp	r3, #1
 80097ee:	d12e      	bne.n	800984e <HAL_PCD_IRQHandler+0x906>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80097f0:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80097f2:	2b00      	cmp	r3, #0
 80097f4:	da2b      	bge.n	800984e <HAL_PCD_IRQHandler+0x906>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 80097f6:	69bb      	ldr	r3, [r7, #24]
 80097f8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8009802:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8009806:	429a      	cmp	r2, r3
 8009808:	d121      	bne.n	800984e <HAL_PCD_IRQHandler+0x906>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 800980a:	6879      	ldr	r1, [r7, #4]
 800980c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800980e:	4613      	mov	r3, r2
 8009810:	00db      	lsls	r3, r3, #3
 8009812:	4413      	add	r3, r2
 8009814:	009b      	lsls	r3, r3, #2
 8009816:	440b      	add	r3, r1
 8009818:	f203 237f 	addw	r3, r3, #639	; 0x27f
 800981c:	2201      	movs	r2, #1
 800981e:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8009820:	6a3b      	ldr	r3, [r7, #32]
 8009822:	699b      	ldr	r3, [r3, #24]
 8009824:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8009828:	6a3b      	ldr	r3, [r7, #32]
 800982a:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 800982c:	6a3b      	ldr	r3, [r7, #32]
 800982e:	695b      	ldr	r3, [r3, #20]
 8009830:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009834:	2b00      	cmp	r3, #0
 8009836:	d10a      	bne.n	800984e <HAL_PCD_IRQHandler+0x906>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8009838:	69fb      	ldr	r3, [r7, #28]
 800983a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800983e:	685b      	ldr	r3, [r3, #4]
 8009840:	69fa      	ldr	r2, [r7, #28]
 8009842:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009846:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800984a:	6053      	str	r3, [r2, #4]
            break;
 800984c:	e007      	b.n	800985e <HAL_PCD_IRQHandler+0x916>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800984e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009850:	3301      	adds	r3, #1
 8009852:	627b      	str	r3, [r7, #36]	; 0x24
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	685b      	ldr	r3, [r3, #4]
 8009858:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800985a:	429a      	cmp	r2, r3
 800985c:	d3b4      	bcc.n	80097c8 <HAL_PCD_IRQHandler+0x880>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	681b      	ldr	r3, [r3, #0]
 8009862:	695a      	ldr	r2, [r3, #20]
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	681b      	ldr	r3, [r3, #0]
 8009868:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 800986c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	681b      	ldr	r3, [r3, #0]
 8009872:	4618      	mov	r0, r3
 8009874:	f003 fd96 	bl	800d3a4 <USB_ReadInterrupts>
 8009878:	4603      	mov	r3, r0
 800987a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800987e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009882:	d10a      	bne.n	800989a <HAL_PCD_IRQHandler+0x952>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8009884:	6878      	ldr	r0, [r7, #4]
 8009886:	f006 fa37 	bl	800fcf8 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	681b      	ldr	r3, [r3, #0]
 800988e:	695a      	ldr	r2, [r3, #20]
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	681b      	ldr	r3, [r3, #0]
 8009894:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8009898:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	681b      	ldr	r3, [r3, #0]
 800989e:	4618      	mov	r0, r3
 80098a0:	f003 fd80 	bl	800d3a4 <USB_ReadInterrupts>
 80098a4:	4603      	mov	r3, r0
 80098a6:	f003 0304 	and.w	r3, r3, #4
 80098aa:	2b04      	cmp	r3, #4
 80098ac:	d115      	bne.n	80098da <HAL_PCD_IRQHandler+0x992>
    {
      RegVal = hpcd->Instance->GOTGINT;
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	681b      	ldr	r3, [r3, #0]
 80098b2:	685b      	ldr	r3, [r3, #4]
 80098b4:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80098b6:	69bb      	ldr	r3, [r7, #24]
 80098b8:	f003 0304 	and.w	r3, r3, #4
 80098bc:	2b00      	cmp	r3, #0
 80098be:	d002      	beq.n	80098c6 <HAL_PCD_IRQHandler+0x97e>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80098c0:	6878      	ldr	r0, [r7, #4]
 80098c2:	f006 fa27 	bl	800fd14 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	681b      	ldr	r3, [r3, #0]
 80098ca:	6859      	ldr	r1, [r3, #4]
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	681b      	ldr	r3, [r3, #0]
 80098d0:	69ba      	ldr	r2, [r7, #24]
 80098d2:	430a      	orrs	r2, r1
 80098d4:	605a      	str	r2, [r3, #4]
 80098d6:	e000      	b.n	80098da <HAL_PCD_IRQHandler+0x992>
      return;
 80098d8:	bf00      	nop
    }
  }
}
 80098da:	3734      	adds	r7, #52	; 0x34
 80098dc:	46bd      	mov	sp, r7
 80098de:	bd90      	pop	{r4, r7, pc}

080098e0 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80098e0:	b580      	push	{r7, lr}
 80098e2:	b082      	sub	sp, #8
 80098e4:	af00      	add	r7, sp, #0
 80098e6:	6078      	str	r0, [r7, #4]
 80098e8:	460b      	mov	r3, r1
 80098ea:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80098f2:	2b01      	cmp	r3, #1
 80098f4:	d101      	bne.n	80098fa <HAL_PCD_SetAddress+0x1a>
 80098f6:	2302      	movs	r3, #2
 80098f8:	e013      	b.n	8009922 <HAL_PCD_SetAddress+0x42>
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	2201      	movs	r2, #1
 80098fe:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	78fa      	ldrb	r2, [r7, #3]
 8009906:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	681b      	ldr	r3, [r3, #0]
 800990e:	78fa      	ldrb	r2, [r7, #3]
 8009910:	4611      	mov	r1, r2
 8009912:	4618      	mov	r0, r3
 8009914:	f003 fcde 	bl	800d2d4 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	2200      	movs	r2, #0
 800991c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8009920:	2300      	movs	r3, #0
}
 8009922:	4618      	mov	r0, r3
 8009924:	3708      	adds	r7, #8
 8009926:	46bd      	mov	sp, r7
 8009928:	bd80      	pop	{r7, pc}

0800992a <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800992a:	b580      	push	{r7, lr}
 800992c:	b084      	sub	sp, #16
 800992e:	af00      	add	r7, sp, #0
 8009930:	6078      	str	r0, [r7, #4]
 8009932:	4608      	mov	r0, r1
 8009934:	4611      	mov	r1, r2
 8009936:	461a      	mov	r2, r3
 8009938:	4603      	mov	r3, r0
 800993a:	70fb      	strb	r3, [r7, #3]
 800993c:	460b      	mov	r3, r1
 800993e:	803b      	strh	r3, [r7, #0]
 8009940:	4613      	mov	r3, r2
 8009942:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8009944:	2300      	movs	r3, #0
 8009946:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8009948:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800994c:	2b00      	cmp	r3, #0
 800994e:	da0f      	bge.n	8009970 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8009950:	78fb      	ldrb	r3, [r7, #3]
 8009952:	f003 020f 	and.w	r2, r3, #15
 8009956:	4613      	mov	r3, r2
 8009958:	00db      	lsls	r3, r3, #3
 800995a:	4413      	add	r3, r2
 800995c:	009b      	lsls	r3, r3, #2
 800995e:	3338      	adds	r3, #56	; 0x38
 8009960:	687a      	ldr	r2, [r7, #4]
 8009962:	4413      	add	r3, r2
 8009964:	3304      	adds	r3, #4
 8009966:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8009968:	68fb      	ldr	r3, [r7, #12]
 800996a:	2201      	movs	r2, #1
 800996c:	705a      	strb	r2, [r3, #1]
 800996e:	e00f      	b.n	8009990 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8009970:	78fb      	ldrb	r3, [r7, #3]
 8009972:	f003 020f 	and.w	r2, r3, #15
 8009976:	4613      	mov	r3, r2
 8009978:	00db      	lsls	r3, r3, #3
 800997a:	4413      	add	r3, r2
 800997c:	009b      	lsls	r3, r3, #2
 800997e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8009982:	687a      	ldr	r2, [r7, #4]
 8009984:	4413      	add	r3, r2
 8009986:	3304      	adds	r3, #4
 8009988:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800998a:	68fb      	ldr	r3, [r7, #12]
 800998c:	2200      	movs	r2, #0
 800998e:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8009990:	78fb      	ldrb	r3, [r7, #3]
 8009992:	f003 030f 	and.w	r3, r3, #15
 8009996:	b2da      	uxtb	r2, r3
 8009998:	68fb      	ldr	r3, [r7, #12]
 800999a:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800999c:	883a      	ldrh	r2, [r7, #0]
 800999e:	68fb      	ldr	r3, [r7, #12]
 80099a0:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 80099a2:	68fb      	ldr	r3, [r7, #12]
 80099a4:	78ba      	ldrb	r2, [r7, #2]
 80099a6:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 80099a8:	68fb      	ldr	r3, [r7, #12]
 80099aa:	785b      	ldrb	r3, [r3, #1]
 80099ac:	2b00      	cmp	r3, #0
 80099ae:	d004      	beq.n	80099ba <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80099b0:	68fb      	ldr	r3, [r7, #12]
 80099b2:	781b      	ldrb	r3, [r3, #0]
 80099b4:	b29a      	uxth	r2, r3
 80099b6:	68fb      	ldr	r3, [r7, #12]
 80099b8:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80099ba:	78bb      	ldrb	r3, [r7, #2]
 80099bc:	2b02      	cmp	r3, #2
 80099be:	d102      	bne.n	80099c6 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80099c0:	68fb      	ldr	r3, [r7, #12]
 80099c2:	2200      	movs	r2, #0
 80099c4:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80099cc:	2b01      	cmp	r3, #1
 80099ce:	d101      	bne.n	80099d4 <HAL_PCD_EP_Open+0xaa>
 80099d0:	2302      	movs	r3, #2
 80099d2:	e00e      	b.n	80099f2 <HAL_PCD_EP_Open+0xc8>
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	2201      	movs	r2, #1
 80099d8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	681b      	ldr	r3, [r3, #0]
 80099e0:	68f9      	ldr	r1, [r7, #12]
 80099e2:	4618      	mov	r0, r3
 80099e4:	f002 fd5e 	bl	800c4a4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	2200      	movs	r2, #0
 80099ec:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 80099f0:	7afb      	ldrb	r3, [r7, #11]
}
 80099f2:	4618      	mov	r0, r3
 80099f4:	3710      	adds	r7, #16
 80099f6:	46bd      	mov	sp, r7
 80099f8:	bd80      	pop	{r7, pc}

080099fa <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80099fa:	b580      	push	{r7, lr}
 80099fc:	b084      	sub	sp, #16
 80099fe:	af00      	add	r7, sp, #0
 8009a00:	6078      	str	r0, [r7, #4]
 8009a02:	460b      	mov	r3, r1
 8009a04:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8009a06:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009a0a:	2b00      	cmp	r3, #0
 8009a0c:	da0f      	bge.n	8009a2e <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8009a0e:	78fb      	ldrb	r3, [r7, #3]
 8009a10:	f003 020f 	and.w	r2, r3, #15
 8009a14:	4613      	mov	r3, r2
 8009a16:	00db      	lsls	r3, r3, #3
 8009a18:	4413      	add	r3, r2
 8009a1a:	009b      	lsls	r3, r3, #2
 8009a1c:	3338      	adds	r3, #56	; 0x38
 8009a1e:	687a      	ldr	r2, [r7, #4]
 8009a20:	4413      	add	r3, r2
 8009a22:	3304      	adds	r3, #4
 8009a24:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8009a26:	68fb      	ldr	r3, [r7, #12]
 8009a28:	2201      	movs	r2, #1
 8009a2a:	705a      	strb	r2, [r3, #1]
 8009a2c:	e00f      	b.n	8009a4e <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8009a2e:	78fb      	ldrb	r3, [r7, #3]
 8009a30:	f003 020f 	and.w	r2, r3, #15
 8009a34:	4613      	mov	r3, r2
 8009a36:	00db      	lsls	r3, r3, #3
 8009a38:	4413      	add	r3, r2
 8009a3a:	009b      	lsls	r3, r3, #2
 8009a3c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8009a40:	687a      	ldr	r2, [r7, #4]
 8009a42:	4413      	add	r3, r2
 8009a44:	3304      	adds	r3, #4
 8009a46:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8009a48:	68fb      	ldr	r3, [r7, #12]
 8009a4a:	2200      	movs	r2, #0
 8009a4c:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8009a4e:	78fb      	ldrb	r3, [r7, #3]
 8009a50:	f003 030f 	and.w	r3, r3, #15
 8009a54:	b2da      	uxtb	r2, r3
 8009a56:	68fb      	ldr	r3, [r7, #12]
 8009a58:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8009a60:	2b01      	cmp	r3, #1
 8009a62:	d101      	bne.n	8009a68 <HAL_PCD_EP_Close+0x6e>
 8009a64:	2302      	movs	r3, #2
 8009a66:	e00e      	b.n	8009a86 <HAL_PCD_EP_Close+0x8c>
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	2201      	movs	r2, #1
 8009a6c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	681b      	ldr	r3, [r3, #0]
 8009a74:	68f9      	ldr	r1, [r7, #12]
 8009a76:	4618      	mov	r0, r3
 8009a78:	f002 fd9c 	bl	800c5b4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	2200      	movs	r2, #0
 8009a80:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8009a84:	2300      	movs	r3, #0
}
 8009a86:	4618      	mov	r0, r3
 8009a88:	3710      	adds	r7, #16
 8009a8a:	46bd      	mov	sp, r7
 8009a8c:	bd80      	pop	{r7, pc}

08009a8e <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8009a8e:	b580      	push	{r7, lr}
 8009a90:	b086      	sub	sp, #24
 8009a92:	af00      	add	r7, sp, #0
 8009a94:	60f8      	str	r0, [r7, #12]
 8009a96:	607a      	str	r2, [r7, #4]
 8009a98:	603b      	str	r3, [r7, #0]
 8009a9a:	460b      	mov	r3, r1
 8009a9c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8009a9e:	7afb      	ldrb	r3, [r7, #11]
 8009aa0:	f003 020f 	and.w	r2, r3, #15
 8009aa4:	4613      	mov	r3, r2
 8009aa6:	00db      	lsls	r3, r3, #3
 8009aa8:	4413      	add	r3, r2
 8009aaa:	009b      	lsls	r3, r3, #2
 8009aac:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8009ab0:	68fa      	ldr	r2, [r7, #12]
 8009ab2:	4413      	add	r3, r2
 8009ab4:	3304      	adds	r3, #4
 8009ab6:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8009ab8:	697b      	ldr	r3, [r7, #20]
 8009aba:	687a      	ldr	r2, [r7, #4]
 8009abc:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8009abe:	697b      	ldr	r3, [r7, #20]
 8009ac0:	683a      	ldr	r2, [r7, #0]
 8009ac2:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8009ac4:	697b      	ldr	r3, [r7, #20]
 8009ac6:	2200      	movs	r2, #0
 8009ac8:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8009aca:	697b      	ldr	r3, [r7, #20]
 8009acc:	2200      	movs	r2, #0
 8009ace:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8009ad0:	7afb      	ldrb	r3, [r7, #11]
 8009ad2:	f003 030f 	and.w	r3, r3, #15
 8009ad6:	b2da      	uxtb	r2, r3
 8009ad8:	697b      	ldr	r3, [r7, #20]
 8009ada:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8009adc:	68fb      	ldr	r3, [r7, #12]
 8009ade:	691b      	ldr	r3, [r3, #16]
 8009ae0:	2b01      	cmp	r3, #1
 8009ae2:	d102      	bne.n	8009aea <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8009ae4:	687a      	ldr	r2, [r7, #4]
 8009ae6:	697b      	ldr	r3, [r7, #20]
 8009ae8:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8009aea:	7afb      	ldrb	r3, [r7, #11]
 8009aec:	f003 030f 	and.w	r3, r3, #15
 8009af0:	2b00      	cmp	r3, #0
 8009af2:	d109      	bne.n	8009b08 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8009af4:	68fb      	ldr	r3, [r7, #12]
 8009af6:	6818      	ldr	r0, [r3, #0]
 8009af8:	68fb      	ldr	r3, [r7, #12]
 8009afa:	691b      	ldr	r3, [r3, #16]
 8009afc:	b2db      	uxtb	r3, r3
 8009afe:	461a      	mov	r2, r3
 8009b00:	6979      	ldr	r1, [r7, #20]
 8009b02:	f003 f87b 	bl	800cbfc <USB_EP0StartXfer>
 8009b06:	e008      	b.n	8009b1a <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8009b08:	68fb      	ldr	r3, [r7, #12]
 8009b0a:	6818      	ldr	r0, [r3, #0]
 8009b0c:	68fb      	ldr	r3, [r7, #12]
 8009b0e:	691b      	ldr	r3, [r3, #16]
 8009b10:	b2db      	uxtb	r3, r3
 8009b12:	461a      	mov	r2, r3
 8009b14:	6979      	ldr	r1, [r7, #20]
 8009b16:	f002 fe29 	bl	800c76c <USB_EPStartXfer>
  }

  return HAL_OK;
 8009b1a:	2300      	movs	r3, #0
}
 8009b1c:	4618      	mov	r0, r3
 8009b1e:	3718      	adds	r7, #24
 8009b20:	46bd      	mov	sp, r7
 8009b22:	bd80      	pop	{r7, pc}

08009b24 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8009b24:	b480      	push	{r7}
 8009b26:	b083      	sub	sp, #12
 8009b28:	af00      	add	r7, sp, #0
 8009b2a:	6078      	str	r0, [r7, #4]
 8009b2c:	460b      	mov	r3, r1
 8009b2e:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8009b30:	78fb      	ldrb	r3, [r7, #3]
 8009b32:	f003 020f 	and.w	r2, r3, #15
 8009b36:	6879      	ldr	r1, [r7, #4]
 8009b38:	4613      	mov	r3, r2
 8009b3a:	00db      	lsls	r3, r3, #3
 8009b3c:	4413      	add	r3, r2
 8009b3e:	009b      	lsls	r3, r3, #2
 8009b40:	440b      	add	r3, r1
 8009b42:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8009b46:	681b      	ldr	r3, [r3, #0]
}
 8009b48:	4618      	mov	r0, r3
 8009b4a:	370c      	adds	r7, #12
 8009b4c:	46bd      	mov	sp, r7
 8009b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b52:	4770      	bx	lr

08009b54 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8009b54:	b580      	push	{r7, lr}
 8009b56:	b086      	sub	sp, #24
 8009b58:	af00      	add	r7, sp, #0
 8009b5a:	60f8      	str	r0, [r7, #12]
 8009b5c:	607a      	str	r2, [r7, #4]
 8009b5e:	603b      	str	r3, [r7, #0]
 8009b60:	460b      	mov	r3, r1
 8009b62:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8009b64:	7afb      	ldrb	r3, [r7, #11]
 8009b66:	f003 020f 	and.w	r2, r3, #15
 8009b6a:	4613      	mov	r3, r2
 8009b6c:	00db      	lsls	r3, r3, #3
 8009b6e:	4413      	add	r3, r2
 8009b70:	009b      	lsls	r3, r3, #2
 8009b72:	3338      	adds	r3, #56	; 0x38
 8009b74:	68fa      	ldr	r2, [r7, #12]
 8009b76:	4413      	add	r3, r2
 8009b78:	3304      	adds	r3, #4
 8009b7a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8009b7c:	697b      	ldr	r3, [r7, #20]
 8009b7e:	687a      	ldr	r2, [r7, #4]
 8009b80:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8009b82:	697b      	ldr	r3, [r7, #20]
 8009b84:	683a      	ldr	r2, [r7, #0]
 8009b86:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8009b88:	697b      	ldr	r3, [r7, #20]
 8009b8a:	2200      	movs	r2, #0
 8009b8c:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8009b8e:	697b      	ldr	r3, [r7, #20]
 8009b90:	2201      	movs	r2, #1
 8009b92:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8009b94:	7afb      	ldrb	r3, [r7, #11]
 8009b96:	f003 030f 	and.w	r3, r3, #15
 8009b9a:	b2da      	uxtb	r2, r3
 8009b9c:	697b      	ldr	r3, [r7, #20]
 8009b9e:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8009ba0:	68fb      	ldr	r3, [r7, #12]
 8009ba2:	691b      	ldr	r3, [r3, #16]
 8009ba4:	2b01      	cmp	r3, #1
 8009ba6:	d102      	bne.n	8009bae <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8009ba8:	687a      	ldr	r2, [r7, #4]
 8009baa:	697b      	ldr	r3, [r7, #20]
 8009bac:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8009bae:	7afb      	ldrb	r3, [r7, #11]
 8009bb0:	f003 030f 	and.w	r3, r3, #15
 8009bb4:	2b00      	cmp	r3, #0
 8009bb6:	d109      	bne.n	8009bcc <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8009bb8:	68fb      	ldr	r3, [r7, #12]
 8009bba:	6818      	ldr	r0, [r3, #0]
 8009bbc:	68fb      	ldr	r3, [r7, #12]
 8009bbe:	691b      	ldr	r3, [r3, #16]
 8009bc0:	b2db      	uxtb	r3, r3
 8009bc2:	461a      	mov	r2, r3
 8009bc4:	6979      	ldr	r1, [r7, #20]
 8009bc6:	f003 f819 	bl	800cbfc <USB_EP0StartXfer>
 8009bca:	e008      	b.n	8009bde <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8009bcc:	68fb      	ldr	r3, [r7, #12]
 8009bce:	6818      	ldr	r0, [r3, #0]
 8009bd0:	68fb      	ldr	r3, [r7, #12]
 8009bd2:	691b      	ldr	r3, [r3, #16]
 8009bd4:	b2db      	uxtb	r3, r3
 8009bd6:	461a      	mov	r2, r3
 8009bd8:	6979      	ldr	r1, [r7, #20]
 8009bda:	f002 fdc7 	bl	800c76c <USB_EPStartXfer>
  }

  return HAL_OK;
 8009bde:	2300      	movs	r3, #0
}
 8009be0:	4618      	mov	r0, r3
 8009be2:	3718      	adds	r7, #24
 8009be4:	46bd      	mov	sp, r7
 8009be6:	bd80      	pop	{r7, pc}

08009be8 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8009be8:	b580      	push	{r7, lr}
 8009bea:	b084      	sub	sp, #16
 8009bec:	af00      	add	r7, sp, #0
 8009bee:	6078      	str	r0, [r7, #4]
 8009bf0:	460b      	mov	r3, r1
 8009bf2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8009bf4:	78fb      	ldrb	r3, [r7, #3]
 8009bf6:	f003 020f 	and.w	r2, r3, #15
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	685b      	ldr	r3, [r3, #4]
 8009bfe:	429a      	cmp	r2, r3
 8009c00:	d901      	bls.n	8009c06 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8009c02:	2301      	movs	r3, #1
 8009c04:	e050      	b.n	8009ca8 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8009c06:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009c0a:	2b00      	cmp	r3, #0
 8009c0c:	da0f      	bge.n	8009c2e <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8009c0e:	78fb      	ldrb	r3, [r7, #3]
 8009c10:	f003 020f 	and.w	r2, r3, #15
 8009c14:	4613      	mov	r3, r2
 8009c16:	00db      	lsls	r3, r3, #3
 8009c18:	4413      	add	r3, r2
 8009c1a:	009b      	lsls	r3, r3, #2
 8009c1c:	3338      	adds	r3, #56	; 0x38
 8009c1e:	687a      	ldr	r2, [r7, #4]
 8009c20:	4413      	add	r3, r2
 8009c22:	3304      	adds	r3, #4
 8009c24:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8009c26:	68fb      	ldr	r3, [r7, #12]
 8009c28:	2201      	movs	r2, #1
 8009c2a:	705a      	strb	r2, [r3, #1]
 8009c2c:	e00d      	b.n	8009c4a <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8009c2e:	78fa      	ldrb	r2, [r7, #3]
 8009c30:	4613      	mov	r3, r2
 8009c32:	00db      	lsls	r3, r3, #3
 8009c34:	4413      	add	r3, r2
 8009c36:	009b      	lsls	r3, r3, #2
 8009c38:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8009c3c:	687a      	ldr	r2, [r7, #4]
 8009c3e:	4413      	add	r3, r2
 8009c40:	3304      	adds	r3, #4
 8009c42:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8009c44:	68fb      	ldr	r3, [r7, #12]
 8009c46:	2200      	movs	r2, #0
 8009c48:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8009c4a:	68fb      	ldr	r3, [r7, #12]
 8009c4c:	2201      	movs	r2, #1
 8009c4e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8009c50:	78fb      	ldrb	r3, [r7, #3]
 8009c52:	f003 030f 	and.w	r3, r3, #15
 8009c56:	b2da      	uxtb	r2, r3
 8009c58:	68fb      	ldr	r3, [r7, #12]
 8009c5a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8009c62:	2b01      	cmp	r3, #1
 8009c64:	d101      	bne.n	8009c6a <HAL_PCD_EP_SetStall+0x82>
 8009c66:	2302      	movs	r3, #2
 8009c68:	e01e      	b.n	8009ca8 <HAL_PCD_EP_SetStall+0xc0>
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	2201      	movs	r2, #1
 8009c6e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	681b      	ldr	r3, [r3, #0]
 8009c76:	68f9      	ldr	r1, [r7, #12]
 8009c78:	4618      	mov	r0, r3
 8009c7a:	f003 fa57 	bl	800d12c <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8009c7e:	78fb      	ldrb	r3, [r7, #3]
 8009c80:	f003 030f 	and.w	r3, r3, #15
 8009c84:	2b00      	cmp	r3, #0
 8009c86:	d10a      	bne.n	8009c9e <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	6818      	ldr	r0, [r3, #0]
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	691b      	ldr	r3, [r3, #16]
 8009c90:	b2d9      	uxtb	r1, r3
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8009c98:	461a      	mov	r2, r3
 8009c9a:	f003 fc47 	bl	800d52c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	2200      	movs	r2, #0
 8009ca2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8009ca6:	2300      	movs	r3, #0
}
 8009ca8:	4618      	mov	r0, r3
 8009caa:	3710      	adds	r7, #16
 8009cac:	46bd      	mov	sp, r7
 8009cae:	bd80      	pop	{r7, pc}

08009cb0 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8009cb0:	b580      	push	{r7, lr}
 8009cb2:	b084      	sub	sp, #16
 8009cb4:	af00      	add	r7, sp, #0
 8009cb6:	6078      	str	r0, [r7, #4]
 8009cb8:	460b      	mov	r3, r1
 8009cba:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8009cbc:	78fb      	ldrb	r3, [r7, #3]
 8009cbe:	f003 020f 	and.w	r2, r3, #15
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	685b      	ldr	r3, [r3, #4]
 8009cc6:	429a      	cmp	r2, r3
 8009cc8:	d901      	bls.n	8009cce <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8009cca:	2301      	movs	r3, #1
 8009ccc:	e042      	b.n	8009d54 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8009cce:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009cd2:	2b00      	cmp	r3, #0
 8009cd4:	da0f      	bge.n	8009cf6 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8009cd6:	78fb      	ldrb	r3, [r7, #3]
 8009cd8:	f003 020f 	and.w	r2, r3, #15
 8009cdc:	4613      	mov	r3, r2
 8009cde:	00db      	lsls	r3, r3, #3
 8009ce0:	4413      	add	r3, r2
 8009ce2:	009b      	lsls	r3, r3, #2
 8009ce4:	3338      	adds	r3, #56	; 0x38
 8009ce6:	687a      	ldr	r2, [r7, #4]
 8009ce8:	4413      	add	r3, r2
 8009cea:	3304      	adds	r3, #4
 8009cec:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8009cee:	68fb      	ldr	r3, [r7, #12]
 8009cf0:	2201      	movs	r2, #1
 8009cf2:	705a      	strb	r2, [r3, #1]
 8009cf4:	e00f      	b.n	8009d16 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8009cf6:	78fb      	ldrb	r3, [r7, #3]
 8009cf8:	f003 020f 	and.w	r2, r3, #15
 8009cfc:	4613      	mov	r3, r2
 8009cfe:	00db      	lsls	r3, r3, #3
 8009d00:	4413      	add	r3, r2
 8009d02:	009b      	lsls	r3, r3, #2
 8009d04:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8009d08:	687a      	ldr	r2, [r7, #4]
 8009d0a:	4413      	add	r3, r2
 8009d0c:	3304      	adds	r3, #4
 8009d0e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8009d10:	68fb      	ldr	r3, [r7, #12]
 8009d12:	2200      	movs	r2, #0
 8009d14:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8009d16:	68fb      	ldr	r3, [r7, #12]
 8009d18:	2200      	movs	r2, #0
 8009d1a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8009d1c:	78fb      	ldrb	r3, [r7, #3]
 8009d1e:	f003 030f 	and.w	r3, r3, #15
 8009d22:	b2da      	uxtb	r2, r3
 8009d24:	68fb      	ldr	r3, [r7, #12]
 8009d26:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8009d2e:	2b01      	cmp	r3, #1
 8009d30:	d101      	bne.n	8009d36 <HAL_PCD_EP_ClrStall+0x86>
 8009d32:	2302      	movs	r3, #2
 8009d34:	e00e      	b.n	8009d54 <HAL_PCD_EP_ClrStall+0xa4>
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	2201      	movs	r2, #1
 8009d3a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	681b      	ldr	r3, [r3, #0]
 8009d42:	68f9      	ldr	r1, [r7, #12]
 8009d44:	4618      	mov	r0, r3
 8009d46:	f003 fa5f 	bl	800d208 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	2200      	movs	r2, #0
 8009d4e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8009d52:	2300      	movs	r3, #0
}
 8009d54:	4618      	mov	r0, r3
 8009d56:	3710      	adds	r7, #16
 8009d58:	46bd      	mov	sp, r7
 8009d5a:	bd80      	pop	{r7, pc}

08009d5c <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8009d5c:	b580      	push	{r7, lr}
 8009d5e:	b084      	sub	sp, #16
 8009d60:	af00      	add	r7, sp, #0
 8009d62:	6078      	str	r0, [r7, #4]
 8009d64:	460b      	mov	r3, r1
 8009d66:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8009d68:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009d6c:	2b00      	cmp	r3, #0
 8009d6e:	da0c      	bge.n	8009d8a <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8009d70:	78fb      	ldrb	r3, [r7, #3]
 8009d72:	f003 020f 	and.w	r2, r3, #15
 8009d76:	4613      	mov	r3, r2
 8009d78:	00db      	lsls	r3, r3, #3
 8009d7a:	4413      	add	r3, r2
 8009d7c:	009b      	lsls	r3, r3, #2
 8009d7e:	3338      	adds	r3, #56	; 0x38
 8009d80:	687a      	ldr	r2, [r7, #4]
 8009d82:	4413      	add	r3, r2
 8009d84:	3304      	adds	r3, #4
 8009d86:	60fb      	str	r3, [r7, #12]
 8009d88:	e00c      	b.n	8009da4 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8009d8a:	78fb      	ldrb	r3, [r7, #3]
 8009d8c:	f003 020f 	and.w	r2, r3, #15
 8009d90:	4613      	mov	r3, r2
 8009d92:	00db      	lsls	r3, r3, #3
 8009d94:	4413      	add	r3, r2
 8009d96:	009b      	lsls	r3, r3, #2
 8009d98:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8009d9c:	687a      	ldr	r2, [r7, #4]
 8009d9e:	4413      	add	r3, r2
 8009da0:	3304      	adds	r3, #4
 8009da2:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	681b      	ldr	r3, [r3, #0]
 8009da8:	68f9      	ldr	r1, [r7, #12]
 8009daa:	4618      	mov	r0, r3
 8009dac:	f003 f87e 	bl	800ceac <USB_EPStopXfer>
 8009db0:	4603      	mov	r3, r0
 8009db2:	72fb      	strb	r3, [r7, #11]

  return ret;
 8009db4:	7afb      	ldrb	r3, [r7, #11]
}
 8009db6:	4618      	mov	r0, r3
 8009db8:	3710      	adds	r7, #16
 8009dba:	46bd      	mov	sp, r7
 8009dbc:	bd80      	pop	{r7, pc}

08009dbe <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8009dbe:	b580      	push	{r7, lr}
 8009dc0:	b08a      	sub	sp, #40	; 0x28
 8009dc2:	af02      	add	r7, sp, #8
 8009dc4:	6078      	str	r0, [r7, #4]
 8009dc6:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	681b      	ldr	r3, [r3, #0]
 8009dcc:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009dce:	697b      	ldr	r3, [r7, #20]
 8009dd0:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8009dd2:	683a      	ldr	r2, [r7, #0]
 8009dd4:	4613      	mov	r3, r2
 8009dd6:	00db      	lsls	r3, r3, #3
 8009dd8:	4413      	add	r3, r2
 8009dda:	009b      	lsls	r3, r3, #2
 8009ddc:	3338      	adds	r3, #56	; 0x38
 8009dde:	687a      	ldr	r2, [r7, #4]
 8009de0:	4413      	add	r3, r2
 8009de2:	3304      	adds	r3, #4
 8009de4:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8009de6:	68fb      	ldr	r3, [r7, #12]
 8009de8:	6a1a      	ldr	r2, [r3, #32]
 8009dea:	68fb      	ldr	r3, [r7, #12]
 8009dec:	699b      	ldr	r3, [r3, #24]
 8009dee:	429a      	cmp	r2, r3
 8009df0:	d901      	bls.n	8009df6 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8009df2:	2301      	movs	r3, #1
 8009df4:	e06c      	b.n	8009ed0 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8009df6:	68fb      	ldr	r3, [r7, #12]
 8009df8:	699a      	ldr	r2, [r3, #24]
 8009dfa:	68fb      	ldr	r3, [r7, #12]
 8009dfc:	6a1b      	ldr	r3, [r3, #32]
 8009dfe:	1ad3      	subs	r3, r2, r3
 8009e00:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8009e02:	68fb      	ldr	r3, [r7, #12]
 8009e04:	68db      	ldr	r3, [r3, #12]
 8009e06:	69fa      	ldr	r2, [r7, #28]
 8009e08:	429a      	cmp	r2, r3
 8009e0a:	d902      	bls.n	8009e12 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8009e0c:	68fb      	ldr	r3, [r7, #12]
 8009e0e:	68db      	ldr	r3, [r3, #12]
 8009e10:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8009e12:	69fb      	ldr	r3, [r7, #28]
 8009e14:	3303      	adds	r3, #3
 8009e16:	089b      	lsrs	r3, r3, #2
 8009e18:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8009e1a:	e02b      	b.n	8009e74 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8009e1c:	68fb      	ldr	r3, [r7, #12]
 8009e1e:	699a      	ldr	r2, [r3, #24]
 8009e20:	68fb      	ldr	r3, [r7, #12]
 8009e22:	6a1b      	ldr	r3, [r3, #32]
 8009e24:	1ad3      	subs	r3, r2, r3
 8009e26:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8009e28:	68fb      	ldr	r3, [r7, #12]
 8009e2a:	68db      	ldr	r3, [r3, #12]
 8009e2c:	69fa      	ldr	r2, [r7, #28]
 8009e2e:	429a      	cmp	r2, r3
 8009e30:	d902      	bls.n	8009e38 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8009e32:	68fb      	ldr	r3, [r7, #12]
 8009e34:	68db      	ldr	r3, [r3, #12]
 8009e36:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8009e38:	69fb      	ldr	r3, [r7, #28]
 8009e3a:	3303      	adds	r3, #3
 8009e3c:	089b      	lsrs	r3, r3, #2
 8009e3e:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8009e40:	68fb      	ldr	r3, [r7, #12]
 8009e42:	6919      	ldr	r1, [r3, #16]
 8009e44:	683b      	ldr	r3, [r7, #0]
 8009e46:	b2da      	uxtb	r2, r3
 8009e48:	69fb      	ldr	r3, [r7, #28]
 8009e4a:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8009e50:	b2db      	uxtb	r3, r3
 8009e52:	9300      	str	r3, [sp, #0]
 8009e54:	4603      	mov	r3, r0
 8009e56:	6978      	ldr	r0, [r7, #20]
 8009e58:	f003 f8d2 	bl	800d000 <USB_WritePacket>

    ep->xfer_buff  += len;
 8009e5c:	68fb      	ldr	r3, [r7, #12]
 8009e5e:	691a      	ldr	r2, [r3, #16]
 8009e60:	69fb      	ldr	r3, [r7, #28]
 8009e62:	441a      	add	r2, r3
 8009e64:	68fb      	ldr	r3, [r7, #12]
 8009e66:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8009e68:	68fb      	ldr	r3, [r7, #12]
 8009e6a:	6a1a      	ldr	r2, [r3, #32]
 8009e6c:	69fb      	ldr	r3, [r7, #28]
 8009e6e:	441a      	add	r2, r3
 8009e70:	68fb      	ldr	r3, [r7, #12]
 8009e72:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8009e74:	683b      	ldr	r3, [r7, #0]
 8009e76:	015a      	lsls	r2, r3, #5
 8009e78:	693b      	ldr	r3, [r7, #16]
 8009e7a:	4413      	add	r3, r2
 8009e7c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009e80:	699b      	ldr	r3, [r3, #24]
 8009e82:	b29b      	uxth	r3, r3
 8009e84:	69ba      	ldr	r2, [r7, #24]
 8009e86:	429a      	cmp	r2, r3
 8009e88:	d809      	bhi.n	8009e9e <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8009e8a:	68fb      	ldr	r3, [r7, #12]
 8009e8c:	6a1a      	ldr	r2, [r3, #32]
 8009e8e:	68fb      	ldr	r3, [r7, #12]
 8009e90:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8009e92:	429a      	cmp	r2, r3
 8009e94:	d203      	bcs.n	8009e9e <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8009e96:	68fb      	ldr	r3, [r7, #12]
 8009e98:	699b      	ldr	r3, [r3, #24]
 8009e9a:	2b00      	cmp	r3, #0
 8009e9c:	d1be      	bne.n	8009e1c <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8009e9e:	68fb      	ldr	r3, [r7, #12]
 8009ea0:	699a      	ldr	r2, [r3, #24]
 8009ea2:	68fb      	ldr	r3, [r7, #12]
 8009ea4:	6a1b      	ldr	r3, [r3, #32]
 8009ea6:	429a      	cmp	r2, r3
 8009ea8:	d811      	bhi.n	8009ece <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8009eaa:	683b      	ldr	r3, [r7, #0]
 8009eac:	f003 030f 	and.w	r3, r3, #15
 8009eb0:	2201      	movs	r2, #1
 8009eb2:	fa02 f303 	lsl.w	r3, r2, r3
 8009eb6:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8009eb8:	693b      	ldr	r3, [r7, #16]
 8009eba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009ebe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009ec0:	68bb      	ldr	r3, [r7, #8]
 8009ec2:	43db      	mvns	r3, r3
 8009ec4:	6939      	ldr	r1, [r7, #16]
 8009ec6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009eca:	4013      	ands	r3, r2
 8009ecc:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8009ece:	2300      	movs	r3, #0
}
 8009ed0:	4618      	mov	r0, r3
 8009ed2:	3720      	adds	r7, #32
 8009ed4:	46bd      	mov	sp, r7
 8009ed6:	bd80      	pop	{r7, pc}

08009ed8 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8009ed8:	b580      	push	{r7, lr}
 8009eda:	b088      	sub	sp, #32
 8009edc:	af00      	add	r7, sp, #0
 8009ede:	6078      	str	r0, [r7, #4]
 8009ee0:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	681b      	ldr	r3, [r3, #0]
 8009ee6:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009ee8:	69fb      	ldr	r3, [r7, #28]
 8009eea:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8009eec:	69fb      	ldr	r3, [r7, #28]
 8009eee:	333c      	adds	r3, #60	; 0x3c
 8009ef0:	3304      	adds	r3, #4
 8009ef2:	681b      	ldr	r3, [r3, #0]
 8009ef4:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8009ef6:	683b      	ldr	r3, [r7, #0]
 8009ef8:	015a      	lsls	r2, r3, #5
 8009efa:	69bb      	ldr	r3, [r7, #24]
 8009efc:	4413      	add	r3, r2
 8009efe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009f02:	689b      	ldr	r3, [r3, #8]
 8009f04:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	691b      	ldr	r3, [r3, #16]
 8009f0a:	2b01      	cmp	r3, #1
 8009f0c:	d17b      	bne.n	800a006 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8009f0e:	693b      	ldr	r3, [r7, #16]
 8009f10:	f003 0308 	and.w	r3, r3, #8
 8009f14:	2b00      	cmp	r3, #0
 8009f16:	d015      	beq.n	8009f44 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8009f18:	697b      	ldr	r3, [r7, #20]
 8009f1a:	4a61      	ldr	r2, [pc, #388]	; (800a0a0 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8009f1c:	4293      	cmp	r3, r2
 8009f1e:	f240 80b9 	bls.w	800a094 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8009f22:	693b      	ldr	r3, [r7, #16]
 8009f24:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8009f28:	2b00      	cmp	r3, #0
 8009f2a:	f000 80b3 	beq.w	800a094 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8009f2e:	683b      	ldr	r3, [r7, #0]
 8009f30:	015a      	lsls	r2, r3, #5
 8009f32:	69bb      	ldr	r3, [r7, #24]
 8009f34:	4413      	add	r3, r2
 8009f36:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009f3a:	461a      	mov	r2, r3
 8009f3c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009f40:	6093      	str	r3, [r2, #8]
 8009f42:	e0a7      	b.n	800a094 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8009f44:	693b      	ldr	r3, [r7, #16]
 8009f46:	f003 0320 	and.w	r3, r3, #32
 8009f4a:	2b00      	cmp	r3, #0
 8009f4c:	d009      	beq.n	8009f62 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8009f4e:	683b      	ldr	r3, [r7, #0]
 8009f50:	015a      	lsls	r2, r3, #5
 8009f52:	69bb      	ldr	r3, [r7, #24]
 8009f54:	4413      	add	r3, r2
 8009f56:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009f5a:	461a      	mov	r2, r3
 8009f5c:	2320      	movs	r3, #32
 8009f5e:	6093      	str	r3, [r2, #8]
 8009f60:	e098      	b.n	800a094 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8009f62:	693b      	ldr	r3, [r7, #16]
 8009f64:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8009f68:	2b00      	cmp	r3, #0
 8009f6a:	f040 8093 	bne.w	800a094 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8009f6e:	697b      	ldr	r3, [r7, #20]
 8009f70:	4a4b      	ldr	r2, [pc, #300]	; (800a0a0 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8009f72:	4293      	cmp	r3, r2
 8009f74:	d90f      	bls.n	8009f96 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8009f76:	693b      	ldr	r3, [r7, #16]
 8009f78:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8009f7c:	2b00      	cmp	r3, #0
 8009f7e:	d00a      	beq.n	8009f96 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8009f80:	683b      	ldr	r3, [r7, #0]
 8009f82:	015a      	lsls	r2, r3, #5
 8009f84:	69bb      	ldr	r3, [r7, #24]
 8009f86:	4413      	add	r3, r2
 8009f88:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009f8c:	461a      	mov	r2, r3
 8009f8e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009f92:	6093      	str	r3, [r2, #8]
 8009f94:	e07e      	b.n	800a094 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8009f96:	683a      	ldr	r2, [r7, #0]
 8009f98:	4613      	mov	r3, r2
 8009f9a:	00db      	lsls	r3, r3, #3
 8009f9c:	4413      	add	r3, r2
 8009f9e:	009b      	lsls	r3, r3, #2
 8009fa0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8009fa4:	687a      	ldr	r2, [r7, #4]
 8009fa6:	4413      	add	r3, r2
 8009fa8:	3304      	adds	r3, #4
 8009faa:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8009fac:	68fb      	ldr	r3, [r7, #12]
 8009fae:	69da      	ldr	r2, [r3, #28]
 8009fb0:	683b      	ldr	r3, [r7, #0]
 8009fb2:	0159      	lsls	r1, r3, #5
 8009fb4:	69bb      	ldr	r3, [r7, #24]
 8009fb6:	440b      	add	r3, r1
 8009fb8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009fbc:	691b      	ldr	r3, [r3, #16]
 8009fbe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009fc2:	1ad2      	subs	r2, r2, r3
 8009fc4:	68fb      	ldr	r3, [r7, #12]
 8009fc6:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8009fc8:	683b      	ldr	r3, [r7, #0]
 8009fca:	2b00      	cmp	r3, #0
 8009fcc:	d114      	bne.n	8009ff8 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8009fce:	68fb      	ldr	r3, [r7, #12]
 8009fd0:	699b      	ldr	r3, [r3, #24]
 8009fd2:	2b00      	cmp	r3, #0
 8009fd4:	d109      	bne.n	8009fea <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	6818      	ldr	r0, [r3, #0]
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8009fe0:	461a      	mov	r2, r3
 8009fe2:	2101      	movs	r1, #1
 8009fe4:	f003 faa2 	bl	800d52c <USB_EP0_OutStart>
 8009fe8:	e006      	b.n	8009ff8 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8009fea:	68fb      	ldr	r3, [r7, #12]
 8009fec:	691a      	ldr	r2, [r3, #16]
 8009fee:	68fb      	ldr	r3, [r7, #12]
 8009ff0:	6a1b      	ldr	r3, [r3, #32]
 8009ff2:	441a      	add	r2, r3
 8009ff4:	68fb      	ldr	r3, [r7, #12]
 8009ff6:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8009ff8:	683b      	ldr	r3, [r7, #0]
 8009ffa:	b2db      	uxtb	r3, r3
 8009ffc:	4619      	mov	r1, r3
 8009ffe:	6878      	ldr	r0, [r7, #4]
 800a000:	f005 fdb6 	bl	800fb70 <HAL_PCD_DataOutStageCallback>
 800a004:	e046      	b.n	800a094 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800a006:	697b      	ldr	r3, [r7, #20]
 800a008:	4a26      	ldr	r2, [pc, #152]	; (800a0a4 <PCD_EP_OutXfrComplete_int+0x1cc>)
 800a00a:	4293      	cmp	r3, r2
 800a00c:	d124      	bne.n	800a058 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800a00e:	693b      	ldr	r3, [r7, #16]
 800a010:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a014:	2b00      	cmp	r3, #0
 800a016:	d00a      	beq.n	800a02e <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800a018:	683b      	ldr	r3, [r7, #0]
 800a01a:	015a      	lsls	r2, r3, #5
 800a01c:	69bb      	ldr	r3, [r7, #24]
 800a01e:	4413      	add	r3, r2
 800a020:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a024:	461a      	mov	r2, r3
 800a026:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a02a:	6093      	str	r3, [r2, #8]
 800a02c:	e032      	b.n	800a094 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800a02e:	693b      	ldr	r3, [r7, #16]
 800a030:	f003 0320 	and.w	r3, r3, #32
 800a034:	2b00      	cmp	r3, #0
 800a036:	d008      	beq.n	800a04a <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800a038:	683b      	ldr	r3, [r7, #0]
 800a03a:	015a      	lsls	r2, r3, #5
 800a03c:	69bb      	ldr	r3, [r7, #24]
 800a03e:	4413      	add	r3, r2
 800a040:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a044:	461a      	mov	r2, r3
 800a046:	2320      	movs	r3, #32
 800a048:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800a04a:	683b      	ldr	r3, [r7, #0]
 800a04c:	b2db      	uxtb	r3, r3
 800a04e:	4619      	mov	r1, r3
 800a050:	6878      	ldr	r0, [r7, #4]
 800a052:	f005 fd8d 	bl	800fb70 <HAL_PCD_DataOutStageCallback>
 800a056:	e01d      	b.n	800a094 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800a058:	683b      	ldr	r3, [r7, #0]
 800a05a:	2b00      	cmp	r3, #0
 800a05c:	d114      	bne.n	800a088 <PCD_EP_OutXfrComplete_int+0x1b0>
 800a05e:	6879      	ldr	r1, [r7, #4]
 800a060:	683a      	ldr	r2, [r7, #0]
 800a062:	4613      	mov	r3, r2
 800a064:	00db      	lsls	r3, r3, #3
 800a066:	4413      	add	r3, r2
 800a068:	009b      	lsls	r3, r3, #2
 800a06a:	440b      	add	r3, r1
 800a06c:	f503 7325 	add.w	r3, r3, #660	; 0x294
 800a070:	681b      	ldr	r3, [r3, #0]
 800a072:	2b00      	cmp	r3, #0
 800a074:	d108      	bne.n	800a088 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	6818      	ldr	r0, [r3, #0]
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800a080:	461a      	mov	r2, r3
 800a082:	2100      	movs	r1, #0
 800a084:	f003 fa52 	bl	800d52c <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800a088:	683b      	ldr	r3, [r7, #0]
 800a08a:	b2db      	uxtb	r3, r3
 800a08c:	4619      	mov	r1, r3
 800a08e:	6878      	ldr	r0, [r7, #4]
 800a090:	f005 fd6e 	bl	800fb70 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800a094:	2300      	movs	r3, #0
}
 800a096:	4618      	mov	r0, r3
 800a098:	3720      	adds	r7, #32
 800a09a:	46bd      	mov	sp, r7
 800a09c:	bd80      	pop	{r7, pc}
 800a09e:	bf00      	nop
 800a0a0:	4f54300a 	.word	0x4f54300a
 800a0a4:	4f54310a 	.word	0x4f54310a

0800a0a8 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800a0a8:	b580      	push	{r7, lr}
 800a0aa:	b086      	sub	sp, #24
 800a0ac:	af00      	add	r7, sp, #0
 800a0ae:	6078      	str	r0, [r7, #4]
 800a0b0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	681b      	ldr	r3, [r3, #0]
 800a0b6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a0b8:	697b      	ldr	r3, [r7, #20]
 800a0ba:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800a0bc:	697b      	ldr	r3, [r7, #20]
 800a0be:	333c      	adds	r3, #60	; 0x3c
 800a0c0:	3304      	adds	r3, #4
 800a0c2:	681b      	ldr	r3, [r3, #0]
 800a0c4:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800a0c6:	683b      	ldr	r3, [r7, #0]
 800a0c8:	015a      	lsls	r2, r3, #5
 800a0ca:	693b      	ldr	r3, [r7, #16]
 800a0cc:	4413      	add	r3, r2
 800a0ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a0d2:	689b      	ldr	r3, [r3, #8]
 800a0d4:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800a0d6:	68fb      	ldr	r3, [r7, #12]
 800a0d8:	4a15      	ldr	r2, [pc, #84]	; (800a130 <PCD_EP_OutSetupPacket_int+0x88>)
 800a0da:	4293      	cmp	r3, r2
 800a0dc:	d90e      	bls.n	800a0fc <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800a0de:	68bb      	ldr	r3, [r7, #8]
 800a0e0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800a0e4:	2b00      	cmp	r3, #0
 800a0e6:	d009      	beq.n	800a0fc <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800a0e8:	683b      	ldr	r3, [r7, #0]
 800a0ea:	015a      	lsls	r2, r3, #5
 800a0ec:	693b      	ldr	r3, [r7, #16]
 800a0ee:	4413      	add	r3, r2
 800a0f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a0f4:	461a      	mov	r2, r3
 800a0f6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a0fa:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800a0fc:	6878      	ldr	r0, [r7, #4]
 800a0fe:	f005 fd25 	bl	800fb4c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800a102:	68fb      	ldr	r3, [r7, #12]
 800a104:	4a0a      	ldr	r2, [pc, #40]	; (800a130 <PCD_EP_OutSetupPacket_int+0x88>)
 800a106:	4293      	cmp	r3, r2
 800a108:	d90c      	bls.n	800a124 <PCD_EP_OutSetupPacket_int+0x7c>
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	691b      	ldr	r3, [r3, #16]
 800a10e:	2b01      	cmp	r3, #1
 800a110:	d108      	bne.n	800a124 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	6818      	ldr	r0, [r3, #0]
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800a11c:	461a      	mov	r2, r3
 800a11e:	2101      	movs	r1, #1
 800a120:	f003 fa04 	bl	800d52c <USB_EP0_OutStart>
  }

  return HAL_OK;
 800a124:	2300      	movs	r3, #0
}
 800a126:	4618      	mov	r0, r3
 800a128:	3718      	adds	r7, #24
 800a12a:	46bd      	mov	sp, r7
 800a12c:	bd80      	pop	{r7, pc}
 800a12e:	bf00      	nop
 800a130:	4f54300a 	.word	0x4f54300a

0800a134 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800a134:	b480      	push	{r7}
 800a136:	b085      	sub	sp, #20
 800a138:	af00      	add	r7, sp, #0
 800a13a:	6078      	str	r0, [r7, #4]
 800a13c:	460b      	mov	r3, r1
 800a13e:	70fb      	strb	r3, [r7, #3]
 800a140:	4613      	mov	r3, r2
 800a142:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	681b      	ldr	r3, [r3, #0]
 800a148:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a14a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800a14c:	78fb      	ldrb	r3, [r7, #3]
 800a14e:	2b00      	cmp	r3, #0
 800a150:	d107      	bne.n	800a162 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800a152:	883b      	ldrh	r3, [r7, #0]
 800a154:	0419      	lsls	r1, r3, #16
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	681b      	ldr	r3, [r3, #0]
 800a15a:	68ba      	ldr	r2, [r7, #8]
 800a15c:	430a      	orrs	r2, r1
 800a15e:	629a      	str	r2, [r3, #40]	; 0x28
 800a160:	e028      	b.n	800a1b4 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	681b      	ldr	r3, [r3, #0]
 800a166:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a168:	0c1b      	lsrs	r3, r3, #16
 800a16a:	68ba      	ldr	r2, [r7, #8]
 800a16c:	4413      	add	r3, r2
 800a16e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800a170:	2300      	movs	r3, #0
 800a172:	73fb      	strb	r3, [r7, #15]
 800a174:	e00d      	b.n	800a192 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	681a      	ldr	r2, [r3, #0]
 800a17a:	7bfb      	ldrb	r3, [r7, #15]
 800a17c:	3340      	adds	r3, #64	; 0x40
 800a17e:	009b      	lsls	r3, r3, #2
 800a180:	4413      	add	r3, r2
 800a182:	685b      	ldr	r3, [r3, #4]
 800a184:	0c1b      	lsrs	r3, r3, #16
 800a186:	68ba      	ldr	r2, [r7, #8]
 800a188:	4413      	add	r3, r2
 800a18a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800a18c:	7bfb      	ldrb	r3, [r7, #15]
 800a18e:	3301      	adds	r3, #1
 800a190:	73fb      	strb	r3, [r7, #15]
 800a192:	7bfa      	ldrb	r2, [r7, #15]
 800a194:	78fb      	ldrb	r3, [r7, #3]
 800a196:	3b01      	subs	r3, #1
 800a198:	429a      	cmp	r2, r3
 800a19a:	d3ec      	bcc.n	800a176 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800a19c:	883b      	ldrh	r3, [r7, #0]
 800a19e:	0418      	lsls	r0, r3, #16
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	6819      	ldr	r1, [r3, #0]
 800a1a4:	78fb      	ldrb	r3, [r7, #3]
 800a1a6:	3b01      	subs	r3, #1
 800a1a8:	68ba      	ldr	r2, [r7, #8]
 800a1aa:	4302      	orrs	r2, r0
 800a1ac:	3340      	adds	r3, #64	; 0x40
 800a1ae:	009b      	lsls	r3, r3, #2
 800a1b0:	440b      	add	r3, r1
 800a1b2:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800a1b4:	2300      	movs	r3, #0
}
 800a1b6:	4618      	mov	r0, r3
 800a1b8:	3714      	adds	r7, #20
 800a1ba:	46bd      	mov	sp, r7
 800a1bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1c0:	4770      	bx	lr

0800a1c2 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800a1c2:	b480      	push	{r7}
 800a1c4:	b083      	sub	sp, #12
 800a1c6:	af00      	add	r7, sp, #0
 800a1c8:	6078      	str	r0, [r7, #4]
 800a1ca:	460b      	mov	r3, r1
 800a1cc:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	681b      	ldr	r3, [r3, #0]
 800a1d2:	887a      	ldrh	r2, [r7, #2]
 800a1d4:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800a1d6:	2300      	movs	r3, #0
}
 800a1d8:	4618      	mov	r0, r3
 800a1da:	370c      	adds	r7, #12
 800a1dc:	46bd      	mov	sp, r7
 800a1de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1e2:	4770      	bx	lr

0800a1e4 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800a1e4:	b480      	push	{r7}
 800a1e6:	b085      	sub	sp, #20
 800a1e8:	af00      	add	r7, sp, #0
 800a1ea:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	681b      	ldr	r3, [r3, #0]
 800a1f0:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	2201      	movs	r2, #1
 800a1f6:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	2200      	movs	r2, #0
 800a1fe:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800a202:	68fb      	ldr	r3, [r7, #12]
 800a204:	699b      	ldr	r3, [r3, #24]
 800a206:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800a20a:	68fb      	ldr	r3, [r7, #12]
 800a20c:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800a20e:	68fb      	ldr	r3, [r7, #12]
 800a210:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a212:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a216:	f043 0303 	orr.w	r3, r3, #3
 800a21a:	68fa      	ldr	r2, [r7, #12]
 800a21c:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 800a21e:	2300      	movs	r3, #0
}
 800a220:	4618      	mov	r0, r3
 800a222:	3714      	adds	r7, #20
 800a224:	46bd      	mov	sp, r7
 800a226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a22a:	4770      	bx	lr

0800a22c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800a22c:	b580      	push	{r7, lr}
 800a22e:	b084      	sub	sp, #16
 800a230:	af00      	add	r7, sp, #0
 800a232:	6078      	str	r0, [r7, #4]
 800a234:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	2b00      	cmp	r3, #0
 800a23a:	d101      	bne.n	800a240 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800a23c:	2301      	movs	r3, #1
 800a23e:	e0cc      	b.n	800a3da <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800a240:	4b68      	ldr	r3, [pc, #416]	; (800a3e4 <HAL_RCC_ClockConfig+0x1b8>)
 800a242:	681b      	ldr	r3, [r3, #0]
 800a244:	f003 030f 	and.w	r3, r3, #15
 800a248:	683a      	ldr	r2, [r7, #0]
 800a24a:	429a      	cmp	r2, r3
 800a24c:	d90c      	bls.n	800a268 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a24e:	4b65      	ldr	r3, [pc, #404]	; (800a3e4 <HAL_RCC_ClockConfig+0x1b8>)
 800a250:	683a      	ldr	r2, [r7, #0]
 800a252:	b2d2      	uxtb	r2, r2
 800a254:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800a256:	4b63      	ldr	r3, [pc, #396]	; (800a3e4 <HAL_RCC_ClockConfig+0x1b8>)
 800a258:	681b      	ldr	r3, [r3, #0]
 800a25a:	f003 030f 	and.w	r3, r3, #15
 800a25e:	683a      	ldr	r2, [r7, #0]
 800a260:	429a      	cmp	r2, r3
 800a262:	d001      	beq.n	800a268 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800a264:	2301      	movs	r3, #1
 800a266:	e0b8      	b.n	800a3da <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	681b      	ldr	r3, [r3, #0]
 800a26c:	f003 0302 	and.w	r3, r3, #2
 800a270:	2b00      	cmp	r3, #0
 800a272:	d020      	beq.n	800a2b6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	681b      	ldr	r3, [r3, #0]
 800a278:	f003 0304 	and.w	r3, r3, #4
 800a27c:	2b00      	cmp	r3, #0
 800a27e:	d005      	beq.n	800a28c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800a280:	4b59      	ldr	r3, [pc, #356]	; (800a3e8 <HAL_RCC_ClockConfig+0x1bc>)
 800a282:	689b      	ldr	r3, [r3, #8]
 800a284:	4a58      	ldr	r2, [pc, #352]	; (800a3e8 <HAL_RCC_ClockConfig+0x1bc>)
 800a286:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800a28a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	681b      	ldr	r3, [r3, #0]
 800a290:	f003 0308 	and.w	r3, r3, #8
 800a294:	2b00      	cmp	r3, #0
 800a296:	d005      	beq.n	800a2a4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800a298:	4b53      	ldr	r3, [pc, #332]	; (800a3e8 <HAL_RCC_ClockConfig+0x1bc>)
 800a29a:	689b      	ldr	r3, [r3, #8]
 800a29c:	4a52      	ldr	r2, [pc, #328]	; (800a3e8 <HAL_RCC_ClockConfig+0x1bc>)
 800a29e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800a2a2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a2a4:	4b50      	ldr	r3, [pc, #320]	; (800a3e8 <HAL_RCC_ClockConfig+0x1bc>)
 800a2a6:	689b      	ldr	r3, [r3, #8]
 800a2a8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	689b      	ldr	r3, [r3, #8]
 800a2b0:	494d      	ldr	r1, [pc, #308]	; (800a3e8 <HAL_RCC_ClockConfig+0x1bc>)
 800a2b2:	4313      	orrs	r3, r2
 800a2b4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	681b      	ldr	r3, [r3, #0]
 800a2ba:	f003 0301 	and.w	r3, r3, #1
 800a2be:	2b00      	cmp	r3, #0
 800a2c0:	d044      	beq.n	800a34c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	685b      	ldr	r3, [r3, #4]
 800a2c6:	2b01      	cmp	r3, #1
 800a2c8:	d107      	bne.n	800a2da <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a2ca:	4b47      	ldr	r3, [pc, #284]	; (800a3e8 <HAL_RCC_ClockConfig+0x1bc>)
 800a2cc:	681b      	ldr	r3, [r3, #0]
 800a2ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a2d2:	2b00      	cmp	r3, #0
 800a2d4:	d119      	bne.n	800a30a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800a2d6:	2301      	movs	r3, #1
 800a2d8:	e07f      	b.n	800a3da <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	685b      	ldr	r3, [r3, #4]
 800a2de:	2b02      	cmp	r3, #2
 800a2e0:	d003      	beq.n	800a2ea <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800a2e6:	2b03      	cmp	r3, #3
 800a2e8:	d107      	bne.n	800a2fa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800a2ea:	4b3f      	ldr	r3, [pc, #252]	; (800a3e8 <HAL_RCC_ClockConfig+0x1bc>)
 800a2ec:	681b      	ldr	r3, [r3, #0]
 800a2ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a2f2:	2b00      	cmp	r3, #0
 800a2f4:	d109      	bne.n	800a30a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800a2f6:	2301      	movs	r3, #1
 800a2f8:	e06f      	b.n	800a3da <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a2fa:	4b3b      	ldr	r3, [pc, #236]	; (800a3e8 <HAL_RCC_ClockConfig+0x1bc>)
 800a2fc:	681b      	ldr	r3, [r3, #0]
 800a2fe:	f003 0302 	and.w	r3, r3, #2
 800a302:	2b00      	cmp	r3, #0
 800a304:	d101      	bne.n	800a30a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800a306:	2301      	movs	r3, #1
 800a308:	e067      	b.n	800a3da <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800a30a:	4b37      	ldr	r3, [pc, #220]	; (800a3e8 <HAL_RCC_ClockConfig+0x1bc>)
 800a30c:	689b      	ldr	r3, [r3, #8]
 800a30e:	f023 0203 	bic.w	r2, r3, #3
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	685b      	ldr	r3, [r3, #4]
 800a316:	4934      	ldr	r1, [pc, #208]	; (800a3e8 <HAL_RCC_ClockConfig+0x1bc>)
 800a318:	4313      	orrs	r3, r2
 800a31a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800a31c:	f7fc fd4e 	bl	8006dbc <HAL_GetTick>
 800a320:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a322:	e00a      	b.n	800a33a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a324:	f7fc fd4a 	bl	8006dbc <HAL_GetTick>
 800a328:	4602      	mov	r2, r0
 800a32a:	68fb      	ldr	r3, [r7, #12]
 800a32c:	1ad3      	subs	r3, r2, r3
 800a32e:	f241 3288 	movw	r2, #5000	; 0x1388
 800a332:	4293      	cmp	r3, r2
 800a334:	d901      	bls.n	800a33a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800a336:	2303      	movs	r3, #3
 800a338:	e04f      	b.n	800a3da <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a33a:	4b2b      	ldr	r3, [pc, #172]	; (800a3e8 <HAL_RCC_ClockConfig+0x1bc>)
 800a33c:	689b      	ldr	r3, [r3, #8]
 800a33e:	f003 020c 	and.w	r2, r3, #12
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	685b      	ldr	r3, [r3, #4]
 800a346:	009b      	lsls	r3, r3, #2
 800a348:	429a      	cmp	r2, r3
 800a34a:	d1eb      	bne.n	800a324 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800a34c:	4b25      	ldr	r3, [pc, #148]	; (800a3e4 <HAL_RCC_ClockConfig+0x1b8>)
 800a34e:	681b      	ldr	r3, [r3, #0]
 800a350:	f003 030f 	and.w	r3, r3, #15
 800a354:	683a      	ldr	r2, [r7, #0]
 800a356:	429a      	cmp	r2, r3
 800a358:	d20c      	bcs.n	800a374 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a35a:	4b22      	ldr	r3, [pc, #136]	; (800a3e4 <HAL_RCC_ClockConfig+0x1b8>)
 800a35c:	683a      	ldr	r2, [r7, #0]
 800a35e:	b2d2      	uxtb	r2, r2
 800a360:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800a362:	4b20      	ldr	r3, [pc, #128]	; (800a3e4 <HAL_RCC_ClockConfig+0x1b8>)
 800a364:	681b      	ldr	r3, [r3, #0]
 800a366:	f003 030f 	and.w	r3, r3, #15
 800a36a:	683a      	ldr	r2, [r7, #0]
 800a36c:	429a      	cmp	r2, r3
 800a36e:	d001      	beq.n	800a374 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800a370:	2301      	movs	r3, #1
 800a372:	e032      	b.n	800a3da <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	681b      	ldr	r3, [r3, #0]
 800a378:	f003 0304 	and.w	r3, r3, #4
 800a37c:	2b00      	cmp	r3, #0
 800a37e:	d008      	beq.n	800a392 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800a380:	4b19      	ldr	r3, [pc, #100]	; (800a3e8 <HAL_RCC_ClockConfig+0x1bc>)
 800a382:	689b      	ldr	r3, [r3, #8]
 800a384:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	68db      	ldr	r3, [r3, #12]
 800a38c:	4916      	ldr	r1, [pc, #88]	; (800a3e8 <HAL_RCC_ClockConfig+0x1bc>)
 800a38e:	4313      	orrs	r3, r2
 800a390:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	681b      	ldr	r3, [r3, #0]
 800a396:	f003 0308 	and.w	r3, r3, #8
 800a39a:	2b00      	cmp	r3, #0
 800a39c:	d009      	beq.n	800a3b2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800a39e:	4b12      	ldr	r3, [pc, #72]	; (800a3e8 <HAL_RCC_ClockConfig+0x1bc>)
 800a3a0:	689b      	ldr	r3, [r3, #8]
 800a3a2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	691b      	ldr	r3, [r3, #16]
 800a3aa:	00db      	lsls	r3, r3, #3
 800a3ac:	490e      	ldr	r1, [pc, #56]	; (800a3e8 <HAL_RCC_ClockConfig+0x1bc>)
 800a3ae:	4313      	orrs	r3, r2
 800a3b0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800a3b2:	f000 fb6b 	bl	800aa8c <HAL_RCC_GetSysClockFreq>
 800a3b6:	4602      	mov	r2, r0
 800a3b8:	4b0b      	ldr	r3, [pc, #44]	; (800a3e8 <HAL_RCC_ClockConfig+0x1bc>)
 800a3ba:	689b      	ldr	r3, [r3, #8]
 800a3bc:	091b      	lsrs	r3, r3, #4
 800a3be:	f003 030f 	and.w	r3, r3, #15
 800a3c2:	490a      	ldr	r1, [pc, #40]	; (800a3ec <HAL_RCC_ClockConfig+0x1c0>)
 800a3c4:	5ccb      	ldrb	r3, [r1, r3]
 800a3c6:	fa22 f303 	lsr.w	r3, r2, r3
 800a3ca:	4a09      	ldr	r2, [pc, #36]	; (800a3f0 <HAL_RCC_ClockConfig+0x1c4>)
 800a3cc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800a3ce:	4b09      	ldr	r3, [pc, #36]	; (800a3f4 <HAL_RCC_ClockConfig+0x1c8>)
 800a3d0:	681b      	ldr	r3, [r3, #0]
 800a3d2:	4618      	mov	r0, r3
 800a3d4:	f7fc fcae 	bl	8006d34 <HAL_InitTick>

  return HAL_OK;
 800a3d8:	2300      	movs	r3, #0
}
 800a3da:	4618      	mov	r0, r3
 800a3dc:	3710      	adds	r7, #16
 800a3de:	46bd      	mov	sp, r7
 800a3e0:	bd80      	pop	{r7, pc}
 800a3e2:	bf00      	nop
 800a3e4:	40023c00 	.word	0x40023c00
 800a3e8:	40023800 	.word	0x40023800
 800a3ec:	08014934 	.word	0x08014934
 800a3f0:	20000028 	.word	0x20000028
 800a3f4:	20000100 	.word	0x20000100

0800a3f8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800a3f8:	b480      	push	{r7}
 800a3fa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800a3fc:	4b03      	ldr	r3, [pc, #12]	; (800a40c <HAL_RCC_GetHCLKFreq+0x14>)
 800a3fe:	681b      	ldr	r3, [r3, #0]
}
 800a400:	4618      	mov	r0, r3
 800a402:	46bd      	mov	sp, r7
 800a404:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a408:	4770      	bx	lr
 800a40a:	bf00      	nop
 800a40c:	20000028 	.word	0x20000028

0800a410 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800a410:	b580      	push	{r7, lr}
 800a412:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800a414:	f7ff fff0 	bl	800a3f8 <HAL_RCC_GetHCLKFreq>
 800a418:	4602      	mov	r2, r0
 800a41a:	4b05      	ldr	r3, [pc, #20]	; (800a430 <HAL_RCC_GetPCLK1Freq+0x20>)
 800a41c:	689b      	ldr	r3, [r3, #8]
 800a41e:	0a9b      	lsrs	r3, r3, #10
 800a420:	f003 0307 	and.w	r3, r3, #7
 800a424:	4903      	ldr	r1, [pc, #12]	; (800a434 <HAL_RCC_GetPCLK1Freq+0x24>)
 800a426:	5ccb      	ldrb	r3, [r1, r3]
 800a428:	fa22 f303 	lsr.w	r3, r2, r3
}
 800a42c:	4618      	mov	r0, r3
 800a42e:	bd80      	pop	{r7, pc}
 800a430:	40023800 	.word	0x40023800
 800a434:	08014944 	.word	0x08014944

0800a438 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800a438:	b580      	push	{r7, lr}
 800a43a:	b08c      	sub	sp, #48	; 0x30
 800a43c:	af00      	add	r7, sp, #0
 800a43e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800a440:	2300      	movs	r3, #0
 800a442:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmpreg1 = 0U;
 800a444:	2300      	movs	r3, #0
 800a446:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 800a448:	2300      	movs	r3, #0
 800a44a:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 800a44c:	2300      	movs	r3, #0
 800a44e:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 800a450:	2300      	movs	r3, #0
 800a452:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 800a454:	2300      	movs	r3, #0
 800a456:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 800a458:	2300      	movs	r3, #0
 800a45a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 800a45c:	2300      	movs	r3, #0
 800a45e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t pllsaiused = 0U;
 800a460:	2300      	movs	r3, #0
 800a462:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	681b      	ldr	r3, [r3, #0]
 800a468:	f003 0301 	and.w	r3, r3, #1
 800a46c:	2b00      	cmp	r3, #0
 800a46e:	d010      	beq.n	800a492 <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 800a470:	4b6f      	ldr	r3, [pc, #444]	; (800a630 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800a472:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a476:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a47e:	496c      	ldr	r1, [pc, #432]	; (800a630 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800a480:	4313      	orrs	r3, r2
 800a482:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a48a:	2b00      	cmp	r3, #0
 800a48c:	d101      	bne.n	800a492 <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 800a48e:	2301      	movs	r3, #1
 800a490:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	681b      	ldr	r3, [r3, #0]
 800a496:	f003 0302 	and.w	r3, r3, #2
 800a49a:	2b00      	cmp	r3, #0
 800a49c:	d010      	beq.n	800a4c0 <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 800a49e:	4b64      	ldr	r3, [pc, #400]	; (800a630 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800a4a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a4a4:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a4ac:	4960      	ldr	r1, [pc, #384]	; (800a630 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800a4ae:	4313      	orrs	r3, r2
 800a4b0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a4b8:	2b00      	cmp	r3, #0
 800a4ba:	d101      	bne.n	800a4c0 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 800a4bc:	2301      	movs	r3, #1
 800a4be:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	681b      	ldr	r3, [r3, #0]
 800a4c4:	f003 0304 	and.w	r3, r3, #4
 800a4c8:	2b00      	cmp	r3, #0
 800a4ca:	d017      	beq.n	800a4fc <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800a4cc:	4b58      	ldr	r3, [pc, #352]	; (800a630 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800a4ce:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a4d2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a4da:	4955      	ldr	r1, [pc, #340]	; (800a630 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800a4dc:	4313      	orrs	r3, r2
 800a4de:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a4e6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a4ea:	d101      	bne.n	800a4f0 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 800a4ec:	2301      	movs	r3, #1
 800a4ee:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a4f4:	2b00      	cmp	r3, #0
 800a4f6:	d101      	bne.n	800a4fc <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 800a4f8:	2301      	movs	r3, #1
 800a4fa:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	681b      	ldr	r3, [r3, #0]
 800a500:	f003 0308 	and.w	r3, r3, #8
 800a504:	2b00      	cmp	r3, #0
 800a506:	d017      	beq.n	800a538 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800a508:	4b49      	ldr	r3, [pc, #292]	; (800a630 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800a50a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a50e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800a512:	687b      	ldr	r3, [r7, #4]
 800a514:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a516:	4946      	ldr	r1, [pc, #280]	; (800a630 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800a518:	4313      	orrs	r3, r2
 800a51a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a522:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a526:	d101      	bne.n	800a52c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 800a528:	2301      	movs	r3, #1
 800a52a:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a530:	2b00      	cmp	r3, #0
 800a532:	d101      	bne.n	800a538 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 800a534:	2301      	movs	r3, #1
 800a536:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	681b      	ldr	r3, [r3, #0]
 800a53c:	f003 0320 	and.w	r3, r3, #32
 800a540:	2b00      	cmp	r3, #0
 800a542:	f000 808a 	beq.w	800a65a <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800a546:	2300      	movs	r3, #0
 800a548:	60bb      	str	r3, [r7, #8]
 800a54a:	4b39      	ldr	r3, [pc, #228]	; (800a630 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800a54c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a54e:	4a38      	ldr	r2, [pc, #224]	; (800a630 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800a550:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a554:	6413      	str	r3, [r2, #64]	; 0x40
 800a556:	4b36      	ldr	r3, [pc, #216]	; (800a630 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800a558:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a55a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a55e:	60bb      	str	r3, [r7, #8]
 800a560:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800a562:	4b34      	ldr	r3, [pc, #208]	; (800a634 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 800a564:	681b      	ldr	r3, [r3, #0]
 800a566:	4a33      	ldr	r2, [pc, #204]	; (800a634 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 800a568:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a56c:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800a56e:	f7fc fc25 	bl	8006dbc <HAL_GetTick>
 800a572:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR & PWR_CR_DBP) == RESET)
 800a574:	e008      	b.n	800a588 <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800a576:	f7fc fc21 	bl	8006dbc <HAL_GetTick>
 800a57a:	4602      	mov	r2, r0
 800a57c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a57e:	1ad3      	subs	r3, r2, r3
 800a580:	2b02      	cmp	r3, #2
 800a582:	d901      	bls.n	800a588 <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 800a584:	2303      	movs	r3, #3
 800a586:	e278      	b.n	800aa7a <HAL_RCCEx_PeriphCLKConfig+0x642>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800a588:	4b2a      	ldr	r3, [pc, #168]	; (800a634 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 800a58a:	681b      	ldr	r3, [r3, #0]
 800a58c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a590:	2b00      	cmp	r3, #0
 800a592:	d0f0      	beq.n	800a576 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800a594:	4b26      	ldr	r3, [pc, #152]	; (800a630 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800a596:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a598:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a59c:	623b      	str	r3, [r7, #32]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800a59e:	6a3b      	ldr	r3, [r7, #32]
 800a5a0:	2b00      	cmp	r3, #0
 800a5a2:	d02f      	beq.n	800a604 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a5a8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a5ac:	6a3a      	ldr	r2, [r7, #32]
 800a5ae:	429a      	cmp	r2, r3
 800a5b0:	d028      	beq.n	800a604 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800a5b2:	4b1f      	ldr	r3, [pc, #124]	; (800a630 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800a5b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a5b6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a5ba:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800a5bc:	4b1e      	ldr	r3, [pc, #120]	; (800a638 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 800a5be:	2201      	movs	r2, #1
 800a5c0:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800a5c2:	4b1d      	ldr	r3, [pc, #116]	; (800a638 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 800a5c4:	2200      	movs	r2, #0
 800a5c6:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800a5c8:	4a19      	ldr	r2, [pc, #100]	; (800a630 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800a5ca:	6a3b      	ldr	r3, [r7, #32]
 800a5cc:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800a5ce:	4b18      	ldr	r3, [pc, #96]	; (800a630 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800a5d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a5d2:	f003 0301 	and.w	r3, r3, #1
 800a5d6:	2b01      	cmp	r3, #1
 800a5d8:	d114      	bne.n	800a604 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800a5da:	f7fc fbef 	bl	8006dbc <HAL_GetTick>
 800a5de:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a5e0:	e00a      	b.n	800a5f8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800a5e2:	f7fc fbeb 	bl	8006dbc <HAL_GetTick>
 800a5e6:	4602      	mov	r2, r0
 800a5e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5ea:	1ad3      	subs	r3, r2, r3
 800a5ec:	f241 3288 	movw	r2, #5000	; 0x1388
 800a5f0:	4293      	cmp	r3, r2
 800a5f2:	d901      	bls.n	800a5f8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 800a5f4:	2303      	movs	r3, #3
 800a5f6:	e240      	b.n	800aa7a <HAL_RCCEx_PeriphCLKConfig+0x642>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a5f8:	4b0d      	ldr	r3, [pc, #52]	; (800a630 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800a5fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a5fc:	f003 0302 	and.w	r3, r3, #2
 800a600:	2b00      	cmp	r3, #0
 800a602:	d0ee      	beq.n	800a5e2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a608:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a60c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a610:	d114      	bne.n	800a63c <HAL_RCCEx_PeriphCLKConfig+0x204>
 800a612:	4b07      	ldr	r3, [pc, #28]	; (800a630 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800a614:	689b      	ldr	r3, [r3, #8]
 800a616:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a61e:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800a622:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a626:	4902      	ldr	r1, [pc, #8]	; (800a630 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800a628:	4313      	orrs	r3, r2
 800a62a:	608b      	str	r3, [r1, #8]
 800a62c:	e00c      	b.n	800a648 <HAL_RCCEx_PeriphCLKConfig+0x210>
 800a62e:	bf00      	nop
 800a630:	40023800 	.word	0x40023800
 800a634:	40007000 	.word	0x40007000
 800a638:	42470e40 	.word	0x42470e40
 800a63c:	4b4a      	ldr	r3, [pc, #296]	; (800a768 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800a63e:	689b      	ldr	r3, [r3, #8]
 800a640:	4a49      	ldr	r2, [pc, #292]	; (800a768 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800a642:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800a646:	6093      	str	r3, [r2, #8]
 800a648:	4b47      	ldr	r3, [pc, #284]	; (800a768 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800a64a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a650:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a654:	4944      	ldr	r1, [pc, #272]	; (800a768 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800a656:	4313      	orrs	r3, r2
 800a658:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800a65a:	687b      	ldr	r3, [r7, #4]
 800a65c:	681b      	ldr	r3, [r3, #0]
 800a65e:	f003 0310 	and.w	r3, r3, #16
 800a662:	2b00      	cmp	r3, #0
 800a664:	d004      	beq.n	800a670 <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 800a66c:	4b3f      	ldr	r3, [pc, #252]	; (800a76c <HAL_RCCEx_PeriphCLKConfig+0x334>)
 800a66e:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	681b      	ldr	r3, [r3, #0]
 800a674:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a678:	2b00      	cmp	r3, #0
 800a67a:	d00a      	beq.n	800a692 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 800a67c:	4b3a      	ldr	r3, [pc, #232]	; (800a768 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800a67e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a682:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800a686:	687b      	ldr	r3, [r7, #4]
 800a688:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a68a:	4937      	ldr	r1, [pc, #220]	; (800a768 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800a68c:	4313      	orrs	r3, r2
 800a68e:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	681b      	ldr	r3, [r3, #0]
 800a696:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a69a:	2b00      	cmp	r3, #0
 800a69c:	d00a      	beq.n	800a6b4 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800a69e:	4b32      	ldr	r3, [pc, #200]	; (800a768 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800a6a0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a6a4:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a6ac:	492e      	ldr	r1, [pc, #184]	; (800a768 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800a6ae:	4313      	orrs	r3, r2
 800a6b0:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	681b      	ldr	r3, [r3, #0]
 800a6b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a6bc:	2b00      	cmp	r3, #0
 800a6be:	d011      	beq.n	800a6e4 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800a6c0:	4b29      	ldr	r3, [pc, #164]	; (800a768 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800a6c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a6c6:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a6ce:	4926      	ldr	r1, [pc, #152]	; (800a768 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800a6d0:	4313      	orrs	r3, r2
 800a6d2:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a6da:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a6de:	d101      	bne.n	800a6e4 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 800a6e0:	2301      	movs	r3, #1
 800a6e2:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	681b      	ldr	r3, [r3, #0]
 800a6e8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a6ec:	2b00      	cmp	r3, #0
 800a6ee:	d00a      	beq.n	800a706 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 800a6f0:	4b1d      	ldr	r3, [pc, #116]	; (800a768 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800a6f2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a6f6:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800a6fa:	687b      	ldr	r3, [r7, #4]
 800a6fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a6fe:	491a      	ldr	r1, [pc, #104]	; (800a768 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800a700:	4313      	orrs	r3, r2
 800a702:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	681b      	ldr	r3, [r3, #0]
 800a70a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a70e:	2b00      	cmp	r3, #0
 800a710:	d011      	beq.n	800a736 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 800a712:	4b15      	ldr	r3, [pc, #84]	; (800a768 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800a714:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a718:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a720:	4911      	ldr	r1, [pc, #68]	; (800a768 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800a722:	4313      	orrs	r3, r2
 800a724:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a72c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a730:	d101      	bne.n	800a736 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 800a732:	2301      	movs	r3, #1
 800a734:	62fb      	str	r3, [r7, #44]	; 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 800a736:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a738:	2b01      	cmp	r3, #1
 800a73a:	d005      	beq.n	800a748 <HAL_RCCEx_PeriphCLKConfig+0x310>
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	681b      	ldr	r3, [r3, #0]
 800a740:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a744:	f040 80ff 	bne.w	800a946 <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800a748:	4b09      	ldr	r3, [pc, #36]	; (800a770 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800a74a:	2200      	movs	r2, #0
 800a74c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800a74e:	f7fc fb35 	bl	8006dbc <HAL_GetTick>
 800a752:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800a754:	e00e      	b.n	800a774 <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800a756:	f7fc fb31 	bl	8006dbc <HAL_GetTick>
 800a75a:	4602      	mov	r2, r0
 800a75c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a75e:	1ad3      	subs	r3, r2, r3
 800a760:	2b02      	cmp	r3, #2
 800a762:	d907      	bls.n	800a774 <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800a764:	2303      	movs	r3, #3
 800a766:	e188      	b.n	800aa7a <HAL_RCCEx_PeriphCLKConfig+0x642>
 800a768:	40023800 	.word	0x40023800
 800a76c:	424711e0 	.word	0x424711e0
 800a770:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800a774:	4b7e      	ldr	r3, [pc, #504]	; (800a970 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800a776:	681b      	ldr	r3, [r3, #0]
 800a778:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a77c:	2b00      	cmp	r3, #0
 800a77e:	d1ea      	bne.n	800a756 <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 800a780:	687b      	ldr	r3, [r7, #4]
 800a782:	681b      	ldr	r3, [r3, #0]
 800a784:	f003 0301 	and.w	r3, r3, #1
 800a788:	2b00      	cmp	r3, #0
 800a78a:	d003      	beq.n	800a794 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a790:	2b00      	cmp	r3, #0
 800a792:	d009      	beq.n	800a7a8 <HAL_RCCEx_PeriphCLKConfig+0x370>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	681b      	ldr	r3, [r3, #0]
 800a798:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 800a79c:	2b00      	cmp	r3, #0
 800a79e:	d028      	beq.n	800a7f2 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a7a4:	2b00      	cmp	r3, #0
 800a7a6:	d124      	bne.n	800a7f2 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 800a7a8:	4b71      	ldr	r3, [pc, #452]	; (800a970 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800a7aa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a7ae:	0c1b      	lsrs	r3, r3, #16
 800a7b0:	f003 0303 	and.w	r3, r3, #3
 800a7b4:	3301      	adds	r3, #1
 800a7b6:	005b      	lsls	r3, r3, #1
 800a7b8:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800a7ba:	4b6d      	ldr	r3, [pc, #436]	; (800a970 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800a7bc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a7c0:	0e1b      	lsrs	r3, r3, #24
 800a7c2:	f003 030f 	and.w	r3, r3, #15
 800a7c6:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	685a      	ldr	r2, [r3, #4]
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	689b      	ldr	r3, [r3, #8]
 800a7d0:	019b      	lsls	r3, r3, #6
 800a7d2:	431a      	orrs	r2, r3
 800a7d4:	69fb      	ldr	r3, [r7, #28]
 800a7d6:	085b      	lsrs	r3, r3, #1
 800a7d8:	3b01      	subs	r3, #1
 800a7da:	041b      	lsls	r3, r3, #16
 800a7dc:	431a      	orrs	r2, r3
 800a7de:	69bb      	ldr	r3, [r7, #24]
 800a7e0:	061b      	lsls	r3, r3, #24
 800a7e2:	431a      	orrs	r2, r3
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	695b      	ldr	r3, [r3, #20]
 800a7e8:	071b      	lsls	r3, r3, #28
 800a7ea:	4961      	ldr	r1, [pc, #388]	; (800a970 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800a7ec:	4313      	orrs	r3, r2
 800a7ee:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	681b      	ldr	r3, [r3, #0]
 800a7f6:	f003 0304 	and.w	r3, r3, #4
 800a7fa:	2b00      	cmp	r3, #0
 800a7fc:	d004      	beq.n	800a808 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a802:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a806:	d00a      	beq.n	800a81e <HAL_RCCEx_PeriphCLKConfig+0x3e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	681b      	ldr	r3, [r3, #0]
 800a80c:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800a810:	2b00      	cmp	r3, #0
 800a812:	d035      	beq.n	800a880 <HAL_RCCEx_PeriphCLKConfig+0x448>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a818:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a81c:	d130      	bne.n	800a880 <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 800a81e:	4b54      	ldr	r3, [pc, #336]	; (800a970 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800a820:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a824:	0c1b      	lsrs	r3, r3, #16
 800a826:	f003 0303 	and.w	r3, r3, #3
 800a82a:	3301      	adds	r3, #1
 800a82c:	005b      	lsls	r3, r3, #1
 800a82e:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800a830:	4b4f      	ldr	r3, [pc, #316]	; (800a970 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800a832:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a836:	0f1b      	lsrs	r3, r3, #28
 800a838:	f003 0307 	and.w	r3, r3, #7
 800a83c:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);
 800a83e:	687b      	ldr	r3, [r7, #4]
 800a840:	685a      	ldr	r2, [r3, #4]
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	689b      	ldr	r3, [r3, #8]
 800a846:	019b      	lsls	r3, r3, #6
 800a848:	431a      	orrs	r2, r3
 800a84a:	69fb      	ldr	r3, [r7, #28]
 800a84c:	085b      	lsrs	r3, r3, #1
 800a84e:	3b01      	subs	r3, #1
 800a850:	041b      	lsls	r3, r3, #16
 800a852:	431a      	orrs	r2, r3
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	691b      	ldr	r3, [r3, #16]
 800a858:	061b      	lsls	r3, r3, #24
 800a85a:	431a      	orrs	r2, r3
 800a85c:	697b      	ldr	r3, [r7, #20]
 800a85e:	071b      	lsls	r3, r3, #28
 800a860:	4943      	ldr	r1, [pc, #268]	; (800a970 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800a862:	4313      	orrs	r3, r2
 800a864:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800a868:	4b41      	ldr	r3, [pc, #260]	; (800a970 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800a86a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a86e:	f023 021f 	bic.w	r2, r3, #31
 800a872:	687b      	ldr	r3, [r7, #4]
 800a874:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a876:	3b01      	subs	r3, #1
 800a878:	493d      	ldr	r1, [pc, #244]	; (800a970 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800a87a:	4313      	orrs	r3, r2
 800a87c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX) && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	681b      	ldr	r3, [r3, #0]
 800a884:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a888:	2b00      	cmp	r3, #0
 800a88a:	d029      	beq.n	800a8e0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a890:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a894:	d124      	bne.n	800a8e0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 800a896:	4b36      	ldr	r3, [pc, #216]	; (800a970 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800a898:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a89c:	0c1b      	lsrs	r3, r3, #16
 800a89e:	f003 0303 	and.w	r3, r3, #3
 800a8a2:	3301      	adds	r3, #1
 800a8a4:	005b      	lsls	r3, r3, #1
 800a8a6:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800a8a8:	4b31      	ldr	r3, [pc, #196]	; (800a970 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800a8aa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a8ae:	0f1b      	lsrs	r3, r3, #28
 800a8b0:	f003 0307 	and.w	r3, r3, #7
 800a8b4:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 800a8b6:	687b      	ldr	r3, [r7, #4]
 800a8b8:	685a      	ldr	r2, [r3, #4]
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	689b      	ldr	r3, [r3, #8]
 800a8be:	019b      	lsls	r3, r3, #6
 800a8c0:	431a      	orrs	r2, r3
 800a8c2:	687b      	ldr	r3, [r7, #4]
 800a8c4:	68db      	ldr	r3, [r3, #12]
 800a8c6:	085b      	lsrs	r3, r3, #1
 800a8c8:	3b01      	subs	r3, #1
 800a8ca:	041b      	lsls	r3, r3, #16
 800a8cc:	431a      	orrs	r2, r3
 800a8ce:	69bb      	ldr	r3, [r7, #24]
 800a8d0:	061b      	lsls	r3, r3, #24
 800a8d2:	431a      	orrs	r2, r3
 800a8d4:	697b      	ldr	r3, [r7, #20]
 800a8d6:	071b      	lsls	r3, r3, #28
 800a8d8:	4925      	ldr	r1, [pc, #148]	; (800a970 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800a8da:	4313      	orrs	r3, r2
 800a8dc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

     /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	681b      	ldr	r3, [r3, #0]
 800a8e4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a8e8:	2b00      	cmp	r3, #0
 800a8ea:	d016      	beq.n	800a91a <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	685a      	ldr	r2, [r3, #4]
 800a8f0:	687b      	ldr	r3, [r7, #4]
 800a8f2:	689b      	ldr	r3, [r3, #8]
 800a8f4:	019b      	lsls	r3, r3, #6
 800a8f6:	431a      	orrs	r2, r3
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	68db      	ldr	r3, [r3, #12]
 800a8fc:	085b      	lsrs	r3, r3, #1
 800a8fe:	3b01      	subs	r3, #1
 800a900:	041b      	lsls	r3, r3, #16
 800a902:	431a      	orrs	r2, r3
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	691b      	ldr	r3, [r3, #16]
 800a908:	061b      	lsls	r3, r3, #24
 800a90a:	431a      	orrs	r2, r3
 800a90c:	687b      	ldr	r3, [r7, #4]
 800a90e:	695b      	ldr	r3, [r3, #20]
 800a910:	071b      	lsls	r3, r3, #28
 800a912:	4917      	ldr	r1, [pc, #92]	; (800a970 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800a914:	4313      	orrs	r3, r2
 800a916:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800a91a:	4b16      	ldr	r3, [pc, #88]	; (800a974 <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 800a91c:	2201      	movs	r2, #1
 800a91e:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800a920:	f7fc fa4c 	bl	8006dbc <HAL_GetTick>
 800a924:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800a926:	e008      	b.n	800a93a <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800a928:	f7fc fa48 	bl	8006dbc <HAL_GetTick>
 800a92c:	4602      	mov	r2, r0
 800a92e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a930:	1ad3      	subs	r3, r2, r3
 800a932:	2b02      	cmp	r3, #2
 800a934:	d901      	bls.n	800a93a <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800a936:	2303      	movs	r3, #3
 800a938:	e09f      	b.n	800aa7a <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800a93a:	4b0d      	ldr	r3, [pc, #52]	; (800a970 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800a93c:	681b      	ldr	r3, [r3, #0]
 800a93e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a942:	2b00      	cmp	r3, #0
 800a944:	d0f0      	beq.n	800a928 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if(pllsaiused == 1U)
 800a946:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a948:	2b01      	cmp	r3, #1
 800a94a:	f040 8095 	bne.w	800aa78 <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800a94e:	4b0a      	ldr	r3, [pc, #40]	; (800a978 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 800a950:	2200      	movs	r2, #0
 800a952:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800a954:	f7fc fa32 	bl	8006dbc <HAL_GetTick>
 800a958:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800a95a:	e00f      	b.n	800a97c <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800a95c:	f7fc fa2e 	bl	8006dbc <HAL_GetTick>
 800a960:	4602      	mov	r2, r0
 800a962:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a964:	1ad3      	subs	r3, r2, r3
 800a966:	2b02      	cmp	r3, #2
 800a968:	d908      	bls.n	800a97c <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800a96a:	2303      	movs	r3, #3
 800a96c:	e085      	b.n	800aa7a <HAL_RCCEx_PeriphCLKConfig+0x642>
 800a96e:	bf00      	nop
 800a970:	40023800 	.word	0x40023800
 800a974:	42470068 	.word	0x42470068
 800a978:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800a97c:	4b41      	ldr	r3, [pc, #260]	; (800aa84 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800a97e:	681b      	ldr	r3, [r3, #0]
 800a980:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a984:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a988:	d0e8      	beq.n	800a95c <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 800a98a:	687b      	ldr	r3, [r7, #4]
 800a98c:	681b      	ldr	r3, [r3, #0]
 800a98e:	f003 0304 	and.w	r3, r3, #4
 800a992:	2b00      	cmp	r3, #0
 800a994:	d003      	beq.n	800a99e <HAL_RCCEx_PeriphCLKConfig+0x566>
 800a996:	687b      	ldr	r3, [r7, #4]
 800a998:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a99a:	2b00      	cmp	r3, #0
 800a99c:	d009      	beq.n	800a9b2 <HAL_RCCEx_PeriphCLKConfig+0x57a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800a99e:	687b      	ldr	r3, [r7, #4]
 800a9a0:	681b      	ldr	r3, [r3, #0]
 800a9a2:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 800a9a6:	2b00      	cmp	r3, #0
 800a9a8:	d02b      	beq.n	800aa02 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800a9aa:	687b      	ldr	r3, [r7, #4]
 800a9ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a9ae:	2b00      	cmp	r3, #0
 800a9b0:	d127      	bne.n	800aa02 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 800a9b2:	4b34      	ldr	r3, [pc, #208]	; (800aa84 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800a9b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a9b8:	0c1b      	lsrs	r3, r3, #16
 800a9ba:	f003 0303 	and.w	r3, r3, #3
 800a9be:	3301      	adds	r3, #1
 800a9c0:	005b      	lsls	r3, r3, #1
 800a9c2:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, 0U);
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	699a      	ldr	r2, [r3, #24]
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	69db      	ldr	r3, [r3, #28]
 800a9cc:	019b      	lsls	r3, r3, #6
 800a9ce:	431a      	orrs	r2, r3
 800a9d0:	693b      	ldr	r3, [r7, #16]
 800a9d2:	085b      	lsrs	r3, r3, #1
 800a9d4:	3b01      	subs	r3, #1
 800a9d6:	041b      	lsls	r3, r3, #16
 800a9d8:	431a      	orrs	r2, r3
 800a9da:	687b      	ldr	r3, [r7, #4]
 800a9dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a9de:	061b      	lsls	r3, r3, #24
 800a9e0:	4928      	ldr	r1, [pc, #160]	; (800aa84 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800a9e2:	4313      	orrs	r3, r2
 800a9e4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800a9e8:	4b26      	ldr	r3, [pc, #152]	; (800aa84 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800a9ea:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a9ee:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a9f6:	3b01      	subs	r3, #1
 800a9f8:	021b      	lsls	r3, r3, #8
 800a9fa:	4922      	ldr	r1, [pc, #136]	; (800aa84 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800a9fc:	4313      	orrs	r3, r2
 800a9fe:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 800aa02:	687b      	ldr	r3, [r7, #4]
 800aa04:	681b      	ldr	r3, [r3, #0]
 800aa06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800aa0a:	2b00      	cmp	r3, #0
 800aa0c:	d01d      	beq.n	800aa4a <HAL_RCCEx_PeriphCLKConfig+0x612>
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800aa12:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800aa16:	d118      	bne.n	800aa4a <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800aa18:	4b1a      	ldr	r3, [pc, #104]	; (800aa84 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800aa1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aa1e:	0e1b      	lsrs	r3, r3, #24
 800aa20:	f003 030f 	and.w	r3, r3, #15
 800aa24:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
 800aa26:	687b      	ldr	r3, [r7, #4]
 800aa28:	699a      	ldr	r2, [r3, #24]
 800aa2a:	687b      	ldr	r3, [r7, #4]
 800aa2c:	69db      	ldr	r3, [r3, #28]
 800aa2e:	019b      	lsls	r3, r3, #6
 800aa30:	431a      	orrs	r2, r3
 800aa32:	687b      	ldr	r3, [r7, #4]
 800aa34:	6a1b      	ldr	r3, [r3, #32]
 800aa36:	085b      	lsrs	r3, r3, #1
 800aa38:	3b01      	subs	r3, #1
 800aa3a:	041b      	lsls	r3, r3, #16
 800aa3c:	431a      	orrs	r2, r3
 800aa3e:	68fb      	ldr	r3, [r7, #12]
 800aa40:	061b      	lsls	r3, r3, #24
 800aa42:	4910      	ldr	r1, [pc, #64]	; (800aa84 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800aa44:	4313      	orrs	r3, r2
 800aa46:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800aa4a:	4b0f      	ldr	r3, [pc, #60]	; (800aa88 <HAL_RCCEx_PeriphCLKConfig+0x650>)
 800aa4c:	2201      	movs	r2, #1
 800aa4e:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800aa50:	f7fc f9b4 	bl	8006dbc <HAL_GetTick>
 800aa54:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800aa56:	e008      	b.n	800aa6a <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800aa58:	f7fc f9b0 	bl	8006dbc <HAL_GetTick>
 800aa5c:	4602      	mov	r2, r0
 800aa5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa60:	1ad3      	subs	r3, r2, r3
 800aa62:	2b02      	cmp	r3, #2
 800aa64:	d901      	bls.n	800aa6a <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800aa66:	2303      	movs	r3, #3
 800aa68:	e007      	b.n	800aa7a <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800aa6a:	4b06      	ldr	r3, [pc, #24]	; (800aa84 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800aa6c:	681b      	ldr	r3, [r3, #0]
 800aa6e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800aa72:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800aa76:	d1ef      	bne.n	800aa58 <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 800aa78:	2300      	movs	r3, #0
}
 800aa7a:	4618      	mov	r0, r3
 800aa7c:	3730      	adds	r7, #48	; 0x30
 800aa7e:	46bd      	mov	sp, r7
 800aa80:	bd80      	pop	{r7, pc}
 800aa82:	bf00      	nop
 800aa84:	40023800 	.word	0x40023800
 800aa88:	42470070 	.word	0x42470070

0800aa8c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800aa8c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800aa90:	b0ae      	sub	sp, #184	; 0xb8
 800aa92:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800aa94:	2300      	movs	r3, #0
 800aa96:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 800aa9a:	2300      	movs	r3, #0
 800aa9c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 800aaa0:	2300      	movs	r3, #0
 800aaa2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 800aaa6:	2300      	movs	r3, #0
 800aaa8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 800aaac:	2300      	movs	r3, #0
 800aaae:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800aab2:	4bcb      	ldr	r3, [pc, #812]	; (800ade0 <HAL_RCC_GetSysClockFreq+0x354>)
 800aab4:	689b      	ldr	r3, [r3, #8]
 800aab6:	f003 030c 	and.w	r3, r3, #12
 800aaba:	2b0c      	cmp	r3, #12
 800aabc:	f200 8206 	bhi.w	800aecc <HAL_RCC_GetSysClockFreq+0x440>
 800aac0:	a201      	add	r2, pc, #4	; (adr r2, 800aac8 <HAL_RCC_GetSysClockFreq+0x3c>)
 800aac2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aac6:	bf00      	nop
 800aac8:	0800aafd 	.word	0x0800aafd
 800aacc:	0800aecd 	.word	0x0800aecd
 800aad0:	0800aecd 	.word	0x0800aecd
 800aad4:	0800aecd 	.word	0x0800aecd
 800aad8:	0800ab05 	.word	0x0800ab05
 800aadc:	0800aecd 	.word	0x0800aecd
 800aae0:	0800aecd 	.word	0x0800aecd
 800aae4:	0800aecd 	.word	0x0800aecd
 800aae8:	0800ab0d 	.word	0x0800ab0d
 800aaec:	0800aecd 	.word	0x0800aecd
 800aaf0:	0800aecd 	.word	0x0800aecd
 800aaf4:	0800aecd 	.word	0x0800aecd
 800aaf8:	0800acfd 	.word	0x0800acfd
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800aafc:	4bb9      	ldr	r3, [pc, #740]	; (800ade4 <HAL_RCC_GetSysClockFreq+0x358>)
 800aafe:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 800ab02:	e1e7      	b.n	800aed4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800ab04:	4bb8      	ldr	r3, [pc, #736]	; (800ade8 <HAL_RCC_GetSysClockFreq+0x35c>)
 800ab06:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800ab0a:	e1e3      	b.n	800aed4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800ab0c:	4bb4      	ldr	r3, [pc, #720]	; (800ade0 <HAL_RCC_GetSysClockFreq+0x354>)
 800ab0e:	685b      	ldr	r3, [r3, #4]
 800ab10:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ab14:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800ab18:	4bb1      	ldr	r3, [pc, #708]	; (800ade0 <HAL_RCC_GetSysClockFreq+0x354>)
 800ab1a:	685b      	ldr	r3, [r3, #4]
 800ab1c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800ab20:	2b00      	cmp	r3, #0
 800ab22:	d071      	beq.n	800ac08 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800ab24:	4bae      	ldr	r3, [pc, #696]	; (800ade0 <HAL_RCC_GetSysClockFreq+0x354>)
 800ab26:	685b      	ldr	r3, [r3, #4]
 800ab28:	099b      	lsrs	r3, r3, #6
 800ab2a:	2200      	movs	r2, #0
 800ab2c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800ab30:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 800ab34:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800ab38:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ab3c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800ab40:	2300      	movs	r3, #0
 800ab42:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800ab46:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800ab4a:	4622      	mov	r2, r4
 800ab4c:	462b      	mov	r3, r5
 800ab4e:	f04f 0000 	mov.w	r0, #0
 800ab52:	f04f 0100 	mov.w	r1, #0
 800ab56:	0159      	lsls	r1, r3, #5
 800ab58:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800ab5c:	0150      	lsls	r0, r2, #5
 800ab5e:	4602      	mov	r2, r0
 800ab60:	460b      	mov	r3, r1
 800ab62:	4621      	mov	r1, r4
 800ab64:	1a51      	subs	r1, r2, r1
 800ab66:	6439      	str	r1, [r7, #64]	; 0x40
 800ab68:	4629      	mov	r1, r5
 800ab6a:	eb63 0301 	sbc.w	r3, r3, r1
 800ab6e:	647b      	str	r3, [r7, #68]	; 0x44
 800ab70:	f04f 0200 	mov.w	r2, #0
 800ab74:	f04f 0300 	mov.w	r3, #0
 800ab78:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 800ab7c:	4649      	mov	r1, r9
 800ab7e:	018b      	lsls	r3, r1, #6
 800ab80:	4641      	mov	r1, r8
 800ab82:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800ab86:	4641      	mov	r1, r8
 800ab88:	018a      	lsls	r2, r1, #6
 800ab8a:	4641      	mov	r1, r8
 800ab8c:	1a51      	subs	r1, r2, r1
 800ab8e:	63b9      	str	r1, [r7, #56]	; 0x38
 800ab90:	4649      	mov	r1, r9
 800ab92:	eb63 0301 	sbc.w	r3, r3, r1
 800ab96:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ab98:	f04f 0200 	mov.w	r2, #0
 800ab9c:	f04f 0300 	mov.w	r3, #0
 800aba0:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 800aba4:	4649      	mov	r1, r9
 800aba6:	00cb      	lsls	r3, r1, #3
 800aba8:	4641      	mov	r1, r8
 800abaa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800abae:	4641      	mov	r1, r8
 800abb0:	00ca      	lsls	r2, r1, #3
 800abb2:	4610      	mov	r0, r2
 800abb4:	4619      	mov	r1, r3
 800abb6:	4603      	mov	r3, r0
 800abb8:	4622      	mov	r2, r4
 800abba:	189b      	adds	r3, r3, r2
 800abbc:	633b      	str	r3, [r7, #48]	; 0x30
 800abbe:	462b      	mov	r3, r5
 800abc0:	460a      	mov	r2, r1
 800abc2:	eb42 0303 	adc.w	r3, r2, r3
 800abc6:	637b      	str	r3, [r7, #52]	; 0x34
 800abc8:	f04f 0200 	mov.w	r2, #0
 800abcc:	f04f 0300 	mov.w	r3, #0
 800abd0:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800abd4:	4629      	mov	r1, r5
 800abd6:	024b      	lsls	r3, r1, #9
 800abd8:	4621      	mov	r1, r4
 800abda:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800abde:	4621      	mov	r1, r4
 800abe0:	024a      	lsls	r2, r1, #9
 800abe2:	4610      	mov	r0, r2
 800abe4:	4619      	mov	r1, r3
 800abe6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800abea:	2200      	movs	r2, #0
 800abec:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800abf0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800abf4:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 800abf8:	f7f6 f846 	bl	8000c88 <__aeabi_uldivmod>
 800abfc:	4602      	mov	r2, r0
 800abfe:	460b      	mov	r3, r1
 800ac00:	4613      	mov	r3, r2
 800ac02:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800ac06:	e067      	b.n	800acd8 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800ac08:	4b75      	ldr	r3, [pc, #468]	; (800ade0 <HAL_RCC_GetSysClockFreq+0x354>)
 800ac0a:	685b      	ldr	r3, [r3, #4]
 800ac0c:	099b      	lsrs	r3, r3, #6
 800ac0e:	2200      	movs	r2, #0
 800ac10:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800ac14:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 800ac18:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800ac1c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ac20:	67bb      	str	r3, [r7, #120]	; 0x78
 800ac22:	2300      	movs	r3, #0
 800ac24:	67fb      	str	r3, [r7, #124]	; 0x7c
 800ac26:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 800ac2a:	4622      	mov	r2, r4
 800ac2c:	462b      	mov	r3, r5
 800ac2e:	f04f 0000 	mov.w	r0, #0
 800ac32:	f04f 0100 	mov.w	r1, #0
 800ac36:	0159      	lsls	r1, r3, #5
 800ac38:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800ac3c:	0150      	lsls	r0, r2, #5
 800ac3e:	4602      	mov	r2, r0
 800ac40:	460b      	mov	r3, r1
 800ac42:	4621      	mov	r1, r4
 800ac44:	1a51      	subs	r1, r2, r1
 800ac46:	62b9      	str	r1, [r7, #40]	; 0x28
 800ac48:	4629      	mov	r1, r5
 800ac4a:	eb63 0301 	sbc.w	r3, r3, r1
 800ac4e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ac50:	f04f 0200 	mov.w	r2, #0
 800ac54:	f04f 0300 	mov.w	r3, #0
 800ac58:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 800ac5c:	4649      	mov	r1, r9
 800ac5e:	018b      	lsls	r3, r1, #6
 800ac60:	4641      	mov	r1, r8
 800ac62:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800ac66:	4641      	mov	r1, r8
 800ac68:	018a      	lsls	r2, r1, #6
 800ac6a:	4641      	mov	r1, r8
 800ac6c:	ebb2 0a01 	subs.w	sl, r2, r1
 800ac70:	4649      	mov	r1, r9
 800ac72:	eb63 0b01 	sbc.w	fp, r3, r1
 800ac76:	f04f 0200 	mov.w	r2, #0
 800ac7a:	f04f 0300 	mov.w	r3, #0
 800ac7e:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800ac82:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800ac86:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800ac8a:	4692      	mov	sl, r2
 800ac8c:	469b      	mov	fp, r3
 800ac8e:	4623      	mov	r3, r4
 800ac90:	eb1a 0303 	adds.w	r3, sl, r3
 800ac94:	623b      	str	r3, [r7, #32]
 800ac96:	462b      	mov	r3, r5
 800ac98:	eb4b 0303 	adc.w	r3, fp, r3
 800ac9c:	627b      	str	r3, [r7, #36]	; 0x24
 800ac9e:	f04f 0200 	mov.w	r2, #0
 800aca2:	f04f 0300 	mov.w	r3, #0
 800aca6:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 800acaa:	4629      	mov	r1, r5
 800acac:	028b      	lsls	r3, r1, #10
 800acae:	4621      	mov	r1, r4
 800acb0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800acb4:	4621      	mov	r1, r4
 800acb6:	028a      	lsls	r2, r1, #10
 800acb8:	4610      	mov	r0, r2
 800acba:	4619      	mov	r1, r3
 800acbc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800acc0:	2200      	movs	r2, #0
 800acc2:	673b      	str	r3, [r7, #112]	; 0x70
 800acc4:	677a      	str	r2, [r7, #116]	; 0x74
 800acc6:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 800acca:	f7f5 ffdd 	bl	8000c88 <__aeabi_uldivmod>
 800acce:	4602      	mov	r2, r0
 800acd0:	460b      	mov	r3, r1
 800acd2:	4613      	mov	r3, r2
 800acd4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800acd8:	4b41      	ldr	r3, [pc, #260]	; (800ade0 <HAL_RCC_GetSysClockFreq+0x354>)
 800acda:	685b      	ldr	r3, [r3, #4]
 800acdc:	0c1b      	lsrs	r3, r3, #16
 800acde:	f003 0303 	and.w	r3, r3, #3
 800ace2:	3301      	adds	r3, #1
 800ace4:	005b      	lsls	r3, r3, #1
 800ace6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 800acea:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800acee:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800acf2:	fbb2 f3f3 	udiv	r3, r2, r3
 800acf6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800acfa:	e0eb      	b.n	800aed4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800acfc:	4b38      	ldr	r3, [pc, #224]	; (800ade0 <HAL_RCC_GetSysClockFreq+0x354>)
 800acfe:	685b      	ldr	r3, [r3, #4]
 800ad00:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ad04:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800ad08:	4b35      	ldr	r3, [pc, #212]	; (800ade0 <HAL_RCC_GetSysClockFreq+0x354>)
 800ad0a:	685b      	ldr	r3, [r3, #4]
 800ad0c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800ad10:	2b00      	cmp	r3, #0
 800ad12:	d06b      	beq.n	800adec <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800ad14:	4b32      	ldr	r3, [pc, #200]	; (800ade0 <HAL_RCC_GetSysClockFreq+0x354>)
 800ad16:	685b      	ldr	r3, [r3, #4]
 800ad18:	099b      	lsrs	r3, r3, #6
 800ad1a:	2200      	movs	r2, #0
 800ad1c:	66bb      	str	r3, [r7, #104]	; 0x68
 800ad1e:	66fa      	str	r2, [r7, #108]	; 0x6c
 800ad20:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800ad22:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ad26:	663b      	str	r3, [r7, #96]	; 0x60
 800ad28:	2300      	movs	r3, #0
 800ad2a:	667b      	str	r3, [r7, #100]	; 0x64
 800ad2c:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 800ad30:	4622      	mov	r2, r4
 800ad32:	462b      	mov	r3, r5
 800ad34:	f04f 0000 	mov.w	r0, #0
 800ad38:	f04f 0100 	mov.w	r1, #0
 800ad3c:	0159      	lsls	r1, r3, #5
 800ad3e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800ad42:	0150      	lsls	r0, r2, #5
 800ad44:	4602      	mov	r2, r0
 800ad46:	460b      	mov	r3, r1
 800ad48:	4621      	mov	r1, r4
 800ad4a:	1a51      	subs	r1, r2, r1
 800ad4c:	61b9      	str	r1, [r7, #24]
 800ad4e:	4629      	mov	r1, r5
 800ad50:	eb63 0301 	sbc.w	r3, r3, r1
 800ad54:	61fb      	str	r3, [r7, #28]
 800ad56:	f04f 0200 	mov.w	r2, #0
 800ad5a:	f04f 0300 	mov.w	r3, #0
 800ad5e:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 800ad62:	4659      	mov	r1, fp
 800ad64:	018b      	lsls	r3, r1, #6
 800ad66:	4651      	mov	r1, sl
 800ad68:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800ad6c:	4651      	mov	r1, sl
 800ad6e:	018a      	lsls	r2, r1, #6
 800ad70:	4651      	mov	r1, sl
 800ad72:	ebb2 0801 	subs.w	r8, r2, r1
 800ad76:	4659      	mov	r1, fp
 800ad78:	eb63 0901 	sbc.w	r9, r3, r1
 800ad7c:	f04f 0200 	mov.w	r2, #0
 800ad80:	f04f 0300 	mov.w	r3, #0
 800ad84:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800ad88:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800ad8c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800ad90:	4690      	mov	r8, r2
 800ad92:	4699      	mov	r9, r3
 800ad94:	4623      	mov	r3, r4
 800ad96:	eb18 0303 	adds.w	r3, r8, r3
 800ad9a:	613b      	str	r3, [r7, #16]
 800ad9c:	462b      	mov	r3, r5
 800ad9e:	eb49 0303 	adc.w	r3, r9, r3
 800ada2:	617b      	str	r3, [r7, #20]
 800ada4:	f04f 0200 	mov.w	r2, #0
 800ada8:	f04f 0300 	mov.w	r3, #0
 800adac:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 800adb0:	4629      	mov	r1, r5
 800adb2:	024b      	lsls	r3, r1, #9
 800adb4:	4621      	mov	r1, r4
 800adb6:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800adba:	4621      	mov	r1, r4
 800adbc:	024a      	lsls	r2, r1, #9
 800adbe:	4610      	mov	r0, r2
 800adc0:	4619      	mov	r1, r3
 800adc2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800adc6:	2200      	movs	r2, #0
 800adc8:	65bb      	str	r3, [r7, #88]	; 0x58
 800adca:	65fa      	str	r2, [r7, #92]	; 0x5c
 800adcc:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800add0:	f7f5 ff5a 	bl	8000c88 <__aeabi_uldivmod>
 800add4:	4602      	mov	r2, r0
 800add6:	460b      	mov	r3, r1
 800add8:	4613      	mov	r3, r2
 800adda:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800adde:	e065      	b.n	800aeac <HAL_RCC_GetSysClockFreq+0x420>
 800ade0:	40023800 	.word	0x40023800
 800ade4:	00f42400 	.word	0x00f42400
 800ade8:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800adec:	4b3d      	ldr	r3, [pc, #244]	; (800aee4 <HAL_RCC_GetSysClockFreq+0x458>)
 800adee:	685b      	ldr	r3, [r3, #4]
 800adf0:	099b      	lsrs	r3, r3, #6
 800adf2:	2200      	movs	r2, #0
 800adf4:	4618      	mov	r0, r3
 800adf6:	4611      	mov	r1, r2
 800adf8:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800adfc:	653b      	str	r3, [r7, #80]	; 0x50
 800adfe:	2300      	movs	r3, #0
 800ae00:	657b      	str	r3, [r7, #84]	; 0x54
 800ae02:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 800ae06:	4642      	mov	r2, r8
 800ae08:	464b      	mov	r3, r9
 800ae0a:	f04f 0000 	mov.w	r0, #0
 800ae0e:	f04f 0100 	mov.w	r1, #0
 800ae12:	0159      	lsls	r1, r3, #5
 800ae14:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800ae18:	0150      	lsls	r0, r2, #5
 800ae1a:	4602      	mov	r2, r0
 800ae1c:	460b      	mov	r3, r1
 800ae1e:	4641      	mov	r1, r8
 800ae20:	1a51      	subs	r1, r2, r1
 800ae22:	60b9      	str	r1, [r7, #8]
 800ae24:	4649      	mov	r1, r9
 800ae26:	eb63 0301 	sbc.w	r3, r3, r1
 800ae2a:	60fb      	str	r3, [r7, #12]
 800ae2c:	f04f 0200 	mov.w	r2, #0
 800ae30:	f04f 0300 	mov.w	r3, #0
 800ae34:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 800ae38:	4659      	mov	r1, fp
 800ae3a:	018b      	lsls	r3, r1, #6
 800ae3c:	4651      	mov	r1, sl
 800ae3e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800ae42:	4651      	mov	r1, sl
 800ae44:	018a      	lsls	r2, r1, #6
 800ae46:	4651      	mov	r1, sl
 800ae48:	1a54      	subs	r4, r2, r1
 800ae4a:	4659      	mov	r1, fp
 800ae4c:	eb63 0501 	sbc.w	r5, r3, r1
 800ae50:	f04f 0200 	mov.w	r2, #0
 800ae54:	f04f 0300 	mov.w	r3, #0
 800ae58:	00eb      	lsls	r3, r5, #3
 800ae5a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800ae5e:	00e2      	lsls	r2, r4, #3
 800ae60:	4614      	mov	r4, r2
 800ae62:	461d      	mov	r5, r3
 800ae64:	4643      	mov	r3, r8
 800ae66:	18e3      	adds	r3, r4, r3
 800ae68:	603b      	str	r3, [r7, #0]
 800ae6a:	464b      	mov	r3, r9
 800ae6c:	eb45 0303 	adc.w	r3, r5, r3
 800ae70:	607b      	str	r3, [r7, #4]
 800ae72:	f04f 0200 	mov.w	r2, #0
 800ae76:	f04f 0300 	mov.w	r3, #0
 800ae7a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800ae7e:	4629      	mov	r1, r5
 800ae80:	028b      	lsls	r3, r1, #10
 800ae82:	4621      	mov	r1, r4
 800ae84:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800ae88:	4621      	mov	r1, r4
 800ae8a:	028a      	lsls	r2, r1, #10
 800ae8c:	4610      	mov	r0, r2
 800ae8e:	4619      	mov	r1, r3
 800ae90:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800ae94:	2200      	movs	r2, #0
 800ae96:	64bb      	str	r3, [r7, #72]	; 0x48
 800ae98:	64fa      	str	r2, [r7, #76]	; 0x4c
 800ae9a:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800ae9e:	f7f5 fef3 	bl	8000c88 <__aeabi_uldivmod>
 800aea2:	4602      	mov	r2, r0
 800aea4:	460b      	mov	r3, r1
 800aea6:	4613      	mov	r3, r2
 800aea8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 800aeac:	4b0d      	ldr	r3, [pc, #52]	; (800aee4 <HAL_RCC_GetSysClockFreq+0x458>)
 800aeae:	685b      	ldr	r3, [r3, #4]
 800aeb0:	0f1b      	lsrs	r3, r3, #28
 800aeb2:	f003 0307 	and.w	r3, r3, #7
 800aeb6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 800aeba:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800aebe:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800aec2:	fbb2 f3f3 	udiv	r3, r2, r3
 800aec6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800aeca:	e003      	b.n	800aed4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800aecc:	4b06      	ldr	r3, [pc, #24]	; (800aee8 <HAL_RCC_GetSysClockFreq+0x45c>)
 800aece:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800aed2:	bf00      	nop
    }
  }
  return sysclockfreq;
 800aed4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 800aed8:	4618      	mov	r0, r3
 800aeda:	37b8      	adds	r7, #184	; 0xb8
 800aedc:	46bd      	mov	sp, r7
 800aede:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800aee2:	bf00      	nop
 800aee4:	40023800 	.word	0x40023800
 800aee8:	00f42400 	.word	0x00f42400

0800aeec <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800aeec:	b580      	push	{r7, lr}
 800aeee:	b086      	sub	sp, #24
 800aef0:	af00      	add	r7, sp, #0
 800aef2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800aef4:	687b      	ldr	r3, [r7, #4]
 800aef6:	2b00      	cmp	r3, #0
 800aef8:	d101      	bne.n	800aefe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800aefa:	2301      	movs	r3, #1
 800aefc:	e28d      	b.n	800b41a <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800aefe:	687b      	ldr	r3, [r7, #4]
 800af00:	681b      	ldr	r3, [r3, #0]
 800af02:	f003 0301 	and.w	r3, r3, #1
 800af06:	2b00      	cmp	r3, #0
 800af08:	f000 8083 	beq.w	800b012 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800af0c:	4b94      	ldr	r3, [pc, #592]	; (800b160 <HAL_RCC_OscConfig+0x274>)
 800af0e:	689b      	ldr	r3, [r3, #8]
 800af10:	f003 030c 	and.w	r3, r3, #12
 800af14:	2b04      	cmp	r3, #4
 800af16:	d019      	beq.n	800af4c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800af18:	4b91      	ldr	r3, [pc, #580]	; (800b160 <HAL_RCC_OscConfig+0x274>)
 800af1a:	689b      	ldr	r3, [r3, #8]
 800af1c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800af20:	2b08      	cmp	r3, #8
 800af22:	d106      	bne.n	800af32 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800af24:	4b8e      	ldr	r3, [pc, #568]	; (800b160 <HAL_RCC_OscConfig+0x274>)
 800af26:	685b      	ldr	r3, [r3, #4]
 800af28:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800af2c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800af30:	d00c      	beq.n	800af4c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800af32:	4b8b      	ldr	r3, [pc, #556]	; (800b160 <HAL_RCC_OscConfig+0x274>)
 800af34:	689b      	ldr	r3, [r3, #8]
 800af36:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800af3a:	2b0c      	cmp	r3, #12
 800af3c:	d112      	bne.n	800af64 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800af3e:	4b88      	ldr	r3, [pc, #544]	; (800b160 <HAL_RCC_OscConfig+0x274>)
 800af40:	685b      	ldr	r3, [r3, #4]
 800af42:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800af46:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800af4a:	d10b      	bne.n	800af64 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800af4c:	4b84      	ldr	r3, [pc, #528]	; (800b160 <HAL_RCC_OscConfig+0x274>)
 800af4e:	681b      	ldr	r3, [r3, #0]
 800af50:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800af54:	2b00      	cmp	r3, #0
 800af56:	d05b      	beq.n	800b010 <HAL_RCC_OscConfig+0x124>
 800af58:	687b      	ldr	r3, [r7, #4]
 800af5a:	685b      	ldr	r3, [r3, #4]
 800af5c:	2b00      	cmp	r3, #0
 800af5e:	d157      	bne.n	800b010 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 800af60:	2301      	movs	r3, #1
 800af62:	e25a      	b.n	800b41a <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800af64:	687b      	ldr	r3, [r7, #4]
 800af66:	685b      	ldr	r3, [r3, #4]
 800af68:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800af6c:	d106      	bne.n	800af7c <HAL_RCC_OscConfig+0x90>
 800af6e:	4b7c      	ldr	r3, [pc, #496]	; (800b160 <HAL_RCC_OscConfig+0x274>)
 800af70:	681b      	ldr	r3, [r3, #0]
 800af72:	4a7b      	ldr	r2, [pc, #492]	; (800b160 <HAL_RCC_OscConfig+0x274>)
 800af74:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800af78:	6013      	str	r3, [r2, #0]
 800af7a:	e01d      	b.n	800afb8 <HAL_RCC_OscConfig+0xcc>
 800af7c:	687b      	ldr	r3, [r7, #4]
 800af7e:	685b      	ldr	r3, [r3, #4]
 800af80:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800af84:	d10c      	bne.n	800afa0 <HAL_RCC_OscConfig+0xb4>
 800af86:	4b76      	ldr	r3, [pc, #472]	; (800b160 <HAL_RCC_OscConfig+0x274>)
 800af88:	681b      	ldr	r3, [r3, #0]
 800af8a:	4a75      	ldr	r2, [pc, #468]	; (800b160 <HAL_RCC_OscConfig+0x274>)
 800af8c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800af90:	6013      	str	r3, [r2, #0]
 800af92:	4b73      	ldr	r3, [pc, #460]	; (800b160 <HAL_RCC_OscConfig+0x274>)
 800af94:	681b      	ldr	r3, [r3, #0]
 800af96:	4a72      	ldr	r2, [pc, #456]	; (800b160 <HAL_RCC_OscConfig+0x274>)
 800af98:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800af9c:	6013      	str	r3, [r2, #0]
 800af9e:	e00b      	b.n	800afb8 <HAL_RCC_OscConfig+0xcc>
 800afa0:	4b6f      	ldr	r3, [pc, #444]	; (800b160 <HAL_RCC_OscConfig+0x274>)
 800afa2:	681b      	ldr	r3, [r3, #0]
 800afa4:	4a6e      	ldr	r2, [pc, #440]	; (800b160 <HAL_RCC_OscConfig+0x274>)
 800afa6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800afaa:	6013      	str	r3, [r2, #0]
 800afac:	4b6c      	ldr	r3, [pc, #432]	; (800b160 <HAL_RCC_OscConfig+0x274>)
 800afae:	681b      	ldr	r3, [r3, #0]
 800afb0:	4a6b      	ldr	r2, [pc, #428]	; (800b160 <HAL_RCC_OscConfig+0x274>)
 800afb2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800afb6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800afb8:	687b      	ldr	r3, [r7, #4]
 800afba:	685b      	ldr	r3, [r3, #4]
 800afbc:	2b00      	cmp	r3, #0
 800afbe:	d013      	beq.n	800afe8 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800afc0:	f7fb fefc 	bl	8006dbc <HAL_GetTick>
 800afc4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800afc6:	e008      	b.n	800afda <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800afc8:	f7fb fef8 	bl	8006dbc <HAL_GetTick>
 800afcc:	4602      	mov	r2, r0
 800afce:	693b      	ldr	r3, [r7, #16]
 800afd0:	1ad3      	subs	r3, r2, r3
 800afd2:	2b64      	cmp	r3, #100	; 0x64
 800afd4:	d901      	bls.n	800afda <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800afd6:	2303      	movs	r3, #3
 800afd8:	e21f      	b.n	800b41a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800afda:	4b61      	ldr	r3, [pc, #388]	; (800b160 <HAL_RCC_OscConfig+0x274>)
 800afdc:	681b      	ldr	r3, [r3, #0]
 800afde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800afe2:	2b00      	cmp	r3, #0
 800afe4:	d0f0      	beq.n	800afc8 <HAL_RCC_OscConfig+0xdc>
 800afe6:	e014      	b.n	800b012 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800afe8:	f7fb fee8 	bl	8006dbc <HAL_GetTick>
 800afec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800afee:	e008      	b.n	800b002 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800aff0:	f7fb fee4 	bl	8006dbc <HAL_GetTick>
 800aff4:	4602      	mov	r2, r0
 800aff6:	693b      	ldr	r3, [r7, #16]
 800aff8:	1ad3      	subs	r3, r2, r3
 800affa:	2b64      	cmp	r3, #100	; 0x64
 800affc:	d901      	bls.n	800b002 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800affe:	2303      	movs	r3, #3
 800b000:	e20b      	b.n	800b41a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800b002:	4b57      	ldr	r3, [pc, #348]	; (800b160 <HAL_RCC_OscConfig+0x274>)
 800b004:	681b      	ldr	r3, [r3, #0]
 800b006:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b00a:	2b00      	cmp	r3, #0
 800b00c:	d1f0      	bne.n	800aff0 <HAL_RCC_OscConfig+0x104>
 800b00e:	e000      	b.n	800b012 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800b010:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800b012:	687b      	ldr	r3, [r7, #4]
 800b014:	681b      	ldr	r3, [r3, #0]
 800b016:	f003 0302 	and.w	r3, r3, #2
 800b01a:	2b00      	cmp	r3, #0
 800b01c:	d06f      	beq.n	800b0fe <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800b01e:	4b50      	ldr	r3, [pc, #320]	; (800b160 <HAL_RCC_OscConfig+0x274>)
 800b020:	689b      	ldr	r3, [r3, #8]
 800b022:	f003 030c 	and.w	r3, r3, #12
 800b026:	2b00      	cmp	r3, #0
 800b028:	d017      	beq.n	800b05a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800b02a:	4b4d      	ldr	r3, [pc, #308]	; (800b160 <HAL_RCC_OscConfig+0x274>)
 800b02c:	689b      	ldr	r3, [r3, #8]
 800b02e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800b032:	2b08      	cmp	r3, #8
 800b034:	d105      	bne.n	800b042 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800b036:	4b4a      	ldr	r3, [pc, #296]	; (800b160 <HAL_RCC_OscConfig+0x274>)
 800b038:	685b      	ldr	r3, [r3, #4]
 800b03a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b03e:	2b00      	cmp	r3, #0
 800b040:	d00b      	beq.n	800b05a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800b042:	4b47      	ldr	r3, [pc, #284]	; (800b160 <HAL_RCC_OscConfig+0x274>)
 800b044:	689b      	ldr	r3, [r3, #8]
 800b046:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800b04a:	2b0c      	cmp	r3, #12
 800b04c:	d11c      	bne.n	800b088 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800b04e:	4b44      	ldr	r3, [pc, #272]	; (800b160 <HAL_RCC_OscConfig+0x274>)
 800b050:	685b      	ldr	r3, [r3, #4]
 800b052:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b056:	2b00      	cmp	r3, #0
 800b058:	d116      	bne.n	800b088 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800b05a:	4b41      	ldr	r3, [pc, #260]	; (800b160 <HAL_RCC_OscConfig+0x274>)
 800b05c:	681b      	ldr	r3, [r3, #0]
 800b05e:	f003 0302 	and.w	r3, r3, #2
 800b062:	2b00      	cmp	r3, #0
 800b064:	d005      	beq.n	800b072 <HAL_RCC_OscConfig+0x186>
 800b066:	687b      	ldr	r3, [r7, #4]
 800b068:	68db      	ldr	r3, [r3, #12]
 800b06a:	2b01      	cmp	r3, #1
 800b06c:	d001      	beq.n	800b072 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800b06e:	2301      	movs	r3, #1
 800b070:	e1d3      	b.n	800b41a <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b072:	4b3b      	ldr	r3, [pc, #236]	; (800b160 <HAL_RCC_OscConfig+0x274>)
 800b074:	681b      	ldr	r3, [r3, #0]
 800b076:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800b07a:	687b      	ldr	r3, [r7, #4]
 800b07c:	691b      	ldr	r3, [r3, #16]
 800b07e:	00db      	lsls	r3, r3, #3
 800b080:	4937      	ldr	r1, [pc, #220]	; (800b160 <HAL_RCC_OscConfig+0x274>)
 800b082:	4313      	orrs	r3, r2
 800b084:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800b086:	e03a      	b.n	800b0fe <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800b088:	687b      	ldr	r3, [r7, #4]
 800b08a:	68db      	ldr	r3, [r3, #12]
 800b08c:	2b00      	cmp	r3, #0
 800b08e:	d020      	beq.n	800b0d2 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800b090:	4b34      	ldr	r3, [pc, #208]	; (800b164 <HAL_RCC_OscConfig+0x278>)
 800b092:	2201      	movs	r2, #1
 800b094:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b096:	f7fb fe91 	bl	8006dbc <HAL_GetTick>
 800b09a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800b09c:	e008      	b.n	800b0b0 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800b09e:	f7fb fe8d 	bl	8006dbc <HAL_GetTick>
 800b0a2:	4602      	mov	r2, r0
 800b0a4:	693b      	ldr	r3, [r7, #16]
 800b0a6:	1ad3      	subs	r3, r2, r3
 800b0a8:	2b02      	cmp	r3, #2
 800b0aa:	d901      	bls.n	800b0b0 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 800b0ac:	2303      	movs	r3, #3
 800b0ae:	e1b4      	b.n	800b41a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800b0b0:	4b2b      	ldr	r3, [pc, #172]	; (800b160 <HAL_RCC_OscConfig+0x274>)
 800b0b2:	681b      	ldr	r3, [r3, #0]
 800b0b4:	f003 0302 	and.w	r3, r3, #2
 800b0b8:	2b00      	cmp	r3, #0
 800b0ba:	d0f0      	beq.n	800b09e <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b0bc:	4b28      	ldr	r3, [pc, #160]	; (800b160 <HAL_RCC_OscConfig+0x274>)
 800b0be:	681b      	ldr	r3, [r3, #0]
 800b0c0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800b0c4:	687b      	ldr	r3, [r7, #4]
 800b0c6:	691b      	ldr	r3, [r3, #16]
 800b0c8:	00db      	lsls	r3, r3, #3
 800b0ca:	4925      	ldr	r1, [pc, #148]	; (800b160 <HAL_RCC_OscConfig+0x274>)
 800b0cc:	4313      	orrs	r3, r2
 800b0ce:	600b      	str	r3, [r1, #0]
 800b0d0:	e015      	b.n	800b0fe <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800b0d2:	4b24      	ldr	r3, [pc, #144]	; (800b164 <HAL_RCC_OscConfig+0x278>)
 800b0d4:	2200      	movs	r2, #0
 800b0d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b0d8:	f7fb fe70 	bl	8006dbc <HAL_GetTick>
 800b0dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800b0de:	e008      	b.n	800b0f2 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800b0e0:	f7fb fe6c 	bl	8006dbc <HAL_GetTick>
 800b0e4:	4602      	mov	r2, r0
 800b0e6:	693b      	ldr	r3, [r7, #16]
 800b0e8:	1ad3      	subs	r3, r2, r3
 800b0ea:	2b02      	cmp	r3, #2
 800b0ec:	d901      	bls.n	800b0f2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800b0ee:	2303      	movs	r3, #3
 800b0f0:	e193      	b.n	800b41a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800b0f2:	4b1b      	ldr	r3, [pc, #108]	; (800b160 <HAL_RCC_OscConfig+0x274>)
 800b0f4:	681b      	ldr	r3, [r3, #0]
 800b0f6:	f003 0302 	and.w	r3, r3, #2
 800b0fa:	2b00      	cmp	r3, #0
 800b0fc:	d1f0      	bne.n	800b0e0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800b0fe:	687b      	ldr	r3, [r7, #4]
 800b100:	681b      	ldr	r3, [r3, #0]
 800b102:	f003 0308 	and.w	r3, r3, #8
 800b106:	2b00      	cmp	r3, #0
 800b108:	d036      	beq.n	800b178 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800b10a:	687b      	ldr	r3, [r7, #4]
 800b10c:	695b      	ldr	r3, [r3, #20]
 800b10e:	2b00      	cmp	r3, #0
 800b110:	d016      	beq.n	800b140 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800b112:	4b15      	ldr	r3, [pc, #84]	; (800b168 <HAL_RCC_OscConfig+0x27c>)
 800b114:	2201      	movs	r2, #1
 800b116:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b118:	f7fb fe50 	bl	8006dbc <HAL_GetTick>
 800b11c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800b11e:	e008      	b.n	800b132 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800b120:	f7fb fe4c 	bl	8006dbc <HAL_GetTick>
 800b124:	4602      	mov	r2, r0
 800b126:	693b      	ldr	r3, [r7, #16]
 800b128:	1ad3      	subs	r3, r2, r3
 800b12a:	2b02      	cmp	r3, #2
 800b12c:	d901      	bls.n	800b132 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800b12e:	2303      	movs	r3, #3
 800b130:	e173      	b.n	800b41a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800b132:	4b0b      	ldr	r3, [pc, #44]	; (800b160 <HAL_RCC_OscConfig+0x274>)
 800b134:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b136:	f003 0302 	and.w	r3, r3, #2
 800b13a:	2b00      	cmp	r3, #0
 800b13c:	d0f0      	beq.n	800b120 <HAL_RCC_OscConfig+0x234>
 800b13e:	e01b      	b.n	800b178 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800b140:	4b09      	ldr	r3, [pc, #36]	; (800b168 <HAL_RCC_OscConfig+0x27c>)
 800b142:	2200      	movs	r2, #0
 800b144:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b146:	f7fb fe39 	bl	8006dbc <HAL_GetTick>
 800b14a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800b14c:	e00e      	b.n	800b16c <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800b14e:	f7fb fe35 	bl	8006dbc <HAL_GetTick>
 800b152:	4602      	mov	r2, r0
 800b154:	693b      	ldr	r3, [r7, #16]
 800b156:	1ad3      	subs	r3, r2, r3
 800b158:	2b02      	cmp	r3, #2
 800b15a:	d907      	bls.n	800b16c <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 800b15c:	2303      	movs	r3, #3
 800b15e:	e15c      	b.n	800b41a <HAL_RCC_OscConfig+0x52e>
 800b160:	40023800 	.word	0x40023800
 800b164:	42470000 	.word	0x42470000
 800b168:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800b16c:	4b8a      	ldr	r3, [pc, #552]	; (800b398 <HAL_RCC_OscConfig+0x4ac>)
 800b16e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b170:	f003 0302 	and.w	r3, r3, #2
 800b174:	2b00      	cmp	r3, #0
 800b176:	d1ea      	bne.n	800b14e <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800b178:	687b      	ldr	r3, [r7, #4]
 800b17a:	681b      	ldr	r3, [r3, #0]
 800b17c:	f003 0304 	and.w	r3, r3, #4
 800b180:	2b00      	cmp	r3, #0
 800b182:	f000 8097 	beq.w	800b2b4 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800b186:	2300      	movs	r3, #0
 800b188:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800b18a:	4b83      	ldr	r3, [pc, #524]	; (800b398 <HAL_RCC_OscConfig+0x4ac>)
 800b18c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b18e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b192:	2b00      	cmp	r3, #0
 800b194:	d10f      	bne.n	800b1b6 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800b196:	2300      	movs	r3, #0
 800b198:	60bb      	str	r3, [r7, #8]
 800b19a:	4b7f      	ldr	r3, [pc, #508]	; (800b398 <HAL_RCC_OscConfig+0x4ac>)
 800b19c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b19e:	4a7e      	ldr	r2, [pc, #504]	; (800b398 <HAL_RCC_OscConfig+0x4ac>)
 800b1a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b1a4:	6413      	str	r3, [r2, #64]	; 0x40
 800b1a6:	4b7c      	ldr	r3, [pc, #496]	; (800b398 <HAL_RCC_OscConfig+0x4ac>)
 800b1a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b1aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b1ae:	60bb      	str	r3, [r7, #8]
 800b1b0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800b1b2:	2301      	movs	r3, #1
 800b1b4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800b1b6:	4b79      	ldr	r3, [pc, #484]	; (800b39c <HAL_RCC_OscConfig+0x4b0>)
 800b1b8:	681b      	ldr	r3, [r3, #0]
 800b1ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b1be:	2b00      	cmp	r3, #0
 800b1c0:	d118      	bne.n	800b1f4 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800b1c2:	4b76      	ldr	r3, [pc, #472]	; (800b39c <HAL_RCC_OscConfig+0x4b0>)
 800b1c4:	681b      	ldr	r3, [r3, #0]
 800b1c6:	4a75      	ldr	r2, [pc, #468]	; (800b39c <HAL_RCC_OscConfig+0x4b0>)
 800b1c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b1cc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800b1ce:	f7fb fdf5 	bl	8006dbc <HAL_GetTick>
 800b1d2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800b1d4:	e008      	b.n	800b1e8 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800b1d6:	f7fb fdf1 	bl	8006dbc <HAL_GetTick>
 800b1da:	4602      	mov	r2, r0
 800b1dc:	693b      	ldr	r3, [r7, #16]
 800b1de:	1ad3      	subs	r3, r2, r3
 800b1e0:	2b02      	cmp	r3, #2
 800b1e2:	d901      	bls.n	800b1e8 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 800b1e4:	2303      	movs	r3, #3
 800b1e6:	e118      	b.n	800b41a <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800b1e8:	4b6c      	ldr	r3, [pc, #432]	; (800b39c <HAL_RCC_OscConfig+0x4b0>)
 800b1ea:	681b      	ldr	r3, [r3, #0]
 800b1ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b1f0:	2b00      	cmp	r3, #0
 800b1f2:	d0f0      	beq.n	800b1d6 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800b1f4:	687b      	ldr	r3, [r7, #4]
 800b1f6:	689b      	ldr	r3, [r3, #8]
 800b1f8:	2b01      	cmp	r3, #1
 800b1fa:	d106      	bne.n	800b20a <HAL_RCC_OscConfig+0x31e>
 800b1fc:	4b66      	ldr	r3, [pc, #408]	; (800b398 <HAL_RCC_OscConfig+0x4ac>)
 800b1fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b200:	4a65      	ldr	r2, [pc, #404]	; (800b398 <HAL_RCC_OscConfig+0x4ac>)
 800b202:	f043 0301 	orr.w	r3, r3, #1
 800b206:	6713      	str	r3, [r2, #112]	; 0x70
 800b208:	e01c      	b.n	800b244 <HAL_RCC_OscConfig+0x358>
 800b20a:	687b      	ldr	r3, [r7, #4]
 800b20c:	689b      	ldr	r3, [r3, #8]
 800b20e:	2b05      	cmp	r3, #5
 800b210:	d10c      	bne.n	800b22c <HAL_RCC_OscConfig+0x340>
 800b212:	4b61      	ldr	r3, [pc, #388]	; (800b398 <HAL_RCC_OscConfig+0x4ac>)
 800b214:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b216:	4a60      	ldr	r2, [pc, #384]	; (800b398 <HAL_RCC_OscConfig+0x4ac>)
 800b218:	f043 0304 	orr.w	r3, r3, #4
 800b21c:	6713      	str	r3, [r2, #112]	; 0x70
 800b21e:	4b5e      	ldr	r3, [pc, #376]	; (800b398 <HAL_RCC_OscConfig+0x4ac>)
 800b220:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b222:	4a5d      	ldr	r2, [pc, #372]	; (800b398 <HAL_RCC_OscConfig+0x4ac>)
 800b224:	f043 0301 	orr.w	r3, r3, #1
 800b228:	6713      	str	r3, [r2, #112]	; 0x70
 800b22a:	e00b      	b.n	800b244 <HAL_RCC_OscConfig+0x358>
 800b22c:	4b5a      	ldr	r3, [pc, #360]	; (800b398 <HAL_RCC_OscConfig+0x4ac>)
 800b22e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b230:	4a59      	ldr	r2, [pc, #356]	; (800b398 <HAL_RCC_OscConfig+0x4ac>)
 800b232:	f023 0301 	bic.w	r3, r3, #1
 800b236:	6713      	str	r3, [r2, #112]	; 0x70
 800b238:	4b57      	ldr	r3, [pc, #348]	; (800b398 <HAL_RCC_OscConfig+0x4ac>)
 800b23a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b23c:	4a56      	ldr	r2, [pc, #344]	; (800b398 <HAL_RCC_OscConfig+0x4ac>)
 800b23e:	f023 0304 	bic.w	r3, r3, #4
 800b242:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800b244:	687b      	ldr	r3, [r7, #4]
 800b246:	689b      	ldr	r3, [r3, #8]
 800b248:	2b00      	cmp	r3, #0
 800b24a:	d015      	beq.n	800b278 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b24c:	f7fb fdb6 	bl	8006dbc <HAL_GetTick>
 800b250:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800b252:	e00a      	b.n	800b26a <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800b254:	f7fb fdb2 	bl	8006dbc <HAL_GetTick>
 800b258:	4602      	mov	r2, r0
 800b25a:	693b      	ldr	r3, [r7, #16]
 800b25c:	1ad3      	subs	r3, r2, r3
 800b25e:	f241 3288 	movw	r2, #5000	; 0x1388
 800b262:	4293      	cmp	r3, r2
 800b264:	d901      	bls.n	800b26a <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800b266:	2303      	movs	r3, #3
 800b268:	e0d7      	b.n	800b41a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800b26a:	4b4b      	ldr	r3, [pc, #300]	; (800b398 <HAL_RCC_OscConfig+0x4ac>)
 800b26c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b26e:	f003 0302 	and.w	r3, r3, #2
 800b272:	2b00      	cmp	r3, #0
 800b274:	d0ee      	beq.n	800b254 <HAL_RCC_OscConfig+0x368>
 800b276:	e014      	b.n	800b2a2 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b278:	f7fb fda0 	bl	8006dbc <HAL_GetTick>
 800b27c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800b27e:	e00a      	b.n	800b296 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800b280:	f7fb fd9c 	bl	8006dbc <HAL_GetTick>
 800b284:	4602      	mov	r2, r0
 800b286:	693b      	ldr	r3, [r7, #16]
 800b288:	1ad3      	subs	r3, r2, r3
 800b28a:	f241 3288 	movw	r2, #5000	; 0x1388
 800b28e:	4293      	cmp	r3, r2
 800b290:	d901      	bls.n	800b296 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800b292:	2303      	movs	r3, #3
 800b294:	e0c1      	b.n	800b41a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800b296:	4b40      	ldr	r3, [pc, #256]	; (800b398 <HAL_RCC_OscConfig+0x4ac>)
 800b298:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b29a:	f003 0302 	and.w	r3, r3, #2
 800b29e:	2b00      	cmp	r3, #0
 800b2a0:	d1ee      	bne.n	800b280 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800b2a2:	7dfb      	ldrb	r3, [r7, #23]
 800b2a4:	2b01      	cmp	r3, #1
 800b2a6:	d105      	bne.n	800b2b4 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800b2a8:	4b3b      	ldr	r3, [pc, #236]	; (800b398 <HAL_RCC_OscConfig+0x4ac>)
 800b2aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b2ac:	4a3a      	ldr	r2, [pc, #232]	; (800b398 <HAL_RCC_OscConfig+0x4ac>)
 800b2ae:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b2b2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800b2b4:	687b      	ldr	r3, [r7, #4]
 800b2b6:	699b      	ldr	r3, [r3, #24]
 800b2b8:	2b00      	cmp	r3, #0
 800b2ba:	f000 80ad 	beq.w	800b418 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800b2be:	4b36      	ldr	r3, [pc, #216]	; (800b398 <HAL_RCC_OscConfig+0x4ac>)
 800b2c0:	689b      	ldr	r3, [r3, #8]
 800b2c2:	f003 030c 	and.w	r3, r3, #12
 800b2c6:	2b08      	cmp	r3, #8
 800b2c8:	d060      	beq.n	800b38c <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800b2ca:	687b      	ldr	r3, [r7, #4]
 800b2cc:	699b      	ldr	r3, [r3, #24]
 800b2ce:	2b02      	cmp	r3, #2
 800b2d0:	d145      	bne.n	800b35e <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800b2d2:	4b33      	ldr	r3, [pc, #204]	; (800b3a0 <HAL_RCC_OscConfig+0x4b4>)
 800b2d4:	2200      	movs	r2, #0
 800b2d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b2d8:	f7fb fd70 	bl	8006dbc <HAL_GetTick>
 800b2dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800b2de:	e008      	b.n	800b2f2 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800b2e0:	f7fb fd6c 	bl	8006dbc <HAL_GetTick>
 800b2e4:	4602      	mov	r2, r0
 800b2e6:	693b      	ldr	r3, [r7, #16]
 800b2e8:	1ad3      	subs	r3, r2, r3
 800b2ea:	2b02      	cmp	r3, #2
 800b2ec:	d901      	bls.n	800b2f2 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800b2ee:	2303      	movs	r3, #3
 800b2f0:	e093      	b.n	800b41a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800b2f2:	4b29      	ldr	r3, [pc, #164]	; (800b398 <HAL_RCC_OscConfig+0x4ac>)
 800b2f4:	681b      	ldr	r3, [r3, #0]
 800b2f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b2fa:	2b00      	cmp	r3, #0
 800b2fc:	d1f0      	bne.n	800b2e0 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800b2fe:	687b      	ldr	r3, [r7, #4]
 800b300:	69da      	ldr	r2, [r3, #28]
 800b302:	687b      	ldr	r3, [r7, #4]
 800b304:	6a1b      	ldr	r3, [r3, #32]
 800b306:	431a      	orrs	r2, r3
 800b308:	687b      	ldr	r3, [r7, #4]
 800b30a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b30c:	019b      	lsls	r3, r3, #6
 800b30e:	431a      	orrs	r2, r3
 800b310:	687b      	ldr	r3, [r7, #4]
 800b312:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b314:	085b      	lsrs	r3, r3, #1
 800b316:	3b01      	subs	r3, #1
 800b318:	041b      	lsls	r3, r3, #16
 800b31a:	431a      	orrs	r2, r3
 800b31c:	687b      	ldr	r3, [r7, #4]
 800b31e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b320:	061b      	lsls	r3, r3, #24
 800b322:	431a      	orrs	r2, r3
 800b324:	687b      	ldr	r3, [r7, #4]
 800b326:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b328:	071b      	lsls	r3, r3, #28
 800b32a:	491b      	ldr	r1, [pc, #108]	; (800b398 <HAL_RCC_OscConfig+0x4ac>)
 800b32c:	4313      	orrs	r3, r2
 800b32e:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800b330:	4b1b      	ldr	r3, [pc, #108]	; (800b3a0 <HAL_RCC_OscConfig+0x4b4>)
 800b332:	2201      	movs	r2, #1
 800b334:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b336:	f7fb fd41 	bl	8006dbc <HAL_GetTick>
 800b33a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800b33c:	e008      	b.n	800b350 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800b33e:	f7fb fd3d 	bl	8006dbc <HAL_GetTick>
 800b342:	4602      	mov	r2, r0
 800b344:	693b      	ldr	r3, [r7, #16]
 800b346:	1ad3      	subs	r3, r2, r3
 800b348:	2b02      	cmp	r3, #2
 800b34a:	d901      	bls.n	800b350 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 800b34c:	2303      	movs	r3, #3
 800b34e:	e064      	b.n	800b41a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800b350:	4b11      	ldr	r3, [pc, #68]	; (800b398 <HAL_RCC_OscConfig+0x4ac>)
 800b352:	681b      	ldr	r3, [r3, #0]
 800b354:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b358:	2b00      	cmp	r3, #0
 800b35a:	d0f0      	beq.n	800b33e <HAL_RCC_OscConfig+0x452>
 800b35c:	e05c      	b.n	800b418 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800b35e:	4b10      	ldr	r3, [pc, #64]	; (800b3a0 <HAL_RCC_OscConfig+0x4b4>)
 800b360:	2200      	movs	r2, #0
 800b362:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b364:	f7fb fd2a 	bl	8006dbc <HAL_GetTick>
 800b368:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800b36a:	e008      	b.n	800b37e <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800b36c:	f7fb fd26 	bl	8006dbc <HAL_GetTick>
 800b370:	4602      	mov	r2, r0
 800b372:	693b      	ldr	r3, [r7, #16]
 800b374:	1ad3      	subs	r3, r2, r3
 800b376:	2b02      	cmp	r3, #2
 800b378:	d901      	bls.n	800b37e <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800b37a:	2303      	movs	r3, #3
 800b37c:	e04d      	b.n	800b41a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800b37e:	4b06      	ldr	r3, [pc, #24]	; (800b398 <HAL_RCC_OscConfig+0x4ac>)
 800b380:	681b      	ldr	r3, [r3, #0]
 800b382:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b386:	2b00      	cmp	r3, #0
 800b388:	d1f0      	bne.n	800b36c <HAL_RCC_OscConfig+0x480>
 800b38a:	e045      	b.n	800b418 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800b38c:	687b      	ldr	r3, [r7, #4]
 800b38e:	699b      	ldr	r3, [r3, #24]
 800b390:	2b01      	cmp	r3, #1
 800b392:	d107      	bne.n	800b3a4 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 800b394:	2301      	movs	r3, #1
 800b396:	e040      	b.n	800b41a <HAL_RCC_OscConfig+0x52e>
 800b398:	40023800 	.word	0x40023800
 800b39c:	40007000 	.word	0x40007000
 800b3a0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800b3a4:	4b1f      	ldr	r3, [pc, #124]	; (800b424 <HAL_RCC_OscConfig+0x538>)
 800b3a6:	685b      	ldr	r3, [r3, #4]
 800b3a8:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800b3aa:	687b      	ldr	r3, [r7, #4]
 800b3ac:	699b      	ldr	r3, [r3, #24]
 800b3ae:	2b01      	cmp	r3, #1
 800b3b0:	d030      	beq.n	800b414 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800b3b2:	68fb      	ldr	r3, [r7, #12]
 800b3b4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800b3b8:	687b      	ldr	r3, [r7, #4]
 800b3ba:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800b3bc:	429a      	cmp	r2, r3
 800b3be:	d129      	bne.n	800b414 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800b3c0:	68fb      	ldr	r3, [r7, #12]
 800b3c2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800b3c6:	687b      	ldr	r3, [r7, #4]
 800b3c8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800b3ca:	429a      	cmp	r2, r3
 800b3cc:	d122      	bne.n	800b414 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800b3ce:	68fa      	ldr	r2, [r7, #12]
 800b3d0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800b3d4:	4013      	ands	r3, r2
 800b3d6:	687a      	ldr	r2, [r7, #4]
 800b3d8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800b3da:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800b3dc:	4293      	cmp	r3, r2
 800b3de:	d119      	bne.n	800b414 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800b3e0:	68fb      	ldr	r3, [r7, #12]
 800b3e2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800b3e6:	687b      	ldr	r3, [r7, #4]
 800b3e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b3ea:	085b      	lsrs	r3, r3, #1
 800b3ec:	3b01      	subs	r3, #1
 800b3ee:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800b3f0:	429a      	cmp	r2, r3
 800b3f2:	d10f      	bne.n	800b414 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800b3f4:	68fb      	ldr	r3, [r7, #12]
 800b3f6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800b3fa:	687b      	ldr	r3, [r7, #4]
 800b3fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b3fe:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800b400:	429a      	cmp	r2, r3
 800b402:	d107      	bne.n	800b414 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800b404:	68fb      	ldr	r3, [r7, #12]
 800b406:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800b40a:	687b      	ldr	r3, [r7, #4]
 800b40c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b40e:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800b410:	429a      	cmp	r2, r3
 800b412:	d001      	beq.n	800b418 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 800b414:	2301      	movs	r3, #1
 800b416:	e000      	b.n	800b41a <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 800b418:	2300      	movs	r3, #0
}
 800b41a:	4618      	mov	r0, r3
 800b41c:	3718      	adds	r7, #24
 800b41e:	46bd      	mov	sp, r7
 800b420:	bd80      	pop	{r7, pc}
 800b422:	bf00      	nop
 800b424:	40023800 	.word	0x40023800

0800b428 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800b428:	b580      	push	{r7, lr}
 800b42a:	b082      	sub	sp, #8
 800b42c:	af00      	add	r7, sp, #0
 800b42e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b430:	687b      	ldr	r3, [r7, #4]
 800b432:	2b00      	cmp	r3, #0
 800b434:	d101      	bne.n	800b43a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800b436:	2301      	movs	r3, #1
 800b438:	e041      	b.n	800b4be <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b43a:	687b      	ldr	r3, [r7, #4]
 800b43c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b440:	b2db      	uxtb	r3, r3
 800b442:	2b00      	cmp	r3, #0
 800b444:	d106      	bne.n	800b454 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b446:	687b      	ldr	r3, [r7, #4]
 800b448:	2200      	movs	r2, #0
 800b44a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800b44e:	6878      	ldr	r0, [r7, #4]
 800b450:	f7f7 ff90 	bl	8003374 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b454:	687b      	ldr	r3, [r7, #4]
 800b456:	2202      	movs	r2, #2
 800b458:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b45c:	687b      	ldr	r3, [r7, #4]
 800b45e:	681a      	ldr	r2, [r3, #0]
 800b460:	687b      	ldr	r3, [r7, #4]
 800b462:	3304      	adds	r3, #4
 800b464:	4619      	mov	r1, r3
 800b466:	4610      	mov	r0, r2
 800b468:	f000 f9b8 	bl	800b7dc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b46c:	687b      	ldr	r3, [r7, #4]
 800b46e:	2201      	movs	r2, #1
 800b470:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b474:	687b      	ldr	r3, [r7, #4]
 800b476:	2201      	movs	r2, #1
 800b478:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800b47c:	687b      	ldr	r3, [r7, #4]
 800b47e:	2201      	movs	r2, #1
 800b480:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800b484:	687b      	ldr	r3, [r7, #4]
 800b486:	2201      	movs	r2, #1
 800b488:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b48c:	687b      	ldr	r3, [r7, #4]
 800b48e:	2201      	movs	r2, #1
 800b490:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b494:	687b      	ldr	r3, [r7, #4]
 800b496:	2201      	movs	r2, #1
 800b498:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800b49c:	687b      	ldr	r3, [r7, #4]
 800b49e:	2201      	movs	r2, #1
 800b4a0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800b4a4:	687b      	ldr	r3, [r7, #4]
 800b4a6:	2201      	movs	r2, #1
 800b4a8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b4ac:	687b      	ldr	r3, [r7, #4]
 800b4ae:	2201      	movs	r2, #1
 800b4b0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b4b4:	687b      	ldr	r3, [r7, #4]
 800b4b6:	2201      	movs	r2, #1
 800b4b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800b4bc:	2300      	movs	r3, #0
}
 800b4be:	4618      	mov	r0, r3
 800b4c0:	3708      	adds	r7, #8
 800b4c2:	46bd      	mov	sp, r7
 800b4c4:	bd80      	pop	{r7, pc}
	...

0800b4c8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800b4c8:	b580      	push	{r7, lr}
 800b4ca:	b084      	sub	sp, #16
 800b4cc:	af00      	add	r7, sp, #0
 800b4ce:	6078      	str	r0, [r7, #4]
 800b4d0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800b4d2:	683b      	ldr	r3, [r7, #0]
 800b4d4:	2b00      	cmp	r3, #0
 800b4d6:	d109      	bne.n	800b4ec <HAL_TIM_PWM_Start+0x24>
 800b4d8:	687b      	ldr	r3, [r7, #4]
 800b4da:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800b4de:	b2db      	uxtb	r3, r3
 800b4e0:	2b01      	cmp	r3, #1
 800b4e2:	bf14      	ite	ne
 800b4e4:	2301      	movne	r3, #1
 800b4e6:	2300      	moveq	r3, #0
 800b4e8:	b2db      	uxtb	r3, r3
 800b4ea:	e022      	b.n	800b532 <HAL_TIM_PWM_Start+0x6a>
 800b4ec:	683b      	ldr	r3, [r7, #0]
 800b4ee:	2b04      	cmp	r3, #4
 800b4f0:	d109      	bne.n	800b506 <HAL_TIM_PWM_Start+0x3e>
 800b4f2:	687b      	ldr	r3, [r7, #4]
 800b4f4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800b4f8:	b2db      	uxtb	r3, r3
 800b4fa:	2b01      	cmp	r3, #1
 800b4fc:	bf14      	ite	ne
 800b4fe:	2301      	movne	r3, #1
 800b500:	2300      	moveq	r3, #0
 800b502:	b2db      	uxtb	r3, r3
 800b504:	e015      	b.n	800b532 <HAL_TIM_PWM_Start+0x6a>
 800b506:	683b      	ldr	r3, [r7, #0]
 800b508:	2b08      	cmp	r3, #8
 800b50a:	d109      	bne.n	800b520 <HAL_TIM_PWM_Start+0x58>
 800b50c:	687b      	ldr	r3, [r7, #4]
 800b50e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800b512:	b2db      	uxtb	r3, r3
 800b514:	2b01      	cmp	r3, #1
 800b516:	bf14      	ite	ne
 800b518:	2301      	movne	r3, #1
 800b51a:	2300      	moveq	r3, #0
 800b51c:	b2db      	uxtb	r3, r3
 800b51e:	e008      	b.n	800b532 <HAL_TIM_PWM_Start+0x6a>
 800b520:	687b      	ldr	r3, [r7, #4]
 800b522:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b526:	b2db      	uxtb	r3, r3
 800b528:	2b01      	cmp	r3, #1
 800b52a:	bf14      	ite	ne
 800b52c:	2301      	movne	r3, #1
 800b52e:	2300      	moveq	r3, #0
 800b530:	b2db      	uxtb	r3, r3
 800b532:	2b00      	cmp	r3, #0
 800b534:	d001      	beq.n	800b53a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800b536:	2301      	movs	r3, #1
 800b538:	e07c      	b.n	800b634 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800b53a:	683b      	ldr	r3, [r7, #0]
 800b53c:	2b00      	cmp	r3, #0
 800b53e:	d104      	bne.n	800b54a <HAL_TIM_PWM_Start+0x82>
 800b540:	687b      	ldr	r3, [r7, #4]
 800b542:	2202      	movs	r2, #2
 800b544:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800b548:	e013      	b.n	800b572 <HAL_TIM_PWM_Start+0xaa>
 800b54a:	683b      	ldr	r3, [r7, #0]
 800b54c:	2b04      	cmp	r3, #4
 800b54e:	d104      	bne.n	800b55a <HAL_TIM_PWM_Start+0x92>
 800b550:	687b      	ldr	r3, [r7, #4]
 800b552:	2202      	movs	r2, #2
 800b554:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800b558:	e00b      	b.n	800b572 <HAL_TIM_PWM_Start+0xaa>
 800b55a:	683b      	ldr	r3, [r7, #0]
 800b55c:	2b08      	cmp	r3, #8
 800b55e:	d104      	bne.n	800b56a <HAL_TIM_PWM_Start+0xa2>
 800b560:	687b      	ldr	r3, [r7, #4]
 800b562:	2202      	movs	r2, #2
 800b564:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b568:	e003      	b.n	800b572 <HAL_TIM_PWM_Start+0xaa>
 800b56a:	687b      	ldr	r3, [r7, #4]
 800b56c:	2202      	movs	r2, #2
 800b56e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800b572:	687b      	ldr	r3, [r7, #4]
 800b574:	681b      	ldr	r3, [r3, #0]
 800b576:	2201      	movs	r2, #1
 800b578:	6839      	ldr	r1, [r7, #0]
 800b57a:	4618      	mov	r0, r3
 800b57c:	f000 fb7e 	bl	800bc7c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800b580:	687b      	ldr	r3, [r7, #4]
 800b582:	681b      	ldr	r3, [r3, #0]
 800b584:	4a2d      	ldr	r2, [pc, #180]	; (800b63c <HAL_TIM_PWM_Start+0x174>)
 800b586:	4293      	cmp	r3, r2
 800b588:	d004      	beq.n	800b594 <HAL_TIM_PWM_Start+0xcc>
 800b58a:	687b      	ldr	r3, [r7, #4]
 800b58c:	681b      	ldr	r3, [r3, #0]
 800b58e:	4a2c      	ldr	r2, [pc, #176]	; (800b640 <HAL_TIM_PWM_Start+0x178>)
 800b590:	4293      	cmp	r3, r2
 800b592:	d101      	bne.n	800b598 <HAL_TIM_PWM_Start+0xd0>
 800b594:	2301      	movs	r3, #1
 800b596:	e000      	b.n	800b59a <HAL_TIM_PWM_Start+0xd2>
 800b598:	2300      	movs	r3, #0
 800b59a:	2b00      	cmp	r3, #0
 800b59c:	d007      	beq.n	800b5ae <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800b59e:	687b      	ldr	r3, [r7, #4]
 800b5a0:	681b      	ldr	r3, [r3, #0]
 800b5a2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b5a4:	687b      	ldr	r3, [r7, #4]
 800b5a6:	681b      	ldr	r3, [r3, #0]
 800b5a8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800b5ac:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b5ae:	687b      	ldr	r3, [r7, #4]
 800b5b0:	681b      	ldr	r3, [r3, #0]
 800b5b2:	4a22      	ldr	r2, [pc, #136]	; (800b63c <HAL_TIM_PWM_Start+0x174>)
 800b5b4:	4293      	cmp	r3, r2
 800b5b6:	d022      	beq.n	800b5fe <HAL_TIM_PWM_Start+0x136>
 800b5b8:	687b      	ldr	r3, [r7, #4]
 800b5ba:	681b      	ldr	r3, [r3, #0]
 800b5bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b5c0:	d01d      	beq.n	800b5fe <HAL_TIM_PWM_Start+0x136>
 800b5c2:	687b      	ldr	r3, [r7, #4]
 800b5c4:	681b      	ldr	r3, [r3, #0]
 800b5c6:	4a1f      	ldr	r2, [pc, #124]	; (800b644 <HAL_TIM_PWM_Start+0x17c>)
 800b5c8:	4293      	cmp	r3, r2
 800b5ca:	d018      	beq.n	800b5fe <HAL_TIM_PWM_Start+0x136>
 800b5cc:	687b      	ldr	r3, [r7, #4]
 800b5ce:	681b      	ldr	r3, [r3, #0]
 800b5d0:	4a1d      	ldr	r2, [pc, #116]	; (800b648 <HAL_TIM_PWM_Start+0x180>)
 800b5d2:	4293      	cmp	r3, r2
 800b5d4:	d013      	beq.n	800b5fe <HAL_TIM_PWM_Start+0x136>
 800b5d6:	687b      	ldr	r3, [r7, #4]
 800b5d8:	681b      	ldr	r3, [r3, #0]
 800b5da:	4a1c      	ldr	r2, [pc, #112]	; (800b64c <HAL_TIM_PWM_Start+0x184>)
 800b5dc:	4293      	cmp	r3, r2
 800b5de:	d00e      	beq.n	800b5fe <HAL_TIM_PWM_Start+0x136>
 800b5e0:	687b      	ldr	r3, [r7, #4]
 800b5e2:	681b      	ldr	r3, [r3, #0]
 800b5e4:	4a16      	ldr	r2, [pc, #88]	; (800b640 <HAL_TIM_PWM_Start+0x178>)
 800b5e6:	4293      	cmp	r3, r2
 800b5e8:	d009      	beq.n	800b5fe <HAL_TIM_PWM_Start+0x136>
 800b5ea:	687b      	ldr	r3, [r7, #4]
 800b5ec:	681b      	ldr	r3, [r3, #0]
 800b5ee:	4a18      	ldr	r2, [pc, #96]	; (800b650 <HAL_TIM_PWM_Start+0x188>)
 800b5f0:	4293      	cmp	r3, r2
 800b5f2:	d004      	beq.n	800b5fe <HAL_TIM_PWM_Start+0x136>
 800b5f4:	687b      	ldr	r3, [r7, #4]
 800b5f6:	681b      	ldr	r3, [r3, #0]
 800b5f8:	4a16      	ldr	r2, [pc, #88]	; (800b654 <HAL_TIM_PWM_Start+0x18c>)
 800b5fa:	4293      	cmp	r3, r2
 800b5fc:	d111      	bne.n	800b622 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b5fe:	687b      	ldr	r3, [r7, #4]
 800b600:	681b      	ldr	r3, [r3, #0]
 800b602:	689b      	ldr	r3, [r3, #8]
 800b604:	f003 0307 	and.w	r3, r3, #7
 800b608:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b60a:	68fb      	ldr	r3, [r7, #12]
 800b60c:	2b06      	cmp	r3, #6
 800b60e:	d010      	beq.n	800b632 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 800b610:	687b      	ldr	r3, [r7, #4]
 800b612:	681b      	ldr	r3, [r3, #0]
 800b614:	681a      	ldr	r2, [r3, #0]
 800b616:	687b      	ldr	r3, [r7, #4]
 800b618:	681b      	ldr	r3, [r3, #0]
 800b61a:	f042 0201 	orr.w	r2, r2, #1
 800b61e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b620:	e007      	b.n	800b632 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800b622:	687b      	ldr	r3, [r7, #4]
 800b624:	681b      	ldr	r3, [r3, #0]
 800b626:	681a      	ldr	r2, [r3, #0]
 800b628:	687b      	ldr	r3, [r7, #4]
 800b62a:	681b      	ldr	r3, [r3, #0]
 800b62c:	f042 0201 	orr.w	r2, r2, #1
 800b630:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800b632:	2300      	movs	r3, #0
}
 800b634:	4618      	mov	r0, r3
 800b636:	3710      	adds	r7, #16
 800b638:	46bd      	mov	sp, r7
 800b63a:	bd80      	pop	{r7, pc}
 800b63c:	40010000 	.word	0x40010000
 800b640:	40010400 	.word	0x40010400
 800b644:	40000400 	.word	0x40000400
 800b648:	40000800 	.word	0x40000800
 800b64c:	40000c00 	.word	0x40000c00
 800b650:	40014000 	.word	0x40014000
 800b654:	40001800 	.word	0x40001800

0800b658 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800b658:	b580      	push	{r7, lr}
 800b65a:	b086      	sub	sp, #24
 800b65c:	af00      	add	r7, sp, #0
 800b65e:	60f8      	str	r0, [r7, #12]
 800b660:	60b9      	str	r1, [r7, #8]
 800b662:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800b664:	2300      	movs	r3, #0
 800b666:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800b668:	68fb      	ldr	r3, [r7, #12]
 800b66a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b66e:	2b01      	cmp	r3, #1
 800b670:	d101      	bne.n	800b676 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800b672:	2302      	movs	r3, #2
 800b674:	e0ae      	b.n	800b7d4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800b676:	68fb      	ldr	r3, [r7, #12]
 800b678:	2201      	movs	r2, #1
 800b67a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800b67e:	687b      	ldr	r3, [r7, #4]
 800b680:	2b0c      	cmp	r3, #12
 800b682:	f200 809f 	bhi.w	800b7c4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800b686:	a201      	add	r2, pc, #4	; (adr r2, 800b68c <HAL_TIM_PWM_ConfigChannel+0x34>)
 800b688:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b68c:	0800b6c1 	.word	0x0800b6c1
 800b690:	0800b7c5 	.word	0x0800b7c5
 800b694:	0800b7c5 	.word	0x0800b7c5
 800b698:	0800b7c5 	.word	0x0800b7c5
 800b69c:	0800b701 	.word	0x0800b701
 800b6a0:	0800b7c5 	.word	0x0800b7c5
 800b6a4:	0800b7c5 	.word	0x0800b7c5
 800b6a8:	0800b7c5 	.word	0x0800b7c5
 800b6ac:	0800b743 	.word	0x0800b743
 800b6b0:	0800b7c5 	.word	0x0800b7c5
 800b6b4:	0800b7c5 	.word	0x0800b7c5
 800b6b8:	0800b7c5 	.word	0x0800b7c5
 800b6bc:	0800b783 	.word	0x0800b783
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800b6c0:	68fb      	ldr	r3, [r7, #12]
 800b6c2:	681b      	ldr	r3, [r3, #0]
 800b6c4:	68b9      	ldr	r1, [r7, #8]
 800b6c6:	4618      	mov	r0, r3
 800b6c8:	f000 f928 	bl	800b91c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800b6cc:	68fb      	ldr	r3, [r7, #12]
 800b6ce:	681b      	ldr	r3, [r3, #0]
 800b6d0:	699a      	ldr	r2, [r3, #24]
 800b6d2:	68fb      	ldr	r3, [r7, #12]
 800b6d4:	681b      	ldr	r3, [r3, #0]
 800b6d6:	f042 0208 	orr.w	r2, r2, #8
 800b6da:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800b6dc:	68fb      	ldr	r3, [r7, #12]
 800b6de:	681b      	ldr	r3, [r3, #0]
 800b6e0:	699a      	ldr	r2, [r3, #24]
 800b6e2:	68fb      	ldr	r3, [r7, #12]
 800b6e4:	681b      	ldr	r3, [r3, #0]
 800b6e6:	f022 0204 	bic.w	r2, r2, #4
 800b6ea:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800b6ec:	68fb      	ldr	r3, [r7, #12]
 800b6ee:	681b      	ldr	r3, [r3, #0]
 800b6f0:	6999      	ldr	r1, [r3, #24]
 800b6f2:	68bb      	ldr	r3, [r7, #8]
 800b6f4:	691a      	ldr	r2, [r3, #16]
 800b6f6:	68fb      	ldr	r3, [r7, #12]
 800b6f8:	681b      	ldr	r3, [r3, #0]
 800b6fa:	430a      	orrs	r2, r1
 800b6fc:	619a      	str	r2, [r3, #24]
      break;
 800b6fe:	e064      	b.n	800b7ca <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800b700:	68fb      	ldr	r3, [r7, #12]
 800b702:	681b      	ldr	r3, [r3, #0]
 800b704:	68b9      	ldr	r1, [r7, #8]
 800b706:	4618      	mov	r0, r3
 800b708:	f000 f978 	bl	800b9fc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800b70c:	68fb      	ldr	r3, [r7, #12]
 800b70e:	681b      	ldr	r3, [r3, #0]
 800b710:	699a      	ldr	r2, [r3, #24]
 800b712:	68fb      	ldr	r3, [r7, #12]
 800b714:	681b      	ldr	r3, [r3, #0]
 800b716:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b71a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800b71c:	68fb      	ldr	r3, [r7, #12]
 800b71e:	681b      	ldr	r3, [r3, #0]
 800b720:	699a      	ldr	r2, [r3, #24]
 800b722:	68fb      	ldr	r3, [r7, #12]
 800b724:	681b      	ldr	r3, [r3, #0]
 800b726:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b72a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800b72c:	68fb      	ldr	r3, [r7, #12]
 800b72e:	681b      	ldr	r3, [r3, #0]
 800b730:	6999      	ldr	r1, [r3, #24]
 800b732:	68bb      	ldr	r3, [r7, #8]
 800b734:	691b      	ldr	r3, [r3, #16]
 800b736:	021a      	lsls	r2, r3, #8
 800b738:	68fb      	ldr	r3, [r7, #12]
 800b73a:	681b      	ldr	r3, [r3, #0]
 800b73c:	430a      	orrs	r2, r1
 800b73e:	619a      	str	r2, [r3, #24]
      break;
 800b740:	e043      	b.n	800b7ca <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800b742:	68fb      	ldr	r3, [r7, #12]
 800b744:	681b      	ldr	r3, [r3, #0]
 800b746:	68b9      	ldr	r1, [r7, #8]
 800b748:	4618      	mov	r0, r3
 800b74a:	f000 f9cd 	bl	800bae8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800b74e:	68fb      	ldr	r3, [r7, #12]
 800b750:	681b      	ldr	r3, [r3, #0]
 800b752:	69da      	ldr	r2, [r3, #28]
 800b754:	68fb      	ldr	r3, [r7, #12]
 800b756:	681b      	ldr	r3, [r3, #0]
 800b758:	f042 0208 	orr.w	r2, r2, #8
 800b75c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800b75e:	68fb      	ldr	r3, [r7, #12]
 800b760:	681b      	ldr	r3, [r3, #0]
 800b762:	69da      	ldr	r2, [r3, #28]
 800b764:	68fb      	ldr	r3, [r7, #12]
 800b766:	681b      	ldr	r3, [r3, #0]
 800b768:	f022 0204 	bic.w	r2, r2, #4
 800b76c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800b76e:	68fb      	ldr	r3, [r7, #12]
 800b770:	681b      	ldr	r3, [r3, #0]
 800b772:	69d9      	ldr	r1, [r3, #28]
 800b774:	68bb      	ldr	r3, [r7, #8]
 800b776:	691a      	ldr	r2, [r3, #16]
 800b778:	68fb      	ldr	r3, [r7, #12]
 800b77a:	681b      	ldr	r3, [r3, #0]
 800b77c:	430a      	orrs	r2, r1
 800b77e:	61da      	str	r2, [r3, #28]
      break;
 800b780:	e023      	b.n	800b7ca <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800b782:	68fb      	ldr	r3, [r7, #12]
 800b784:	681b      	ldr	r3, [r3, #0]
 800b786:	68b9      	ldr	r1, [r7, #8]
 800b788:	4618      	mov	r0, r3
 800b78a:	f000 fa21 	bl	800bbd0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800b78e:	68fb      	ldr	r3, [r7, #12]
 800b790:	681b      	ldr	r3, [r3, #0]
 800b792:	69da      	ldr	r2, [r3, #28]
 800b794:	68fb      	ldr	r3, [r7, #12]
 800b796:	681b      	ldr	r3, [r3, #0]
 800b798:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b79c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800b79e:	68fb      	ldr	r3, [r7, #12]
 800b7a0:	681b      	ldr	r3, [r3, #0]
 800b7a2:	69da      	ldr	r2, [r3, #28]
 800b7a4:	68fb      	ldr	r3, [r7, #12]
 800b7a6:	681b      	ldr	r3, [r3, #0]
 800b7a8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b7ac:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800b7ae:	68fb      	ldr	r3, [r7, #12]
 800b7b0:	681b      	ldr	r3, [r3, #0]
 800b7b2:	69d9      	ldr	r1, [r3, #28]
 800b7b4:	68bb      	ldr	r3, [r7, #8]
 800b7b6:	691b      	ldr	r3, [r3, #16]
 800b7b8:	021a      	lsls	r2, r3, #8
 800b7ba:	68fb      	ldr	r3, [r7, #12]
 800b7bc:	681b      	ldr	r3, [r3, #0]
 800b7be:	430a      	orrs	r2, r1
 800b7c0:	61da      	str	r2, [r3, #28]
      break;
 800b7c2:	e002      	b.n	800b7ca <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800b7c4:	2301      	movs	r3, #1
 800b7c6:	75fb      	strb	r3, [r7, #23]
      break;
 800b7c8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800b7ca:	68fb      	ldr	r3, [r7, #12]
 800b7cc:	2200      	movs	r2, #0
 800b7ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800b7d2:	7dfb      	ldrb	r3, [r7, #23]
}
 800b7d4:	4618      	mov	r0, r3
 800b7d6:	3718      	adds	r7, #24
 800b7d8:	46bd      	mov	sp, r7
 800b7da:	bd80      	pop	{r7, pc}

0800b7dc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800b7dc:	b480      	push	{r7}
 800b7de:	b085      	sub	sp, #20
 800b7e0:	af00      	add	r7, sp, #0
 800b7e2:	6078      	str	r0, [r7, #4]
 800b7e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800b7e6:	687b      	ldr	r3, [r7, #4]
 800b7e8:	681b      	ldr	r3, [r3, #0]
 800b7ea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b7ec:	687b      	ldr	r3, [r7, #4]
 800b7ee:	4a40      	ldr	r2, [pc, #256]	; (800b8f0 <TIM_Base_SetConfig+0x114>)
 800b7f0:	4293      	cmp	r3, r2
 800b7f2:	d013      	beq.n	800b81c <TIM_Base_SetConfig+0x40>
 800b7f4:	687b      	ldr	r3, [r7, #4]
 800b7f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b7fa:	d00f      	beq.n	800b81c <TIM_Base_SetConfig+0x40>
 800b7fc:	687b      	ldr	r3, [r7, #4]
 800b7fe:	4a3d      	ldr	r2, [pc, #244]	; (800b8f4 <TIM_Base_SetConfig+0x118>)
 800b800:	4293      	cmp	r3, r2
 800b802:	d00b      	beq.n	800b81c <TIM_Base_SetConfig+0x40>
 800b804:	687b      	ldr	r3, [r7, #4]
 800b806:	4a3c      	ldr	r2, [pc, #240]	; (800b8f8 <TIM_Base_SetConfig+0x11c>)
 800b808:	4293      	cmp	r3, r2
 800b80a:	d007      	beq.n	800b81c <TIM_Base_SetConfig+0x40>
 800b80c:	687b      	ldr	r3, [r7, #4]
 800b80e:	4a3b      	ldr	r2, [pc, #236]	; (800b8fc <TIM_Base_SetConfig+0x120>)
 800b810:	4293      	cmp	r3, r2
 800b812:	d003      	beq.n	800b81c <TIM_Base_SetConfig+0x40>
 800b814:	687b      	ldr	r3, [r7, #4]
 800b816:	4a3a      	ldr	r2, [pc, #232]	; (800b900 <TIM_Base_SetConfig+0x124>)
 800b818:	4293      	cmp	r3, r2
 800b81a:	d108      	bne.n	800b82e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800b81c:	68fb      	ldr	r3, [r7, #12]
 800b81e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b822:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800b824:	683b      	ldr	r3, [r7, #0]
 800b826:	685b      	ldr	r3, [r3, #4]
 800b828:	68fa      	ldr	r2, [r7, #12]
 800b82a:	4313      	orrs	r3, r2
 800b82c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800b82e:	687b      	ldr	r3, [r7, #4]
 800b830:	4a2f      	ldr	r2, [pc, #188]	; (800b8f0 <TIM_Base_SetConfig+0x114>)
 800b832:	4293      	cmp	r3, r2
 800b834:	d02b      	beq.n	800b88e <TIM_Base_SetConfig+0xb2>
 800b836:	687b      	ldr	r3, [r7, #4]
 800b838:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b83c:	d027      	beq.n	800b88e <TIM_Base_SetConfig+0xb2>
 800b83e:	687b      	ldr	r3, [r7, #4]
 800b840:	4a2c      	ldr	r2, [pc, #176]	; (800b8f4 <TIM_Base_SetConfig+0x118>)
 800b842:	4293      	cmp	r3, r2
 800b844:	d023      	beq.n	800b88e <TIM_Base_SetConfig+0xb2>
 800b846:	687b      	ldr	r3, [r7, #4]
 800b848:	4a2b      	ldr	r2, [pc, #172]	; (800b8f8 <TIM_Base_SetConfig+0x11c>)
 800b84a:	4293      	cmp	r3, r2
 800b84c:	d01f      	beq.n	800b88e <TIM_Base_SetConfig+0xb2>
 800b84e:	687b      	ldr	r3, [r7, #4]
 800b850:	4a2a      	ldr	r2, [pc, #168]	; (800b8fc <TIM_Base_SetConfig+0x120>)
 800b852:	4293      	cmp	r3, r2
 800b854:	d01b      	beq.n	800b88e <TIM_Base_SetConfig+0xb2>
 800b856:	687b      	ldr	r3, [r7, #4]
 800b858:	4a29      	ldr	r2, [pc, #164]	; (800b900 <TIM_Base_SetConfig+0x124>)
 800b85a:	4293      	cmp	r3, r2
 800b85c:	d017      	beq.n	800b88e <TIM_Base_SetConfig+0xb2>
 800b85e:	687b      	ldr	r3, [r7, #4]
 800b860:	4a28      	ldr	r2, [pc, #160]	; (800b904 <TIM_Base_SetConfig+0x128>)
 800b862:	4293      	cmp	r3, r2
 800b864:	d013      	beq.n	800b88e <TIM_Base_SetConfig+0xb2>
 800b866:	687b      	ldr	r3, [r7, #4]
 800b868:	4a27      	ldr	r2, [pc, #156]	; (800b908 <TIM_Base_SetConfig+0x12c>)
 800b86a:	4293      	cmp	r3, r2
 800b86c:	d00f      	beq.n	800b88e <TIM_Base_SetConfig+0xb2>
 800b86e:	687b      	ldr	r3, [r7, #4]
 800b870:	4a26      	ldr	r2, [pc, #152]	; (800b90c <TIM_Base_SetConfig+0x130>)
 800b872:	4293      	cmp	r3, r2
 800b874:	d00b      	beq.n	800b88e <TIM_Base_SetConfig+0xb2>
 800b876:	687b      	ldr	r3, [r7, #4]
 800b878:	4a25      	ldr	r2, [pc, #148]	; (800b910 <TIM_Base_SetConfig+0x134>)
 800b87a:	4293      	cmp	r3, r2
 800b87c:	d007      	beq.n	800b88e <TIM_Base_SetConfig+0xb2>
 800b87e:	687b      	ldr	r3, [r7, #4]
 800b880:	4a24      	ldr	r2, [pc, #144]	; (800b914 <TIM_Base_SetConfig+0x138>)
 800b882:	4293      	cmp	r3, r2
 800b884:	d003      	beq.n	800b88e <TIM_Base_SetConfig+0xb2>
 800b886:	687b      	ldr	r3, [r7, #4]
 800b888:	4a23      	ldr	r2, [pc, #140]	; (800b918 <TIM_Base_SetConfig+0x13c>)
 800b88a:	4293      	cmp	r3, r2
 800b88c:	d108      	bne.n	800b8a0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800b88e:	68fb      	ldr	r3, [r7, #12]
 800b890:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b894:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800b896:	683b      	ldr	r3, [r7, #0]
 800b898:	68db      	ldr	r3, [r3, #12]
 800b89a:	68fa      	ldr	r2, [r7, #12]
 800b89c:	4313      	orrs	r3, r2
 800b89e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800b8a0:	68fb      	ldr	r3, [r7, #12]
 800b8a2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800b8a6:	683b      	ldr	r3, [r7, #0]
 800b8a8:	695b      	ldr	r3, [r3, #20]
 800b8aa:	4313      	orrs	r3, r2
 800b8ac:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800b8ae:	687b      	ldr	r3, [r7, #4]
 800b8b0:	68fa      	ldr	r2, [r7, #12]
 800b8b2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800b8b4:	683b      	ldr	r3, [r7, #0]
 800b8b6:	689a      	ldr	r2, [r3, #8]
 800b8b8:	687b      	ldr	r3, [r7, #4]
 800b8ba:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800b8bc:	683b      	ldr	r3, [r7, #0]
 800b8be:	681a      	ldr	r2, [r3, #0]
 800b8c0:	687b      	ldr	r3, [r7, #4]
 800b8c2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800b8c4:	687b      	ldr	r3, [r7, #4]
 800b8c6:	4a0a      	ldr	r2, [pc, #40]	; (800b8f0 <TIM_Base_SetConfig+0x114>)
 800b8c8:	4293      	cmp	r3, r2
 800b8ca:	d003      	beq.n	800b8d4 <TIM_Base_SetConfig+0xf8>
 800b8cc:	687b      	ldr	r3, [r7, #4]
 800b8ce:	4a0c      	ldr	r2, [pc, #48]	; (800b900 <TIM_Base_SetConfig+0x124>)
 800b8d0:	4293      	cmp	r3, r2
 800b8d2:	d103      	bne.n	800b8dc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800b8d4:	683b      	ldr	r3, [r7, #0]
 800b8d6:	691a      	ldr	r2, [r3, #16]
 800b8d8:	687b      	ldr	r3, [r7, #4]
 800b8da:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800b8dc:	687b      	ldr	r3, [r7, #4]
 800b8de:	2201      	movs	r2, #1
 800b8e0:	615a      	str	r2, [r3, #20]
}
 800b8e2:	bf00      	nop
 800b8e4:	3714      	adds	r7, #20
 800b8e6:	46bd      	mov	sp, r7
 800b8e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8ec:	4770      	bx	lr
 800b8ee:	bf00      	nop
 800b8f0:	40010000 	.word	0x40010000
 800b8f4:	40000400 	.word	0x40000400
 800b8f8:	40000800 	.word	0x40000800
 800b8fc:	40000c00 	.word	0x40000c00
 800b900:	40010400 	.word	0x40010400
 800b904:	40014000 	.word	0x40014000
 800b908:	40014400 	.word	0x40014400
 800b90c:	40014800 	.word	0x40014800
 800b910:	40001800 	.word	0x40001800
 800b914:	40001c00 	.word	0x40001c00
 800b918:	40002000 	.word	0x40002000

0800b91c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b91c:	b480      	push	{r7}
 800b91e:	b087      	sub	sp, #28
 800b920:	af00      	add	r7, sp, #0
 800b922:	6078      	str	r0, [r7, #4]
 800b924:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b926:	687b      	ldr	r3, [r7, #4]
 800b928:	6a1b      	ldr	r3, [r3, #32]
 800b92a:	f023 0201 	bic.w	r2, r3, #1
 800b92e:	687b      	ldr	r3, [r7, #4]
 800b930:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b932:	687b      	ldr	r3, [r7, #4]
 800b934:	6a1b      	ldr	r3, [r3, #32]
 800b936:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b938:	687b      	ldr	r3, [r7, #4]
 800b93a:	685b      	ldr	r3, [r3, #4]
 800b93c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b93e:	687b      	ldr	r3, [r7, #4]
 800b940:	699b      	ldr	r3, [r3, #24]
 800b942:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800b944:	68fb      	ldr	r3, [r7, #12]
 800b946:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b94a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800b94c:	68fb      	ldr	r3, [r7, #12]
 800b94e:	f023 0303 	bic.w	r3, r3, #3
 800b952:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b954:	683b      	ldr	r3, [r7, #0]
 800b956:	681b      	ldr	r3, [r3, #0]
 800b958:	68fa      	ldr	r2, [r7, #12]
 800b95a:	4313      	orrs	r3, r2
 800b95c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800b95e:	697b      	ldr	r3, [r7, #20]
 800b960:	f023 0302 	bic.w	r3, r3, #2
 800b964:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800b966:	683b      	ldr	r3, [r7, #0]
 800b968:	689b      	ldr	r3, [r3, #8]
 800b96a:	697a      	ldr	r2, [r7, #20]
 800b96c:	4313      	orrs	r3, r2
 800b96e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800b970:	687b      	ldr	r3, [r7, #4]
 800b972:	4a20      	ldr	r2, [pc, #128]	; (800b9f4 <TIM_OC1_SetConfig+0xd8>)
 800b974:	4293      	cmp	r3, r2
 800b976:	d003      	beq.n	800b980 <TIM_OC1_SetConfig+0x64>
 800b978:	687b      	ldr	r3, [r7, #4]
 800b97a:	4a1f      	ldr	r2, [pc, #124]	; (800b9f8 <TIM_OC1_SetConfig+0xdc>)
 800b97c:	4293      	cmp	r3, r2
 800b97e:	d10c      	bne.n	800b99a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800b980:	697b      	ldr	r3, [r7, #20]
 800b982:	f023 0308 	bic.w	r3, r3, #8
 800b986:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800b988:	683b      	ldr	r3, [r7, #0]
 800b98a:	68db      	ldr	r3, [r3, #12]
 800b98c:	697a      	ldr	r2, [r7, #20]
 800b98e:	4313      	orrs	r3, r2
 800b990:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800b992:	697b      	ldr	r3, [r7, #20]
 800b994:	f023 0304 	bic.w	r3, r3, #4
 800b998:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b99a:	687b      	ldr	r3, [r7, #4]
 800b99c:	4a15      	ldr	r2, [pc, #84]	; (800b9f4 <TIM_OC1_SetConfig+0xd8>)
 800b99e:	4293      	cmp	r3, r2
 800b9a0:	d003      	beq.n	800b9aa <TIM_OC1_SetConfig+0x8e>
 800b9a2:	687b      	ldr	r3, [r7, #4]
 800b9a4:	4a14      	ldr	r2, [pc, #80]	; (800b9f8 <TIM_OC1_SetConfig+0xdc>)
 800b9a6:	4293      	cmp	r3, r2
 800b9a8:	d111      	bne.n	800b9ce <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800b9aa:	693b      	ldr	r3, [r7, #16]
 800b9ac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b9b0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800b9b2:	693b      	ldr	r3, [r7, #16]
 800b9b4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800b9b8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800b9ba:	683b      	ldr	r3, [r7, #0]
 800b9bc:	695b      	ldr	r3, [r3, #20]
 800b9be:	693a      	ldr	r2, [r7, #16]
 800b9c0:	4313      	orrs	r3, r2
 800b9c2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800b9c4:	683b      	ldr	r3, [r7, #0]
 800b9c6:	699b      	ldr	r3, [r3, #24]
 800b9c8:	693a      	ldr	r2, [r7, #16]
 800b9ca:	4313      	orrs	r3, r2
 800b9cc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b9ce:	687b      	ldr	r3, [r7, #4]
 800b9d0:	693a      	ldr	r2, [r7, #16]
 800b9d2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b9d4:	687b      	ldr	r3, [r7, #4]
 800b9d6:	68fa      	ldr	r2, [r7, #12]
 800b9d8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800b9da:	683b      	ldr	r3, [r7, #0]
 800b9dc:	685a      	ldr	r2, [r3, #4]
 800b9de:	687b      	ldr	r3, [r7, #4]
 800b9e0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b9e2:	687b      	ldr	r3, [r7, #4]
 800b9e4:	697a      	ldr	r2, [r7, #20]
 800b9e6:	621a      	str	r2, [r3, #32]
}
 800b9e8:	bf00      	nop
 800b9ea:	371c      	adds	r7, #28
 800b9ec:	46bd      	mov	sp, r7
 800b9ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9f2:	4770      	bx	lr
 800b9f4:	40010000 	.word	0x40010000
 800b9f8:	40010400 	.word	0x40010400

0800b9fc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b9fc:	b480      	push	{r7}
 800b9fe:	b087      	sub	sp, #28
 800ba00:	af00      	add	r7, sp, #0
 800ba02:	6078      	str	r0, [r7, #4]
 800ba04:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800ba06:	687b      	ldr	r3, [r7, #4]
 800ba08:	6a1b      	ldr	r3, [r3, #32]
 800ba0a:	f023 0210 	bic.w	r2, r3, #16
 800ba0e:	687b      	ldr	r3, [r7, #4]
 800ba10:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ba12:	687b      	ldr	r3, [r7, #4]
 800ba14:	6a1b      	ldr	r3, [r3, #32]
 800ba16:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ba18:	687b      	ldr	r3, [r7, #4]
 800ba1a:	685b      	ldr	r3, [r3, #4]
 800ba1c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800ba1e:	687b      	ldr	r3, [r7, #4]
 800ba20:	699b      	ldr	r3, [r3, #24]
 800ba22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800ba24:	68fb      	ldr	r3, [r7, #12]
 800ba26:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ba2a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800ba2c:	68fb      	ldr	r3, [r7, #12]
 800ba2e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ba32:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ba34:	683b      	ldr	r3, [r7, #0]
 800ba36:	681b      	ldr	r3, [r3, #0]
 800ba38:	021b      	lsls	r3, r3, #8
 800ba3a:	68fa      	ldr	r2, [r7, #12]
 800ba3c:	4313      	orrs	r3, r2
 800ba3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800ba40:	697b      	ldr	r3, [r7, #20]
 800ba42:	f023 0320 	bic.w	r3, r3, #32
 800ba46:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800ba48:	683b      	ldr	r3, [r7, #0]
 800ba4a:	689b      	ldr	r3, [r3, #8]
 800ba4c:	011b      	lsls	r3, r3, #4
 800ba4e:	697a      	ldr	r2, [r7, #20]
 800ba50:	4313      	orrs	r3, r2
 800ba52:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800ba54:	687b      	ldr	r3, [r7, #4]
 800ba56:	4a22      	ldr	r2, [pc, #136]	; (800bae0 <TIM_OC2_SetConfig+0xe4>)
 800ba58:	4293      	cmp	r3, r2
 800ba5a:	d003      	beq.n	800ba64 <TIM_OC2_SetConfig+0x68>
 800ba5c:	687b      	ldr	r3, [r7, #4]
 800ba5e:	4a21      	ldr	r2, [pc, #132]	; (800bae4 <TIM_OC2_SetConfig+0xe8>)
 800ba60:	4293      	cmp	r3, r2
 800ba62:	d10d      	bne.n	800ba80 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800ba64:	697b      	ldr	r3, [r7, #20]
 800ba66:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ba6a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800ba6c:	683b      	ldr	r3, [r7, #0]
 800ba6e:	68db      	ldr	r3, [r3, #12]
 800ba70:	011b      	lsls	r3, r3, #4
 800ba72:	697a      	ldr	r2, [r7, #20]
 800ba74:	4313      	orrs	r3, r2
 800ba76:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800ba78:	697b      	ldr	r3, [r7, #20]
 800ba7a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ba7e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ba80:	687b      	ldr	r3, [r7, #4]
 800ba82:	4a17      	ldr	r2, [pc, #92]	; (800bae0 <TIM_OC2_SetConfig+0xe4>)
 800ba84:	4293      	cmp	r3, r2
 800ba86:	d003      	beq.n	800ba90 <TIM_OC2_SetConfig+0x94>
 800ba88:	687b      	ldr	r3, [r7, #4]
 800ba8a:	4a16      	ldr	r2, [pc, #88]	; (800bae4 <TIM_OC2_SetConfig+0xe8>)
 800ba8c:	4293      	cmp	r3, r2
 800ba8e:	d113      	bne.n	800bab8 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800ba90:	693b      	ldr	r3, [r7, #16]
 800ba92:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800ba96:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800ba98:	693b      	ldr	r3, [r7, #16]
 800ba9a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800ba9e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800baa0:	683b      	ldr	r3, [r7, #0]
 800baa2:	695b      	ldr	r3, [r3, #20]
 800baa4:	009b      	lsls	r3, r3, #2
 800baa6:	693a      	ldr	r2, [r7, #16]
 800baa8:	4313      	orrs	r3, r2
 800baaa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800baac:	683b      	ldr	r3, [r7, #0]
 800baae:	699b      	ldr	r3, [r3, #24]
 800bab0:	009b      	lsls	r3, r3, #2
 800bab2:	693a      	ldr	r2, [r7, #16]
 800bab4:	4313      	orrs	r3, r2
 800bab6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bab8:	687b      	ldr	r3, [r7, #4]
 800baba:	693a      	ldr	r2, [r7, #16]
 800babc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800babe:	687b      	ldr	r3, [r7, #4]
 800bac0:	68fa      	ldr	r2, [r7, #12]
 800bac2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800bac4:	683b      	ldr	r3, [r7, #0]
 800bac6:	685a      	ldr	r2, [r3, #4]
 800bac8:	687b      	ldr	r3, [r7, #4]
 800baca:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bacc:	687b      	ldr	r3, [r7, #4]
 800bace:	697a      	ldr	r2, [r7, #20]
 800bad0:	621a      	str	r2, [r3, #32]
}
 800bad2:	bf00      	nop
 800bad4:	371c      	adds	r7, #28
 800bad6:	46bd      	mov	sp, r7
 800bad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800badc:	4770      	bx	lr
 800bade:	bf00      	nop
 800bae0:	40010000 	.word	0x40010000
 800bae4:	40010400 	.word	0x40010400

0800bae8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800bae8:	b480      	push	{r7}
 800baea:	b087      	sub	sp, #28
 800baec:	af00      	add	r7, sp, #0
 800baee:	6078      	str	r0, [r7, #4]
 800baf0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800baf2:	687b      	ldr	r3, [r7, #4]
 800baf4:	6a1b      	ldr	r3, [r3, #32]
 800baf6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800bafa:	687b      	ldr	r3, [r7, #4]
 800bafc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bafe:	687b      	ldr	r3, [r7, #4]
 800bb00:	6a1b      	ldr	r3, [r3, #32]
 800bb02:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bb04:	687b      	ldr	r3, [r7, #4]
 800bb06:	685b      	ldr	r3, [r3, #4]
 800bb08:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800bb0a:	687b      	ldr	r3, [r7, #4]
 800bb0c:	69db      	ldr	r3, [r3, #28]
 800bb0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800bb10:	68fb      	ldr	r3, [r7, #12]
 800bb12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bb16:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800bb18:	68fb      	ldr	r3, [r7, #12]
 800bb1a:	f023 0303 	bic.w	r3, r3, #3
 800bb1e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800bb20:	683b      	ldr	r3, [r7, #0]
 800bb22:	681b      	ldr	r3, [r3, #0]
 800bb24:	68fa      	ldr	r2, [r7, #12]
 800bb26:	4313      	orrs	r3, r2
 800bb28:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800bb2a:	697b      	ldr	r3, [r7, #20]
 800bb2c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800bb30:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800bb32:	683b      	ldr	r3, [r7, #0]
 800bb34:	689b      	ldr	r3, [r3, #8]
 800bb36:	021b      	lsls	r3, r3, #8
 800bb38:	697a      	ldr	r2, [r7, #20]
 800bb3a:	4313      	orrs	r3, r2
 800bb3c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800bb3e:	687b      	ldr	r3, [r7, #4]
 800bb40:	4a21      	ldr	r2, [pc, #132]	; (800bbc8 <TIM_OC3_SetConfig+0xe0>)
 800bb42:	4293      	cmp	r3, r2
 800bb44:	d003      	beq.n	800bb4e <TIM_OC3_SetConfig+0x66>
 800bb46:	687b      	ldr	r3, [r7, #4]
 800bb48:	4a20      	ldr	r2, [pc, #128]	; (800bbcc <TIM_OC3_SetConfig+0xe4>)
 800bb4a:	4293      	cmp	r3, r2
 800bb4c:	d10d      	bne.n	800bb6a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800bb4e:	697b      	ldr	r3, [r7, #20]
 800bb50:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800bb54:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800bb56:	683b      	ldr	r3, [r7, #0]
 800bb58:	68db      	ldr	r3, [r3, #12]
 800bb5a:	021b      	lsls	r3, r3, #8
 800bb5c:	697a      	ldr	r2, [r7, #20]
 800bb5e:	4313      	orrs	r3, r2
 800bb60:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800bb62:	697b      	ldr	r3, [r7, #20]
 800bb64:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800bb68:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bb6a:	687b      	ldr	r3, [r7, #4]
 800bb6c:	4a16      	ldr	r2, [pc, #88]	; (800bbc8 <TIM_OC3_SetConfig+0xe0>)
 800bb6e:	4293      	cmp	r3, r2
 800bb70:	d003      	beq.n	800bb7a <TIM_OC3_SetConfig+0x92>
 800bb72:	687b      	ldr	r3, [r7, #4]
 800bb74:	4a15      	ldr	r2, [pc, #84]	; (800bbcc <TIM_OC3_SetConfig+0xe4>)
 800bb76:	4293      	cmp	r3, r2
 800bb78:	d113      	bne.n	800bba2 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800bb7a:	693b      	ldr	r3, [r7, #16]
 800bb7c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800bb80:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800bb82:	693b      	ldr	r3, [r7, #16]
 800bb84:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800bb88:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800bb8a:	683b      	ldr	r3, [r7, #0]
 800bb8c:	695b      	ldr	r3, [r3, #20]
 800bb8e:	011b      	lsls	r3, r3, #4
 800bb90:	693a      	ldr	r2, [r7, #16]
 800bb92:	4313      	orrs	r3, r2
 800bb94:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800bb96:	683b      	ldr	r3, [r7, #0]
 800bb98:	699b      	ldr	r3, [r3, #24]
 800bb9a:	011b      	lsls	r3, r3, #4
 800bb9c:	693a      	ldr	r2, [r7, #16]
 800bb9e:	4313      	orrs	r3, r2
 800bba0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bba2:	687b      	ldr	r3, [r7, #4]
 800bba4:	693a      	ldr	r2, [r7, #16]
 800bba6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800bba8:	687b      	ldr	r3, [r7, #4]
 800bbaa:	68fa      	ldr	r2, [r7, #12]
 800bbac:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800bbae:	683b      	ldr	r3, [r7, #0]
 800bbb0:	685a      	ldr	r2, [r3, #4]
 800bbb2:	687b      	ldr	r3, [r7, #4]
 800bbb4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bbb6:	687b      	ldr	r3, [r7, #4]
 800bbb8:	697a      	ldr	r2, [r7, #20]
 800bbba:	621a      	str	r2, [r3, #32]
}
 800bbbc:	bf00      	nop
 800bbbe:	371c      	adds	r7, #28
 800bbc0:	46bd      	mov	sp, r7
 800bbc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbc6:	4770      	bx	lr
 800bbc8:	40010000 	.word	0x40010000
 800bbcc:	40010400 	.word	0x40010400

0800bbd0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800bbd0:	b480      	push	{r7}
 800bbd2:	b087      	sub	sp, #28
 800bbd4:	af00      	add	r7, sp, #0
 800bbd6:	6078      	str	r0, [r7, #4]
 800bbd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800bbda:	687b      	ldr	r3, [r7, #4]
 800bbdc:	6a1b      	ldr	r3, [r3, #32]
 800bbde:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800bbe2:	687b      	ldr	r3, [r7, #4]
 800bbe4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bbe6:	687b      	ldr	r3, [r7, #4]
 800bbe8:	6a1b      	ldr	r3, [r3, #32]
 800bbea:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bbec:	687b      	ldr	r3, [r7, #4]
 800bbee:	685b      	ldr	r3, [r3, #4]
 800bbf0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800bbf2:	687b      	ldr	r3, [r7, #4]
 800bbf4:	69db      	ldr	r3, [r3, #28]
 800bbf6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800bbf8:	68fb      	ldr	r3, [r7, #12]
 800bbfa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800bbfe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800bc00:	68fb      	ldr	r3, [r7, #12]
 800bc02:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800bc06:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800bc08:	683b      	ldr	r3, [r7, #0]
 800bc0a:	681b      	ldr	r3, [r3, #0]
 800bc0c:	021b      	lsls	r3, r3, #8
 800bc0e:	68fa      	ldr	r2, [r7, #12]
 800bc10:	4313      	orrs	r3, r2
 800bc12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800bc14:	693b      	ldr	r3, [r7, #16]
 800bc16:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800bc1a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800bc1c:	683b      	ldr	r3, [r7, #0]
 800bc1e:	689b      	ldr	r3, [r3, #8]
 800bc20:	031b      	lsls	r3, r3, #12
 800bc22:	693a      	ldr	r2, [r7, #16]
 800bc24:	4313      	orrs	r3, r2
 800bc26:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bc28:	687b      	ldr	r3, [r7, #4]
 800bc2a:	4a12      	ldr	r2, [pc, #72]	; (800bc74 <TIM_OC4_SetConfig+0xa4>)
 800bc2c:	4293      	cmp	r3, r2
 800bc2e:	d003      	beq.n	800bc38 <TIM_OC4_SetConfig+0x68>
 800bc30:	687b      	ldr	r3, [r7, #4]
 800bc32:	4a11      	ldr	r2, [pc, #68]	; (800bc78 <TIM_OC4_SetConfig+0xa8>)
 800bc34:	4293      	cmp	r3, r2
 800bc36:	d109      	bne.n	800bc4c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800bc38:	697b      	ldr	r3, [r7, #20]
 800bc3a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800bc3e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800bc40:	683b      	ldr	r3, [r7, #0]
 800bc42:	695b      	ldr	r3, [r3, #20]
 800bc44:	019b      	lsls	r3, r3, #6
 800bc46:	697a      	ldr	r2, [r7, #20]
 800bc48:	4313      	orrs	r3, r2
 800bc4a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bc4c:	687b      	ldr	r3, [r7, #4]
 800bc4e:	697a      	ldr	r2, [r7, #20]
 800bc50:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800bc52:	687b      	ldr	r3, [r7, #4]
 800bc54:	68fa      	ldr	r2, [r7, #12]
 800bc56:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800bc58:	683b      	ldr	r3, [r7, #0]
 800bc5a:	685a      	ldr	r2, [r3, #4]
 800bc5c:	687b      	ldr	r3, [r7, #4]
 800bc5e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bc60:	687b      	ldr	r3, [r7, #4]
 800bc62:	693a      	ldr	r2, [r7, #16]
 800bc64:	621a      	str	r2, [r3, #32]
}
 800bc66:	bf00      	nop
 800bc68:	371c      	adds	r7, #28
 800bc6a:	46bd      	mov	sp, r7
 800bc6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc70:	4770      	bx	lr
 800bc72:	bf00      	nop
 800bc74:	40010000 	.word	0x40010000
 800bc78:	40010400 	.word	0x40010400

0800bc7c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800bc7c:	b480      	push	{r7}
 800bc7e:	b087      	sub	sp, #28
 800bc80:	af00      	add	r7, sp, #0
 800bc82:	60f8      	str	r0, [r7, #12]
 800bc84:	60b9      	str	r1, [r7, #8]
 800bc86:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800bc88:	68bb      	ldr	r3, [r7, #8]
 800bc8a:	f003 031f 	and.w	r3, r3, #31
 800bc8e:	2201      	movs	r2, #1
 800bc90:	fa02 f303 	lsl.w	r3, r2, r3
 800bc94:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800bc96:	68fb      	ldr	r3, [r7, #12]
 800bc98:	6a1a      	ldr	r2, [r3, #32]
 800bc9a:	697b      	ldr	r3, [r7, #20]
 800bc9c:	43db      	mvns	r3, r3
 800bc9e:	401a      	ands	r2, r3
 800bca0:	68fb      	ldr	r3, [r7, #12]
 800bca2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800bca4:	68fb      	ldr	r3, [r7, #12]
 800bca6:	6a1a      	ldr	r2, [r3, #32]
 800bca8:	68bb      	ldr	r3, [r7, #8]
 800bcaa:	f003 031f 	and.w	r3, r3, #31
 800bcae:	6879      	ldr	r1, [r7, #4]
 800bcb0:	fa01 f303 	lsl.w	r3, r1, r3
 800bcb4:	431a      	orrs	r2, r3
 800bcb6:	68fb      	ldr	r3, [r7, #12]
 800bcb8:	621a      	str	r2, [r3, #32]
}
 800bcba:	bf00      	nop
 800bcbc:	371c      	adds	r7, #28
 800bcbe:	46bd      	mov	sp, r7
 800bcc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcc4:	4770      	bx	lr
	...

0800bcc8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800bcc8:	b480      	push	{r7}
 800bcca:	b085      	sub	sp, #20
 800bccc:	af00      	add	r7, sp, #0
 800bcce:	6078      	str	r0, [r7, #4]
 800bcd0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800bcd2:	687b      	ldr	r3, [r7, #4]
 800bcd4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800bcd8:	2b01      	cmp	r3, #1
 800bcda:	d101      	bne.n	800bce0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800bcdc:	2302      	movs	r3, #2
 800bcde:	e05a      	b.n	800bd96 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800bce0:	687b      	ldr	r3, [r7, #4]
 800bce2:	2201      	movs	r2, #1
 800bce4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bce8:	687b      	ldr	r3, [r7, #4]
 800bcea:	2202      	movs	r2, #2
 800bcec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800bcf0:	687b      	ldr	r3, [r7, #4]
 800bcf2:	681b      	ldr	r3, [r3, #0]
 800bcf4:	685b      	ldr	r3, [r3, #4]
 800bcf6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800bcf8:	687b      	ldr	r3, [r7, #4]
 800bcfa:	681b      	ldr	r3, [r3, #0]
 800bcfc:	689b      	ldr	r3, [r3, #8]
 800bcfe:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800bd00:	68fb      	ldr	r3, [r7, #12]
 800bd02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bd06:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800bd08:	683b      	ldr	r3, [r7, #0]
 800bd0a:	681b      	ldr	r3, [r3, #0]
 800bd0c:	68fa      	ldr	r2, [r7, #12]
 800bd0e:	4313      	orrs	r3, r2
 800bd10:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800bd12:	687b      	ldr	r3, [r7, #4]
 800bd14:	681b      	ldr	r3, [r3, #0]
 800bd16:	68fa      	ldr	r2, [r7, #12]
 800bd18:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800bd1a:	687b      	ldr	r3, [r7, #4]
 800bd1c:	681b      	ldr	r3, [r3, #0]
 800bd1e:	4a21      	ldr	r2, [pc, #132]	; (800bda4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800bd20:	4293      	cmp	r3, r2
 800bd22:	d022      	beq.n	800bd6a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800bd24:	687b      	ldr	r3, [r7, #4]
 800bd26:	681b      	ldr	r3, [r3, #0]
 800bd28:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bd2c:	d01d      	beq.n	800bd6a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800bd2e:	687b      	ldr	r3, [r7, #4]
 800bd30:	681b      	ldr	r3, [r3, #0]
 800bd32:	4a1d      	ldr	r2, [pc, #116]	; (800bda8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800bd34:	4293      	cmp	r3, r2
 800bd36:	d018      	beq.n	800bd6a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800bd38:	687b      	ldr	r3, [r7, #4]
 800bd3a:	681b      	ldr	r3, [r3, #0]
 800bd3c:	4a1b      	ldr	r2, [pc, #108]	; (800bdac <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800bd3e:	4293      	cmp	r3, r2
 800bd40:	d013      	beq.n	800bd6a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800bd42:	687b      	ldr	r3, [r7, #4]
 800bd44:	681b      	ldr	r3, [r3, #0]
 800bd46:	4a1a      	ldr	r2, [pc, #104]	; (800bdb0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800bd48:	4293      	cmp	r3, r2
 800bd4a:	d00e      	beq.n	800bd6a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800bd4c:	687b      	ldr	r3, [r7, #4]
 800bd4e:	681b      	ldr	r3, [r3, #0]
 800bd50:	4a18      	ldr	r2, [pc, #96]	; (800bdb4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800bd52:	4293      	cmp	r3, r2
 800bd54:	d009      	beq.n	800bd6a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800bd56:	687b      	ldr	r3, [r7, #4]
 800bd58:	681b      	ldr	r3, [r3, #0]
 800bd5a:	4a17      	ldr	r2, [pc, #92]	; (800bdb8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800bd5c:	4293      	cmp	r3, r2
 800bd5e:	d004      	beq.n	800bd6a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800bd60:	687b      	ldr	r3, [r7, #4]
 800bd62:	681b      	ldr	r3, [r3, #0]
 800bd64:	4a15      	ldr	r2, [pc, #84]	; (800bdbc <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800bd66:	4293      	cmp	r3, r2
 800bd68:	d10c      	bne.n	800bd84 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800bd6a:	68bb      	ldr	r3, [r7, #8]
 800bd6c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800bd70:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800bd72:	683b      	ldr	r3, [r7, #0]
 800bd74:	685b      	ldr	r3, [r3, #4]
 800bd76:	68ba      	ldr	r2, [r7, #8]
 800bd78:	4313      	orrs	r3, r2
 800bd7a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800bd7c:	687b      	ldr	r3, [r7, #4]
 800bd7e:	681b      	ldr	r3, [r3, #0]
 800bd80:	68ba      	ldr	r2, [r7, #8]
 800bd82:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800bd84:	687b      	ldr	r3, [r7, #4]
 800bd86:	2201      	movs	r2, #1
 800bd88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800bd8c:	687b      	ldr	r3, [r7, #4]
 800bd8e:	2200      	movs	r2, #0
 800bd90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800bd94:	2300      	movs	r3, #0
}
 800bd96:	4618      	mov	r0, r3
 800bd98:	3714      	adds	r7, #20
 800bd9a:	46bd      	mov	sp, r7
 800bd9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bda0:	4770      	bx	lr
 800bda2:	bf00      	nop
 800bda4:	40010000 	.word	0x40010000
 800bda8:	40000400 	.word	0x40000400
 800bdac:	40000800 	.word	0x40000800
 800bdb0:	40000c00 	.word	0x40000c00
 800bdb4:	40010400 	.word	0x40010400
 800bdb8:	40014000 	.word	0x40014000
 800bdbc:	40001800 	.word	0x40001800

0800bdc0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800bdc0:	b084      	sub	sp, #16
 800bdc2:	b580      	push	{r7, lr}
 800bdc4:	b084      	sub	sp, #16
 800bdc6:	af00      	add	r7, sp, #0
 800bdc8:	6078      	str	r0, [r7, #4]
 800bdca:	f107 001c 	add.w	r0, r7, #28
 800bdce:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800bdd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bdd4:	2b01      	cmp	r3, #1
 800bdd6:	d122      	bne.n	800be1e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800bdd8:	687b      	ldr	r3, [r7, #4]
 800bdda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bddc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800bde0:	687b      	ldr	r3, [r7, #4]
 800bde2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800bde4:	687b      	ldr	r3, [r7, #4]
 800bde6:	68db      	ldr	r3, [r3, #12]
 800bde8:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800bdec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bdf0:	687a      	ldr	r2, [r7, #4]
 800bdf2:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800bdf4:	687b      	ldr	r3, [r7, #4]
 800bdf6:	68db      	ldr	r3, [r3, #12]
 800bdf8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800bdfc:	687b      	ldr	r3, [r7, #4]
 800bdfe:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800be00:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800be02:	2b01      	cmp	r3, #1
 800be04:	d105      	bne.n	800be12 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800be06:	687b      	ldr	r3, [r7, #4]
 800be08:	68db      	ldr	r3, [r3, #12]
 800be0a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800be0e:	687b      	ldr	r3, [r7, #4]
 800be10:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800be12:	6878      	ldr	r0, [r7, #4]
 800be14:	f001 fbe8 	bl	800d5e8 <USB_CoreReset>
 800be18:	4603      	mov	r3, r0
 800be1a:	73fb      	strb	r3, [r7, #15]
 800be1c:	e01a      	b.n	800be54 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800be1e:	687b      	ldr	r3, [r7, #4]
 800be20:	68db      	ldr	r3, [r3, #12]
 800be22:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800be26:	687b      	ldr	r3, [r7, #4]
 800be28:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800be2a:	6878      	ldr	r0, [r7, #4]
 800be2c:	f001 fbdc 	bl	800d5e8 <USB_CoreReset>
 800be30:	4603      	mov	r3, r0
 800be32:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800be34:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800be36:	2b00      	cmp	r3, #0
 800be38:	d106      	bne.n	800be48 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800be3a:	687b      	ldr	r3, [r7, #4]
 800be3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800be3e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800be42:	687b      	ldr	r3, [r7, #4]
 800be44:	639a      	str	r2, [r3, #56]	; 0x38
 800be46:	e005      	b.n	800be54 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800be48:	687b      	ldr	r3, [r7, #4]
 800be4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800be4c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800be50:	687b      	ldr	r3, [r7, #4]
 800be52:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800be54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be56:	2b01      	cmp	r3, #1
 800be58:	d10b      	bne.n	800be72 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800be5a:	687b      	ldr	r3, [r7, #4]
 800be5c:	689b      	ldr	r3, [r3, #8]
 800be5e:	f043 0206 	orr.w	r2, r3, #6
 800be62:	687b      	ldr	r3, [r7, #4]
 800be64:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800be66:	687b      	ldr	r3, [r7, #4]
 800be68:	689b      	ldr	r3, [r3, #8]
 800be6a:	f043 0220 	orr.w	r2, r3, #32
 800be6e:	687b      	ldr	r3, [r7, #4]
 800be70:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800be72:	7bfb      	ldrb	r3, [r7, #15]
}
 800be74:	4618      	mov	r0, r3
 800be76:	3710      	adds	r7, #16
 800be78:	46bd      	mov	sp, r7
 800be7a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800be7e:	b004      	add	sp, #16
 800be80:	4770      	bx	lr
	...

0800be84 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800be84:	b480      	push	{r7}
 800be86:	b087      	sub	sp, #28
 800be88:	af00      	add	r7, sp, #0
 800be8a:	60f8      	str	r0, [r7, #12]
 800be8c:	60b9      	str	r1, [r7, #8]
 800be8e:	4613      	mov	r3, r2
 800be90:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800be92:	79fb      	ldrb	r3, [r7, #7]
 800be94:	2b02      	cmp	r3, #2
 800be96:	d165      	bne.n	800bf64 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800be98:	68bb      	ldr	r3, [r7, #8]
 800be9a:	4a41      	ldr	r2, [pc, #260]	; (800bfa0 <USB_SetTurnaroundTime+0x11c>)
 800be9c:	4293      	cmp	r3, r2
 800be9e:	d906      	bls.n	800beae <USB_SetTurnaroundTime+0x2a>
 800bea0:	68bb      	ldr	r3, [r7, #8]
 800bea2:	4a40      	ldr	r2, [pc, #256]	; (800bfa4 <USB_SetTurnaroundTime+0x120>)
 800bea4:	4293      	cmp	r3, r2
 800bea6:	d202      	bcs.n	800beae <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800bea8:	230f      	movs	r3, #15
 800beaa:	617b      	str	r3, [r7, #20]
 800beac:	e062      	b.n	800bf74 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800beae:	68bb      	ldr	r3, [r7, #8]
 800beb0:	4a3c      	ldr	r2, [pc, #240]	; (800bfa4 <USB_SetTurnaroundTime+0x120>)
 800beb2:	4293      	cmp	r3, r2
 800beb4:	d306      	bcc.n	800bec4 <USB_SetTurnaroundTime+0x40>
 800beb6:	68bb      	ldr	r3, [r7, #8]
 800beb8:	4a3b      	ldr	r2, [pc, #236]	; (800bfa8 <USB_SetTurnaroundTime+0x124>)
 800beba:	4293      	cmp	r3, r2
 800bebc:	d202      	bcs.n	800bec4 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800bebe:	230e      	movs	r3, #14
 800bec0:	617b      	str	r3, [r7, #20]
 800bec2:	e057      	b.n	800bf74 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800bec4:	68bb      	ldr	r3, [r7, #8]
 800bec6:	4a38      	ldr	r2, [pc, #224]	; (800bfa8 <USB_SetTurnaroundTime+0x124>)
 800bec8:	4293      	cmp	r3, r2
 800beca:	d306      	bcc.n	800beda <USB_SetTurnaroundTime+0x56>
 800becc:	68bb      	ldr	r3, [r7, #8]
 800bece:	4a37      	ldr	r2, [pc, #220]	; (800bfac <USB_SetTurnaroundTime+0x128>)
 800bed0:	4293      	cmp	r3, r2
 800bed2:	d202      	bcs.n	800beda <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800bed4:	230d      	movs	r3, #13
 800bed6:	617b      	str	r3, [r7, #20]
 800bed8:	e04c      	b.n	800bf74 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800beda:	68bb      	ldr	r3, [r7, #8]
 800bedc:	4a33      	ldr	r2, [pc, #204]	; (800bfac <USB_SetTurnaroundTime+0x128>)
 800bede:	4293      	cmp	r3, r2
 800bee0:	d306      	bcc.n	800bef0 <USB_SetTurnaroundTime+0x6c>
 800bee2:	68bb      	ldr	r3, [r7, #8]
 800bee4:	4a32      	ldr	r2, [pc, #200]	; (800bfb0 <USB_SetTurnaroundTime+0x12c>)
 800bee6:	4293      	cmp	r3, r2
 800bee8:	d802      	bhi.n	800bef0 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800beea:	230c      	movs	r3, #12
 800beec:	617b      	str	r3, [r7, #20]
 800beee:	e041      	b.n	800bf74 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800bef0:	68bb      	ldr	r3, [r7, #8]
 800bef2:	4a2f      	ldr	r2, [pc, #188]	; (800bfb0 <USB_SetTurnaroundTime+0x12c>)
 800bef4:	4293      	cmp	r3, r2
 800bef6:	d906      	bls.n	800bf06 <USB_SetTurnaroundTime+0x82>
 800bef8:	68bb      	ldr	r3, [r7, #8]
 800befa:	4a2e      	ldr	r2, [pc, #184]	; (800bfb4 <USB_SetTurnaroundTime+0x130>)
 800befc:	4293      	cmp	r3, r2
 800befe:	d802      	bhi.n	800bf06 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800bf00:	230b      	movs	r3, #11
 800bf02:	617b      	str	r3, [r7, #20]
 800bf04:	e036      	b.n	800bf74 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800bf06:	68bb      	ldr	r3, [r7, #8]
 800bf08:	4a2a      	ldr	r2, [pc, #168]	; (800bfb4 <USB_SetTurnaroundTime+0x130>)
 800bf0a:	4293      	cmp	r3, r2
 800bf0c:	d906      	bls.n	800bf1c <USB_SetTurnaroundTime+0x98>
 800bf0e:	68bb      	ldr	r3, [r7, #8]
 800bf10:	4a29      	ldr	r2, [pc, #164]	; (800bfb8 <USB_SetTurnaroundTime+0x134>)
 800bf12:	4293      	cmp	r3, r2
 800bf14:	d802      	bhi.n	800bf1c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800bf16:	230a      	movs	r3, #10
 800bf18:	617b      	str	r3, [r7, #20]
 800bf1a:	e02b      	b.n	800bf74 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800bf1c:	68bb      	ldr	r3, [r7, #8]
 800bf1e:	4a26      	ldr	r2, [pc, #152]	; (800bfb8 <USB_SetTurnaroundTime+0x134>)
 800bf20:	4293      	cmp	r3, r2
 800bf22:	d906      	bls.n	800bf32 <USB_SetTurnaroundTime+0xae>
 800bf24:	68bb      	ldr	r3, [r7, #8]
 800bf26:	4a25      	ldr	r2, [pc, #148]	; (800bfbc <USB_SetTurnaroundTime+0x138>)
 800bf28:	4293      	cmp	r3, r2
 800bf2a:	d202      	bcs.n	800bf32 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800bf2c:	2309      	movs	r3, #9
 800bf2e:	617b      	str	r3, [r7, #20]
 800bf30:	e020      	b.n	800bf74 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800bf32:	68bb      	ldr	r3, [r7, #8]
 800bf34:	4a21      	ldr	r2, [pc, #132]	; (800bfbc <USB_SetTurnaroundTime+0x138>)
 800bf36:	4293      	cmp	r3, r2
 800bf38:	d306      	bcc.n	800bf48 <USB_SetTurnaroundTime+0xc4>
 800bf3a:	68bb      	ldr	r3, [r7, #8]
 800bf3c:	4a20      	ldr	r2, [pc, #128]	; (800bfc0 <USB_SetTurnaroundTime+0x13c>)
 800bf3e:	4293      	cmp	r3, r2
 800bf40:	d802      	bhi.n	800bf48 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800bf42:	2308      	movs	r3, #8
 800bf44:	617b      	str	r3, [r7, #20]
 800bf46:	e015      	b.n	800bf74 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800bf48:	68bb      	ldr	r3, [r7, #8]
 800bf4a:	4a1d      	ldr	r2, [pc, #116]	; (800bfc0 <USB_SetTurnaroundTime+0x13c>)
 800bf4c:	4293      	cmp	r3, r2
 800bf4e:	d906      	bls.n	800bf5e <USB_SetTurnaroundTime+0xda>
 800bf50:	68bb      	ldr	r3, [r7, #8]
 800bf52:	4a1c      	ldr	r2, [pc, #112]	; (800bfc4 <USB_SetTurnaroundTime+0x140>)
 800bf54:	4293      	cmp	r3, r2
 800bf56:	d202      	bcs.n	800bf5e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800bf58:	2307      	movs	r3, #7
 800bf5a:	617b      	str	r3, [r7, #20]
 800bf5c:	e00a      	b.n	800bf74 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800bf5e:	2306      	movs	r3, #6
 800bf60:	617b      	str	r3, [r7, #20]
 800bf62:	e007      	b.n	800bf74 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800bf64:	79fb      	ldrb	r3, [r7, #7]
 800bf66:	2b00      	cmp	r3, #0
 800bf68:	d102      	bne.n	800bf70 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800bf6a:	2309      	movs	r3, #9
 800bf6c:	617b      	str	r3, [r7, #20]
 800bf6e:	e001      	b.n	800bf74 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800bf70:	2309      	movs	r3, #9
 800bf72:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800bf74:	68fb      	ldr	r3, [r7, #12]
 800bf76:	68db      	ldr	r3, [r3, #12]
 800bf78:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800bf7c:	68fb      	ldr	r3, [r7, #12]
 800bf7e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800bf80:	68fb      	ldr	r3, [r7, #12]
 800bf82:	68da      	ldr	r2, [r3, #12]
 800bf84:	697b      	ldr	r3, [r7, #20]
 800bf86:	029b      	lsls	r3, r3, #10
 800bf88:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800bf8c:	431a      	orrs	r2, r3
 800bf8e:	68fb      	ldr	r3, [r7, #12]
 800bf90:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800bf92:	2300      	movs	r3, #0
}
 800bf94:	4618      	mov	r0, r3
 800bf96:	371c      	adds	r7, #28
 800bf98:	46bd      	mov	sp, r7
 800bf9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf9e:	4770      	bx	lr
 800bfa0:	00d8acbf 	.word	0x00d8acbf
 800bfa4:	00e4e1c0 	.word	0x00e4e1c0
 800bfa8:	00f42400 	.word	0x00f42400
 800bfac:	01067380 	.word	0x01067380
 800bfb0:	011a499f 	.word	0x011a499f
 800bfb4:	01312cff 	.word	0x01312cff
 800bfb8:	014ca43f 	.word	0x014ca43f
 800bfbc:	016e3600 	.word	0x016e3600
 800bfc0:	01a6ab1f 	.word	0x01a6ab1f
 800bfc4:	01e84800 	.word	0x01e84800

0800bfc8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800bfc8:	b480      	push	{r7}
 800bfca:	b083      	sub	sp, #12
 800bfcc:	af00      	add	r7, sp, #0
 800bfce:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800bfd0:	687b      	ldr	r3, [r7, #4]
 800bfd2:	689b      	ldr	r3, [r3, #8]
 800bfd4:	f043 0201 	orr.w	r2, r3, #1
 800bfd8:	687b      	ldr	r3, [r7, #4]
 800bfda:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800bfdc:	2300      	movs	r3, #0
}
 800bfde:	4618      	mov	r0, r3
 800bfe0:	370c      	adds	r7, #12
 800bfe2:	46bd      	mov	sp, r7
 800bfe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfe8:	4770      	bx	lr

0800bfea <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800bfea:	b480      	push	{r7}
 800bfec:	b083      	sub	sp, #12
 800bfee:	af00      	add	r7, sp, #0
 800bff0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800bff2:	687b      	ldr	r3, [r7, #4]
 800bff4:	689b      	ldr	r3, [r3, #8]
 800bff6:	f023 0201 	bic.w	r2, r3, #1
 800bffa:	687b      	ldr	r3, [r7, #4]
 800bffc:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800bffe:	2300      	movs	r3, #0
}
 800c000:	4618      	mov	r0, r3
 800c002:	370c      	adds	r7, #12
 800c004:	46bd      	mov	sp, r7
 800c006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c00a:	4770      	bx	lr

0800c00c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800c00c:	b580      	push	{r7, lr}
 800c00e:	b084      	sub	sp, #16
 800c010:	af00      	add	r7, sp, #0
 800c012:	6078      	str	r0, [r7, #4]
 800c014:	460b      	mov	r3, r1
 800c016:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800c018:	2300      	movs	r3, #0
 800c01a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800c01c:	687b      	ldr	r3, [r7, #4]
 800c01e:	68db      	ldr	r3, [r3, #12]
 800c020:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800c024:	687b      	ldr	r3, [r7, #4]
 800c026:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800c028:	78fb      	ldrb	r3, [r7, #3]
 800c02a:	2b01      	cmp	r3, #1
 800c02c:	d115      	bne.n	800c05a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800c02e:	687b      	ldr	r3, [r7, #4]
 800c030:	68db      	ldr	r3, [r3, #12]
 800c032:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800c036:	687b      	ldr	r3, [r7, #4]
 800c038:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800c03a:	2001      	movs	r0, #1
 800c03c:	f7fa feca 	bl	8006dd4 <HAL_Delay>
      ms++;
 800c040:	68fb      	ldr	r3, [r7, #12]
 800c042:	3301      	adds	r3, #1
 800c044:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800c046:	6878      	ldr	r0, [r7, #4]
 800c048:	f001 fa3f 	bl	800d4ca <USB_GetMode>
 800c04c:	4603      	mov	r3, r0
 800c04e:	2b01      	cmp	r3, #1
 800c050:	d01e      	beq.n	800c090 <USB_SetCurrentMode+0x84>
 800c052:	68fb      	ldr	r3, [r7, #12]
 800c054:	2b31      	cmp	r3, #49	; 0x31
 800c056:	d9f0      	bls.n	800c03a <USB_SetCurrentMode+0x2e>
 800c058:	e01a      	b.n	800c090 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800c05a:	78fb      	ldrb	r3, [r7, #3]
 800c05c:	2b00      	cmp	r3, #0
 800c05e:	d115      	bne.n	800c08c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800c060:	687b      	ldr	r3, [r7, #4]
 800c062:	68db      	ldr	r3, [r3, #12]
 800c064:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800c068:	687b      	ldr	r3, [r7, #4]
 800c06a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800c06c:	2001      	movs	r0, #1
 800c06e:	f7fa feb1 	bl	8006dd4 <HAL_Delay>
      ms++;
 800c072:	68fb      	ldr	r3, [r7, #12]
 800c074:	3301      	adds	r3, #1
 800c076:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800c078:	6878      	ldr	r0, [r7, #4]
 800c07a:	f001 fa26 	bl	800d4ca <USB_GetMode>
 800c07e:	4603      	mov	r3, r0
 800c080:	2b00      	cmp	r3, #0
 800c082:	d005      	beq.n	800c090 <USB_SetCurrentMode+0x84>
 800c084:	68fb      	ldr	r3, [r7, #12]
 800c086:	2b31      	cmp	r3, #49	; 0x31
 800c088:	d9f0      	bls.n	800c06c <USB_SetCurrentMode+0x60>
 800c08a:	e001      	b.n	800c090 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800c08c:	2301      	movs	r3, #1
 800c08e:	e005      	b.n	800c09c <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800c090:	68fb      	ldr	r3, [r7, #12]
 800c092:	2b32      	cmp	r3, #50	; 0x32
 800c094:	d101      	bne.n	800c09a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800c096:	2301      	movs	r3, #1
 800c098:	e000      	b.n	800c09c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800c09a:	2300      	movs	r3, #0
}
 800c09c:	4618      	mov	r0, r3
 800c09e:	3710      	adds	r7, #16
 800c0a0:	46bd      	mov	sp, r7
 800c0a2:	bd80      	pop	{r7, pc}

0800c0a4 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800c0a4:	b084      	sub	sp, #16
 800c0a6:	b580      	push	{r7, lr}
 800c0a8:	b086      	sub	sp, #24
 800c0aa:	af00      	add	r7, sp, #0
 800c0ac:	6078      	str	r0, [r7, #4]
 800c0ae:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800c0b2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800c0b6:	2300      	movs	r3, #0
 800c0b8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c0ba:	687b      	ldr	r3, [r7, #4]
 800c0bc:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800c0be:	2300      	movs	r3, #0
 800c0c0:	613b      	str	r3, [r7, #16]
 800c0c2:	e009      	b.n	800c0d8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800c0c4:	687a      	ldr	r2, [r7, #4]
 800c0c6:	693b      	ldr	r3, [r7, #16]
 800c0c8:	3340      	adds	r3, #64	; 0x40
 800c0ca:	009b      	lsls	r3, r3, #2
 800c0cc:	4413      	add	r3, r2
 800c0ce:	2200      	movs	r2, #0
 800c0d0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800c0d2:	693b      	ldr	r3, [r7, #16]
 800c0d4:	3301      	adds	r3, #1
 800c0d6:	613b      	str	r3, [r7, #16]
 800c0d8:	693b      	ldr	r3, [r7, #16]
 800c0da:	2b0e      	cmp	r3, #14
 800c0dc:	d9f2      	bls.n	800c0c4 <USB_DevInit+0x20>
  }

#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800c0de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c0e0:	2b00      	cmp	r3, #0
 800c0e2:	d11c      	bne.n	800c11e <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800c0e4:	68fb      	ldr	r3, [r7, #12]
 800c0e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c0ea:	685b      	ldr	r3, [r3, #4]
 800c0ec:	68fa      	ldr	r2, [r7, #12]
 800c0ee:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c0f2:	f043 0302 	orr.w	r3, r3, #2
 800c0f6:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800c0f8:	687b      	ldr	r3, [r7, #4]
 800c0fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c0fc:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800c100:	687b      	ldr	r3, [r7, #4]
 800c102:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800c104:	687b      	ldr	r3, [r7, #4]
 800c106:	681b      	ldr	r3, [r3, #0]
 800c108:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800c10c:	687b      	ldr	r3, [r7, #4]
 800c10e:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800c110:	687b      	ldr	r3, [r7, #4]
 800c112:	681b      	ldr	r3, [r3, #0]
 800c114:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800c118:	687b      	ldr	r3, [r7, #4]
 800c11a:	601a      	str	r2, [r3, #0]
 800c11c:	e005      	b.n	800c12a <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800c11e:	687b      	ldr	r3, [r7, #4]
 800c120:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c122:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800c126:	687b      	ldr	r3, [r7, #4]
 800c128:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800c12a:	68fb      	ldr	r3, [r7, #12]
 800c12c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800c130:	461a      	mov	r2, r3
 800c132:	2300      	movs	r3, #0
 800c134:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800c136:	68fb      	ldr	r3, [r7, #12]
 800c138:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c13c:	4619      	mov	r1, r3
 800c13e:	68fb      	ldr	r3, [r7, #12]
 800c140:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c144:	461a      	mov	r2, r3
 800c146:	680b      	ldr	r3, [r1, #0]
 800c148:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800c14a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c14c:	2b01      	cmp	r3, #1
 800c14e:	d10c      	bne.n	800c16a <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800c150:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c152:	2b00      	cmp	r3, #0
 800c154:	d104      	bne.n	800c160 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800c156:	2100      	movs	r1, #0
 800c158:	6878      	ldr	r0, [r7, #4]
 800c15a:	f000 f965 	bl	800c428 <USB_SetDevSpeed>
 800c15e:	e008      	b.n	800c172 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800c160:	2101      	movs	r1, #1
 800c162:	6878      	ldr	r0, [r7, #4]
 800c164:	f000 f960 	bl	800c428 <USB_SetDevSpeed>
 800c168:	e003      	b.n	800c172 <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800c16a:	2103      	movs	r1, #3
 800c16c:	6878      	ldr	r0, [r7, #4]
 800c16e:	f000 f95b 	bl	800c428 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800c172:	2110      	movs	r1, #16
 800c174:	6878      	ldr	r0, [r7, #4]
 800c176:	f000 f8f3 	bl	800c360 <USB_FlushTxFifo>
 800c17a:	4603      	mov	r3, r0
 800c17c:	2b00      	cmp	r3, #0
 800c17e:	d001      	beq.n	800c184 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 800c180:	2301      	movs	r3, #1
 800c182:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800c184:	6878      	ldr	r0, [r7, #4]
 800c186:	f000 f91f 	bl	800c3c8 <USB_FlushRxFifo>
 800c18a:	4603      	mov	r3, r0
 800c18c:	2b00      	cmp	r3, #0
 800c18e:	d001      	beq.n	800c194 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 800c190:	2301      	movs	r3, #1
 800c192:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800c194:	68fb      	ldr	r3, [r7, #12]
 800c196:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c19a:	461a      	mov	r2, r3
 800c19c:	2300      	movs	r3, #0
 800c19e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800c1a0:	68fb      	ldr	r3, [r7, #12]
 800c1a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c1a6:	461a      	mov	r2, r3
 800c1a8:	2300      	movs	r3, #0
 800c1aa:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800c1ac:	68fb      	ldr	r3, [r7, #12]
 800c1ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c1b2:	461a      	mov	r2, r3
 800c1b4:	2300      	movs	r3, #0
 800c1b6:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800c1b8:	2300      	movs	r3, #0
 800c1ba:	613b      	str	r3, [r7, #16]
 800c1bc:	e043      	b.n	800c246 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800c1be:	693b      	ldr	r3, [r7, #16]
 800c1c0:	015a      	lsls	r2, r3, #5
 800c1c2:	68fb      	ldr	r3, [r7, #12]
 800c1c4:	4413      	add	r3, r2
 800c1c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c1ca:	681b      	ldr	r3, [r3, #0]
 800c1cc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c1d0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c1d4:	d118      	bne.n	800c208 <USB_DevInit+0x164>
    {
      if (i == 0U)
 800c1d6:	693b      	ldr	r3, [r7, #16]
 800c1d8:	2b00      	cmp	r3, #0
 800c1da:	d10a      	bne.n	800c1f2 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800c1dc:	693b      	ldr	r3, [r7, #16]
 800c1de:	015a      	lsls	r2, r3, #5
 800c1e0:	68fb      	ldr	r3, [r7, #12]
 800c1e2:	4413      	add	r3, r2
 800c1e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c1e8:	461a      	mov	r2, r3
 800c1ea:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800c1ee:	6013      	str	r3, [r2, #0]
 800c1f0:	e013      	b.n	800c21a <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800c1f2:	693b      	ldr	r3, [r7, #16]
 800c1f4:	015a      	lsls	r2, r3, #5
 800c1f6:	68fb      	ldr	r3, [r7, #12]
 800c1f8:	4413      	add	r3, r2
 800c1fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c1fe:	461a      	mov	r2, r3
 800c200:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800c204:	6013      	str	r3, [r2, #0]
 800c206:	e008      	b.n	800c21a <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800c208:	693b      	ldr	r3, [r7, #16]
 800c20a:	015a      	lsls	r2, r3, #5
 800c20c:	68fb      	ldr	r3, [r7, #12]
 800c20e:	4413      	add	r3, r2
 800c210:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c214:	461a      	mov	r2, r3
 800c216:	2300      	movs	r3, #0
 800c218:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800c21a:	693b      	ldr	r3, [r7, #16]
 800c21c:	015a      	lsls	r2, r3, #5
 800c21e:	68fb      	ldr	r3, [r7, #12]
 800c220:	4413      	add	r3, r2
 800c222:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c226:	461a      	mov	r2, r3
 800c228:	2300      	movs	r3, #0
 800c22a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800c22c:	693b      	ldr	r3, [r7, #16]
 800c22e:	015a      	lsls	r2, r3, #5
 800c230:	68fb      	ldr	r3, [r7, #12]
 800c232:	4413      	add	r3, r2
 800c234:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c238:	461a      	mov	r2, r3
 800c23a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800c23e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800c240:	693b      	ldr	r3, [r7, #16]
 800c242:	3301      	adds	r3, #1
 800c244:	613b      	str	r3, [r7, #16]
 800c246:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c248:	693a      	ldr	r2, [r7, #16]
 800c24a:	429a      	cmp	r2, r3
 800c24c:	d3b7      	bcc.n	800c1be <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800c24e:	2300      	movs	r3, #0
 800c250:	613b      	str	r3, [r7, #16]
 800c252:	e043      	b.n	800c2dc <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800c254:	693b      	ldr	r3, [r7, #16]
 800c256:	015a      	lsls	r2, r3, #5
 800c258:	68fb      	ldr	r3, [r7, #12]
 800c25a:	4413      	add	r3, r2
 800c25c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c260:	681b      	ldr	r3, [r3, #0]
 800c262:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c266:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c26a:	d118      	bne.n	800c29e <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 800c26c:	693b      	ldr	r3, [r7, #16]
 800c26e:	2b00      	cmp	r3, #0
 800c270:	d10a      	bne.n	800c288 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800c272:	693b      	ldr	r3, [r7, #16]
 800c274:	015a      	lsls	r2, r3, #5
 800c276:	68fb      	ldr	r3, [r7, #12]
 800c278:	4413      	add	r3, r2
 800c27a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c27e:	461a      	mov	r2, r3
 800c280:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800c284:	6013      	str	r3, [r2, #0]
 800c286:	e013      	b.n	800c2b0 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800c288:	693b      	ldr	r3, [r7, #16]
 800c28a:	015a      	lsls	r2, r3, #5
 800c28c:	68fb      	ldr	r3, [r7, #12]
 800c28e:	4413      	add	r3, r2
 800c290:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c294:	461a      	mov	r2, r3
 800c296:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800c29a:	6013      	str	r3, [r2, #0]
 800c29c:	e008      	b.n	800c2b0 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800c29e:	693b      	ldr	r3, [r7, #16]
 800c2a0:	015a      	lsls	r2, r3, #5
 800c2a2:	68fb      	ldr	r3, [r7, #12]
 800c2a4:	4413      	add	r3, r2
 800c2a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c2aa:	461a      	mov	r2, r3
 800c2ac:	2300      	movs	r3, #0
 800c2ae:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800c2b0:	693b      	ldr	r3, [r7, #16]
 800c2b2:	015a      	lsls	r2, r3, #5
 800c2b4:	68fb      	ldr	r3, [r7, #12]
 800c2b6:	4413      	add	r3, r2
 800c2b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c2bc:	461a      	mov	r2, r3
 800c2be:	2300      	movs	r3, #0
 800c2c0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800c2c2:	693b      	ldr	r3, [r7, #16]
 800c2c4:	015a      	lsls	r2, r3, #5
 800c2c6:	68fb      	ldr	r3, [r7, #12]
 800c2c8:	4413      	add	r3, r2
 800c2ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c2ce:	461a      	mov	r2, r3
 800c2d0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800c2d4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800c2d6:	693b      	ldr	r3, [r7, #16]
 800c2d8:	3301      	adds	r3, #1
 800c2da:	613b      	str	r3, [r7, #16]
 800c2dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c2de:	693a      	ldr	r2, [r7, #16]
 800c2e0:	429a      	cmp	r2, r3
 800c2e2:	d3b7      	bcc.n	800c254 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800c2e4:	68fb      	ldr	r3, [r7, #12]
 800c2e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c2ea:	691b      	ldr	r3, [r3, #16]
 800c2ec:	68fa      	ldr	r2, [r7, #12]
 800c2ee:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c2f2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c2f6:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800c2f8:	687b      	ldr	r3, [r7, #4]
 800c2fa:	2200      	movs	r2, #0
 800c2fc:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800c2fe:	687b      	ldr	r3, [r7, #4]
 800c300:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800c304:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800c306:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c308:	2b00      	cmp	r3, #0
 800c30a:	d105      	bne.n	800c318 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800c30c:	687b      	ldr	r3, [r7, #4]
 800c30e:	699b      	ldr	r3, [r3, #24]
 800c310:	f043 0210 	orr.w	r2, r3, #16
 800c314:	687b      	ldr	r3, [r7, #4]
 800c316:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800c318:	687b      	ldr	r3, [r7, #4]
 800c31a:	699a      	ldr	r2, [r3, #24]
 800c31c:	4b0f      	ldr	r3, [pc, #60]	; (800c35c <USB_DevInit+0x2b8>)
 800c31e:	4313      	orrs	r3, r2
 800c320:	687a      	ldr	r2, [r7, #4]
 800c322:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800c324:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c326:	2b00      	cmp	r3, #0
 800c328:	d005      	beq.n	800c336 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800c32a:	687b      	ldr	r3, [r7, #4]
 800c32c:	699b      	ldr	r3, [r3, #24]
 800c32e:	f043 0208 	orr.w	r2, r3, #8
 800c332:	687b      	ldr	r3, [r7, #4]
 800c334:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800c336:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c338:	2b01      	cmp	r3, #1
 800c33a:	d107      	bne.n	800c34c <USB_DevInit+0x2a8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800c33c:	687b      	ldr	r3, [r7, #4]
 800c33e:	699b      	ldr	r3, [r3, #24]
 800c340:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800c344:	f043 0304 	orr.w	r3, r3, #4
 800c348:	687a      	ldr	r2, [r7, #4]
 800c34a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800c34c:	7dfb      	ldrb	r3, [r7, #23]
}
 800c34e:	4618      	mov	r0, r3
 800c350:	3718      	adds	r7, #24
 800c352:	46bd      	mov	sp, r7
 800c354:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800c358:	b004      	add	sp, #16
 800c35a:	4770      	bx	lr
 800c35c:	803c3800 	.word	0x803c3800

0800c360 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800c360:	b480      	push	{r7}
 800c362:	b085      	sub	sp, #20
 800c364:	af00      	add	r7, sp, #0
 800c366:	6078      	str	r0, [r7, #4]
 800c368:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800c36a:	2300      	movs	r3, #0
 800c36c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800c36e:	68fb      	ldr	r3, [r7, #12]
 800c370:	3301      	adds	r3, #1
 800c372:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800c374:	68fb      	ldr	r3, [r7, #12]
 800c376:	4a13      	ldr	r2, [pc, #76]	; (800c3c4 <USB_FlushTxFifo+0x64>)
 800c378:	4293      	cmp	r3, r2
 800c37a:	d901      	bls.n	800c380 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800c37c:	2303      	movs	r3, #3
 800c37e:	e01b      	b.n	800c3b8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800c380:	687b      	ldr	r3, [r7, #4]
 800c382:	691b      	ldr	r3, [r3, #16]
 800c384:	2b00      	cmp	r3, #0
 800c386:	daf2      	bge.n	800c36e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800c388:	2300      	movs	r3, #0
 800c38a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800c38c:	683b      	ldr	r3, [r7, #0]
 800c38e:	019b      	lsls	r3, r3, #6
 800c390:	f043 0220 	orr.w	r2, r3, #32
 800c394:	687b      	ldr	r3, [r7, #4]
 800c396:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800c398:	68fb      	ldr	r3, [r7, #12]
 800c39a:	3301      	adds	r3, #1
 800c39c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800c39e:	68fb      	ldr	r3, [r7, #12]
 800c3a0:	4a08      	ldr	r2, [pc, #32]	; (800c3c4 <USB_FlushTxFifo+0x64>)
 800c3a2:	4293      	cmp	r3, r2
 800c3a4:	d901      	bls.n	800c3aa <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800c3a6:	2303      	movs	r3, #3
 800c3a8:	e006      	b.n	800c3b8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800c3aa:	687b      	ldr	r3, [r7, #4]
 800c3ac:	691b      	ldr	r3, [r3, #16]
 800c3ae:	f003 0320 	and.w	r3, r3, #32
 800c3b2:	2b20      	cmp	r3, #32
 800c3b4:	d0f0      	beq.n	800c398 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800c3b6:	2300      	movs	r3, #0
}
 800c3b8:	4618      	mov	r0, r3
 800c3ba:	3714      	adds	r7, #20
 800c3bc:	46bd      	mov	sp, r7
 800c3be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3c2:	4770      	bx	lr
 800c3c4:	00030d40 	.word	0x00030d40

0800c3c8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800c3c8:	b480      	push	{r7}
 800c3ca:	b085      	sub	sp, #20
 800c3cc:	af00      	add	r7, sp, #0
 800c3ce:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800c3d0:	2300      	movs	r3, #0
 800c3d2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800c3d4:	68fb      	ldr	r3, [r7, #12]
 800c3d6:	3301      	adds	r3, #1
 800c3d8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800c3da:	68fb      	ldr	r3, [r7, #12]
 800c3dc:	4a11      	ldr	r2, [pc, #68]	; (800c424 <USB_FlushRxFifo+0x5c>)
 800c3de:	4293      	cmp	r3, r2
 800c3e0:	d901      	bls.n	800c3e6 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800c3e2:	2303      	movs	r3, #3
 800c3e4:	e018      	b.n	800c418 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800c3e6:	687b      	ldr	r3, [r7, #4]
 800c3e8:	691b      	ldr	r3, [r3, #16]
 800c3ea:	2b00      	cmp	r3, #0
 800c3ec:	daf2      	bge.n	800c3d4 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800c3ee:	2300      	movs	r3, #0
 800c3f0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800c3f2:	687b      	ldr	r3, [r7, #4]
 800c3f4:	2210      	movs	r2, #16
 800c3f6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800c3f8:	68fb      	ldr	r3, [r7, #12]
 800c3fa:	3301      	adds	r3, #1
 800c3fc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800c3fe:	68fb      	ldr	r3, [r7, #12]
 800c400:	4a08      	ldr	r2, [pc, #32]	; (800c424 <USB_FlushRxFifo+0x5c>)
 800c402:	4293      	cmp	r3, r2
 800c404:	d901      	bls.n	800c40a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800c406:	2303      	movs	r3, #3
 800c408:	e006      	b.n	800c418 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800c40a:	687b      	ldr	r3, [r7, #4]
 800c40c:	691b      	ldr	r3, [r3, #16]
 800c40e:	f003 0310 	and.w	r3, r3, #16
 800c412:	2b10      	cmp	r3, #16
 800c414:	d0f0      	beq.n	800c3f8 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800c416:	2300      	movs	r3, #0
}
 800c418:	4618      	mov	r0, r3
 800c41a:	3714      	adds	r7, #20
 800c41c:	46bd      	mov	sp, r7
 800c41e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c422:	4770      	bx	lr
 800c424:	00030d40 	.word	0x00030d40

0800c428 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800c428:	b480      	push	{r7}
 800c42a:	b085      	sub	sp, #20
 800c42c:	af00      	add	r7, sp, #0
 800c42e:	6078      	str	r0, [r7, #4]
 800c430:	460b      	mov	r3, r1
 800c432:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c434:	687b      	ldr	r3, [r7, #4]
 800c436:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800c438:	68fb      	ldr	r3, [r7, #12]
 800c43a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c43e:	681a      	ldr	r2, [r3, #0]
 800c440:	78fb      	ldrb	r3, [r7, #3]
 800c442:	68f9      	ldr	r1, [r7, #12]
 800c444:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c448:	4313      	orrs	r3, r2
 800c44a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800c44c:	2300      	movs	r3, #0
}
 800c44e:	4618      	mov	r0, r3
 800c450:	3714      	adds	r7, #20
 800c452:	46bd      	mov	sp, r7
 800c454:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c458:	4770      	bx	lr

0800c45a <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800c45a:	b480      	push	{r7}
 800c45c:	b087      	sub	sp, #28
 800c45e:	af00      	add	r7, sp, #0
 800c460:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c462:	687b      	ldr	r3, [r7, #4]
 800c464:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800c466:	693b      	ldr	r3, [r7, #16]
 800c468:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c46c:	689b      	ldr	r3, [r3, #8]
 800c46e:	f003 0306 	and.w	r3, r3, #6
 800c472:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800c474:	68fb      	ldr	r3, [r7, #12]
 800c476:	2b00      	cmp	r3, #0
 800c478:	d102      	bne.n	800c480 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800c47a:	2300      	movs	r3, #0
 800c47c:	75fb      	strb	r3, [r7, #23]
 800c47e:	e00a      	b.n	800c496 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800c480:	68fb      	ldr	r3, [r7, #12]
 800c482:	2b02      	cmp	r3, #2
 800c484:	d002      	beq.n	800c48c <USB_GetDevSpeed+0x32>
 800c486:	68fb      	ldr	r3, [r7, #12]
 800c488:	2b06      	cmp	r3, #6
 800c48a:	d102      	bne.n	800c492 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800c48c:	2302      	movs	r3, #2
 800c48e:	75fb      	strb	r3, [r7, #23]
 800c490:	e001      	b.n	800c496 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800c492:	230f      	movs	r3, #15
 800c494:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800c496:	7dfb      	ldrb	r3, [r7, #23]
}
 800c498:	4618      	mov	r0, r3
 800c49a:	371c      	adds	r7, #28
 800c49c:	46bd      	mov	sp, r7
 800c49e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4a2:	4770      	bx	lr

0800c4a4 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800c4a4:	b480      	push	{r7}
 800c4a6:	b085      	sub	sp, #20
 800c4a8:	af00      	add	r7, sp, #0
 800c4aa:	6078      	str	r0, [r7, #4]
 800c4ac:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c4ae:	687b      	ldr	r3, [r7, #4]
 800c4b0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800c4b2:	683b      	ldr	r3, [r7, #0]
 800c4b4:	781b      	ldrb	r3, [r3, #0]
 800c4b6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800c4b8:	683b      	ldr	r3, [r7, #0]
 800c4ba:	785b      	ldrb	r3, [r3, #1]
 800c4bc:	2b01      	cmp	r3, #1
 800c4be:	d13a      	bne.n	800c536 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800c4c0:	68fb      	ldr	r3, [r7, #12]
 800c4c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c4c6:	69da      	ldr	r2, [r3, #28]
 800c4c8:	683b      	ldr	r3, [r7, #0]
 800c4ca:	781b      	ldrb	r3, [r3, #0]
 800c4cc:	f003 030f 	and.w	r3, r3, #15
 800c4d0:	2101      	movs	r1, #1
 800c4d2:	fa01 f303 	lsl.w	r3, r1, r3
 800c4d6:	b29b      	uxth	r3, r3
 800c4d8:	68f9      	ldr	r1, [r7, #12]
 800c4da:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c4de:	4313      	orrs	r3, r2
 800c4e0:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800c4e2:	68bb      	ldr	r3, [r7, #8]
 800c4e4:	015a      	lsls	r2, r3, #5
 800c4e6:	68fb      	ldr	r3, [r7, #12]
 800c4e8:	4413      	add	r3, r2
 800c4ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c4ee:	681b      	ldr	r3, [r3, #0]
 800c4f0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800c4f4:	2b00      	cmp	r3, #0
 800c4f6:	d155      	bne.n	800c5a4 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800c4f8:	68bb      	ldr	r3, [r7, #8]
 800c4fa:	015a      	lsls	r2, r3, #5
 800c4fc:	68fb      	ldr	r3, [r7, #12]
 800c4fe:	4413      	add	r3, r2
 800c500:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c504:	681a      	ldr	r2, [r3, #0]
 800c506:	683b      	ldr	r3, [r7, #0]
 800c508:	68db      	ldr	r3, [r3, #12]
 800c50a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800c50e:	683b      	ldr	r3, [r7, #0]
 800c510:	791b      	ldrb	r3, [r3, #4]
 800c512:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800c514:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800c516:	68bb      	ldr	r3, [r7, #8]
 800c518:	059b      	lsls	r3, r3, #22
 800c51a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800c51c:	4313      	orrs	r3, r2
 800c51e:	68ba      	ldr	r2, [r7, #8]
 800c520:	0151      	lsls	r1, r2, #5
 800c522:	68fa      	ldr	r2, [r7, #12]
 800c524:	440a      	add	r2, r1
 800c526:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c52a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c52e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c532:	6013      	str	r3, [r2, #0]
 800c534:	e036      	b.n	800c5a4 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800c536:	68fb      	ldr	r3, [r7, #12]
 800c538:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c53c:	69da      	ldr	r2, [r3, #28]
 800c53e:	683b      	ldr	r3, [r7, #0]
 800c540:	781b      	ldrb	r3, [r3, #0]
 800c542:	f003 030f 	and.w	r3, r3, #15
 800c546:	2101      	movs	r1, #1
 800c548:	fa01 f303 	lsl.w	r3, r1, r3
 800c54c:	041b      	lsls	r3, r3, #16
 800c54e:	68f9      	ldr	r1, [r7, #12]
 800c550:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c554:	4313      	orrs	r3, r2
 800c556:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800c558:	68bb      	ldr	r3, [r7, #8]
 800c55a:	015a      	lsls	r2, r3, #5
 800c55c:	68fb      	ldr	r3, [r7, #12]
 800c55e:	4413      	add	r3, r2
 800c560:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c564:	681b      	ldr	r3, [r3, #0]
 800c566:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800c56a:	2b00      	cmp	r3, #0
 800c56c:	d11a      	bne.n	800c5a4 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800c56e:	68bb      	ldr	r3, [r7, #8]
 800c570:	015a      	lsls	r2, r3, #5
 800c572:	68fb      	ldr	r3, [r7, #12]
 800c574:	4413      	add	r3, r2
 800c576:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c57a:	681a      	ldr	r2, [r3, #0]
 800c57c:	683b      	ldr	r3, [r7, #0]
 800c57e:	68db      	ldr	r3, [r3, #12]
 800c580:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800c584:	683b      	ldr	r3, [r7, #0]
 800c586:	791b      	ldrb	r3, [r3, #4]
 800c588:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800c58a:	430b      	orrs	r3, r1
 800c58c:	4313      	orrs	r3, r2
 800c58e:	68ba      	ldr	r2, [r7, #8]
 800c590:	0151      	lsls	r1, r2, #5
 800c592:	68fa      	ldr	r2, [r7, #12]
 800c594:	440a      	add	r2, r1
 800c596:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c59a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c59e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c5a2:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800c5a4:	2300      	movs	r3, #0
}
 800c5a6:	4618      	mov	r0, r3
 800c5a8:	3714      	adds	r7, #20
 800c5aa:	46bd      	mov	sp, r7
 800c5ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5b0:	4770      	bx	lr
	...

0800c5b4 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800c5b4:	b480      	push	{r7}
 800c5b6:	b085      	sub	sp, #20
 800c5b8:	af00      	add	r7, sp, #0
 800c5ba:	6078      	str	r0, [r7, #4]
 800c5bc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c5be:	687b      	ldr	r3, [r7, #4]
 800c5c0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800c5c2:	683b      	ldr	r3, [r7, #0]
 800c5c4:	781b      	ldrb	r3, [r3, #0]
 800c5c6:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800c5c8:	683b      	ldr	r3, [r7, #0]
 800c5ca:	785b      	ldrb	r3, [r3, #1]
 800c5cc:	2b01      	cmp	r3, #1
 800c5ce:	d161      	bne.n	800c694 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800c5d0:	68bb      	ldr	r3, [r7, #8]
 800c5d2:	015a      	lsls	r2, r3, #5
 800c5d4:	68fb      	ldr	r3, [r7, #12]
 800c5d6:	4413      	add	r3, r2
 800c5d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c5dc:	681b      	ldr	r3, [r3, #0]
 800c5de:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c5e2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c5e6:	d11f      	bne.n	800c628 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800c5e8:	68bb      	ldr	r3, [r7, #8]
 800c5ea:	015a      	lsls	r2, r3, #5
 800c5ec:	68fb      	ldr	r3, [r7, #12]
 800c5ee:	4413      	add	r3, r2
 800c5f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c5f4:	681b      	ldr	r3, [r3, #0]
 800c5f6:	68ba      	ldr	r2, [r7, #8]
 800c5f8:	0151      	lsls	r1, r2, #5
 800c5fa:	68fa      	ldr	r2, [r7, #12]
 800c5fc:	440a      	add	r2, r1
 800c5fe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c602:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800c606:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800c608:	68bb      	ldr	r3, [r7, #8]
 800c60a:	015a      	lsls	r2, r3, #5
 800c60c:	68fb      	ldr	r3, [r7, #12]
 800c60e:	4413      	add	r3, r2
 800c610:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c614:	681b      	ldr	r3, [r3, #0]
 800c616:	68ba      	ldr	r2, [r7, #8]
 800c618:	0151      	lsls	r1, r2, #5
 800c61a:	68fa      	ldr	r2, [r7, #12]
 800c61c:	440a      	add	r2, r1
 800c61e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c622:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800c626:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800c628:	68fb      	ldr	r3, [r7, #12]
 800c62a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c62e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c630:	683b      	ldr	r3, [r7, #0]
 800c632:	781b      	ldrb	r3, [r3, #0]
 800c634:	f003 030f 	and.w	r3, r3, #15
 800c638:	2101      	movs	r1, #1
 800c63a:	fa01 f303 	lsl.w	r3, r1, r3
 800c63e:	b29b      	uxth	r3, r3
 800c640:	43db      	mvns	r3, r3
 800c642:	68f9      	ldr	r1, [r7, #12]
 800c644:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c648:	4013      	ands	r3, r2
 800c64a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800c64c:	68fb      	ldr	r3, [r7, #12]
 800c64e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c652:	69da      	ldr	r2, [r3, #28]
 800c654:	683b      	ldr	r3, [r7, #0]
 800c656:	781b      	ldrb	r3, [r3, #0]
 800c658:	f003 030f 	and.w	r3, r3, #15
 800c65c:	2101      	movs	r1, #1
 800c65e:	fa01 f303 	lsl.w	r3, r1, r3
 800c662:	b29b      	uxth	r3, r3
 800c664:	43db      	mvns	r3, r3
 800c666:	68f9      	ldr	r1, [r7, #12]
 800c668:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c66c:	4013      	ands	r3, r2
 800c66e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800c670:	68bb      	ldr	r3, [r7, #8]
 800c672:	015a      	lsls	r2, r3, #5
 800c674:	68fb      	ldr	r3, [r7, #12]
 800c676:	4413      	add	r3, r2
 800c678:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c67c:	681a      	ldr	r2, [r3, #0]
 800c67e:	68bb      	ldr	r3, [r7, #8]
 800c680:	0159      	lsls	r1, r3, #5
 800c682:	68fb      	ldr	r3, [r7, #12]
 800c684:	440b      	add	r3, r1
 800c686:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c68a:	4619      	mov	r1, r3
 800c68c:	4b35      	ldr	r3, [pc, #212]	; (800c764 <USB_DeactivateEndpoint+0x1b0>)
 800c68e:	4013      	ands	r3, r2
 800c690:	600b      	str	r3, [r1, #0]
 800c692:	e060      	b.n	800c756 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800c694:	68bb      	ldr	r3, [r7, #8]
 800c696:	015a      	lsls	r2, r3, #5
 800c698:	68fb      	ldr	r3, [r7, #12]
 800c69a:	4413      	add	r3, r2
 800c69c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c6a0:	681b      	ldr	r3, [r3, #0]
 800c6a2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c6a6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c6aa:	d11f      	bne.n	800c6ec <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800c6ac:	68bb      	ldr	r3, [r7, #8]
 800c6ae:	015a      	lsls	r2, r3, #5
 800c6b0:	68fb      	ldr	r3, [r7, #12]
 800c6b2:	4413      	add	r3, r2
 800c6b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c6b8:	681b      	ldr	r3, [r3, #0]
 800c6ba:	68ba      	ldr	r2, [r7, #8]
 800c6bc:	0151      	lsls	r1, r2, #5
 800c6be:	68fa      	ldr	r2, [r7, #12]
 800c6c0:	440a      	add	r2, r1
 800c6c2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c6c6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800c6ca:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800c6cc:	68bb      	ldr	r3, [r7, #8]
 800c6ce:	015a      	lsls	r2, r3, #5
 800c6d0:	68fb      	ldr	r3, [r7, #12]
 800c6d2:	4413      	add	r3, r2
 800c6d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c6d8:	681b      	ldr	r3, [r3, #0]
 800c6da:	68ba      	ldr	r2, [r7, #8]
 800c6dc:	0151      	lsls	r1, r2, #5
 800c6de:	68fa      	ldr	r2, [r7, #12]
 800c6e0:	440a      	add	r2, r1
 800c6e2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c6e6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800c6ea:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800c6ec:	68fb      	ldr	r3, [r7, #12]
 800c6ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c6f2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c6f4:	683b      	ldr	r3, [r7, #0]
 800c6f6:	781b      	ldrb	r3, [r3, #0]
 800c6f8:	f003 030f 	and.w	r3, r3, #15
 800c6fc:	2101      	movs	r1, #1
 800c6fe:	fa01 f303 	lsl.w	r3, r1, r3
 800c702:	041b      	lsls	r3, r3, #16
 800c704:	43db      	mvns	r3, r3
 800c706:	68f9      	ldr	r1, [r7, #12]
 800c708:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c70c:	4013      	ands	r3, r2
 800c70e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800c710:	68fb      	ldr	r3, [r7, #12]
 800c712:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c716:	69da      	ldr	r2, [r3, #28]
 800c718:	683b      	ldr	r3, [r7, #0]
 800c71a:	781b      	ldrb	r3, [r3, #0]
 800c71c:	f003 030f 	and.w	r3, r3, #15
 800c720:	2101      	movs	r1, #1
 800c722:	fa01 f303 	lsl.w	r3, r1, r3
 800c726:	041b      	lsls	r3, r3, #16
 800c728:	43db      	mvns	r3, r3
 800c72a:	68f9      	ldr	r1, [r7, #12]
 800c72c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c730:	4013      	ands	r3, r2
 800c732:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800c734:	68bb      	ldr	r3, [r7, #8]
 800c736:	015a      	lsls	r2, r3, #5
 800c738:	68fb      	ldr	r3, [r7, #12]
 800c73a:	4413      	add	r3, r2
 800c73c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c740:	681a      	ldr	r2, [r3, #0]
 800c742:	68bb      	ldr	r3, [r7, #8]
 800c744:	0159      	lsls	r1, r3, #5
 800c746:	68fb      	ldr	r3, [r7, #12]
 800c748:	440b      	add	r3, r1
 800c74a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c74e:	4619      	mov	r1, r3
 800c750:	4b05      	ldr	r3, [pc, #20]	; (800c768 <USB_DeactivateEndpoint+0x1b4>)
 800c752:	4013      	ands	r3, r2
 800c754:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800c756:	2300      	movs	r3, #0
}
 800c758:	4618      	mov	r0, r3
 800c75a:	3714      	adds	r7, #20
 800c75c:	46bd      	mov	sp, r7
 800c75e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c762:	4770      	bx	lr
 800c764:	ec337800 	.word	0xec337800
 800c768:	eff37800 	.word	0xeff37800

0800c76c <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800c76c:	b580      	push	{r7, lr}
 800c76e:	b08a      	sub	sp, #40	; 0x28
 800c770:	af02      	add	r7, sp, #8
 800c772:	60f8      	str	r0, [r7, #12]
 800c774:	60b9      	str	r1, [r7, #8]
 800c776:	4613      	mov	r3, r2
 800c778:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c77a:	68fb      	ldr	r3, [r7, #12]
 800c77c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800c77e:	68bb      	ldr	r3, [r7, #8]
 800c780:	781b      	ldrb	r3, [r3, #0]
 800c782:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800c784:	68bb      	ldr	r3, [r7, #8]
 800c786:	785b      	ldrb	r3, [r3, #1]
 800c788:	2b01      	cmp	r3, #1
 800c78a:	f040 815c 	bne.w	800ca46 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800c78e:	68bb      	ldr	r3, [r7, #8]
 800c790:	699b      	ldr	r3, [r3, #24]
 800c792:	2b00      	cmp	r3, #0
 800c794:	d132      	bne.n	800c7fc <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800c796:	69bb      	ldr	r3, [r7, #24]
 800c798:	015a      	lsls	r2, r3, #5
 800c79a:	69fb      	ldr	r3, [r7, #28]
 800c79c:	4413      	add	r3, r2
 800c79e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c7a2:	691b      	ldr	r3, [r3, #16]
 800c7a4:	69ba      	ldr	r2, [r7, #24]
 800c7a6:	0151      	lsls	r1, r2, #5
 800c7a8:	69fa      	ldr	r2, [r7, #28]
 800c7aa:	440a      	add	r2, r1
 800c7ac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c7b0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800c7b4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800c7b8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800c7ba:	69bb      	ldr	r3, [r7, #24]
 800c7bc:	015a      	lsls	r2, r3, #5
 800c7be:	69fb      	ldr	r3, [r7, #28]
 800c7c0:	4413      	add	r3, r2
 800c7c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c7c6:	691b      	ldr	r3, [r3, #16]
 800c7c8:	69ba      	ldr	r2, [r7, #24]
 800c7ca:	0151      	lsls	r1, r2, #5
 800c7cc:	69fa      	ldr	r2, [r7, #28]
 800c7ce:	440a      	add	r2, r1
 800c7d0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c7d4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800c7d8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800c7da:	69bb      	ldr	r3, [r7, #24]
 800c7dc:	015a      	lsls	r2, r3, #5
 800c7de:	69fb      	ldr	r3, [r7, #28]
 800c7e0:	4413      	add	r3, r2
 800c7e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c7e6:	691b      	ldr	r3, [r3, #16]
 800c7e8:	69ba      	ldr	r2, [r7, #24]
 800c7ea:	0151      	lsls	r1, r2, #5
 800c7ec:	69fa      	ldr	r2, [r7, #28]
 800c7ee:	440a      	add	r2, r1
 800c7f0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c7f4:	0cdb      	lsrs	r3, r3, #19
 800c7f6:	04db      	lsls	r3, r3, #19
 800c7f8:	6113      	str	r3, [r2, #16]
 800c7fa:	e074      	b.n	800c8e6 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800c7fc:	69bb      	ldr	r3, [r7, #24]
 800c7fe:	015a      	lsls	r2, r3, #5
 800c800:	69fb      	ldr	r3, [r7, #28]
 800c802:	4413      	add	r3, r2
 800c804:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c808:	691b      	ldr	r3, [r3, #16]
 800c80a:	69ba      	ldr	r2, [r7, #24]
 800c80c:	0151      	lsls	r1, r2, #5
 800c80e:	69fa      	ldr	r2, [r7, #28]
 800c810:	440a      	add	r2, r1
 800c812:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c816:	0cdb      	lsrs	r3, r3, #19
 800c818:	04db      	lsls	r3, r3, #19
 800c81a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800c81c:	69bb      	ldr	r3, [r7, #24]
 800c81e:	015a      	lsls	r2, r3, #5
 800c820:	69fb      	ldr	r3, [r7, #28]
 800c822:	4413      	add	r3, r2
 800c824:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c828:	691b      	ldr	r3, [r3, #16]
 800c82a:	69ba      	ldr	r2, [r7, #24]
 800c82c:	0151      	lsls	r1, r2, #5
 800c82e:	69fa      	ldr	r2, [r7, #28]
 800c830:	440a      	add	r2, r1
 800c832:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c836:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800c83a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800c83e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800c840:	69bb      	ldr	r3, [r7, #24]
 800c842:	015a      	lsls	r2, r3, #5
 800c844:	69fb      	ldr	r3, [r7, #28]
 800c846:	4413      	add	r3, r2
 800c848:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c84c:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800c84e:	68bb      	ldr	r3, [r7, #8]
 800c850:	6999      	ldr	r1, [r3, #24]
 800c852:	68bb      	ldr	r3, [r7, #8]
 800c854:	68db      	ldr	r3, [r3, #12]
 800c856:	440b      	add	r3, r1
 800c858:	1e59      	subs	r1, r3, #1
 800c85a:	68bb      	ldr	r3, [r7, #8]
 800c85c:	68db      	ldr	r3, [r3, #12]
 800c85e:	fbb1 f3f3 	udiv	r3, r1, r3
 800c862:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800c864:	4b9d      	ldr	r3, [pc, #628]	; (800cadc <USB_EPStartXfer+0x370>)
 800c866:	400b      	ands	r3, r1
 800c868:	69b9      	ldr	r1, [r7, #24]
 800c86a:	0148      	lsls	r0, r1, #5
 800c86c:	69f9      	ldr	r1, [r7, #28]
 800c86e:	4401      	add	r1, r0
 800c870:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800c874:	4313      	orrs	r3, r2
 800c876:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800c878:	69bb      	ldr	r3, [r7, #24]
 800c87a:	015a      	lsls	r2, r3, #5
 800c87c:	69fb      	ldr	r3, [r7, #28]
 800c87e:	4413      	add	r3, r2
 800c880:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c884:	691a      	ldr	r2, [r3, #16]
 800c886:	68bb      	ldr	r3, [r7, #8]
 800c888:	699b      	ldr	r3, [r3, #24]
 800c88a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800c88e:	69b9      	ldr	r1, [r7, #24]
 800c890:	0148      	lsls	r0, r1, #5
 800c892:	69f9      	ldr	r1, [r7, #28]
 800c894:	4401      	add	r1, r0
 800c896:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800c89a:	4313      	orrs	r3, r2
 800c89c:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800c89e:	68bb      	ldr	r3, [r7, #8]
 800c8a0:	791b      	ldrb	r3, [r3, #4]
 800c8a2:	2b01      	cmp	r3, #1
 800c8a4:	d11f      	bne.n	800c8e6 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800c8a6:	69bb      	ldr	r3, [r7, #24]
 800c8a8:	015a      	lsls	r2, r3, #5
 800c8aa:	69fb      	ldr	r3, [r7, #28]
 800c8ac:	4413      	add	r3, r2
 800c8ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c8b2:	691b      	ldr	r3, [r3, #16]
 800c8b4:	69ba      	ldr	r2, [r7, #24]
 800c8b6:	0151      	lsls	r1, r2, #5
 800c8b8:	69fa      	ldr	r2, [r7, #28]
 800c8ba:	440a      	add	r2, r1
 800c8bc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c8c0:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800c8c4:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800c8c6:	69bb      	ldr	r3, [r7, #24]
 800c8c8:	015a      	lsls	r2, r3, #5
 800c8ca:	69fb      	ldr	r3, [r7, #28]
 800c8cc:	4413      	add	r3, r2
 800c8ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c8d2:	691b      	ldr	r3, [r3, #16]
 800c8d4:	69ba      	ldr	r2, [r7, #24]
 800c8d6:	0151      	lsls	r1, r2, #5
 800c8d8:	69fa      	ldr	r2, [r7, #28]
 800c8da:	440a      	add	r2, r1
 800c8dc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c8e0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800c8e4:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800c8e6:	79fb      	ldrb	r3, [r7, #7]
 800c8e8:	2b01      	cmp	r3, #1
 800c8ea:	d14b      	bne.n	800c984 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800c8ec:	68bb      	ldr	r3, [r7, #8]
 800c8ee:	695b      	ldr	r3, [r3, #20]
 800c8f0:	2b00      	cmp	r3, #0
 800c8f2:	d009      	beq.n	800c908 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800c8f4:	69bb      	ldr	r3, [r7, #24]
 800c8f6:	015a      	lsls	r2, r3, #5
 800c8f8:	69fb      	ldr	r3, [r7, #28]
 800c8fa:	4413      	add	r3, r2
 800c8fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c900:	461a      	mov	r2, r3
 800c902:	68bb      	ldr	r3, [r7, #8]
 800c904:	695b      	ldr	r3, [r3, #20]
 800c906:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800c908:	68bb      	ldr	r3, [r7, #8]
 800c90a:	791b      	ldrb	r3, [r3, #4]
 800c90c:	2b01      	cmp	r3, #1
 800c90e:	d128      	bne.n	800c962 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800c910:	69fb      	ldr	r3, [r7, #28]
 800c912:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c916:	689b      	ldr	r3, [r3, #8]
 800c918:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c91c:	2b00      	cmp	r3, #0
 800c91e:	d110      	bne.n	800c942 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800c920:	69bb      	ldr	r3, [r7, #24]
 800c922:	015a      	lsls	r2, r3, #5
 800c924:	69fb      	ldr	r3, [r7, #28]
 800c926:	4413      	add	r3, r2
 800c928:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c92c:	681b      	ldr	r3, [r3, #0]
 800c92e:	69ba      	ldr	r2, [r7, #24]
 800c930:	0151      	lsls	r1, r2, #5
 800c932:	69fa      	ldr	r2, [r7, #28]
 800c934:	440a      	add	r2, r1
 800c936:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c93a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800c93e:	6013      	str	r3, [r2, #0]
 800c940:	e00f      	b.n	800c962 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800c942:	69bb      	ldr	r3, [r7, #24]
 800c944:	015a      	lsls	r2, r3, #5
 800c946:	69fb      	ldr	r3, [r7, #28]
 800c948:	4413      	add	r3, r2
 800c94a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c94e:	681b      	ldr	r3, [r3, #0]
 800c950:	69ba      	ldr	r2, [r7, #24]
 800c952:	0151      	lsls	r1, r2, #5
 800c954:	69fa      	ldr	r2, [r7, #28]
 800c956:	440a      	add	r2, r1
 800c958:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c95c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c960:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800c962:	69bb      	ldr	r3, [r7, #24]
 800c964:	015a      	lsls	r2, r3, #5
 800c966:	69fb      	ldr	r3, [r7, #28]
 800c968:	4413      	add	r3, r2
 800c96a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c96e:	681b      	ldr	r3, [r3, #0]
 800c970:	69ba      	ldr	r2, [r7, #24]
 800c972:	0151      	lsls	r1, r2, #5
 800c974:	69fa      	ldr	r2, [r7, #28]
 800c976:	440a      	add	r2, r1
 800c978:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c97c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800c980:	6013      	str	r3, [r2, #0]
 800c982:	e133      	b.n	800cbec <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800c984:	69bb      	ldr	r3, [r7, #24]
 800c986:	015a      	lsls	r2, r3, #5
 800c988:	69fb      	ldr	r3, [r7, #28]
 800c98a:	4413      	add	r3, r2
 800c98c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c990:	681b      	ldr	r3, [r3, #0]
 800c992:	69ba      	ldr	r2, [r7, #24]
 800c994:	0151      	lsls	r1, r2, #5
 800c996:	69fa      	ldr	r2, [r7, #28]
 800c998:	440a      	add	r2, r1
 800c99a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c99e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800c9a2:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800c9a4:	68bb      	ldr	r3, [r7, #8]
 800c9a6:	791b      	ldrb	r3, [r3, #4]
 800c9a8:	2b01      	cmp	r3, #1
 800c9aa:	d015      	beq.n	800c9d8 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800c9ac:	68bb      	ldr	r3, [r7, #8]
 800c9ae:	699b      	ldr	r3, [r3, #24]
 800c9b0:	2b00      	cmp	r3, #0
 800c9b2:	f000 811b 	beq.w	800cbec <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800c9b6:	69fb      	ldr	r3, [r7, #28]
 800c9b8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c9bc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c9be:	68bb      	ldr	r3, [r7, #8]
 800c9c0:	781b      	ldrb	r3, [r3, #0]
 800c9c2:	f003 030f 	and.w	r3, r3, #15
 800c9c6:	2101      	movs	r1, #1
 800c9c8:	fa01 f303 	lsl.w	r3, r1, r3
 800c9cc:	69f9      	ldr	r1, [r7, #28]
 800c9ce:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c9d2:	4313      	orrs	r3, r2
 800c9d4:	634b      	str	r3, [r1, #52]	; 0x34
 800c9d6:	e109      	b.n	800cbec <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800c9d8:	69fb      	ldr	r3, [r7, #28]
 800c9da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c9de:	689b      	ldr	r3, [r3, #8]
 800c9e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c9e4:	2b00      	cmp	r3, #0
 800c9e6:	d110      	bne.n	800ca0a <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800c9e8:	69bb      	ldr	r3, [r7, #24]
 800c9ea:	015a      	lsls	r2, r3, #5
 800c9ec:	69fb      	ldr	r3, [r7, #28]
 800c9ee:	4413      	add	r3, r2
 800c9f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c9f4:	681b      	ldr	r3, [r3, #0]
 800c9f6:	69ba      	ldr	r2, [r7, #24]
 800c9f8:	0151      	lsls	r1, r2, #5
 800c9fa:	69fa      	ldr	r2, [r7, #28]
 800c9fc:	440a      	add	r2, r1
 800c9fe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ca02:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800ca06:	6013      	str	r3, [r2, #0]
 800ca08:	e00f      	b.n	800ca2a <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800ca0a:	69bb      	ldr	r3, [r7, #24]
 800ca0c:	015a      	lsls	r2, r3, #5
 800ca0e:	69fb      	ldr	r3, [r7, #28]
 800ca10:	4413      	add	r3, r2
 800ca12:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ca16:	681b      	ldr	r3, [r3, #0]
 800ca18:	69ba      	ldr	r2, [r7, #24]
 800ca1a:	0151      	lsls	r1, r2, #5
 800ca1c:	69fa      	ldr	r2, [r7, #28]
 800ca1e:	440a      	add	r2, r1
 800ca20:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ca24:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ca28:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800ca2a:	68bb      	ldr	r3, [r7, #8]
 800ca2c:	6919      	ldr	r1, [r3, #16]
 800ca2e:	68bb      	ldr	r3, [r7, #8]
 800ca30:	781a      	ldrb	r2, [r3, #0]
 800ca32:	68bb      	ldr	r3, [r7, #8]
 800ca34:	699b      	ldr	r3, [r3, #24]
 800ca36:	b298      	uxth	r0, r3
 800ca38:	79fb      	ldrb	r3, [r7, #7]
 800ca3a:	9300      	str	r3, [sp, #0]
 800ca3c:	4603      	mov	r3, r0
 800ca3e:	68f8      	ldr	r0, [r7, #12]
 800ca40:	f000 fade 	bl	800d000 <USB_WritePacket>
 800ca44:	e0d2      	b.n	800cbec <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800ca46:	69bb      	ldr	r3, [r7, #24]
 800ca48:	015a      	lsls	r2, r3, #5
 800ca4a:	69fb      	ldr	r3, [r7, #28]
 800ca4c:	4413      	add	r3, r2
 800ca4e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ca52:	691b      	ldr	r3, [r3, #16]
 800ca54:	69ba      	ldr	r2, [r7, #24]
 800ca56:	0151      	lsls	r1, r2, #5
 800ca58:	69fa      	ldr	r2, [r7, #28]
 800ca5a:	440a      	add	r2, r1
 800ca5c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ca60:	0cdb      	lsrs	r3, r3, #19
 800ca62:	04db      	lsls	r3, r3, #19
 800ca64:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800ca66:	69bb      	ldr	r3, [r7, #24]
 800ca68:	015a      	lsls	r2, r3, #5
 800ca6a:	69fb      	ldr	r3, [r7, #28]
 800ca6c:	4413      	add	r3, r2
 800ca6e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ca72:	691b      	ldr	r3, [r3, #16]
 800ca74:	69ba      	ldr	r2, [r7, #24]
 800ca76:	0151      	lsls	r1, r2, #5
 800ca78:	69fa      	ldr	r2, [r7, #28]
 800ca7a:	440a      	add	r2, r1
 800ca7c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ca80:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800ca84:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800ca88:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800ca8a:	68bb      	ldr	r3, [r7, #8]
 800ca8c:	699b      	ldr	r3, [r3, #24]
 800ca8e:	2b00      	cmp	r3, #0
 800ca90:	d126      	bne.n	800cae0 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800ca92:	69bb      	ldr	r3, [r7, #24]
 800ca94:	015a      	lsls	r2, r3, #5
 800ca96:	69fb      	ldr	r3, [r7, #28]
 800ca98:	4413      	add	r3, r2
 800ca9a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ca9e:	691a      	ldr	r2, [r3, #16]
 800caa0:	68bb      	ldr	r3, [r7, #8]
 800caa2:	68db      	ldr	r3, [r3, #12]
 800caa4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800caa8:	69b9      	ldr	r1, [r7, #24]
 800caaa:	0148      	lsls	r0, r1, #5
 800caac:	69f9      	ldr	r1, [r7, #28]
 800caae:	4401      	add	r1, r0
 800cab0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800cab4:	4313      	orrs	r3, r2
 800cab6:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800cab8:	69bb      	ldr	r3, [r7, #24]
 800caba:	015a      	lsls	r2, r3, #5
 800cabc:	69fb      	ldr	r3, [r7, #28]
 800cabe:	4413      	add	r3, r2
 800cac0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cac4:	691b      	ldr	r3, [r3, #16]
 800cac6:	69ba      	ldr	r2, [r7, #24]
 800cac8:	0151      	lsls	r1, r2, #5
 800caca:	69fa      	ldr	r2, [r7, #28]
 800cacc:	440a      	add	r2, r1
 800cace:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800cad2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800cad6:	6113      	str	r3, [r2, #16]
 800cad8:	e03a      	b.n	800cb50 <USB_EPStartXfer+0x3e4>
 800cada:	bf00      	nop
 800cadc:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800cae0:	68bb      	ldr	r3, [r7, #8]
 800cae2:	699a      	ldr	r2, [r3, #24]
 800cae4:	68bb      	ldr	r3, [r7, #8]
 800cae6:	68db      	ldr	r3, [r3, #12]
 800cae8:	4413      	add	r3, r2
 800caea:	1e5a      	subs	r2, r3, #1
 800caec:	68bb      	ldr	r3, [r7, #8]
 800caee:	68db      	ldr	r3, [r3, #12]
 800caf0:	fbb2 f3f3 	udiv	r3, r2, r3
 800caf4:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 800caf6:	68bb      	ldr	r3, [r7, #8]
 800caf8:	68db      	ldr	r3, [r3, #12]
 800cafa:	8afa      	ldrh	r2, [r7, #22]
 800cafc:	fb03 f202 	mul.w	r2, r3, r2
 800cb00:	68bb      	ldr	r3, [r7, #8]
 800cb02:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800cb04:	69bb      	ldr	r3, [r7, #24]
 800cb06:	015a      	lsls	r2, r3, #5
 800cb08:	69fb      	ldr	r3, [r7, #28]
 800cb0a:	4413      	add	r3, r2
 800cb0c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cb10:	691a      	ldr	r2, [r3, #16]
 800cb12:	8afb      	ldrh	r3, [r7, #22]
 800cb14:	04d9      	lsls	r1, r3, #19
 800cb16:	4b38      	ldr	r3, [pc, #224]	; (800cbf8 <USB_EPStartXfer+0x48c>)
 800cb18:	400b      	ands	r3, r1
 800cb1a:	69b9      	ldr	r1, [r7, #24]
 800cb1c:	0148      	lsls	r0, r1, #5
 800cb1e:	69f9      	ldr	r1, [r7, #28]
 800cb20:	4401      	add	r1, r0
 800cb22:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800cb26:	4313      	orrs	r3, r2
 800cb28:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800cb2a:	69bb      	ldr	r3, [r7, #24]
 800cb2c:	015a      	lsls	r2, r3, #5
 800cb2e:	69fb      	ldr	r3, [r7, #28]
 800cb30:	4413      	add	r3, r2
 800cb32:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cb36:	691a      	ldr	r2, [r3, #16]
 800cb38:	68bb      	ldr	r3, [r7, #8]
 800cb3a:	69db      	ldr	r3, [r3, #28]
 800cb3c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800cb40:	69b9      	ldr	r1, [r7, #24]
 800cb42:	0148      	lsls	r0, r1, #5
 800cb44:	69f9      	ldr	r1, [r7, #28]
 800cb46:	4401      	add	r1, r0
 800cb48:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800cb4c:	4313      	orrs	r3, r2
 800cb4e:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800cb50:	79fb      	ldrb	r3, [r7, #7]
 800cb52:	2b01      	cmp	r3, #1
 800cb54:	d10d      	bne.n	800cb72 <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800cb56:	68bb      	ldr	r3, [r7, #8]
 800cb58:	691b      	ldr	r3, [r3, #16]
 800cb5a:	2b00      	cmp	r3, #0
 800cb5c:	d009      	beq.n	800cb72 <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800cb5e:	68bb      	ldr	r3, [r7, #8]
 800cb60:	6919      	ldr	r1, [r3, #16]
 800cb62:	69bb      	ldr	r3, [r7, #24]
 800cb64:	015a      	lsls	r2, r3, #5
 800cb66:	69fb      	ldr	r3, [r7, #28]
 800cb68:	4413      	add	r3, r2
 800cb6a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cb6e:	460a      	mov	r2, r1
 800cb70:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800cb72:	68bb      	ldr	r3, [r7, #8]
 800cb74:	791b      	ldrb	r3, [r3, #4]
 800cb76:	2b01      	cmp	r3, #1
 800cb78:	d128      	bne.n	800cbcc <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800cb7a:	69fb      	ldr	r3, [r7, #28]
 800cb7c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cb80:	689b      	ldr	r3, [r3, #8]
 800cb82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cb86:	2b00      	cmp	r3, #0
 800cb88:	d110      	bne.n	800cbac <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800cb8a:	69bb      	ldr	r3, [r7, #24]
 800cb8c:	015a      	lsls	r2, r3, #5
 800cb8e:	69fb      	ldr	r3, [r7, #28]
 800cb90:	4413      	add	r3, r2
 800cb92:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cb96:	681b      	ldr	r3, [r3, #0]
 800cb98:	69ba      	ldr	r2, [r7, #24]
 800cb9a:	0151      	lsls	r1, r2, #5
 800cb9c:	69fa      	ldr	r2, [r7, #28]
 800cb9e:	440a      	add	r2, r1
 800cba0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800cba4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800cba8:	6013      	str	r3, [r2, #0]
 800cbaa:	e00f      	b.n	800cbcc <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800cbac:	69bb      	ldr	r3, [r7, #24]
 800cbae:	015a      	lsls	r2, r3, #5
 800cbb0:	69fb      	ldr	r3, [r7, #28]
 800cbb2:	4413      	add	r3, r2
 800cbb4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cbb8:	681b      	ldr	r3, [r3, #0]
 800cbba:	69ba      	ldr	r2, [r7, #24]
 800cbbc:	0151      	lsls	r1, r2, #5
 800cbbe:	69fa      	ldr	r2, [r7, #28]
 800cbc0:	440a      	add	r2, r1
 800cbc2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800cbc6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800cbca:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800cbcc:	69bb      	ldr	r3, [r7, #24]
 800cbce:	015a      	lsls	r2, r3, #5
 800cbd0:	69fb      	ldr	r3, [r7, #28]
 800cbd2:	4413      	add	r3, r2
 800cbd4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cbd8:	681b      	ldr	r3, [r3, #0]
 800cbda:	69ba      	ldr	r2, [r7, #24]
 800cbdc:	0151      	lsls	r1, r2, #5
 800cbde:	69fa      	ldr	r2, [r7, #28]
 800cbe0:	440a      	add	r2, r1
 800cbe2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800cbe6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800cbea:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800cbec:	2300      	movs	r3, #0
}
 800cbee:	4618      	mov	r0, r3
 800cbf0:	3720      	adds	r7, #32
 800cbf2:	46bd      	mov	sp, r7
 800cbf4:	bd80      	pop	{r7, pc}
 800cbf6:	bf00      	nop
 800cbf8:	1ff80000 	.word	0x1ff80000

0800cbfc <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800cbfc:	b480      	push	{r7}
 800cbfe:	b087      	sub	sp, #28
 800cc00:	af00      	add	r7, sp, #0
 800cc02:	60f8      	str	r0, [r7, #12]
 800cc04:	60b9      	str	r1, [r7, #8]
 800cc06:	4613      	mov	r3, r2
 800cc08:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cc0a:	68fb      	ldr	r3, [r7, #12]
 800cc0c:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800cc0e:	68bb      	ldr	r3, [r7, #8]
 800cc10:	781b      	ldrb	r3, [r3, #0]
 800cc12:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800cc14:	68bb      	ldr	r3, [r7, #8]
 800cc16:	785b      	ldrb	r3, [r3, #1]
 800cc18:	2b01      	cmp	r3, #1
 800cc1a:	f040 80ce 	bne.w	800cdba <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800cc1e:	68bb      	ldr	r3, [r7, #8]
 800cc20:	699b      	ldr	r3, [r3, #24]
 800cc22:	2b00      	cmp	r3, #0
 800cc24:	d132      	bne.n	800cc8c <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800cc26:	693b      	ldr	r3, [r7, #16]
 800cc28:	015a      	lsls	r2, r3, #5
 800cc2a:	697b      	ldr	r3, [r7, #20]
 800cc2c:	4413      	add	r3, r2
 800cc2e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cc32:	691b      	ldr	r3, [r3, #16]
 800cc34:	693a      	ldr	r2, [r7, #16]
 800cc36:	0151      	lsls	r1, r2, #5
 800cc38:	697a      	ldr	r2, [r7, #20]
 800cc3a:	440a      	add	r2, r1
 800cc3c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800cc40:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800cc44:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800cc48:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800cc4a:	693b      	ldr	r3, [r7, #16]
 800cc4c:	015a      	lsls	r2, r3, #5
 800cc4e:	697b      	ldr	r3, [r7, #20]
 800cc50:	4413      	add	r3, r2
 800cc52:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cc56:	691b      	ldr	r3, [r3, #16]
 800cc58:	693a      	ldr	r2, [r7, #16]
 800cc5a:	0151      	lsls	r1, r2, #5
 800cc5c:	697a      	ldr	r2, [r7, #20]
 800cc5e:	440a      	add	r2, r1
 800cc60:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800cc64:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800cc68:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800cc6a:	693b      	ldr	r3, [r7, #16]
 800cc6c:	015a      	lsls	r2, r3, #5
 800cc6e:	697b      	ldr	r3, [r7, #20]
 800cc70:	4413      	add	r3, r2
 800cc72:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cc76:	691b      	ldr	r3, [r3, #16]
 800cc78:	693a      	ldr	r2, [r7, #16]
 800cc7a:	0151      	lsls	r1, r2, #5
 800cc7c:	697a      	ldr	r2, [r7, #20]
 800cc7e:	440a      	add	r2, r1
 800cc80:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800cc84:	0cdb      	lsrs	r3, r3, #19
 800cc86:	04db      	lsls	r3, r3, #19
 800cc88:	6113      	str	r3, [r2, #16]
 800cc8a:	e04e      	b.n	800cd2a <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800cc8c:	693b      	ldr	r3, [r7, #16]
 800cc8e:	015a      	lsls	r2, r3, #5
 800cc90:	697b      	ldr	r3, [r7, #20]
 800cc92:	4413      	add	r3, r2
 800cc94:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cc98:	691b      	ldr	r3, [r3, #16]
 800cc9a:	693a      	ldr	r2, [r7, #16]
 800cc9c:	0151      	lsls	r1, r2, #5
 800cc9e:	697a      	ldr	r2, [r7, #20]
 800cca0:	440a      	add	r2, r1
 800cca2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800cca6:	0cdb      	lsrs	r3, r3, #19
 800cca8:	04db      	lsls	r3, r3, #19
 800ccaa:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800ccac:	693b      	ldr	r3, [r7, #16]
 800ccae:	015a      	lsls	r2, r3, #5
 800ccb0:	697b      	ldr	r3, [r7, #20]
 800ccb2:	4413      	add	r3, r2
 800ccb4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ccb8:	691b      	ldr	r3, [r3, #16]
 800ccba:	693a      	ldr	r2, [r7, #16]
 800ccbc:	0151      	lsls	r1, r2, #5
 800ccbe:	697a      	ldr	r2, [r7, #20]
 800ccc0:	440a      	add	r2, r1
 800ccc2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ccc6:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800ccca:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800ccce:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 800ccd0:	68bb      	ldr	r3, [r7, #8]
 800ccd2:	699a      	ldr	r2, [r3, #24]
 800ccd4:	68bb      	ldr	r3, [r7, #8]
 800ccd6:	68db      	ldr	r3, [r3, #12]
 800ccd8:	429a      	cmp	r2, r3
 800ccda:	d903      	bls.n	800cce4 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 800ccdc:	68bb      	ldr	r3, [r7, #8]
 800ccde:	68da      	ldr	r2, [r3, #12]
 800cce0:	68bb      	ldr	r3, [r7, #8]
 800cce2:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800cce4:	693b      	ldr	r3, [r7, #16]
 800cce6:	015a      	lsls	r2, r3, #5
 800cce8:	697b      	ldr	r3, [r7, #20]
 800ccea:	4413      	add	r3, r2
 800ccec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ccf0:	691b      	ldr	r3, [r3, #16]
 800ccf2:	693a      	ldr	r2, [r7, #16]
 800ccf4:	0151      	lsls	r1, r2, #5
 800ccf6:	697a      	ldr	r2, [r7, #20]
 800ccf8:	440a      	add	r2, r1
 800ccfa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ccfe:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800cd02:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800cd04:	693b      	ldr	r3, [r7, #16]
 800cd06:	015a      	lsls	r2, r3, #5
 800cd08:	697b      	ldr	r3, [r7, #20]
 800cd0a:	4413      	add	r3, r2
 800cd0c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cd10:	691a      	ldr	r2, [r3, #16]
 800cd12:	68bb      	ldr	r3, [r7, #8]
 800cd14:	699b      	ldr	r3, [r3, #24]
 800cd16:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800cd1a:	6939      	ldr	r1, [r7, #16]
 800cd1c:	0148      	lsls	r0, r1, #5
 800cd1e:	6979      	ldr	r1, [r7, #20]
 800cd20:	4401      	add	r1, r0
 800cd22:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800cd26:	4313      	orrs	r3, r2
 800cd28:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800cd2a:	79fb      	ldrb	r3, [r7, #7]
 800cd2c:	2b01      	cmp	r3, #1
 800cd2e:	d11e      	bne.n	800cd6e <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800cd30:	68bb      	ldr	r3, [r7, #8]
 800cd32:	695b      	ldr	r3, [r3, #20]
 800cd34:	2b00      	cmp	r3, #0
 800cd36:	d009      	beq.n	800cd4c <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800cd38:	693b      	ldr	r3, [r7, #16]
 800cd3a:	015a      	lsls	r2, r3, #5
 800cd3c:	697b      	ldr	r3, [r7, #20]
 800cd3e:	4413      	add	r3, r2
 800cd40:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cd44:	461a      	mov	r2, r3
 800cd46:	68bb      	ldr	r3, [r7, #8]
 800cd48:	695b      	ldr	r3, [r3, #20]
 800cd4a:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800cd4c:	693b      	ldr	r3, [r7, #16]
 800cd4e:	015a      	lsls	r2, r3, #5
 800cd50:	697b      	ldr	r3, [r7, #20]
 800cd52:	4413      	add	r3, r2
 800cd54:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cd58:	681b      	ldr	r3, [r3, #0]
 800cd5a:	693a      	ldr	r2, [r7, #16]
 800cd5c:	0151      	lsls	r1, r2, #5
 800cd5e:	697a      	ldr	r2, [r7, #20]
 800cd60:	440a      	add	r2, r1
 800cd62:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800cd66:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800cd6a:	6013      	str	r3, [r2, #0]
 800cd6c:	e097      	b.n	800ce9e <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800cd6e:	693b      	ldr	r3, [r7, #16]
 800cd70:	015a      	lsls	r2, r3, #5
 800cd72:	697b      	ldr	r3, [r7, #20]
 800cd74:	4413      	add	r3, r2
 800cd76:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cd7a:	681b      	ldr	r3, [r3, #0]
 800cd7c:	693a      	ldr	r2, [r7, #16]
 800cd7e:	0151      	lsls	r1, r2, #5
 800cd80:	697a      	ldr	r2, [r7, #20]
 800cd82:	440a      	add	r2, r1
 800cd84:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800cd88:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800cd8c:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800cd8e:	68bb      	ldr	r3, [r7, #8]
 800cd90:	699b      	ldr	r3, [r3, #24]
 800cd92:	2b00      	cmp	r3, #0
 800cd94:	f000 8083 	beq.w	800ce9e <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800cd98:	697b      	ldr	r3, [r7, #20]
 800cd9a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cd9e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800cda0:	68bb      	ldr	r3, [r7, #8]
 800cda2:	781b      	ldrb	r3, [r3, #0]
 800cda4:	f003 030f 	and.w	r3, r3, #15
 800cda8:	2101      	movs	r1, #1
 800cdaa:	fa01 f303 	lsl.w	r3, r1, r3
 800cdae:	6979      	ldr	r1, [r7, #20]
 800cdb0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800cdb4:	4313      	orrs	r3, r2
 800cdb6:	634b      	str	r3, [r1, #52]	; 0x34
 800cdb8:	e071      	b.n	800ce9e <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800cdba:	693b      	ldr	r3, [r7, #16]
 800cdbc:	015a      	lsls	r2, r3, #5
 800cdbe:	697b      	ldr	r3, [r7, #20]
 800cdc0:	4413      	add	r3, r2
 800cdc2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cdc6:	691b      	ldr	r3, [r3, #16]
 800cdc8:	693a      	ldr	r2, [r7, #16]
 800cdca:	0151      	lsls	r1, r2, #5
 800cdcc:	697a      	ldr	r2, [r7, #20]
 800cdce:	440a      	add	r2, r1
 800cdd0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800cdd4:	0cdb      	lsrs	r3, r3, #19
 800cdd6:	04db      	lsls	r3, r3, #19
 800cdd8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800cdda:	693b      	ldr	r3, [r7, #16]
 800cddc:	015a      	lsls	r2, r3, #5
 800cdde:	697b      	ldr	r3, [r7, #20]
 800cde0:	4413      	add	r3, r2
 800cde2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cde6:	691b      	ldr	r3, [r3, #16]
 800cde8:	693a      	ldr	r2, [r7, #16]
 800cdea:	0151      	lsls	r1, r2, #5
 800cdec:	697a      	ldr	r2, [r7, #20]
 800cdee:	440a      	add	r2, r1
 800cdf0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800cdf4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800cdf8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800cdfc:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 800cdfe:	68bb      	ldr	r3, [r7, #8]
 800ce00:	699b      	ldr	r3, [r3, #24]
 800ce02:	2b00      	cmp	r3, #0
 800ce04:	d003      	beq.n	800ce0e <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 800ce06:	68bb      	ldr	r3, [r7, #8]
 800ce08:	68da      	ldr	r2, [r3, #12]
 800ce0a:	68bb      	ldr	r3, [r7, #8]
 800ce0c:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 800ce0e:	68bb      	ldr	r3, [r7, #8]
 800ce10:	68da      	ldr	r2, [r3, #12]
 800ce12:	68bb      	ldr	r3, [r7, #8]
 800ce14:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800ce16:	693b      	ldr	r3, [r7, #16]
 800ce18:	015a      	lsls	r2, r3, #5
 800ce1a:	697b      	ldr	r3, [r7, #20]
 800ce1c:	4413      	add	r3, r2
 800ce1e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ce22:	691b      	ldr	r3, [r3, #16]
 800ce24:	693a      	ldr	r2, [r7, #16]
 800ce26:	0151      	lsls	r1, r2, #5
 800ce28:	697a      	ldr	r2, [r7, #20]
 800ce2a:	440a      	add	r2, r1
 800ce2c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ce30:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800ce34:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800ce36:	693b      	ldr	r3, [r7, #16]
 800ce38:	015a      	lsls	r2, r3, #5
 800ce3a:	697b      	ldr	r3, [r7, #20]
 800ce3c:	4413      	add	r3, r2
 800ce3e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ce42:	691a      	ldr	r2, [r3, #16]
 800ce44:	68bb      	ldr	r3, [r7, #8]
 800ce46:	69db      	ldr	r3, [r3, #28]
 800ce48:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800ce4c:	6939      	ldr	r1, [r7, #16]
 800ce4e:	0148      	lsls	r0, r1, #5
 800ce50:	6979      	ldr	r1, [r7, #20]
 800ce52:	4401      	add	r1, r0
 800ce54:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800ce58:	4313      	orrs	r3, r2
 800ce5a:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800ce5c:	79fb      	ldrb	r3, [r7, #7]
 800ce5e:	2b01      	cmp	r3, #1
 800ce60:	d10d      	bne.n	800ce7e <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800ce62:	68bb      	ldr	r3, [r7, #8]
 800ce64:	691b      	ldr	r3, [r3, #16]
 800ce66:	2b00      	cmp	r3, #0
 800ce68:	d009      	beq.n	800ce7e <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800ce6a:	68bb      	ldr	r3, [r7, #8]
 800ce6c:	6919      	ldr	r1, [r3, #16]
 800ce6e:	693b      	ldr	r3, [r7, #16]
 800ce70:	015a      	lsls	r2, r3, #5
 800ce72:	697b      	ldr	r3, [r7, #20]
 800ce74:	4413      	add	r3, r2
 800ce76:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ce7a:	460a      	mov	r2, r1
 800ce7c:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800ce7e:	693b      	ldr	r3, [r7, #16]
 800ce80:	015a      	lsls	r2, r3, #5
 800ce82:	697b      	ldr	r3, [r7, #20]
 800ce84:	4413      	add	r3, r2
 800ce86:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ce8a:	681b      	ldr	r3, [r3, #0]
 800ce8c:	693a      	ldr	r2, [r7, #16]
 800ce8e:	0151      	lsls	r1, r2, #5
 800ce90:	697a      	ldr	r2, [r7, #20]
 800ce92:	440a      	add	r2, r1
 800ce94:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ce98:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800ce9c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800ce9e:	2300      	movs	r3, #0
}
 800cea0:	4618      	mov	r0, r3
 800cea2:	371c      	adds	r7, #28
 800cea4:	46bd      	mov	sp, r7
 800cea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ceaa:	4770      	bx	lr

0800ceac <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800ceac:	b480      	push	{r7}
 800ceae:	b087      	sub	sp, #28
 800ceb0:	af00      	add	r7, sp, #0
 800ceb2:	6078      	str	r0, [r7, #4]
 800ceb4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800ceb6:	2300      	movs	r3, #0
 800ceb8:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800ceba:	2300      	movs	r3, #0
 800cebc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cebe:	687b      	ldr	r3, [r7, #4]
 800cec0:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800cec2:	683b      	ldr	r3, [r7, #0]
 800cec4:	785b      	ldrb	r3, [r3, #1]
 800cec6:	2b01      	cmp	r3, #1
 800cec8:	d14a      	bne.n	800cf60 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800ceca:	683b      	ldr	r3, [r7, #0]
 800cecc:	781b      	ldrb	r3, [r3, #0]
 800cece:	015a      	lsls	r2, r3, #5
 800ced0:	693b      	ldr	r3, [r7, #16]
 800ced2:	4413      	add	r3, r2
 800ced4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ced8:	681b      	ldr	r3, [r3, #0]
 800ceda:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800cede:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800cee2:	f040 8086 	bne.w	800cff2 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800cee6:	683b      	ldr	r3, [r7, #0]
 800cee8:	781b      	ldrb	r3, [r3, #0]
 800ceea:	015a      	lsls	r2, r3, #5
 800ceec:	693b      	ldr	r3, [r7, #16]
 800ceee:	4413      	add	r3, r2
 800cef0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cef4:	681b      	ldr	r3, [r3, #0]
 800cef6:	683a      	ldr	r2, [r7, #0]
 800cef8:	7812      	ldrb	r2, [r2, #0]
 800cefa:	0151      	lsls	r1, r2, #5
 800cefc:	693a      	ldr	r2, [r7, #16]
 800cefe:	440a      	add	r2, r1
 800cf00:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800cf04:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800cf08:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800cf0a:	683b      	ldr	r3, [r7, #0]
 800cf0c:	781b      	ldrb	r3, [r3, #0]
 800cf0e:	015a      	lsls	r2, r3, #5
 800cf10:	693b      	ldr	r3, [r7, #16]
 800cf12:	4413      	add	r3, r2
 800cf14:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cf18:	681b      	ldr	r3, [r3, #0]
 800cf1a:	683a      	ldr	r2, [r7, #0]
 800cf1c:	7812      	ldrb	r2, [r2, #0]
 800cf1e:	0151      	lsls	r1, r2, #5
 800cf20:	693a      	ldr	r2, [r7, #16]
 800cf22:	440a      	add	r2, r1
 800cf24:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800cf28:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800cf2c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800cf2e:	68fb      	ldr	r3, [r7, #12]
 800cf30:	3301      	adds	r3, #1
 800cf32:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800cf34:	68fb      	ldr	r3, [r7, #12]
 800cf36:	f242 7210 	movw	r2, #10000	; 0x2710
 800cf3a:	4293      	cmp	r3, r2
 800cf3c:	d902      	bls.n	800cf44 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800cf3e:	2301      	movs	r3, #1
 800cf40:	75fb      	strb	r3, [r7, #23]
          break;
 800cf42:	e056      	b.n	800cff2 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800cf44:	683b      	ldr	r3, [r7, #0]
 800cf46:	781b      	ldrb	r3, [r3, #0]
 800cf48:	015a      	lsls	r2, r3, #5
 800cf4a:	693b      	ldr	r3, [r7, #16]
 800cf4c:	4413      	add	r3, r2
 800cf4e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cf52:	681b      	ldr	r3, [r3, #0]
 800cf54:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800cf58:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800cf5c:	d0e7      	beq.n	800cf2e <USB_EPStopXfer+0x82>
 800cf5e:	e048      	b.n	800cff2 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800cf60:	683b      	ldr	r3, [r7, #0]
 800cf62:	781b      	ldrb	r3, [r3, #0]
 800cf64:	015a      	lsls	r2, r3, #5
 800cf66:	693b      	ldr	r3, [r7, #16]
 800cf68:	4413      	add	r3, r2
 800cf6a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cf6e:	681b      	ldr	r3, [r3, #0]
 800cf70:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800cf74:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800cf78:	d13b      	bne.n	800cff2 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800cf7a:	683b      	ldr	r3, [r7, #0]
 800cf7c:	781b      	ldrb	r3, [r3, #0]
 800cf7e:	015a      	lsls	r2, r3, #5
 800cf80:	693b      	ldr	r3, [r7, #16]
 800cf82:	4413      	add	r3, r2
 800cf84:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cf88:	681b      	ldr	r3, [r3, #0]
 800cf8a:	683a      	ldr	r2, [r7, #0]
 800cf8c:	7812      	ldrb	r2, [r2, #0]
 800cf8e:	0151      	lsls	r1, r2, #5
 800cf90:	693a      	ldr	r2, [r7, #16]
 800cf92:	440a      	add	r2, r1
 800cf94:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800cf98:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800cf9c:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800cf9e:	683b      	ldr	r3, [r7, #0]
 800cfa0:	781b      	ldrb	r3, [r3, #0]
 800cfa2:	015a      	lsls	r2, r3, #5
 800cfa4:	693b      	ldr	r3, [r7, #16]
 800cfa6:	4413      	add	r3, r2
 800cfa8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cfac:	681b      	ldr	r3, [r3, #0]
 800cfae:	683a      	ldr	r2, [r7, #0]
 800cfb0:	7812      	ldrb	r2, [r2, #0]
 800cfb2:	0151      	lsls	r1, r2, #5
 800cfb4:	693a      	ldr	r2, [r7, #16]
 800cfb6:	440a      	add	r2, r1
 800cfb8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800cfbc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800cfc0:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800cfc2:	68fb      	ldr	r3, [r7, #12]
 800cfc4:	3301      	adds	r3, #1
 800cfc6:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800cfc8:	68fb      	ldr	r3, [r7, #12]
 800cfca:	f242 7210 	movw	r2, #10000	; 0x2710
 800cfce:	4293      	cmp	r3, r2
 800cfd0:	d902      	bls.n	800cfd8 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800cfd2:	2301      	movs	r3, #1
 800cfd4:	75fb      	strb	r3, [r7, #23]
          break;
 800cfd6:	e00c      	b.n	800cff2 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800cfd8:	683b      	ldr	r3, [r7, #0]
 800cfda:	781b      	ldrb	r3, [r3, #0]
 800cfdc:	015a      	lsls	r2, r3, #5
 800cfde:	693b      	ldr	r3, [r7, #16]
 800cfe0:	4413      	add	r3, r2
 800cfe2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cfe6:	681b      	ldr	r3, [r3, #0]
 800cfe8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800cfec:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800cff0:	d0e7      	beq.n	800cfc2 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800cff2:	7dfb      	ldrb	r3, [r7, #23]
}
 800cff4:	4618      	mov	r0, r3
 800cff6:	371c      	adds	r7, #28
 800cff8:	46bd      	mov	sp, r7
 800cffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cffe:	4770      	bx	lr

0800d000 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800d000:	b480      	push	{r7}
 800d002:	b089      	sub	sp, #36	; 0x24
 800d004:	af00      	add	r7, sp, #0
 800d006:	60f8      	str	r0, [r7, #12]
 800d008:	60b9      	str	r1, [r7, #8]
 800d00a:	4611      	mov	r1, r2
 800d00c:	461a      	mov	r2, r3
 800d00e:	460b      	mov	r3, r1
 800d010:	71fb      	strb	r3, [r7, #7]
 800d012:	4613      	mov	r3, r2
 800d014:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d016:	68fb      	ldr	r3, [r7, #12]
 800d018:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800d01a:	68bb      	ldr	r3, [r7, #8]
 800d01c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800d01e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800d022:	2b00      	cmp	r3, #0
 800d024:	d123      	bne.n	800d06e <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800d026:	88bb      	ldrh	r3, [r7, #4]
 800d028:	3303      	adds	r3, #3
 800d02a:	089b      	lsrs	r3, r3, #2
 800d02c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800d02e:	2300      	movs	r3, #0
 800d030:	61bb      	str	r3, [r7, #24]
 800d032:	e018      	b.n	800d066 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800d034:	79fb      	ldrb	r3, [r7, #7]
 800d036:	031a      	lsls	r2, r3, #12
 800d038:	697b      	ldr	r3, [r7, #20]
 800d03a:	4413      	add	r3, r2
 800d03c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d040:	461a      	mov	r2, r3
 800d042:	69fb      	ldr	r3, [r7, #28]
 800d044:	681b      	ldr	r3, [r3, #0]
 800d046:	6013      	str	r3, [r2, #0]
      pSrc++;
 800d048:	69fb      	ldr	r3, [r7, #28]
 800d04a:	3301      	adds	r3, #1
 800d04c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800d04e:	69fb      	ldr	r3, [r7, #28]
 800d050:	3301      	adds	r3, #1
 800d052:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800d054:	69fb      	ldr	r3, [r7, #28]
 800d056:	3301      	adds	r3, #1
 800d058:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800d05a:	69fb      	ldr	r3, [r7, #28]
 800d05c:	3301      	adds	r3, #1
 800d05e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800d060:	69bb      	ldr	r3, [r7, #24]
 800d062:	3301      	adds	r3, #1
 800d064:	61bb      	str	r3, [r7, #24]
 800d066:	69ba      	ldr	r2, [r7, #24]
 800d068:	693b      	ldr	r3, [r7, #16]
 800d06a:	429a      	cmp	r2, r3
 800d06c:	d3e2      	bcc.n	800d034 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800d06e:	2300      	movs	r3, #0
}
 800d070:	4618      	mov	r0, r3
 800d072:	3724      	adds	r7, #36	; 0x24
 800d074:	46bd      	mov	sp, r7
 800d076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d07a:	4770      	bx	lr

0800d07c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800d07c:	b480      	push	{r7}
 800d07e:	b08b      	sub	sp, #44	; 0x2c
 800d080:	af00      	add	r7, sp, #0
 800d082:	60f8      	str	r0, [r7, #12]
 800d084:	60b9      	str	r1, [r7, #8]
 800d086:	4613      	mov	r3, r2
 800d088:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d08a:	68fb      	ldr	r3, [r7, #12]
 800d08c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800d08e:	68bb      	ldr	r3, [r7, #8]
 800d090:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800d092:	88fb      	ldrh	r3, [r7, #6]
 800d094:	089b      	lsrs	r3, r3, #2
 800d096:	b29b      	uxth	r3, r3
 800d098:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800d09a:	88fb      	ldrh	r3, [r7, #6]
 800d09c:	f003 0303 	and.w	r3, r3, #3
 800d0a0:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800d0a2:	2300      	movs	r3, #0
 800d0a4:	623b      	str	r3, [r7, #32]
 800d0a6:	e014      	b.n	800d0d2 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800d0a8:	69bb      	ldr	r3, [r7, #24]
 800d0aa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d0ae:	681a      	ldr	r2, [r3, #0]
 800d0b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d0b2:	601a      	str	r2, [r3, #0]
    pDest++;
 800d0b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d0b6:	3301      	adds	r3, #1
 800d0b8:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800d0ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d0bc:	3301      	adds	r3, #1
 800d0be:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800d0c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d0c2:	3301      	adds	r3, #1
 800d0c4:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800d0c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d0c8:	3301      	adds	r3, #1
 800d0ca:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800d0cc:	6a3b      	ldr	r3, [r7, #32]
 800d0ce:	3301      	adds	r3, #1
 800d0d0:	623b      	str	r3, [r7, #32]
 800d0d2:	6a3a      	ldr	r2, [r7, #32]
 800d0d4:	697b      	ldr	r3, [r7, #20]
 800d0d6:	429a      	cmp	r2, r3
 800d0d8:	d3e6      	bcc.n	800d0a8 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800d0da:	8bfb      	ldrh	r3, [r7, #30]
 800d0dc:	2b00      	cmp	r3, #0
 800d0de:	d01e      	beq.n	800d11e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800d0e0:	2300      	movs	r3, #0
 800d0e2:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800d0e4:	69bb      	ldr	r3, [r7, #24]
 800d0e6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d0ea:	461a      	mov	r2, r3
 800d0ec:	f107 0310 	add.w	r3, r7, #16
 800d0f0:	6812      	ldr	r2, [r2, #0]
 800d0f2:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800d0f4:	693a      	ldr	r2, [r7, #16]
 800d0f6:	6a3b      	ldr	r3, [r7, #32]
 800d0f8:	b2db      	uxtb	r3, r3
 800d0fa:	00db      	lsls	r3, r3, #3
 800d0fc:	fa22 f303 	lsr.w	r3, r2, r3
 800d100:	b2da      	uxtb	r2, r3
 800d102:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d104:	701a      	strb	r2, [r3, #0]
      i++;
 800d106:	6a3b      	ldr	r3, [r7, #32]
 800d108:	3301      	adds	r3, #1
 800d10a:	623b      	str	r3, [r7, #32]
      pDest++;
 800d10c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d10e:	3301      	adds	r3, #1
 800d110:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800d112:	8bfb      	ldrh	r3, [r7, #30]
 800d114:	3b01      	subs	r3, #1
 800d116:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800d118:	8bfb      	ldrh	r3, [r7, #30]
 800d11a:	2b00      	cmp	r3, #0
 800d11c:	d1ea      	bne.n	800d0f4 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800d11e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800d120:	4618      	mov	r0, r3
 800d122:	372c      	adds	r7, #44	; 0x2c
 800d124:	46bd      	mov	sp, r7
 800d126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d12a:	4770      	bx	lr

0800d12c <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800d12c:	b480      	push	{r7}
 800d12e:	b085      	sub	sp, #20
 800d130:	af00      	add	r7, sp, #0
 800d132:	6078      	str	r0, [r7, #4]
 800d134:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d136:	687b      	ldr	r3, [r7, #4]
 800d138:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800d13a:	683b      	ldr	r3, [r7, #0]
 800d13c:	781b      	ldrb	r3, [r3, #0]
 800d13e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800d140:	683b      	ldr	r3, [r7, #0]
 800d142:	785b      	ldrb	r3, [r3, #1]
 800d144:	2b01      	cmp	r3, #1
 800d146:	d12c      	bne.n	800d1a2 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800d148:	68bb      	ldr	r3, [r7, #8]
 800d14a:	015a      	lsls	r2, r3, #5
 800d14c:	68fb      	ldr	r3, [r7, #12]
 800d14e:	4413      	add	r3, r2
 800d150:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d154:	681b      	ldr	r3, [r3, #0]
 800d156:	2b00      	cmp	r3, #0
 800d158:	db12      	blt.n	800d180 <USB_EPSetStall+0x54>
 800d15a:	68bb      	ldr	r3, [r7, #8]
 800d15c:	2b00      	cmp	r3, #0
 800d15e:	d00f      	beq.n	800d180 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800d160:	68bb      	ldr	r3, [r7, #8]
 800d162:	015a      	lsls	r2, r3, #5
 800d164:	68fb      	ldr	r3, [r7, #12]
 800d166:	4413      	add	r3, r2
 800d168:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d16c:	681b      	ldr	r3, [r3, #0]
 800d16e:	68ba      	ldr	r2, [r7, #8]
 800d170:	0151      	lsls	r1, r2, #5
 800d172:	68fa      	ldr	r2, [r7, #12]
 800d174:	440a      	add	r2, r1
 800d176:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d17a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800d17e:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800d180:	68bb      	ldr	r3, [r7, #8]
 800d182:	015a      	lsls	r2, r3, #5
 800d184:	68fb      	ldr	r3, [r7, #12]
 800d186:	4413      	add	r3, r2
 800d188:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d18c:	681b      	ldr	r3, [r3, #0]
 800d18e:	68ba      	ldr	r2, [r7, #8]
 800d190:	0151      	lsls	r1, r2, #5
 800d192:	68fa      	ldr	r2, [r7, #12]
 800d194:	440a      	add	r2, r1
 800d196:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d19a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800d19e:	6013      	str	r3, [r2, #0]
 800d1a0:	e02b      	b.n	800d1fa <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800d1a2:	68bb      	ldr	r3, [r7, #8]
 800d1a4:	015a      	lsls	r2, r3, #5
 800d1a6:	68fb      	ldr	r3, [r7, #12]
 800d1a8:	4413      	add	r3, r2
 800d1aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d1ae:	681b      	ldr	r3, [r3, #0]
 800d1b0:	2b00      	cmp	r3, #0
 800d1b2:	db12      	blt.n	800d1da <USB_EPSetStall+0xae>
 800d1b4:	68bb      	ldr	r3, [r7, #8]
 800d1b6:	2b00      	cmp	r3, #0
 800d1b8:	d00f      	beq.n	800d1da <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800d1ba:	68bb      	ldr	r3, [r7, #8]
 800d1bc:	015a      	lsls	r2, r3, #5
 800d1be:	68fb      	ldr	r3, [r7, #12]
 800d1c0:	4413      	add	r3, r2
 800d1c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d1c6:	681b      	ldr	r3, [r3, #0]
 800d1c8:	68ba      	ldr	r2, [r7, #8]
 800d1ca:	0151      	lsls	r1, r2, #5
 800d1cc:	68fa      	ldr	r2, [r7, #12]
 800d1ce:	440a      	add	r2, r1
 800d1d0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d1d4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800d1d8:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800d1da:	68bb      	ldr	r3, [r7, #8]
 800d1dc:	015a      	lsls	r2, r3, #5
 800d1de:	68fb      	ldr	r3, [r7, #12]
 800d1e0:	4413      	add	r3, r2
 800d1e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d1e6:	681b      	ldr	r3, [r3, #0]
 800d1e8:	68ba      	ldr	r2, [r7, #8]
 800d1ea:	0151      	lsls	r1, r2, #5
 800d1ec:	68fa      	ldr	r2, [r7, #12]
 800d1ee:	440a      	add	r2, r1
 800d1f0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d1f4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800d1f8:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800d1fa:	2300      	movs	r3, #0
}
 800d1fc:	4618      	mov	r0, r3
 800d1fe:	3714      	adds	r7, #20
 800d200:	46bd      	mov	sp, r7
 800d202:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d206:	4770      	bx	lr

0800d208 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800d208:	b480      	push	{r7}
 800d20a:	b085      	sub	sp, #20
 800d20c:	af00      	add	r7, sp, #0
 800d20e:	6078      	str	r0, [r7, #4]
 800d210:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d212:	687b      	ldr	r3, [r7, #4]
 800d214:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800d216:	683b      	ldr	r3, [r7, #0]
 800d218:	781b      	ldrb	r3, [r3, #0]
 800d21a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800d21c:	683b      	ldr	r3, [r7, #0]
 800d21e:	785b      	ldrb	r3, [r3, #1]
 800d220:	2b01      	cmp	r3, #1
 800d222:	d128      	bne.n	800d276 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800d224:	68bb      	ldr	r3, [r7, #8]
 800d226:	015a      	lsls	r2, r3, #5
 800d228:	68fb      	ldr	r3, [r7, #12]
 800d22a:	4413      	add	r3, r2
 800d22c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d230:	681b      	ldr	r3, [r3, #0]
 800d232:	68ba      	ldr	r2, [r7, #8]
 800d234:	0151      	lsls	r1, r2, #5
 800d236:	68fa      	ldr	r2, [r7, #12]
 800d238:	440a      	add	r2, r1
 800d23a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d23e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800d242:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800d244:	683b      	ldr	r3, [r7, #0]
 800d246:	791b      	ldrb	r3, [r3, #4]
 800d248:	2b03      	cmp	r3, #3
 800d24a:	d003      	beq.n	800d254 <USB_EPClearStall+0x4c>
 800d24c:	683b      	ldr	r3, [r7, #0]
 800d24e:	791b      	ldrb	r3, [r3, #4]
 800d250:	2b02      	cmp	r3, #2
 800d252:	d138      	bne.n	800d2c6 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800d254:	68bb      	ldr	r3, [r7, #8]
 800d256:	015a      	lsls	r2, r3, #5
 800d258:	68fb      	ldr	r3, [r7, #12]
 800d25a:	4413      	add	r3, r2
 800d25c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d260:	681b      	ldr	r3, [r3, #0]
 800d262:	68ba      	ldr	r2, [r7, #8]
 800d264:	0151      	lsls	r1, r2, #5
 800d266:	68fa      	ldr	r2, [r7, #12]
 800d268:	440a      	add	r2, r1
 800d26a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d26e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d272:	6013      	str	r3, [r2, #0]
 800d274:	e027      	b.n	800d2c6 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800d276:	68bb      	ldr	r3, [r7, #8]
 800d278:	015a      	lsls	r2, r3, #5
 800d27a:	68fb      	ldr	r3, [r7, #12]
 800d27c:	4413      	add	r3, r2
 800d27e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d282:	681b      	ldr	r3, [r3, #0]
 800d284:	68ba      	ldr	r2, [r7, #8]
 800d286:	0151      	lsls	r1, r2, #5
 800d288:	68fa      	ldr	r2, [r7, #12]
 800d28a:	440a      	add	r2, r1
 800d28c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d290:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800d294:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800d296:	683b      	ldr	r3, [r7, #0]
 800d298:	791b      	ldrb	r3, [r3, #4]
 800d29a:	2b03      	cmp	r3, #3
 800d29c:	d003      	beq.n	800d2a6 <USB_EPClearStall+0x9e>
 800d29e:	683b      	ldr	r3, [r7, #0]
 800d2a0:	791b      	ldrb	r3, [r3, #4]
 800d2a2:	2b02      	cmp	r3, #2
 800d2a4:	d10f      	bne.n	800d2c6 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800d2a6:	68bb      	ldr	r3, [r7, #8]
 800d2a8:	015a      	lsls	r2, r3, #5
 800d2aa:	68fb      	ldr	r3, [r7, #12]
 800d2ac:	4413      	add	r3, r2
 800d2ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d2b2:	681b      	ldr	r3, [r3, #0]
 800d2b4:	68ba      	ldr	r2, [r7, #8]
 800d2b6:	0151      	lsls	r1, r2, #5
 800d2b8:	68fa      	ldr	r2, [r7, #12]
 800d2ba:	440a      	add	r2, r1
 800d2bc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d2c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d2c4:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800d2c6:	2300      	movs	r3, #0
}
 800d2c8:	4618      	mov	r0, r3
 800d2ca:	3714      	adds	r7, #20
 800d2cc:	46bd      	mov	sp, r7
 800d2ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2d2:	4770      	bx	lr

0800d2d4 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800d2d4:	b480      	push	{r7}
 800d2d6:	b085      	sub	sp, #20
 800d2d8:	af00      	add	r7, sp, #0
 800d2da:	6078      	str	r0, [r7, #4]
 800d2dc:	460b      	mov	r3, r1
 800d2de:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d2e0:	687b      	ldr	r3, [r7, #4]
 800d2e2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800d2e4:	68fb      	ldr	r3, [r7, #12]
 800d2e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d2ea:	681b      	ldr	r3, [r3, #0]
 800d2ec:	68fa      	ldr	r2, [r7, #12]
 800d2ee:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800d2f2:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800d2f6:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800d2f8:	68fb      	ldr	r3, [r7, #12]
 800d2fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d2fe:	681a      	ldr	r2, [r3, #0]
 800d300:	78fb      	ldrb	r3, [r7, #3]
 800d302:	011b      	lsls	r3, r3, #4
 800d304:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800d308:	68f9      	ldr	r1, [r7, #12]
 800d30a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800d30e:	4313      	orrs	r3, r2
 800d310:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800d312:	2300      	movs	r3, #0
}
 800d314:	4618      	mov	r0, r3
 800d316:	3714      	adds	r7, #20
 800d318:	46bd      	mov	sp, r7
 800d31a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d31e:	4770      	bx	lr

0800d320 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800d320:	b480      	push	{r7}
 800d322:	b085      	sub	sp, #20
 800d324:	af00      	add	r7, sp, #0
 800d326:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d328:	687b      	ldr	r3, [r7, #4]
 800d32a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800d32c:	68fb      	ldr	r3, [r7, #12]
 800d32e:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800d332:	681b      	ldr	r3, [r3, #0]
 800d334:	68fa      	ldr	r2, [r7, #12]
 800d336:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800d33a:	f023 0303 	bic.w	r3, r3, #3
 800d33e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800d340:	68fb      	ldr	r3, [r7, #12]
 800d342:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d346:	685b      	ldr	r3, [r3, #4]
 800d348:	68fa      	ldr	r2, [r7, #12]
 800d34a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800d34e:	f023 0302 	bic.w	r3, r3, #2
 800d352:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800d354:	2300      	movs	r3, #0
}
 800d356:	4618      	mov	r0, r3
 800d358:	3714      	adds	r7, #20
 800d35a:	46bd      	mov	sp, r7
 800d35c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d360:	4770      	bx	lr

0800d362 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800d362:	b480      	push	{r7}
 800d364:	b085      	sub	sp, #20
 800d366:	af00      	add	r7, sp, #0
 800d368:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d36a:	687b      	ldr	r3, [r7, #4]
 800d36c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800d36e:	68fb      	ldr	r3, [r7, #12]
 800d370:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800d374:	681b      	ldr	r3, [r3, #0]
 800d376:	68fa      	ldr	r2, [r7, #12]
 800d378:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800d37c:	f023 0303 	bic.w	r3, r3, #3
 800d380:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800d382:	68fb      	ldr	r3, [r7, #12]
 800d384:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d388:	685b      	ldr	r3, [r3, #4]
 800d38a:	68fa      	ldr	r2, [r7, #12]
 800d38c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800d390:	f043 0302 	orr.w	r3, r3, #2
 800d394:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800d396:	2300      	movs	r3, #0
}
 800d398:	4618      	mov	r0, r3
 800d39a:	3714      	adds	r7, #20
 800d39c:	46bd      	mov	sp, r7
 800d39e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3a2:	4770      	bx	lr

0800d3a4 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800d3a4:	b480      	push	{r7}
 800d3a6:	b085      	sub	sp, #20
 800d3a8:	af00      	add	r7, sp, #0
 800d3aa:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800d3ac:	687b      	ldr	r3, [r7, #4]
 800d3ae:	695b      	ldr	r3, [r3, #20]
 800d3b0:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800d3b2:	687b      	ldr	r3, [r7, #4]
 800d3b4:	699b      	ldr	r3, [r3, #24]
 800d3b6:	68fa      	ldr	r2, [r7, #12]
 800d3b8:	4013      	ands	r3, r2
 800d3ba:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800d3bc:	68fb      	ldr	r3, [r7, #12]
}
 800d3be:	4618      	mov	r0, r3
 800d3c0:	3714      	adds	r7, #20
 800d3c2:	46bd      	mov	sp, r7
 800d3c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3c8:	4770      	bx	lr

0800d3ca <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800d3ca:	b480      	push	{r7}
 800d3cc:	b085      	sub	sp, #20
 800d3ce:	af00      	add	r7, sp, #0
 800d3d0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d3d2:	687b      	ldr	r3, [r7, #4]
 800d3d4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800d3d6:	68fb      	ldr	r3, [r7, #12]
 800d3d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d3dc:	699b      	ldr	r3, [r3, #24]
 800d3de:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800d3e0:	68fb      	ldr	r3, [r7, #12]
 800d3e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d3e6:	69db      	ldr	r3, [r3, #28]
 800d3e8:	68ba      	ldr	r2, [r7, #8]
 800d3ea:	4013      	ands	r3, r2
 800d3ec:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800d3ee:	68bb      	ldr	r3, [r7, #8]
 800d3f0:	0c1b      	lsrs	r3, r3, #16
}
 800d3f2:	4618      	mov	r0, r3
 800d3f4:	3714      	adds	r7, #20
 800d3f6:	46bd      	mov	sp, r7
 800d3f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3fc:	4770      	bx	lr

0800d3fe <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800d3fe:	b480      	push	{r7}
 800d400:	b085      	sub	sp, #20
 800d402:	af00      	add	r7, sp, #0
 800d404:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d406:	687b      	ldr	r3, [r7, #4]
 800d408:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800d40a:	68fb      	ldr	r3, [r7, #12]
 800d40c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d410:	699b      	ldr	r3, [r3, #24]
 800d412:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800d414:	68fb      	ldr	r3, [r7, #12]
 800d416:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d41a:	69db      	ldr	r3, [r3, #28]
 800d41c:	68ba      	ldr	r2, [r7, #8]
 800d41e:	4013      	ands	r3, r2
 800d420:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800d422:	68bb      	ldr	r3, [r7, #8]
 800d424:	b29b      	uxth	r3, r3
}
 800d426:	4618      	mov	r0, r3
 800d428:	3714      	adds	r7, #20
 800d42a:	46bd      	mov	sp, r7
 800d42c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d430:	4770      	bx	lr

0800d432 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800d432:	b480      	push	{r7}
 800d434:	b085      	sub	sp, #20
 800d436:	af00      	add	r7, sp, #0
 800d438:	6078      	str	r0, [r7, #4]
 800d43a:	460b      	mov	r3, r1
 800d43c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d43e:	687b      	ldr	r3, [r7, #4]
 800d440:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800d442:	78fb      	ldrb	r3, [r7, #3]
 800d444:	015a      	lsls	r2, r3, #5
 800d446:	68fb      	ldr	r3, [r7, #12]
 800d448:	4413      	add	r3, r2
 800d44a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d44e:	689b      	ldr	r3, [r3, #8]
 800d450:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800d452:	68fb      	ldr	r3, [r7, #12]
 800d454:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d458:	695b      	ldr	r3, [r3, #20]
 800d45a:	68ba      	ldr	r2, [r7, #8]
 800d45c:	4013      	ands	r3, r2
 800d45e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800d460:	68bb      	ldr	r3, [r7, #8]
}
 800d462:	4618      	mov	r0, r3
 800d464:	3714      	adds	r7, #20
 800d466:	46bd      	mov	sp, r7
 800d468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d46c:	4770      	bx	lr

0800d46e <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800d46e:	b480      	push	{r7}
 800d470:	b087      	sub	sp, #28
 800d472:	af00      	add	r7, sp, #0
 800d474:	6078      	str	r0, [r7, #4]
 800d476:	460b      	mov	r3, r1
 800d478:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d47a:	687b      	ldr	r3, [r7, #4]
 800d47c:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800d47e:	697b      	ldr	r3, [r7, #20]
 800d480:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d484:	691b      	ldr	r3, [r3, #16]
 800d486:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800d488:	697b      	ldr	r3, [r7, #20]
 800d48a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d48e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d490:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800d492:	78fb      	ldrb	r3, [r7, #3]
 800d494:	f003 030f 	and.w	r3, r3, #15
 800d498:	68fa      	ldr	r2, [r7, #12]
 800d49a:	fa22 f303 	lsr.w	r3, r2, r3
 800d49e:	01db      	lsls	r3, r3, #7
 800d4a0:	b2db      	uxtb	r3, r3
 800d4a2:	693a      	ldr	r2, [r7, #16]
 800d4a4:	4313      	orrs	r3, r2
 800d4a6:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800d4a8:	78fb      	ldrb	r3, [r7, #3]
 800d4aa:	015a      	lsls	r2, r3, #5
 800d4ac:	697b      	ldr	r3, [r7, #20]
 800d4ae:	4413      	add	r3, r2
 800d4b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d4b4:	689b      	ldr	r3, [r3, #8]
 800d4b6:	693a      	ldr	r2, [r7, #16]
 800d4b8:	4013      	ands	r3, r2
 800d4ba:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800d4bc:	68bb      	ldr	r3, [r7, #8]
}
 800d4be:	4618      	mov	r0, r3
 800d4c0:	371c      	adds	r7, #28
 800d4c2:	46bd      	mov	sp, r7
 800d4c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4c8:	4770      	bx	lr

0800d4ca <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800d4ca:	b480      	push	{r7}
 800d4cc:	b083      	sub	sp, #12
 800d4ce:	af00      	add	r7, sp, #0
 800d4d0:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800d4d2:	687b      	ldr	r3, [r7, #4]
 800d4d4:	695b      	ldr	r3, [r3, #20]
 800d4d6:	f003 0301 	and.w	r3, r3, #1
}
 800d4da:	4618      	mov	r0, r3
 800d4dc:	370c      	adds	r7, #12
 800d4de:	46bd      	mov	sp, r7
 800d4e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4e4:	4770      	bx	lr

0800d4e6 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800d4e6:	b480      	push	{r7}
 800d4e8:	b085      	sub	sp, #20
 800d4ea:	af00      	add	r7, sp, #0
 800d4ec:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d4ee:	687b      	ldr	r3, [r7, #4]
 800d4f0:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800d4f2:	68fb      	ldr	r3, [r7, #12]
 800d4f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d4f8:	681b      	ldr	r3, [r3, #0]
 800d4fa:	68fa      	ldr	r2, [r7, #12]
 800d4fc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d500:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800d504:	f023 0307 	bic.w	r3, r3, #7
 800d508:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800d50a:	68fb      	ldr	r3, [r7, #12]
 800d50c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d510:	685b      	ldr	r3, [r3, #4]
 800d512:	68fa      	ldr	r2, [r7, #12]
 800d514:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800d518:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d51c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800d51e:	2300      	movs	r3, #0
}
 800d520:	4618      	mov	r0, r3
 800d522:	3714      	adds	r7, #20
 800d524:	46bd      	mov	sp, r7
 800d526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d52a:	4770      	bx	lr

0800d52c <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800d52c:	b480      	push	{r7}
 800d52e:	b087      	sub	sp, #28
 800d530:	af00      	add	r7, sp, #0
 800d532:	60f8      	str	r0, [r7, #12]
 800d534:	460b      	mov	r3, r1
 800d536:	607a      	str	r2, [r7, #4]
 800d538:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d53a:	68fb      	ldr	r3, [r7, #12]
 800d53c:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800d53e:	68fb      	ldr	r3, [r7, #12]
 800d540:	333c      	adds	r3, #60	; 0x3c
 800d542:	3304      	adds	r3, #4
 800d544:	681b      	ldr	r3, [r3, #0]
 800d546:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800d548:	693b      	ldr	r3, [r7, #16]
 800d54a:	4a26      	ldr	r2, [pc, #152]	; (800d5e4 <USB_EP0_OutStart+0xb8>)
 800d54c:	4293      	cmp	r3, r2
 800d54e:	d90a      	bls.n	800d566 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800d550:	697b      	ldr	r3, [r7, #20]
 800d552:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d556:	681b      	ldr	r3, [r3, #0]
 800d558:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800d55c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800d560:	d101      	bne.n	800d566 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800d562:	2300      	movs	r3, #0
 800d564:	e037      	b.n	800d5d6 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800d566:	697b      	ldr	r3, [r7, #20]
 800d568:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d56c:	461a      	mov	r2, r3
 800d56e:	2300      	movs	r3, #0
 800d570:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800d572:	697b      	ldr	r3, [r7, #20]
 800d574:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d578:	691b      	ldr	r3, [r3, #16]
 800d57a:	697a      	ldr	r2, [r7, #20]
 800d57c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d580:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800d584:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800d586:	697b      	ldr	r3, [r7, #20]
 800d588:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d58c:	691b      	ldr	r3, [r3, #16]
 800d58e:	697a      	ldr	r2, [r7, #20]
 800d590:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d594:	f043 0318 	orr.w	r3, r3, #24
 800d598:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800d59a:	697b      	ldr	r3, [r7, #20]
 800d59c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d5a0:	691b      	ldr	r3, [r3, #16]
 800d5a2:	697a      	ldr	r2, [r7, #20]
 800d5a4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d5a8:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800d5ac:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800d5ae:	7afb      	ldrb	r3, [r7, #11]
 800d5b0:	2b01      	cmp	r3, #1
 800d5b2:	d10f      	bne.n	800d5d4 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800d5b4:	697b      	ldr	r3, [r7, #20]
 800d5b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d5ba:	461a      	mov	r2, r3
 800d5bc:	687b      	ldr	r3, [r7, #4]
 800d5be:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800d5c0:	697b      	ldr	r3, [r7, #20]
 800d5c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d5c6:	681b      	ldr	r3, [r3, #0]
 800d5c8:	697a      	ldr	r2, [r7, #20]
 800d5ca:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d5ce:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800d5d2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800d5d4:	2300      	movs	r3, #0
}
 800d5d6:	4618      	mov	r0, r3
 800d5d8:	371c      	adds	r7, #28
 800d5da:	46bd      	mov	sp, r7
 800d5dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5e0:	4770      	bx	lr
 800d5e2:	bf00      	nop
 800d5e4:	4f54300a 	.word	0x4f54300a

0800d5e8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800d5e8:	b480      	push	{r7}
 800d5ea:	b085      	sub	sp, #20
 800d5ec:	af00      	add	r7, sp, #0
 800d5ee:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800d5f0:	2300      	movs	r3, #0
 800d5f2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800d5f4:	68fb      	ldr	r3, [r7, #12]
 800d5f6:	3301      	adds	r3, #1
 800d5f8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800d5fa:	68fb      	ldr	r3, [r7, #12]
 800d5fc:	4a13      	ldr	r2, [pc, #76]	; (800d64c <USB_CoreReset+0x64>)
 800d5fe:	4293      	cmp	r3, r2
 800d600:	d901      	bls.n	800d606 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800d602:	2303      	movs	r3, #3
 800d604:	e01b      	b.n	800d63e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800d606:	687b      	ldr	r3, [r7, #4]
 800d608:	691b      	ldr	r3, [r3, #16]
 800d60a:	2b00      	cmp	r3, #0
 800d60c:	daf2      	bge.n	800d5f4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800d60e:	2300      	movs	r3, #0
 800d610:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800d612:	687b      	ldr	r3, [r7, #4]
 800d614:	691b      	ldr	r3, [r3, #16]
 800d616:	f043 0201 	orr.w	r2, r3, #1
 800d61a:	687b      	ldr	r3, [r7, #4]
 800d61c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800d61e:	68fb      	ldr	r3, [r7, #12]
 800d620:	3301      	adds	r3, #1
 800d622:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800d624:	68fb      	ldr	r3, [r7, #12]
 800d626:	4a09      	ldr	r2, [pc, #36]	; (800d64c <USB_CoreReset+0x64>)
 800d628:	4293      	cmp	r3, r2
 800d62a:	d901      	bls.n	800d630 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800d62c:	2303      	movs	r3, #3
 800d62e:	e006      	b.n	800d63e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800d630:	687b      	ldr	r3, [r7, #4]
 800d632:	691b      	ldr	r3, [r3, #16]
 800d634:	f003 0301 	and.w	r3, r3, #1
 800d638:	2b01      	cmp	r3, #1
 800d63a:	d0f0      	beq.n	800d61e <USB_CoreReset+0x36>

  return HAL_OK;
 800d63c:	2300      	movs	r3, #0
}
 800d63e:	4618      	mov	r0, r3
 800d640:	3714      	adds	r7, #20
 800d642:	46bd      	mov	sp, r7
 800d644:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d648:	4770      	bx	lr
 800d64a:	bf00      	nop
 800d64c:	00030d40 	.word	0x00030d40

0800d650 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800d650:	b580      	push	{r7, lr}
 800d652:	b084      	sub	sp, #16
 800d654:	af00      	add	r7, sp, #0
 800d656:	6078      	str	r0, [r7, #4]
 800d658:	460b      	mov	r3, r1
 800d65a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800d65c:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800d660:	f002 fd3e 	bl	80100e0 <USBD_static_malloc>
 800d664:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800d666:	68fb      	ldr	r3, [r7, #12]
 800d668:	2b00      	cmp	r3, #0
 800d66a:	d109      	bne.n	800d680 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800d66c:	687b      	ldr	r3, [r7, #4]
 800d66e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d672:	687b      	ldr	r3, [r7, #4]
 800d674:	32b0      	adds	r2, #176	; 0xb0
 800d676:	2100      	movs	r1, #0
 800d678:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800d67c:	2302      	movs	r3, #2
 800d67e:	e0d4      	b.n	800d82a <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800d680:	f44f 7207 	mov.w	r2, #540	; 0x21c
 800d684:	2100      	movs	r1, #0
 800d686:	68f8      	ldr	r0, [r7, #12]
 800d688:	f002 fdb6 	bl	80101f8 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800d68c:	687b      	ldr	r3, [r7, #4]
 800d68e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d692:	687b      	ldr	r3, [r7, #4]
 800d694:	32b0      	adds	r2, #176	; 0xb0
 800d696:	68f9      	ldr	r1, [r7, #12]
 800d698:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800d69c:	687b      	ldr	r3, [r7, #4]
 800d69e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d6a2:	687b      	ldr	r3, [r7, #4]
 800d6a4:	32b0      	adds	r2, #176	; 0xb0
 800d6a6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800d6aa:	687b      	ldr	r3, [r7, #4]
 800d6ac:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d6b0:	687b      	ldr	r3, [r7, #4]
 800d6b2:	7c1b      	ldrb	r3, [r3, #16]
 800d6b4:	2b00      	cmp	r3, #0
 800d6b6:	d138      	bne.n	800d72a <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800d6b8:	4b5e      	ldr	r3, [pc, #376]	; (800d834 <USBD_CDC_Init+0x1e4>)
 800d6ba:	7819      	ldrb	r1, [r3, #0]
 800d6bc:	f44f 7300 	mov.w	r3, #512	; 0x200
 800d6c0:	2202      	movs	r2, #2
 800d6c2:	6878      	ldr	r0, [r7, #4]
 800d6c4:	f002 fb9b 	bl	800fdfe <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800d6c8:	4b5a      	ldr	r3, [pc, #360]	; (800d834 <USBD_CDC_Init+0x1e4>)
 800d6ca:	781b      	ldrb	r3, [r3, #0]
 800d6cc:	f003 020f 	and.w	r2, r3, #15
 800d6d0:	6879      	ldr	r1, [r7, #4]
 800d6d2:	4613      	mov	r3, r2
 800d6d4:	009b      	lsls	r3, r3, #2
 800d6d6:	4413      	add	r3, r2
 800d6d8:	009b      	lsls	r3, r3, #2
 800d6da:	440b      	add	r3, r1
 800d6dc:	3324      	adds	r3, #36	; 0x24
 800d6de:	2201      	movs	r2, #1
 800d6e0:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800d6e2:	4b55      	ldr	r3, [pc, #340]	; (800d838 <USBD_CDC_Init+0x1e8>)
 800d6e4:	7819      	ldrb	r1, [r3, #0]
 800d6e6:	f44f 7300 	mov.w	r3, #512	; 0x200
 800d6ea:	2202      	movs	r2, #2
 800d6ec:	6878      	ldr	r0, [r7, #4]
 800d6ee:	f002 fb86 	bl	800fdfe <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800d6f2:	4b51      	ldr	r3, [pc, #324]	; (800d838 <USBD_CDC_Init+0x1e8>)
 800d6f4:	781b      	ldrb	r3, [r3, #0]
 800d6f6:	f003 020f 	and.w	r2, r3, #15
 800d6fa:	6879      	ldr	r1, [r7, #4]
 800d6fc:	4613      	mov	r3, r2
 800d6fe:	009b      	lsls	r3, r3, #2
 800d700:	4413      	add	r3, r2
 800d702:	009b      	lsls	r3, r3, #2
 800d704:	440b      	add	r3, r1
 800d706:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800d70a:	2201      	movs	r2, #1
 800d70c:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800d70e:	4b4b      	ldr	r3, [pc, #300]	; (800d83c <USBD_CDC_Init+0x1ec>)
 800d710:	781b      	ldrb	r3, [r3, #0]
 800d712:	f003 020f 	and.w	r2, r3, #15
 800d716:	6879      	ldr	r1, [r7, #4]
 800d718:	4613      	mov	r3, r2
 800d71a:	009b      	lsls	r3, r3, #2
 800d71c:	4413      	add	r3, r2
 800d71e:	009b      	lsls	r3, r3, #2
 800d720:	440b      	add	r3, r1
 800d722:	3326      	adds	r3, #38	; 0x26
 800d724:	2210      	movs	r2, #16
 800d726:	801a      	strh	r2, [r3, #0]
 800d728:	e035      	b.n	800d796 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800d72a:	4b42      	ldr	r3, [pc, #264]	; (800d834 <USBD_CDC_Init+0x1e4>)
 800d72c:	7819      	ldrb	r1, [r3, #0]
 800d72e:	2340      	movs	r3, #64	; 0x40
 800d730:	2202      	movs	r2, #2
 800d732:	6878      	ldr	r0, [r7, #4]
 800d734:	f002 fb63 	bl	800fdfe <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800d738:	4b3e      	ldr	r3, [pc, #248]	; (800d834 <USBD_CDC_Init+0x1e4>)
 800d73a:	781b      	ldrb	r3, [r3, #0]
 800d73c:	f003 020f 	and.w	r2, r3, #15
 800d740:	6879      	ldr	r1, [r7, #4]
 800d742:	4613      	mov	r3, r2
 800d744:	009b      	lsls	r3, r3, #2
 800d746:	4413      	add	r3, r2
 800d748:	009b      	lsls	r3, r3, #2
 800d74a:	440b      	add	r3, r1
 800d74c:	3324      	adds	r3, #36	; 0x24
 800d74e:	2201      	movs	r2, #1
 800d750:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800d752:	4b39      	ldr	r3, [pc, #228]	; (800d838 <USBD_CDC_Init+0x1e8>)
 800d754:	7819      	ldrb	r1, [r3, #0]
 800d756:	2340      	movs	r3, #64	; 0x40
 800d758:	2202      	movs	r2, #2
 800d75a:	6878      	ldr	r0, [r7, #4]
 800d75c:	f002 fb4f 	bl	800fdfe <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800d760:	4b35      	ldr	r3, [pc, #212]	; (800d838 <USBD_CDC_Init+0x1e8>)
 800d762:	781b      	ldrb	r3, [r3, #0]
 800d764:	f003 020f 	and.w	r2, r3, #15
 800d768:	6879      	ldr	r1, [r7, #4]
 800d76a:	4613      	mov	r3, r2
 800d76c:	009b      	lsls	r3, r3, #2
 800d76e:	4413      	add	r3, r2
 800d770:	009b      	lsls	r3, r3, #2
 800d772:	440b      	add	r3, r1
 800d774:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800d778:	2201      	movs	r2, #1
 800d77a:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800d77c:	4b2f      	ldr	r3, [pc, #188]	; (800d83c <USBD_CDC_Init+0x1ec>)
 800d77e:	781b      	ldrb	r3, [r3, #0]
 800d780:	f003 020f 	and.w	r2, r3, #15
 800d784:	6879      	ldr	r1, [r7, #4]
 800d786:	4613      	mov	r3, r2
 800d788:	009b      	lsls	r3, r3, #2
 800d78a:	4413      	add	r3, r2
 800d78c:	009b      	lsls	r3, r3, #2
 800d78e:	440b      	add	r3, r1
 800d790:	3326      	adds	r3, #38	; 0x26
 800d792:	2210      	movs	r2, #16
 800d794:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800d796:	4b29      	ldr	r3, [pc, #164]	; (800d83c <USBD_CDC_Init+0x1ec>)
 800d798:	7819      	ldrb	r1, [r3, #0]
 800d79a:	2308      	movs	r3, #8
 800d79c:	2203      	movs	r2, #3
 800d79e:	6878      	ldr	r0, [r7, #4]
 800d7a0:	f002 fb2d 	bl	800fdfe <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800d7a4:	4b25      	ldr	r3, [pc, #148]	; (800d83c <USBD_CDC_Init+0x1ec>)
 800d7a6:	781b      	ldrb	r3, [r3, #0]
 800d7a8:	f003 020f 	and.w	r2, r3, #15
 800d7ac:	6879      	ldr	r1, [r7, #4]
 800d7ae:	4613      	mov	r3, r2
 800d7b0:	009b      	lsls	r3, r3, #2
 800d7b2:	4413      	add	r3, r2
 800d7b4:	009b      	lsls	r3, r3, #2
 800d7b6:	440b      	add	r3, r1
 800d7b8:	3324      	adds	r3, #36	; 0x24
 800d7ba:	2201      	movs	r2, #1
 800d7bc:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800d7be:	68fb      	ldr	r3, [r7, #12]
 800d7c0:	2200      	movs	r2, #0
 800d7c2:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800d7c6:	687b      	ldr	r3, [r7, #4]
 800d7c8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800d7cc:	687a      	ldr	r2, [r7, #4]
 800d7ce:	33b0      	adds	r3, #176	; 0xb0
 800d7d0:	009b      	lsls	r3, r3, #2
 800d7d2:	4413      	add	r3, r2
 800d7d4:	685b      	ldr	r3, [r3, #4]
 800d7d6:	681b      	ldr	r3, [r3, #0]
 800d7d8:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800d7da:	68fb      	ldr	r3, [r7, #12]
 800d7dc:	2200      	movs	r2, #0
 800d7de:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800d7e2:	68fb      	ldr	r3, [r7, #12]
 800d7e4:	2200      	movs	r2, #0
 800d7e6:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 800d7ea:	68fb      	ldr	r3, [r7, #12]
 800d7ec:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800d7f0:	2b00      	cmp	r3, #0
 800d7f2:	d101      	bne.n	800d7f8 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800d7f4:	2302      	movs	r3, #2
 800d7f6:	e018      	b.n	800d82a <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d7f8:	687b      	ldr	r3, [r7, #4]
 800d7fa:	7c1b      	ldrb	r3, [r3, #16]
 800d7fc:	2b00      	cmp	r3, #0
 800d7fe:	d10a      	bne.n	800d816 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800d800:	4b0d      	ldr	r3, [pc, #52]	; (800d838 <USBD_CDC_Init+0x1e8>)
 800d802:	7819      	ldrb	r1, [r3, #0]
 800d804:	68fb      	ldr	r3, [r7, #12]
 800d806:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800d80a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800d80e:	6878      	ldr	r0, [r7, #4]
 800d810:	f002 fbe4 	bl	800ffdc <USBD_LL_PrepareReceive>
 800d814:	e008      	b.n	800d828 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800d816:	4b08      	ldr	r3, [pc, #32]	; (800d838 <USBD_CDC_Init+0x1e8>)
 800d818:	7819      	ldrb	r1, [r3, #0]
 800d81a:	68fb      	ldr	r3, [r7, #12]
 800d81c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800d820:	2340      	movs	r3, #64	; 0x40
 800d822:	6878      	ldr	r0, [r7, #4]
 800d824:	f002 fbda 	bl	800ffdc <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800d828:	2300      	movs	r3, #0
}
 800d82a:	4618      	mov	r0, r3
 800d82c:	3710      	adds	r7, #16
 800d82e:	46bd      	mov	sp, r7
 800d830:	bd80      	pop	{r7, pc}
 800d832:	bf00      	nop
 800d834:	2000018f 	.word	0x2000018f
 800d838:	20000190 	.word	0x20000190
 800d83c:	20000191 	.word	0x20000191

0800d840 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800d840:	b580      	push	{r7, lr}
 800d842:	b082      	sub	sp, #8
 800d844:	af00      	add	r7, sp, #0
 800d846:	6078      	str	r0, [r7, #4]
 800d848:	460b      	mov	r3, r1
 800d84a:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800d84c:	4b3a      	ldr	r3, [pc, #232]	; (800d938 <USBD_CDC_DeInit+0xf8>)
 800d84e:	781b      	ldrb	r3, [r3, #0]
 800d850:	4619      	mov	r1, r3
 800d852:	6878      	ldr	r0, [r7, #4]
 800d854:	f002 faf9 	bl	800fe4a <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800d858:	4b37      	ldr	r3, [pc, #220]	; (800d938 <USBD_CDC_DeInit+0xf8>)
 800d85a:	781b      	ldrb	r3, [r3, #0]
 800d85c:	f003 020f 	and.w	r2, r3, #15
 800d860:	6879      	ldr	r1, [r7, #4]
 800d862:	4613      	mov	r3, r2
 800d864:	009b      	lsls	r3, r3, #2
 800d866:	4413      	add	r3, r2
 800d868:	009b      	lsls	r3, r3, #2
 800d86a:	440b      	add	r3, r1
 800d86c:	3324      	adds	r3, #36	; 0x24
 800d86e:	2200      	movs	r2, #0
 800d870:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800d872:	4b32      	ldr	r3, [pc, #200]	; (800d93c <USBD_CDC_DeInit+0xfc>)
 800d874:	781b      	ldrb	r3, [r3, #0]
 800d876:	4619      	mov	r1, r3
 800d878:	6878      	ldr	r0, [r7, #4]
 800d87a:	f002 fae6 	bl	800fe4a <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800d87e:	4b2f      	ldr	r3, [pc, #188]	; (800d93c <USBD_CDC_DeInit+0xfc>)
 800d880:	781b      	ldrb	r3, [r3, #0]
 800d882:	f003 020f 	and.w	r2, r3, #15
 800d886:	6879      	ldr	r1, [r7, #4]
 800d888:	4613      	mov	r3, r2
 800d88a:	009b      	lsls	r3, r3, #2
 800d88c:	4413      	add	r3, r2
 800d88e:	009b      	lsls	r3, r3, #2
 800d890:	440b      	add	r3, r1
 800d892:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800d896:	2200      	movs	r2, #0
 800d898:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800d89a:	4b29      	ldr	r3, [pc, #164]	; (800d940 <USBD_CDC_DeInit+0x100>)
 800d89c:	781b      	ldrb	r3, [r3, #0]
 800d89e:	4619      	mov	r1, r3
 800d8a0:	6878      	ldr	r0, [r7, #4]
 800d8a2:	f002 fad2 	bl	800fe4a <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800d8a6:	4b26      	ldr	r3, [pc, #152]	; (800d940 <USBD_CDC_DeInit+0x100>)
 800d8a8:	781b      	ldrb	r3, [r3, #0]
 800d8aa:	f003 020f 	and.w	r2, r3, #15
 800d8ae:	6879      	ldr	r1, [r7, #4]
 800d8b0:	4613      	mov	r3, r2
 800d8b2:	009b      	lsls	r3, r3, #2
 800d8b4:	4413      	add	r3, r2
 800d8b6:	009b      	lsls	r3, r3, #2
 800d8b8:	440b      	add	r3, r1
 800d8ba:	3324      	adds	r3, #36	; 0x24
 800d8bc:	2200      	movs	r2, #0
 800d8be:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800d8c0:	4b1f      	ldr	r3, [pc, #124]	; (800d940 <USBD_CDC_DeInit+0x100>)
 800d8c2:	781b      	ldrb	r3, [r3, #0]
 800d8c4:	f003 020f 	and.w	r2, r3, #15
 800d8c8:	6879      	ldr	r1, [r7, #4]
 800d8ca:	4613      	mov	r3, r2
 800d8cc:	009b      	lsls	r3, r3, #2
 800d8ce:	4413      	add	r3, r2
 800d8d0:	009b      	lsls	r3, r3, #2
 800d8d2:	440b      	add	r3, r1
 800d8d4:	3326      	adds	r3, #38	; 0x26
 800d8d6:	2200      	movs	r2, #0
 800d8d8:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800d8da:	687b      	ldr	r3, [r7, #4]
 800d8dc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d8e0:	687b      	ldr	r3, [r7, #4]
 800d8e2:	32b0      	adds	r2, #176	; 0xb0
 800d8e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d8e8:	2b00      	cmp	r3, #0
 800d8ea:	d01f      	beq.n	800d92c <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800d8ec:	687b      	ldr	r3, [r7, #4]
 800d8ee:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800d8f2:	687a      	ldr	r2, [r7, #4]
 800d8f4:	33b0      	adds	r3, #176	; 0xb0
 800d8f6:	009b      	lsls	r3, r3, #2
 800d8f8:	4413      	add	r3, r2
 800d8fa:	685b      	ldr	r3, [r3, #4]
 800d8fc:	685b      	ldr	r3, [r3, #4]
 800d8fe:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800d900:	687b      	ldr	r3, [r7, #4]
 800d902:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d906:	687b      	ldr	r3, [r7, #4]
 800d908:	32b0      	adds	r2, #176	; 0xb0
 800d90a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d90e:	4618      	mov	r0, r3
 800d910:	f002 fbf4 	bl	80100fc <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800d914:	687b      	ldr	r3, [r7, #4]
 800d916:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d91a:	687b      	ldr	r3, [r7, #4]
 800d91c:	32b0      	adds	r2, #176	; 0xb0
 800d91e:	2100      	movs	r1, #0
 800d920:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800d924:	687b      	ldr	r3, [r7, #4]
 800d926:	2200      	movs	r2, #0
 800d928:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800d92c:	2300      	movs	r3, #0
}
 800d92e:	4618      	mov	r0, r3
 800d930:	3708      	adds	r7, #8
 800d932:	46bd      	mov	sp, r7
 800d934:	bd80      	pop	{r7, pc}
 800d936:	bf00      	nop
 800d938:	2000018f 	.word	0x2000018f
 800d93c:	20000190 	.word	0x20000190
 800d940:	20000191 	.word	0x20000191

0800d944 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800d944:	b580      	push	{r7, lr}
 800d946:	b086      	sub	sp, #24
 800d948:	af00      	add	r7, sp, #0
 800d94a:	6078      	str	r0, [r7, #4]
 800d94c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d94e:	687b      	ldr	r3, [r7, #4]
 800d950:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d954:	687b      	ldr	r3, [r7, #4]
 800d956:	32b0      	adds	r2, #176	; 0xb0
 800d958:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d95c:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800d95e:	2300      	movs	r3, #0
 800d960:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800d962:	2300      	movs	r3, #0
 800d964:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800d966:	2300      	movs	r3, #0
 800d968:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800d96a:	693b      	ldr	r3, [r7, #16]
 800d96c:	2b00      	cmp	r3, #0
 800d96e:	d101      	bne.n	800d974 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800d970:	2303      	movs	r3, #3
 800d972:	e0bf      	b.n	800daf4 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800d974:	683b      	ldr	r3, [r7, #0]
 800d976:	781b      	ldrb	r3, [r3, #0]
 800d978:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800d97c:	2b00      	cmp	r3, #0
 800d97e:	d050      	beq.n	800da22 <USBD_CDC_Setup+0xde>
 800d980:	2b20      	cmp	r3, #32
 800d982:	f040 80af 	bne.w	800dae4 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800d986:	683b      	ldr	r3, [r7, #0]
 800d988:	88db      	ldrh	r3, [r3, #6]
 800d98a:	2b00      	cmp	r3, #0
 800d98c:	d03a      	beq.n	800da04 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800d98e:	683b      	ldr	r3, [r7, #0]
 800d990:	781b      	ldrb	r3, [r3, #0]
 800d992:	b25b      	sxtb	r3, r3
 800d994:	2b00      	cmp	r3, #0
 800d996:	da1b      	bge.n	800d9d0 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800d998:	687b      	ldr	r3, [r7, #4]
 800d99a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800d99e:	687a      	ldr	r2, [r7, #4]
 800d9a0:	33b0      	adds	r3, #176	; 0xb0
 800d9a2:	009b      	lsls	r3, r3, #2
 800d9a4:	4413      	add	r3, r2
 800d9a6:	685b      	ldr	r3, [r3, #4]
 800d9a8:	689b      	ldr	r3, [r3, #8]
 800d9aa:	683a      	ldr	r2, [r7, #0]
 800d9ac:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800d9ae:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800d9b0:	683a      	ldr	r2, [r7, #0]
 800d9b2:	88d2      	ldrh	r2, [r2, #6]
 800d9b4:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800d9b6:	683b      	ldr	r3, [r7, #0]
 800d9b8:	88db      	ldrh	r3, [r3, #6]
 800d9ba:	2b07      	cmp	r3, #7
 800d9bc:	bf28      	it	cs
 800d9be:	2307      	movcs	r3, #7
 800d9c0:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800d9c2:	693b      	ldr	r3, [r7, #16]
 800d9c4:	89fa      	ldrh	r2, [r7, #14]
 800d9c6:	4619      	mov	r1, r3
 800d9c8:	6878      	ldr	r0, [r7, #4]
 800d9ca:	f001 fdb3 	bl	800f534 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800d9ce:	e090      	b.n	800daf2 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800d9d0:	683b      	ldr	r3, [r7, #0]
 800d9d2:	785a      	ldrb	r2, [r3, #1]
 800d9d4:	693b      	ldr	r3, [r7, #16]
 800d9d6:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800d9da:	683b      	ldr	r3, [r7, #0]
 800d9dc:	88db      	ldrh	r3, [r3, #6]
 800d9de:	2b3f      	cmp	r3, #63	; 0x3f
 800d9e0:	d803      	bhi.n	800d9ea <USBD_CDC_Setup+0xa6>
 800d9e2:	683b      	ldr	r3, [r7, #0]
 800d9e4:	88db      	ldrh	r3, [r3, #6]
 800d9e6:	b2da      	uxtb	r2, r3
 800d9e8:	e000      	b.n	800d9ec <USBD_CDC_Setup+0xa8>
 800d9ea:	2240      	movs	r2, #64	; 0x40
 800d9ec:	693b      	ldr	r3, [r7, #16]
 800d9ee:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800d9f2:	6939      	ldr	r1, [r7, #16]
 800d9f4:	693b      	ldr	r3, [r7, #16]
 800d9f6:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 800d9fa:	461a      	mov	r2, r3
 800d9fc:	6878      	ldr	r0, [r7, #4]
 800d9fe:	f001 fdc5 	bl	800f58c <USBD_CtlPrepareRx>
      break;
 800da02:	e076      	b.n	800daf2 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800da04:	687b      	ldr	r3, [r7, #4]
 800da06:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800da0a:	687a      	ldr	r2, [r7, #4]
 800da0c:	33b0      	adds	r3, #176	; 0xb0
 800da0e:	009b      	lsls	r3, r3, #2
 800da10:	4413      	add	r3, r2
 800da12:	685b      	ldr	r3, [r3, #4]
 800da14:	689b      	ldr	r3, [r3, #8]
 800da16:	683a      	ldr	r2, [r7, #0]
 800da18:	7850      	ldrb	r0, [r2, #1]
 800da1a:	2200      	movs	r2, #0
 800da1c:	6839      	ldr	r1, [r7, #0]
 800da1e:	4798      	blx	r3
      break;
 800da20:	e067      	b.n	800daf2 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800da22:	683b      	ldr	r3, [r7, #0]
 800da24:	785b      	ldrb	r3, [r3, #1]
 800da26:	2b0b      	cmp	r3, #11
 800da28:	d851      	bhi.n	800dace <USBD_CDC_Setup+0x18a>
 800da2a:	a201      	add	r2, pc, #4	; (adr r2, 800da30 <USBD_CDC_Setup+0xec>)
 800da2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800da30:	0800da61 	.word	0x0800da61
 800da34:	0800dadd 	.word	0x0800dadd
 800da38:	0800dacf 	.word	0x0800dacf
 800da3c:	0800dacf 	.word	0x0800dacf
 800da40:	0800dacf 	.word	0x0800dacf
 800da44:	0800dacf 	.word	0x0800dacf
 800da48:	0800dacf 	.word	0x0800dacf
 800da4c:	0800dacf 	.word	0x0800dacf
 800da50:	0800dacf 	.word	0x0800dacf
 800da54:	0800dacf 	.word	0x0800dacf
 800da58:	0800da8b 	.word	0x0800da8b
 800da5c:	0800dab5 	.word	0x0800dab5
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800da60:	687b      	ldr	r3, [r7, #4]
 800da62:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800da66:	b2db      	uxtb	r3, r3
 800da68:	2b03      	cmp	r3, #3
 800da6a:	d107      	bne.n	800da7c <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800da6c:	f107 030a 	add.w	r3, r7, #10
 800da70:	2202      	movs	r2, #2
 800da72:	4619      	mov	r1, r3
 800da74:	6878      	ldr	r0, [r7, #4]
 800da76:	f001 fd5d 	bl	800f534 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800da7a:	e032      	b.n	800dae2 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800da7c:	6839      	ldr	r1, [r7, #0]
 800da7e:	6878      	ldr	r0, [r7, #4]
 800da80:	f001 fce7 	bl	800f452 <USBD_CtlError>
            ret = USBD_FAIL;
 800da84:	2303      	movs	r3, #3
 800da86:	75fb      	strb	r3, [r7, #23]
          break;
 800da88:	e02b      	b.n	800dae2 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800da8a:	687b      	ldr	r3, [r7, #4]
 800da8c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800da90:	b2db      	uxtb	r3, r3
 800da92:	2b03      	cmp	r3, #3
 800da94:	d107      	bne.n	800daa6 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800da96:	f107 030d 	add.w	r3, r7, #13
 800da9a:	2201      	movs	r2, #1
 800da9c:	4619      	mov	r1, r3
 800da9e:	6878      	ldr	r0, [r7, #4]
 800daa0:	f001 fd48 	bl	800f534 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800daa4:	e01d      	b.n	800dae2 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800daa6:	6839      	ldr	r1, [r7, #0]
 800daa8:	6878      	ldr	r0, [r7, #4]
 800daaa:	f001 fcd2 	bl	800f452 <USBD_CtlError>
            ret = USBD_FAIL;
 800daae:	2303      	movs	r3, #3
 800dab0:	75fb      	strb	r3, [r7, #23]
          break;
 800dab2:	e016      	b.n	800dae2 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800dab4:	687b      	ldr	r3, [r7, #4]
 800dab6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800daba:	b2db      	uxtb	r3, r3
 800dabc:	2b03      	cmp	r3, #3
 800dabe:	d00f      	beq.n	800dae0 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800dac0:	6839      	ldr	r1, [r7, #0]
 800dac2:	6878      	ldr	r0, [r7, #4]
 800dac4:	f001 fcc5 	bl	800f452 <USBD_CtlError>
            ret = USBD_FAIL;
 800dac8:	2303      	movs	r3, #3
 800daca:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800dacc:	e008      	b.n	800dae0 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800dace:	6839      	ldr	r1, [r7, #0]
 800dad0:	6878      	ldr	r0, [r7, #4]
 800dad2:	f001 fcbe 	bl	800f452 <USBD_CtlError>
          ret = USBD_FAIL;
 800dad6:	2303      	movs	r3, #3
 800dad8:	75fb      	strb	r3, [r7, #23]
          break;
 800dada:	e002      	b.n	800dae2 <USBD_CDC_Setup+0x19e>
          break;
 800dadc:	bf00      	nop
 800dade:	e008      	b.n	800daf2 <USBD_CDC_Setup+0x1ae>
          break;
 800dae0:	bf00      	nop
      }
      break;
 800dae2:	e006      	b.n	800daf2 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800dae4:	6839      	ldr	r1, [r7, #0]
 800dae6:	6878      	ldr	r0, [r7, #4]
 800dae8:	f001 fcb3 	bl	800f452 <USBD_CtlError>
      ret = USBD_FAIL;
 800daec:	2303      	movs	r3, #3
 800daee:	75fb      	strb	r3, [r7, #23]
      break;
 800daf0:	bf00      	nop
  }

  return (uint8_t)ret;
 800daf2:	7dfb      	ldrb	r3, [r7, #23]
}
 800daf4:	4618      	mov	r0, r3
 800daf6:	3718      	adds	r7, #24
 800daf8:	46bd      	mov	sp, r7
 800dafa:	bd80      	pop	{r7, pc}

0800dafc <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800dafc:	b580      	push	{r7, lr}
 800dafe:	b084      	sub	sp, #16
 800db00:	af00      	add	r7, sp, #0
 800db02:	6078      	str	r0, [r7, #4]
 800db04:	460b      	mov	r3, r1
 800db06:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800db08:	687b      	ldr	r3, [r7, #4]
 800db0a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800db0e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800db10:	687b      	ldr	r3, [r7, #4]
 800db12:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800db16:	687b      	ldr	r3, [r7, #4]
 800db18:	32b0      	adds	r2, #176	; 0xb0
 800db1a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800db1e:	2b00      	cmp	r3, #0
 800db20:	d101      	bne.n	800db26 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800db22:	2303      	movs	r3, #3
 800db24:	e065      	b.n	800dbf2 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800db26:	687b      	ldr	r3, [r7, #4]
 800db28:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800db2c:	687b      	ldr	r3, [r7, #4]
 800db2e:	32b0      	adds	r2, #176	; 0xb0
 800db30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800db34:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800db36:	78fb      	ldrb	r3, [r7, #3]
 800db38:	f003 020f 	and.w	r2, r3, #15
 800db3c:	6879      	ldr	r1, [r7, #4]
 800db3e:	4613      	mov	r3, r2
 800db40:	009b      	lsls	r3, r3, #2
 800db42:	4413      	add	r3, r2
 800db44:	009b      	lsls	r3, r3, #2
 800db46:	440b      	add	r3, r1
 800db48:	3318      	adds	r3, #24
 800db4a:	681b      	ldr	r3, [r3, #0]
 800db4c:	2b00      	cmp	r3, #0
 800db4e:	d02f      	beq.n	800dbb0 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800db50:	78fb      	ldrb	r3, [r7, #3]
 800db52:	f003 020f 	and.w	r2, r3, #15
 800db56:	6879      	ldr	r1, [r7, #4]
 800db58:	4613      	mov	r3, r2
 800db5a:	009b      	lsls	r3, r3, #2
 800db5c:	4413      	add	r3, r2
 800db5e:	009b      	lsls	r3, r3, #2
 800db60:	440b      	add	r3, r1
 800db62:	3318      	adds	r3, #24
 800db64:	681a      	ldr	r2, [r3, #0]
 800db66:	78fb      	ldrb	r3, [r7, #3]
 800db68:	f003 010f 	and.w	r1, r3, #15
 800db6c:	68f8      	ldr	r0, [r7, #12]
 800db6e:	460b      	mov	r3, r1
 800db70:	00db      	lsls	r3, r3, #3
 800db72:	440b      	add	r3, r1
 800db74:	009b      	lsls	r3, r3, #2
 800db76:	4403      	add	r3, r0
 800db78:	3348      	adds	r3, #72	; 0x48
 800db7a:	681b      	ldr	r3, [r3, #0]
 800db7c:	fbb2 f1f3 	udiv	r1, r2, r3
 800db80:	fb01 f303 	mul.w	r3, r1, r3
 800db84:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800db86:	2b00      	cmp	r3, #0
 800db88:	d112      	bne.n	800dbb0 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800db8a:	78fb      	ldrb	r3, [r7, #3]
 800db8c:	f003 020f 	and.w	r2, r3, #15
 800db90:	6879      	ldr	r1, [r7, #4]
 800db92:	4613      	mov	r3, r2
 800db94:	009b      	lsls	r3, r3, #2
 800db96:	4413      	add	r3, r2
 800db98:	009b      	lsls	r3, r3, #2
 800db9a:	440b      	add	r3, r1
 800db9c:	3318      	adds	r3, #24
 800db9e:	2200      	movs	r2, #0
 800dba0:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800dba2:	78f9      	ldrb	r1, [r7, #3]
 800dba4:	2300      	movs	r3, #0
 800dba6:	2200      	movs	r2, #0
 800dba8:	6878      	ldr	r0, [r7, #4]
 800dbaa:	f002 f9f6 	bl	800ff9a <USBD_LL_Transmit>
 800dbae:	e01f      	b.n	800dbf0 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800dbb0:	68bb      	ldr	r3, [r7, #8]
 800dbb2:	2200      	movs	r2, #0
 800dbb4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800dbb8:	687b      	ldr	r3, [r7, #4]
 800dbba:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800dbbe:	687a      	ldr	r2, [r7, #4]
 800dbc0:	33b0      	adds	r3, #176	; 0xb0
 800dbc2:	009b      	lsls	r3, r3, #2
 800dbc4:	4413      	add	r3, r2
 800dbc6:	685b      	ldr	r3, [r3, #4]
 800dbc8:	691b      	ldr	r3, [r3, #16]
 800dbca:	2b00      	cmp	r3, #0
 800dbcc:	d010      	beq.n	800dbf0 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800dbce:	687b      	ldr	r3, [r7, #4]
 800dbd0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800dbd4:	687a      	ldr	r2, [r7, #4]
 800dbd6:	33b0      	adds	r3, #176	; 0xb0
 800dbd8:	009b      	lsls	r3, r3, #2
 800dbda:	4413      	add	r3, r2
 800dbdc:	685b      	ldr	r3, [r3, #4]
 800dbde:	691b      	ldr	r3, [r3, #16]
 800dbe0:	68ba      	ldr	r2, [r7, #8]
 800dbe2:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800dbe6:	68ba      	ldr	r2, [r7, #8]
 800dbe8:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800dbec:	78fa      	ldrb	r2, [r7, #3]
 800dbee:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800dbf0:	2300      	movs	r3, #0
}
 800dbf2:	4618      	mov	r0, r3
 800dbf4:	3710      	adds	r7, #16
 800dbf6:	46bd      	mov	sp, r7
 800dbf8:	bd80      	pop	{r7, pc}

0800dbfa <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800dbfa:	b580      	push	{r7, lr}
 800dbfc:	b084      	sub	sp, #16
 800dbfe:	af00      	add	r7, sp, #0
 800dc00:	6078      	str	r0, [r7, #4]
 800dc02:	460b      	mov	r3, r1
 800dc04:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800dc06:	687b      	ldr	r3, [r7, #4]
 800dc08:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800dc0c:	687b      	ldr	r3, [r7, #4]
 800dc0e:	32b0      	adds	r2, #176	; 0xb0
 800dc10:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dc14:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800dc16:	687b      	ldr	r3, [r7, #4]
 800dc18:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800dc1c:	687b      	ldr	r3, [r7, #4]
 800dc1e:	32b0      	adds	r2, #176	; 0xb0
 800dc20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dc24:	2b00      	cmp	r3, #0
 800dc26:	d101      	bne.n	800dc2c <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800dc28:	2303      	movs	r3, #3
 800dc2a:	e01a      	b.n	800dc62 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800dc2c:	78fb      	ldrb	r3, [r7, #3]
 800dc2e:	4619      	mov	r1, r3
 800dc30:	6878      	ldr	r0, [r7, #4]
 800dc32:	f002 f9f4 	bl	801001e <USBD_LL_GetRxDataSize>
 800dc36:	4602      	mov	r2, r0
 800dc38:	68fb      	ldr	r3, [r7, #12]
 800dc3a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800dc3e:	687b      	ldr	r3, [r7, #4]
 800dc40:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800dc44:	687a      	ldr	r2, [r7, #4]
 800dc46:	33b0      	adds	r3, #176	; 0xb0
 800dc48:	009b      	lsls	r3, r3, #2
 800dc4a:	4413      	add	r3, r2
 800dc4c:	685b      	ldr	r3, [r3, #4]
 800dc4e:	68db      	ldr	r3, [r3, #12]
 800dc50:	68fa      	ldr	r2, [r7, #12]
 800dc52:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800dc56:	68fa      	ldr	r2, [r7, #12]
 800dc58:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800dc5c:	4611      	mov	r1, r2
 800dc5e:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800dc60:	2300      	movs	r3, #0
}
 800dc62:	4618      	mov	r0, r3
 800dc64:	3710      	adds	r7, #16
 800dc66:	46bd      	mov	sp, r7
 800dc68:	bd80      	pop	{r7, pc}

0800dc6a <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800dc6a:	b580      	push	{r7, lr}
 800dc6c:	b084      	sub	sp, #16
 800dc6e:	af00      	add	r7, sp, #0
 800dc70:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800dc72:	687b      	ldr	r3, [r7, #4]
 800dc74:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800dc78:	687b      	ldr	r3, [r7, #4]
 800dc7a:	32b0      	adds	r2, #176	; 0xb0
 800dc7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dc80:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800dc82:	68fb      	ldr	r3, [r7, #12]
 800dc84:	2b00      	cmp	r3, #0
 800dc86:	d101      	bne.n	800dc8c <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800dc88:	2303      	movs	r3, #3
 800dc8a:	e025      	b.n	800dcd8 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800dc8c:	687b      	ldr	r3, [r7, #4]
 800dc8e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800dc92:	687a      	ldr	r2, [r7, #4]
 800dc94:	33b0      	adds	r3, #176	; 0xb0
 800dc96:	009b      	lsls	r3, r3, #2
 800dc98:	4413      	add	r3, r2
 800dc9a:	685b      	ldr	r3, [r3, #4]
 800dc9c:	2b00      	cmp	r3, #0
 800dc9e:	d01a      	beq.n	800dcd6 <USBD_CDC_EP0_RxReady+0x6c>
 800dca0:	68fb      	ldr	r3, [r7, #12]
 800dca2:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800dca6:	2bff      	cmp	r3, #255	; 0xff
 800dca8:	d015      	beq.n	800dcd6 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800dcaa:	687b      	ldr	r3, [r7, #4]
 800dcac:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800dcb0:	687a      	ldr	r2, [r7, #4]
 800dcb2:	33b0      	adds	r3, #176	; 0xb0
 800dcb4:	009b      	lsls	r3, r3, #2
 800dcb6:	4413      	add	r3, r2
 800dcb8:	685b      	ldr	r3, [r3, #4]
 800dcba:	689b      	ldr	r3, [r3, #8]
 800dcbc:	68fa      	ldr	r2, [r7, #12]
 800dcbe:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 800dcc2:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800dcc4:	68fa      	ldr	r2, [r7, #12]
 800dcc6:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800dcca:	b292      	uxth	r2, r2
 800dccc:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800dcce:	68fb      	ldr	r3, [r7, #12]
 800dcd0:	22ff      	movs	r2, #255	; 0xff
 800dcd2:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800dcd6:	2300      	movs	r3, #0
}
 800dcd8:	4618      	mov	r0, r3
 800dcda:	3710      	adds	r7, #16
 800dcdc:	46bd      	mov	sp, r7
 800dcde:	bd80      	pop	{r7, pc}

0800dce0 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800dce0:	b580      	push	{r7, lr}
 800dce2:	b086      	sub	sp, #24
 800dce4:	af00      	add	r7, sp, #0
 800dce6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800dce8:	2182      	movs	r1, #130	; 0x82
 800dcea:	4818      	ldr	r0, [pc, #96]	; (800dd4c <USBD_CDC_GetFSCfgDesc+0x6c>)
 800dcec:	f000 fd4f 	bl	800e78e <USBD_GetEpDesc>
 800dcf0:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800dcf2:	2101      	movs	r1, #1
 800dcf4:	4815      	ldr	r0, [pc, #84]	; (800dd4c <USBD_CDC_GetFSCfgDesc+0x6c>)
 800dcf6:	f000 fd4a 	bl	800e78e <USBD_GetEpDesc>
 800dcfa:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800dcfc:	2181      	movs	r1, #129	; 0x81
 800dcfe:	4813      	ldr	r0, [pc, #76]	; (800dd4c <USBD_CDC_GetFSCfgDesc+0x6c>)
 800dd00:	f000 fd45 	bl	800e78e <USBD_GetEpDesc>
 800dd04:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800dd06:	697b      	ldr	r3, [r7, #20]
 800dd08:	2b00      	cmp	r3, #0
 800dd0a:	d002      	beq.n	800dd12 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800dd0c:	697b      	ldr	r3, [r7, #20]
 800dd0e:	2210      	movs	r2, #16
 800dd10:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800dd12:	693b      	ldr	r3, [r7, #16]
 800dd14:	2b00      	cmp	r3, #0
 800dd16:	d006      	beq.n	800dd26 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800dd18:	693b      	ldr	r3, [r7, #16]
 800dd1a:	2200      	movs	r2, #0
 800dd1c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800dd20:	711a      	strb	r2, [r3, #4]
 800dd22:	2200      	movs	r2, #0
 800dd24:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800dd26:	68fb      	ldr	r3, [r7, #12]
 800dd28:	2b00      	cmp	r3, #0
 800dd2a:	d006      	beq.n	800dd3a <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800dd2c:	68fb      	ldr	r3, [r7, #12]
 800dd2e:	2200      	movs	r2, #0
 800dd30:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800dd34:	711a      	strb	r2, [r3, #4]
 800dd36:	2200      	movs	r2, #0
 800dd38:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800dd3a:	687b      	ldr	r3, [r7, #4]
 800dd3c:	2243      	movs	r2, #67	; 0x43
 800dd3e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800dd40:	4b02      	ldr	r3, [pc, #8]	; (800dd4c <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800dd42:	4618      	mov	r0, r3
 800dd44:	3718      	adds	r7, #24
 800dd46:	46bd      	mov	sp, r7
 800dd48:	bd80      	pop	{r7, pc}
 800dd4a:	bf00      	nop
 800dd4c:	2000014c 	.word	0x2000014c

0800dd50 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800dd50:	b580      	push	{r7, lr}
 800dd52:	b086      	sub	sp, #24
 800dd54:	af00      	add	r7, sp, #0
 800dd56:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800dd58:	2182      	movs	r1, #130	; 0x82
 800dd5a:	4818      	ldr	r0, [pc, #96]	; (800ddbc <USBD_CDC_GetHSCfgDesc+0x6c>)
 800dd5c:	f000 fd17 	bl	800e78e <USBD_GetEpDesc>
 800dd60:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800dd62:	2101      	movs	r1, #1
 800dd64:	4815      	ldr	r0, [pc, #84]	; (800ddbc <USBD_CDC_GetHSCfgDesc+0x6c>)
 800dd66:	f000 fd12 	bl	800e78e <USBD_GetEpDesc>
 800dd6a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800dd6c:	2181      	movs	r1, #129	; 0x81
 800dd6e:	4813      	ldr	r0, [pc, #76]	; (800ddbc <USBD_CDC_GetHSCfgDesc+0x6c>)
 800dd70:	f000 fd0d 	bl	800e78e <USBD_GetEpDesc>
 800dd74:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800dd76:	697b      	ldr	r3, [r7, #20]
 800dd78:	2b00      	cmp	r3, #0
 800dd7a:	d002      	beq.n	800dd82 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800dd7c:	697b      	ldr	r3, [r7, #20]
 800dd7e:	2210      	movs	r2, #16
 800dd80:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800dd82:	693b      	ldr	r3, [r7, #16]
 800dd84:	2b00      	cmp	r3, #0
 800dd86:	d006      	beq.n	800dd96 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800dd88:	693b      	ldr	r3, [r7, #16]
 800dd8a:	2200      	movs	r2, #0
 800dd8c:	711a      	strb	r2, [r3, #4]
 800dd8e:	2200      	movs	r2, #0
 800dd90:	f042 0202 	orr.w	r2, r2, #2
 800dd94:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800dd96:	68fb      	ldr	r3, [r7, #12]
 800dd98:	2b00      	cmp	r3, #0
 800dd9a:	d006      	beq.n	800ddaa <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800dd9c:	68fb      	ldr	r3, [r7, #12]
 800dd9e:	2200      	movs	r2, #0
 800dda0:	711a      	strb	r2, [r3, #4]
 800dda2:	2200      	movs	r2, #0
 800dda4:	f042 0202 	orr.w	r2, r2, #2
 800dda8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800ddaa:	687b      	ldr	r3, [r7, #4]
 800ddac:	2243      	movs	r2, #67	; 0x43
 800ddae:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800ddb0:	4b02      	ldr	r3, [pc, #8]	; (800ddbc <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800ddb2:	4618      	mov	r0, r3
 800ddb4:	3718      	adds	r7, #24
 800ddb6:	46bd      	mov	sp, r7
 800ddb8:	bd80      	pop	{r7, pc}
 800ddba:	bf00      	nop
 800ddbc:	2000014c 	.word	0x2000014c

0800ddc0 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800ddc0:	b580      	push	{r7, lr}
 800ddc2:	b086      	sub	sp, #24
 800ddc4:	af00      	add	r7, sp, #0
 800ddc6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800ddc8:	2182      	movs	r1, #130	; 0x82
 800ddca:	4818      	ldr	r0, [pc, #96]	; (800de2c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800ddcc:	f000 fcdf 	bl	800e78e <USBD_GetEpDesc>
 800ddd0:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800ddd2:	2101      	movs	r1, #1
 800ddd4:	4815      	ldr	r0, [pc, #84]	; (800de2c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800ddd6:	f000 fcda 	bl	800e78e <USBD_GetEpDesc>
 800ddda:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800dddc:	2181      	movs	r1, #129	; 0x81
 800ddde:	4813      	ldr	r0, [pc, #76]	; (800de2c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800dde0:	f000 fcd5 	bl	800e78e <USBD_GetEpDesc>
 800dde4:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800dde6:	697b      	ldr	r3, [r7, #20]
 800dde8:	2b00      	cmp	r3, #0
 800ddea:	d002      	beq.n	800ddf2 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800ddec:	697b      	ldr	r3, [r7, #20]
 800ddee:	2210      	movs	r2, #16
 800ddf0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800ddf2:	693b      	ldr	r3, [r7, #16]
 800ddf4:	2b00      	cmp	r3, #0
 800ddf6:	d006      	beq.n	800de06 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800ddf8:	693b      	ldr	r3, [r7, #16]
 800ddfa:	2200      	movs	r2, #0
 800ddfc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800de00:	711a      	strb	r2, [r3, #4]
 800de02:	2200      	movs	r2, #0
 800de04:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800de06:	68fb      	ldr	r3, [r7, #12]
 800de08:	2b00      	cmp	r3, #0
 800de0a:	d006      	beq.n	800de1a <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800de0c:	68fb      	ldr	r3, [r7, #12]
 800de0e:	2200      	movs	r2, #0
 800de10:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800de14:	711a      	strb	r2, [r3, #4]
 800de16:	2200      	movs	r2, #0
 800de18:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800de1a:	687b      	ldr	r3, [r7, #4]
 800de1c:	2243      	movs	r2, #67	; 0x43
 800de1e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800de20:	4b02      	ldr	r3, [pc, #8]	; (800de2c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800de22:	4618      	mov	r0, r3
 800de24:	3718      	adds	r7, #24
 800de26:	46bd      	mov	sp, r7
 800de28:	bd80      	pop	{r7, pc}
 800de2a:	bf00      	nop
 800de2c:	2000014c 	.word	0x2000014c

0800de30 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800de30:	b480      	push	{r7}
 800de32:	b083      	sub	sp, #12
 800de34:	af00      	add	r7, sp, #0
 800de36:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800de38:	687b      	ldr	r3, [r7, #4]
 800de3a:	220a      	movs	r2, #10
 800de3c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800de3e:	4b03      	ldr	r3, [pc, #12]	; (800de4c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800de40:	4618      	mov	r0, r3
 800de42:	370c      	adds	r7, #12
 800de44:	46bd      	mov	sp, r7
 800de46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de4a:	4770      	bx	lr
 800de4c:	20000108 	.word	0x20000108

0800de50 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800de50:	b480      	push	{r7}
 800de52:	b083      	sub	sp, #12
 800de54:	af00      	add	r7, sp, #0
 800de56:	6078      	str	r0, [r7, #4]
 800de58:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800de5a:	683b      	ldr	r3, [r7, #0]
 800de5c:	2b00      	cmp	r3, #0
 800de5e:	d101      	bne.n	800de64 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800de60:	2303      	movs	r3, #3
 800de62:	e009      	b.n	800de78 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800de64:	687b      	ldr	r3, [r7, #4]
 800de66:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800de6a:	687a      	ldr	r2, [r7, #4]
 800de6c:	33b0      	adds	r3, #176	; 0xb0
 800de6e:	009b      	lsls	r3, r3, #2
 800de70:	4413      	add	r3, r2
 800de72:	683a      	ldr	r2, [r7, #0]
 800de74:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800de76:	2300      	movs	r3, #0
}
 800de78:	4618      	mov	r0, r3
 800de7a:	370c      	adds	r7, #12
 800de7c:	46bd      	mov	sp, r7
 800de7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de82:	4770      	bx	lr

0800de84 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800de84:	b480      	push	{r7}
 800de86:	b087      	sub	sp, #28
 800de88:	af00      	add	r7, sp, #0
 800de8a:	60f8      	str	r0, [r7, #12]
 800de8c:	60b9      	str	r1, [r7, #8]
 800de8e:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800de90:	68fb      	ldr	r3, [r7, #12]
 800de92:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800de96:	68fb      	ldr	r3, [r7, #12]
 800de98:	32b0      	adds	r2, #176	; 0xb0
 800de9a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800de9e:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800dea0:	697b      	ldr	r3, [r7, #20]
 800dea2:	2b00      	cmp	r3, #0
 800dea4:	d101      	bne.n	800deaa <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800dea6:	2303      	movs	r3, #3
 800dea8:	e008      	b.n	800debc <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800deaa:	697b      	ldr	r3, [r7, #20]
 800deac:	68ba      	ldr	r2, [r7, #8]
 800deae:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800deb2:	697b      	ldr	r3, [r7, #20]
 800deb4:	687a      	ldr	r2, [r7, #4]
 800deb6:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800deba:	2300      	movs	r3, #0
}
 800debc:	4618      	mov	r0, r3
 800debe:	371c      	adds	r7, #28
 800dec0:	46bd      	mov	sp, r7
 800dec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dec6:	4770      	bx	lr

0800dec8 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800dec8:	b480      	push	{r7}
 800deca:	b085      	sub	sp, #20
 800decc:	af00      	add	r7, sp, #0
 800dece:	6078      	str	r0, [r7, #4]
 800ded0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ded2:	687b      	ldr	r3, [r7, #4]
 800ded4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ded8:	687b      	ldr	r3, [r7, #4]
 800deda:	32b0      	adds	r2, #176	; 0xb0
 800dedc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dee0:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800dee2:	68fb      	ldr	r3, [r7, #12]
 800dee4:	2b00      	cmp	r3, #0
 800dee6:	d101      	bne.n	800deec <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800dee8:	2303      	movs	r3, #3
 800deea:	e004      	b.n	800def6 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800deec:	68fb      	ldr	r3, [r7, #12]
 800deee:	683a      	ldr	r2, [r7, #0]
 800def0:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800def4:	2300      	movs	r3, #0
}
 800def6:	4618      	mov	r0, r3
 800def8:	3714      	adds	r7, #20
 800defa:	46bd      	mov	sp, r7
 800defc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df00:	4770      	bx	lr
	...

0800df04 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800df04:	b580      	push	{r7, lr}
 800df06:	b084      	sub	sp, #16
 800df08:	af00      	add	r7, sp, #0
 800df0a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800df0c:	687b      	ldr	r3, [r7, #4]
 800df0e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800df12:	687b      	ldr	r3, [r7, #4]
 800df14:	32b0      	adds	r2, #176	; 0xb0
 800df16:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800df1a:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 800df1c:	2301      	movs	r3, #1
 800df1e:	73fb      	strb	r3, [r7, #15]

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800df20:	687b      	ldr	r3, [r7, #4]
 800df22:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800df26:	687b      	ldr	r3, [r7, #4]
 800df28:	32b0      	adds	r2, #176	; 0xb0
 800df2a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800df2e:	2b00      	cmp	r3, #0
 800df30:	d101      	bne.n	800df36 <USBD_CDC_TransmitPacket+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800df32:	2303      	movs	r3, #3
 800df34:	e025      	b.n	800df82 <USBD_CDC_TransmitPacket+0x7e>
  }

  if (hcdc->TxState == 0U)
 800df36:	68bb      	ldr	r3, [r7, #8]
 800df38:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800df3c:	2b00      	cmp	r3, #0
 800df3e:	d11f      	bne.n	800df80 <USBD_CDC_TransmitPacket+0x7c>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800df40:	68bb      	ldr	r3, [r7, #8]
 800df42:	2201      	movs	r2, #1
 800df44:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 800df48:	4b10      	ldr	r3, [pc, #64]	; (800df8c <USBD_CDC_TransmitPacket+0x88>)
 800df4a:	781b      	ldrb	r3, [r3, #0]
 800df4c:	f003 020f 	and.w	r2, r3, #15
 800df50:	68bb      	ldr	r3, [r7, #8]
 800df52:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 800df56:	6878      	ldr	r0, [r7, #4]
 800df58:	4613      	mov	r3, r2
 800df5a:	009b      	lsls	r3, r3, #2
 800df5c:	4413      	add	r3, r2
 800df5e:	009b      	lsls	r3, r3, #2
 800df60:	4403      	add	r3, r0
 800df62:	3318      	adds	r3, #24
 800df64:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800df66:	4b09      	ldr	r3, [pc, #36]	; (800df8c <USBD_CDC_TransmitPacket+0x88>)
 800df68:	7819      	ldrb	r1, [r3, #0]
 800df6a:	68bb      	ldr	r3, [r7, #8]
 800df6c:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800df70:	68bb      	ldr	r3, [r7, #8]
 800df72:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800df76:	6878      	ldr	r0, [r7, #4]
 800df78:	f002 f80f 	bl	800ff9a <USBD_LL_Transmit>

    ret = USBD_OK;
 800df7c:	2300      	movs	r3, #0
 800df7e:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800df80:	7bfb      	ldrb	r3, [r7, #15]
}
 800df82:	4618      	mov	r0, r3
 800df84:	3710      	adds	r7, #16
 800df86:	46bd      	mov	sp, r7
 800df88:	bd80      	pop	{r7, pc}
 800df8a:	bf00      	nop
 800df8c:	2000018f 	.word	0x2000018f

0800df90 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800df90:	b580      	push	{r7, lr}
 800df92:	b084      	sub	sp, #16
 800df94:	af00      	add	r7, sp, #0
 800df96:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800df98:	687b      	ldr	r3, [r7, #4]
 800df9a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800df9e:	687b      	ldr	r3, [r7, #4]
 800dfa0:	32b0      	adds	r2, #176	; 0xb0
 800dfa2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dfa6:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800dfa8:	687b      	ldr	r3, [r7, #4]
 800dfaa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800dfae:	687b      	ldr	r3, [r7, #4]
 800dfb0:	32b0      	adds	r2, #176	; 0xb0
 800dfb2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dfb6:	2b00      	cmp	r3, #0
 800dfb8:	d101      	bne.n	800dfbe <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800dfba:	2303      	movs	r3, #3
 800dfbc:	e018      	b.n	800dff0 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800dfbe:	687b      	ldr	r3, [r7, #4]
 800dfc0:	7c1b      	ldrb	r3, [r3, #16]
 800dfc2:	2b00      	cmp	r3, #0
 800dfc4:	d10a      	bne.n	800dfdc <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800dfc6:	4b0c      	ldr	r3, [pc, #48]	; (800dff8 <USBD_CDC_ReceivePacket+0x68>)
 800dfc8:	7819      	ldrb	r1, [r3, #0]
 800dfca:	68fb      	ldr	r3, [r7, #12]
 800dfcc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800dfd0:	f44f 7300 	mov.w	r3, #512	; 0x200
 800dfd4:	6878      	ldr	r0, [r7, #4]
 800dfd6:	f002 f801 	bl	800ffdc <USBD_LL_PrepareReceive>
 800dfda:	e008      	b.n	800dfee <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800dfdc:	4b06      	ldr	r3, [pc, #24]	; (800dff8 <USBD_CDC_ReceivePacket+0x68>)
 800dfde:	7819      	ldrb	r1, [r3, #0]
 800dfe0:	68fb      	ldr	r3, [r7, #12]
 800dfe2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800dfe6:	2340      	movs	r3, #64	; 0x40
 800dfe8:	6878      	ldr	r0, [r7, #4]
 800dfea:	f001 fff7 	bl	800ffdc <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800dfee:	2300      	movs	r3, #0
}
 800dff0:	4618      	mov	r0, r3
 800dff2:	3710      	adds	r7, #16
 800dff4:	46bd      	mov	sp, r7
 800dff6:	bd80      	pop	{r7, pc}
 800dff8:	20000190 	.word	0x20000190

0800dffc <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800dffc:	b580      	push	{r7, lr}
 800dffe:	b086      	sub	sp, #24
 800e000:	af00      	add	r7, sp, #0
 800e002:	60f8      	str	r0, [r7, #12]
 800e004:	60b9      	str	r1, [r7, #8]
 800e006:	4613      	mov	r3, r2
 800e008:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800e00a:	68fb      	ldr	r3, [r7, #12]
 800e00c:	2b00      	cmp	r3, #0
 800e00e:	d101      	bne.n	800e014 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800e010:	2303      	movs	r3, #3
 800e012:	e01f      	b.n	800e054 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800e014:	68fb      	ldr	r3, [r7, #12]
 800e016:	2200      	movs	r2, #0
 800e018:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 800e01c:	68fb      	ldr	r3, [r7, #12]
 800e01e:	2200      	movs	r2, #0
 800e020:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800e024:	68fb      	ldr	r3, [r7, #12]
 800e026:	2200      	movs	r2, #0
 800e028:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800e02c:	68bb      	ldr	r3, [r7, #8]
 800e02e:	2b00      	cmp	r3, #0
 800e030:	d003      	beq.n	800e03a <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800e032:	68fb      	ldr	r3, [r7, #12]
 800e034:	68ba      	ldr	r2, [r7, #8]
 800e036:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800e03a:	68fb      	ldr	r3, [r7, #12]
 800e03c:	2201      	movs	r2, #1
 800e03e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800e042:	68fb      	ldr	r3, [r7, #12]
 800e044:	79fa      	ldrb	r2, [r7, #7]
 800e046:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800e048:	68f8      	ldr	r0, [r7, #12]
 800e04a:	f001 fe71 	bl	800fd30 <USBD_LL_Init>
 800e04e:	4603      	mov	r3, r0
 800e050:	75fb      	strb	r3, [r7, #23]

  return ret;
 800e052:	7dfb      	ldrb	r3, [r7, #23]
}
 800e054:	4618      	mov	r0, r3
 800e056:	3718      	adds	r7, #24
 800e058:	46bd      	mov	sp, r7
 800e05a:	bd80      	pop	{r7, pc}

0800e05c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800e05c:	b580      	push	{r7, lr}
 800e05e:	b084      	sub	sp, #16
 800e060:	af00      	add	r7, sp, #0
 800e062:	6078      	str	r0, [r7, #4]
 800e064:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800e066:	2300      	movs	r3, #0
 800e068:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800e06a:	683b      	ldr	r3, [r7, #0]
 800e06c:	2b00      	cmp	r3, #0
 800e06e:	d101      	bne.n	800e074 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800e070:	2303      	movs	r3, #3
 800e072:	e025      	b.n	800e0c0 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800e074:	687b      	ldr	r3, [r7, #4]
 800e076:	683a      	ldr	r2, [r7, #0]
 800e078:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800e07c:	687b      	ldr	r3, [r7, #4]
 800e07e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800e082:	687b      	ldr	r3, [r7, #4]
 800e084:	32ae      	adds	r2, #174	; 0xae
 800e086:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e08a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e08c:	2b00      	cmp	r3, #0
 800e08e:	d00f      	beq.n	800e0b0 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800e090:	687b      	ldr	r3, [r7, #4]
 800e092:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800e096:	687b      	ldr	r3, [r7, #4]
 800e098:	32ae      	adds	r2, #174	; 0xae
 800e09a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e09e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e0a0:	f107 020e 	add.w	r2, r7, #14
 800e0a4:	4610      	mov	r0, r2
 800e0a6:	4798      	blx	r3
 800e0a8:	4602      	mov	r2, r0
 800e0aa:	687b      	ldr	r3, [r7, #4]
 800e0ac:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 800e0b0:	687b      	ldr	r3, [r7, #4]
 800e0b2:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800e0b6:	1c5a      	adds	r2, r3, #1
 800e0b8:	687b      	ldr	r3, [r7, #4]
 800e0ba:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 800e0be:	2300      	movs	r3, #0
}
 800e0c0:	4618      	mov	r0, r3
 800e0c2:	3710      	adds	r7, #16
 800e0c4:	46bd      	mov	sp, r7
 800e0c6:	bd80      	pop	{r7, pc}

0800e0c8 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800e0c8:	b580      	push	{r7, lr}
 800e0ca:	b082      	sub	sp, #8
 800e0cc:	af00      	add	r7, sp, #0
 800e0ce:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800e0d0:	6878      	ldr	r0, [r7, #4]
 800e0d2:	f001 fe79 	bl	800fdc8 <USBD_LL_Start>
 800e0d6:	4603      	mov	r3, r0
}
 800e0d8:	4618      	mov	r0, r3
 800e0da:	3708      	adds	r7, #8
 800e0dc:	46bd      	mov	sp, r7
 800e0de:	bd80      	pop	{r7, pc}

0800e0e0 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800e0e0:	b480      	push	{r7}
 800e0e2:	b083      	sub	sp, #12
 800e0e4:	af00      	add	r7, sp, #0
 800e0e6:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800e0e8:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800e0ea:	4618      	mov	r0, r3
 800e0ec:	370c      	adds	r7, #12
 800e0ee:	46bd      	mov	sp, r7
 800e0f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0f4:	4770      	bx	lr

0800e0f6 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800e0f6:	b580      	push	{r7, lr}
 800e0f8:	b084      	sub	sp, #16
 800e0fa:	af00      	add	r7, sp, #0
 800e0fc:	6078      	str	r0, [r7, #4]
 800e0fe:	460b      	mov	r3, r1
 800e100:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800e102:	2300      	movs	r3, #0
 800e104:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800e106:	687b      	ldr	r3, [r7, #4]
 800e108:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e10c:	2b00      	cmp	r3, #0
 800e10e:	d009      	beq.n	800e124 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800e110:	687b      	ldr	r3, [r7, #4]
 800e112:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e116:	681b      	ldr	r3, [r3, #0]
 800e118:	78fa      	ldrb	r2, [r7, #3]
 800e11a:	4611      	mov	r1, r2
 800e11c:	6878      	ldr	r0, [r7, #4]
 800e11e:	4798      	blx	r3
 800e120:	4603      	mov	r3, r0
 800e122:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800e124:	7bfb      	ldrb	r3, [r7, #15]
}
 800e126:	4618      	mov	r0, r3
 800e128:	3710      	adds	r7, #16
 800e12a:	46bd      	mov	sp, r7
 800e12c:	bd80      	pop	{r7, pc}

0800e12e <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800e12e:	b580      	push	{r7, lr}
 800e130:	b084      	sub	sp, #16
 800e132:	af00      	add	r7, sp, #0
 800e134:	6078      	str	r0, [r7, #4]
 800e136:	460b      	mov	r3, r1
 800e138:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800e13a:	2300      	movs	r3, #0
 800e13c:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800e13e:	687b      	ldr	r3, [r7, #4]
 800e140:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e144:	685b      	ldr	r3, [r3, #4]
 800e146:	78fa      	ldrb	r2, [r7, #3]
 800e148:	4611      	mov	r1, r2
 800e14a:	6878      	ldr	r0, [r7, #4]
 800e14c:	4798      	blx	r3
 800e14e:	4603      	mov	r3, r0
 800e150:	2b00      	cmp	r3, #0
 800e152:	d001      	beq.n	800e158 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800e154:	2303      	movs	r3, #3
 800e156:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800e158:	7bfb      	ldrb	r3, [r7, #15]
}
 800e15a:	4618      	mov	r0, r3
 800e15c:	3710      	adds	r7, #16
 800e15e:	46bd      	mov	sp, r7
 800e160:	bd80      	pop	{r7, pc}

0800e162 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800e162:	b580      	push	{r7, lr}
 800e164:	b084      	sub	sp, #16
 800e166:	af00      	add	r7, sp, #0
 800e168:	6078      	str	r0, [r7, #4]
 800e16a:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800e16c:	687b      	ldr	r3, [r7, #4]
 800e16e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800e172:	6839      	ldr	r1, [r7, #0]
 800e174:	4618      	mov	r0, r3
 800e176:	f001 f932 	bl	800f3de <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800e17a:	687b      	ldr	r3, [r7, #4]
 800e17c:	2201      	movs	r2, #1
 800e17e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800e182:	687b      	ldr	r3, [r7, #4]
 800e184:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800e188:	461a      	mov	r2, r3
 800e18a:	687b      	ldr	r3, [r7, #4]
 800e18c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800e190:	687b      	ldr	r3, [r7, #4]
 800e192:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800e196:	f003 031f 	and.w	r3, r3, #31
 800e19a:	2b02      	cmp	r3, #2
 800e19c:	d01a      	beq.n	800e1d4 <USBD_LL_SetupStage+0x72>
 800e19e:	2b02      	cmp	r3, #2
 800e1a0:	d822      	bhi.n	800e1e8 <USBD_LL_SetupStage+0x86>
 800e1a2:	2b00      	cmp	r3, #0
 800e1a4:	d002      	beq.n	800e1ac <USBD_LL_SetupStage+0x4a>
 800e1a6:	2b01      	cmp	r3, #1
 800e1a8:	d00a      	beq.n	800e1c0 <USBD_LL_SetupStage+0x5e>
 800e1aa:	e01d      	b.n	800e1e8 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800e1ac:	687b      	ldr	r3, [r7, #4]
 800e1ae:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800e1b2:	4619      	mov	r1, r3
 800e1b4:	6878      	ldr	r0, [r7, #4]
 800e1b6:	f000 fb5f 	bl	800e878 <USBD_StdDevReq>
 800e1ba:	4603      	mov	r3, r0
 800e1bc:	73fb      	strb	r3, [r7, #15]
      break;
 800e1be:	e020      	b.n	800e202 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800e1c0:	687b      	ldr	r3, [r7, #4]
 800e1c2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800e1c6:	4619      	mov	r1, r3
 800e1c8:	6878      	ldr	r0, [r7, #4]
 800e1ca:	f000 fbc7 	bl	800e95c <USBD_StdItfReq>
 800e1ce:	4603      	mov	r3, r0
 800e1d0:	73fb      	strb	r3, [r7, #15]
      break;
 800e1d2:	e016      	b.n	800e202 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800e1d4:	687b      	ldr	r3, [r7, #4]
 800e1d6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800e1da:	4619      	mov	r1, r3
 800e1dc:	6878      	ldr	r0, [r7, #4]
 800e1de:	f000 fc29 	bl	800ea34 <USBD_StdEPReq>
 800e1e2:	4603      	mov	r3, r0
 800e1e4:	73fb      	strb	r3, [r7, #15]
      break;
 800e1e6:	e00c      	b.n	800e202 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800e1e8:	687b      	ldr	r3, [r7, #4]
 800e1ea:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800e1ee:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800e1f2:	b2db      	uxtb	r3, r3
 800e1f4:	4619      	mov	r1, r3
 800e1f6:	6878      	ldr	r0, [r7, #4]
 800e1f8:	f001 fe46 	bl	800fe88 <USBD_LL_StallEP>
 800e1fc:	4603      	mov	r3, r0
 800e1fe:	73fb      	strb	r3, [r7, #15]
      break;
 800e200:	bf00      	nop
  }

  return ret;
 800e202:	7bfb      	ldrb	r3, [r7, #15]
}
 800e204:	4618      	mov	r0, r3
 800e206:	3710      	adds	r7, #16
 800e208:	46bd      	mov	sp, r7
 800e20a:	bd80      	pop	{r7, pc}

0800e20c <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800e20c:	b580      	push	{r7, lr}
 800e20e:	b086      	sub	sp, #24
 800e210:	af00      	add	r7, sp, #0
 800e212:	60f8      	str	r0, [r7, #12]
 800e214:	460b      	mov	r3, r1
 800e216:	607a      	str	r2, [r7, #4]
 800e218:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800e21a:	2300      	movs	r3, #0
 800e21c:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800e21e:	7afb      	ldrb	r3, [r7, #11]
 800e220:	2b00      	cmp	r3, #0
 800e222:	d16e      	bne.n	800e302 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800e224:	68fb      	ldr	r3, [r7, #12]
 800e226:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800e22a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800e22c:	68fb      	ldr	r3, [r7, #12]
 800e22e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800e232:	2b03      	cmp	r3, #3
 800e234:	f040 8098 	bne.w	800e368 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800e238:	693b      	ldr	r3, [r7, #16]
 800e23a:	689a      	ldr	r2, [r3, #8]
 800e23c:	693b      	ldr	r3, [r7, #16]
 800e23e:	68db      	ldr	r3, [r3, #12]
 800e240:	429a      	cmp	r2, r3
 800e242:	d913      	bls.n	800e26c <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800e244:	693b      	ldr	r3, [r7, #16]
 800e246:	689a      	ldr	r2, [r3, #8]
 800e248:	693b      	ldr	r3, [r7, #16]
 800e24a:	68db      	ldr	r3, [r3, #12]
 800e24c:	1ad2      	subs	r2, r2, r3
 800e24e:	693b      	ldr	r3, [r7, #16]
 800e250:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800e252:	693b      	ldr	r3, [r7, #16]
 800e254:	68da      	ldr	r2, [r3, #12]
 800e256:	693b      	ldr	r3, [r7, #16]
 800e258:	689b      	ldr	r3, [r3, #8]
 800e25a:	4293      	cmp	r3, r2
 800e25c:	bf28      	it	cs
 800e25e:	4613      	movcs	r3, r2
 800e260:	461a      	mov	r2, r3
 800e262:	6879      	ldr	r1, [r7, #4]
 800e264:	68f8      	ldr	r0, [r7, #12]
 800e266:	f001 f9ae 	bl	800f5c6 <USBD_CtlContinueRx>
 800e26a:	e07d      	b.n	800e368 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800e26c:	68fb      	ldr	r3, [r7, #12]
 800e26e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800e272:	f003 031f 	and.w	r3, r3, #31
 800e276:	2b02      	cmp	r3, #2
 800e278:	d014      	beq.n	800e2a4 <USBD_LL_DataOutStage+0x98>
 800e27a:	2b02      	cmp	r3, #2
 800e27c:	d81d      	bhi.n	800e2ba <USBD_LL_DataOutStage+0xae>
 800e27e:	2b00      	cmp	r3, #0
 800e280:	d002      	beq.n	800e288 <USBD_LL_DataOutStage+0x7c>
 800e282:	2b01      	cmp	r3, #1
 800e284:	d003      	beq.n	800e28e <USBD_LL_DataOutStage+0x82>
 800e286:	e018      	b.n	800e2ba <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800e288:	2300      	movs	r3, #0
 800e28a:	75bb      	strb	r3, [r7, #22]
            break;
 800e28c:	e018      	b.n	800e2c0 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800e28e:	68fb      	ldr	r3, [r7, #12]
 800e290:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800e294:	b2db      	uxtb	r3, r3
 800e296:	4619      	mov	r1, r3
 800e298:	68f8      	ldr	r0, [r7, #12]
 800e29a:	f000 fa5e 	bl	800e75a <USBD_CoreFindIF>
 800e29e:	4603      	mov	r3, r0
 800e2a0:	75bb      	strb	r3, [r7, #22]
            break;
 800e2a2:	e00d      	b.n	800e2c0 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800e2a4:	68fb      	ldr	r3, [r7, #12]
 800e2a6:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800e2aa:	b2db      	uxtb	r3, r3
 800e2ac:	4619      	mov	r1, r3
 800e2ae:	68f8      	ldr	r0, [r7, #12]
 800e2b0:	f000 fa60 	bl	800e774 <USBD_CoreFindEP>
 800e2b4:	4603      	mov	r3, r0
 800e2b6:	75bb      	strb	r3, [r7, #22]
            break;
 800e2b8:	e002      	b.n	800e2c0 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800e2ba:	2300      	movs	r3, #0
 800e2bc:	75bb      	strb	r3, [r7, #22]
            break;
 800e2be:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800e2c0:	7dbb      	ldrb	r3, [r7, #22]
 800e2c2:	2b00      	cmp	r3, #0
 800e2c4:	d119      	bne.n	800e2fa <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e2c6:	68fb      	ldr	r3, [r7, #12]
 800e2c8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e2cc:	b2db      	uxtb	r3, r3
 800e2ce:	2b03      	cmp	r3, #3
 800e2d0:	d113      	bne.n	800e2fa <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800e2d2:	7dba      	ldrb	r2, [r7, #22]
 800e2d4:	68fb      	ldr	r3, [r7, #12]
 800e2d6:	32ae      	adds	r2, #174	; 0xae
 800e2d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e2dc:	691b      	ldr	r3, [r3, #16]
 800e2de:	2b00      	cmp	r3, #0
 800e2e0:	d00b      	beq.n	800e2fa <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800e2e2:	7dba      	ldrb	r2, [r7, #22]
 800e2e4:	68fb      	ldr	r3, [r7, #12]
 800e2e6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800e2ea:	7dba      	ldrb	r2, [r7, #22]
 800e2ec:	68fb      	ldr	r3, [r7, #12]
 800e2ee:	32ae      	adds	r2, #174	; 0xae
 800e2f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e2f4:	691b      	ldr	r3, [r3, #16]
 800e2f6:	68f8      	ldr	r0, [r7, #12]
 800e2f8:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800e2fa:	68f8      	ldr	r0, [r7, #12]
 800e2fc:	f001 f974 	bl	800f5e8 <USBD_CtlSendStatus>
 800e300:	e032      	b.n	800e368 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800e302:	7afb      	ldrb	r3, [r7, #11]
 800e304:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e308:	b2db      	uxtb	r3, r3
 800e30a:	4619      	mov	r1, r3
 800e30c:	68f8      	ldr	r0, [r7, #12]
 800e30e:	f000 fa31 	bl	800e774 <USBD_CoreFindEP>
 800e312:	4603      	mov	r3, r0
 800e314:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800e316:	7dbb      	ldrb	r3, [r7, #22]
 800e318:	2bff      	cmp	r3, #255	; 0xff
 800e31a:	d025      	beq.n	800e368 <USBD_LL_DataOutStage+0x15c>
 800e31c:	7dbb      	ldrb	r3, [r7, #22]
 800e31e:	2b00      	cmp	r3, #0
 800e320:	d122      	bne.n	800e368 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e322:	68fb      	ldr	r3, [r7, #12]
 800e324:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e328:	b2db      	uxtb	r3, r3
 800e32a:	2b03      	cmp	r3, #3
 800e32c:	d117      	bne.n	800e35e <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800e32e:	7dba      	ldrb	r2, [r7, #22]
 800e330:	68fb      	ldr	r3, [r7, #12]
 800e332:	32ae      	adds	r2, #174	; 0xae
 800e334:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e338:	699b      	ldr	r3, [r3, #24]
 800e33a:	2b00      	cmp	r3, #0
 800e33c:	d00f      	beq.n	800e35e <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800e33e:	7dba      	ldrb	r2, [r7, #22]
 800e340:	68fb      	ldr	r3, [r7, #12]
 800e342:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800e346:	7dba      	ldrb	r2, [r7, #22]
 800e348:	68fb      	ldr	r3, [r7, #12]
 800e34a:	32ae      	adds	r2, #174	; 0xae
 800e34c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e350:	699b      	ldr	r3, [r3, #24]
 800e352:	7afa      	ldrb	r2, [r7, #11]
 800e354:	4611      	mov	r1, r2
 800e356:	68f8      	ldr	r0, [r7, #12]
 800e358:	4798      	blx	r3
 800e35a:	4603      	mov	r3, r0
 800e35c:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800e35e:	7dfb      	ldrb	r3, [r7, #23]
 800e360:	2b00      	cmp	r3, #0
 800e362:	d001      	beq.n	800e368 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800e364:	7dfb      	ldrb	r3, [r7, #23]
 800e366:	e000      	b.n	800e36a <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800e368:	2300      	movs	r3, #0
}
 800e36a:	4618      	mov	r0, r3
 800e36c:	3718      	adds	r7, #24
 800e36e:	46bd      	mov	sp, r7
 800e370:	bd80      	pop	{r7, pc}

0800e372 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800e372:	b580      	push	{r7, lr}
 800e374:	b086      	sub	sp, #24
 800e376:	af00      	add	r7, sp, #0
 800e378:	60f8      	str	r0, [r7, #12]
 800e37a:	460b      	mov	r3, r1
 800e37c:	607a      	str	r2, [r7, #4]
 800e37e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800e380:	7afb      	ldrb	r3, [r7, #11]
 800e382:	2b00      	cmp	r3, #0
 800e384:	d16f      	bne.n	800e466 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800e386:	68fb      	ldr	r3, [r7, #12]
 800e388:	3314      	adds	r3, #20
 800e38a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800e38c:	68fb      	ldr	r3, [r7, #12]
 800e38e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800e392:	2b02      	cmp	r3, #2
 800e394:	d15a      	bne.n	800e44c <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800e396:	693b      	ldr	r3, [r7, #16]
 800e398:	689a      	ldr	r2, [r3, #8]
 800e39a:	693b      	ldr	r3, [r7, #16]
 800e39c:	68db      	ldr	r3, [r3, #12]
 800e39e:	429a      	cmp	r2, r3
 800e3a0:	d914      	bls.n	800e3cc <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800e3a2:	693b      	ldr	r3, [r7, #16]
 800e3a4:	689a      	ldr	r2, [r3, #8]
 800e3a6:	693b      	ldr	r3, [r7, #16]
 800e3a8:	68db      	ldr	r3, [r3, #12]
 800e3aa:	1ad2      	subs	r2, r2, r3
 800e3ac:	693b      	ldr	r3, [r7, #16]
 800e3ae:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800e3b0:	693b      	ldr	r3, [r7, #16]
 800e3b2:	689b      	ldr	r3, [r3, #8]
 800e3b4:	461a      	mov	r2, r3
 800e3b6:	6879      	ldr	r1, [r7, #4]
 800e3b8:	68f8      	ldr	r0, [r7, #12]
 800e3ba:	f001 f8d6 	bl	800f56a <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800e3be:	2300      	movs	r3, #0
 800e3c0:	2200      	movs	r2, #0
 800e3c2:	2100      	movs	r1, #0
 800e3c4:	68f8      	ldr	r0, [r7, #12]
 800e3c6:	f001 fe09 	bl	800ffdc <USBD_LL_PrepareReceive>
 800e3ca:	e03f      	b.n	800e44c <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800e3cc:	693b      	ldr	r3, [r7, #16]
 800e3ce:	68da      	ldr	r2, [r3, #12]
 800e3d0:	693b      	ldr	r3, [r7, #16]
 800e3d2:	689b      	ldr	r3, [r3, #8]
 800e3d4:	429a      	cmp	r2, r3
 800e3d6:	d11c      	bne.n	800e412 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800e3d8:	693b      	ldr	r3, [r7, #16]
 800e3da:	685a      	ldr	r2, [r3, #4]
 800e3dc:	693b      	ldr	r3, [r7, #16]
 800e3de:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800e3e0:	429a      	cmp	r2, r3
 800e3e2:	d316      	bcc.n	800e412 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800e3e4:	693b      	ldr	r3, [r7, #16]
 800e3e6:	685a      	ldr	r2, [r3, #4]
 800e3e8:	68fb      	ldr	r3, [r7, #12]
 800e3ea:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800e3ee:	429a      	cmp	r2, r3
 800e3f0:	d20f      	bcs.n	800e412 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800e3f2:	2200      	movs	r2, #0
 800e3f4:	2100      	movs	r1, #0
 800e3f6:	68f8      	ldr	r0, [r7, #12]
 800e3f8:	f001 f8b7 	bl	800f56a <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800e3fc:	68fb      	ldr	r3, [r7, #12]
 800e3fe:	2200      	movs	r2, #0
 800e400:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800e404:	2300      	movs	r3, #0
 800e406:	2200      	movs	r2, #0
 800e408:	2100      	movs	r1, #0
 800e40a:	68f8      	ldr	r0, [r7, #12]
 800e40c:	f001 fde6 	bl	800ffdc <USBD_LL_PrepareReceive>
 800e410:	e01c      	b.n	800e44c <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e412:	68fb      	ldr	r3, [r7, #12]
 800e414:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e418:	b2db      	uxtb	r3, r3
 800e41a:	2b03      	cmp	r3, #3
 800e41c:	d10f      	bne.n	800e43e <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800e41e:	68fb      	ldr	r3, [r7, #12]
 800e420:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e424:	68db      	ldr	r3, [r3, #12]
 800e426:	2b00      	cmp	r3, #0
 800e428:	d009      	beq.n	800e43e <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800e42a:	68fb      	ldr	r3, [r7, #12]
 800e42c:	2200      	movs	r2, #0
 800e42e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800e432:	68fb      	ldr	r3, [r7, #12]
 800e434:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e438:	68db      	ldr	r3, [r3, #12]
 800e43a:	68f8      	ldr	r0, [r7, #12]
 800e43c:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800e43e:	2180      	movs	r1, #128	; 0x80
 800e440:	68f8      	ldr	r0, [r7, #12]
 800e442:	f001 fd21 	bl	800fe88 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800e446:	68f8      	ldr	r0, [r7, #12]
 800e448:	f001 f8e1 	bl	800f60e <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 800e44c:	68fb      	ldr	r3, [r7, #12]
 800e44e:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800e452:	2b00      	cmp	r3, #0
 800e454:	d03a      	beq.n	800e4cc <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800e456:	68f8      	ldr	r0, [r7, #12]
 800e458:	f7ff fe42 	bl	800e0e0 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800e45c:	68fb      	ldr	r3, [r7, #12]
 800e45e:	2200      	movs	r2, #0
 800e460:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800e464:	e032      	b.n	800e4cc <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800e466:	7afb      	ldrb	r3, [r7, #11]
 800e468:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800e46c:	b2db      	uxtb	r3, r3
 800e46e:	4619      	mov	r1, r3
 800e470:	68f8      	ldr	r0, [r7, #12]
 800e472:	f000 f97f 	bl	800e774 <USBD_CoreFindEP>
 800e476:	4603      	mov	r3, r0
 800e478:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800e47a:	7dfb      	ldrb	r3, [r7, #23]
 800e47c:	2bff      	cmp	r3, #255	; 0xff
 800e47e:	d025      	beq.n	800e4cc <USBD_LL_DataInStage+0x15a>
 800e480:	7dfb      	ldrb	r3, [r7, #23]
 800e482:	2b00      	cmp	r3, #0
 800e484:	d122      	bne.n	800e4cc <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e486:	68fb      	ldr	r3, [r7, #12]
 800e488:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e48c:	b2db      	uxtb	r3, r3
 800e48e:	2b03      	cmp	r3, #3
 800e490:	d11c      	bne.n	800e4cc <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800e492:	7dfa      	ldrb	r2, [r7, #23]
 800e494:	68fb      	ldr	r3, [r7, #12]
 800e496:	32ae      	adds	r2, #174	; 0xae
 800e498:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e49c:	695b      	ldr	r3, [r3, #20]
 800e49e:	2b00      	cmp	r3, #0
 800e4a0:	d014      	beq.n	800e4cc <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800e4a2:	7dfa      	ldrb	r2, [r7, #23]
 800e4a4:	68fb      	ldr	r3, [r7, #12]
 800e4a6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800e4aa:	7dfa      	ldrb	r2, [r7, #23]
 800e4ac:	68fb      	ldr	r3, [r7, #12]
 800e4ae:	32ae      	adds	r2, #174	; 0xae
 800e4b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e4b4:	695b      	ldr	r3, [r3, #20]
 800e4b6:	7afa      	ldrb	r2, [r7, #11]
 800e4b8:	4611      	mov	r1, r2
 800e4ba:	68f8      	ldr	r0, [r7, #12]
 800e4bc:	4798      	blx	r3
 800e4be:	4603      	mov	r3, r0
 800e4c0:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800e4c2:	7dbb      	ldrb	r3, [r7, #22]
 800e4c4:	2b00      	cmp	r3, #0
 800e4c6:	d001      	beq.n	800e4cc <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800e4c8:	7dbb      	ldrb	r3, [r7, #22]
 800e4ca:	e000      	b.n	800e4ce <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800e4cc:	2300      	movs	r3, #0
}
 800e4ce:	4618      	mov	r0, r3
 800e4d0:	3718      	adds	r7, #24
 800e4d2:	46bd      	mov	sp, r7
 800e4d4:	bd80      	pop	{r7, pc}

0800e4d6 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800e4d6:	b580      	push	{r7, lr}
 800e4d8:	b084      	sub	sp, #16
 800e4da:	af00      	add	r7, sp, #0
 800e4dc:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800e4de:	2300      	movs	r3, #0
 800e4e0:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800e4e2:	687b      	ldr	r3, [r7, #4]
 800e4e4:	2201      	movs	r2, #1
 800e4e6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800e4ea:	687b      	ldr	r3, [r7, #4]
 800e4ec:	2200      	movs	r2, #0
 800e4ee:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800e4f2:	687b      	ldr	r3, [r7, #4]
 800e4f4:	2200      	movs	r2, #0
 800e4f6:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800e4f8:	687b      	ldr	r3, [r7, #4]
 800e4fa:	2200      	movs	r2, #0
 800e4fc:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 800e500:	687b      	ldr	r3, [r7, #4]
 800e502:	2200      	movs	r2, #0
 800e504:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800e508:	687b      	ldr	r3, [r7, #4]
 800e50a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e50e:	2b00      	cmp	r3, #0
 800e510:	d014      	beq.n	800e53c <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800e512:	687b      	ldr	r3, [r7, #4]
 800e514:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e518:	685b      	ldr	r3, [r3, #4]
 800e51a:	2b00      	cmp	r3, #0
 800e51c:	d00e      	beq.n	800e53c <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800e51e:	687b      	ldr	r3, [r7, #4]
 800e520:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e524:	685b      	ldr	r3, [r3, #4]
 800e526:	687a      	ldr	r2, [r7, #4]
 800e528:	6852      	ldr	r2, [r2, #4]
 800e52a:	b2d2      	uxtb	r2, r2
 800e52c:	4611      	mov	r1, r2
 800e52e:	6878      	ldr	r0, [r7, #4]
 800e530:	4798      	blx	r3
 800e532:	4603      	mov	r3, r0
 800e534:	2b00      	cmp	r3, #0
 800e536:	d001      	beq.n	800e53c <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800e538:	2303      	movs	r3, #3
 800e53a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800e53c:	2340      	movs	r3, #64	; 0x40
 800e53e:	2200      	movs	r2, #0
 800e540:	2100      	movs	r1, #0
 800e542:	6878      	ldr	r0, [r7, #4]
 800e544:	f001 fc5b 	bl	800fdfe <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800e548:	687b      	ldr	r3, [r7, #4]
 800e54a:	2201      	movs	r2, #1
 800e54c:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800e550:	687b      	ldr	r3, [r7, #4]
 800e552:	2240      	movs	r2, #64	; 0x40
 800e554:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800e558:	2340      	movs	r3, #64	; 0x40
 800e55a:	2200      	movs	r2, #0
 800e55c:	2180      	movs	r1, #128	; 0x80
 800e55e:	6878      	ldr	r0, [r7, #4]
 800e560:	f001 fc4d 	bl	800fdfe <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800e564:	687b      	ldr	r3, [r7, #4]
 800e566:	2201      	movs	r2, #1
 800e568:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800e56a:	687b      	ldr	r3, [r7, #4]
 800e56c:	2240      	movs	r2, #64	; 0x40
 800e56e:	621a      	str	r2, [r3, #32]

  return ret;
 800e570:	7bfb      	ldrb	r3, [r7, #15]
}
 800e572:	4618      	mov	r0, r3
 800e574:	3710      	adds	r7, #16
 800e576:	46bd      	mov	sp, r7
 800e578:	bd80      	pop	{r7, pc}

0800e57a <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800e57a:	b480      	push	{r7}
 800e57c:	b083      	sub	sp, #12
 800e57e:	af00      	add	r7, sp, #0
 800e580:	6078      	str	r0, [r7, #4]
 800e582:	460b      	mov	r3, r1
 800e584:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800e586:	687b      	ldr	r3, [r7, #4]
 800e588:	78fa      	ldrb	r2, [r7, #3]
 800e58a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800e58c:	2300      	movs	r3, #0
}
 800e58e:	4618      	mov	r0, r3
 800e590:	370c      	adds	r7, #12
 800e592:	46bd      	mov	sp, r7
 800e594:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e598:	4770      	bx	lr

0800e59a <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800e59a:	b480      	push	{r7}
 800e59c:	b083      	sub	sp, #12
 800e59e:	af00      	add	r7, sp, #0
 800e5a0:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800e5a2:	687b      	ldr	r3, [r7, #4]
 800e5a4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e5a8:	b2da      	uxtb	r2, r3
 800e5aa:	687b      	ldr	r3, [r7, #4]
 800e5ac:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800e5b0:	687b      	ldr	r3, [r7, #4]
 800e5b2:	2204      	movs	r2, #4
 800e5b4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800e5b8:	2300      	movs	r3, #0
}
 800e5ba:	4618      	mov	r0, r3
 800e5bc:	370c      	adds	r7, #12
 800e5be:	46bd      	mov	sp, r7
 800e5c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5c4:	4770      	bx	lr

0800e5c6 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800e5c6:	b480      	push	{r7}
 800e5c8:	b083      	sub	sp, #12
 800e5ca:	af00      	add	r7, sp, #0
 800e5cc:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800e5ce:	687b      	ldr	r3, [r7, #4]
 800e5d0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e5d4:	b2db      	uxtb	r3, r3
 800e5d6:	2b04      	cmp	r3, #4
 800e5d8:	d106      	bne.n	800e5e8 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800e5da:	687b      	ldr	r3, [r7, #4]
 800e5dc:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800e5e0:	b2da      	uxtb	r2, r3
 800e5e2:	687b      	ldr	r3, [r7, #4]
 800e5e4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800e5e8:	2300      	movs	r3, #0
}
 800e5ea:	4618      	mov	r0, r3
 800e5ec:	370c      	adds	r7, #12
 800e5ee:	46bd      	mov	sp, r7
 800e5f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5f4:	4770      	bx	lr

0800e5f6 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800e5f6:	b580      	push	{r7, lr}
 800e5f8:	b082      	sub	sp, #8
 800e5fa:	af00      	add	r7, sp, #0
 800e5fc:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e5fe:	687b      	ldr	r3, [r7, #4]
 800e600:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e604:	b2db      	uxtb	r3, r3
 800e606:	2b03      	cmp	r3, #3
 800e608:	d110      	bne.n	800e62c <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800e60a:	687b      	ldr	r3, [r7, #4]
 800e60c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e610:	2b00      	cmp	r3, #0
 800e612:	d00b      	beq.n	800e62c <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800e614:	687b      	ldr	r3, [r7, #4]
 800e616:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e61a:	69db      	ldr	r3, [r3, #28]
 800e61c:	2b00      	cmp	r3, #0
 800e61e:	d005      	beq.n	800e62c <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800e620:	687b      	ldr	r3, [r7, #4]
 800e622:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e626:	69db      	ldr	r3, [r3, #28]
 800e628:	6878      	ldr	r0, [r7, #4]
 800e62a:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800e62c:	2300      	movs	r3, #0
}
 800e62e:	4618      	mov	r0, r3
 800e630:	3708      	adds	r7, #8
 800e632:	46bd      	mov	sp, r7
 800e634:	bd80      	pop	{r7, pc}

0800e636 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800e636:	b580      	push	{r7, lr}
 800e638:	b082      	sub	sp, #8
 800e63a:	af00      	add	r7, sp, #0
 800e63c:	6078      	str	r0, [r7, #4]
 800e63e:	460b      	mov	r3, r1
 800e640:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800e642:	687b      	ldr	r3, [r7, #4]
 800e644:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800e648:	687b      	ldr	r3, [r7, #4]
 800e64a:	32ae      	adds	r2, #174	; 0xae
 800e64c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e650:	2b00      	cmp	r3, #0
 800e652:	d101      	bne.n	800e658 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800e654:	2303      	movs	r3, #3
 800e656:	e01c      	b.n	800e692 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e658:	687b      	ldr	r3, [r7, #4]
 800e65a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e65e:	b2db      	uxtb	r3, r3
 800e660:	2b03      	cmp	r3, #3
 800e662:	d115      	bne.n	800e690 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800e664:	687b      	ldr	r3, [r7, #4]
 800e666:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800e66a:	687b      	ldr	r3, [r7, #4]
 800e66c:	32ae      	adds	r2, #174	; 0xae
 800e66e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e672:	6a1b      	ldr	r3, [r3, #32]
 800e674:	2b00      	cmp	r3, #0
 800e676:	d00b      	beq.n	800e690 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800e678:	687b      	ldr	r3, [r7, #4]
 800e67a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800e67e:	687b      	ldr	r3, [r7, #4]
 800e680:	32ae      	adds	r2, #174	; 0xae
 800e682:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e686:	6a1b      	ldr	r3, [r3, #32]
 800e688:	78fa      	ldrb	r2, [r7, #3]
 800e68a:	4611      	mov	r1, r2
 800e68c:	6878      	ldr	r0, [r7, #4]
 800e68e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800e690:	2300      	movs	r3, #0
}
 800e692:	4618      	mov	r0, r3
 800e694:	3708      	adds	r7, #8
 800e696:	46bd      	mov	sp, r7
 800e698:	bd80      	pop	{r7, pc}

0800e69a <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800e69a:	b580      	push	{r7, lr}
 800e69c:	b082      	sub	sp, #8
 800e69e:	af00      	add	r7, sp, #0
 800e6a0:	6078      	str	r0, [r7, #4]
 800e6a2:	460b      	mov	r3, r1
 800e6a4:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800e6a6:	687b      	ldr	r3, [r7, #4]
 800e6a8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800e6ac:	687b      	ldr	r3, [r7, #4]
 800e6ae:	32ae      	adds	r2, #174	; 0xae
 800e6b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e6b4:	2b00      	cmp	r3, #0
 800e6b6:	d101      	bne.n	800e6bc <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800e6b8:	2303      	movs	r3, #3
 800e6ba:	e01c      	b.n	800e6f6 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e6bc:	687b      	ldr	r3, [r7, #4]
 800e6be:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e6c2:	b2db      	uxtb	r3, r3
 800e6c4:	2b03      	cmp	r3, #3
 800e6c6:	d115      	bne.n	800e6f4 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800e6c8:	687b      	ldr	r3, [r7, #4]
 800e6ca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800e6ce:	687b      	ldr	r3, [r7, #4]
 800e6d0:	32ae      	adds	r2, #174	; 0xae
 800e6d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e6d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e6d8:	2b00      	cmp	r3, #0
 800e6da:	d00b      	beq.n	800e6f4 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800e6dc:	687b      	ldr	r3, [r7, #4]
 800e6de:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800e6e2:	687b      	ldr	r3, [r7, #4]
 800e6e4:	32ae      	adds	r2, #174	; 0xae
 800e6e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e6ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e6ec:	78fa      	ldrb	r2, [r7, #3]
 800e6ee:	4611      	mov	r1, r2
 800e6f0:	6878      	ldr	r0, [r7, #4]
 800e6f2:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800e6f4:	2300      	movs	r3, #0
}
 800e6f6:	4618      	mov	r0, r3
 800e6f8:	3708      	adds	r7, #8
 800e6fa:	46bd      	mov	sp, r7
 800e6fc:	bd80      	pop	{r7, pc}

0800e6fe <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800e6fe:	b480      	push	{r7}
 800e700:	b083      	sub	sp, #12
 800e702:	af00      	add	r7, sp, #0
 800e704:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800e706:	2300      	movs	r3, #0
}
 800e708:	4618      	mov	r0, r3
 800e70a:	370c      	adds	r7, #12
 800e70c:	46bd      	mov	sp, r7
 800e70e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e712:	4770      	bx	lr

0800e714 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800e714:	b580      	push	{r7, lr}
 800e716:	b084      	sub	sp, #16
 800e718:	af00      	add	r7, sp, #0
 800e71a:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800e71c:	2300      	movs	r3, #0
 800e71e:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800e720:	687b      	ldr	r3, [r7, #4]
 800e722:	2201      	movs	r2, #1
 800e724:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800e728:	687b      	ldr	r3, [r7, #4]
 800e72a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e72e:	2b00      	cmp	r3, #0
 800e730:	d00e      	beq.n	800e750 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800e732:	687b      	ldr	r3, [r7, #4]
 800e734:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e738:	685b      	ldr	r3, [r3, #4]
 800e73a:	687a      	ldr	r2, [r7, #4]
 800e73c:	6852      	ldr	r2, [r2, #4]
 800e73e:	b2d2      	uxtb	r2, r2
 800e740:	4611      	mov	r1, r2
 800e742:	6878      	ldr	r0, [r7, #4]
 800e744:	4798      	blx	r3
 800e746:	4603      	mov	r3, r0
 800e748:	2b00      	cmp	r3, #0
 800e74a:	d001      	beq.n	800e750 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800e74c:	2303      	movs	r3, #3
 800e74e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800e750:	7bfb      	ldrb	r3, [r7, #15]
}
 800e752:	4618      	mov	r0, r3
 800e754:	3710      	adds	r7, #16
 800e756:	46bd      	mov	sp, r7
 800e758:	bd80      	pop	{r7, pc}

0800e75a <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800e75a:	b480      	push	{r7}
 800e75c:	b083      	sub	sp, #12
 800e75e:	af00      	add	r7, sp, #0
 800e760:	6078      	str	r0, [r7, #4]
 800e762:	460b      	mov	r3, r1
 800e764:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800e766:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800e768:	4618      	mov	r0, r3
 800e76a:	370c      	adds	r7, #12
 800e76c:	46bd      	mov	sp, r7
 800e76e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e772:	4770      	bx	lr

0800e774 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800e774:	b480      	push	{r7}
 800e776:	b083      	sub	sp, #12
 800e778:	af00      	add	r7, sp, #0
 800e77a:	6078      	str	r0, [r7, #4]
 800e77c:	460b      	mov	r3, r1
 800e77e:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800e780:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800e782:	4618      	mov	r0, r3
 800e784:	370c      	adds	r7, #12
 800e786:	46bd      	mov	sp, r7
 800e788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e78c:	4770      	bx	lr

0800e78e <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800e78e:	b580      	push	{r7, lr}
 800e790:	b086      	sub	sp, #24
 800e792:	af00      	add	r7, sp, #0
 800e794:	6078      	str	r0, [r7, #4]
 800e796:	460b      	mov	r3, r1
 800e798:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800e79a:	687b      	ldr	r3, [r7, #4]
 800e79c:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800e79e:	687b      	ldr	r3, [r7, #4]
 800e7a0:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800e7a2:	2300      	movs	r3, #0
 800e7a4:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800e7a6:	68fb      	ldr	r3, [r7, #12]
 800e7a8:	885b      	ldrh	r3, [r3, #2]
 800e7aa:	b29a      	uxth	r2, r3
 800e7ac:	68fb      	ldr	r3, [r7, #12]
 800e7ae:	781b      	ldrb	r3, [r3, #0]
 800e7b0:	b29b      	uxth	r3, r3
 800e7b2:	429a      	cmp	r2, r3
 800e7b4:	d920      	bls.n	800e7f8 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 800e7b6:	68fb      	ldr	r3, [r7, #12]
 800e7b8:	781b      	ldrb	r3, [r3, #0]
 800e7ba:	b29b      	uxth	r3, r3
 800e7bc:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800e7be:	e013      	b.n	800e7e8 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800e7c0:	f107 030a 	add.w	r3, r7, #10
 800e7c4:	4619      	mov	r1, r3
 800e7c6:	6978      	ldr	r0, [r7, #20]
 800e7c8:	f000 f81b 	bl	800e802 <USBD_GetNextDesc>
 800e7cc:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800e7ce:	697b      	ldr	r3, [r7, #20]
 800e7d0:	785b      	ldrb	r3, [r3, #1]
 800e7d2:	2b05      	cmp	r3, #5
 800e7d4:	d108      	bne.n	800e7e8 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800e7d6:	697b      	ldr	r3, [r7, #20]
 800e7d8:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800e7da:	693b      	ldr	r3, [r7, #16]
 800e7dc:	789b      	ldrb	r3, [r3, #2]
 800e7de:	78fa      	ldrb	r2, [r7, #3]
 800e7e0:	429a      	cmp	r2, r3
 800e7e2:	d008      	beq.n	800e7f6 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800e7e4:	2300      	movs	r3, #0
 800e7e6:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800e7e8:	68fb      	ldr	r3, [r7, #12]
 800e7ea:	885b      	ldrh	r3, [r3, #2]
 800e7ec:	b29a      	uxth	r2, r3
 800e7ee:	897b      	ldrh	r3, [r7, #10]
 800e7f0:	429a      	cmp	r2, r3
 800e7f2:	d8e5      	bhi.n	800e7c0 <USBD_GetEpDesc+0x32>
 800e7f4:	e000      	b.n	800e7f8 <USBD_GetEpDesc+0x6a>
          break;
 800e7f6:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800e7f8:	693b      	ldr	r3, [r7, #16]
}
 800e7fa:	4618      	mov	r0, r3
 800e7fc:	3718      	adds	r7, #24
 800e7fe:	46bd      	mov	sp, r7
 800e800:	bd80      	pop	{r7, pc}

0800e802 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800e802:	b480      	push	{r7}
 800e804:	b085      	sub	sp, #20
 800e806:	af00      	add	r7, sp, #0
 800e808:	6078      	str	r0, [r7, #4]
 800e80a:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800e80c:	687b      	ldr	r3, [r7, #4]
 800e80e:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800e810:	683b      	ldr	r3, [r7, #0]
 800e812:	881a      	ldrh	r2, [r3, #0]
 800e814:	68fb      	ldr	r3, [r7, #12]
 800e816:	781b      	ldrb	r3, [r3, #0]
 800e818:	b29b      	uxth	r3, r3
 800e81a:	4413      	add	r3, r2
 800e81c:	b29a      	uxth	r2, r3
 800e81e:	683b      	ldr	r3, [r7, #0]
 800e820:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800e822:	68fb      	ldr	r3, [r7, #12]
 800e824:	781b      	ldrb	r3, [r3, #0]
 800e826:	461a      	mov	r2, r3
 800e828:	687b      	ldr	r3, [r7, #4]
 800e82a:	4413      	add	r3, r2
 800e82c:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800e82e:	68fb      	ldr	r3, [r7, #12]
}
 800e830:	4618      	mov	r0, r3
 800e832:	3714      	adds	r7, #20
 800e834:	46bd      	mov	sp, r7
 800e836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e83a:	4770      	bx	lr

0800e83c <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800e83c:	b480      	push	{r7}
 800e83e:	b087      	sub	sp, #28
 800e840:	af00      	add	r7, sp, #0
 800e842:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800e844:	687b      	ldr	r3, [r7, #4]
 800e846:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800e848:	697b      	ldr	r3, [r7, #20]
 800e84a:	781b      	ldrb	r3, [r3, #0]
 800e84c:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800e84e:	697b      	ldr	r3, [r7, #20]
 800e850:	3301      	adds	r3, #1
 800e852:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800e854:	697b      	ldr	r3, [r7, #20]
 800e856:	781b      	ldrb	r3, [r3, #0]
 800e858:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800e85a:	8a3b      	ldrh	r3, [r7, #16]
 800e85c:	021b      	lsls	r3, r3, #8
 800e85e:	b21a      	sxth	r2, r3
 800e860:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800e864:	4313      	orrs	r3, r2
 800e866:	b21b      	sxth	r3, r3
 800e868:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800e86a:	89fb      	ldrh	r3, [r7, #14]
}
 800e86c:	4618      	mov	r0, r3
 800e86e:	371c      	adds	r7, #28
 800e870:	46bd      	mov	sp, r7
 800e872:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e876:	4770      	bx	lr

0800e878 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e878:	b580      	push	{r7, lr}
 800e87a:	b084      	sub	sp, #16
 800e87c:	af00      	add	r7, sp, #0
 800e87e:	6078      	str	r0, [r7, #4]
 800e880:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800e882:	2300      	movs	r3, #0
 800e884:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800e886:	683b      	ldr	r3, [r7, #0]
 800e888:	781b      	ldrb	r3, [r3, #0]
 800e88a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800e88e:	2b40      	cmp	r3, #64	; 0x40
 800e890:	d005      	beq.n	800e89e <USBD_StdDevReq+0x26>
 800e892:	2b40      	cmp	r3, #64	; 0x40
 800e894:	d857      	bhi.n	800e946 <USBD_StdDevReq+0xce>
 800e896:	2b00      	cmp	r3, #0
 800e898:	d00f      	beq.n	800e8ba <USBD_StdDevReq+0x42>
 800e89a:	2b20      	cmp	r3, #32
 800e89c:	d153      	bne.n	800e946 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800e89e:	687b      	ldr	r3, [r7, #4]
 800e8a0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800e8a4:	687b      	ldr	r3, [r7, #4]
 800e8a6:	32ae      	adds	r2, #174	; 0xae
 800e8a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e8ac:	689b      	ldr	r3, [r3, #8]
 800e8ae:	6839      	ldr	r1, [r7, #0]
 800e8b0:	6878      	ldr	r0, [r7, #4]
 800e8b2:	4798      	blx	r3
 800e8b4:	4603      	mov	r3, r0
 800e8b6:	73fb      	strb	r3, [r7, #15]
      break;
 800e8b8:	e04a      	b.n	800e950 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800e8ba:	683b      	ldr	r3, [r7, #0]
 800e8bc:	785b      	ldrb	r3, [r3, #1]
 800e8be:	2b09      	cmp	r3, #9
 800e8c0:	d83b      	bhi.n	800e93a <USBD_StdDevReq+0xc2>
 800e8c2:	a201      	add	r2, pc, #4	; (adr r2, 800e8c8 <USBD_StdDevReq+0x50>)
 800e8c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e8c8:	0800e91d 	.word	0x0800e91d
 800e8cc:	0800e931 	.word	0x0800e931
 800e8d0:	0800e93b 	.word	0x0800e93b
 800e8d4:	0800e927 	.word	0x0800e927
 800e8d8:	0800e93b 	.word	0x0800e93b
 800e8dc:	0800e8fb 	.word	0x0800e8fb
 800e8e0:	0800e8f1 	.word	0x0800e8f1
 800e8e4:	0800e93b 	.word	0x0800e93b
 800e8e8:	0800e913 	.word	0x0800e913
 800e8ec:	0800e905 	.word	0x0800e905
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800e8f0:	6839      	ldr	r1, [r7, #0]
 800e8f2:	6878      	ldr	r0, [r7, #4]
 800e8f4:	f000 fa3c 	bl	800ed70 <USBD_GetDescriptor>
          break;
 800e8f8:	e024      	b.n	800e944 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800e8fa:	6839      	ldr	r1, [r7, #0]
 800e8fc:	6878      	ldr	r0, [r7, #4]
 800e8fe:	f000 fbcb 	bl	800f098 <USBD_SetAddress>
          break;
 800e902:	e01f      	b.n	800e944 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800e904:	6839      	ldr	r1, [r7, #0]
 800e906:	6878      	ldr	r0, [r7, #4]
 800e908:	f000 fc0a 	bl	800f120 <USBD_SetConfig>
 800e90c:	4603      	mov	r3, r0
 800e90e:	73fb      	strb	r3, [r7, #15]
          break;
 800e910:	e018      	b.n	800e944 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800e912:	6839      	ldr	r1, [r7, #0]
 800e914:	6878      	ldr	r0, [r7, #4]
 800e916:	f000 fcad 	bl	800f274 <USBD_GetConfig>
          break;
 800e91a:	e013      	b.n	800e944 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800e91c:	6839      	ldr	r1, [r7, #0]
 800e91e:	6878      	ldr	r0, [r7, #4]
 800e920:	f000 fcde 	bl	800f2e0 <USBD_GetStatus>
          break;
 800e924:	e00e      	b.n	800e944 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800e926:	6839      	ldr	r1, [r7, #0]
 800e928:	6878      	ldr	r0, [r7, #4]
 800e92a:	f000 fd0d 	bl	800f348 <USBD_SetFeature>
          break;
 800e92e:	e009      	b.n	800e944 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800e930:	6839      	ldr	r1, [r7, #0]
 800e932:	6878      	ldr	r0, [r7, #4]
 800e934:	f000 fd31 	bl	800f39a <USBD_ClrFeature>
          break;
 800e938:	e004      	b.n	800e944 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800e93a:	6839      	ldr	r1, [r7, #0]
 800e93c:	6878      	ldr	r0, [r7, #4]
 800e93e:	f000 fd88 	bl	800f452 <USBD_CtlError>
          break;
 800e942:	bf00      	nop
      }
      break;
 800e944:	e004      	b.n	800e950 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800e946:	6839      	ldr	r1, [r7, #0]
 800e948:	6878      	ldr	r0, [r7, #4]
 800e94a:	f000 fd82 	bl	800f452 <USBD_CtlError>
      break;
 800e94e:	bf00      	nop
  }

  return ret;
 800e950:	7bfb      	ldrb	r3, [r7, #15]
}
 800e952:	4618      	mov	r0, r3
 800e954:	3710      	adds	r7, #16
 800e956:	46bd      	mov	sp, r7
 800e958:	bd80      	pop	{r7, pc}
 800e95a:	bf00      	nop

0800e95c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e95c:	b580      	push	{r7, lr}
 800e95e:	b084      	sub	sp, #16
 800e960:	af00      	add	r7, sp, #0
 800e962:	6078      	str	r0, [r7, #4]
 800e964:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800e966:	2300      	movs	r3, #0
 800e968:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800e96a:	683b      	ldr	r3, [r7, #0]
 800e96c:	781b      	ldrb	r3, [r3, #0]
 800e96e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800e972:	2b40      	cmp	r3, #64	; 0x40
 800e974:	d005      	beq.n	800e982 <USBD_StdItfReq+0x26>
 800e976:	2b40      	cmp	r3, #64	; 0x40
 800e978:	d852      	bhi.n	800ea20 <USBD_StdItfReq+0xc4>
 800e97a:	2b00      	cmp	r3, #0
 800e97c:	d001      	beq.n	800e982 <USBD_StdItfReq+0x26>
 800e97e:	2b20      	cmp	r3, #32
 800e980:	d14e      	bne.n	800ea20 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800e982:	687b      	ldr	r3, [r7, #4]
 800e984:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e988:	b2db      	uxtb	r3, r3
 800e98a:	3b01      	subs	r3, #1
 800e98c:	2b02      	cmp	r3, #2
 800e98e:	d840      	bhi.n	800ea12 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800e990:	683b      	ldr	r3, [r7, #0]
 800e992:	889b      	ldrh	r3, [r3, #4]
 800e994:	b2db      	uxtb	r3, r3
 800e996:	2b01      	cmp	r3, #1
 800e998:	d836      	bhi.n	800ea08 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800e99a:	683b      	ldr	r3, [r7, #0]
 800e99c:	889b      	ldrh	r3, [r3, #4]
 800e99e:	b2db      	uxtb	r3, r3
 800e9a0:	4619      	mov	r1, r3
 800e9a2:	6878      	ldr	r0, [r7, #4]
 800e9a4:	f7ff fed9 	bl	800e75a <USBD_CoreFindIF>
 800e9a8:	4603      	mov	r3, r0
 800e9aa:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800e9ac:	7bbb      	ldrb	r3, [r7, #14]
 800e9ae:	2bff      	cmp	r3, #255	; 0xff
 800e9b0:	d01d      	beq.n	800e9ee <USBD_StdItfReq+0x92>
 800e9b2:	7bbb      	ldrb	r3, [r7, #14]
 800e9b4:	2b00      	cmp	r3, #0
 800e9b6:	d11a      	bne.n	800e9ee <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800e9b8:	7bba      	ldrb	r2, [r7, #14]
 800e9ba:	687b      	ldr	r3, [r7, #4]
 800e9bc:	32ae      	adds	r2, #174	; 0xae
 800e9be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e9c2:	689b      	ldr	r3, [r3, #8]
 800e9c4:	2b00      	cmp	r3, #0
 800e9c6:	d00f      	beq.n	800e9e8 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800e9c8:	7bba      	ldrb	r2, [r7, #14]
 800e9ca:	687b      	ldr	r3, [r7, #4]
 800e9cc:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800e9d0:	7bba      	ldrb	r2, [r7, #14]
 800e9d2:	687b      	ldr	r3, [r7, #4]
 800e9d4:	32ae      	adds	r2, #174	; 0xae
 800e9d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e9da:	689b      	ldr	r3, [r3, #8]
 800e9dc:	6839      	ldr	r1, [r7, #0]
 800e9de:	6878      	ldr	r0, [r7, #4]
 800e9e0:	4798      	blx	r3
 800e9e2:	4603      	mov	r3, r0
 800e9e4:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800e9e6:	e004      	b.n	800e9f2 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800e9e8:	2303      	movs	r3, #3
 800e9ea:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800e9ec:	e001      	b.n	800e9f2 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800e9ee:	2303      	movs	r3, #3
 800e9f0:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800e9f2:	683b      	ldr	r3, [r7, #0]
 800e9f4:	88db      	ldrh	r3, [r3, #6]
 800e9f6:	2b00      	cmp	r3, #0
 800e9f8:	d110      	bne.n	800ea1c <USBD_StdItfReq+0xc0>
 800e9fa:	7bfb      	ldrb	r3, [r7, #15]
 800e9fc:	2b00      	cmp	r3, #0
 800e9fe:	d10d      	bne.n	800ea1c <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800ea00:	6878      	ldr	r0, [r7, #4]
 800ea02:	f000 fdf1 	bl	800f5e8 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800ea06:	e009      	b.n	800ea1c <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800ea08:	6839      	ldr	r1, [r7, #0]
 800ea0a:	6878      	ldr	r0, [r7, #4]
 800ea0c:	f000 fd21 	bl	800f452 <USBD_CtlError>
          break;
 800ea10:	e004      	b.n	800ea1c <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800ea12:	6839      	ldr	r1, [r7, #0]
 800ea14:	6878      	ldr	r0, [r7, #4]
 800ea16:	f000 fd1c 	bl	800f452 <USBD_CtlError>
          break;
 800ea1a:	e000      	b.n	800ea1e <USBD_StdItfReq+0xc2>
          break;
 800ea1c:	bf00      	nop
      }
      break;
 800ea1e:	e004      	b.n	800ea2a <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800ea20:	6839      	ldr	r1, [r7, #0]
 800ea22:	6878      	ldr	r0, [r7, #4]
 800ea24:	f000 fd15 	bl	800f452 <USBD_CtlError>
      break;
 800ea28:	bf00      	nop
  }

  return ret;
 800ea2a:	7bfb      	ldrb	r3, [r7, #15]
}
 800ea2c:	4618      	mov	r0, r3
 800ea2e:	3710      	adds	r7, #16
 800ea30:	46bd      	mov	sp, r7
 800ea32:	bd80      	pop	{r7, pc}

0800ea34 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ea34:	b580      	push	{r7, lr}
 800ea36:	b084      	sub	sp, #16
 800ea38:	af00      	add	r7, sp, #0
 800ea3a:	6078      	str	r0, [r7, #4]
 800ea3c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800ea3e:	2300      	movs	r3, #0
 800ea40:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800ea42:	683b      	ldr	r3, [r7, #0]
 800ea44:	889b      	ldrh	r3, [r3, #4]
 800ea46:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ea48:	683b      	ldr	r3, [r7, #0]
 800ea4a:	781b      	ldrb	r3, [r3, #0]
 800ea4c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800ea50:	2b40      	cmp	r3, #64	; 0x40
 800ea52:	d007      	beq.n	800ea64 <USBD_StdEPReq+0x30>
 800ea54:	2b40      	cmp	r3, #64	; 0x40
 800ea56:	f200 817f 	bhi.w	800ed58 <USBD_StdEPReq+0x324>
 800ea5a:	2b00      	cmp	r3, #0
 800ea5c:	d02a      	beq.n	800eab4 <USBD_StdEPReq+0x80>
 800ea5e:	2b20      	cmp	r3, #32
 800ea60:	f040 817a 	bne.w	800ed58 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800ea64:	7bbb      	ldrb	r3, [r7, #14]
 800ea66:	4619      	mov	r1, r3
 800ea68:	6878      	ldr	r0, [r7, #4]
 800ea6a:	f7ff fe83 	bl	800e774 <USBD_CoreFindEP>
 800ea6e:	4603      	mov	r3, r0
 800ea70:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800ea72:	7b7b      	ldrb	r3, [r7, #13]
 800ea74:	2bff      	cmp	r3, #255	; 0xff
 800ea76:	f000 8174 	beq.w	800ed62 <USBD_StdEPReq+0x32e>
 800ea7a:	7b7b      	ldrb	r3, [r7, #13]
 800ea7c:	2b00      	cmp	r3, #0
 800ea7e:	f040 8170 	bne.w	800ed62 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800ea82:	7b7a      	ldrb	r2, [r7, #13]
 800ea84:	687b      	ldr	r3, [r7, #4]
 800ea86:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800ea8a:	7b7a      	ldrb	r2, [r7, #13]
 800ea8c:	687b      	ldr	r3, [r7, #4]
 800ea8e:	32ae      	adds	r2, #174	; 0xae
 800ea90:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ea94:	689b      	ldr	r3, [r3, #8]
 800ea96:	2b00      	cmp	r3, #0
 800ea98:	f000 8163 	beq.w	800ed62 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800ea9c:	7b7a      	ldrb	r2, [r7, #13]
 800ea9e:	687b      	ldr	r3, [r7, #4]
 800eaa0:	32ae      	adds	r2, #174	; 0xae
 800eaa2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800eaa6:	689b      	ldr	r3, [r3, #8]
 800eaa8:	6839      	ldr	r1, [r7, #0]
 800eaaa:	6878      	ldr	r0, [r7, #4]
 800eaac:	4798      	blx	r3
 800eaae:	4603      	mov	r3, r0
 800eab0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800eab2:	e156      	b.n	800ed62 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800eab4:	683b      	ldr	r3, [r7, #0]
 800eab6:	785b      	ldrb	r3, [r3, #1]
 800eab8:	2b03      	cmp	r3, #3
 800eaba:	d008      	beq.n	800eace <USBD_StdEPReq+0x9a>
 800eabc:	2b03      	cmp	r3, #3
 800eabe:	f300 8145 	bgt.w	800ed4c <USBD_StdEPReq+0x318>
 800eac2:	2b00      	cmp	r3, #0
 800eac4:	f000 809b 	beq.w	800ebfe <USBD_StdEPReq+0x1ca>
 800eac8:	2b01      	cmp	r3, #1
 800eaca:	d03c      	beq.n	800eb46 <USBD_StdEPReq+0x112>
 800eacc:	e13e      	b.n	800ed4c <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800eace:	687b      	ldr	r3, [r7, #4]
 800ead0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ead4:	b2db      	uxtb	r3, r3
 800ead6:	2b02      	cmp	r3, #2
 800ead8:	d002      	beq.n	800eae0 <USBD_StdEPReq+0xac>
 800eada:	2b03      	cmp	r3, #3
 800eadc:	d016      	beq.n	800eb0c <USBD_StdEPReq+0xd8>
 800eade:	e02c      	b.n	800eb3a <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800eae0:	7bbb      	ldrb	r3, [r7, #14]
 800eae2:	2b00      	cmp	r3, #0
 800eae4:	d00d      	beq.n	800eb02 <USBD_StdEPReq+0xce>
 800eae6:	7bbb      	ldrb	r3, [r7, #14]
 800eae8:	2b80      	cmp	r3, #128	; 0x80
 800eaea:	d00a      	beq.n	800eb02 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800eaec:	7bbb      	ldrb	r3, [r7, #14]
 800eaee:	4619      	mov	r1, r3
 800eaf0:	6878      	ldr	r0, [r7, #4]
 800eaf2:	f001 f9c9 	bl	800fe88 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800eaf6:	2180      	movs	r1, #128	; 0x80
 800eaf8:	6878      	ldr	r0, [r7, #4]
 800eafa:	f001 f9c5 	bl	800fe88 <USBD_LL_StallEP>
 800eafe:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800eb00:	e020      	b.n	800eb44 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800eb02:	6839      	ldr	r1, [r7, #0]
 800eb04:	6878      	ldr	r0, [r7, #4]
 800eb06:	f000 fca4 	bl	800f452 <USBD_CtlError>
              break;
 800eb0a:	e01b      	b.n	800eb44 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800eb0c:	683b      	ldr	r3, [r7, #0]
 800eb0e:	885b      	ldrh	r3, [r3, #2]
 800eb10:	2b00      	cmp	r3, #0
 800eb12:	d10e      	bne.n	800eb32 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800eb14:	7bbb      	ldrb	r3, [r7, #14]
 800eb16:	2b00      	cmp	r3, #0
 800eb18:	d00b      	beq.n	800eb32 <USBD_StdEPReq+0xfe>
 800eb1a:	7bbb      	ldrb	r3, [r7, #14]
 800eb1c:	2b80      	cmp	r3, #128	; 0x80
 800eb1e:	d008      	beq.n	800eb32 <USBD_StdEPReq+0xfe>
 800eb20:	683b      	ldr	r3, [r7, #0]
 800eb22:	88db      	ldrh	r3, [r3, #6]
 800eb24:	2b00      	cmp	r3, #0
 800eb26:	d104      	bne.n	800eb32 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800eb28:	7bbb      	ldrb	r3, [r7, #14]
 800eb2a:	4619      	mov	r1, r3
 800eb2c:	6878      	ldr	r0, [r7, #4]
 800eb2e:	f001 f9ab 	bl	800fe88 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800eb32:	6878      	ldr	r0, [r7, #4]
 800eb34:	f000 fd58 	bl	800f5e8 <USBD_CtlSendStatus>

              break;
 800eb38:	e004      	b.n	800eb44 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800eb3a:	6839      	ldr	r1, [r7, #0]
 800eb3c:	6878      	ldr	r0, [r7, #4]
 800eb3e:	f000 fc88 	bl	800f452 <USBD_CtlError>
              break;
 800eb42:	bf00      	nop
          }
          break;
 800eb44:	e107      	b.n	800ed56 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800eb46:	687b      	ldr	r3, [r7, #4]
 800eb48:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800eb4c:	b2db      	uxtb	r3, r3
 800eb4e:	2b02      	cmp	r3, #2
 800eb50:	d002      	beq.n	800eb58 <USBD_StdEPReq+0x124>
 800eb52:	2b03      	cmp	r3, #3
 800eb54:	d016      	beq.n	800eb84 <USBD_StdEPReq+0x150>
 800eb56:	e04b      	b.n	800ebf0 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800eb58:	7bbb      	ldrb	r3, [r7, #14]
 800eb5a:	2b00      	cmp	r3, #0
 800eb5c:	d00d      	beq.n	800eb7a <USBD_StdEPReq+0x146>
 800eb5e:	7bbb      	ldrb	r3, [r7, #14]
 800eb60:	2b80      	cmp	r3, #128	; 0x80
 800eb62:	d00a      	beq.n	800eb7a <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800eb64:	7bbb      	ldrb	r3, [r7, #14]
 800eb66:	4619      	mov	r1, r3
 800eb68:	6878      	ldr	r0, [r7, #4]
 800eb6a:	f001 f98d 	bl	800fe88 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800eb6e:	2180      	movs	r1, #128	; 0x80
 800eb70:	6878      	ldr	r0, [r7, #4]
 800eb72:	f001 f989 	bl	800fe88 <USBD_LL_StallEP>
 800eb76:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800eb78:	e040      	b.n	800ebfc <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800eb7a:	6839      	ldr	r1, [r7, #0]
 800eb7c:	6878      	ldr	r0, [r7, #4]
 800eb7e:	f000 fc68 	bl	800f452 <USBD_CtlError>
              break;
 800eb82:	e03b      	b.n	800ebfc <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800eb84:	683b      	ldr	r3, [r7, #0]
 800eb86:	885b      	ldrh	r3, [r3, #2]
 800eb88:	2b00      	cmp	r3, #0
 800eb8a:	d136      	bne.n	800ebfa <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800eb8c:	7bbb      	ldrb	r3, [r7, #14]
 800eb8e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800eb92:	2b00      	cmp	r3, #0
 800eb94:	d004      	beq.n	800eba0 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800eb96:	7bbb      	ldrb	r3, [r7, #14]
 800eb98:	4619      	mov	r1, r3
 800eb9a:	6878      	ldr	r0, [r7, #4]
 800eb9c:	f001 f993 	bl	800fec6 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800eba0:	6878      	ldr	r0, [r7, #4]
 800eba2:	f000 fd21 	bl	800f5e8 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800eba6:	7bbb      	ldrb	r3, [r7, #14]
 800eba8:	4619      	mov	r1, r3
 800ebaa:	6878      	ldr	r0, [r7, #4]
 800ebac:	f7ff fde2 	bl	800e774 <USBD_CoreFindEP>
 800ebb0:	4603      	mov	r3, r0
 800ebb2:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800ebb4:	7b7b      	ldrb	r3, [r7, #13]
 800ebb6:	2bff      	cmp	r3, #255	; 0xff
 800ebb8:	d01f      	beq.n	800ebfa <USBD_StdEPReq+0x1c6>
 800ebba:	7b7b      	ldrb	r3, [r7, #13]
 800ebbc:	2b00      	cmp	r3, #0
 800ebbe:	d11c      	bne.n	800ebfa <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800ebc0:	7b7a      	ldrb	r2, [r7, #13]
 800ebc2:	687b      	ldr	r3, [r7, #4]
 800ebc4:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800ebc8:	7b7a      	ldrb	r2, [r7, #13]
 800ebca:	687b      	ldr	r3, [r7, #4]
 800ebcc:	32ae      	adds	r2, #174	; 0xae
 800ebce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ebd2:	689b      	ldr	r3, [r3, #8]
 800ebd4:	2b00      	cmp	r3, #0
 800ebd6:	d010      	beq.n	800ebfa <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800ebd8:	7b7a      	ldrb	r2, [r7, #13]
 800ebda:	687b      	ldr	r3, [r7, #4]
 800ebdc:	32ae      	adds	r2, #174	; 0xae
 800ebde:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ebe2:	689b      	ldr	r3, [r3, #8]
 800ebe4:	6839      	ldr	r1, [r7, #0]
 800ebe6:	6878      	ldr	r0, [r7, #4]
 800ebe8:	4798      	blx	r3
 800ebea:	4603      	mov	r3, r0
 800ebec:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800ebee:	e004      	b.n	800ebfa <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800ebf0:	6839      	ldr	r1, [r7, #0]
 800ebf2:	6878      	ldr	r0, [r7, #4]
 800ebf4:	f000 fc2d 	bl	800f452 <USBD_CtlError>
              break;
 800ebf8:	e000      	b.n	800ebfc <USBD_StdEPReq+0x1c8>
              break;
 800ebfa:	bf00      	nop
          }
          break;
 800ebfc:	e0ab      	b.n	800ed56 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800ebfe:	687b      	ldr	r3, [r7, #4]
 800ec00:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ec04:	b2db      	uxtb	r3, r3
 800ec06:	2b02      	cmp	r3, #2
 800ec08:	d002      	beq.n	800ec10 <USBD_StdEPReq+0x1dc>
 800ec0a:	2b03      	cmp	r3, #3
 800ec0c:	d032      	beq.n	800ec74 <USBD_StdEPReq+0x240>
 800ec0e:	e097      	b.n	800ed40 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800ec10:	7bbb      	ldrb	r3, [r7, #14]
 800ec12:	2b00      	cmp	r3, #0
 800ec14:	d007      	beq.n	800ec26 <USBD_StdEPReq+0x1f2>
 800ec16:	7bbb      	ldrb	r3, [r7, #14]
 800ec18:	2b80      	cmp	r3, #128	; 0x80
 800ec1a:	d004      	beq.n	800ec26 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800ec1c:	6839      	ldr	r1, [r7, #0]
 800ec1e:	6878      	ldr	r0, [r7, #4]
 800ec20:	f000 fc17 	bl	800f452 <USBD_CtlError>
                break;
 800ec24:	e091      	b.n	800ed4a <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ec26:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ec2a:	2b00      	cmp	r3, #0
 800ec2c:	da0b      	bge.n	800ec46 <USBD_StdEPReq+0x212>
 800ec2e:	7bbb      	ldrb	r3, [r7, #14]
 800ec30:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ec34:	4613      	mov	r3, r2
 800ec36:	009b      	lsls	r3, r3, #2
 800ec38:	4413      	add	r3, r2
 800ec3a:	009b      	lsls	r3, r3, #2
 800ec3c:	3310      	adds	r3, #16
 800ec3e:	687a      	ldr	r2, [r7, #4]
 800ec40:	4413      	add	r3, r2
 800ec42:	3304      	adds	r3, #4
 800ec44:	e00b      	b.n	800ec5e <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800ec46:	7bbb      	ldrb	r3, [r7, #14]
 800ec48:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ec4c:	4613      	mov	r3, r2
 800ec4e:	009b      	lsls	r3, r3, #2
 800ec50:	4413      	add	r3, r2
 800ec52:	009b      	lsls	r3, r3, #2
 800ec54:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800ec58:	687a      	ldr	r2, [r7, #4]
 800ec5a:	4413      	add	r3, r2
 800ec5c:	3304      	adds	r3, #4
 800ec5e:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800ec60:	68bb      	ldr	r3, [r7, #8]
 800ec62:	2200      	movs	r2, #0
 800ec64:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800ec66:	68bb      	ldr	r3, [r7, #8]
 800ec68:	2202      	movs	r2, #2
 800ec6a:	4619      	mov	r1, r3
 800ec6c:	6878      	ldr	r0, [r7, #4]
 800ec6e:	f000 fc61 	bl	800f534 <USBD_CtlSendData>
              break;
 800ec72:	e06a      	b.n	800ed4a <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800ec74:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ec78:	2b00      	cmp	r3, #0
 800ec7a:	da11      	bge.n	800eca0 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800ec7c:	7bbb      	ldrb	r3, [r7, #14]
 800ec7e:	f003 020f 	and.w	r2, r3, #15
 800ec82:	6879      	ldr	r1, [r7, #4]
 800ec84:	4613      	mov	r3, r2
 800ec86:	009b      	lsls	r3, r3, #2
 800ec88:	4413      	add	r3, r2
 800ec8a:	009b      	lsls	r3, r3, #2
 800ec8c:	440b      	add	r3, r1
 800ec8e:	3324      	adds	r3, #36	; 0x24
 800ec90:	881b      	ldrh	r3, [r3, #0]
 800ec92:	2b00      	cmp	r3, #0
 800ec94:	d117      	bne.n	800ecc6 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800ec96:	6839      	ldr	r1, [r7, #0]
 800ec98:	6878      	ldr	r0, [r7, #4]
 800ec9a:	f000 fbda 	bl	800f452 <USBD_CtlError>
                  break;
 800ec9e:	e054      	b.n	800ed4a <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800eca0:	7bbb      	ldrb	r3, [r7, #14]
 800eca2:	f003 020f 	and.w	r2, r3, #15
 800eca6:	6879      	ldr	r1, [r7, #4]
 800eca8:	4613      	mov	r3, r2
 800ecaa:	009b      	lsls	r3, r3, #2
 800ecac:	4413      	add	r3, r2
 800ecae:	009b      	lsls	r3, r3, #2
 800ecb0:	440b      	add	r3, r1
 800ecb2:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800ecb6:	881b      	ldrh	r3, [r3, #0]
 800ecb8:	2b00      	cmp	r3, #0
 800ecba:	d104      	bne.n	800ecc6 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800ecbc:	6839      	ldr	r1, [r7, #0]
 800ecbe:	6878      	ldr	r0, [r7, #4]
 800ecc0:	f000 fbc7 	bl	800f452 <USBD_CtlError>
                  break;
 800ecc4:	e041      	b.n	800ed4a <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ecc6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ecca:	2b00      	cmp	r3, #0
 800eccc:	da0b      	bge.n	800ece6 <USBD_StdEPReq+0x2b2>
 800ecce:	7bbb      	ldrb	r3, [r7, #14]
 800ecd0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ecd4:	4613      	mov	r3, r2
 800ecd6:	009b      	lsls	r3, r3, #2
 800ecd8:	4413      	add	r3, r2
 800ecda:	009b      	lsls	r3, r3, #2
 800ecdc:	3310      	adds	r3, #16
 800ecde:	687a      	ldr	r2, [r7, #4]
 800ece0:	4413      	add	r3, r2
 800ece2:	3304      	adds	r3, #4
 800ece4:	e00b      	b.n	800ecfe <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800ece6:	7bbb      	ldrb	r3, [r7, #14]
 800ece8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ecec:	4613      	mov	r3, r2
 800ecee:	009b      	lsls	r3, r3, #2
 800ecf0:	4413      	add	r3, r2
 800ecf2:	009b      	lsls	r3, r3, #2
 800ecf4:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800ecf8:	687a      	ldr	r2, [r7, #4]
 800ecfa:	4413      	add	r3, r2
 800ecfc:	3304      	adds	r3, #4
 800ecfe:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800ed00:	7bbb      	ldrb	r3, [r7, #14]
 800ed02:	2b00      	cmp	r3, #0
 800ed04:	d002      	beq.n	800ed0c <USBD_StdEPReq+0x2d8>
 800ed06:	7bbb      	ldrb	r3, [r7, #14]
 800ed08:	2b80      	cmp	r3, #128	; 0x80
 800ed0a:	d103      	bne.n	800ed14 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800ed0c:	68bb      	ldr	r3, [r7, #8]
 800ed0e:	2200      	movs	r2, #0
 800ed10:	601a      	str	r2, [r3, #0]
 800ed12:	e00e      	b.n	800ed32 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800ed14:	7bbb      	ldrb	r3, [r7, #14]
 800ed16:	4619      	mov	r1, r3
 800ed18:	6878      	ldr	r0, [r7, #4]
 800ed1a:	f001 f8f3 	bl	800ff04 <USBD_LL_IsStallEP>
 800ed1e:	4603      	mov	r3, r0
 800ed20:	2b00      	cmp	r3, #0
 800ed22:	d003      	beq.n	800ed2c <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800ed24:	68bb      	ldr	r3, [r7, #8]
 800ed26:	2201      	movs	r2, #1
 800ed28:	601a      	str	r2, [r3, #0]
 800ed2a:	e002      	b.n	800ed32 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800ed2c:	68bb      	ldr	r3, [r7, #8]
 800ed2e:	2200      	movs	r2, #0
 800ed30:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800ed32:	68bb      	ldr	r3, [r7, #8]
 800ed34:	2202      	movs	r2, #2
 800ed36:	4619      	mov	r1, r3
 800ed38:	6878      	ldr	r0, [r7, #4]
 800ed3a:	f000 fbfb 	bl	800f534 <USBD_CtlSendData>
              break;
 800ed3e:	e004      	b.n	800ed4a <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800ed40:	6839      	ldr	r1, [r7, #0]
 800ed42:	6878      	ldr	r0, [r7, #4]
 800ed44:	f000 fb85 	bl	800f452 <USBD_CtlError>
              break;
 800ed48:	bf00      	nop
          }
          break;
 800ed4a:	e004      	b.n	800ed56 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800ed4c:	6839      	ldr	r1, [r7, #0]
 800ed4e:	6878      	ldr	r0, [r7, #4]
 800ed50:	f000 fb7f 	bl	800f452 <USBD_CtlError>
          break;
 800ed54:	bf00      	nop
      }
      break;
 800ed56:	e005      	b.n	800ed64 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800ed58:	6839      	ldr	r1, [r7, #0]
 800ed5a:	6878      	ldr	r0, [r7, #4]
 800ed5c:	f000 fb79 	bl	800f452 <USBD_CtlError>
      break;
 800ed60:	e000      	b.n	800ed64 <USBD_StdEPReq+0x330>
      break;
 800ed62:	bf00      	nop
  }

  return ret;
 800ed64:	7bfb      	ldrb	r3, [r7, #15]
}
 800ed66:	4618      	mov	r0, r3
 800ed68:	3710      	adds	r7, #16
 800ed6a:	46bd      	mov	sp, r7
 800ed6c:	bd80      	pop	{r7, pc}
	...

0800ed70 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ed70:	b580      	push	{r7, lr}
 800ed72:	b084      	sub	sp, #16
 800ed74:	af00      	add	r7, sp, #0
 800ed76:	6078      	str	r0, [r7, #4]
 800ed78:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800ed7a:	2300      	movs	r3, #0
 800ed7c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800ed7e:	2300      	movs	r3, #0
 800ed80:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800ed82:	2300      	movs	r3, #0
 800ed84:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800ed86:	683b      	ldr	r3, [r7, #0]
 800ed88:	885b      	ldrh	r3, [r3, #2]
 800ed8a:	0a1b      	lsrs	r3, r3, #8
 800ed8c:	b29b      	uxth	r3, r3
 800ed8e:	3b01      	subs	r3, #1
 800ed90:	2b0e      	cmp	r3, #14
 800ed92:	f200 8152 	bhi.w	800f03a <USBD_GetDescriptor+0x2ca>
 800ed96:	a201      	add	r2, pc, #4	; (adr r2, 800ed9c <USBD_GetDescriptor+0x2c>)
 800ed98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ed9c:	0800ee0d 	.word	0x0800ee0d
 800eda0:	0800ee25 	.word	0x0800ee25
 800eda4:	0800ee65 	.word	0x0800ee65
 800eda8:	0800f03b 	.word	0x0800f03b
 800edac:	0800f03b 	.word	0x0800f03b
 800edb0:	0800efdb 	.word	0x0800efdb
 800edb4:	0800f007 	.word	0x0800f007
 800edb8:	0800f03b 	.word	0x0800f03b
 800edbc:	0800f03b 	.word	0x0800f03b
 800edc0:	0800f03b 	.word	0x0800f03b
 800edc4:	0800f03b 	.word	0x0800f03b
 800edc8:	0800f03b 	.word	0x0800f03b
 800edcc:	0800f03b 	.word	0x0800f03b
 800edd0:	0800f03b 	.word	0x0800f03b
 800edd4:	0800edd9 	.word	0x0800edd9
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800edd8:	687b      	ldr	r3, [r7, #4]
 800edda:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800edde:	69db      	ldr	r3, [r3, #28]
 800ede0:	2b00      	cmp	r3, #0
 800ede2:	d00b      	beq.n	800edfc <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800ede4:	687b      	ldr	r3, [r7, #4]
 800ede6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800edea:	69db      	ldr	r3, [r3, #28]
 800edec:	687a      	ldr	r2, [r7, #4]
 800edee:	7c12      	ldrb	r2, [r2, #16]
 800edf0:	f107 0108 	add.w	r1, r7, #8
 800edf4:	4610      	mov	r0, r2
 800edf6:	4798      	blx	r3
 800edf8:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800edfa:	e126      	b.n	800f04a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800edfc:	6839      	ldr	r1, [r7, #0]
 800edfe:	6878      	ldr	r0, [r7, #4]
 800ee00:	f000 fb27 	bl	800f452 <USBD_CtlError>
        err++;
 800ee04:	7afb      	ldrb	r3, [r7, #11]
 800ee06:	3301      	adds	r3, #1
 800ee08:	72fb      	strb	r3, [r7, #11]
      break;
 800ee0a:	e11e      	b.n	800f04a <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800ee0c:	687b      	ldr	r3, [r7, #4]
 800ee0e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ee12:	681b      	ldr	r3, [r3, #0]
 800ee14:	687a      	ldr	r2, [r7, #4]
 800ee16:	7c12      	ldrb	r2, [r2, #16]
 800ee18:	f107 0108 	add.w	r1, r7, #8
 800ee1c:	4610      	mov	r0, r2
 800ee1e:	4798      	blx	r3
 800ee20:	60f8      	str	r0, [r7, #12]
      break;
 800ee22:	e112      	b.n	800f04a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ee24:	687b      	ldr	r3, [r7, #4]
 800ee26:	7c1b      	ldrb	r3, [r3, #16]
 800ee28:	2b00      	cmp	r3, #0
 800ee2a:	d10d      	bne.n	800ee48 <USBD_GetDescriptor+0xd8>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800ee2c:	687b      	ldr	r3, [r7, #4]
 800ee2e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ee32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ee34:	f107 0208 	add.w	r2, r7, #8
 800ee38:	4610      	mov	r0, r2
 800ee3a:	4798      	blx	r3
 800ee3c:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800ee3e:	68fb      	ldr	r3, [r7, #12]
 800ee40:	3301      	adds	r3, #1
 800ee42:	2202      	movs	r2, #2
 800ee44:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800ee46:	e100      	b.n	800f04a <USBD_GetDescriptor+0x2da>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800ee48:	687b      	ldr	r3, [r7, #4]
 800ee4a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ee4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ee50:	f107 0208 	add.w	r2, r7, #8
 800ee54:	4610      	mov	r0, r2
 800ee56:	4798      	blx	r3
 800ee58:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800ee5a:	68fb      	ldr	r3, [r7, #12]
 800ee5c:	3301      	adds	r3, #1
 800ee5e:	2202      	movs	r2, #2
 800ee60:	701a      	strb	r2, [r3, #0]
      break;
 800ee62:	e0f2      	b.n	800f04a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800ee64:	683b      	ldr	r3, [r7, #0]
 800ee66:	885b      	ldrh	r3, [r3, #2]
 800ee68:	b2db      	uxtb	r3, r3
 800ee6a:	2b05      	cmp	r3, #5
 800ee6c:	f200 80ac 	bhi.w	800efc8 <USBD_GetDescriptor+0x258>
 800ee70:	a201      	add	r2, pc, #4	; (adr r2, 800ee78 <USBD_GetDescriptor+0x108>)
 800ee72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ee76:	bf00      	nop
 800ee78:	0800ee91 	.word	0x0800ee91
 800ee7c:	0800eec5 	.word	0x0800eec5
 800ee80:	0800eef9 	.word	0x0800eef9
 800ee84:	0800ef2d 	.word	0x0800ef2d
 800ee88:	0800ef61 	.word	0x0800ef61
 800ee8c:	0800ef95 	.word	0x0800ef95
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800ee90:	687b      	ldr	r3, [r7, #4]
 800ee92:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ee96:	685b      	ldr	r3, [r3, #4]
 800ee98:	2b00      	cmp	r3, #0
 800ee9a:	d00b      	beq.n	800eeb4 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800ee9c:	687b      	ldr	r3, [r7, #4]
 800ee9e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800eea2:	685b      	ldr	r3, [r3, #4]
 800eea4:	687a      	ldr	r2, [r7, #4]
 800eea6:	7c12      	ldrb	r2, [r2, #16]
 800eea8:	f107 0108 	add.w	r1, r7, #8
 800eeac:	4610      	mov	r0, r2
 800eeae:	4798      	blx	r3
 800eeb0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800eeb2:	e091      	b.n	800efd8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800eeb4:	6839      	ldr	r1, [r7, #0]
 800eeb6:	6878      	ldr	r0, [r7, #4]
 800eeb8:	f000 facb 	bl	800f452 <USBD_CtlError>
            err++;
 800eebc:	7afb      	ldrb	r3, [r7, #11]
 800eebe:	3301      	adds	r3, #1
 800eec0:	72fb      	strb	r3, [r7, #11]
          break;
 800eec2:	e089      	b.n	800efd8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800eec4:	687b      	ldr	r3, [r7, #4]
 800eec6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800eeca:	689b      	ldr	r3, [r3, #8]
 800eecc:	2b00      	cmp	r3, #0
 800eece:	d00b      	beq.n	800eee8 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800eed0:	687b      	ldr	r3, [r7, #4]
 800eed2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800eed6:	689b      	ldr	r3, [r3, #8]
 800eed8:	687a      	ldr	r2, [r7, #4]
 800eeda:	7c12      	ldrb	r2, [r2, #16]
 800eedc:	f107 0108 	add.w	r1, r7, #8
 800eee0:	4610      	mov	r0, r2
 800eee2:	4798      	blx	r3
 800eee4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800eee6:	e077      	b.n	800efd8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800eee8:	6839      	ldr	r1, [r7, #0]
 800eeea:	6878      	ldr	r0, [r7, #4]
 800eeec:	f000 fab1 	bl	800f452 <USBD_CtlError>
            err++;
 800eef0:	7afb      	ldrb	r3, [r7, #11]
 800eef2:	3301      	adds	r3, #1
 800eef4:	72fb      	strb	r3, [r7, #11]
          break;
 800eef6:	e06f      	b.n	800efd8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800eef8:	687b      	ldr	r3, [r7, #4]
 800eefa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800eefe:	68db      	ldr	r3, [r3, #12]
 800ef00:	2b00      	cmp	r3, #0
 800ef02:	d00b      	beq.n	800ef1c <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800ef04:	687b      	ldr	r3, [r7, #4]
 800ef06:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ef0a:	68db      	ldr	r3, [r3, #12]
 800ef0c:	687a      	ldr	r2, [r7, #4]
 800ef0e:	7c12      	ldrb	r2, [r2, #16]
 800ef10:	f107 0108 	add.w	r1, r7, #8
 800ef14:	4610      	mov	r0, r2
 800ef16:	4798      	blx	r3
 800ef18:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ef1a:	e05d      	b.n	800efd8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800ef1c:	6839      	ldr	r1, [r7, #0]
 800ef1e:	6878      	ldr	r0, [r7, #4]
 800ef20:	f000 fa97 	bl	800f452 <USBD_CtlError>
            err++;
 800ef24:	7afb      	ldrb	r3, [r7, #11]
 800ef26:	3301      	adds	r3, #1
 800ef28:	72fb      	strb	r3, [r7, #11]
          break;
 800ef2a:	e055      	b.n	800efd8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800ef2c:	687b      	ldr	r3, [r7, #4]
 800ef2e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ef32:	691b      	ldr	r3, [r3, #16]
 800ef34:	2b00      	cmp	r3, #0
 800ef36:	d00b      	beq.n	800ef50 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800ef38:	687b      	ldr	r3, [r7, #4]
 800ef3a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ef3e:	691b      	ldr	r3, [r3, #16]
 800ef40:	687a      	ldr	r2, [r7, #4]
 800ef42:	7c12      	ldrb	r2, [r2, #16]
 800ef44:	f107 0108 	add.w	r1, r7, #8
 800ef48:	4610      	mov	r0, r2
 800ef4a:	4798      	blx	r3
 800ef4c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ef4e:	e043      	b.n	800efd8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800ef50:	6839      	ldr	r1, [r7, #0]
 800ef52:	6878      	ldr	r0, [r7, #4]
 800ef54:	f000 fa7d 	bl	800f452 <USBD_CtlError>
            err++;
 800ef58:	7afb      	ldrb	r3, [r7, #11]
 800ef5a:	3301      	adds	r3, #1
 800ef5c:	72fb      	strb	r3, [r7, #11]
          break;
 800ef5e:	e03b      	b.n	800efd8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800ef60:	687b      	ldr	r3, [r7, #4]
 800ef62:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ef66:	695b      	ldr	r3, [r3, #20]
 800ef68:	2b00      	cmp	r3, #0
 800ef6a:	d00b      	beq.n	800ef84 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800ef6c:	687b      	ldr	r3, [r7, #4]
 800ef6e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ef72:	695b      	ldr	r3, [r3, #20]
 800ef74:	687a      	ldr	r2, [r7, #4]
 800ef76:	7c12      	ldrb	r2, [r2, #16]
 800ef78:	f107 0108 	add.w	r1, r7, #8
 800ef7c:	4610      	mov	r0, r2
 800ef7e:	4798      	blx	r3
 800ef80:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ef82:	e029      	b.n	800efd8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800ef84:	6839      	ldr	r1, [r7, #0]
 800ef86:	6878      	ldr	r0, [r7, #4]
 800ef88:	f000 fa63 	bl	800f452 <USBD_CtlError>
            err++;
 800ef8c:	7afb      	ldrb	r3, [r7, #11]
 800ef8e:	3301      	adds	r3, #1
 800ef90:	72fb      	strb	r3, [r7, #11]
          break;
 800ef92:	e021      	b.n	800efd8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800ef94:	687b      	ldr	r3, [r7, #4]
 800ef96:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ef9a:	699b      	ldr	r3, [r3, #24]
 800ef9c:	2b00      	cmp	r3, #0
 800ef9e:	d00b      	beq.n	800efb8 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800efa0:	687b      	ldr	r3, [r7, #4]
 800efa2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800efa6:	699b      	ldr	r3, [r3, #24]
 800efa8:	687a      	ldr	r2, [r7, #4]
 800efaa:	7c12      	ldrb	r2, [r2, #16]
 800efac:	f107 0108 	add.w	r1, r7, #8
 800efb0:	4610      	mov	r0, r2
 800efb2:	4798      	blx	r3
 800efb4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800efb6:	e00f      	b.n	800efd8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800efb8:	6839      	ldr	r1, [r7, #0]
 800efba:	6878      	ldr	r0, [r7, #4]
 800efbc:	f000 fa49 	bl	800f452 <USBD_CtlError>
            err++;
 800efc0:	7afb      	ldrb	r3, [r7, #11]
 800efc2:	3301      	adds	r3, #1
 800efc4:	72fb      	strb	r3, [r7, #11]
          break;
 800efc6:	e007      	b.n	800efd8 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800efc8:	6839      	ldr	r1, [r7, #0]
 800efca:	6878      	ldr	r0, [r7, #4]
 800efcc:	f000 fa41 	bl	800f452 <USBD_CtlError>
          err++;
 800efd0:	7afb      	ldrb	r3, [r7, #11]
 800efd2:	3301      	adds	r3, #1
 800efd4:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800efd6:	bf00      	nop
      }
      break;
 800efd8:	e037      	b.n	800f04a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800efda:	687b      	ldr	r3, [r7, #4]
 800efdc:	7c1b      	ldrb	r3, [r3, #16]
 800efde:	2b00      	cmp	r3, #0
 800efe0:	d109      	bne.n	800eff6 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800efe2:	687b      	ldr	r3, [r7, #4]
 800efe4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800efe8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800efea:	f107 0208 	add.w	r2, r7, #8
 800efee:	4610      	mov	r0, r2
 800eff0:	4798      	blx	r3
 800eff2:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800eff4:	e029      	b.n	800f04a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800eff6:	6839      	ldr	r1, [r7, #0]
 800eff8:	6878      	ldr	r0, [r7, #4]
 800effa:	f000 fa2a 	bl	800f452 <USBD_CtlError>
        err++;
 800effe:	7afb      	ldrb	r3, [r7, #11]
 800f000:	3301      	adds	r3, #1
 800f002:	72fb      	strb	r3, [r7, #11]
      break;
 800f004:	e021      	b.n	800f04a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800f006:	687b      	ldr	r3, [r7, #4]
 800f008:	7c1b      	ldrb	r3, [r3, #16]
 800f00a:	2b00      	cmp	r3, #0
 800f00c:	d10d      	bne.n	800f02a <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800f00e:	687b      	ldr	r3, [r7, #4]
 800f010:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f014:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f016:	f107 0208 	add.w	r2, r7, #8
 800f01a:	4610      	mov	r0, r2
 800f01c:	4798      	blx	r3
 800f01e:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800f020:	68fb      	ldr	r3, [r7, #12]
 800f022:	3301      	adds	r3, #1
 800f024:	2207      	movs	r2, #7
 800f026:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800f028:	e00f      	b.n	800f04a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800f02a:	6839      	ldr	r1, [r7, #0]
 800f02c:	6878      	ldr	r0, [r7, #4]
 800f02e:	f000 fa10 	bl	800f452 <USBD_CtlError>
        err++;
 800f032:	7afb      	ldrb	r3, [r7, #11]
 800f034:	3301      	adds	r3, #1
 800f036:	72fb      	strb	r3, [r7, #11]
      break;
 800f038:	e007      	b.n	800f04a <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800f03a:	6839      	ldr	r1, [r7, #0]
 800f03c:	6878      	ldr	r0, [r7, #4]
 800f03e:	f000 fa08 	bl	800f452 <USBD_CtlError>
      err++;
 800f042:	7afb      	ldrb	r3, [r7, #11]
 800f044:	3301      	adds	r3, #1
 800f046:	72fb      	strb	r3, [r7, #11]
      break;
 800f048:	bf00      	nop
  }

  if (err != 0U)
 800f04a:	7afb      	ldrb	r3, [r7, #11]
 800f04c:	2b00      	cmp	r3, #0
 800f04e:	d11e      	bne.n	800f08e <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800f050:	683b      	ldr	r3, [r7, #0]
 800f052:	88db      	ldrh	r3, [r3, #6]
 800f054:	2b00      	cmp	r3, #0
 800f056:	d016      	beq.n	800f086 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800f058:	893b      	ldrh	r3, [r7, #8]
 800f05a:	2b00      	cmp	r3, #0
 800f05c:	d00e      	beq.n	800f07c <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800f05e:	683b      	ldr	r3, [r7, #0]
 800f060:	88da      	ldrh	r2, [r3, #6]
 800f062:	893b      	ldrh	r3, [r7, #8]
 800f064:	4293      	cmp	r3, r2
 800f066:	bf28      	it	cs
 800f068:	4613      	movcs	r3, r2
 800f06a:	b29b      	uxth	r3, r3
 800f06c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800f06e:	893b      	ldrh	r3, [r7, #8]
 800f070:	461a      	mov	r2, r3
 800f072:	68f9      	ldr	r1, [r7, #12]
 800f074:	6878      	ldr	r0, [r7, #4]
 800f076:	f000 fa5d 	bl	800f534 <USBD_CtlSendData>
 800f07a:	e009      	b.n	800f090 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800f07c:	6839      	ldr	r1, [r7, #0]
 800f07e:	6878      	ldr	r0, [r7, #4]
 800f080:	f000 f9e7 	bl	800f452 <USBD_CtlError>
 800f084:	e004      	b.n	800f090 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800f086:	6878      	ldr	r0, [r7, #4]
 800f088:	f000 faae 	bl	800f5e8 <USBD_CtlSendStatus>
 800f08c:	e000      	b.n	800f090 <USBD_GetDescriptor+0x320>
    return;
 800f08e:	bf00      	nop
  }
}
 800f090:	3710      	adds	r7, #16
 800f092:	46bd      	mov	sp, r7
 800f094:	bd80      	pop	{r7, pc}
 800f096:	bf00      	nop

0800f098 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f098:	b580      	push	{r7, lr}
 800f09a:	b084      	sub	sp, #16
 800f09c:	af00      	add	r7, sp, #0
 800f09e:	6078      	str	r0, [r7, #4]
 800f0a0:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800f0a2:	683b      	ldr	r3, [r7, #0]
 800f0a4:	889b      	ldrh	r3, [r3, #4]
 800f0a6:	2b00      	cmp	r3, #0
 800f0a8:	d131      	bne.n	800f10e <USBD_SetAddress+0x76>
 800f0aa:	683b      	ldr	r3, [r7, #0]
 800f0ac:	88db      	ldrh	r3, [r3, #6]
 800f0ae:	2b00      	cmp	r3, #0
 800f0b0:	d12d      	bne.n	800f10e <USBD_SetAddress+0x76>
 800f0b2:	683b      	ldr	r3, [r7, #0]
 800f0b4:	885b      	ldrh	r3, [r3, #2]
 800f0b6:	2b7f      	cmp	r3, #127	; 0x7f
 800f0b8:	d829      	bhi.n	800f10e <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800f0ba:	683b      	ldr	r3, [r7, #0]
 800f0bc:	885b      	ldrh	r3, [r3, #2]
 800f0be:	b2db      	uxtb	r3, r3
 800f0c0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f0c4:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f0c6:	687b      	ldr	r3, [r7, #4]
 800f0c8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f0cc:	b2db      	uxtb	r3, r3
 800f0ce:	2b03      	cmp	r3, #3
 800f0d0:	d104      	bne.n	800f0dc <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800f0d2:	6839      	ldr	r1, [r7, #0]
 800f0d4:	6878      	ldr	r0, [r7, #4]
 800f0d6:	f000 f9bc 	bl	800f452 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f0da:	e01d      	b.n	800f118 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800f0dc:	687b      	ldr	r3, [r7, #4]
 800f0de:	7bfa      	ldrb	r2, [r7, #15]
 800f0e0:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800f0e4:	7bfb      	ldrb	r3, [r7, #15]
 800f0e6:	4619      	mov	r1, r3
 800f0e8:	6878      	ldr	r0, [r7, #4]
 800f0ea:	f000 ff37 	bl	800ff5c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800f0ee:	6878      	ldr	r0, [r7, #4]
 800f0f0:	f000 fa7a 	bl	800f5e8 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800f0f4:	7bfb      	ldrb	r3, [r7, #15]
 800f0f6:	2b00      	cmp	r3, #0
 800f0f8:	d004      	beq.n	800f104 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800f0fa:	687b      	ldr	r3, [r7, #4]
 800f0fc:	2202      	movs	r2, #2
 800f0fe:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f102:	e009      	b.n	800f118 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800f104:	687b      	ldr	r3, [r7, #4]
 800f106:	2201      	movs	r2, #1
 800f108:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f10c:	e004      	b.n	800f118 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800f10e:	6839      	ldr	r1, [r7, #0]
 800f110:	6878      	ldr	r0, [r7, #4]
 800f112:	f000 f99e 	bl	800f452 <USBD_CtlError>
  }
}
 800f116:	bf00      	nop
 800f118:	bf00      	nop
 800f11a:	3710      	adds	r7, #16
 800f11c:	46bd      	mov	sp, r7
 800f11e:	bd80      	pop	{r7, pc}

0800f120 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f120:	b580      	push	{r7, lr}
 800f122:	b084      	sub	sp, #16
 800f124:	af00      	add	r7, sp, #0
 800f126:	6078      	str	r0, [r7, #4]
 800f128:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800f12a:	2300      	movs	r3, #0
 800f12c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800f12e:	683b      	ldr	r3, [r7, #0]
 800f130:	885b      	ldrh	r3, [r3, #2]
 800f132:	b2da      	uxtb	r2, r3
 800f134:	4b4e      	ldr	r3, [pc, #312]	; (800f270 <USBD_SetConfig+0x150>)
 800f136:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800f138:	4b4d      	ldr	r3, [pc, #308]	; (800f270 <USBD_SetConfig+0x150>)
 800f13a:	781b      	ldrb	r3, [r3, #0]
 800f13c:	2b01      	cmp	r3, #1
 800f13e:	d905      	bls.n	800f14c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800f140:	6839      	ldr	r1, [r7, #0]
 800f142:	6878      	ldr	r0, [r7, #4]
 800f144:	f000 f985 	bl	800f452 <USBD_CtlError>
    return USBD_FAIL;
 800f148:	2303      	movs	r3, #3
 800f14a:	e08c      	b.n	800f266 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800f14c:	687b      	ldr	r3, [r7, #4]
 800f14e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f152:	b2db      	uxtb	r3, r3
 800f154:	2b02      	cmp	r3, #2
 800f156:	d002      	beq.n	800f15e <USBD_SetConfig+0x3e>
 800f158:	2b03      	cmp	r3, #3
 800f15a:	d029      	beq.n	800f1b0 <USBD_SetConfig+0x90>
 800f15c:	e075      	b.n	800f24a <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800f15e:	4b44      	ldr	r3, [pc, #272]	; (800f270 <USBD_SetConfig+0x150>)
 800f160:	781b      	ldrb	r3, [r3, #0]
 800f162:	2b00      	cmp	r3, #0
 800f164:	d020      	beq.n	800f1a8 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800f166:	4b42      	ldr	r3, [pc, #264]	; (800f270 <USBD_SetConfig+0x150>)
 800f168:	781b      	ldrb	r3, [r3, #0]
 800f16a:	461a      	mov	r2, r3
 800f16c:	687b      	ldr	r3, [r7, #4]
 800f16e:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800f170:	4b3f      	ldr	r3, [pc, #252]	; (800f270 <USBD_SetConfig+0x150>)
 800f172:	781b      	ldrb	r3, [r3, #0]
 800f174:	4619      	mov	r1, r3
 800f176:	6878      	ldr	r0, [r7, #4]
 800f178:	f7fe ffbd 	bl	800e0f6 <USBD_SetClassConfig>
 800f17c:	4603      	mov	r3, r0
 800f17e:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800f180:	7bfb      	ldrb	r3, [r7, #15]
 800f182:	2b00      	cmp	r3, #0
 800f184:	d008      	beq.n	800f198 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800f186:	6839      	ldr	r1, [r7, #0]
 800f188:	6878      	ldr	r0, [r7, #4]
 800f18a:	f000 f962 	bl	800f452 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800f18e:	687b      	ldr	r3, [r7, #4]
 800f190:	2202      	movs	r2, #2
 800f192:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800f196:	e065      	b.n	800f264 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800f198:	6878      	ldr	r0, [r7, #4]
 800f19a:	f000 fa25 	bl	800f5e8 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800f19e:	687b      	ldr	r3, [r7, #4]
 800f1a0:	2203      	movs	r2, #3
 800f1a2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800f1a6:	e05d      	b.n	800f264 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800f1a8:	6878      	ldr	r0, [r7, #4]
 800f1aa:	f000 fa1d 	bl	800f5e8 <USBD_CtlSendStatus>
      break;
 800f1ae:	e059      	b.n	800f264 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800f1b0:	4b2f      	ldr	r3, [pc, #188]	; (800f270 <USBD_SetConfig+0x150>)
 800f1b2:	781b      	ldrb	r3, [r3, #0]
 800f1b4:	2b00      	cmp	r3, #0
 800f1b6:	d112      	bne.n	800f1de <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800f1b8:	687b      	ldr	r3, [r7, #4]
 800f1ba:	2202      	movs	r2, #2
 800f1bc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800f1c0:	4b2b      	ldr	r3, [pc, #172]	; (800f270 <USBD_SetConfig+0x150>)
 800f1c2:	781b      	ldrb	r3, [r3, #0]
 800f1c4:	461a      	mov	r2, r3
 800f1c6:	687b      	ldr	r3, [r7, #4]
 800f1c8:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800f1ca:	4b29      	ldr	r3, [pc, #164]	; (800f270 <USBD_SetConfig+0x150>)
 800f1cc:	781b      	ldrb	r3, [r3, #0]
 800f1ce:	4619      	mov	r1, r3
 800f1d0:	6878      	ldr	r0, [r7, #4]
 800f1d2:	f7fe ffac 	bl	800e12e <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800f1d6:	6878      	ldr	r0, [r7, #4]
 800f1d8:	f000 fa06 	bl	800f5e8 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800f1dc:	e042      	b.n	800f264 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800f1de:	4b24      	ldr	r3, [pc, #144]	; (800f270 <USBD_SetConfig+0x150>)
 800f1e0:	781b      	ldrb	r3, [r3, #0]
 800f1e2:	461a      	mov	r2, r3
 800f1e4:	687b      	ldr	r3, [r7, #4]
 800f1e6:	685b      	ldr	r3, [r3, #4]
 800f1e8:	429a      	cmp	r2, r3
 800f1ea:	d02a      	beq.n	800f242 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800f1ec:	687b      	ldr	r3, [r7, #4]
 800f1ee:	685b      	ldr	r3, [r3, #4]
 800f1f0:	b2db      	uxtb	r3, r3
 800f1f2:	4619      	mov	r1, r3
 800f1f4:	6878      	ldr	r0, [r7, #4]
 800f1f6:	f7fe ff9a 	bl	800e12e <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800f1fa:	4b1d      	ldr	r3, [pc, #116]	; (800f270 <USBD_SetConfig+0x150>)
 800f1fc:	781b      	ldrb	r3, [r3, #0]
 800f1fe:	461a      	mov	r2, r3
 800f200:	687b      	ldr	r3, [r7, #4]
 800f202:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800f204:	4b1a      	ldr	r3, [pc, #104]	; (800f270 <USBD_SetConfig+0x150>)
 800f206:	781b      	ldrb	r3, [r3, #0]
 800f208:	4619      	mov	r1, r3
 800f20a:	6878      	ldr	r0, [r7, #4]
 800f20c:	f7fe ff73 	bl	800e0f6 <USBD_SetClassConfig>
 800f210:	4603      	mov	r3, r0
 800f212:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800f214:	7bfb      	ldrb	r3, [r7, #15]
 800f216:	2b00      	cmp	r3, #0
 800f218:	d00f      	beq.n	800f23a <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800f21a:	6839      	ldr	r1, [r7, #0]
 800f21c:	6878      	ldr	r0, [r7, #4]
 800f21e:	f000 f918 	bl	800f452 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800f222:	687b      	ldr	r3, [r7, #4]
 800f224:	685b      	ldr	r3, [r3, #4]
 800f226:	b2db      	uxtb	r3, r3
 800f228:	4619      	mov	r1, r3
 800f22a:	6878      	ldr	r0, [r7, #4]
 800f22c:	f7fe ff7f 	bl	800e12e <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800f230:	687b      	ldr	r3, [r7, #4]
 800f232:	2202      	movs	r2, #2
 800f234:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800f238:	e014      	b.n	800f264 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800f23a:	6878      	ldr	r0, [r7, #4]
 800f23c:	f000 f9d4 	bl	800f5e8 <USBD_CtlSendStatus>
      break;
 800f240:	e010      	b.n	800f264 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800f242:	6878      	ldr	r0, [r7, #4]
 800f244:	f000 f9d0 	bl	800f5e8 <USBD_CtlSendStatus>
      break;
 800f248:	e00c      	b.n	800f264 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800f24a:	6839      	ldr	r1, [r7, #0]
 800f24c:	6878      	ldr	r0, [r7, #4]
 800f24e:	f000 f900 	bl	800f452 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800f252:	4b07      	ldr	r3, [pc, #28]	; (800f270 <USBD_SetConfig+0x150>)
 800f254:	781b      	ldrb	r3, [r3, #0]
 800f256:	4619      	mov	r1, r3
 800f258:	6878      	ldr	r0, [r7, #4]
 800f25a:	f7fe ff68 	bl	800e12e <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800f25e:	2303      	movs	r3, #3
 800f260:	73fb      	strb	r3, [r7, #15]
      break;
 800f262:	bf00      	nop
  }

  return ret;
 800f264:	7bfb      	ldrb	r3, [r7, #15]
}
 800f266:	4618      	mov	r0, r3
 800f268:	3710      	adds	r7, #16
 800f26a:	46bd      	mov	sp, r7
 800f26c:	bd80      	pop	{r7, pc}
 800f26e:	bf00      	nop
 800f270:	20000a44 	.word	0x20000a44

0800f274 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f274:	b580      	push	{r7, lr}
 800f276:	b082      	sub	sp, #8
 800f278:	af00      	add	r7, sp, #0
 800f27a:	6078      	str	r0, [r7, #4]
 800f27c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800f27e:	683b      	ldr	r3, [r7, #0]
 800f280:	88db      	ldrh	r3, [r3, #6]
 800f282:	2b01      	cmp	r3, #1
 800f284:	d004      	beq.n	800f290 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800f286:	6839      	ldr	r1, [r7, #0]
 800f288:	6878      	ldr	r0, [r7, #4]
 800f28a:	f000 f8e2 	bl	800f452 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800f28e:	e023      	b.n	800f2d8 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800f290:	687b      	ldr	r3, [r7, #4]
 800f292:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f296:	b2db      	uxtb	r3, r3
 800f298:	2b02      	cmp	r3, #2
 800f29a:	dc02      	bgt.n	800f2a2 <USBD_GetConfig+0x2e>
 800f29c:	2b00      	cmp	r3, #0
 800f29e:	dc03      	bgt.n	800f2a8 <USBD_GetConfig+0x34>
 800f2a0:	e015      	b.n	800f2ce <USBD_GetConfig+0x5a>
 800f2a2:	2b03      	cmp	r3, #3
 800f2a4:	d00b      	beq.n	800f2be <USBD_GetConfig+0x4a>
 800f2a6:	e012      	b.n	800f2ce <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800f2a8:	687b      	ldr	r3, [r7, #4]
 800f2aa:	2200      	movs	r2, #0
 800f2ac:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800f2ae:	687b      	ldr	r3, [r7, #4]
 800f2b0:	3308      	adds	r3, #8
 800f2b2:	2201      	movs	r2, #1
 800f2b4:	4619      	mov	r1, r3
 800f2b6:	6878      	ldr	r0, [r7, #4]
 800f2b8:	f000 f93c 	bl	800f534 <USBD_CtlSendData>
        break;
 800f2bc:	e00c      	b.n	800f2d8 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800f2be:	687b      	ldr	r3, [r7, #4]
 800f2c0:	3304      	adds	r3, #4
 800f2c2:	2201      	movs	r2, #1
 800f2c4:	4619      	mov	r1, r3
 800f2c6:	6878      	ldr	r0, [r7, #4]
 800f2c8:	f000 f934 	bl	800f534 <USBD_CtlSendData>
        break;
 800f2cc:	e004      	b.n	800f2d8 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800f2ce:	6839      	ldr	r1, [r7, #0]
 800f2d0:	6878      	ldr	r0, [r7, #4]
 800f2d2:	f000 f8be 	bl	800f452 <USBD_CtlError>
        break;
 800f2d6:	bf00      	nop
}
 800f2d8:	bf00      	nop
 800f2da:	3708      	adds	r7, #8
 800f2dc:	46bd      	mov	sp, r7
 800f2de:	bd80      	pop	{r7, pc}

0800f2e0 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f2e0:	b580      	push	{r7, lr}
 800f2e2:	b082      	sub	sp, #8
 800f2e4:	af00      	add	r7, sp, #0
 800f2e6:	6078      	str	r0, [r7, #4]
 800f2e8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800f2ea:	687b      	ldr	r3, [r7, #4]
 800f2ec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f2f0:	b2db      	uxtb	r3, r3
 800f2f2:	3b01      	subs	r3, #1
 800f2f4:	2b02      	cmp	r3, #2
 800f2f6:	d81e      	bhi.n	800f336 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800f2f8:	683b      	ldr	r3, [r7, #0]
 800f2fa:	88db      	ldrh	r3, [r3, #6]
 800f2fc:	2b02      	cmp	r3, #2
 800f2fe:	d004      	beq.n	800f30a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800f300:	6839      	ldr	r1, [r7, #0]
 800f302:	6878      	ldr	r0, [r7, #4]
 800f304:	f000 f8a5 	bl	800f452 <USBD_CtlError>
        break;
 800f308:	e01a      	b.n	800f340 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800f30a:	687b      	ldr	r3, [r7, #4]
 800f30c:	2201      	movs	r2, #1
 800f30e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800f310:	687b      	ldr	r3, [r7, #4]
 800f312:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800f316:	2b00      	cmp	r3, #0
 800f318:	d005      	beq.n	800f326 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800f31a:	687b      	ldr	r3, [r7, #4]
 800f31c:	68db      	ldr	r3, [r3, #12]
 800f31e:	f043 0202 	orr.w	r2, r3, #2
 800f322:	687b      	ldr	r3, [r7, #4]
 800f324:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800f326:	687b      	ldr	r3, [r7, #4]
 800f328:	330c      	adds	r3, #12
 800f32a:	2202      	movs	r2, #2
 800f32c:	4619      	mov	r1, r3
 800f32e:	6878      	ldr	r0, [r7, #4]
 800f330:	f000 f900 	bl	800f534 <USBD_CtlSendData>
      break;
 800f334:	e004      	b.n	800f340 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800f336:	6839      	ldr	r1, [r7, #0]
 800f338:	6878      	ldr	r0, [r7, #4]
 800f33a:	f000 f88a 	bl	800f452 <USBD_CtlError>
      break;
 800f33e:	bf00      	nop
  }
}
 800f340:	bf00      	nop
 800f342:	3708      	adds	r7, #8
 800f344:	46bd      	mov	sp, r7
 800f346:	bd80      	pop	{r7, pc}

0800f348 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f348:	b580      	push	{r7, lr}
 800f34a:	b082      	sub	sp, #8
 800f34c:	af00      	add	r7, sp, #0
 800f34e:	6078      	str	r0, [r7, #4]
 800f350:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800f352:	683b      	ldr	r3, [r7, #0]
 800f354:	885b      	ldrh	r3, [r3, #2]
 800f356:	2b01      	cmp	r3, #1
 800f358:	d107      	bne.n	800f36a <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800f35a:	687b      	ldr	r3, [r7, #4]
 800f35c:	2201      	movs	r2, #1
 800f35e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800f362:	6878      	ldr	r0, [r7, #4]
 800f364:	f000 f940 	bl	800f5e8 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800f368:	e013      	b.n	800f392 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800f36a:	683b      	ldr	r3, [r7, #0]
 800f36c:	885b      	ldrh	r3, [r3, #2]
 800f36e:	2b02      	cmp	r3, #2
 800f370:	d10b      	bne.n	800f38a <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 800f372:	683b      	ldr	r3, [r7, #0]
 800f374:	889b      	ldrh	r3, [r3, #4]
 800f376:	0a1b      	lsrs	r3, r3, #8
 800f378:	b29b      	uxth	r3, r3
 800f37a:	b2da      	uxtb	r2, r3
 800f37c:	687b      	ldr	r3, [r7, #4]
 800f37e:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800f382:	6878      	ldr	r0, [r7, #4]
 800f384:	f000 f930 	bl	800f5e8 <USBD_CtlSendStatus>
}
 800f388:	e003      	b.n	800f392 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800f38a:	6839      	ldr	r1, [r7, #0]
 800f38c:	6878      	ldr	r0, [r7, #4]
 800f38e:	f000 f860 	bl	800f452 <USBD_CtlError>
}
 800f392:	bf00      	nop
 800f394:	3708      	adds	r7, #8
 800f396:	46bd      	mov	sp, r7
 800f398:	bd80      	pop	{r7, pc}

0800f39a <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f39a:	b580      	push	{r7, lr}
 800f39c:	b082      	sub	sp, #8
 800f39e:	af00      	add	r7, sp, #0
 800f3a0:	6078      	str	r0, [r7, #4]
 800f3a2:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800f3a4:	687b      	ldr	r3, [r7, #4]
 800f3a6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f3aa:	b2db      	uxtb	r3, r3
 800f3ac:	3b01      	subs	r3, #1
 800f3ae:	2b02      	cmp	r3, #2
 800f3b0:	d80b      	bhi.n	800f3ca <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800f3b2:	683b      	ldr	r3, [r7, #0]
 800f3b4:	885b      	ldrh	r3, [r3, #2]
 800f3b6:	2b01      	cmp	r3, #1
 800f3b8:	d10c      	bne.n	800f3d4 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800f3ba:	687b      	ldr	r3, [r7, #4]
 800f3bc:	2200      	movs	r2, #0
 800f3be:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800f3c2:	6878      	ldr	r0, [r7, #4]
 800f3c4:	f000 f910 	bl	800f5e8 <USBD_CtlSendStatus>
      }
      break;
 800f3c8:	e004      	b.n	800f3d4 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800f3ca:	6839      	ldr	r1, [r7, #0]
 800f3cc:	6878      	ldr	r0, [r7, #4]
 800f3ce:	f000 f840 	bl	800f452 <USBD_CtlError>
      break;
 800f3d2:	e000      	b.n	800f3d6 <USBD_ClrFeature+0x3c>
      break;
 800f3d4:	bf00      	nop
  }
}
 800f3d6:	bf00      	nop
 800f3d8:	3708      	adds	r7, #8
 800f3da:	46bd      	mov	sp, r7
 800f3dc:	bd80      	pop	{r7, pc}

0800f3de <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800f3de:	b580      	push	{r7, lr}
 800f3e0:	b084      	sub	sp, #16
 800f3e2:	af00      	add	r7, sp, #0
 800f3e4:	6078      	str	r0, [r7, #4]
 800f3e6:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800f3e8:	683b      	ldr	r3, [r7, #0]
 800f3ea:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800f3ec:	68fb      	ldr	r3, [r7, #12]
 800f3ee:	781a      	ldrb	r2, [r3, #0]
 800f3f0:	687b      	ldr	r3, [r7, #4]
 800f3f2:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800f3f4:	68fb      	ldr	r3, [r7, #12]
 800f3f6:	3301      	adds	r3, #1
 800f3f8:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800f3fa:	68fb      	ldr	r3, [r7, #12]
 800f3fc:	781a      	ldrb	r2, [r3, #0]
 800f3fe:	687b      	ldr	r3, [r7, #4]
 800f400:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800f402:	68fb      	ldr	r3, [r7, #12]
 800f404:	3301      	adds	r3, #1
 800f406:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800f408:	68f8      	ldr	r0, [r7, #12]
 800f40a:	f7ff fa17 	bl	800e83c <SWAPBYTE>
 800f40e:	4603      	mov	r3, r0
 800f410:	461a      	mov	r2, r3
 800f412:	687b      	ldr	r3, [r7, #4]
 800f414:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800f416:	68fb      	ldr	r3, [r7, #12]
 800f418:	3301      	adds	r3, #1
 800f41a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800f41c:	68fb      	ldr	r3, [r7, #12]
 800f41e:	3301      	adds	r3, #1
 800f420:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800f422:	68f8      	ldr	r0, [r7, #12]
 800f424:	f7ff fa0a 	bl	800e83c <SWAPBYTE>
 800f428:	4603      	mov	r3, r0
 800f42a:	461a      	mov	r2, r3
 800f42c:	687b      	ldr	r3, [r7, #4]
 800f42e:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800f430:	68fb      	ldr	r3, [r7, #12]
 800f432:	3301      	adds	r3, #1
 800f434:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800f436:	68fb      	ldr	r3, [r7, #12]
 800f438:	3301      	adds	r3, #1
 800f43a:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800f43c:	68f8      	ldr	r0, [r7, #12]
 800f43e:	f7ff f9fd 	bl	800e83c <SWAPBYTE>
 800f442:	4603      	mov	r3, r0
 800f444:	461a      	mov	r2, r3
 800f446:	687b      	ldr	r3, [r7, #4]
 800f448:	80da      	strh	r2, [r3, #6]
}
 800f44a:	bf00      	nop
 800f44c:	3710      	adds	r7, #16
 800f44e:	46bd      	mov	sp, r7
 800f450:	bd80      	pop	{r7, pc}

0800f452 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f452:	b580      	push	{r7, lr}
 800f454:	b082      	sub	sp, #8
 800f456:	af00      	add	r7, sp, #0
 800f458:	6078      	str	r0, [r7, #4]
 800f45a:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800f45c:	2180      	movs	r1, #128	; 0x80
 800f45e:	6878      	ldr	r0, [r7, #4]
 800f460:	f000 fd12 	bl	800fe88 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800f464:	2100      	movs	r1, #0
 800f466:	6878      	ldr	r0, [r7, #4]
 800f468:	f000 fd0e 	bl	800fe88 <USBD_LL_StallEP>
}
 800f46c:	bf00      	nop
 800f46e:	3708      	adds	r7, #8
 800f470:	46bd      	mov	sp, r7
 800f472:	bd80      	pop	{r7, pc}

0800f474 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800f474:	b580      	push	{r7, lr}
 800f476:	b086      	sub	sp, #24
 800f478:	af00      	add	r7, sp, #0
 800f47a:	60f8      	str	r0, [r7, #12]
 800f47c:	60b9      	str	r1, [r7, #8]
 800f47e:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800f480:	2300      	movs	r3, #0
 800f482:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800f484:	68fb      	ldr	r3, [r7, #12]
 800f486:	2b00      	cmp	r3, #0
 800f488:	d036      	beq.n	800f4f8 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800f48a:	68fb      	ldr	r3, [r7, #12]
 800f48c:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800f48e:	6938      	ldr	r0, [r7, #16]
 800f490:	f000 f836 	bl	800f500 <USBD_GetLen>
 800f494:	4603      	mov	r3, r0
 800f496:	3301      	adds	r3, #1
 800f498:	b29b      	uxth	r3, r3
 800f49a:	005b      	lsls	r3, r3, #1
 800f49c:	b29a      	uxth	r2, r3
 800f49e:	687b      	ldr	r3, [r7, #4]
 800f4a0:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800f4a2:	7dfb      	ldrb	r3, [r7, #23]
 800f4a4:	68ba      	ldr	r2, [r7, #8]
 800f4a6:	4413      	add	r3, r2
 800f4a8:	687a      	ldr	r2, [r7, #4]
 800f4aa:	7812      	ldrb	r2, [r2, #0]
 800f4ac:	701a      	strb	r2, [r3, #0]
  idx++;
 800f4ae:	7dfb      	ldrb	r3, [r7, #23]
 800f4b0:	3301      	adds	r3, #1
 800f4b2:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800f4b4:	7dfb      	ldrb	r3, [r7, #23]
 800f4b6:	68ba      	ldr	r2, [r7, #8]
 800f4b8:	4413      	add	r3, r2
 800f4ba:	2203      	movs	r2, #3
 800f4bc:	701a      	strb	r2, [r3, #0]
  idx++;
 800f4be:	7dfb      	ldrb	r3, [r7, #23]
 800f4c0:	3301      	adds	r3, #1
 800f4c2:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800f4c4:	e013      	b.n	800f4ee <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800f4c6:	7dfb      	ldrb	r3, [r7, #23]
 800f4c8:	68ba      	ldr	r2, [r7, #8]
 800f4ca:	4413      	add	r3, r2
 800f4cc:	693a      	ldr	r2, [r7, #16]
 800f4ce:	7812      	ldrb	r2, [r2, #0]
 800f4d0:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800f4d2:	693b      	ldr	r3, [r7, #16]
 800f4d4:	3301      	adds	r3, #1
 800f4d6:	613b      	str	r3, [r7, #16]
    idx++;
 800f4d8:	7dfb      	ldrb	r3, [r7, #23]
 800f4da:	3301      	adds	r3, #1
 800f4dc:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800f4de:	7dfb      	ldrb	r3, [r7, #23]
 800f4e0:	68ba      	ldr	r2, [r7, #8]
 800f4e2:	4413      	add	r3, r2
 800f4e4:	2200      	movs	r2, #0
 800f4e6:	701a      	strb	r2, [r3, #0]
    idx++;
 800f4e8:	7dfb      	ldrb	r3, [r7, #23]
 800f4ea:	3301      	adds	r3, #1
 800f4ec:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800f4ee:	693b      	ldr	r3, [r7, #16]
 800f4f0:	781b      	ldrb	r3, [r3, #0]
 800f4f2:	2b00      	cmp	r3, #0
 800f4f4:	d1e7      	bne.n	800f4c6 <USBD_GetString+0x52>
 800f4f6:	e000      	b.n	800f4fa <USBD_GetString+0x86>
    return;
 800f4f8:	bf00      	nop
  }
}
 800f4fa:	3718      	adds	r7, #24
 800f4fc:	46bd      	mov	sp, r7
 800f4fe:	bd80      	pop	{r7, pc}

0800f500 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800f500:	b480      	push	{r7}
 800f502:	b085      	sub	sp, #20
 800f504:	af00      	add	r7, sp, #0
 800f506:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800f508:	2300      	movs	r3, #0
 800f50a:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800f50c:	687b      	ldr	r3, [r7, #4]
 800f50e:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800f510:	e005      	b.n	800f51e <USBD_GetLen+0x1e>
  {
    len++;
 800f512:	7bfb      	ldrb	r3, [r7, #15]
 800f514:	3301      	adds	r3, #1
 800f516:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800f518:	68bb      	ldr	r3, [r7, #8]
 800f51a:	3301      	adds	r3, #1
 800f51c:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800f51e:	68bb      	ldr	r3, [r7, #8]
 800f520:	781b      	ldrb	r3, [r3, #0]
 800f522:	2b00      	cmp	r3, #0
 800f524:	d1f5      	bne.n	800f512 <USBD_GetLen+0x12>
  }

  return len;
 800f526:	7bfb      	ldrb	r3, [r7, #15]
}
 800f528:	4618      	mov	r0, r3
 800f52a:	3714      	adds	r7, #20
 800f52c:	46bd      	mov	sp, r7
 800f52e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f532:	4770      	bx	lr

0800f534 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800f534:	b580      	push	{r7, lr}
 800f536:	b084      	sub	sp, #16
 800f538:	af00      	add	r7, sp, #0
 800f53a:	60f8      	str	r0, [r7, #12]
 800f53c:	60b9      	str	r1, [r7, #8]
 800f53e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800f540:	68fb      	ldr	r3, [r7, #12]
 800f542:	2202      	movs	r2, #2
 800f544:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800f548:	68fb      	ldr	r3, [r7, #12]
 800f54a:	687a      	ldr	r2, [r7, #4]
 800f54c:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800f54e:	68fb      	ldr	r3, [r7, #12]
 800f550:	687a      	ldr	r2, [r7, #4]
 800f552:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800f554:	687b      	ldr	r3, [r7, #4]
 800f556:	68ba      	ldr	r2, [r7, #8]
 800f558:	2100      	movs	r1, #0
 800f55a:	68f8      	ldr	r0, [r7, #12]
 800f55c:	f000 fd1d 	bl	800ff9a <USBD_LL_Transmit>

  return USBD_OK;
 800f560:	2300      	movs	r3, #0
}
 800f562:	4618      	mov	r0, r3
 800f564:	3710      	adds	r7, #16
 800f566:	46bd      	mov	sp, r7
 800f568:	bd80      	pop	{r7, pc}

0800f56a <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800f56a:	b580      	push	{r7, lr}
 800f56c:	b084      	sub	sp, #16
 800f56e:	af00      	add	r7, sp, #0
 800f570:	60f8      	str	r0, [r7, #12]
 800f572:	60b9      	str	r1, [r7, #8]
 800f574:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800f576:	687b      	ldr	r3, [r7, #4]
 800f578:	68ba      	ldr	r2, [r7, #8]
 800f57a:	2100      	movs	r1, #0
 800f57c:	68f8      	ldr	r0, [r7, #12]
 800f57e:	f000 fd0c 	bl	800ff9a <USBD_LL_Transmit>

  return USBD_OK;
 800f582:	2300      	movs	r3, #0
}
 800f584:	4618      	mov	r0, r3
 800f586:	3710      	adds	r7, #16
 800f588:	46bd      	mov	sp, r7
 800f58a:	bd80      	pop	{r7, pc}

0800f58c <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800f58c:	b580      	push	{r7, lr}
 800f58e:	b084      	sub	sp, #16
 800f590:	af00      	add	r7, sp, #0
 800f592:	60f8      	str	r0, [r7, #12]
 800f594:	60b9      	str	r1, [r7, #8]
 800f596:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800f598:	68fb      	ldr	r3, [r7, #12]
 800f59a:	2203      	movs	r2, #3
 800f59c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800f5a0:	68fb      	ldr	r3, [r7, #12]
 800f5a2:	687a      	ldr	r2, [r7, #4]
 800f5a4:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800f5a8:	68fb      	ldr	r3, [r7, #12]
 800f5aa:	687a      	ldr	r2, [r7, #4]
 800f5ac:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800f5b0:	687b      	ldr	r3, [r7, #4]
 800f5b2:	68ba      	ldr	r2, [r7, #8]
 800f5b4:	2100      	movs	r1, #0
 800f5b6:	68f8      	ldr	r0, [r7, #12]
 800f5b8:	f000 fd10 	bl	800ffdc <USBD_LL_PrepareReceive>

  return USBD_OK;
 800f5bc:	2300      	movs	r3, #0
}
 800f5be:	4618      	mov	r0, r3
 800f5c0:	3710      	adds	r7, #16
 800f5c2:	46bd      	mov	sp, r7
 800f5c4:	bd80      	pop	{r7, pc}

0800f5c6 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800f5c6:	b580      	push	{r7, lr}
 800f5c8:	b084      	sub	sp, #16
 800f5ca:	af00      	add	r7, sp, #0
 800f5cc:	60f8      	str	r0, [r7, #12]
 800f5ce:	60b9      	str	r1, [r7, #8]
 800f5d0:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800f5d2:	687b      	ldr	r3, [r7, #4]
 800f5d4:	68ba      	ldr	r2, [r7, #8]
 800f5d6:	2100      	movs	r1, #0
 800f5d8:	68f8      	ldr	r0, [r7, #12]
 800f5da:	f000 fcff 	bl	800ffdc <USBD_LL_PrepareReceive>

  return USBD_OK;
 800f5de:	2300      	movs	r3, #0
}
 800f5e0:	4618      	mov	r0, r3
 800f5e2:	3710      	adds	r7, #16
 800f5e4:	46bd      	mov	sp, r7
 800f5e6:	bd80      	pop	{r7, pc}

0800f5e8 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800f5e8:	b580      	push	{r7, lr}
 800f5ea:	b082      	sub	sp, #8
 800f5ec:	af00      	add	r7, sp, #0
 800f5ee:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800f5f0:	687b      	ldr	r3, [r7, #4]
 800f5f2:	2204      	movs	r2, #4
 800f5f4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800f5f8:	2300      	movs	r3, #0
 800f5fa:	2200      	movs	r2, #0
 800f5fc:	2100      	movs	r1, #0
 800f5fe:	6878      	ldr	r0, [r7, #4]
 800f600:	f000 fccb 	bl	800ff9a <USBD_LL_Transmit>

  return USBD_OK;
 800f604:	2300      	movs	r3, #0
}
 800f606:	4618      	mov	r0, r3
 800f608:	3708      	adds	r7, #8
 800f60a:	46bd      	mov	sp, r7
 800f60c:	bd80      	pop	{r7, pc}

0800f60e <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800f60e:	b580      	push	{r7, lr}
 800f610:	b082      	sub	sp, #8
 800f612:	af00      	add	r7, sp, #0
 800f614:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800f616:	687b      	ldr	r3, [r7, #4]
 800f618:	2205      	movs	r2, #5
 800f61a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800f61e:	2300      	movs	r3, #0
 800f620:	2200      	movs	r2, #0
 800f622:	2100      	movs	r1, #0
 800f624:	6878      	ldr	r0, [r7, #4]
 800f626:	f000 fcd9 	bl	800ffdc <USBD_LL_PrepareReceive>

  return USBD_OK;
 800f62a:	2300      	movs	r3, #0
}
 800f62c:	4618      	mov	r0, r3
 800f62e:	3708      	adds	r7, #8
 800f630:	46bd      	mov	sp, r7
 800f632:	bd80      	pop	{r7, pc}

0800f634 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800f634:	b580      	push	{r7, lr}
 800f636:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800f638:	2200      	movs	r2, #0
 800f63a:	4912      	ldr	r1, [pc, #72]	; (800f684 <MX_USB_DEVICE_Init+0x50>)
 800f63c:	4812      	ldr	r0, [pc, #72]	; (800f688 <MX_USB_DEVICE_Init+0x54>)
 800f63e:	f7fe fcdd 	bl	800dffc <USBD_Init>
 800f642:	4603      	mov	r3, r0
 800f644:	2b00      	cmp	r3, #0
 800f646:	d001      	beq.n	800f64c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800f648:	f7f2 fd80 	bl	800214c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800f64c:	490f      	ldr	r1, [pc, #60]	; (800f68c <MX_USB_DEVICE_Init+0x58>)
 800f64e:	480e      	ldr	r0, [pc, #56]	; (800f688 <MX_USB_DEVICE_Init+0x54>)
 800f650:	f7fe fd04 	bl	800e05c <USBD_RegisterClass>
 800f654:	4603      	mov	r3, r0
 800f656:	2b00      	cmp	r3, #0
 800f658:	d001      	beq.n	800f65e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800f65a:	f7f2 fd77 	bl	800214c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800f65e:	490c      	ldr	r1, [pc, #48]	; (800f690 <MX_USB_DEVICE_Init+0x5c>)
 800f660:	4809      	ldr	r0, [pc, #36]	; (800f688 <MX_USB_DEVICE_Init+0x54>)
 800f662:	f7fe fbf5 	bl	800de50 <USBD_CDC_RegisterInterface>
 800f666:	4603      	mov	r3, r0
 800f668:	2b00      	cmp	r3, #0
 800f66a:	d001      	beq.n	800f670 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800f66c:	f7f2 fd6e 	bl	800214c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800f670:	4805      	ldr	r0, [pc, #20]	; (800f688 <MX_USB_DEVICE_Init+0x54>)
 800f672:	f7fe fd29 	bl	800e0c8 <USBD_Start>
 800f676:	4603      	mov	r3, r0
 800f678:	2b00      	cmp	r3, #0
 800f67a:	d001      	beq.n	800f680 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800f67c:	f7f2 fd66 	bl	800214c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800f680:	bf00      	nop
 800f682:	bd80      	pop	{r7, pc}
 800f684:	200001a8 	.word	0x200001a8
 800f688:	20000a48 	.word	0x20000a48
 800f68c:	20000114 	.word	0x20000114
 800f690:	20000194 	.word	0x20000194

0800f694 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800f694:	b580      	push	{r7, lr}
 800f696:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800f698:	2200      	movs	r2, #0
 800f69a:	4905      	ldr	r1, [pc, #20]	; (800f6b0 <CDC_Init_FS+0x1c>)
 800f69c:	4805      	ldr	r0, [pc, #20]	; (800f6b4 <CDC_Init_FS+0x20>)
 800f69e:	f7fe fbf1 	bl	800de84 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800f6a2:	4905      	ldr	r1, [pc, #20]	; (800f6b8 <CDC_Init_FS+0x24>)
 800f6a4:	4803      	ldr	r0, [pc, #12]	; (800f6b4 <CDC_Init_FS+0x20>)
 800f6a6:	f7fe fc0f 	bl	800dec8 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800f6aa:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800f6ac:	4618      	mov	r0, r3
 800f6ae:	bd80      	pop	{r7, pc}
 800f6b0:	20001524 	.word	0x20001524
 800f6b4:	20000a48 	.word	0x20000a48
 800f6b8:	20000d24 	.word	0x20000d24

0800f6bc <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800f6bc:	b480      	push	{r7}
 800f6be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800f6c0:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800f6c2:	4618      	mov	r0, r3
 800f6c4:	46bd      	mov	sp, r7
 800f6c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6ca:	4770      	bx	lr

0800f6cc <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800f6cc:	b480      	push	{r7}
 800f6ce:	b083      	sub	sp, #12
 800f6d0:	af00      	add	r7, sp, #0
 800f6d2:	4603      	mov	r3, r0
 800f6d4:	6039      	str	r1, [r7, #0]
 800f6d6:	71fb      	strb	r3, [r7, #7]
 800f6d8:	4613      	mov	r3, r2
 800f6da:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800f6dc:	79fb      	ldrb	r3, [r7, #7]
 800f6de:	2b23      	cmp	r3, #35	; 0x23
 800f6e0:	d84a      	bhi.n	800f778 <CDC_Control_FS+0xac>
 800f6e2:	a201      	add	r2, pc, #4	; (adr r2, 800f6e8 <CDC_Control_FS+0x1c>)
 800f6e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f6e8:	0800f779 	.word	0x0800f779
 800f6ec:	0800f779 	.word	0x0800f779
 800f6f0:	0800f779 	.word	0x0800f779
 800f6f4:	0800f779 	.word	0x0800f779
 800f6f8:	0800f779 	.word	0x0800f779
 800f6fc:	0800f779 	.word	0x0800f779
 800f700:	0800f779 	.word	0x0800f779
 800f704:	0800f779 	.word	0x0800f779
 800f708:	0800f779 	.word	0x0800f779
 800f70c:	0800f779 	.word	0x0800f779
 800f710:	0800f779 	.word	0x0800f779
 800f714:	0800f779 	.word	0x0800f779
 800f718:	0800f779 	.word	0x0800f779
 800f71c:	0800f779 	.word	0x0800f779
 800f720:	0800f779 	.word	0x0800f779
 800f724:	0800f779 	.word	0x0800f779
 800f728:	0800f779 	.word	0x0800f779
 800f72c:	0800f779 	.word	0x0800f779
 800f730:	0800f779 	.word	0x0800f779
 800f734:	0800f779 	.word	0x0800f779
 800f738:	0800f779 	.word	0x0800f779
 800f73c:	0800f779 	.word	0x0800f779
 800f740:	0800f779 	.word	0x0800f779
 800f744:	0800f779 	.word	0x0800f779
 800f748:	0800f779 	.word	0x0800f779
 800f74c:	0800f779 	.word	0x0800f779
 800f750:	0800f779 	.word	0x0800f779
 800f754:	0800f779 	.word	0x0800f779
 800f758:	0800f779 	.word	0x0800f779
 800f75c:	0800f779 	.word	0x0800f779
 800f760:	0800f779 	.word	0x0800f779
 800f764:	0800f779 	.word	0x0800f779
 800f768:	0800f779 	.word	0x0800f779
 800f76c:	0800f779 	.word	0x0800f779
 800f770:	0800f779 	.word	0x0800f779
 800f774:	0800f779 	.word	0x0800f779
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800f778:	bf00      	nop
  }

  return (USBD_OK);
 800f77a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800f77c:	4618      	mov	r0, r3
 800f77e:	370c      	adds	r7, #12
 800f780:	46bd      	mov	sp, r7
 800f782:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f786:	4770      	bx	lr

0800f788 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800f788:	b580      	push	{r7, lr}
 800f78a:	b084      	sub	sp, #16
 800f78c:	af00      	add	r7, sp, #0
 800f78e:	6078      	str	r0, [r7, #4]
 800f790:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800f792:	6879      	ldr	r1, [r7, #4]
 800f794:	4809      	ldr	r0, [pc, #36]	; (800f7bc <CDC_Receive_FS+0x34>)
 800f796:	f7fe fb97 	bl	800dec8 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800f79a:	4808      	ldr	r0, [pc, #32]	; (800f7bc <CDC_Receive_FS+0x34>)
 800f79c:	f7fe fbf8 	bl	800df90 <USBD_CDC_ReceivePacket>
  uint8_t len = (uint8_t) *Len;
 800f7a0:	683b      	ldr	r3, [r7, #0]
 800f7a2:	681b      	ldr	r3, [r3, #0]
 800f7a4:	73fb      	strb	r3, [r7, #15]
  memcpy(buffer, Buf, len);
 800f7a6:	7bfb      	ldrb	r3, [r7, #15]
 800f7a8:	461a      	mov	r2, r3
 800f7aa:	6879      	ldr	r1, [r7, #4]
 800f7ac:	4804      	ldr	r0, [pc, #16]	; (800f7c0 <CDC_Receive_FS+0x38>)
 800f7ae:	f000 fd15 	bl	80101dc <memcpy>
  return (USBD_OK);
 800f7b2:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800f7b4:	4618      	mov	r0, r3
 800f7b6:	3710      	adds	r7, #16
 800f7b8:	46bd      	mov	sp, r7
 800f7ba:	bd80      	pop	{r7, pc}
 800f7bc:	20000a48 	.word	0x20000a48
 800f7c0:	200005cc 	.word	0x200005cc

0800f7c4 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800f7c4:	b580      	push	{r7, lr}
 800f7c6:	b084      	sub	sp, #16
 800f7c8:	af00      	add	r7, sp, #0
 800f7ca:	6078      	str	r0, [r7, #4]
 800f7cc:	460b      	mov	r3, r1
 800f7ce:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800f7d0:	2300      	movs	r3, #0
 800f7d2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800f7d4:	4b0d      	ldr	r3, [pc, #52]	; (800f80c <CDC_Transmit_FS+0x48>)
 800f7d6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800f7da:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800f7dc:	68bb      	ldr	r3, [r7, #8]
 800f7de:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800f7e2:	2b00      	cmp	r3, #0
 800f7e4:	d001      	beq.n	800f7ea <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800f7e6:	2301      	movs	r3, #1
 800f7e8:	e00b      	b.n	800f802 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800f7ea:	887b      	ldrh	r3, [r7, #2]
 800f7ec:	461a      	mov	r2, r3
 800f7ee:	6879      	ldr	r1, [r7, #4]
 800f7f0:	4806      	ldr	r0, [pc, #24]	; (800f80c <CDC_Transmit_FS+0x48>)
 800f7f2:	f7fe fb47 	bl	800de84 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800f7f6:	4805      	ldr	r0, [pc, #20]	; (800f80c <CDC_Transmit_FS+0x48>)
 800f7f8:	f7fe fb84 	bl	800df04 <USBD_CDC_TransmitPacket>
 800f7fc:	4603      	mov	r3, r0
 800f7fe:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800f800:	7bfb      	ldrb	r3, [r7, #15]
}
 800f802:	4618      	mov	r0, r3
 800f804:	3710      	adds	r7, #16
 800f806:	46bd      	mov	sp, r7
 800f808:	bd80      	pop	{r7, pc}
 800f80a:	bf00      	nop
 800f80c:	20000a48 	.word	0x20000a48

0800f810 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800f810:	b480      	push	{r7}
 800f812:	b087      	sub	sp, #28
 800f814:	af00      	add	r7, sp, #0
 800f816:	60f8      	str	r0, [r7, #12]
 800f818:	60b9      	str	r1, [r7, #8]
 800f81a:	4613      	mov	r3, r2
 800f81c:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800f81e:	2300      	movs	r3, #0
 800f820:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800f822:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800f826:	4618      	mov	r0, r3
 800f828:	371c      	adds	r7, #28
 800f82a:	46bd      	mov	sp, r7
 800f82c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f830:	4770      	bx	lr
	...

0800f834 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f834:	b480      	push	{r7}
 800f836:	b083      	sub	sp, #12
 800f838:	af00      	add	r7, sp, #0
 800f83a:	4603      	mov	r3, r0
 800f83c:	6039      	str	r1, [r7, #0]
 800f83e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800f840:	683b      	ldr	r3, [r7, #0]
 800f842:	2212      	movs	r2, #18
 800f844:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800f846:	4b03      	ldr	r3, [pc, #12]	; (800f854 <USBD_FS_DeviceDescriptor+0x20>)
}
 800f848:	4618      	mov	r0, r3
 800f84a:	370c      	adds	r7, #12
 800f84c:	46bd      	mov	sp, r7
 800f84e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f852:	4770      	bx	lr
 800f854:	200001c8 	.word	0x200001c8

0800f858 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f858:	b480      	push	{r7}
 800f85a:	b083      	sub	sp, #12
 800f85c:	af00      	add	r7, sp, #0
 800f85e:	4603      	mov	r3, r0
 800f860:	6039      	str	r1, [r7, #0]
 800f862:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800f864:	683b      	ldr	r3, [r7, #0]
 800f866:	2204      	movs	r2, #4
 800f868:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800f86a:	4b03      	ldr	r3, [pc, #12]	; (800f878 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800f86c:	4618      	mov	r0, r3
 800f86e:	370c      	adds	r7, #12
 800f870:	46bd      	mov	sp, r7
 800f872:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f876:	4770      	bx	lr
 800f878:	200001e8 	.word	0x200001e8

0800f87c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f87c:	b580      	push	{r7, lr}
 800f87e:	b082      	sub	sp, #8
 800f880:	af00      	add	r7, sp, #0
 800f882:	4603      	mov	r3, r0
 800f884:	6039      	str	r1, [r7, #0]
 800f886:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800f888:	79fb      	ldrb	r3, [r7, #7]
 800f88a:	2b00      	cmp	r3, #0
 800f88c:	d105      	bne.n	800f89a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800f88e:	683a      	ldr	r2, [r7, #0]
 800f890:	4907      	ldr	r1, [pc, #28]	; (800f8b0 <USBD_FS_ProductStrDescriptor+0x34>)
 800f892:	4808      	ldr	r0, [pc, #32]	; (800f8b4 <USBD_FS_ProductStrDescriptor+0x38>)
 800f894:	f7ff fdee 	bl	800f474 <USBD_GetString>
 800f898:	e004      	b.n	800f8a4 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800f89a:	683a      	ldr	r2, [r7, #0]
 800f89c:	4904      	ldr	r1, [pc, #16]	; (800f8b0 <USBD_FS_ProductStrDescriptor+0x34>)
 800f89e:	4805      	ldr	r0, [pc, #20]	; (800f8b4 <USBD_FS_ProductStrDescriptor+0x38>)
 800f8a0:	f7ff fde8 	bl	800f474 <USBD_GetString>
  }
  return USBD_StrDesc;
 800f8a4:	4b02      	ldr	r3, [pc, #8]	; (800f8b0 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800f8a6:	4618      	mov	r0, r3
 800f8a8:	3708      	adds	r7, #8
 800f8aa:	46bd      	mov	sp, r7
 800f8ac:	bd80      	pop	{r7, pc}
 800f8ae:	bf00      	nop
 800f8b0:	20001d24 	.word	0x20001d24
 800f8b4:	080148ec 	.word	0x080148ec

0800f8b8 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f8b8:	b580      	push	{r7, lr}
 800f8ba:	b082      	sub	sp, #8
 800f8bc:	af00      	add	r7, sp, #0
 800f8be:	4603      	mov	r3, r0
 800f8c0:	6039      	str	r1, [r7, #0]
 800f8c2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800f8c4:	683a      	ldr	r2, [r7, #0]
 800f8c6:	4904      	ldr	r1, [pc, #16]	; (800f8d8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800f8c8:	4804      	ldr	r0, [pc, #16]	; (800f8dc <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800f8ca:	f7ff fdd3 	bl	800f474 <USBD_GetString>
  return USBD_StrDesc;
 800f8ce:	4b02      	ldr	r3, [pc, #8]	; (800f8d8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800f8d0:	4618      	mov	r0, r3
 800f8d2:	3708      	adds	r7, #8
 800f8d4:	46bd      	mov	sp, r7
 800f8d6:	bd80      	pop	{r7, pc}
 800f8d8:	20001d24 	.word	0x20001d24
 800f8dc:	08014904 	.word	0x08014904

0800f8e0 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f8e0:	b580      	push	{r7, lr}
 800f8e2:	b082      	sub	sp, #8
 800f8e4:	af00      	add	r7, sp, #0
 800f8e6:	4603      	mov	r3, r0
 800f8e8:	6039      	str	r1, [r7, #0]
 800f8ea:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800f8ec:	683b      	ldr	r3, [r7, #0]
 800f8ee:	221a      	movs	r2, #26
 800f8f0:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800f8f2:	f000 f855 	bl	800f9a0 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800f8f6:	4b02      	ldr	r3, [pc, #8]	; (800f900 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800f8f8:	4618      	mov	r0, r3
 800f8fa:	3708      	adds	r7, #8
 800f8fc:	46bd      	mov	sp, r7
 800f8fe:	bd80      	pop	{r7, pc}
 800f900:	200001ec 	.word	0x200001ec

0800f904 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f904:	b580      	push	{r7, lr}
 800f906:	b082      	sub	sp, #8
 800f908:	af00      	add	r7, sp, #0
 800f90a:	4603      	mov	r3, r0
 800f90c:	6039      	str	r1, [r7, #0]
 800f90e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800f910:	79fb      	ldrb	r3, [r7, #7]
 800f912:	2b00      	cmp	r3, #0
 800f914:	d105      	bne.n	800f922 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800f916:	683a      	ldr	r2, [r7, #0]
 800f918:	4907      	ldr	r1, [pc, #28]	; (800f938 <USBD_FS_ConfigStrDescriptor+0x34>)
 800f91a:	4808      	ldr	r0, [pc, #32]	; (800f93c <USBD_FS_ConfigStrDescriptor+0x38>)
 800f91c:	f7ff fdaa 	bl	800f474 <USBD_GetString>
 800f920:	e004      	b.n	800f92c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800f922:	683a      	ldr	r2, [r7, #0]
 800f924:	4904      	ldr	r1, [pc, #16]	; (800f938 <USBD_FS_ConfigStrDescriptor+0x34>)
 800f926:	4805      	ldr	r0, [pc, #20]	; (800f93c <USBD_FS_ConfigStrDescriptor+0x38>)
 800f928:	f7ff fda4 	bl	800f474 <USBD_GetString>
  }
  return USBD_StrDesc;
 800f92c:	4b02      	ldr	r3, [pc, #8]	; (800f938 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800f92e:	4618      	mov	r0, r3
 800f930:	3708      	adds	r7, #8
 800f932:	46bd      	mov	sp, r7
 800f934:	bd80      	pop	{r7, pc}
 800f936:	bf00      	nop
 800f938:	20001d24 	.word	0x20001d24
 800f93c:	08014918 	.word	0x08014918

0800f940 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f940:	b580      	push	{r7, lr}
 800f942:	b082      	sub	sp, #8
 800f944:	af00      	add	r7, sp, #0
 800f946:	4603      	mov	r3, r0
 800f948:	6039      	str	r1, [r7, #0]
 800f94a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800f94c:	79fb      	ldrb	r3, [r7, #7]
 800f94e:	2b00      	cmp	r3, #0
 800f950:	d105      	bne.n	800f95e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800f952:	683a      	ldr	r2, [r7, #0]
 800f954:	4907      	ldr	r1, [pc, #28]	; (800f974 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800f956:	4808      	ldr	r0, [pc, #32]	; (800f978 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800f958:	f7ff fd8c 	bl	800f474 <USBD_GetString>
 800f95c:	e004      	b.n	800f968 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800f95e:	683a      	ldr	r2, [r7, #0]
 800f960:	4904      	ldr	r1, [pc, #16]	; (800f974 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800f962:	4805      	ldr	r0, [pc, #20]	; (800f978 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800f964:	f7ff fd86 	bl	800f474 <USBD_GetString>
  }
  return USBD_StrDesc;
 800f968:	4b02      	ldr	r3, [pc, #8]	; (800f974 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800f96a:	4618      	mov	r0, r3
 800f96c:	3708      	adds	r7, #8
 800f96e:	46bd      	mov	sp, r7
 800f970:	bd80      	pop	{r7, pc}
 800f972:	bf00      	nop
 800f974:	20001d24 	.word	0x20001d24
 800f978:	08014924 	.word	0x08014924

0800f97c <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f97c:	b480      	push	{r7}
 800f97e:	b083      	sub	sp, #12
 800f980:	af00      	add	r7, sp, #0
 800f982:	4603      	mov	r3, r0
 800f984:	6039      	str	r1, [r7, #0]
 800f986:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 800f988:	683b      	ldr	r3, [r7, #0]
 800f98a:	220c      	movs	r2, #12
 800f98c:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 800f98e:	4b03      	ldr	r3, [pc, #12]	; (800f99c <USBD_FS_USR_BOSDescriptor+0x20>)
}
 800f990:	4618      	mov	r0, r3
 800f992:	370c      	adds	r7, #12
 800f994:	46bd      	mov	sp, r7
 800f996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f99a:	4770      	bx	lr
 800f99c:	200001dc 	.word	0x200001dc

0800f9a0 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800f9a0:	b580      	push	{r7, lr}
 800f9a2:	b084      	sub	sp, #16
 800f9a4:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800f9a6:	4b0f      	ldr	r3, [pc, #60]	; (800f9e4 <Get_SerialNum+0x44>)
 800f9a8:	681b      	ldr	r3, [r3, #0]
 800f9aa:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800f9ac:	4b0e      	ldr	r3, [pc, #56]	; (800f9e8 <Get_SerialNum+0x48>)
 800f9ae:	681b      	ldr	r3, [r3, #0]
 800f9b0:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800f9b2:	4b0e      	ldr	r3, [pc, #56]	; (800f9ec <Get_SerialNum+0x4c>)
 800f9b4:	681b      	ldr	r3, [r3, #0]
 800f9b6:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800f9b8:	68fa      	ldr	r2, [r7, #12]
 800f9ba:	687b      	ldr	r3, [r7, #4]
 800f9bc:	4413      	add	r3, r2
 800f9be:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800f9c0:	68fb      	ldr	r3, [r7, #12]
 800f9c2:	2b00      	cmp	r3, #0
 800f9c4:	d009      	beq.n	800f9da <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800f9c6:	2208      	movs	r2, #8
 800f9c8:	4909      	ldr	r1, [pc, #36]	; (800f9f0 <Get_SerialNum+0x50>)
 800f9ca:	68f8      	ldr	r0, [r7, #12]
 800f9cc:	f000 f814 	bl	800f9f8 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800f9d0:	2204      	movs	r2, #4
 800f9d2:	4908      	ldr	r1, [pc, #32]	; (800f9f4 <Get_SerialNum+0x54>)
 800f9d4:	68b8      	ldr	r0, [r7, #8]
 800f9d6:	f000 f80f 	bl	800f9f8 <IntToUnicode>
  }
}
 800f9da:	bf00      	nop
 800f9dc:	3710      	adds	r7, #16
 800f9de:	46bd      	mov	sp, r7
 800f9e0:	bd80      	pop	{r7, pc}
 800f9e2:	bf00      	nop
 800f9e4:	1fff7a10 	.word	0x1fff7a10
 800f9e8:	1fff7a14 	.word	0x1fff7a14
 800f9ec:	1fff7a18 	.word	0x1fff7a18
 800f9f0:	200001ee 	.word	0x200001ee
 800f9f4:	200001fe 	.word	0x200001fe

0800f9f8 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800f9f8:	b480      	push	{r7}
 800f9fa:	b087      	sub	sp, #28
 800f9fc:	af00      	add	r7, sp, #0
 800f9fe:	60f8      	str	r0, [r7, #12]
 800fa00:	60b9      	str	r1, [r7, #8]
 800fa02:	4613      	mov	r3, r2
 800fa04:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800fa06:	2300      	movs	r3, #0
 800fa08:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800fa0a:	2300      	movs	r3, #0
 800fa0c:	75fb      	strb	r3, [r7, #23]
 800fa0e:	e027      	b.n	800fa60 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800fa10:	68fb      	ldr	r3, [r7, #12]
 800fa12:	0f1b      	lsrs	r3, r3, #28
 800fa14:	2b09      	cmp	r3, #9
 800fa16:	d80b      	bhi.n	800fa30 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800fa18:	68fb      	ldr	r3, [r7, #12]
 800fa1a:	0f1b      	lsrs	r3, r3, #28
 800fa1c:	b2da      	uxtb	r2, r3
 800fa1e:	7dfb      	ldrb	r3, [r7, #23]
 800fa20:	005b      	lsls	r3, r3, #1
 800fa22:	4619      	mov	r1, r3
 800fa24:	68bb      	ldr	r3, [r7, #8]
 800fa26:	440b      	add	r3, r1
 800fa28:	3230      	adds	r2, #48	; 0x30
 800fa2a:	b2d2      	uxtb	r2, r2
 800fa2c:	701a      	strb	r2, [r3, #0]
 800fa2e:	e00a      	b.n	800fa46 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800fa30:	68fb      	ldr	r3, [r7, #12]
 800fa32:	0f1b      	lsrs	r3, r3, #28
 800fa34:	b2da      	uxtb	r2, r3
 800fa36:	7dfb      	ldrb	r3, [r7, #23]
 800fa38:	005b      	lsls	r3, r3, #1
 800fa3a:	4619      	mov	r1, r3
 800fa3c:	68bb      	ldr	r3, [r7, #8]
 800fa3e:	440b      	add	r3, r1
 800fa40:	3237      	adds	r2, #55	; 0x37
 800fa42:	b2d2      	uxtb	r2, r2
 800fa44:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800fa46:	68fb      	ldr	r3, [r7, #12]
 800fa48:	011b      	lsls	r3, r3, #4
 800fa4a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800fa4c:	7dfb      	ldrb	r3, [r7, #23]
 800fa4e:	005b      	lsls	r3, r3, #1
 800fa50:	3301      	adds	r3, #1
 800fa52:	68ba      	ldr	r2, [r7, #8]
 800fa54:	4413      	add	r3, r2
 800fa56:	2200      	movs	r2, #0
 800fa58:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800fa5a:	7dfb      	ldrb	r3, [r7, #23]
 800fa5c:	3301      	adds	r3, #1
 800fa5e:	75fb      	strb	r3, [r7, #23]
 800fa60:	7dfa      	ldrb	r2, [r7, #23]
 800fa62:	79fb      	ldrb	r3, [r7, #7]
 800fa64:	429a      	cmp	r2, r3
 800fa66:	d3d3      	bcc.n	800fa10 <IntToUnicode+0x18>
  }
}
 800fa68:	bf00      	nop
 800fa6a:	bf00      	nop
 800fa6c:	371c      	adds	r7, #28
 800fa6e:	46bd      	mov	sp, r7
 800fa70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa74:	4770      	bx	lr
	...

0800fa78 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800fa78:	b580      	push	{r7, lr}
 800fa7a:	b0a0      	sub	sp, #128	; 0x80
 800fa7c:	af00      	add	r7, sp, #0
 800fa7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800fa80:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800fa84:	2200      	movs	r2, #0
 800fa86:	601a      	str	r2, [r3, #0]
 800fa88:	605a      	str	r2, [r3, #4]
 800fa8a:	609a      	str	r2, [r3, #8]
 800fa8c:	60da      	str	r2, [r3, #12]
 800fa8e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800fa90:	f107 0310 	add.w	r3, r7, #16
 800fa94:	225c      	movs	r2, #92	; 0x5c
 800fa96:	2100      	movs	r1, #0
 800fa98:	4618      	mov	r0, r3
 800fa9a:	f000 fbad 	bl	80101f8 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 800fa9e:	687b      	ldr	r3, [r7, #4]
 800faa0:	681b      	ldr	r3, [r3, #0]
 800faa2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800faa6:	d149      	bne.n	800fb3c <HAL_PCD_MspInit+0xc4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 800faa8:	f44f 7380 	mov.w	r3, #256	; 0x100
 800faac:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 800faae:	2300      	movs	r3, #0
 800fab0:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800fab2:	f107 0310 	add.w	r3, r7, #16
 800fab6:	4618      	mov	r0, r3
 800fab8:	f7fa fcbe 	bl	800a438 <HAL_RCCEx_PeriphCLKConfig>
 800fabc:	4603      	mov	r3, r0
 800fabe:	2b00      	cmp	r3, #0
 800fac0:	d001      	beq.n	800fac6 <HAL_PCD_MspInit+0x4e>
    {
      Error_Handler();
 800fac2:	f7f2 fb43 	bl	800214c <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800fac6:	2300      	movs	r3, #0
 800fac8:	60fb      	str	r3, [r7, #12]
 800faca:	4b1e      	ldr	r3, [pc, #120]	; (800fb44 <HAL_PCD_MspInit+0xcc>)
 800facc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800face:	4a1d      	ldr	r2, [pc, #116]	; (800fb44 <HAL_PCD_MspInit+0xcc>)
 800fad0:	f043 0301 	orr.w	r3, r3, #1
 800fad4:	6313      	str	r3, [r2, #48]	; 0x30
 800fad6:	4b1b      	ldr	r3, [pc, #108]	; (800fb44 <HAL_PCD_MspInit+0xcc>)
 800fad8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fada:	f003 0301 	and.w	r3, r3, #1
 800fade:	60fb      	str	r3, [r7, #12]
 800fae0:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800fae2:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800fae6:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800fae8:	2302      	movs	r3, #2
 800faea:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800faec:	2300      	movs	r3, #0
 800faee:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800faf0:	2303      	movs	r3, #3
 800faf2:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800faf4:	230a      	movs	r3, #10
 800faf6:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800faf8:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800fafc:	4619      	mov	r1, r3
 800fafe:	4812      	ldr	r0, [pc, #72]	; (800fb48 <HAL_PCD_MspInit+0xd0>)
 800fb00:	f7f7 fe0e 	bl	8007720 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800fb04:	4b0f      	ldr	r3, [pc, #60]	; (800fb44 <HAL_PCD_MspInit+0xcc>)
 800fb06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fb08:	4a0e      	ldr	r2, [pc, #56]	; (800fb44 <HAL_PCD_MspInit+0xcc>)
 800fb0a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800fb0e:	6353      	str	r3, [r2, #52]	; 0x34
 800fb10:	2300      	movs	r3, #0
 800fb12:	60bb      	str	r3, [r7, #8]
 800fb14:	4b0b      	ldr	r3, [pc, #44]	; (800fb44 <HAL_PCD_MspInit+0xcc>)
 800fb16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fb18:	4a0a      	ldr	r2, [pc, #40]	; (800fb44 <HAL_PCD_MspInit+0xcc>)
 800fb1a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800fb1e:	6453      	str	r3, [r2, #68]	; 0x44
 800fb20:	4b08      	ldr	r3, [pc, #32]	; (800fb44 <HAL_PCD_MspInit+0xcc>)
 800fb22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fb24:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800fb28:	60bb      	str	r3, [r7, #8]
 800fb2a:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800fb2c:	2200      	movs	r2, #0
 800fb2e:	2100      	movs	r1, #0
 800fb30:	2043      	movs	r0, #67	; 0x43
 800fb32:	f7f7 fa4e 	bl	8006fd2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800fb36:	2043      	movs	r0, #67	; 0x43
 800fb38:	f7f7 fa67 	bl	800700a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800fb3c:	bf00      	nop
 800fb3e:	3780      	adds	r7, #128	; 0x80
 800fb40:	46bd      	mov	sp, r7
 800fb42:	bd80      	pop	{r7, pc}
 800fb44:	40023800 	.word	0x40023800
 800fb48:	40020000 	.word	0x40020000

0800fb4c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800fb4c:	b580      	push	{r7, lr}
 800fb4e:	b082      	sub	sp, #8
 800fb50:	af00      	add	r7, sp, #0
 800fb52:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800fb54:	687b      	ldr	r3, [r7, #4]
 800fb56:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 800fb5a:	687b      	ldr	r3, [r7, #4]
 800fb5c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800fb60:	4619      	mov	r1, r3
 800fb62:	4610      	mov	r0, r2
 800fb64:	f7fe fafd 	bl	800e162 <USBD_LL_SetupStage>
}
 800fb68:	bf00      	nop
 800fb6a:	3708      	adds	r7, #8
 800fb6c:	46bd      	mov	sp, r7
 800fb6e:	bd80      	pop	{r7, pc}

0800fb70 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800fb70:	b580      	push	{r7, lr}
 800fb72:	b082      	sub	sp, #8
 800fb74:	af00      	add	r7, sp, #0
 800fb76:	6078      	str	r0, [r7, #4]
 800fb78:	460b      	mov	r3, r1
 800fb7a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800fb7c:	687b      	ldr	r3, [r7, #4]
 800fb7e:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800fb82:	78fa      	ldrb	r2, [r7, #3]
 800fb84:	6879      	ldr	r1, [r7, #4]
 800fb86:	4613      	mov	r3, r2
 800fb88:	00db      	lsls	r3, r3, #3
 800fb8a:	4413      	add	r3, r2
 800fb8c:	009b      	lsls	r3, r3, #2
 800fb8e:	440b      	add	r3, r1
 800fb90:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800fb94:	681a      	ldr	r2, [r3, #0]
 800fb96:	78fb      	ldrb	r3, [r7, #3]
 800fb98:	4619      	mov	r1, r3
 800fb9a:	f7fe fb37 	bl	800e20c <USBD_LL_DataOutStage>
}
 800fb9e:	bf00      	nop
 800fba0:	3708      	adds	r7, #8
 800fba2:	46bd      	mov	sp, r7
 800fba4:	bd80      	pop	{r7, pc}

0800fba6 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800fba6:	b580      	push	{r7, lr}
 800fba8:	b082      	sub	sp, #8
 800fbaa:	af00      	add	r7, sp, #0
 800fbac:	6078      	str	r0, [r7, #4]
 800fbae:	460b      	mov	r3, r1
 800fbb0:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800fbb2:	687b      	ldr	r3, [r7, #4]
 800fbb4:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800fbb8:	78fa      	ldrb	r2, [r7, #3]
 800fbba:	6879      	ldr	r1, [r7, #4]
 800fbbc:	4613      	mov	r3, r2
 800fbbe:	00db      	lsls	r3, r3, #3
 800fbc0:	4413      	add	r3, r2
 800fbc2:	009b      	lsls	r3, r3, #2
 800fbc4:	440b      	add	r3, r1
 800fbc6:	334c      	adds	r3, #76	; 0x4c
 800fbc8:	681a      	ldr	r2, [r3, #0]
 800fbca:	78fb      	ldrb	r3, [r7, #3]
 800fbcc:	4619      	mov	r1, r3
 800fbce:	f7fe fbd0 	bl	800e372 <USBD_LL_DataInStage>
}
 800fbd2:	bf00      	nop
 800fbd4:	3708      	adds	r7, #8
 800fbd6:	46bd      	mov	sp, r7
 800fbd8:	bd80      	pop	{r7, pc}

0800fbda <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800fbda:	b580      	push	{r7, lr}
 800fbdc:	b082      	sub	sp, #8
 800fbde:	af00      	add	r7, sp, #0
 800fbe0:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800fbe2:	687b      	ldr	r3, [r7, #4]
 800fbe4:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800fbe8:	4618      	mov	r0, r3
 800fbea:	f7fe fd04 	bl	800e5f6 <USBD_LL_SOF>
}
 800fbee:	bf00      	nop
 800fbf0:	3708      	adds	r7, #8
 800fbf2:	46bd      	mov	sp, r7
 800fbf4:	bd80      	pop	{r7, pc}

0800fbf6 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800fbf6:	b580      	push	{r7, lr}
 800fbf8:	b084      	sub	sp, #16
 800fbfa:	af00      	add	r7, sp, #0
 800fbfc:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800fbfe:	2301      	movs	r3, #1
 800fc00:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800fc02:	687b      	ldr	r3, [r7, #4]
 800fc04:	68db      	ldr	r3, [r3, #12]
 800fc06:	2b00      	cmp	r3, #0
 800fc08:	d102      	bne.n	800fc10 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800fc0a:	2300      	movs	r3, #0
 800fc0c:	73fb      	strb	r3, [r7, #15]
 800fc0e:	e008      	b.n	800fc22 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800fc10:	687b      	ldr	r3, [r7, #4]
 800fc12:	68db      	ldr	r3, [r3, #12]
 800fc14:	2b02      	cmp	r3, #2
 800fc16:	d102      	bne.n	800fc1e <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800fc18:	2301      	movs	r3, #1
 800fc1a:	73fb      	strb	r3, [r7, #15]
 800fc1c:	e001      	b.n	800fc22 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800fc1e:	f7f2 fa95 	bl	800214c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800fc22:	687b      	ldr	r3, [r7, #4]
 800fc24:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800fc28:	7bfa      	ldrb	r2, [r7, #15]
 800fc2a:	4611      	mov	r1, r2
 800fc2c:	4618      	mov	r0, r3
 800fc2e:	f7fe fca4 	bl	800e57a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800fc32:	687b      	ldr	r3, [r7, #4]
 800fc34:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800fc38:	4618      	mov	r0, r3
 800fc3a:	f7fe fc4c 	bl	800e4d6 <USBD_LL_Reset>
}
 800fc3e:	bf00      	nop
 800fc40:	3710      	adds	r7, #16
 800fc42:	46bd      	mov	sp, r7
 800fc44:	bd80      	pop	{r7, pc}
	...

0800fc48 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800fc48:	b580      	push	{r7, lr}
 800fc4a:	b082      	sub	sp, #8
 800fc4c:	af00      	add	r7, sp, #0
 800fc4e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800fc50:	687b      	ldr	r3, [r7, #4]
 800fc52:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800fc56:	4618      	mov	r0, r3
 800fc58:	f7fe fc9f 	bl	800e59a <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800fc5c:	687b      	ldr	r3, [r7, #4]
 800fc5e:	681b      	ldr	r3, [r3, #0]
 800fc60:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800fc64:	681b      	ldr	r3, [r3, #0]
 800fc66:	687a      	ldr	r2, [r7, #4]
 800fc68:	6812      	ldr	r2, [r2, #0]
 800fc6a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800fc6e:	f043 0301 	orr.w	r3, r3, #1
 800fc72:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800fc74:	687b      	ldr	r3, [r7, #4]
 800fc76:	6a1b      	ldr	r3, [r3, #32]
 800fc78:	2b00      	cmp	r3, #0
 800fc7a:	d005      	beq.n	800fc88 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800fc7c:	4b04      	ldr	r3, [pc, #16]	; (800fc90 <HAL_PCD_SuspendCallback+0x48>)
 800fc7e:	691b      	ldr	r3, [r3, #16]
 800fc80:	4a03      	ldr	r2, [pc, #12]	; (800fc90 <HAL_PCD_SuspendCallback+0x48>)
 800fc82:	f043 0306 	orr.w	r3, r3, #6
 800fc86:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800fc88:	bf00      	nop
 800fc8a:	3708      	adds	r7, #8
 800fc8c:	46bd      	mov	sp, r7
 800fc8e:	bd80      	pop	{r7, pc}
 800fc90:	e000ed00 	.word	0xe000ed00

0800fc94 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800fc94:	b580      	push	{r7, lr}
 800fc96:	b082      	sub	sp, #8
 800fc98:	af00      	add	r7, sp, #0
 800fc9a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800fc9c:	687b      	ldr	r3, [r7, #4]
 800fc9e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800fca2:	4618      	mov	r0, r3
 800fca4:	f7fe fc8f 	bl	800e5c6 <USBD_LL_Resume>
}
 800fca8:	bf00      	nop
 800fcaa:	3708      	adds	r7, #8
 800fcac:	46bd      	mov	sp, r7
 800fcae:	bd80      	pop	{r7, pc}

0800fcb0 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800fcb0:	b580      	push	{r7, lr}
 800fcb2:	b082      	sub	sp, #8
 800fcb4:	af00      	add	r7, sp, #0
 800fcb6:	6078      	str	r0, [r7, #4]
 800fcb8:	460b      	mov	r3, r1
 800fcba:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800fcbc:	687b      	ldr	r3, [r7, #4]
 800fcbe:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800fcc2:	78fa      	ldrb	r2, [r7, #3]
 800fcc4:	4611      	mov	r1, r2
 800fcc6:	4618      	mov	r0, r3
 800fcc8:	f7fe fce7 	bl	800e69a <USBD_LL_IsoOUTIncomplete>
}
 800fccc:	bf00      	nop
 800fcce:	3708      	adds	r7, #8
 800fcd0:	46bd      	mov	sp, r7
 800fcd2:	bd80      	pop	{r7, pc}

0800fcd4 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800fcd4:	b580      	push	{r7, lr}
 800fcd6:	b082      	sub	sp, #8
 800fcd8:	af00      	add	r7, sp, #0
 800fcda:	6078      	str	r0, [r7, #4]
 800fcdc:	460b      	mov	r3, r1
 800fcde:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800fce0:	687b      	ldr	r3, [r7, #4]
 800fce2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800fce6:	78fa      	ldrb	r2, [r7, #3]
 800fce8:	4611      	mov	r1, r2
 800fcea:	4618      	mov	r0, r3
 800fcec:	f7fe fca3 	bl	800e636 <USBD_LL_IsoINIncomplete>
}
 800fcf0:	bf00      	nop
 800fcf2:	3708      	adds	r7, #8
 800fcf4:	46bd      	mov	sp, r7
 800fcf6:	bd80      	pop	{r7, pc}

0800fcf8 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800fcf8:	b580      	push	{r7, lr}
 800fcfa:	b082      	sub	sp, #8
 800fcfc:	af00      	add	r7, sp, #0
 800fcfe:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800fd00:	687b      	ldr	r3, [r7, #4]
 800fd02:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800fd06:	4618      	mov	r0, r3
 800fd08:	f7fe fcf9 	bl	800e6fe <USBD_LL_DevConnected>
}
 800fd0c:	bf00      	nop
 800fd0e:	3708      	adds	r7, #8
 800fd10:	46bd      	mov	sp, r7
 800fd12:	bd80      	pop	{r7, pc}

0800fd14 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800fd14:	b580      	push	{r7, lr}
 800fd16:	b082      	sub	sp, #8
 800fd18:	af00      	add	r7, sp, #0
 800fd1a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800fd1c:	687b      	ldr	r3, [r7, #4]
 800fd1e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800fd22:	4618      	mov	r0, r3
 800fd24:	f7fe fcf6 	bl	800e714 <USBD_LL_DevDisconnected>
}
 800fd28:	bf00      	nop
 800fd2a:	3708      	adds	r7, #8
 800fd2c:	46bd      	mov	sp, r7
 800fd2e:	bd80      	pop	{r7, pc}

0800fd30 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800fd30:	b580      	push	{r7, lr}
 800fd32:	b082      	sub	sp, #8
 800fd34:	af00      	add	r7, sp, #0
 800fd36:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800fd38:	687b      	ldr	r3, [r7, #4]
 800fd3a:	781b      	ldrb	r3, [r3, #0]
 800fd3c:	2b00      	cmp	r3, #0
 800fd3e:	d13c      	bne.n	800fdba <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800fd40:	4a20      	ldr	r2, [pc, #128]	; (800fdc4 <USBD_LL_Init+0x94>)
 800fd42:	687b      	ldr	r3, [r7, #4]
 800fd44:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 800fd48:	687b      	ldr	r3, [r7, #4]
 800fd4a:	4a1e      	ldr	r2, [pc, #120]	; (800fdc4 <USBD_LL_Init+0x94>)
 800fd4c:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800fd50:	4b1c      	ldr	r3, [pc, #112]	; (800fdc4 <USBD_LL_Init+0x94>)
 800fd52:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800fd56:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 800fd58:	4b1a      	ldr	r3, [pc, #104]	; (800fdc4 <USBD_LL_Init+0x94>)
 800fd5a:	2206      	movs	r2, #6
 800fd5c:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800fd5e:	4b19      	ldr	r3, [pc, #100]	; (800fdc4 <USBD_LL_Init+0x94>)
 800fd60:	2202      	movs	r2, #2
 800fd62:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800fd64:	4b17      	ldr	r3, [pc, #92]	; (800fdc4 <USBD_LL_Init+0x94>)
 800fd66:	2200      	movs	r2, #0
 800fd68:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800fd6a:	4b16      	ldr	r3, [pc, #88]	; (800fdc4 <USBD_LL_Init+0x94>)
 800fd6c:	2202      	movs	r2, #2
 800fd6e:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800fd70:	4b14      	ldr	r3, [pc, #80]	; (800fdc4 <USBD_LL_Init+0x94>)
 800fd72:	2200      	movs	r2, #0
 800fd74:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800fd76:	4b13      	ldr	r3, [pc, #76]	; (800fdc4 <USBD_LL_Init+0x94>)
 800fd78:	2200      	movs	r2, #0
 800fd7a:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800fd7c:	4b11      	ldr	r3, [pc, #68]	; (800fdc4 <USBD_LL_Init+0x94>)
 800fd7e:	2200      	movs	r2, #0
 800fd80:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800fd82:	4b10      	ldr	r3, [pc, #64]	; (800fdc4 <USBD_LL_Init+0x94>)
 800fd84:	2200      	movs	r2, #0
 800fd86:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800fd88:	4b0e      	ldr	r3, [pc, #56]	; (800fdc4 <USBD_LL_Init+0x94>)
 800fd8a:	2200      	movs	r2, #0
 800fd8c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800fd8e:	480d      	ldr	r0, [pc, #52]	; (800fdc4 <USBD_LL_Init+0x94>)
 800fd90:	f7f8 ff83 	bl	8008c9a <HAL_PCD_Init>
 800fd94:	4603      	mov	r3, r0
 800fd96:	2b00      	cmp	r3, #0
 800fd98:	d001      	beq.n	800fd9e <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800fd9a:	f7f2 f9d7 	bl	800214c <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800fd9e:	2180      	movs	r1, #128	; 0x80
 800fda0:	4808      	ldr	r0, [pc, #32]	; (800fdc4 <USBD_LL_Init+0x94>)
 800fda2:	f7fa fa0e 	bl	800a1c2 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800fda6:	2240      	movs	r2, #64	; 0x40
 800fda8:	2100      	movs	r1, #0
 800fdaa:	4806      	ldr	r0, [pc, #24]	; (800fdc4 <USBD_LL_Init+0x94>)
 800fdac:	f7fa f9c2 	bl	800a134 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800fdb0:	2280      	movs	r2, #128	; 0x80
 800fdb2:	2101      	movs	r1, #1
 800fdb4:	4803      	ldr	r0, [pc, #12]	; (800fdc4 <USBD_LL_Init+0x94>)
 800fdb6:	f7fa f9bd 	bl	800a134 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800fdba:	2300      	movs	r3, #0
}
 800fdbc:	4618      	mov	r0, r3
 800fdbe:	3708      	adds	r7, #8
 800fdc0:	46bd      	mov	sp, r7
 800fdc2:	bd80      	pop	{r7, pc}
 800fdc4:	20001f24 	.word	0x20001f24

0800fdc8 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800fdc8:	b580      	push	{r7, lr}
 800fdca:	b084      	sub	sp, #16
 800fdcc:	af00      	add	r7, sp, #0
 800fdce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fdd0:	2300      	movs	r3, #0
 800fdd2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800fdd4:	2300      	movs	r3, #0
 800fdd6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800fdd8:	687b      	ldr	r3, [r7, #4]
 800fdda:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800fdde:	4618      	mov	r0, r3
 800fde0:	f7f9 f87f 	bl	8008ee2 <HAL_PCD_Start>
 800fde4:	4603      	mov	r3, r0
 800fde6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800fde8:	7bfb      	ldrb	r3, [r7, #15]
 800fdea:	4618      	mov	r0, r3
 800fdec:	f000 f990 	bl	8010110 <USBD_Get_USB_Status>
 800fdf0:	4603      	mov	r3, r0
 800fdf2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800fdf4:	7bbb      	ldrb	r3, [r7, #14]
}
 800fdf6:	4618      	mov	r0, r3
 800fdf8:	3710      	adds	r7, #16
 800fdfa:	46bd      	mov	sp, r7
 800fdfc:	bd80      	pop	{r7, pc}

0800fdfe <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800fdfe:	b580      	push	{r7, lr}
 800fe00:	b084      	sub	sp, #16
 800fe02:	af00      	add	r7, sp, #0
 800fe04:	6078      	str	r0, [r7, #4]
 800fe06:	4608      	mov	r0, r1
 800fe08:	4611      	mov	r1, r2
 800fe0a:	461a      	mov	r2, r3
 800fe0c:	4603      	mov	r3, r0
 800fe0e:	70fb      	strb	r3, [r7, #3]
 800fe10:	460b      	mov	r3, r1
 800fe12:	70bb      	strb	r3, [r7, #2]
 800fe14:	4613      	mov	r3, r2
 800fe16:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fe18:	2300      	movs	r3, #0
 800fe1a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800fe1c:	2300      	movs	r3, #0
 800fe1e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800fe20:	687b      	ldr	r3, [r7, #4]
 800fe22:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800fe26:	78bb      	ldrb	r3, [r7, #2]
 800fe28:	883a      	ldrh	r2, [r7, #0]
 800fe2a:	78f9      	ldrb	r1, [r7, #3]
 800fe2c:	f7f9 fd7d 	bl	800992a <HAL_PCD_EP_Open>
 800fe30:	4603      	mov	r3, r0
 800fe32:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800fe34:	7bfb      	ldrb	r3, [r7, #15]
 800fe36:	4618      	mov	r0, r3
 800fe38:	f000 f96a 	bl	8010110 <USBD_Get_USB_Status>
 800fe3c:	4603      	mov	r3, r0
 800fe3e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800fe40:	7bbb      	ldrb	r3, [r7, #14]
}
 800fe42:	4618      	mov	r0, r3
 800fe44:	3710      	adds	r7, #16
 800fe46:	46bd      	mov	sp, r7
 800fe48:	bd80      	pop	{r7, pc}

0800fe4a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800fe4a:	b580      	push	{r7, lr}
 800fe4c:	b084      	sub	sp, #16
 800fe4e:	af00      	add	r7, sp, #0
 800fe50:	6078      	str	r0, [r7, #4]
 800fe52:	460b      	mov	r3, r1
 800fe54:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fe56:	2300      	movs	r3, #0
 800fe58:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800fe5a:	2300      	movs	r3, #0
 800fe5c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800fe5e:	687b      	ldr	r3, [r7, #4]
 800fe60:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800fe64:	78fa      	ldrb	r2, [r7, #3]
 800fe66:	4611      	mov	r1, r2
 800fe68:	4618      	mov	r0, r3
 800fe6a:	f7f9 fdc6 	bl	80099fa <HAL_PCD_EP_Close>
 800fe6e:	4603      	mov	r3, r0
 800fe70:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800fe72:	7bfb      	ldrb	r3, [r7, #15]
 800fe74:	4618      	mov	r0, r3
 800fe76:	f000 f94b 	bl	8010110 <USBD_Get_USB_Status>
 800fe7a:	4603      	mov	r3, r0
 800fe7c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800fe7e:	7bbb      	ldrb	r3, [r7, #14]
}
 800fe80:	4618      	mov	r0, r3
 800fe82:	3710      	adds	r7, #16
 800fe84:	46bd      	mov	sp, r7
 800fe86:	bd80      	pop	{r7, pc}

0800fe88 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800fe88:	b580      	push	{r7, lr}
 800fe8a:	b084      	sub	sp, #16
 800fe8c:	af00      	add	r7, sp, #0
 800fe8e:	6078      	str	r0, [r7, #4]
 800fe90:	460b      	mov	r3, r1
 800fe92:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fe94:	2300      	movs	r3, #0
 800fe96:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800fe98:	2300      	movs	r3, #0
 800fe9a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800fe9c:	687b      	ldr	r3, [r7, #4]
 800fe9e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800fea2:	78fa      	ldrb	r2, [r7, #3]
 800fea4:	4611      	mov	r1, r2
 800fea6:	4618      	mov	r0, r3
 800fea8:	f7f9 fe9e 	bl	8009be8 <HAL_PCD_EP_SetStall>
 800feac:	4603      	mov	r3, r0
 800feae:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800feb0:	7bfb      	ldrb	r3, [r7, #15]
 800feb2:	4618      	mov	r0, r3
 800feb4:	f000 f92c 	bl	8010110 <USBD_Get_USB_Status>
 800feb8:	4603      	mov	r3, r0
 800feba:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800febc:	7bbb      	ldrb	r3, [r7, #14]
}
 800febe:	4618      	mov	r0, r3
 800fec0:	3710      	adds	r7, #16
 800fec2:	46bd      	mov	sp, r7
 800fec4:	bd80      	pop	{r7, pc}

0800fec6 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800fec6:	b580      	push	{r7, lr}
 800fec8:	b084      	sub	sp, #16
 800feca:	af00      	add	r7, sp, #0
 800fecc:	6078      	str	r0, [r7, #4]
 800fece:	460b      	mov	r3, r1
 800fed0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fed2:	2300      	movs	r3, #0
 800fed4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800fed6:	2300      	movs	r3, #0
 800fed8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800feda:	687b      	ldr	r3, [r7, #4]
 800fedc:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800fee0:	78fa      	ldrb	r2, [r7, #3]
 800fee2:	4611      	mov	r1, r2
 800fee4:	4618      	mov	r0, r3
 800fee6:	f7f9 fee3 	bl	8009cb0 <HAL_PCD_EP_ClrStall>
 800feea:	4603      	mov	r3, r0
 800feec:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800feee:	7bfb      	ldrb	r3, [r7, #15]
 800fef0:	4618      	mov	r0, r3
 800fef2:	f000 f90d 	bl	8010110 <USBD_Get_USB_Status>
 800fef6:	4603      	mov	r3, r0
 800fef8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800fefa:	7bbb      	ldrb	r3, [r7, #14]
}
 800fefc:	4618      	mov	r0, r3
 800fefe:	3710      	adds	r7, #16
 800ff00:	46bd      	mov	sp, r7
 800ff02:	bd80      	pop	{r7, pc}

0800ff04 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ff04:	b480      	push	{r7}
 800ff06:	b085      	sub	sp, #20
 800ff08:	af00      	add	r7, sp, #0
 800ff0a:	6078      	str	r0, [r7, #4]
 800ff0c:	460b      	mov	r3, r1
 800ff0e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800ff10:	687b      	ldr	r3, [r7, #4]
 800ff12:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800ff16:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800ff18:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800ff1c:	2b00      	cmp	r3, #0
 800ff1e:	da0b      	bge.n	800ff38 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800ff20:	78fb      	ldrb	r3, [r7, #3]
 800ff22:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ff26:	68f9      	ldr	r1, [r7, #12]
 800ff28:	4613      	mov	r3, r2
 800ff2a:	00db      	lsls	r3, r3, #3
 800ff2c:	4413      	add	r3, r2
 800ff2e:	009b      	lsls	r3, r3, #2
 800ff30:	440b      	add	r3, r1
 800ff32:	333e      	adds	r3, #62	; 0x3e
 800ff34:	781b      	ldrb	r3, [r3, #0]
 800ff36:	e00b      	b.n	800ff50 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800ff38:	78fb      	ldrb	r3, [r7, #3]
 800ff3a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ff3e:	68f9      	ldr	r1, [r7, #12]
 800ff40:	4613      	mov	r3, r2
 800ff42:	00db      	lsls	r3, r3, #3
 800ff44:	4413      	add	r3, r2
 800ff46:	009b      	lsls	r3, r3, #2
 800ff48:	440b      	add	r3, r1
 800ff4a:	f203 237e 	addw	r3, r3, #638	; 0x27e
 800ff4e:	781b      	ldrb	r3, [r3, #0]
  }
}
 800ff50:	4618      	mov	r0, r3
 800ff52:	3714      	adds	r7, #20
 800ff54:	46bd      	mov	sp, r7
 800ff56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff5a:	4770      	bx	lr

0800ff5c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800ff5c:	b580      	push	{r7, lr}
 800ff5e:	b084      	sub	sp, #16
 800ff60:	af00      	add	r7, sp, #0
 800ff62:	6078      	str	r0, [r7, #4]
 800ff64:	460b      	mov	r3, r1
 800ff66:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ff68:	2300      	movs	r3, #0
 800ff6a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ff6c:	2300      	movs	r3, #0
 800ff6e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800ff70:	687b      	ldr	r3, [r7, #4]
 800ff72:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800ff76:	78fa      	ldrb	r2, [r7, #3]
 800ff78:	4611      	mov	r1, r2
 800ff7a:	4618      	mov	r0, r3
 800ff7c:	f7f9 fcb0 	bl	80098e0 <HAL_PCD_SetAddress>
 800ff80:	4603      	mov	r3, r0
 800ff82:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ff84:	7bfb      	ldrb	r3, [r7, #15]
 800ff86:	4618      	mov	r0, r3
 800ff88:	f000 f8c2 	bl	8010110 <USBD_Get_USB_Status>
 800ff8c:	4603      	mov	r3, r0
 800ff8e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ff90:	7bbb      	ldrb	r3, [r7, #14]
}
 800ff92:	4618      	mov	r0, r3
 800ff94:	3710      	adds	r7, #16
 800ff96:	46bd      	mov	sp, r7
 800ff98:	bd80      	pop	{r7, pc}

0800ff9a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800ff9a:	b580      	push	{r7, lr}
 800ff9c:	b086      	sub	sp, #24
 800ff9e:	af00      	add	r7, sp, #0
 800ffa0:	60f8      	str	r0, [r7, #12]
 800ffa2:	607a      	str	r2, [r7, #4]
 800ffa4:	603b      	str	r3, [r7, #0]
 800ffa6:	460b      	mov	r3, r1
 800ffa8:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ffaa:	2300      	movs	r3, #0
 800ffac:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ffae:	2300      	movs	r3, #0
 800ffb0:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800ffb2:	68fb      	ldr	r3, [r7, #12]
 800ffb4:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800ffb8:	7af9      	ldrb	r1, [r7, #11]
 800ffba:	683b      	ldr	r3, [r7, #0]
 800ffbc:	687a      	ldr	r2, [r7, #4]
 800ffbe:	f7f9 fdc9 	bl	8009b54 <HAL_PCD_EP_Transmit>
 800ffc2:	4603      	mov	r3, r0
 800ffc4:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ffc6:	7dfb      	ldrb	r3, [r7, #23]
 800ffc8:	4618      	mov	r0, r3
 800ffca:	f000 f8a1 	bl	8010110 <USBD_Get_USB_Status>
 800ffce:	4603      	mov	r3, r0
 800ffd0:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800ffd2:	7dbb      	ldrb	r3, [r7, #22]
}
 800ffd4:	4618      	mov	r0, r3
 800ffd6:	3718      	adds	r7, #24
 800ffd8:	46bd      	mov	sp, r7
 800ffda:	bd80      	pop	{r7, pc}

0800ffdc <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800ffdc:	b580      	push	{r7, lr}
 800ffde:	b086      	sub	sp, #24
 800ffe0:	af00      	add	r7, sp, #0
 800ffe2:	60f8      	str	r0, [r7, #12]
 800ffe4:	607a      	str	r2, [r7, #4]
 800ffe6:	603b      	str	r3, [r7, #0]
 800ffe8:	460b      	mov	r3, r1
 800ffea:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ffec:	2300      	movs	r3, #0
 800ffee:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800fff0:	2300      	movs	r3, #0
 800fff2:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800fff4:	68fb      	ldr	r3, [r7, #12]
 800fff6:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800fffa:	7af9      	ldrb	r1, [r7, #11]
 800fffc:	683b      	ldr	r3, [r7, #0]
 800fffe:	687a      	ldr	r2, [r7, #4]
 8010000:	f7f9 fd45 	bl	8009a8e <HAL_PCD_EP_Receive>
 8010004:	4603      	mov	r3, r0
 8010006:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010008:	7dfb      	ldrb	r3, [r7, #23]
 801000a:	4618      	mov	r0, r3
 801000c:	f000 f880 	bl	8010110 <USBD_Get_USB_Status>
 8010010:	4603      	mov	r3, r0
 8010012:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8010014:	7dbb      	ldrb	r3, [r7, #22]
}
 8010016:	4618      	mov	r0, r3
 8010018:	3718      	adds	r7, #24
 801001a:	46bd      	mov	sp, r7
 801001c:	bd80      	pop	{r7, pc}

0801001e <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801001e:	b580      	push	{r7, lr}
 8010020:	b082      	sub	sp, #8
 8010022:	af00      	add	r7, sp, #0
 8010024:	6078      	str	r0, [r7, #4]
 8010026:	460b      	mov	r3, r1
 8010028:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 801002a:	687b      	ldr	r3, [r7, #4]
 801002c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8010030:	78fa      	ldrb	r2, [r7, #3]
 8010032:	4611      	mov	r1, r2
 8010034:	4618      	mov	r0, r3
 8010036:	f7f9 fd75 	bl	8009b24 <HAL_PCD_EP_GetRxCount>
 801003a:	4603      	mov	r3, r0
}
 801003c:	4618      	mov	r0, r3
 801003e:	3708      	adds	r7, #8
 8010040:	46bd      	mov	sp, r7
 8010042:	bd80      	pop	{r7, pc}

08010044 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8010044:	b580      	push	{r7, lr}
 8010046:	b082      	sub	sp, #8
 8010048:	af00      	add	r7, sp, #0
 801004a:	6078      	str	r0, [r7, #4]
 801004c:	460b      	mov	r3, r1
 801004e:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 8010050:	78fb      	ldrb	r3, [r7, #3]
 8010052:	2b00      	cmp	r3, #0
 8010054:	d002      	beq.n	801005c <HAL_PCDEx_LPM_Callback+0x18>
 8010056:	2b01      	cmp	r3, #1
 8010058:	d01f      	beq.n	801009a <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 801005a:	e03b      	b.n	80100d4 <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 801005c:	687b      	ldr	r3, [r7, #4]
 801005e:	6a1b      	ldr	r3, [r3, #32]
 8010060:	2b00      	cmp	r3, #0
 8010062:	d007      	beq.n	8010074 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClock_Config();
 8010064:	f7f2 f806 	bl	8002074 <SystemClock_Config>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8010068:	4b1c      	ldr	r3, [pc, #112]	; (80100dc <HAL_PCDEx_LPM_Callback+0x98>)
 801006a:	691b      	ldr	r3, [r3, #16]
 801006c:	4a1b      	ldr	r2, [pc, #108]	; (80100dc <HAL_PCDEx_LPM_Callback+0x98>)
 801006e:	f023 0306 	bic.w	r3, r3, #6
 8010072:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 8010074:	687b      	ldr	r3, [r7, #4]
 8010076:	681b      	ldr	r3, [r3, #0]
 8010078:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 801007c:	681b      	ldr	r3, [r3, #0]
 801007e:	687a      	ldr	r2, [r7, #4]
 8010080:	6812      	ldr	r2, [r2, #0]
 8010082:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8010086:	f023 0301 	bic.w	r3, r3, #1
 801008a:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 801008c:	687b      	ldr	r3, [r7, #4]
 801008e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8010092:	4618      	mov	r0, r3
 8010094:	f7fe fa97 	bl	800e5c6 <USBD_LL_Resume>
    break;
 8010098:	e01c      	b.n	80100d4 <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 801009a:	687b      	ldr	r3, [r7, #4]
 801009c:	681b      	ldr	r3, [r3, #0]
 801009e:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80100a2:	681b      	ldr	r3, [r3, #0]
 80100a4:	687a      	ldr	r2, [r7, #4]
 80100a6:	6812      	ldr	r2, [r2, #0]
 80100a8:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80100ac:	f043 0301 	orr.w	r3, r3, #1
 80100b0:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 80100b2:	687b      	ldr	r3, [r7, #4]
 80100b4:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80100b8:	4618      	mov	r0, r3
 80100ba:	f7fe fa6e 	bl	800e59a <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 80100be:	687b      	ldr	r3, [r7, #4]
 80100c0:	6a1b      	ldr	r3, [r3, #32]
 80100c2:	2b00      	cmp	r3, #0
 80100c4:	d005      	beq.n	80100d2 <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80100c6:	4b05      	ldr	r3, [pc, #20]	; (80100dc <HAL_PCDEx_LPM_Callback+0x98>)
 80100c8:	691b      	ldr	r3, [r3, #16]
 80100ca:	4a04      	ldr	r2, [pc, #16]	; (80100dc <HAL_PCDEx_LPM_Callback+0x98>)
 80100cc:	f043 0306 	orr.w	r3, r3, #6
 80100d0:	6113      	str	r3, [r2, #16]
    break;
 80100d2:	bf00      	nop
}
 80100d4:	bf00      	nop
 80100d6:	3708      	adds	r7, #8
 80100d8:	46bd      	mov	sp, r7
 80100da:	bd80      	pop	{r7, pc}
 80100dc:	e000ed00 	.word	0xe000ed00

080100e0 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80100e0:	b480      	push	{r7}
 80100e2:	b083      	sub	sp, #12
 80100e4:	af00      	add	r7, sp, #0
 80100e6:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80100e8:	4b03      	ldr	r3, [pc, #12]	; (80100f8 <USBD_static_malloc+0x18>)
}
 80100ea:	4618      	mov	r0, r3
 80100ec:	370c      	adds	r7, #12
 80100ee:	46bd      	mov	sp, r7
 80100f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100f4:	4770      	bx	lr
 80100f6:	bf00      	nop
 80100f8:	20002430 	.word	0x20002430

080100fc <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80100fc:	b480      	push	{r7}
 80100fe:	b083      	sub	sp, #12
 8010100:	af00      	add	r7, sp, #0
 8010102:	6078      	str	r0, [r7, #4]

}
 8010104:	bf00      	nop
 8010106:	370c      	adds	r7, #12
 8010108:	46bd      	mov	sp, r7
 801010a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801010e:	4770      	bx	lr

08010110 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8010110:	b480      	push	{r7}
 8010112:	b085      	sub	sp, #20
 8010114:	af00      	add	r7, sp, #0
 8010116:	4603      	mov	r3, r0
 8010118:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801011a:	2300      	movs	r3, #0
 801011c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 801011e:	79fb      	ldrb	r3, [r7, #7]
 8010120:	2b03      	cmp	r3, #3
 8010122:	d817      	bhi.n	8010154 <USBD_Get_USB_Status+0x44>
 8010124:	a201      	add	r2, pc, #4	; (adr r2, 801012c <USBD_Get_USB_Status+0x1c>)
 8010126:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801012a:	bf00      	nop
 801012c:	0801013d 	.word	0x0801013d
 8010130:	08010143 	.word	0x08010143
 8010134:	08010149 	.word	0x08010149
 8010138:	0801014f 	.word	0x0801014f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 801013c:	2300      	movs	r3, #0
 801013e:	73fb      	strb	r3, [r7, #15]
    break;
 8010140:	e00b      	b.n	801015a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8010142:	2303      	movs	r3, #3
 8010144:	73fb      	strb	r3, [r7, #15]
    break;
 8010146:	e008      	b.n	801015a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8010148:	2301      	movs	r3, #1
 801014a:	73fb      	strb	r3, [r7, #15]
    break;
 801014c:	e005      	b.n	801015a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 801014e:	2303      	movs	r3, #3
 8010150:	73fb      	strb	r3, [r7, #15]
    break;
 8010152:	e002      	b.n	801015a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8010154:	2303      	movs	r3, #3
 8010156:	73fb      	strb	r3, [r7, #15]
    break;
 8010158:	bf00      	nop
  }
  return usb_status;
 801015a:	7bfb      	ldrb	r3, [r7, #15]
}
 801015c:	4618      	mov	r0, r3
 801015e:	3714      	adds	r7, #20
 8010160:	46bd      	mov	sp, r7
 8010162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010166:	4770      	bx	lr

08010168 <__errno>:
 8010168:	4b01      	ldr	r3, [pc, #4]	; (8010170 <__errno+0x8>)
 801016a:	6818      	ldr	r0, [r3, #0]
 801016c:	4770      	bx	lr
 801016e:	bf00      	nop
 8010170:	20000208 	.word	0x20000208

08010174 <__libc_init_array>:
 8010174:	b570      	push	{r4, r5, r6, lr}
 8010176:	4d0d      	ldr	r5, [pc, #52]	; (80101ac <__libc_init_array+0x38>)
 8010178:	4c0d      	ldr	r4, [pc, #52]	; (80101b0 <__libc_init_array+0x3c>)
 801017a:	1b64      	subs	r4, r4, r5
 801017c:	10a4      	asrs	r4, r4, #2
 801017e:	2600      	movs	r6, #0
 8010180:	42a6      	cmp	r6, r4
 8010182:	d109      	bne.n	8010198 <__libc_init_array+0x24>
 8010184:	4d0b      	ldr	r5, [pc, #44]	; (80101b4 <__libc_init_array+0x40>)
 8010186:	4c0c      	ldr	r4, [pc, #48]	; (80101b8 <__libc_init_array+0x44>)
 8010188:	f004 fb14 	bl	80147b4 <_init>
 801018c:	1b64      	subs	r4, r4, r5
 801018e:	10a4      	asrs	r4, r4, #2
 8010190:	2600      	movs	r6, #0
 8010192:	42a6      	cmp	r6, r4
 8010194:	d105      	bne.n	80101a2 <__libc_init_array+0x2e>
 8010196:	bd70      	pop	{r4, r5, r6, pc}
 8010198:	f855 3b04 	ldr.w	r3, [r5], #4
 801019c:	4798      	blx	r3
 801019e:	3601      	adds	r6, #1
 80101a0:	e7ee      	b.n	8010180 <__libc_init_array+0xc>
 80101a2:	f855 3b04 	ldr.w	r3, [r5], #4
 80101a6:	4798      	blx	r3
 80101a8:	3601      	adds	r6, #1
 80101aa:	e7f2      	b.n	8010192 <__libc_init_array+0x1e>
 80101ac:	08014f38 	.word	0x08014f38
 80101b0:	08014f38 	.word	0x08014f38
 80101b4:	08014f38 	.word	0x08014f38
 80101b8:	08014f3c 	.word	0x08014f3c

080101bc <malloc>:
 80101bc:	4b02      	ldr	r3, [pc, #8]	; (80101c8 <malloc+0xc>)
 80101be:	4601      	mov	r1, r0
 80101c0:	6818      	ldr	r0, [r3, #0]
 80101c2:	f000 b88d 	b.w	80102e0 <_malloc_r>
 80101c6:	bf00      	nop
 80101c8:	20000208 	.word	0x20000208

080101cc <free>:
 80101cc:	4b02      	ldr	r3, [pc, #8]	; (80101d8 <free+0xc>)
 80101ce:	4601      	mov	r1, r0
 80101d0:	6818      	ldr	r0, [r3, #0]
 80101d2:	f000 b819 	b.w	8010208 <_free_r>
 80101d6:	bf00      	nop
 80101d8:	20000208 	.word	0x20000208

080101dc <memcpy>:
 80101dc:	440a      	add	r2, r1
 80101de:	4291      	cmp	r1, r2
 80101e0:	f100 33ff 	add.w	r3, r0, #4294967295
 80101e4:	d100      	bne.n	80101e8 <memcpy+0xc>
 80101e6:	4770      	bx	lr
 80101e8:	b510      	push	{r4, lr}
 80101ea:	f811 4b01 	ldrb.w	r4, [r1], #1
 80101ee:	f803 4f01 	strb.w	r4, [r3, #1]!
 80101f2:	4291      	cmp	r1, r2
 80101f4:	d1f9      	bne.n	80101ea <memcpy+0xe>
 80101f6:	bd10      	pop	{r4, pc}

080101f8 <memset>:
 80101f8:	4402      	add	r2, r0
 80101fa:	4603      	mov	r3, r0
 80101fc:	4293      	cmp	r3, r2
 80101fe:	d100      	bne.n	8010202 <memset+0xa>
 8010200:	4770      	bx	lr
 8010202:	f803 1b01 	strb.w	r1, [r3], #1
 8010206:	e7f9      	b.n	80101fc <memset+0x4>

08010208 <_free_r>:
 8010208:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801020a:	2900      	cmp	r1, #0
 801020c:	d044      	beq.n	8010298 <_free_r+0x90>
 801020e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010212:	9001      	str	r0, [sp, #4]
 8010214:	2b00      	cmp	r3, #0
 8010216:	f1a1 0404 	sub.w	r4, r1, #4
 801021a:	bfb8      	it	lt
 801021c:	18e4      	addlt	r4, r4, r3
 801021e:	f001 fbf9 	bl	8011a14 <__malloc_lock>
 8010222:	4a1e      	ldr	r2, [pc, #120]	; (801029c <_free_r+0x94>)
 8010224:	9801      	ldr	r0, [sp, #4]
 8010226:	6813      	ldr	r3, [r2, #0]
 8010228:	b933      	cbnz	r3, 8010238 <_free_r+0x30>
 801022a:	6063      	str	r3, [r4, #4]
 801022c:	6014      	str	r4, [r2, #0]
 801022e:	b003      	add	sp, #12
 8010230:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8010234:	f001 bbf4 	b.w	8011a20 <__malloc_unlock>
 8010238:	42a3      	cmp	r3, r4
 801023a:	d908      	bls.n	801024e <_free_r+0x46>
 801023c:	6825      	ldr	r5, [r4, #0]
 801023e:	1961      	adds	r1, r4, r5
 8010240:	428b      	cmp	r3, r1
 8010242:	bf01      	itttt	eq
 8010244:	6819      	ldreq	r1, [r3, #0]
 8010246:	685b      	ldreq	r3, [r3, #4]
 8010248:	1949      	addeq	r1, r1, r5
 801024a:	6021      	streq	r1, [r4, #0]
 801024c:	e7ed      	b.n	801022a <_free_r+0x22>
 801024e:	461a      	mov	r2, r3
 8010250:	685b      	ldr	r3, [r3, #4]
 8010252:	b10b      	cbz	r3, 8010258 <_free_r+0x50>
 8010254:	42a3      	cmp	r3, r4
 8010256:	d9fa      	bls.n	801024e <_free_r+0x46>
 8010258:	6811      	ldr	r1, [r2, #0]
 801025a:	1855      	adds	r5, r2, r1
 801025c:	42a5      	cmp	r5, r4
 801025e:	d10b      	bne.n	8010278 <_free_r+0x70>
 8010260:	6824      	ldr	r4, [r4, #0]
 8010262:	4421      	add	r1, r4
 8010264:	1854      	adds	r4, r2, r1
 8010266:	42a3      	cmp	r3, r4
 8010268:	6011      	str	r1, [r2, #0]
 801026a:	d1e0      	bne.n	801022e <_free_r+0x26>
 801026c:	681c      	ldr	r4, [r3, #0]
 801026e:	685b      	ldr	r3, [r3, #4]
 8010270:	6053      	str	r3, [r2, #4]
 8010272:	4421      	add	r1, r4
 8010274:	6011      	str	r1, [r2, #0]
 8010276:	e7da      	b.n	801022e <_free_r+0x26>
 8010278:	d902      	bls.n	8010280 <_free_r+0x78>
 801027a:	230c      	movs	r3, #12
 801027c:	6003      	str	r3, [r0, #0]
 801027e:	e7d6      	b.n	801022e <_free_r+0x26>
 8010280:	6825      	ldr	r5, [r4, #0]
 8010282:	1961      	adds	r1, r4, r5
 8010284:	428b      	cmp	r3, r1
 8010286:	bf04      	itt	eq
 8010288:	6819      	ldreq	r1, [r3, #0]
 801028a:	685b      	ldreq	r3, [r3, #4]
 801028c:	6063      	str	r3, [r4, #4]
 801028e:	bf04      	itt	eq
 8010290:	1949      	addeq	r1, r1, r5
 8010292:	6021      	streq	r1, [r4, #0]
 8010294:	6054      	str	r4, [r2, #4]
 8010296:	e7ca      	b.n	801022e <_free_r+0x26>
 8010298:	b003      	add	sp, #12
 801029a:	bd30      	pop	{r4, r5, pc}
 801029c:	20002650 	.word	0x20002650

080102a0 <sbrk_aligned>:
 80102a0:	b570      	push	{r4, r5, r6, lr}
 80102a2:	4e0e      	ldr	r6, [pc, #56]	; (80102dc <sbrk_aligned+0x3c>)
 80102a4:	460c      	mov	r4, r1
 80102a6:	6831      	ldr	r1, [r6, #0]
 80102a8:	4605      	mov	r5, r0
 80102aa:	b911      	cbnz	r1, 80102b2 <sbrk_aligned+0x12>
 80102ac:	f000 fcf6 	bl	8010c9c <_sbrk_r>
 80102b0:	6030      	str	r0, [r6, #0]
 80102b2:	4621      	mov	r1, r4
 80102b4:	4628      	mov	r0, r5
 80102b6:	f000 fcf1 	bl	8010c9c <_sbrk_r>
 80102ba:	1c43      	adds	r3, r0, #1
 80102bc:	d00a      	beq.n	80102d4 <sbrk_aligned+0x34>
 80102be:	1cc4      	adds	r4, r0, #3
 80102c0:	f024 0403 	bic.w	r4, r4, #3
 80102c4:	42a0      	cmp	r0, r4
 80102c6:	d007      	beq.n	80102d8 <sbrk_aligned+0x38>
 80102c8:	1a21      	subs	r1, r4, r0
 80102ca:	4628      	mov	r0, r5
 80102cc:	f000 fce6 	bl	8010c9c <_sbrk_r>
 80102d0:	3001      	adds	r0, #1
 80102d2:	d101      	bne.n	80102d8 <sbrk_aligned+0x38>
 80102d4:	f04f 34ff 	mov.w	r4, #4294967295
 80102d8:	4620      	mov	r0, r4
 80102da:	bd70      	pop	{r4, r5, r6, pc}
 80102dc:	20002654 	.word	0x20002654

080102e0 <_malloc_r>:
 80102e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80102e4:	1ccd      	adds	r5, r1, #3
 80102e6:	f025 0503 	bic.w	r5, r5, #3
 80102ea:	3508      	adds	r5, #8
 80102ec:	2d0c      	cmp	r5, #12
 80102ee:	bf38      	it	cc
 80102f0:	250c      	movcc	r5, #12
 80102f2:	2d00      	cmp	r5, #0
 80102f4:	4607      	mov	r7, r0
 80102f6:	db01      	blt.n	80102fc <_malloc_r+0x1c>
 80102f8:	42a9      	cmp	r1, r5
 80102fa:	d905      	bls.n	8010308 <_malloc_r+0x28>
 80102fc:	230c      	movs	r3, #12
 80102fe:	603b      	str	r3, [r7, #0]
 8010300:	2600      	movs	r6, #0
 8010302:	4630      	mov	r0, r6
 8010304:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010308:	4e2e      	ldr	r6, [pc, #184]	; (80103c4 <_malloc_r+0xe4>)
 801030a:	f001 fb83 	bl	8011a14 <__malloc_lock>
 801030e:	6833      	ldr	r3, [r6, #0]
 8010310:	461c      	mov	r4, r3
 8010312:	bb34      	cbnz	r4, 8010362 <_malloc_r+0x82>
 8010314:	4629      	mov	r1, r5
 8010316:	4638      	mov	r0, r7
 8010318:	f7ff ffc2 	bl	80102a0 <sbrk_aligned>
 801031c:	1c43      	adds	r3, r0, #1
 801031e:	4604      	mov	r4, r0
 8010320:	d14d      	bne.n	80103be <_malloc_r+0xde>
 8010322:	6834      	ldr	r4, [r6, #0]
 8010324:	4626      	mov	r6, r4
 8010326:	2e00      	cmp	r6, #0
 8010328:	d140      	bne.n	80103ac <_malloc_r+0xcc>
 801032a:	6823      	ldr	r3, [r4, #0]
 801032c:	4631      	mov	r1, r6
 801032e:	4638      	mov	r0, r7
 8010330:	eb04 0803 	add.w	r8, r4, r3
 8010334:	f000 fcb2 	bl	8010c9c <_sbrk_r>
 8010338:	4580      	cmp	r8, r0
 801033a:	d13a      	bne.n	80103b2 <_malloc_r+0xd2>
 801033c:	6821      	ldr	r1, [r4, #0]
 801033e:	3503      	adds	r5, #3
 8010340:	1a6d      	subs	r5, r5, r1
 8010342:	f025 0503 	bic.w	r5, r5, #3
 8010346:	3508      	adds	r5, #8
 8010348:	2d0c      	cmp	r5, #12
 801034a:	bf38      	it	cc
 801034c:	250c      	movcc	r5, #12
 801034e:	4629      	mov	r1, r5
 8010350:	4638      	mov	r0, r7
 8010352:	f7ff ffa5 	bl	80102a0 <sbrk_aligned>
 8010356:	3001      	adds	r0, #1
 8010358:	d02b      	beq.n	80103b2 <_malloc_r+0xd2>
 801035a:	6823      	ldr	r3, [r4, #0]
 801035c:	442b      	add	r3, r5
 801035e:	6023      	str	r3, [r4, #0]
 8010360:	e00e      	b.n	8010380 <_malloc_r+0xa0>
 8010362:	6822      	ldr	r2, [r4, #0]
 8010364:	1b52      	subs	r2, r2, r5
 8010366:	d41e      	bmi.n	80103a6 <_malloc_r+0xc6>
 8010368:	2a0b      	cmp	r2, #11
 801036a:	d916      	bls.n	801039a <_malloc_r+0xba>
 801036c:	1961      	adds	r1, r4, r5
 801036e:	42a3      	cmp	r3, r4
 8010370:	6025      	str	r5, [r4, #0]
 8010372:	bf18      	it	ne
 8010374:	6059      	strne	r1, [r3, #4]
 8010376:	6863      	ldr	r3, [r4, #4]
 8010378:	bf08      	it	eq
 801037a:	6031      	streq	r1, [r6, #0]
 801037c:	5162      	str	r2, [r4, r5]
 801037e:	604b      	str	r3, [r1, #4]
 8010380:	4638      	mov	r0, r7
 8010382:	f104 060b 	add.w	r6, r4, #11
 8010386:	f001 fb4b 	bl	8011a20 <__malloc_unlock>
 801038a:	f026 0607 	bic.w	r6, r6, #7
 801038e:	1d23      	adds	r3, r4, #4
 8010390:	1af2      	subs	r2, r6, r3
 8010392:	d0b6      	beq.n	8010302 <_malloc_r+0x22>
 8010394:	1b9b      	subs	r3, r3, r6
 8010396:	50a3      	str	r3, [r4, r2]
 8010398:	e7b3      	b.n	8010302 <_malloc_r+0x22>
 801039a:	6862      	ldr	r2, [r4, #4]
 801039c:	42a3      	cmp	r3, r4
 801039e:	bf0c      	ite	eq
 80103a0:	6032      	streq	r2, [r6, #0]
 80103a2:	605a      	strne	r2, [r3, #4]
 80103a4:	e7ec      	b.n	8010380 <_malloc_r+0xa0>
 80103a6:	4623      	mov	r3, r4
 80103a8:	6864      	ldr	r4, [r4, #4]
 80103aa:	e7b2      	b.n	8010312 <_malloc_r+0x32>
 80103ac:	4634      	mov	r4, r6
 80103ae:	6876      	ldr	r6, [r6, #4]
 80103b0:	e7b9      	b.n	8010326 <_malloc_r+0x46>
 80103b2:	230c      	movs	r3, #12
 80103b4:	603b      	str	r3, [r7, #0]
 80103b6:	4638      	mov	r0, r7
 80103b8:	f001 fb32 	bl	8011a20 <__malloc_unlock>
 80103bc:	e7a1      	b.n	8010302 <_malloc_r+0x22>
 80103be:	6025      	str	r5, [r4, #0]
 80103c0:	e7de      	b.n	8010380 <_malloc_r+0xa0>
 80103c2:	bf00      	nop
 80103c4:	20002650 	.word	0x20002650

080103c8 <__cvt>:
 80103c8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80103cc:	ec55 4b10 	vmov	r4, r5, d0
 80103d0:	2d00      	cmp	r5, #0
 80103d2:	460e      	mov	r6, r1
 80103d4:	4619      	mov	r1, r3
 80103d6:	462b      	mov	r3, r5
 80103d8:	bfbb      	ittet	lt
 80103da:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80103de:	461d      	movlt	r5, r3
 80103e0:	2300      	movge	r3, #0
 80103e2:	232d      	movlt	r3, #45	; 0x2d
 80103e4:	700b      	strb	r3, [r1, #0]
 80103e6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80103e8:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80103ec:	4691      	mov	r9, r2
 80103ee:	f023 0820 	bic.w	r8, r3, #32
 80103f2:	bfbc      	itt	lt
 80103f4:	4622      	movlt	r2, r4
 80103f6:	4614      	movlt	r4, r2
 80103f8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80103fc:	d005      	beq.n	801040a <__cvt+0x42>
 80103fe:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8010402:	d100      	bne.n	8010406 <__cvt+0x3e>
 8010404:	3601      	adds	r6, #1
 8010406:	2102      	movs	r1, #2
 8010408:	e000      	b.n	801040c <__cvt+0x44>
 801040a:	2103      	movs	r1, #3
 801040c:	ab03      	add	r3, sp, #12
 801040e:	9301      	str	r3, [sp, #4]
 8010410:	ab02      	add	r3, sp, #8
 8010412:	9300      	str	r3, [sp, #0]
 8010414:	ec45 4b10 	vmov	d0, r4, r5
 8010418:	4653      	mov	r3, sl
 801041a:	4632      	mov	r2, r6
 801041c:	f000 fd08 	bl	8010e30 <_dtoa_r>
 8010420:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8010424:	4607      	mov	r7, r0
 8010426:	d102      	bne.n	801042e <__cvt+0x66>
 8010428:	f019 0f01 	tst.w	r9, #1
 801042c:	d022      	beq.n	8010474 <__cvt+0xac>
 801042e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8010432:	eb07 0906 	add.w	r9, r7, r6
 8010436:	d110      	bne.n	801045a <__cvt+0x92>
 8010438:	783b      	ldrb	r3, [r7, #0]
 801043a:	2b30      	cmp	r3, #48	; 0x30
 801043c:	d10a      	bne.n	8010454 <__cvt+0x8c>
 801043e:	2200      	movs	r2, #0
 8010440:	2300      	movs	r3, #0
 8010442:	4620      	mov	r0, r4
 8010444:	4629      	mov	r1, r5
 8010446:	f7f0 fb5f 	bl	8000b08 <__aeabi_dcmpeq>
 801044a:	b918      	cbnz	r0, 8010454 <__cvt+0x8c>
 801044c:	f1c6 0601 	rsb	r6, r6, #1
 8010450:	f8ca 6000 	str.w	r6, [sl]
 8010454:	f8da 3000 	ldr.w	r3, [sl]
 8010458:	4499      	add	r9, r3
 801045a:	2200      	movs	r2, #0
 801045c:	2300      	movs	r3, #0
 801045e:	4620      	mov	r0, r4
 8010460:	4629      	mov	r1, r5
 8010462:	f7f0 fb51 	bl	8000b08 <__aeabi_dcmpeq>
 8010466:	b108      	cbz	r0, 801046c <__cvt+0xa4>
 8010468:	f8cd 900c 	str.w	r9, [sp, #12]
 801046c:	2230      	movs	r2, #48	; 0x30
 801046e:	9b03      	ldr	r3, [sp, #12]
 8010470:	454b      	cmp	r3, r9
 8010472:	d307      	bcc.n	8010484 <__cvt+0xbc>
 8010474:	9b03      	ldr	r3, [sp, #12]
 8010476:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8010478:	1bdb      	subs	r3, r3, r7
 801047a:	4638      	mov	r0, r7
 801047c:	6013      	str	r3, [r2, #0]
 801047e:	b004      	add	sp, #16
 8010480:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010484:	1c59      	adds	r1, r3, #1
 8010486:	9103      	str	r1, [sp, #12]
 8010488:	701a      	strb	r2, [r3, #0]
 801048a:	e7f0      	b.n	801046e <__cvt+0xa6>

0801048c <__exponent>:
 801048c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801048e:	4603      	mov	r3, r0
 8010490:	2900      	cmp	r1, #0
 8010492:	bfb8      	it	lt
 8010494:	4249      	neglt	r1, r1
 8010496:	f803 2b02 	strb.w	r2, [r3], #2
 801049a:	bfb4      	ite	lt
 801049c:	222d      	movlt	r2, #45	; 0x2d
 801049e:	222b      	movge	r2, #43	; 0x2b
 80104a0:	2909      	cmp	r1, #9
 80104a2:	7042      	strb	r2, [r0, #1]
 80104a4:	dd2a      	ble.n	80104fc <__exponent+0x70>
 80104a6:	f10d 0407 	add.w	r4, sp, #7
 80104aa:	46a4      	mov	ip, r4
 80104ac:	270a      	movs	r7, #10
 80104ae:	46a6      	mov	lr, r4
 80104b0:	460a      	mov	r2, r1
 80104b2:	fb91 f6f7 	sdiv	r6, r1, r7
 80104b6:	fb07 1516 	mls	r5, r7, r6, r1
 80104ba:	3530      	adds	r5, #48	; 0x30
 80104bc:	2a63      	cmp	r2, #99	; 0x63
 80104be:	f104 34ff 	add.w	r4, r4, #4294967295
 80104c2:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80104c6:	4631      	mov	r1, r6
 80104c8:	dcf1      	bgt.n	80104ae <__exponent+0x22>
 80104ca:	3130      	adds	r1, #48	; 0x30
 80104cc:	f1ae 0502 	sub.w	r5, lr, #2
 80104d0:	f804 1c01 	strb.w	r1, [r4, #-1]
 80104d4:	1c44      	adds	r4, r0, #1
 80104d6:	4629      	mov	r1, r5
 80104d8:	4561      	cmp	r1, ip
 80104da:	d30a      	bcc.n	80104f2 <__exponent+0x66>
 80104dc:	f10d 0209 	add.w	r2, sp, #9
 80104e0:	eba2 020e 	sub.w	r2, r2, lr
 80104e4:	4565      	cmp	r5, ip
 80104e6:	bf88      	it	hi
 80104e8:	2200      	movhi	r2, #0
 80104ea:	4413      	add	r3, r2
 80104ec:	1a18      	subs	r0, r3, r0
 80104ee:	b003      	add	sp, #12
 80104f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80104f2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80104f6:	f804 2f01 	strb.w	r2, [r4, #1]!
 80104fa:	e7ed      	b.n	80104d8 <__exponent+0x4c>
 80104fc:	2330      	movs	r3, #48	; 0x30
 80104fe:	3130      	adds	r1, #48	; 0x30
 8010500:	7083      	strb	r3, [r0, #2]
 8010502:	70c1      	strb	r1, [r0, #3]
 8010504:	1d03      	adds	r3, r0, #4
 8010506:	e7f1      	b.n	80104ec <__exponent+0x60>

08010508 <_printf_float>:
 8010508:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801050c:	ed2d 8b02 	vpush	{d8}
 8010510:	b08d      	sub	sp, #52	; 0x34
 8010512:	460c      	mov	r4, r1
 8010514:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8010518:	4616      	mov	r6, r2
 801051a:	461f      	mov	r7, r3
 801051c:	4605      	mov	r5, r0
 801051e:	f001 fa75 	bl	8011a0c <_localeconv_r>
 8010522:	f8d0 a000 	ldr.w	sl, [r0]
 8010526:	4650      	mov	r0, sl
 8010528:	f7ef fe72 	bl	8000210 <strlen>
 801052c:	2300      	movs	r3, #0
 801052e:	930a      	str	r3, [sp, #40]	; 0x28
 8010530:	6823      	ldr	r3, [r4, #0]
 8010532:	9305      	str	r3, [sp, #20]
 8010534:	f8d8 3000 	ldr.w	r3, [r8]
 8010538:	f894 b018 	ldrb.w	fp, [r4, #24]
 801053c:	3307      	adds	r3, #7
 801053e:	f023 0307 	bic.w	r3, r3, #7
 8010542:	f103 0208 	add.w	r2, r3, #8
 8010546:	f8c8 2000 	str.w	r2, [r8]
 801054a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801054e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8010552:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8010556:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 801055a:	9307      	str	r3, [sp, #28]
 801055c:	f8cd 8018 	str.w	r8, [sp, #24]
 8010560:	ee08 0a10 	vmov	s16, r0
 8010564:	4b9f      	ldr	r3, [pc, #636]	; (80107e4 <_printf_float+0x2dc>)
 8010566:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801056a:	f04f 32ff 	mov.w	r2, #4294967295
 801056e:	f7f0 fafd 	bl	8000b6c <__aeabi_dcmpun>
 8010572:	bb88      	cbnz	r0, 80105d8 <_printf_float+0xd0>
 8010574:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8010578:	4b9a      	ldr	r3, [pc, #616]	; (80107e4 <_printf_float+0x2dc>)
 801057a:	f04f 32ff 	mov.w	r2, #4294967295
 801057e:	f7f0 fad7 	bl	8000b30 <__aeabi_dcmple>
 8010582:	bb48      	cbnz	r0, 80105d8 <_printf_float+0xd0>
 8010584:	2200      	movs	r2, #0
 8010586:	2300      	movs	r3, #0
 8010588:	4640      	mov	r0, r8
 801058a:	4649      	mov	r1, r9
 801058c:	f7f0 fac6 	bl	8000b1c <__aeabi_dcmplt>
 8010590:	b110      	cbz	r0, 8010598 <_printf_float+0x90>
 8010592:	232d      	movs	r3, #45	; 0x2d
 8010594:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010598:	4b93      	ldr	r3, [pc, #588]	; (80107e8 <_printf_float+0x2e0>)
 801059a:	4894      	ldr	r0, [pc, #592]	; (80107ec <_printf_float+0x2e4>)
 801059c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80105a0:	bf94      	ite	ls
 80105a2:	4698      	movls	r8, r3
 80105a4:	4680      	movhi	r8, r0
 80105a6:	2303      	movs	r3, #3
 80105a8:	6123      	str	r3, [r4, #16]
 80105aa:	9b05      	ldr	r3, [sp, #20]
 80105ac:	f023 0204 	bic.w	r2, r3, #4
 80105b0:	6022      	str	r2, [r4, #0]
 80105b2:	f04f 0900 	mov.w	r9, #0
 80105b6:	9700      	str	r7, [sp, #0]
 80105b8:	4633      	mov	r3, r6
 80105ba:	aa0b      	add	r2, sp, #44	; 0x2c
 80105bc:	4621      	mov	r1, r4
 80105be:	4628      	mov	r0, r5
 80105c0:	f000 f9d8 	bl	8010974 <_printf_common>
 80105c4:	3001      	adds	r0, #1
 80105c6:	f040 8090 	bne.w	80106ea <_printf_float+0x1e2>
 80105ca:	f04f 30ff 	mov.w	r0, #4294967295
 80105ce:	b00d      	add	sp, #52	; 0x34
 80105d0:	ecbd 8b02 	vpop	{d8}
 80105d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80105d8:	4642      	mov	r2, r8
 80105da:	464b      	mov	r3, r9
 80105dc:	4640      	mov	r0, r8
 80105de:	4649      	mov	r1, r9
 80105e0:	f7f0 fac4 	bl	8000b6c <__aeabi_dcmpun>
 80105e4:	b140      	cbz	r0, 80105f8 <_printf_float+0xf0>
 80105e6:	464b      	mov	r3, r9
 80105e8:	2b00      	cmp	r3, #0
 80105ea:	bfbc      	itt	lt
 80105ec:	232d      	movlt	r3, #45	; 0x2d
 80105ee:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80105f2:	487f      	ldr	r0, [pc, #508]	; (80107f0 <_printf_float+0x2e8>)
 80105f4:	4b7f      	ldr	r3, [pc, #508]	; (80107f4 <_printf_float+0x2ec>)
 80105f6:	e7d1      	b.n	801059c <_printf_float+0x94>
 80105f8:	6863      	ldr	r3, [r4, #4]
 80105fa:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80105fe:	9206      	str	r2, [sp, #24]
 8010600:	1c5a      	adds	r2, r3, #1
 8010602:	d13f      	bne.n	8010684 <_printf_float+0x17c>
 8010604:	2306      	movs	r3, #6
 8010606:	6063      	str	r3, [r4, #4]
 8010608:	9b05      	ldr	r3, [sp, #20]
 801060a:	6861      	ldr	r1, [r4, #4]
 801060c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8010610:	2300      	movs	r3, #0
 8010612:	9303      	str	r3, [sp, #12]
 8010614:	ab0a      	add	r3, sp, #40	; 0x28
 8010616:	e9cd b301 	strd	fp, r3, [sp, #4]
 801061a:	ab09      	add	r3, sp, #36	; 0x24
 801061c:	ec49 8b10 	vmov	d0, r8, r9
 8010620:	9300      	str	r3, [sp, #0]
 8010622:	6022      	str	r2, [r4, #0]
 8010624:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8010628:	4628      	mov	r0, r5
 801062a:	f7ff fecd 	bl	80103c8 <__cvt>
 801062e:	9b06      	ldr	r3, [sp, #24]
 8010630:	9909      	ldr	r1, [sp, #36]	; 0x24
 8010632:	2b47      	cmp	r3, #71	; 0x47
 8010634:	4680      	mov	r8, r0
 8010636:	d108      	bne.n	801064a <_printf_float+0x142>
 8010638:	1cc8      	adds	r0, r1, #3
 801063a:	db02      	blt.n	8010642 <_printf_float+0x13a>
 801063c:	6863      	ldr	r3, [r4, #4]
 801063e:	4299      	cmp	r1, r3
 8010640:	dd41      	ble.n	80106c6 <_printf_float+0x1be>
 8010642:	f1ab 0b02 	sub.w	fp, fp, #2
 8010646:	fa5f fb8b 	uxtb.w	fp, fp
 801064a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 801064e:	d820      	bhi.n	8010692 <_printf_float+0x18a>
 8010650:	3901      	subs	r1, #1
 8010652:	465a      	mov	r2, fp
 8010654:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8010658:	9109      	str	r1, [sp, #36]	; 0x24
 801065a:	f7ff ff17 	bl	801048c <__exponent>
 801065e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8010660:	1813      	adds	r3, r2, r0
 8010662:	2a01      	cmp	r2, #1
 8010664:	4681      	mov	r9, r0
 8010666:	6123      	str	r3, [r4, #16]
 8010668:	dc02      	bgt.n	8010670 <_printf_float+0x168>
 801066a:	6822      	ldr	r2, [r4, #0]
 801066c:	07d2      	lsls	r2, r2, #31
 801066e:	d501      	bpl.n	8010674 <_printf_float+0x16c>
 8010670:	3301      	adds	r3, #1
 8010672:	6123      	str	r3, [r4, #16]
 8010674:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8010678:	2b00      	cmp	r3, #0
 801067a:	d09c      	beq.n	80105b6 <_printf_float+0xae>
 801067c:	232d      	movs	r3, #45	; 0x2d
 801067e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010682:	e798      	b.n	80105b6 <_printf_float+0xae>
 8010684:	9a06      	ldr	r2, [sp, #24]
 8010686:	2a47      	cmp	r2, #71	; 0x47
 8010688:	d1be      	bne.n	8010608 <_printf_float+0x100>
 801068a:	2b00      	cmp	r3, #0
 801068c:	d1bc      	bne.n	8010608 <_printf_float+0x100>
 801068e:	2301      	movs	r3, #1
 8010690:	e7b9      	b.n	8010606 <_printf_float+0xfe>
 8010692:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8010696:	d118      	bne.n	80106ca <_printf_float+0x1c2>
 8010698:	2900      	cmp	r1, #0
 801069a:	6863      	ldr	r3, [r4, #4]
 801069c:	dd0b      	ble.n	80106b6 <_printf_float+0x1ae>
 801069e:	6121      	str	r1, [r4, #16]
 80106a0:	b913      	cbnz	r3, 80106a8 <_printf_float+0x1a0>
 80106a2:	6822      	ldr	r2, [r4, #0]
 80106a4:	07d0      	lsls	r0, r2, #31
 80106a6:	d502      	bpl.n	80106ae <_printf_float+0x1a6>
 80106a8:	3301      	adds	r3, #1
 80106aa:	440b      	add	r3, r1
 80106ac:	6123      	str	r3, [r4, #16]
 80106ae:	65a1      	str	r1, [r4, #88]	; 0x58
 80106b0:	f04f 0900 	mov.w	r9, #0
 80106b4:	e7de      	b.n	8010674 <_printf_float+0x16c>
 80106b6:	b913      	cbnz	r3, 80106be <_printf_float+0x1b6>
 80106b8:	6822      	ldr	r2, [r4, #0]
 80106ba:	07d2      	lsls	r2, r2, #31
 80106bc:	d501      	bpl.n	80106c2 <_printf_float+0x1ba>
 80106be:	3302      	adds	r3, #2
 80106c0:	e7f4      	b.n	80106ac <_printf_float+0x1a4>
 80106c2:	2301      	movs	r3, #1
 80106c4:	e7f2      	b.n	80106ac <_printf_float+0x1a4>
 80106c6:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80106ca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80106cc:	4299      	cmp	r1, r3
 80106ce:	db05      	blt.n	80106dc <_printf_float+0x1d4>
 80106d0:	6823      	ldr	r3, [r4, #0]
 80106d2:	6121      	str	r1, [r4, #16]
 80106d4:	07d8      	lsls	r0, r3, #31
 80106d6:	d5ea      	bpl.n	80106ae <_printf_float+0x1a6>
 80106d8:	1c4b      	adds	r3, r1, #1
 80106da:	e7e7      	b.n	80106ac <_printf_float+0x1a4>
 80106dc:	2900      	cmp	r1, #0
 80106de:	bfd4      	ite	le
 80106e0:	f1c1 0202 	rsble	r2, r1, #2
 80106e4:	2201      	movgt	r2, #1
 80106e6:	4413      	add	r3, r2
 80106e8:	e7e0      	b.n	80106ac <_printf_float+0x1a4>
 80106ea:	6823      	ldr	r3, [r4, #0]
 80106ec:	055a      	lsls	r2, r3, #21
 80106ee:	d407      	bmi.n	8010700 <_printf_float+0x1f8>
 80106f0:	6923      	ldr	r3, [r4, #16]
 80106f2:	4642      	mov	r2, r8
 80106f4:	4631      	mov	r1, r6
 80106f6:	4628      	mov	r0, r5
 80106f8:	47b8      	blx	r7
 80106fa:	3001      	adds	r0, #1
 80106fc:	d12c      	bne.n	8010758 <_printf_float+0x250>
 80106fe:	e764      	b.n	80105ca <_printf_float+0xc2>
 8010700:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8010704:	f240 80e0 	bls.w	80108c8 <_printf_float+0x3c0>
 8010708:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 801070c:	2200      	movs	r2, #0
 801070e:	2300      	movs	r3, #0
 8010710:	f7f0 f9fa 	bl	8000b08 <__aeabi_dcmpeq>
 8010714:	2800      	cmp	r0, #0
 8010716:	d034      	beq.n	8010782 <_printf_float+0x27a>
 8010718:	4a37      	ldr	r2, [pc, #220]	; (80107f8 <_printf_float+0x2f0>)
 801071a:	2301      	movs	r3, #1
 801071c:	4631      	mov	r1, r6
 801071e:	4628      	mov	r0, r5
 8010720:	47b8      	blx	r7
 8010722:	3001      	adds	r0, #1
 8010724:	f43f af51 	beq.w	80105ca <_printf_float+0xc2>
 8010728:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801072c:	429a      	cmp	r2, r3
 801072e:	db02      	blt.n	8010736 <_printf_float+0x22e>
 8010730:	6823      	ldr	r3, [r4, #0]
 8010732:	07d8      	lsls	r0, r3, #31
 8010734:	d510      	bpl.n	8010758 <_printf_float+0x250>
 8010736:	ee18 3a10 	vmov	r3, s16
 801073a:	4652      	mov	r2, sl
 801073c:	4631      	mov	r1, r6
 801073e:	4628      	mov	r0, r5
 8010740:	47b8      	blx	r7
 8010742:	3001      	adds	r0, #1
 8010744:	f43f af41 	beq.w	80105ca <_printf_float+0xc2>
 8010748:	f04f 0800 	mov.w	r8, #0
 801074c:	f104 091a 	add.w	r9, r4, #26
 8010750:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010752:	3b01      	subs	r3, #1
 8010754:	4543      	cmp	r3, r8
 8010756:	dc09      	bgt.n	801076c <_printf_float+0x264>
 8010758:	6823      	ldr	r3, [r4, #0]
 801075a:	079b      	lsls	r3, r3, #30
 801075c:	f100 8105 	bmi.w	801096a <_printf_float+0x462>
 8010760:	68e0      	ldr	r0, [r4, #12]
 8010762:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010764:	4298      	cmp	r0, r3
 8010766:	bfb8      	it	lt
 8010768:	4618      	movlt	r0, r3
 801076a:	e730      	b.n	80105ce <_printf_float+0xc6>
 801076c:	2301      	movs	r3, #1
 801076e:	464a      	mov	r2, r9
 8010770:	4631      	mov	r1, r6
 8010772:	4628      	mov	r0, r5
 8010774:	47b8      	blx	r7
 8010776:	3001      	adds	r0, #1
 8010778:	f43f af27 	beq.w	80105ca <_printf_float+0xc2>
 801077c:	f108 0801 	add.w	r8, r8, #1
 8010780:	e7e6      	b.n	8010750 <_printf_float+0x248>
 8010782:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010784:	2b00      	cmp	r3, #0
 8010786:	dc39      	bgt.n	80107fc <_printf_float+0x2f4>
 8010788:	4a1b      	ldr	r2, [pc, #108]	; (80107f8 <_printf_float+0x2f0>)
 801078a:	2301      	movs	r3, #1
 801078c:	4631      	mov	r1, r6
 801078e:	4628      	mov	r0, r5
 8010790:	47b8      	blx	r7
 8010792:	3001      	adds	r0, #1
 8010794:	f43f af19 	beq.w	80105ca <_printf_float+0xc2>
 8010798:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801079c:	4313      	orrs	r3, r2
 801079e:	d102      	bne.n	80107a6 <_printf_float+0x29e>
 80107a0:	6823      	ldr	r3, [r4, #0]
 80107a2:	07d9      	lsls	r1, r3, #31
 80107a4:	d5d8      	bpl.n	8010758 <_printf_float+0x250>
 80107a6:	ee18 3a10 	vmov	r3, s16
 80107aa:	4652      	mov	r2, sl
 80107ac:	4631      	mov	r1, r6
 80107ae:	4628      	mov	r0, r5
 80107b0:	47b8      	blx	r7
 80107b2:	3001      	adds	r0, #1
 80107b4:	f43f af09 	beq.w	80105ca <_printf_float+0xc2>
 80107b8:	f04f 0900 	mov.w	r9, #0
 80107bc:	f104 0a1a 	add.w	sl, r4, #26
 80107c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80107c2:	425b      	negs	r3, r3
 80107c4:	454b      	cmp	r3, r9
 80107c6:	dc01      	bgt.n	80107cc <_printf_float+0x2c4>
 80107c8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80107ca:	e792      	b.n	80106f2 <_printf_float+0x1ea>
 80107cc:	2301      	movs	r3, #1
 80107ce:	4652      	mov	r2, sl
 80107d0:	4631      	mov	r1, r6
 80107d2:	4628      	mov	r0, r5
 80107d4:	47b8      	blx	r7
 80107d6:	3001      	adds	r0, #1
 80107d8:	f43f aef7 	beq.w	80105ca <_printf_float+0xc2>
 80107dc:	f109 0901 	add.w	r9, r9, #1
 80107e0:	e7ee      	b.n	80107c0 <_printf_float+0x2b8>
 80107e2:	bf00      	nop
 80107e4:	7fefffff 	.word	0x7fefffff
 80107e8:	08014958 	.word	0x08014958
 80107ec:	0801495c 	.word	0x0801495c
 80107f0:	08014964 	.word	0x08014964
 80107f4:	08014960 	.word	0x08014960
 80107f8:	08014968 	.word	0x08014968
 80107fc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80107fe:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8010800:	429a      	cmp	r2, r3
 8010802:	bfa8      	it	ge
 8010804:	461a      	movge	r2, r3
 8010806:	2a00      	cmp	r2, #0
 8010808:	4691      	mov	r9, r2
 801080a:	dc37      	bgt.n	801087c <_printf_float+0x374>
 801080c:	f04f 0b00 	mov.w	fp, #0
 8010810:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8010814:	f104 021a 	add.w	r2, r4, #26
 8010818:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801081a:	9305      	str	r3, [sp, #20]
 801081c:	eba3 0309 	sub.w	r3, r3, r9
 8010820:	455b      	cmp	r3, fp
 8010822:	dc33      	bgt.n	801088c <_printf_float+0x384>
 8010824:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8010828:	429a      	cmp	r2, r3
 801082a:	db3b      	blt.n	80108a4 <_printf_float+0x39c>
 801082c:	6823      	ldr	r3, [r4, #0]
 801082e:	07da      	lsls	r2, r3, #31
 8010830:	d438      	bmi.n	80108a4 <_printf_float+0x39c>
 8010832:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010834:	9a05      	ldr	r2, [sp, #20]
 8010836:	9909      	ldr	r1, [sp, #36]	; 0x24
 8010838:	1a9a      	subs	r2, r3, r2
 801083a:	eba3 0901 	sub.w	r9, r3, r1
 801083e:	4591      	cmp	r9, r2
 8010840:	bfa8      	it	ge
 8010842:	4691      	movge	r9, r2
 8010844:	f1b9 0f00 	cmp.w	r9, #0
 8010848:	dc35      	bgt.n	80108b6 <_printf_float+0x3ae>
 801084a:	f04f 0800 	mov.w	r8, #0
 801084e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8010852:	f104 0a1a 	add.w	sl, r4, #26
 8010856:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801085a:	1a9b      	subs	r3, r3, r2
 801085c:	eba3 0309 	sub.w	r3, r3, r9
 8010860:	4543      	cmp	r3, r8
 8010862:	f77f af79 	ble.w	8010758 <_printf_float+0x250>
 8010866:	2301      	movs	r3, #1
 8010868:	4652      	mov	r2, sl
 801086a:	4631      	mov	r1, r6
 801086c:	4628      	mov	r0, r5
 801086e:	47b8      	blx	r7
 8010870:	3001      	adds	r0, #1
 8010872:	f43f aeaa 	beq.w	80105ca <_printf_float+0xc2>
 8010876:	f108 0801 	add.w	r8, r8, #1
 801087a:	e7ec      	b.n	8010856 <_printf_float+0x34e>
 801087c:	4613      	mov	r3, r2
 801087e:	4631      	mov	r1, r6
 8010880:	4642      	mov	r2, r8
 8010882:	4628      	mov	r0, r5
 8010884:	47b8      	blx	r7
 8010886:	3001      	adds	r0, #1
 8010888:	d1c0      	bne.n	801080c <_printf_float+0x304>
 801088a:	e69e      	b.n	80105ca <_printf_float+0xc2>
 801088c:	2301      	movs	r3, #1
 801088e:	4631      	mov	r1, r6
 8010890:	4628      	mov	r0, r5
 8010892:	9205      	str	r2, [sp, #20]
 8010894:	47b8      	blx	r7
 8010896:	3001      	adds	r0, #1
 8010898:	f43f ae97 	beq.w	80105ca <_printf_float+0xc2>
 801089c:	9a05      	ldr	r2, [sp, #20]
 801089e:	f10b 0b01 	add.w	fp, fp, #1
 80108a2:	e7b9      	b.n	8010818 <_printf_float+0x310>
 80108a4:	ee18 3a10 	vmov	r3, s16
 80108a8:	4652      	mov	r2, sl
 80108aa:	4631      	mov	r1, r6
 80108ac:	4628      	mov	r0, r5
 80108ae:	47b8      	blx	r7
 80108b0:	3001      	adds	r0, #1
 80108b2:	d1be      	bne.n	8010832 <_printf_float+0x32a>
 80108b4:	e689      	b.n	80105ca <_printf_float+0xc2>
 80108b6:	9a05      	ldr	r2, [sp, #20]
 80108b8:	464b      	mov	r3, r9
 80108ba:	4442      	add	r2, r8
 80108bc:	4631      	mov	r1, r6
 80108be:	4628      	mov	r0, r5
 80108c0:	47b8      	blx	r7
 80108c2:	3001      	adds	r0, #1
 80108c4:	d1c1      	bne.n	801084a <_printf_float+0x342>
 80108c6:	e680      	b.n	80105ca <_printf_float+0xc2>
 80108c8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80108ca:	2a01      	cmp	r2, #1
 80108cc:	dc01      	bgt.n	80108d2 <_printf_float+0x3ca>
 80108ce:	07db      	lsls	r3, r3, #31
 80108d0:	d538      	bpl.n	8010944 <_printf_float+0x43c>
 80108d2:	2301      	movs	r3, #1
 80108d4:	4642      	mov	r2, r8
 80108d6:	4631      	mov	r1, r6
 80108d8:	4628      	mov	r0, r5
 80108da:	47b8      	blx	r7
 80108dc:	3001      	adds	r0, #1
 80108de:	f43f ae74 	beq.w	80105ca <_printf_float+0xc2>
 80108e2:	ee18 3a10 	vmov	r3, s16
 80108e6:	4652      	mov	r2, sl
 80108e8:	4631      	mov	r1, r6
 80108ea:	4628      	mov	r0, r5
 80108ec:	47b8      	blx	r7
 80108ee:	3001      	adds	r0, #1
 80108f0:	f43f ae6b 	beq.w	80105ca <_printf_float+0xc2>
 80108f4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80108f8:	2200      	movs	r2, #0
 80108fa:	2300      	movs	r3, #0
 80108fc:	f7f0 f904 	bl	8000b08 <__aeabi_dcmpeq>
 8010900:	b9d8      	cbnz	r0, 801093a <_printf_float+0x432>
 8010902:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010904:	f108 0201 	add.w	r2, r8, #1
 8010908:	3b01      	subs	r3, #1
 801090a:	4631      	mov	r1, r6
 801090c:	4628      	mov	r0, r5
 801090e:	47b8      	blx	r7
 8010910:	3001      	adds	r0, #1
 8010912:	d10e      	bne.n	8010932 <_printf_float+0x42a>
 8010914:	e659      	b.n	80105ca <_printf_float+0xc2>
 8010916:	2301      	movs	r3, #1
 8010918:	4652      	mov	r2, sl
 801091a:	4631      	mov	r1, r6
 801091c:	4628      	mov	r0, r5
 801091e:	47b8      	blx	r7
 8010920:	3001      	adds	r0, #1
 8010922:	f43f ae52 	beq.w	80105ca <_printf_float+0xc2>
 8010926:	f108 0801 	add.w	r8, r8, #1
 801092a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801092c:	3b01      	subs	r3, #1
 801092e:	4543      	cmp	r3, r8
 8010930:	dcf1      	bgt.n	8010916 <_printf_float+0x40e>
 8010932:	464b      	mov	r3, r9
 8010934:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8010938:	e6dc      	b.n	80106f4 <_printf_float+0x1ec>
 801093a:	f04f 0800 	mov.w	r8, #0
 801093e:	f104 0a1a 	add.w	sl, r4, #26
 8010942:	e7f2      	b.n	801092a <_printf_float+0x422>
 8010944:	2301      	movs	r3, #1
 8010946:	4642      	mov	r2, r8
 8010948:	e7df      	b.n	801090a <_printf_float+0x402>
 801094a:	2301      	movs	r3, #1
 801094c:	464a      	mov	r2, r9
 801094e:	4631      	mov	r1, r6
 8010950:	4628      	mov	r0, r5
 8010952:	47b8      	blx	r7
 8010954:	3001      	adds	r0, #1
 8010956:	f43f ae38 	beq.w	80105ca <_printf_float+0xc2>
 801095a:	f108 0801 	add.w	r8, r8, #1
 801095e:	68e3      	ldr	r3, [r4, #12]
 8010960:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8010962:	1a5b      	subs	r3, r3, r1
 8010964:	4543      	cmp	r3, r8
 8010966:	dcf0      	bgt.n	801094a <_printf_float+0x442>
 8010968:	e6fa      	b.n	8010760 <_printf_float+0x258>
 801096a:	f04f 0800 	mov.w	r8, #0
 801096e:	f104 0919 	add.w	r9, r4, #25
 8010972:	e7f4      	b.n	801095e <_printf_float+0x456>

08010974 <_printf_common>:
 8010974:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010978:	4616      	mov	r6, r2
 801097a:	4699      	mov	r9, r3
 801097c:	688a      	ldr	r2, [r1, #8]
 801097e:	690b      	ldr	r3, [r1, #16]
 8010980:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8010984:	4293      	cmp	r3, r2
 8010986:	bfb8      	it	lt
 8010988:	4613      	movlt	r3, r2
 801098a:	6033      	str	r3, [r6, #0]
 801098c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8010990:	4607      	mov	r7, r0
 8010992:	460c      	mov	r4, r1
 8010994:	b10a      	cbz	r2, 801099a <_printf_common+0x26>
 8010996:	3301      	adds	r3, #1
 8010998:	6033      	str	r3, [r6, #0]
 801099a:	6823      	ldr	r3, [r4, #0]
 801099c:	0699      	lsls	r1, r3, #26
 801099e:	bf42      	ittt	mi
 80109a0:	6833      	ldrmi	r3, [r6, #0]
 80109a2:	3302      	addmi	r3, #2
 80109a4:	6033      	strmi	r3, [r6, #0]
 80109a6:	6825      	ldr	r5, [r4, #0]
 80109a8:	f015 0506 	ands.w	r5, r5, #6
 80109ac:	d106      	bne.n	80109bc <_printf_common+0x48>
 80109ae:	f104 0a19 	add.w	sl, r4, #25
 80109b2:	68e3      	ldr	r3, [r4, #12]
 80109b4:	6832      	ldr	r2, [r6, #0]
 80109b6:	1a9b      	subs	r3, r3, r2
 80109b8:	42ab      	cmp	r3, r5
 80109ba:	dc26      	bgt.n	8010a0a <_printf_common+0x96>
 80109bc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80109c0:	1e13      	subs	r3, r2, #0
 80109c2:	6822      	ldr	r2, [r4, #0]
 80109c4:	bf18      	it	ne
 80109c6:	2301      	movne	r3, #1
 80109c8:	0692      	lsls	r2, r2, #26
 80109ca:	d42b      	bmi.n	8010a24 <_printf_common+0xb0>
 80109cc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80109d0:	4649      	mov	r1, r9
 80109d2:	4638      	mov	r0, r7
 80109d4:	47c0      	blx	r8
 80109d6:	3001      	adds	r0, #1
 80109d8:	d01e      	beq.n	8010a18 <_printf_common+0xa4>
 80109da:	6823      	ldr	r3, [r4, #0]
 80109dc:	68e5      	ldr	r5, [r4, #12]
 80109de:	6832      	ldr	r2, [r6, #0]
 80109e0:	f003 0306 	and.w	r3, r3, #6
 80109e4:	2b04      	cmp	r3, #4
 80109e6:	bf08      	it	eq
 80109e8:	1aad      	subeq	r5, r5, r2
 80109ea:	68a3      	ldr	r3, [r4, #8]
 80109ec:	6922      	ldr	r2, [r4, #16]
 80109ee:	bf0c      	ite	eq
 80109f0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80109f4:	2500      	movne	r5, #0
 80109f6:	4293      	cmp	r3, r2
 80109f8:	bfc4      	itt	gt
 80109fa:	1a9b      	subgt	r3, r3, r2
 80109fc:	18ed      	addgt	r5, r5, r3
 80109fe:	2600      	movs	r6, #0
 8010a00:	341a      	adds	r4, #26
 8010a02:	42b5      	cmp	r5, r6
 8010a04:	d11a      	bne.n	8010a3c <_printf_common+0xc8>
 8010a06:	2000      	movs	r0, #0
 8010a08:	e008      	b.n	8010a1c <_printf_common+0xa8>
 8010a0a:	2301      	movs	r3, #1
 8010a0c:	4652      	mov	r2, sl
 8010a0e:	4649      	mov	r1, r9
 8010a10:	4638      	mov	r0, r7
 8010a12:	47c0      	blx	r8
 8010a14:	3001      	adds	r0, #1
 8010a16:	d103      	bne.n	8010a20 <_printf_common+0xac>
 8010a18:	f04f 30ff 	mov.w	r0, #4294967295
 8010a1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010a20:	3501      	adds	r5, #1
 8010a22:	e7c6      	b.n	80109b2 <_printf_common+0x3e>
 8010a24:	18e1      	adds	r1, r4, r3
 8010a26:	1c5a      	adds	r2, r3, #1
 8010a28:	2030      	movs	r0, #48	; 0x30
 8010a2a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8010a2e:	4422      	add	r2, r4
 8010a30:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8010a34:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8010a38:	3302      	adds	r3, #2
 8010a3a:	e7c7      	b.n	80109cc <_printf_common+0x58>
 8010a3c:	2301      	movs	r3, #1
 8010a3e:	4622      	mov	r2, r4
 8010a40:	4649      	mov	r1, r9
 8010a42:	4638      	mov	r0, r7
 8010a44:	47c0      	blx	r8
 8010a46:	3001      	adds	r0, #1
 8010a48:	d0e6      	beq.n	8010a18 <_printf_common+0xa4>
 8010a4a:	3601      	adds	r6, #1
 8010a4c:	e7d9      	b.n	8010a02 <_printf_common+0x8e>
	...

08010a50 <_printf_i>:
 8010a50:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8010a54:	7e0f      	ldrb	r7, [r1, #24]
 8010a56:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8010a58:	2f78      	cmp	r7, #120	; 0x78
 8010a5a:	4691      	mov	r9, r2
 8010a5c:	4680      	mov	r8, r0
 8010a5e:	460c      	mov	r4, r1
 8010a60:	469a      	mov	sl, r3
 8010a62:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8010a66:	d807      	bhi.n	8010a78 <_printf_i+0x28>
 8010a68:	2f62      	cmp	r7, #98	; 0x62
 8010a6a:	d80a      	bhi.n	8010a82 <_printf_i+0x32>
 8010a6c:	2f00      	cmp	r7, #0
 8010a6e:	f000 80d8 	beq.w	8010c22 <_printf_i+0x1d2>
 8010a72:	2f58      	cmp	r7, #88	; 0x58
 8010a74:	f000 80a3 	beq.w	8010bbe <_printf_i+0x16e>
 8010a78:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8010a7c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8010a80:	e03a      	b.n	8010af8 <_printf_i+0xa8>
 8010a82:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8010a86:	2b15      	cmp	r3, #21
 8010a88:	d8f6      	bhi.n	8010a78 <_printf_i+0x28>
 8010a8a:	a101      	add	r1, pc, #4	; (adr r1, 8010a90 <_printf_i+0x40>)
 8010a8c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8010a90:	08010ae9 	.word	0x08010ae9
 8010a94:	08010afd 	.word	0x08010afd
 8010a98:	08010a79 	.word	0x08010a79
 8010a9c:	08010a79 	.word	0x08010a79
 8010aa0:	08010a79 	.word	0x08010a79
 8010aa4:	08010a79 	.word	0x08010a79
 8010aa8:	08010afd 	.word	0x08010afd
 8010aac:	08010a79 	.word	0x08010a79
 8010ab0:	08010a79 	.word	0x08010a79
 8010ab4:	08010a79 	.word	0x08010a79
 8010ab8:	08010a79 	.word	0x08010a79
 8010abc:	08010c09 	.word	0x08010c09
 8010ac0:	08010b2d 	.word	0x08010b2d
 8010ac4:	08010beb 	.word	0x08010beb
 8010ac8:	08010a79 	.word	0x08010a79
 8010acc:	08010a79 	.word	0x08010a79
 8010ad0:	08010c2b 	.word	0x08010c2b
 8010ad4:	08010a79 	.word	0x08010a79
 8010ad8:	08010b2d 	.word	0x08010b2d
 8010adc:	08010a79 	.word	0x08010a79
 8010ae0:	08010a79 	.word	0x08010a79
 8010ae4:	08010bf3 	.word	0x08010bf3
 8010ae8:	682b      	ldr	r3, [r5, #0]
 8010aea:	1d1a      	adds	r2, r3, #4
 8010aec:	681b      	ldr	r3, [r3, #0]
 8010aee:	602a      	str	r2, [r5, #0]
 8010af0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8010af4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8010af8:	2301      	movs	r3, #1
 8010afa:	e0a3      	b.n	8010c44 <_printf_i+0x1f4>
 8010afc:	6820      	ldr	r0, [r4, #0]
 8010afe:	6829      	ldr	r1, [r5, #0]
 8010b00:	0606      	lsls	r6, r0, #24
 8010b02:	f101 0304 	add.w	r3, r1, #4
 8010b06:	d50a      	bpl.n	8010b1e <_printf_i+0xce>
 8010b08:	680e      	ldr	r6, [r1, #0]
 8010b0a:	602b      	str	r3, [r5, #0]
 8010b0c:	2e00      	cmp	r6, #0
 8010b0e:	da03      	bge.n	8010b18 <_printf_i+0xc8>
 8010b10:	232d      	movs	r3, #45	; 0x2d
 8010b12:	4276      	negs	r6, r6
 8010b14:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010b18:	485e      	ldr	r0, [pc, #376]	; (8010c94 <_printf_i+0x244>)
 8010b1a:	230a      	movs	r3, #10
 8010b1c:	e019      	b.n	8010b52 <_printf_i+0x102>
 8010b1e:	680e      	ldr	r6, [r1, #0]
 8010b20:	602b      	str	r3, [r5, #0]
 8010b22:	f010 0f40 	tst.w	r0, #64	; 0x40
 8010b26:	bf18      	it	ne
 8010b28:	b236      	sxthne	r6, r6
 8010b2a:	e7ef      	b.n	8010b0c <_printf_i+0xbc>
 8010b2c:	682b      	ldr	r3, [r5, #0]
 8010b2e:	6820      	ldr	r0, [r4, #0]
 8010b30:	1d19      	adds	r1, r3, #4
 8010b32:	6029      	str	r1, [r5, #0]
 8010b34:	0601      	lsls	r1, r0, #24
 8010b36:	d501      	bpl.n	8010b3c <_printf_i+0xec>
 8010b38:	681e      	ldr	r6, [r3, #0]
 8010b3a:	e002      	b.n	8010b42 <_printf_i+0xf2>
 8010b3c:	0646      	lsls	r6, r0, #25
 8010b3e:	d5fb      	bpl.n	8010b38 <_printf_i+0xe8>
 8010b40:	881e      	ldrh	r6, [r3, #0]
 8010b42:	4854      	ldr	r0, [pc, #336]	; (8010c94 <_printf_i+0x244>)
 8010b44:	2f6f      	cmp	r7, #111	; 0x6f
 8010b46:	bf0c      	ite	eq
 8010b48:	2308      	moveq	r3, #8
 8010b4a:	230a      	movne	r3, #10
 8010b4c:	2100      	movs	r1, #0
 8010b4e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8010b52:	6865      	ldr	r5, [r4, #4]
 8010b54:	60a5      	str	r5, [r4, #8]
 8010b56:	2d00      	cmp	r5, #0
 8010b58:	bfa2      	ittt	ge
 8010b5a:	6821      	ldrge	r1, [r4, #0]
 8010b5c:	f021 0104 	bicge.w	r1, r1, #4
 8010b60:	6021      	strge	r1, [r4, #0]
 8010b62:	b90e      	cbnz	r6, 8010b68 <_printf_i+0x118>
 8010b64:	2d00      	cmp	r5, #0
 8010b66:	d04d      	beq.n	8010c04 <_printf_i+0x1b4>
 8010b68:	4615      	mov	r5, r2
 8010b6a:	fbb6 f1f3 	udiv	r1, r6, r3
 8010b6e:	fb03 6711 	mls	r7, r3, r1, r6
 8010b72:	5dc7      	ldrb	r7, [r0, r7]
 8010b74:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8010b78:	4637      	mov	r7, r6
 8010b7a:	42bb      	cmp	r3, r7
 8010b7c:	460e      	mov	r6, r1
 8010b7e:	d9f4      	bls.n	8010b6a <_printf_i+0x11a>
 8010b80:	2b08      	cmp	r3, #8
 8010b82:	d10b      	bne.n	8010b9c <_printf_i+0x14c>
 8010b84:	6823      	ldr	r3, [r4, #0]
 8010b86:	07de      	lsls	r6, r3, #31
 8010b88:	d508      	bpl.n	8010b9c <_printf_i+0x14c>
 8010b8a:	6923      	ldr	r3, [r4, #16]
 8010b8c:	6861      	ldr	r1, [r4, #4]
 8010b8e:	4299      	cmp	r1, r3
 8010b90:	bfde      	ittt	le
 8010b92:	2330      	movle	r3, #48	; 0x30
 8010b94:	f805 3c01 	strble.w	r3, [r5, #-1]
 8010b98:	f105 35ff 	addle.w	r5, r5, #4294967295
 8010b9c:	1b52      	subs	r2, r2, r5
 8010b9e:	6122      	str	r2, [r4, #16]
 8010ba0:	f8cd a000 	str.w	sl, [sp]
 8010ba4:	464b      	mov	r3, r9
 8010ba6:	aa03      	add	r2, sp, #12
 8010ba8:	4621      	mov	r1, r4
 8010baa:	4640      	mov	r0, r8
 8010bac:	f7ff fee2 	bl	8010974 <_printf_common>
 8010bb0:	3001      	adds	r0, #1
 8010bb2:	d14c      	bne.n	8010c4e <_printf_i+0x1fe>
 8010bb4:	f04f 30ff 	mov.w	r0, #4294967295
 8010bb8:	b004      	add	sp, #16
 8010bba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010bbe:	4835      	ldr	r0, [pc, #212]	; (8010c94 <_printf_i+0x244>)
 8010bc0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8010bc4:	6829      	ldr	r1, [r5, #0]
 8010bc6:	6823      	ldr	r3, [r4, #0]
 8010bc8:	f851 6b04 	ldr.w	r6, [r1], #4
 8010bcc:	6029      	str	r1, [r5, #0]
 8010bce:	061d      	lsls	r5, r3, #24
 8010bd0:	d514      	bpl.n	8010bfc <_printf_i+0x1ac>
 8010bd2:	07df      	lsls	r7, r3, #31
 8010bd4:	bf44      	itt	mi
 8010bd6:	f043 0320 	orrmi.w	r3, r3, #32
 8010bda:	6023      	strmi	r3, [r4, #0]
 8010bdc:	b91e      	cbnz	r6, 8010be6 <_printf_i+0x196>
 8010bde:	6823      	ldr	r3, [r4, #0]
 8010be0:	f023 0320 	bic.w	r3, r3, #32
 8010be4:	6023      	str	r3, [r4, #0]
 8010be6:	2310      	movs	r3, #16
 8010be8:	e7b0      	b.n	8010b4c <_printf_i+0xfc>
 8010bea:	6823      	ldr	r3, [r4, #0]
 8010bec:	f043 0320 	orr.w	r3, r3, #32
 8010bf0:	6023      	str	r3, [r4, #0]
 8010bf2:	2378      	movs	r3, #120	; 0x78
 8010bf4:	4828      	ldr	r0, [pc, #160]	; (8010c98 <_printf_i+0x248>)
 8010bf6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8010bfa:	e7e3      	b.n	8010bc4 <_printf_i+0x174>
 8010bfc:	0659      	lsls	r1, r3, #25
 8010bfe:	bf48      	it	mi
 8010c00:	b2b6      	uxthmi	r6, r6
 8010c02:	e7e6      	b.n	8010bd2 <_printf_i+0x182>
 8010c04:	4615      	mov	r5, r2
 8010c06:	e7bb      	b.n	8010b80 <_printf_i+0x130>
 8010c08:	682b      	ldr	r3, [r5, #0]
 8010c0a:	6826      	ldr	r6, [r4, #0]
 8010c0c:	6961      	ldr	r1, [r4, #20]
 8010c0e:	1d18      	adds	r0, r3, #4
 8010c10:	6028      	str	r0, [r5, #0]
 8010c12:	0635      	lsls	r5, r6, #24
 8010c14:	681b      	ldr	r3, [r3, #0]
 8010c16:	d501      	bpl.n	8010c1c <_printf_i+0x1cc>
 8010c18:	6019      	str	r1, [r3, #0]
 8010c1a:	e002      	b.n	8010c22 <_printf_i+0x1d2>
 8010c1c:	0670      	lsls	r0, r6, #25
 8010c1e:	d5fb      	bpl.n	8010c18 <_printf_i+0x1c8>
 8010c20:	8019      	strh	r1, [r3, #0]
 8010c22:	2300      	movs	r3, #0
 8010c24:	6123      	str	r3, [r4, #16]
 8010c26:	4615      	mov	r5, r2
 8010c28:	e7ba      	b.n	8010ba0 <_printf_i+0x150>
 8010c2a:	682b      	ldr	r3, [r5, #0]
 8010c2c:	1d1a      	adds	r2, r3, #4
 8010c2e:	602a      	str	r2, [r5, #0]
 8010c30:	681d      	ldr	r5, [r3, #0]
 8010c32:	6862      	ldr	r2, [r4, #4]
 8010c34:	2100      	movs	r1, #0
 8010c36:	4628      	mov	r0, r5
 8010c38:	f7ef faf2 	bl	8000220 <memchr>
 8010c3c:	b108      	cbz	r0, 8010c42 <_printf_i+0x1f2>
 8010c3e:	1b40      	subs	r0, r0, r5
 8010c40:	6060      	str	r0, [r4, #4]
 8010c42:	6863      	ldr	r3, [r4, #4]
 8010c44:	6123      	str	r3, [r4, #16]
 8010c46:	2300      	movs	r3, #0
 8010c48:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010c4c:	e7a8      	b.n	8010ba0 <_printf_i+0x150>
 8010c4e:	6923      	ldr	r3, [r4, #16]
 8010c50:	462a      	mov	r2, r5
 8010c52:	4649      	mov	r1, r9
 8010c54:	4640      	mov	r0, r8
 8010c56:	47d0      	blx	sl
 8010c58:	3001      	adds	r0, #1
 8010c5a:	d0ab      	beq.n	8010bb4 <_printf_i+0x164>
 8010c5c:	6823      	ldr	r3, [r4, #0]
 8010c5e:	079b      	lsls	r3, r3, #30
 8010c60:	d413      	bmi.n	8010c8a <_printf_i+0x23a>
 8010c62:	68e0      	ldr	r0, [r4, #12]
 8010c64:	9b03      	ldr	r3, [sp, #12]
 8010c66:	4298      	cmp	r0, r3
 8010c68:	bfb8      	it	lt
 8010c6a:	4618      	movlt	r0, r3
 8010c6c:	e7a4      	b.n	8010bb8 <_printf_i+0x168>
 8010c6e:	2301      	movs	r3, #1
 8010c70:	4632      	mov	r2, r6
 8010c72:	4649      	mov	r1, r9
 8010c74:	4640      	mov	r0, r8
 8010c76:	47d0      	blx	sl
 8010c78:	3001      	adds	r0, #1
 8010c7a:	d09b      	beq.n	8010bb4 <_printf_i+0x164>
 8010c7c:	3501      	adds	r5, #1
 8010c7e:	68e3      	ldr	r3, [r4, #12]
 8010c80:	9903      	ldr	r1, [sp, #12]
 8010c82:	1a5b      	subs	r3, r3, r1
 8010c84:	42ab      	cmp	r3, r5
 8010c86:	dcf2      	bgt.n	8010c6e <_printf_i+0x21e>
 8010c88:	e7eb      	b.n	8010c62 <_printf_i+0x212>
 8010c8a:	2500      	movs	r5, #0
 8010c8c:	f104 0619 	add.w	r6, r4, #25
 8010c90:	e7f5      	b.n	8010c7e <_printf_i+0x22e>
 8010c92:	bf00      	nop
 8010c94:	0801496a 	.word	0x0801496a
 8010c98:	0801497b 	.word	0x0801497b

08010c9c <_sbrk_r>:
 8010c9c:	b538      	push	{r3, r4, r5, lr}
 8010c9e:	4d06      	ldr	r5, [pc, #24]	; (8010cb8 <_sbrk_r+0x1c>)
 8010ca0:	2300      	movs	r3, #0
 8010ca2:	4604      	mov	r4, r0
 8010ca4:	4608      	mov	r0, r1
 8010ca6:	602b      	str	r3, [r5, #0]
 8010ca8:	f7f2 fa06 	bl	80030b8 <_sbrk>
 8010cac:	1c43      	adds	r3, r0, #1
 8010cae:	d102      	bne.n	8010cb6 <_sbrk_r+0x1a>
 8010cb0:	682b      	ldr	r3, [r5, #0]
 8010cb2:	b103      	cbz	r3, 8010cb6 <_sbrk_r+0x1a>
 8010cb4:	6023      	str	r3, [r4, #0]
 8010cb6:	bd38      	pop	{r3, r4, r5, pc}
 8010cb8:	20002658 	.word	0x20002658

08010cbc <siprintf>:
 8010cbc:	b40e      	push	{r1, r2, r3}
 8010cbe:	b500      	push	{lr}
 8010cc0:	b09c      	sub	sp, #112	; 0x70
 8010cc2:	ab1d      	add	r3, sp, #116	; 0x74
 8010cc4:	9002      	str	r0, [sp, #8]
 8010cc6:	9006      	str	r0, [sp, #24]
 8010cc8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8010ccc:	4809      	ldr	r0, [pc, #36]	; (8010cf4 <siprintf+0x38>)
 8010cce:	9107      	str	r1, [sp, #28]
 8010cd0:	9104      	str	r1, [sp, #16]
 8010cd2:	4909      	ldr	r1, [pc, #36]	; (8010cf8 <siprintf+0x3c>)
 8010cd4:	f853 2b04 	ldr.w	r2, [r3], #4
 8010cd8:	9105      	str	r1, [sp, #20]
 8010cda:	6800      	ldr	r0, [r0, #0]
 8010cdc:	9301      	str	r3, [sp, #4]
 8010cde:	a902      	add	r1, sp, #8
 8010ce0:	f001 fa9a 	bl	8012218 <_svfiprintf_r>
 8010ce4:	9b02      	ldr	r3, [sp, #8]
 8010ce6:	2200      	movs	r2, #0
 8010ce8:	701a      	strb	r2, [r3, #0]
 8010cea:	b01c      	add	sp, #112	; 0x70
 8010cec:	f85d eb04 	ldr.w	lr, [sp], #4
 8010cf0:	b003      	add	sp, #12
 8010cf2:	4770      	bx	lr
 8010cf4:	20000208 	.word	0x20000208
 8010cf8:	ffff0208 	.word	0xffff0208

08010cfc <strcat>:
 8010cfc:	b510      	push	{r4, lr}
 8010cfe:	4602      	mov	r2, r0
 8010d00:	7814      	ldrb	r4, [r2, #0]
 8010d02:	4613      	mov	r3, r2
 8010d04:	3201      	adds	r2, #1
 8010d06:	2c00      	cmp	r4, #0
 8010d08:	d1fa      	bne.n	8010d00 <strcat+0x4>
 8010d0a:	3b01      	subs	r3, #1
 8010d0c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8010d10:	f803 2f01 	strb.w	r2, [r3, #1]!
 8010d14:	2a00      	cmp	r2, #0
 8010d16:	d1f9      	bne.n	8010d0c <strcat+0x10>
 8010d18:	bd10      	pop	{r4, pc}

08010d1a <quorem>:
 8010d1a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010d1e:	6903      	ldr	r3, [r0, #16]
 8010d20:	690c      	ldr	r4, [r1, #16]
 8010d22:	42a3      	cmp	r3, r4
 8010d24:	4607      	mov	r7, r0
 8010d26:	f2c0 8081 	blt.w	8010e2c <quorem+0x112>
 8010d2a:	3c01      	subs	r4, #1
 8010d2c:	f101 0814 	add.w	r8, r1, #20
 8010d30:	f100 0514 	add.w	r5, r0, #20
 8010d34:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8010d38:	9301      	str	r3, [sp, #4]
 8010d3a:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8010d3e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8010d42:	3301      	adds	r3, #1
 8010d44:	429a      	cmp	r2, r3
 8010d46:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8010d4a:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8010d4e:	fbb2 f6f3 	udiv	r6, r2, r3
 8010d52:	d331      	bcc.n	8010db8 <quorem+0x9e>
 8010d54:	f04f 0e00 	mov.w	lr, #0
 8010d58:	4640      	mov	r0, r8
 8010d5a:	46ac      	mov	ip, r5
 8010d5c:	46f2      	mov	sl, lr
 8010d5e:	f850 2b04 	ldr.w	r2, [r0], #4
 8010d62:	b293      	uxth	r3, r2
 8010d64:	fb06 e303 	mla	r3, r6, r3, lr
 8010d68:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8010d6c:	b29b      	uxth	r3, r3
 8010d6e:	ebaa 0303 	sub.w	r3, sl, r3
 8010d72:	f8dc a000 	ldr.w	sl, [ip]
 8010d76:	0c12      	lsrs	r2, r2, #16
 8010d78:	fa13 f38a 	uxtah	r3, r3, sl
 8010d7c:	fb06 e202 	mla	r2, r6, r2, lr
 8010d80:	9300      	str	r3, [sp, #0]
 8010d82:	9b00      	ldr	r3, [sp, #0]
 8010d84:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8010d88:	b292      	uxth	r2, r2
 8010d8a:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8010d8e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8010d92:	f8bd 3000 	ldrh.w	r3, [sp]
 8010d96:	4581      	cmp	r9, r0
 8010d98:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8010d9c:	f84c 3b04 	str.w	r3, [ip], #4
 8010da0:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8010da4:	d2db      	bcs.n	8010d5e <quorem+0x44>
 8010da6:	f855 300b 	ldr.w	r3, [r5, fp]
 8010daa:	b92b      	cbnz	r3, 8010db8 <quorem+0x9e>
 8010dac:	9b01      	ldr	r3, [sp, #4]
 8010dae:	3b04      	subs	r3, #4
 8010db0:	429d      	cmp	r5, r3
 8010db2:	461a      	mov	r2, r3
 8010db4:	d32e      	bcc.n	8010e14 <quorem+0xfa>
 8010db6:	613c      	str	r4, [r7, #16]
 8010db8:	4638      	mov	r0, r7
 8010dba:	f001 f8b9 	bl	8011f30 <__mcmp>
 8010dbe:	2800      	cmp	r0, #0
 8010dc0:	db24      	blt.n	8010e0c <quorem+0xf2>
 8010dc2:	3601      	adds	r6, #1
 8010dc4:	4628      	mov	r0, r5
 8010dc6:	f04f 0c00 	mov.w	ip, #0
 8010dca:	f858 2b04 	ldr.w	r2, [r8], #4
 8010dce:	f8d0 e000 	ldr.w	lr, [r0]
 8010dd2:	b293      	uxth	r3, r2
 8010dd4:	ebac 0303 	sub.w	r3, ip, r3
 8010dd8:	0c12      	lsrs	r2, r2, #16
 8010dda:	fa13 f38e 	uxtah	r3, r3, lr
 8010dde:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8010de2:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8010de6:	b29b      	uxth	r3, r3
 8010de8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8010dec:	45c1      	cmp	r9, r8
 8010dee:	f840 3b04 	str.w	r3, [r0], #4
 8010df2:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8010df6:	d2e8      	bcs.n	8010dca <quorem+0xb0>
 8010df8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8010dfc:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8010e00:	b922      	cbnz	r2, 8010e0c <quorem+0xf2>
 8010e02:	3b04      	subs	r3, #4
 8010e04:	429d      	cmp	r5, r3
 8010e06:	461a      	mov	r2, r3
 8010e08:	d30a      	bcc.n	8010e20 <quorem+0x106>
 8010e0a:	613c      	str	r4, [r7, #16]
 8010e0c:	4630      	mov	r0, r6
 8010e0e:	b003      	add	sp, #12
 8010e10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010e14:	6812      	ldr	r2, [r2, #0]
 8010e16:	3b04      	subs	r3, #4
 8010e18:	2a00      	cmp	r2, #0
 8010e1a:	d1cc      	bne.n	8010db6 <quorem+0x9c>
 8010e1c:	3c01      	subs	r4, #1
 8010e1e:	e7c7      	b.n	8010db0 <quorem+0x96>
 8010e20:	6812      	ldr	r2, [r2, #0]
 8010e22:	3b04      	subs	r3, #4
 8010e24:	2a00      	cmp	r2, #0
 8010e26:	d1f0      	bne.n	8010e0a <quorem+0xf0>
 8010e28:	3c01      	subs	r4, #1
 8010e2a:	e7eb      	b.n	8010e04 <quorem+0xea>
 8010e2c:	2000      	movs	r0, #0
 8010e2e:	e7ee      	b.n	8010e0e <quorem+0xf4>

08010e30 <_dtoa_r>:
 8010e30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010e34:	ed2d 8b04 	vpush	{d8-d9}
 8010e38:	ec57 6b10 	vmov	r6, r7, d0
 8010e3c:	b093      	sub	sp, #76	; 0x4c
 8010e3e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8010e40:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8010e44:	9106      	str	r1, [sp, #24]
 8010e46:	ee10 aa10 	vmov	sl, s0
 8010e4a:	4604      	mov	r4, r0
 8010e4c:	9209      	str	r2, [sp, #36]	; 0x24
 8010e4e:	930c      	str	r3, [sp, #48]	; 0x30
 8010e50:	46bb      	mov	fp, r7
 8010e52:	b975      	cbnz	r5, 8010e72 <_dtoa_r+0x42>
 8010e54:	2010      	movs	r0, #16
 8010e56:	f7ff f9b1 	bl	80101bc <malloc>
 8010e5a:	4602      	mov	r2, r0
 8010e5c:	6260      	str	r0, [r4, #36]	; 0x24
 8010e5e:	b920      	cbnz	r0, 8010e6a <_dtoa_r+0x3a>
 8010e60:	4ba7      	ldr	r3, [pc, #668]	; (8011100 <_dtoa_r+0x2d0>)
 8010e62:	21ea      	movs	r1, #234	; 0xea
 8010e64:	48a7      	ldr	r0, [pc, #668]	; (8011104 <_dtoa_r+0x2d4>)
 8010e66:	f001 fad7 	bl	8012418 <__assert_func>
 8010e6a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8010e6e:	6005      	str	r5, [r0, #0]
 8010e70:	60c5      	str	r5, [r0, #12]
 8010e72:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010e74:	6819      	ldr	r1, [r3, #0]
 8010e76:	b151      	cbz	r1, 8010e8e <_dtoa_r+0x5e>
 8010e78:	685a      	ldr	r2, [r3, #4]
 8010e7a:	604a      	str	r2, [r1, #4]
 8010e7c:	2301      	movs	r3, #1
 8010e7e:	4093      	lsls	r3, r2
 8010e80:	608b      	str	r3, [r1, #8]
 8010e82:	4620      	mov	r0, r4
 8010e84:	f000 fe12 	bl	8011aac <_Bfree>
 8010e88:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010e8a:	2200      	movs	r2, #0
 8010e8c:	601a      	str	r2, [r3, #0]
 8010e8e:	1e3b      	subs	r3, r7, #0
 8010e90:	bfaa      	itet	ge
 8010e92:	2300      	movge	r3, #0
 8010e94:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8010e98:	f8c8 3000 	strge.w	r3, [r8]
 8010e9c:	4b9a      	ldr	r3, [pc, #616]	; (8011108 <_dtoa_r+0x2d8>)
 8010e9e:	bfbc      	itt	lt
 8010ea0:	2201      	movlt	r2, #1
 8010ea2:	f8c8 2000 	strlt.w	r2, [r8]
 8010ea6:	ea33 030b 	bics.w	r3, r3, fp
 8010eaa:	d11b      	bne.n	8010ee4 <_dtoa_r+0xb4>
 8010eac:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8010eae:	f242 730f 	movw	r3, #9999	; 0x270f
 8010eb2:	6013      	str	r3, [r2, #0]
 8010eb4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8010eb8:	4333      	orrs	r3, r6
 8010eba:	f000 8592 	beq.w	80119e2 <_dtoa_r+0xbb2>
 8010ebe:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8010ec0:	b963      	cbnz	r3, 8010edc <_dtoa_r+0xac>
 8010ec2:	4b92      	ldr	r3, [pc, #584]	; (801110c <_dtoa_r+0x2dc>)
 8010ec4:	e022      	b.n	8010f0c <_dtoa_r+0xdc>
 8010ec6:	4b92      	ldr	r3, [pc, #584]	; (8011110 <_dtoa_r+0x2e0>)
 8010ec8:	9301      	str	r3, [sp, #4]
 8010eca:	3308      	adds	r3, #8
 8010ecc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8010ece:	6013      	str	r3, [r2, #0]
 8010ed0:	9801      	ldr	r0, [sp, #4]
 8010ed2:	b013      	add	sp, #76	; 0x4c
 8010ed4:	ecbd 8b04 	vpop	{d8-d9}
 8010ed8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010edc:	4b8b      	ldr	r3, [pc, #556]	; (801110c <_dtoa_r+0x2dc>)
 8010ede:	9301      	str	r3, [sp, #4]
 8010ee0:	3303      	adds	r3, #3
 8010ee2:	e7f3      	b.n	8010ecc <_dtoa_r+0x9c>
 8010ee4:	2200      	movs	r2, #0
 8010ee6:	2300      	movs	r3, #0
 8010ee8:	4650      	mov	r0, sl
 8010eea:	4659      	mov	r1, fp
 8010eec:	f7ef fe0c 	bl	8000b08 <__aeabi_dcmpeq>
 8010ef0:	ec4b ab19 	vmov	d9, sl, fp
 8010ef4:	4680      	mov	r8, r0
 8010ef6:	b158      	cbz	r0, 8010f10 <_dtoa_r+0xe0>
 8010ef8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8010efa:	2301      	movs	r3, #1
 8010efc:	6013      	str	r3, [r2, #0]
 8010efe:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8010f00:	2b00      	cmp	r3, #0
 8010f02:	f000 856b 	beq.w	80119dc <_dtoa_r+0xbac>
 8010f06:	4883      	ldr	r0, [pc, #524]	; (8011114 <_dtoa_r+0x2e4>)
 8010f08:	6018      	str	r0, [r3, #0]
 8010f0a:	1e43      	subs	r3, r0, #1
 8010f0c:	9301      	str	r3, [sp, #4]
 8010f0e:	e7df      	b.n	8010ed0 <_dtoa_r+0xa0>
 8010f10:	ec4b ab10 	vmov	d0, sl, fp
 8010f14:	aa10      	add	r2, sp, #64	; 0x40
 8010f16:	a911      	add	r1, sp, #68	; 0x44
 8010f18:	4620      	mov	r0, r4
 8010f1a:	f001 f8af 	bl	801207c <__d2b>
 8010f1e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8010f22:	ee08 0a10 	vmov	s16, r0
 8010f26:	2d00      	cmp	r5, #0
 8010f28:	f000 8084 	beq.w	8011034 <_dtoa_r+0x204>
 8010f2c:	ee19 3a90 	vmov	r3, s19
 8010f30:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8010f34:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8010f38:	4656      	mov	r6, sl
 8010f3a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8010f3e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8010f42:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8010f46:	4b74      	ldr	r3, [pc, #464]	; (8011118 <_dtoa_r+0x2e8>)
 8010f48:	2200      	movs	r2, #0
 8010f4a:	4630      	mov	r0, r6
 8010f4c:	4639      	mov	r1, r7
 8010f4e:	f7ef f9bb 	bl	80002c8 <__aeabi_dsub>
 8010f52:	a365      	add	r3, pc, #404	; (adr r3, 80110e8 <_dtoa_r+0x2b8>)
 8010f54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010f58:	f7ef fb6e 	bl	8000638 <__aeabi_dmul>
 8010f5c:	a364      	add	r3, pc, #400	; (adr r3, 80110f0 <_dtoa_r+0x2c0>)
 8010f5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010f62:	f7ef f9b3 	bl	80002cc <__adddf3>
 8010f66:	4606      	mov	r6, r0
 8010f68:	4628      	mov	r0, r5
 8010f6a:	460f      	mov	r7, r1
 8010f6c:	f7ef fafa 	bl	8000564 <__aeabi_i2d>
 8010f70:	a361      	add	r3, pc, #388	; (adr r3, 80110f8 <_dtoa_r+0x2c8>)
 8010f72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010f76:	f7ef fb5f 	bl	8000638 <__aeabi_dmul>
 8010f7a:	4602      	mov	r2, r0
 8010f7c:	460b      	mov	r3, r1
 8010f7e:	4630      	mov	r0, r6
 8010f80:	4639      	mov	r1, r7
 8010f82:	f7ef f9a3 	bl	80002cc <__adddf3>
 8010f86:	4606      	mov	r6, r0
 8010f88:	460f      	mov	r7, r1
 8010f8a:	f7ef fe05 	bl	8000b98 <__aeabi_d2iz>
 8010f8e:	2200      	movs	r2, #0
 8010f90:	9000      	str	r0, [sp, #0]
 8010f92:	2300      	movs	r3, #0
 8010f94:	4630      	mov	r0, r6
 8010f96:	4639      	mov	r1, r7
 8010f98:	f7ef fdc0 	bl	8000b1c <__aeabi_dcmplt>
 8010f9c:	b150      	cbz	r0, 8010fb4 <_dtoa_r+0x184>
 8010f9e:	9800      	ldr	r0, [sp, #0]
 8010fa0:	f7ef fae0 	bl	8000564 <__aeabi_i2d>
 8010fa4:	4632      	mov	r2, r6
 8010fa6:	463b      	mov	r3, r7
 8010fa8:	f7ef fdae 	bl	8000b08 <__aeabi_dcmpeq>
 8010fac:	b910      	cbnz	r0, 8010fb4 <_dtoa_r+0x184>
 8010fae:	9b00      	ldr	r3, [sp, #0]
 8010fb0:	3b01      	subs	r3, #1
 8010fb2:	9300      	str	r3, [sp, #0]
 8010fb4:	9b00      	ldr	r3, [sp, #0]
 8010fb6:	2b16      	cmp	r3, #22
 8010fb8:	d85a      	bhi.n	8011070 <_dtoa_r+0x240>
 8010fba:	9a00      	ldr	r2, [sp, #0]
 8010fbc:	4b57      	ldr	r3, [pc, #348]	; (801111c <_dtoa_r+0x2ec>)
 8010fbe:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8010fc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010fc6:	ec51 0b19 	vmov	r0, r1, d9
 8010fca:	f7ef fda7 	bl	8000b1c <__aeabi_dcmplt>
 8010fce:	2800      	cmp	r0, #0
 8010fd0:	d050      	beq.n	8011074 <_dtoa_r+0x244>
 8010fd2:	9b00      	ldr	r3, [sp, #0]
 8010fd4:	3b01      	subs	r3, #1
 8010fd6:	9300      	str	r3, [sp, #0]
 8010fd8:	2300      	movs	r3, #0
 8010fda:	930b      	str	r3, [sp, #44]	; 0x2c
 8010fdc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8010fde:	1b5d      	subs	r5, r3, r5
 8010fe0:	1e6b      	subs	r3, r5, #1
 8010fe2:	9305      	str	r3, [sp, #20]
 8010fe4:	bf45      	ittet	mi
 8010fe6:	f1c5 0301 	rsbmi	r3, r5, #1
 8010fea:	9304      	strmi	r3, [sp, #16]
 8010fec:	2300      	movpl	r3, #0
 8010fee:	2300      	movmi	r3, #0
 8010ff0:	bf4c      	ite	mi
 8010ff2:	9305      	strmi	r3, [sp, #20]
 8010ff4:	9304      	strpl	r3, [sp, #16]
 8010ff6:	9b00      	ldr	r3, [sp, #0]
 8010ff8:	2b00      	cmp	r3, #0
 8010ffa:	db3d      	blt.n	8011078 <_dtoa_r+0x248>
 8010ffc:	9b05      	ldr	r3, [sp, #20]
 8010ffe:	9a00      	ldr	r2, [sp, #0]
 8011000:	920a      	str	r2, [sp, #40]	; 0x28
 8011002:	4413      	add	r3, r2
 8011004:	9305      	str	r3, [sp, #20]
 8011006:	2300      	movs	r3, #0
 8011008:	9307      	str	r3, [sp, #28]
 801100a:	9b06      	ldr	r3, [sp, #24]
 801100c:	2b09      	cmp	r3, #9
 801100e:	f200 8089 	bhi.w	8011124 <_dtoa_r+0x2f4>
 8011012:	2b05      	cmp	r3, #5
 8011014:	bfc4      	itt	gt
 8011016:	3b04      	subgt	r3, #4
 8011018:	9306      	strgt	r3, [sp, #24]
 801101a:	9b06      	ldr	r3, [sp, #24]
 801101c:	f1a3 0302 	sub.w	r3, r3, #2
 8011020:	bfcc      	ite	gt
 8011022:	2500      	movgt	r5, #0
 8011024:	2501      	movle	r5, #1
 8011026:	2b03      	cmp	r3, #3
 8011028:	f200 8087 	bhi.w	801113a <_dtoa_r+0x30a>
 801102c:	e8df f003 	tbb	[pc, r3]
 8011030:	59383a2d 	.word	0x59383a2d
 8011034:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8011038:	441d      	add	r5, r3
 801103a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 801103e:	2b20      	cmp	r3, #32
 8011040:	bfc1      	itttt	gt
 8011042:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8011046:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 801104a:	fa0b f303 	lslgt.w	r3, fp, r3
 801104e:	fa26 f000 	lsrgt.w	r0, r6, r0
 8011052:	bfda      	itte	le
 8011054:	f1c3 0320 	rsble	r3, r3, #32
 8011058:	fa06 f003 	lslle.w	r0, r6, r3
 801105c:	4318      	orrgt	r0, r3
 801105e:	f7ef fa71 	bl	8000544 <__aeabi_ui2d>
 8011062:	2301      	movs	r3, #1
 8011064:	4606      	mov	r6, r0
 8011066:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 801106a:	3d01      	subs	r5, #1
 801106c:	930e      	str	r3, [sp, #56]	; 0x38
 801106e:	e76a      	b.n	8010f46 <_dtoa_r+0x116>
 8011070:	2301      	movs	r3, #1
 8011072:	e7b2      	b.n	8010fda <_dtoa_r+0x1aa>
 8011074:	900b      	str	r0, [sp, #44]	; 0x2c
 8011076:	e7b1      	b.n	8010fdc <_dtoa_r+0x1ac>
 8011078:	9b04      	ldr	r3, [sp, #16]
 801107a:	9a00      	ldr	r2, [sp, #0]
 801107c:	1a9b      	subs	r3, r3, r2
 801107e:	9304      	str	r3, [sp, #16]
 8011080:	4253      	negs	r3, r2
 8011082:	9307      	str	r3, [sp, #28]
 8011084:	2300      	movs	r3, #0
 8011086:	930a      	str	r3, [sp, #40]	; 0x28
 8011088:	e7bf      	b.n	801100a <_dtoa_r+0x1da>
 801108a:	2300      	movs	r3, #0
 801108c:	9308      	str	r3, [sp, #32]
 801108e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011090:	2b00      	cmp	r3, #0
 8011092:	dc55      	bgt.n	8011140 <_dtoa_r+0x310>
 8011094:	2301      	movs	r3, #1
 8011096:	e9cd 3302 	strd	r3, r3, [sp, #8]
 801109a:	461a      	mov	r2, r3
 801109c:	9209      	str	r2, [sp, #36]	; 0x24
 801109e:	e00c      	b.n	80110ba <_dtoa_r+0x28a>
 80110a0:	2301      	movs	r3, #1
 80110a2:	e7f3      	b.n	801108c <_dtoa_r+0x25c>
 80110a4:	2300      	movs	r3, #0
 80110a6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80110a8:	9308      	str	r3, [sp, #32]
 80110aa:	9b00      	ldr	r3, [sp, #0]
 80110ac:	4413      	add	r3, r2
 80110ae:	9302      	str	r3, [sp, #8]
 80110b0:	3301      	adds	r3, #1
 80110b2:	2b01      	cmp	r3, #1
 80110b4:	9303      	str	r3, [sp, #12]
 80110b6:	bfb8      	it	lt
 80110b8:	2301      	movlt	r3, #1
 80110ba:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80110bc:	2200      	movs	r2, #0
 80110be:	6042      	str	r2, [r0, #4]
 80110c0:	2204      	movs	r2, #4
 80110c2:	f102 0614 	add.w	r6, r2, #20
 80110c6:	429e      	cmp	r6, r3
 80110c8:	6841      	ldr	r1, [r0, #4]
 80110ca:	d93d      	bls.n	8011148 <_dtoa_r+0x318>
 80110cc:	4620      	mov	r0, r4
 80110ce:	f000 fcad 	bl	8011a2c <_Balloc>
 80110d2:	9001      	str	r0, [sp, #4]
 80110d4:	2800      	cmp	r0, #0
 80110d6:	d13b      	bne.n	8011150 <_dtoa_r+0x320>
 80110d8:	4b11      	ldr	r3, [pc, #68]	; (8011120 <_dtoa_r+0x2f0>)
 80110da:	4602      	mov	r2, r0
 80110dc:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80110e0:	e6c0      	b.n	8010e64 <_dtoa_r+0x34>
 80110e2:	2301      	movs	r3, #1
 80110e4:	e7df      	b.n	80110a6 <_dtoa_r+0x276>
 80110e6:	bf00      	nop
 80110e8:	636f4361 	.word	0x636f4361
 80110ec:	3fd287a7 	.word	0x3fd287a7
 80110f0:	8b60c8b3 	.word	0x8b60c8b3
 80110f4:	3fc68a28 	.word	0x3fc68a28
 80110f8:	509f79fb 	.word	0x509f79fb
 80110fc:	3fd34413 	.word	0x3fd34413
 8011100:	08014999 	.word	0x08014999
 8011104:	080149b0 	.word	0x080149b0
 8011108:	7ff00000 	.word	0x7ff00000
 801110c:	08014995 	.word	0x08014995
 8011110:	0801498c 	.word	0x0801498c
 8011114:	08014969 	.word	0x08014969
 8011118:	3ff80000 	.word	0x3ff80000
 801111c:	08014aa0 	.word	0x08014aa0
 8011120:	08014a0b 	.word	0x08014a0b
 8011124:	2501      	movs	r5, #1
 8011126:	2300      	movs	r3, #0
 8011128:	9306      	str	r3, [sp, #24]
 801112a:	9508      	str	r5, [sp, #32]
 801112c:	f04f 33ff 	mov.w	r3, #4294967295
 8011130:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8011134:	2200      	movs	r2, #0
 8011136:	2312      	movs	r3, #18
 8011138:	e7b0      	b.n	801109c <_dtoa_r+0x26c>
 801113a:	2301      	movs	r3, #1
 801113c:	9308      	str	r3, [sp, #32]
 801113e:	e7f5      	b.n	801112c <_dtoa_r+0x2fc>
 8011140:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011142:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8011146:	e7b8      	b.n	80110ba <_dtoa_r+0x28a>
 8011148:	3101      	adds	r1, #1
 801114a:	6041      	str	r1, [r0, #4]
 801114c:	0052      	lsls	r2, r2, #1
 801114e:	e7b8      	b.n	80110c2 <_dtoa_r+0x292>
 8011150:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8011152:	9a01      	ldr	r2, [sp, #4]
 8011154:	601a      	str	r2, [r3, #0]
 8011156:	9b03      	ldr	r3, [sp, #12]
 8011158:	2b0e      	cmp	r3, #14
 801115a:	f200 809d 	bhi.w	8011298 <_dtoa_r+0x468>
 801115e:	2d00      	cmp	r5, #0
 8011160:	f000 809a 	beq.w	8011298 <_dtoa_r+0x468>
 8011164:	9b00      	ldr	r3, [sp, #0]
 8011166:	2b00      	cmp	r3, #0
 8011168:	dd32      	ble.n	80111d0 <_dtoa_r+0x3a0>
 801116a:	4ab7      	ldr	r2, [pc, #732]	; (8011448 <_dtoa_r+0x618>)
 801116c:	f003 030f 	and.w	r3, r3, #15
 8011170:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8011174:	e9d3 8900 	ldrd	r8, r9, [r3]
 8011178:	9b00      	ldr	r3, [sp, #0]
 801117a:	05d8      	lsls	r0, r3, #23
 801117c:	ea4f 1723 	mov.w	r7, r3, asr #4
 8011180:	d516      	bpl.n	80111b0 <_dtoa_r+0x380>
 8011182:	4bb2      	ldr	r3, [pc, #712]	; (801144c <_dtoa_r+0x61c>)
 8011184:	ec51 0b19 	vmov	r0, r1, d9
 8011188:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 801118c:	f7ef fb7e 	bl	800088c <__aeabi_ddiv>
 8011190:	f007 070f 	and.w	r7, r7, #15
 8011194:	4682      	mov	sl, r0
 8011196:	468b      	mov	fp, r1
 8011198:	2503      	movs	r5, #3
 801119a:	4eac      	ldr	r6, [pc, #688]	; (801144c <_dtoa_r+0x61c>)
 801119c:	b957      	cbnz	r7, 80111b4 <_dtoa_r+0x384>
 801119e:	4642      	mov	r2, r8
 80111a0:	464b      	mov	r3, r9
 80111a2:	4650      	mov	r0, sl
 80111a4:	4659      	mov	r1, fp
 80111a6:	f7ef fb71 	bl	800088c <__aeabi_ddiv>
 80111aa:	4682      	mov	sl, r0
 80111ac:	468b      	mov	fp, r1
 80111ae:	e028      	b.n	8011202 <_dtoa_r+0x3d2>
 80111b0:	2502      	movs	r5, #2
 80111b2:	e7f2      	b.n	801119a <_dtoa_r+0x36a>
 80111b4:	07f9      	lsls	r1, r7, #31
 80111b6:	d508      	bpl.n	80111ca <_dtoa_r+0x39a>
 80111b8:	4640      	mov	r0, r8
 80111ba:	4649      	mov	r1, r9
 80111bc:	e9d6 2300 	ldrd	r2, r3, [r6]
 80111c0:	f7ef fa3a 	bl	8000638 <__aeabi_dmul>
 80111c4:	3501      	adds	r5, #1
 80111c6:	4680      	mov	r8, r0
 80111c8:	4689      	mov	r9, r1
 80111ca:	107f      	asrs	r7, r7, #1
 80111cc:	3608      	adds	r6, #8
 80111ce:	e7e5      	b.n	801119c <_dtoa_r+0x36c>
 80111d0:	f000 809b 	beq.w	801130a <_dtoa_r+0x4da>
 80111d4:	9b00      	ldr	r3, [sp, #0]
 80111d6:	4f9d      	ldr	r7, [pc, #628]	; (801144c <_dtoa_r+0x61c>)
 80111d8:	425e      	negs	r6, r3
 80111da:	4b9b      	ldr	r3, [pc, #620]	; (8011448 <_dtoa_r+0x618>)
 80111dc:	f006 020f 	and.w	r2, r6, #15
 80111e0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80111e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80111e8:	ec51 0b19 	vmov	r0, r1, d9
 80111ec:	f7ef fa24 	bl	8000638 <__aeabi_dmul>
 80111f0:	1136      	asrs	r6, r6, #4
 80111f2:	4682      	mov	sl, r0
 80111f4:	468b      	mov	fp, r1
 80111f6:	2300      	movs	r3, #0
 80111f8:	2502      	movs	r5, #2
 80111fa:	2e00      	cmp	r6, #0
 80111fc:	d17a      	bne.n	80112f4 <_dtoa_r+0x4c4>
 80111fe:	2b00      	cmp	r3, #0
 8011200:	d1d3      	bne.n	80111aa <_dtoa_r+0x37a>
 8011202:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011204:	2b00      	cmp	r3, #0
 8011206:	f000 8082 	beq.w	801130e <_dtoa_r+0x4de>
 801120a:	4b91      	ldr	r3, [pc, #580]	; (8011450 <_dtoa_r+0x620>)
 801120c:	2200      	movs	r2, #0
 801120e:	4650      	mov	r0, sl
 8011210:	4659      	mov	r1, fp
 8011212:	f7ef fc83 	bl	8000b1c <__aeabi_dcmplt>
 8011216:	2800      	cmp	r0, #0
 8011218:	d079      	beq.n	801130e <_dtoa_r+0x4de>
 801121a:	9b03      	ldr	r3, [sp, #12]
 801121c:	2b00      	cmp	r3, #0
 801121e:	d076      	beq.n	801130e <_dtoa_r+0x4de>
 8011220:	9b02      	ldr	r3, [sp, #8]
 8011222:	2b00      	cmp	r3, #0
 8011224:	dd36      	ble.n	8011294 <_dtoa_r+0x464>
 8011226:	9b00      	ldr	r3, [sp, #0]
 8011228:	4650      	mov	r0, sl
 801122a:	4659      	mov	r1, fp
 801122c:	1e5f      	subs	r7, r3, #1
 801122e:	2200      	movs	r2, #0
 8011230:	4b88      	ldr	r3, [pc, #544]	; (8011454 <_dtoa_r+0x624>)
 8011232:	f7ef fa01 	bl	8000638 <__aeabi_dmul>
 8011236:	9e02      	ldr	r6, [sp, #8]
 8011238:	4682      	mov	sl, r0
 801123a:	468b      	mov	fp, r1
 801123c:	3501      	adds	r5, #1
 801123e:	4628      	mov	r0, r5
 8011240:	f7ef f990 	bl	8000564 <__aeabi_i2d>
 8011244:	4652      	mov	r2, sl
 8011246:	465b      	mov	r3, fp
 8011248:	f7ef f9f6 	bl	8000638 <__aeabi_dmul>
 801124c:	4b82      	ldr	r3, [pc, #520]	; (8011458 <_dtoa_r+0x628>)
 801124e:	2200      	movs	r2, #0
 8011250:	f7ef f83c 	bl	80002cc <__adddf3>
 8011254:	46d0      	mov	r8, sl
 8011256:	46d9      	mov	r9, fp
 8011258:	4682      	mov	sl, r0
 801125a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 801125e:	2e00      	cmp	r6, #0
 8011260:	d158      	bne.n	8011314 <_dtoa_r+0x4e4>
 8011262:	4b7e      	ldr	r3, [pc, #504]	; (801145c <_dtoa_r+0x62c>)
 8011264:	2200      	movs	r2, #0
 8011266:	4640      	mov	r0, r8
 8011268:	4649      	mov	r1, r9
 801126a:	f7ef f82d 	bl	80002c8 <__aeabi_dsub>
 801126e:	4652      	mov	r2, sl
 8011270:	465b      	mov	r3, fp
 8011272:	4680      	mov	r8, r0
 8011274:	4689      	mov	r9, r1
 8011276:	f7ef fc6f 	bl	8000b58 <__aeabi_dcmpgt>
 801127a:	2800      	cmp	r0, #0
 801127c:	f040 8295 	bne.w	80117aa <_dtoa_r+0x97a>
 8011280:	4652      	mov	r2, sl
 8011282:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8011286:	4640      	mov	r0, r8
 8011288:	4649      	mov	r1, r9
 801128a:	f7ef fc47 	bl	8000b1c <__aeabi_dcmplt>
 801128e:	2800      	cmp	r0, #0
 8011290:	f040 8289 	bne.w	80117a6 <_dtoa_r+0x976>
 8011294:	ec5b ab19 	vmov	sl, fp, d9
 8011298:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801129a:	2b00      	cmp	r3, #0
 801129c:	f2c0 8148 	blt.w	8011530 <_dtoa_r+0x700>
 80112a0:	9a00      	ldr	r2, [sp, #0]
 80112a2:	2a0e      	cmp	r2, #14
 80112a4:	f300 8144 	bgt.w	8011530 <_dtoa_r+0x700>
 80112a8:	4b67      	ldr	r3, [pc, #412]	; (8011448 <_dtoa_r+0x618>)
 80112aa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80112ae:	e9d3 8900 	ldrd	r8, r9, [r3]
 80112b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80112b4:	2b00      	cmp	r3, #0
 80112b6:	f280 80d5 	bge.w	8011464 <_dtoa_r+0x634>
 80112ba:	9b03      	ldr	r3, [sp, #12]
 80112bc:	2b00      	cmp	r3, #0
 80112be:	f300 80d1 	bgt.w	8011464 <_dtoa_r+0x634>
 80112c2:	f040 826f 	bne.w	80117a4 <_dtoa_r+0x974>
 80112c6:	4b65      	ldr	r3, [pc, #404]	; (801145c <_dtoa_r+0x62c>)
 80112c8:	2200      	movs	r2, #0
 80112ca:	4640      	mov	r0, r8
 80112cc:	4649      	mov	r1, r9
 80112ce:	f7ef f9b3 	bl	8000638 <__aeabi_dmul>
 80112d2:	4652      	mov	r2, sl
 80112d4:	465b      	mov	r3, fp
 80112d6:	f7ef fc35 	bl	8000b44 <__aeabi_dcmpge>
 80112da:	9e03      	ldr	r6, [sp, #12]
 80112dc:	4637      	mov	r7, r6
 80112de:	2800      	cmp	r0, #0
 80112e0:	f040 8245 	bne.w	801176e <_dtoa_r+0x93e>
 80112e4:	9d01      	ldr	r5, [sp, #4]
 80112e6:	2331      	movs	r3, #49	; 0x31
 80112e8:	f805 3b01 	strb.w	r3, [r5], #1
 80112ec:	9b00      	ldr	r3, [sp, #0]
 80112ee:	3301      	adds	r3, #1
 80112f0:	9300      	str	r3, [sp, #0]
 80112f2:	e240      	b.n	8011776 <_dtoa_r+0x946>
 80112f4:	07f2      	lsls	r2, r6, #31
 80112f6:	d505      	bpl.n	8011304 <_dtoa_r+0x4d4>
 80112f8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80112fc:	f7ef f99c 	bl	8000638 <__aeabi_dmul>
 8011300:	3501      	adds	r5, #1
 8011302:	2301      	movs	r3, #1
 8011304:	1076      	asrs	r6, r6, #1
 8011306:	3708      	adds	r7, #8
 8011308:	e777      	b.n	80111fa <_dtoa_r+0x3ca>
 801130a:	2502      	movs	r5, #2
 801130c:	e779      	b.n	8011202 <_dtoa_r+0x3d2>
 801130e:	9f00      	ldr	r7, [sp, #0]
 8011310:	9e03      	ldr	r6, [sp, #12]
 8011312:	e794      	b.n	801123e <_dtoa_r+0x40e>
 8011314:	9901      	ldr	r1, [sp, #4]
 8011316:	4b4c      	ldr	r3, [pc, #304]	; (8011448 <_dtoa_r+0x618>)
 8011318:	4431      	add	r1, r6
 801131a:	910d      	str	r1, [sp, #52]	; 0x34
 801131c:	9908      	ldr	r1, [sp, #32]
 801131e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8011322:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8011326:	2900      	cmp	r1, #0
 8011328:	d043      	beq.n	80113b2 <_dtoa_r+0x582>
 801132a:	494d      	ldr	r1, [pc, #308]	; (8011460 <_dtoa_r+0x630>)
 801132c:	2000      	movs	r0, #0
 801132e:	f7ef faad 	bl	800088c <__aeabi_ddiv>
 8011332:	4652      	mov	r2, sl
 8011334:	465b      	mov	r3, fp
 8011336:	f7ee ffc7 	bl	80002c8 <__aeabi_dsub>
 801133a:	9d01      	ldr	r5, [sp, #4]
 801133c:	4682      	mov	sl, r0
 801133e:	468b      	mov	fp, r1
 8011340:	4649      	mov	r1, r9
 8011342:	4640      	mov	r0, r8
 8011344:	f7ef fc28 	bl	8000b98 <__aeabi_d2iz>
 8011348:	4606      	mov	r6, r0
 801134a:	f7ef f90b 	bl	8000564 <__aeabi_i2d>
 801134e:	4602      	mov	r2, r0
 8011350:	460b      	mov	r3, r1
 8011352:	4640      	mov	r0, r8
 8011354:	4649      	mov	r1, r9
 8011356:	f7ee ffb7 	bl	80002c8 <__aeabi_dsub>
 801135a:	3630      	adds	r6, #48	; 0x30
 801135c:	f805 6b01 	strb.w	r6, [r5], #1
 8011360:	4652      	mov	r2, sl
 8011362:	465b      	mov	r3, fp
 8011364:	4680      	mov	r8, r0
 8011366:	4689      	mov	r9, r1
 8011368:	f7ef fbd8 	bl	8000b1c <__aeabi_dcmplt>
 801136c:	2800      	cmp	r0, #0
 801136e:	d163      	bne.n	8011438 <_dtoa_r+0x608>
 8011370:	4642      	mov	r2, r8
 8011372:	464b      	mov	r3, r9
 8011374:	4936      	ldr	r1, [pc, #216]	; (8011450 <_dtoa_r+0x620>)
 8011376:	2000      	movs	r0, #0
 8011378:	f7ee ffa6 	bl	80002c8 <__aeabi_dsub>
 801137c:	4652      	mov	r2, sl
 801137e:	465b      	mov	r3, fp
 8011380:	f7ef fbcc 	bl	8000b1c <__aeabi_dcmplt>
 8011384:	2800      	cmp	r0, #0
 8011386:	f040 80b5 	bne.w	80114f4 <_dtoa_r+0x6c4>
 801138a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801138c:	429d      	cmp	r5, r3
 801138e:	d081      	beq.n	8011294 <_dtoa_r+0x464>
 8011390:	4b30      	ldr	r3, [pc, #192]	; (8011454 <_dtoa_r+0x624>)
 8011392:	2200      	movs	r2, #0
 8011394:	4650      	mov	r0, sl
 8011396:	4659      	mov	r1, fp
 8011398:	f7ef f94e 	bl	8000638 <__aeabi_dmul>
 801139c:	4b2d      	ldr	r3, [pc, #180]	; (8011454 <_dtoa_r+0x624>)
 801139e:	4682      	mov	sl, r0
 80113a0:	468b      	mov	fp, r1
 80113a2:	4640      	mov	r0, r8
 80113a4:	4649      	mov	r1, r9
 80113a6:	2200      	movs	r2, #0
 80113a8:	f7ef f946 	bl	8000638 <__aeabi_dmul>
 80113ac:	4680      	mov	r8, r0
 80113ae:	4689      	mov	r9, r1
 80113b0:	e7c6      	b.n	8011340 <_dtoa_r+0x510>
 80113b2:	4650      	mov	r0, sl
 80113b4:	4659      	mov	r1, fp
 80113b6:	f7ef f93f 	bl	8000638 <__aeabi_dmul>
 80113ba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80113bc:	9d01      	ldr	r5, [sp, #4]
 80113be:	930f      	str	r3, [sp, #60]	; 0x3c
 80113c0:	4682      	mov	sl, r0
 80113c2:	468b      	mov	fp, r1
 80113c4:	4649      	mov	r1, r9
 80113c6:	4640      	mov	r0, r8
 80113c8:	f7ef fbe6 	bl	8000b98 <__aeabi_d2iz>
 80113cc:	4606      	mov	r6, r0
 80113ce:	f7ef f8c9 	bl	8000564 <__aeabi_i2d>
 80113d2:	3630      	adds	r6, #48	; 0x30
 80113d4:	4602      	mov	r2, r0
 80113d6:	460b      	mov	r3, r1
 80113d8:	4640      	mov	r0, r8
 80113da:	4649      	mov	r1, r9
 80113dc:	f7ee ff74 	bl	80002c8 <__aeabi_dsub>
 80113e0:	f805 6b01 	strb.w	r6, [r5], #1
 80113e4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80113e6:	429d      	cmp	r5, r3
 80113e8:	4680      	mov	r8, r0
 80113ea:	4689      	mov	r9, r1
 80113ec:	f04f 0200 	mov.w	r2, #0
 80113f0:	d124      	bne.n	801143c <_dtoa_r+0x60c>
 80113f2:	4b1b      	ldr	r3, [pc, #108]	; (8011460 <_dtoa_r+0x630>)
 80113f4:	4650      	mov	r0, sl
 80113f6:	4659      	mov	r1, fp
 80113f8:	f7ee ff68 	bl	80002cc <__adddf3>
 80113fc:	4602      	mov	r2, r0
 80113fe:	460b      	mov	r3, r1
 8011400:	4640      	mov	r0, r8
 8011402:	4649      	mov	r1, r9
 8011404:	f7ef fba8 	bl	8000b58 <__aeabi_dcmpgt>
 8011408:	2800      	cmp	r0, #0
 801140a:	d173      	bne.n	80114f4 <_dtoa_r+0x6c4>
 801140c:	4652      	mov	r2, sl
 801140e:	465b      	mov	r3, fp
 8011410:	4913      	ldr	r1, [pc, #76]	; (8011460 <_dtoa_r+0x630>)
 8011412:	2000      	movs	r0, #0
 8011414:	f7ee ff58 	bl	80002c8 <__aeabi_dsub>
 8011418:	4602      	mov	r2, r0
 801141a:	460b      	mov	r3, r1
 801141c:	4640      	mov	r0, r8
 801141e:	4649      	mov	r1, r9
 8011420:	f7ef fb7c 	bl	8000b1c <__aeabi_dcmplt>
 8011424:	2800      	cmp	r0, #0
 8011426:	f43f af35 	beq.w	8011294 <_dtoa_r+0x464>
 801142a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 801142c:	1e6b      	subs	r3, r5, #1
 801142e:	930f      	str	r3, [sp, #60]	; 0x3c
 8011430:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8011434:	2b30      	cmp	r3, #48	; 0x30
 8011436:	d0f8      	beq.n	801142a <_dtoa_r+0x5fa>
 8011438:	9700      	str	r7, [sp, #0]
 801143a:	e049      	b.n	80114d0 <_dtoa_r+0x6a0>
 801143c:	4b05      	ldr	r3, [pc, #20]	; (8011454 <_dtoa_r+0x624>)
 801143e:	f7ef f8fb 	bl	8000638 <__aeabi_dmul>
 8011442:	4680      	mov	r8, r0
 8011444:	4689      	mov	r9, r1
 8011446:	e7bd      	b.n	80113c4 <_dtoa_r+0x594>
 8011448:	08014aa0 	.word	0x08014aa0
 801144c:	08014a78 	.word	0x08014a78
 8011450:	3ff00000 	.word	0x3ff00000
 8011454:	40240000 	.word	0x40240000
 8011458:	401c0000 	.word	0x401c0000
 801145c:	40140000 	.word	0x40140000
 8011460:	3fe00000 	.word	0x3fe00000
 8011464:	9d01      	ldr	r5, [sp, #4]
 8011466:	4656      	mov	r6, sl
 8011468:	465f      	mov	r7, fp
 801146a:	4642      	mov	r2, r8
 801146c:	464b      	mov	r3, r9
 801146e:	4630      	mov	r0, r6
 8011470:	4639      	mov	r1, r7
 8011472:	f7ef fa0b 	bl	800088c <__aeabi_ddiv>
 8011476:	f7ef fb8f 	bl	8000b98 <__aeabi_d2iz>
 801147a:	4682      	mov	sl, r0
 801147c:	f7ef f872 	bl	8000564 <__aeabi_i2d>
 8011480:	4642      	mov	r2, r8
 8011482:	464b      	mov	r3, r9
 8011484:	f7ef f8d8 	bl	8000638 <__aeabi_dmul>
 8011488:	4602      	mov	r2, r0
 801148a:	460b      	mov	r3, r1
 801148c:	4630      	mov	r0, r6
 801148e:	4639      	mov	r1, r7
 8011490:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8011494:	f7ee ff18 	bl	80002c8 <__aeabi_dsub>
 8011498:	f805 6b01 	strb.w	r6, [r5], #1
 801149c:	9e01      	ldr	r6, [sp, #4]
 801149e:	9f03      	ldr	r7, [sp, #12]
 80114a0:	1bae      	subs	r6, r5, r6
 80114a2:	42b7      	cmp	r7, r6
 80114a4:	4602      	mov	r2, r0
 80114a6:	460b      	mov	r3, r1
 80114a8:	d135      	bne.n	8011516 <_dtoa_r+0x6e6>
 80114aa:	f7ee ff0f 	bl	80002cc <__adddf3>
 80114ae:	4642      	mov	r2, r8
 80114b0:	464b      	mov	r3, r9
 80114b2:	4606      	mov	r6, r0
 80114b4:	460f      	mov	r7, r1
 80114b6:	f7ef fb4f 	bl	8000b58 <__aeabi_dcmpgt>
 80114ba:	b9d0      	cbnz	r0, 80114f2 <_dtoa_r+0x6c2>
 80114bc:	4642      	mov	r2, r8
 80114be:	464b      	mov	r3, r9
 80114c0:	4630      	mov	r0, r6
 80114c2:	4639      	mov	r1, r7
 80114c4:	f7ef fb20 	bl	8000b08 <__aeabi_dcmpeq>
 80114c8:	b110      	cbz	r0, 80114d0 <_dtoa_r+0x6a0>
 80114ca:	f01a 0f01 	tst.w	sl, #1
 80114ce:	d110      	bne.n	80114f2 <_dtoa_r+0x6c2>
 80114d0:	4620      	mov	r0, r4
 80114d2:	ee18 1a10 	vmov	r1, s16
 80114d6:	f000 fae9 	bl	8011aac <_Bfree>
 80114da:	2300      	movs	r3, #0
 80114dc:	9800      	ldr	r0, [sp, #0]
 80114de:	702b      	strb	r3, [r5, #0]
 80114e0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80114e2:	3001      	adds	r0, #1
 80114e4:	6018      	str	r0, [r3, #0]
 80114e6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80114e8:	2b00      	cmp	r3, #0
 80114ea:	f43f acf1 	beq.w	8010ed0 <_dtoa_r+0xa0>
 80114ee:	601d      	str	r5, [r3, #0]
 80114f0:	e4ee      	b.n	8010ed0 <_dtoa_r+0xa0>
 80114f2:	9f00      	ldr	r7, [sp, #0]
 80114f4:	462b      	mov	r3, r5
 80114f6:	461d      	mov	r5, r3
 80114f8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80114fc:	2a39      	cmp	r2, #57	; 0x39
 80114fe:	d106      	bne.n	801150e <_dtoa_r+0x6de>
 8011500:	9a01      	ldr	r2, [sp, #4]
 8011502:	429a      	cmp	r2, r3
 8011504:	d1f7      	bne.n	80114f6 <_dtoa_r+0x6c6>
 8011506:	9901      	ldr	r1, [sp, #4]
 8011508:	2230      	movs	r2, #48	; 0x30
 801150a:	3701      	adds	r7, #1
 801150c:	700a      	strb	r2, [r1, #0]
 801150e:	781a      	ldrb	r2, [r3, #0]
 8011510:	3201      	adds	r2, #1
 8011512:	701a      	strb	r2, [r3, #0]
 8011514:	e790      	b.n	8011438 <_dtoa_r+0x608>
 8011516:	4ba6      	ldr	r3, [pc, #664]	; (80117b0 <_dtoa_r+0x980>)
 8011518:	2200      	movs	r2, #0
 801151a:	f7ef f88d 	bl	8000638 <__aeabi_dmul>
 801151e:	2200      	movs	r2, #0
 8011520:	2300      	movs	r3, #0
 8011522:	4606      	mov	r6, r0
 8011524:	460f      	mov	r7, r1
 8011526:	f7ef faef 	bl	8000b08 <__aeabi_dcmpeq>
 801152a:	2800      	cmp	r0, #0
 801152c:	d09d      	beq.n	801146a <_dtoa_r+0x63a>
 801152e:	e7cf      	b.n	80114d0 <_dtoa_r+0x6a0>
 8011530:	9a08      	ldr	r2, [sp, #32]
 8011532:	2a00      	cmp	r2, #0
 8011534:	f000 80d7 	beq.w	80116e6 <_dtoa_r+0x8b6>
 8011538:	9a06      	ldr	r2, [sp, #24]
 801153a:	2a01      	cmp	r2, #1
 801153c:	f300 80ba 	bgt.w	80116b4 <_dtoa_r+0x884>
 8011540:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8011542:	2a00      	cmp	r2, #0
 8011544:	f000 80b2 	beq.w	80116ac <_dtoa_r+0x87c>
 8011548:	f203 4333 	addw	r3, r3, #1075	; 0x433
 801154c:	9e07      	ldr	r6, [sp, #28]
 801154e:	9d04      	ldr	r5, [sp, #16]
 8011550:	9a04      	ldr	r2, [sp, #16]
 8011552:	441a      	add	r2, r3
 8011554:	9204      	str	r2, [sp, #16]
 8011556:	9a05      	ldr	r2, [sp, #20]
 8011558:	2101      	movs	r1, #1
 801155a:	441a      	add	r2, r3
 801155c:	4620      	mov	r0, r4
 801155e:	9205      	str	r2, [sp, #20]
 8011560:	f000 fb5c 	bl	8011c1c <__i2b>
 8011564:	4607      	mov	r7, r0
 8011566:	2d00      	cmp	r5, #0
 8011568:	dd0c      	ble.n	8011584 <_dtoa_r+0x754>
 801156a:	9b05      	ldr	r3, [sp, #20]
 801156c:	2b00      	cmp	r3, #0
 801156e:	dd09      	ble.n	8011584 <_dtoa_r+0x754>
 8011570:	42ab      	cmp	r3, r5
 8011572:	9a04      	ldr	r2, [sp, #16]
 8011574:	bfa8      	it	ge
 8011576:	462b      	movge	r3, r5
 8011578:	1ad2      	subs	r2, r2, r3
 801157a:	9204      	str	r2, [sp, #16]
 801157c:	9a05      	ldr	r2, [sp, #20]
 801157e:	1aed      	subs	r5, r5, r3
 8011580:	1ad3      	subs	r3, r2, r3
 8011582:	9305      	str	r3, [sp, #20]
 8011584:	9b07      	ldr	r3, [sp, #28]
 8011586:	b31b      	cbz	r3, 80115d0 <_dtoa_r+0x7a0>
 8011588:	9b08      	ldr	r3, [sp, #32]
 801158a:	2b00      	cmp	r3, #0
 801158c:	f000 80af 	beq.w	80116ee <_dtoa_r+0x8be>
 8011590:	2e00      	cmp	r6, #0
 8011592:	dd13      	ble.n	80115bc <_dtoa_r+0x78c>
 8011594:	4639      	mov	r1, r7
 8011596:	4632      	mov	r2, r6
 8011598:	4620      	mov	r0, r4
 801159a:	f000 fbff 	bl	8011d9c <__pow5mult>
 801159e:	ee18 2a10 	vmov	r2, s16
 80115a2:	4601      	mov	r1, r0
 80115a4:	4607      	mov	r7, r0
 80115a6:	4620      	mov	r0, r4
 80115a8:	f000 fb4e 	bl	8011c48 <__multiply>
 80115ac:	ee18 1a10 	vmov	r1, s16
 80115b0:	4680      	mov	r8, r0
 80115b2:	4620      	mov	r0, r4
 80115b4:	f000 fa7a 	bl	8011aac <_Bfree>
 80115b8:	ee08 8a10 	vmov	s16, r8
 80115bc:	9b07      	ldr	r3, [sp, #28]
 80115be:	1b9a      	subs	r2, r3, r6
 80115c0:	d006      	beq.n	80115d0 <_dtoa_r+0x7a0>
 80115c2:	ee18 1a10 	vmov	r1, s16
 80115c6:	4620      	mov	r0, r4
 80115c8:	f000 fbe8 	bl	8011d9c <__pow5mult>
 80115cc:	ee08 0a10 	vmov	s16, r0
 80115d0:	2101      	movs	r1, #1
 80115d2:	4620      	mov	r0, r4
 80115d4:	f000 fb22 	bl	8011c1c <__i2b>
 80115d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80115da:	2b00      	cmp	r3, #0
 80115dc:	4606      	mov	r6, r0
 80115de:	f340 8088 	ble.w	80116f2 <_dtoa_r+0x8c2>
 80115e2:	461a      	mov	r2, r3
 80115e4:	4601      	mov	r1, r0
 80115e6:	4620      	mov	r0, r4
 80115e8:	f000 fbd8 	bl	8011d9c <__pow5mult>
 80115ec:	9b06      	ldr	r3, [sp, #24]
 80115ee:	2b01      	cmp	r3, #1
 80115f0:	4606      	mov	r6, r0
 80115f2:	f340 8081 	ble.w	80116f8 <_dtoa_r+0x8c8>
 80115f6:	f04f 0800 	mov.w	r8, #0
 80115fa:	6933      	ldr	r3, [r6, #16]
 80115fc:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8011600:	6918      	ldr	r0, [r3, #16]
 8011602:	f000 fabb 	bl	8011b7c <__hi0bits>
 8011606:	f1c0 0020 	rsb	r0, r0, #32
 801160a:	9b05      	ldr	r3, [sp, #20]
 801160c:	4418      	add	r0, r3
 801160e:	f010 001f 	ands.w	r0, r0, #31
 8011612:	f000 8092 	beq.w	801173a <_dtoa_r+0x90a>
 8011616:	f1c0 0320 	rsb	r3, r0, #32
 801161a:	2b04      	cmp	r3, #4
 801161c:	f340 808a 	ble.w	8011734 <_dtoa_r+0x904>
 8011620:	f1c0 001c 	rsb	r0, r0, #28
 8011624:	9b04      	ldr	r3, [sp, #16]
 8011626:	4403      	add	r3, r0
 8011628:	9304      	str	r3, [sp, #16]
 801162a:	9b05      	ldr	r3, [sp, #20]
 801162c:	4403      	add	r3, r0
 801162e:	4405      	add	r5, r0
 8011630:	9305      	str	r3, [sp, #20]
 8011632:	9b04      	ldr	r3, [sp, #16]
 8011634:	2b00      	cmp	r3, #0
 8011636:	dd07      	ble.n	8011648 <_dtoa_r+0x818>
 8011638:	ee18 1a10 	vmov	r1, s16
 801163c:	461a      	mov	r2, r3
 801163e:	4620      	mov	r0, r4
 8011640:	f000 fc06 	bl	8011e50 <__lshift>
 8011644:	ee08 0a10 	vmov	s16, r0
 8011648:	9b05      	ldr	r3, [sp, #20]
 801164a:	2b00      	cmp	r3, #0
 801164c:	dd05      	ble.n	801165a <_dtoa_r+0x82a>
 801164e:	4631      	mov	r1, r6
 8011650:	461a      	mov	r2, r3
 8011652:	4620      	mov	r0, r4
 8011654:	f000 fbfc 	bl	8011e50 <__lshift>
 8011658:	4606      	mov	r6, r0
 801165a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801165c:	2b00      	cmp	r3, #0
 801165e:	d06e      	beq.n	801173e <_dtoa_r+0x90e>
 8011660:	ee18 0a10 	vmov	r0, s16
 8011664:	4631      	mov	r1, r6
 8011666:	f000 fc63 	bl	8011f30 <__mcmp>
 801166a:	2800      	cmp	r0, #0
 801166c:	da67      	bge.n	801173e <_dtoa_r+0x90e>
 801166e:	9b00      	ldr	r3, [sp, #0]
 8011670:	3b01      	subs	r3, #1
 8011672:	ee18 1a10 	vmov	r1, s16
 8011676:	9300      	str	r3, [sp, #0]
 8011678:	220a      	movs	r2, #10
 801167a:	2300      	movs	r3, #0
 801167c:	4620      	mov	r0, r4
 801167e:	f000 fa37 	bl	8011af0 <__multadd>
 8011682:	9b08      	ldr	r3, [sp, #32]
 8011684:	ee08 0a10 	vmov	s16, r0
 8011688:	2b00      	cmp	r3, #0
 801168a:	f000 81b1 	beq.w	80119f0 <_dtoa_r+0xbc0>
 801168e:	2300      	movs	r3, #0
 8011690:	4639      	mov	r1, r7
 8011692:	220a      	movs	r2, #10
 8011694:	4620      	mov	r0, r4
 8011696:	f000 fa2b 	bl	8011af0 <__multadd>
 801169a:	9b02      	ldr	r3, [sp, #8]
 801169c:	2b00      	cmp	r3, #0
 801169e:	4607      	mov	r7, r0
 80116a0:	f300 808e 	bgt.w	80117c0 <_dtoa_r+0x990>
 80116a4:	9b06      	ldr	r3, [sp, #24]
 80116a6:	2b02      	cmp	r3, #2
 80116a8:	dc51      	bgt.n	801174e <_dtoa_r+0x91e>
 80116aa:	e089      	b.n	80117c0 <_dtoa_r+0x990>
 80116ac:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80116ae:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80116b2:	e74b      	b.n	801154c <_dtoa_r+0x71c>
 80116b4:	9b03      	ldr	r3, [sp, #12]
 80116b6:	1e5e      	subs	r6, r3, #1
 80116b8:	9b07      	ldr	r3, [sp, #28]
 80116ba:	42b3      	cmp	r3, r6
 80116bc:	bfbf      	itttt	lt
 80116be:	9b07      	ldrlt	r3, [sp, #28]
 80116c0:	9607      	strlt	r6, [sp, #28]
 80116c2:	1af2      	sublt	r2, r6, r3
 80116c4:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80116c6:	bfb6      	itet	lt
 80116c8:	189b      	addlt	r3, r3, r2
 80116ca:	1b9e      	subge	r6, r3, r6
 80116cc:	930a      	strlt	r3, [sp, #40]	; 0x28
 80116ce:	9b03      	ldr	r3, [sp, #12]
 80116d0:	bfb8      	it	lt
 80116d2:	2600      	movlt	r6, #0
 80116d4:	2b00      	cmp	r3, #0
 80116d6:	bfb7      	itett	lt
 80116d8:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 80116dc:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 80116e0:	1a9d      	sublt	r5, r3, r2
 80116e2:	2300      	movlt	r3, #0
 80116e4:	e734      	b.n	8011550 <_dtoa_r+0x720>
 80116e6:	9e07      	ldr	r6, [sp, #28]
 80116e8:	9d04      	ldr	r5, [sp, #16]
 80116ea:	9f08      	ldr	r7, [sp, #32]
 80116ec:	e73b      	b.n	8011566 <_dtoa_r+0x736>
 80116ee:	9a07      	ldr	r2, [sp, #28]
 80116f0:	e767      	b.n	80115c2 <_dtoa_r+0x792>
 80116f2:	9b06      	ldr	r3, [sp, #24]
 80116f4:	2b01      	cmp	r3, #1
 80116f6:	dc18      	bgt.n	801172a <_dtoa_r+0x8fa>
 80116f8:	f1ba 0f00 	cmp.w	sl, #0
 80116fc:	d115      	bne.n	801172a <_dtoa_r+0x8fa>
 80116fe:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8011702:	b993      	cbnz	r3, 801172a <_dtoa_r+0x8fa>
 8011704:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8011708:	0d1b      	lsrs	r3, r3, #20
 801170a:	051b      	lsls	r3, r3, #20
 801170c:	b183      	cbz	r3, 8011730 <_dtoa_r+0x900>
 801170e:	9b04      	ldr	r3, [sp, #16]
 8011710:	3301      	adds	r3, #1
 8011712:	9304      	str	r3, [sp, #16]
 8011714:	9b05      	ldr	r3, [sp, #20]
 8011716:	3301      	adds	r3, #1
 8011718:	9305      	str	r3, [sp, #20]
 801171a:	f04f 0801 	mov.w	r8, #1
 801171e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011720:	2b00      	cmp	r3, #0
 8011722:	f47f af6a 	bne.w	80115fa <_dtoa_r+0x7ca>
 8011726:	2001      	movs	r0, #1
 8011728:	e76f      	b.n	801160a <_dtoa_r+0x7da>
 801172a:	f04f 0800 	mov.w	r8, #0
 801172e:	e7f6      	b.n	801171e <_dtoa_r+0x8ee>
 8011730:	4698      	mov	r8, r3
 8011732:	e7f4      	b.n	801171e <_dtoa_r+0x8ee>
 8011734:	f43f af7d 	beq.w	8011632 <_dtoa_r+0x802>
 8011738:	4618      	mov	r0, r3
 801173a:	301c      	adds	r0, #28
 801173c:	e772      	b.n	8011624 <_dtoa_r+0x7f4>
 801173e:	9b03      	ldr	r3, [sp, #12]
 8011740:	2b00      	cmp	r3, #0
 8011742:	dc37      	bgt.n	80117b4 <_dtoa_r+0x984>
 8011744:	9b06      	ldr	r3, [sp, #24]
 8011746:	2b02      	cmp	r3, #2
 8011748:	dd34      	ble.n	80117b4 <_dtoa_r+0x984>
 801174a:	9b03      	ldr	r3, [sp, #12]
 801174c:	9302      	str	r3, [sp, #8]
 801174e:	9b02      	ldr	r3, [sp, #8]
 8011750:	b96b      	cbnz	r3, 801176e <_dtoa_r+0x93e>
 8011752:	4631      	mov	r1, r6
 8011754:	2205      	movs	r2, #5
 8011756:	4620      	mov	r0, r4
 8011758:	f000 f9ca 	bl	8011af0 <__multadd>
 801175c:	4601      	mov	r1, r0
 801175e:	4606      	mov	r6, r0
 8011760:	ee18 0a10 	vmov	r0, s16
 8011764:	f000 fbe4 	bl	8011f30 <__mcmp>
 8011768:	2800      	cmp	r0, #0
 801176a:	f73f adbb 	bgt.w	80112e4 <_dtoa_r+0x4b4>
 801176e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011770:	9d01      	ldr	r5, [sp, #4]
 8011772:	43db      	mvns	r3, r3
 8011774:	9300      	str	r3, [sp, #0]
 8011776:	f04f 0800 	mov.w	r8, #0
 801177a:	4631      	mov	r1, r6
 801177c:	4620      	mov	r0, r4
 801177e:	f000 f995 	bl	8011aac <_Bfree>
 8011782:	2f00      	cmp	r7, #0
 8011784:	f43f aea4 	beq.w	80114d0 <_dtoa_r+0x6a0>
 8011788:	f1b8 0f00 	cmp.w	r8, #0
 801178c:	d005      	beq.n	801179a <_dtoa_r+0x96a>
 801178e:	45b8      	cmp	r8, r7
 8011790:	d003      	beq.n	801179a <_dtoa_r+0x96a>
 8011792:	4641      	mov	r1, r8
 8011794:	4620      	mov	r0, r4
 8011796:	f000 f989 	bl	8011aac <_Bfree>
 801179a:	4639      	mov	r1, r7
 801179c:	4620      	mov	r0, r4
 801179e:	f000 f985 	bl	8011aac <_Bfree>
 80117a2:	e695      	b.n	80114d0 <_dtoa_r+0x6a0>
 80117a4:	2600      	movs	r6, #0
 80117a6:	4637      	mov	r7, r6
 80117a8:	e7e1      	b.n	801176e <_dtoa_r+0x93e>
 80117aa:	9700      	str	r7, [sp, #0]
 80117ac:	4637      	mov	r7, r6
 80117ae:	e599      	b.n	80112e4 <_dtoa_r+0x4b4>
 80117b0:	40240000 	.word	0x40240000
 80117b4:	9b08      	ldr	r3, [sp, #32]
 80117b6:	2b00      	cmp	r3, #0
 80117b8:	f000 80ca 	beq.w	8011950 <_dtoa_r+0xb20>
 80117bc:	9b03      	ldr	r3, [sp, #12]
 80117be:	9302      	str	r3, [sp, #8]
 80117c0:	2d00      	cmp	r5, #0
 80117c2:	dd05      	ble.n	80117d0 <_dtoa_r+0x9a0>
 80117c4:	4639      	mov	r1, r7
 80117c6:	462a      	mov	r2, r5
 80117c8:	4620      	mov	r0, r4
 80117ca:	f000 fb41 	bl	8011e50 <__lshift>
 80117ce:	4607      	mov	r7, r0
 80117d0:	f1b8 0f00 	cmp.w	r8, #0
 80117d4:	d05b      	beq.n	801188e <_dtoa_r+0xa5e>
 80117d6:	6879      	ldr	r1, [r7, #4]
 80117d8:	4620      	mov	r0, r4
 80117da:	f000 f927 	bl	8011a2c <_Balloc>
 80117de:	4605      	mov	r5, r0
 80117e0:	b928      	cbnz	r0, 80117ee <_dtoa_r+0x9be>
 80117e2:	4b87      	ldr	r3, [pc, #540]	; (8011a00 <_dtoa_r+0xbd0>)
 80117e4:	4602      	mov	r2, r0
 80117e6:	f240 21ea 	movw	r1, #746	; 0x2ea
 80117ea:	f7ff bb3b 	b.w	8010e64 <_dtoa_r+0x34>
 80117ee:	693a      	ldr	r2, [r7, #16]
 80117f0:	3202      	adds	r2, #2
 80117f2:	0092      	lsls	r2, r2, #2
 80117f4:	f107 010c 	add.w	r1, r7, #12
 80117f8:	300c      	adds	r0, #12
 80117fa:	f7fe fcef 	bl	80101dc <memcpy>
 80117fe:	2201      	movs	r2, #1
 8011800:	4629      	mov	r1, r5
 8011802:	4620      	mov	r0, r4
 8011804:	f000 fb24 	bl	8011e50 <__lshift>
 8011808:	9b01      	ldr	r3, [sp, #4]
 801180a:	f103 0901 	add.w	r9, r3, #1
 801180e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8011812:	4413      	add	r3, r2
 8011814:	9305      	str	r3, [sp, #20]
 8011816:	f00a 0301 	and.w	r3, sl, #1
 801181a:	46b8      	mov	r8, r7
 801181c:	9304      	str	r3, [sp, #16]
 801181e:	4607      	mov	r7, r0
 8011820:	4631      	mov	r1, r6
 8011822:	ee18 0a10 	vmov	r0, s16
 8011826:	f7ff fa78 	bl	8010d1a <quorem>
 801182a:	4641      	mov	r1, r8
 801182c:	9002      	str	r0, [sp, #8]
 801182e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8011832:	ee18 0a10 	vmov	r0, s16
 8011836:	f000 fb7b 	bl	8011f30 <__mcmp>
 801183a:	463a      	mov	r2, r7
 801183c:	9003      	str	r0, [sp, #12]
 801183e:	4631      	mov	r1, r6
 8011840:	4620      	mov	r0, r4
 8011842:	f000 fb91 	bl	8011f68 <__mdiff>
 8011846:	68c2      	ldr	r2, [r0, #12]
 8011848:	f109 3bff 	add.w	fp, r9, #4294967295
 801184c:	4605      	mov	r5, r0
 801184e:	bb02      	cbnz	r2, 8011892 <_dtoa_r+0xa62>
 8011850:	4601      	mov	r1, r0
 8011852:	ee18 0a10 	vmov	r0, s16
 8011856:	f000 fb6b 	bl	8011f30 <__mcmp>
 801185a:	4602      	mov	r2, r0
 801185c:	4629      	mov	r1, r5
 801185e:	4620      	mov	r0, r4
 8011860:	9207      	str	r2, [sp, #28]
 8011862:	f000 f923 	bl	8011aac <_Bfree>
 8011866:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 801186a:	ea43 0102 	orr.w	r1, r3, r2
 801186e:	9b04      	ldr	r3, [sp, #16]
 8011870:	430b      	orrs	r3, r1
 8011872:	464d      	mov	r5, r9
 8011874:	d10f      	bne.n	8011896 <_dtoa_r+0xa66>
 8011876:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 801187a:	d02a      	beq.n	80118d2 <_dtoa_r+0xaa2>
 801187c:	9b03      	ldr	r3, [sp, #12]
 801187e:	2b00      	cmp	r3, #0
 8011880:	dd02      	ble.n	8011888 <_dtoa_r+0xa58>
 8011882:	9b02      	ldr	r3, [sp, #8]
 8011884:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8011888:	f88b a000 	strb.w	sl, [fp]
 801188c:	e775      	b.n	801177a <_dtoa_r+0x94a>
 801188e:	4638      	mov	r0, r7
 8011890:	e7ba      	b.n	8011808 <_dtoa_r+0x9d8>
 8011892:	2201      	movs	r2, #1
 8011894:	e7e2      	b.n	801185c <_dtoa_r+0xa2c>
 8011896:	9b03      	ldr	r3, [sp, #12]
 8011898:	2b00      	cmp	r3, #0
 801189a:	db04      	blt.n	80118a6 <_dtoa_r+0xa76>
 801189c:	9906      	ldr	r1, [sp, #24]
 801189e:	430b      	orrs	r3, r1
 80118a0:	9904      	ldr	r1, [sp, #16]
 80118a2:	430b      	orrs	r3, r1
 80118a4:	d122      	bne.n	80118ec <_dtoa_r+0xabc>
 80118a6:	2a00      	cmp	r2, #0
 80118a8:	ddee      	ble.n	8011888 <_dtoa_r+0xa58>
 80118aa:	ee18 1a10 	vmov	r1, s16
 80118ae:	2201      	movs	r2, #1
 80118b0:	4620      	mov	r0, r4
 80118b2:	f000 facd 	bl	8011e50 <__lshift>
 80118b6:	4631      	mov	r1, r6
 80118b8:	ee08 0a10 	vmov	s16, r0
 80118bc:	f000 fb38 	bl	8011f30 <__mcmp>
 80118c0:	2800      	cmp	r0, #0
 80118c2:	dc03      	bgt.n	80118cc <_dtoa_r+0xa9c>
 80118c4:	d1e0      	bne.n	8011888 <_dtoa_r+0xa58>
 80118c6:	f01a 0f01 	tst.w	sl, #1
 80118ca:	d0dd      	beq.n	8011888 <_dtoa_r+0xa58>
 80118cc:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80118d0:	d1d7      	bne.n	8011882 <_dtoa_r+0xa52>
 80118d2:	2339      	movs	r3, #57	; 0x39
 80118d4:	f88b 3000 	strb.w	r3, [fp]
 80118d8:	462b      	mov	r3, r5
 80118da:	461d      	mov	r5, r3
 80118dc:	3b01      	subs	r3, #1
 80118de:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80118e2:	2a39      	cmp	r2, #57	; 0x39
 80118e4:	d071      	beq.n	80119ca <_dtoa_r+0xb9a>
 80118e6:	3201      	adds	r2, #1
 80118e8:	701a      	strb	r2, [r3, #0]
 80118ea:	e746      	b.n	801177a <_dtoa_r+0x94a>
 80118ec:	2a00      	cmp	r2, #0
 80118ee:	dd07      	ble.n	8011900 <_dtoa_r+0xad0>
 80118f0:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80118f4:	d0ed      	beq.n	80118d2 <_dtoa_r+0xaa2>
 80118f6:	f10a 0301 	add.w	r3, sl, #1
 80118fa:	f88b 3000 	strb.w	r3, [fp]
 80118fe:	e73c      	b.n	801177a <_dtoa_r+0x94a>
 8011900:	9b05      	ldr	r3, [sp, #20]
 8011902:	f809 ac01 	strb.w	sl, [r9, #-1]
 8011906:	4599      	cmp	r9, r3
 8011908:	d047      	beq.n	801199a <_dtoa_r+0xb6a>
 801190a:	ee18 1a10 	vmov	r1, s16
 801190e:	2300      	movs	r3, #0
 8011910:	220a      	movs	r2, #10
 8011912:	4620      	mov	r0, r4
 8011914:	f000 f8ec 	bl	8011af0 <__multadd>
 8011918:	45b8      	cmp	r8, r7
 801191a:	ee08 0a10 	vmov	s16, r0
 801191e:	f04f 0300 	mov.w	r3, #0
 8011922:	f04f 020a 	mov.w	r2, #10
 8011926:	4641      	mov	r1, r8
 8011928:	4620      	mov	r0, r4
 801192a:	d106      	bne.n	801193a <_dtoa_r+0xb0a>
 801192c:	f000 f8e0 	bl	8011af0 <__multadd>
 8011930:	4680      	mov	r8, r0
 8011932:	4607      	mov	r7, r0
 8011934:	f109 0901 	add.w	r9, r9, #1
 8011938:	e772      	b.n	8011820 <_dtoa_r+0x9f0>
 801193a:	f000 f8d9 	bl	8011af0 <__multadd>
 801193e:	4639      	mov	r1, r7
 8011940:	4680      	mov	r8, r0
 8011942:	2300      	movs	r3, #0
 8011944:	220a      	movs	r2, #10
 8011946:	4620      	mov	r0, r4
 8011948:	f000 f8d2 	bl	8011af0 <__multadd>
 801194c:	4607      	mov	r7, r0
 801194e:	e7f1      	b.n	8011934 <_dtoa_r+0xb04>
 8011950:	9b03      	ldr	r3, [sp, #12]
 8011952:	9302      	str	r3, [sp, #8]
 8011954:	9d01      	ldr	r5, [sp, #4]
 8011956:	ee18 0a10 	vmov	r0, s16
 801195a:	4631      	mov	r1, r6
 801195c:	f7ff f9dd 	bl	8010d1a <quorem>
 8011960:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8011964:	9b01      	ldr	r3, [sp, #4]
 8011966:	f805 ab01 	strb.w	sl, [r5], #1
 801196a:	1aea      	subs	r2, r5, r3
 801196c:	9b02      	ldr	r3, [sp, #8]
 801196e:	4293      	cmp	r3, r2
 8011970:	dd09      	ble.n	8011986 <_dtoa_r+0xb56>
 8011972:	ee18 1a10 	vmov	r1, s16
 8011976:	2300      	movs	r3, #0
 8011978:	220a      	movs	r2, #10
 801197a:	4620      	mov	r0, r4
 801197c:	f000 f8b8 	bl	8011af0 <__multadd>
 8011980:	ee08 0a10 	vmov	s16, r0
 8011984:	e7e7      	b.n	8011956 <_dtoa_r+0xb26>
 8011986:	9b02      	ldr	r3, [sp, #8]
 8011988:	2b00      	cmp	r3, #0
 801198a:	bfc8      	it	gt
 801198c:	461d      	movgt	r5, r3
 801198e:	9b01      	ldr	r3, [sp, #4]
 8011990:	bfd8      	it	le
 8011992:	2501      	movle	r5, #1
 8011994:	441d      	add	r5, r3
 8011996:	f04f 0800 	mov.w	r8, #0
 801199a:	ee18 1a10 	vmov	r1, s16
 801199e:	2201      	movs	r2, #1
 80119a0:	4620      	mov	r0, r4
 80119a2:	f000 fa55 	bl	8011e50 <__lshift>
 80119a6:	4631      	mov	r1, r6
 80119a8:	ee08 0a10 	vmov	s16, r0
 80119ac:	f000 fac0 	bl	8011f30 <__mcmp>
 80119b0:	2800      	cmp	r0, #0
 80119b2:	dc91      	bgt.n	80118d8 <_dtoa_r+0xaa8>
 80119b4:	d102      	bne.n	80119bc <_dtoa_r+0xb8c>
 80119b6:	f01a 0f01 	tst.w	sl, #1
 80119ba:	d18d      	bne.n	80118d8 <_dtoa_r+0xaa8>
 80119bc:	462b      	mov	r3, r5
 80119be:	461d      	mov	r5, r3
 80119c0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80119c4:	2a30      	cmp	r2, #48	; 0x30
 80119c6:	d0fa      	beq.n	80119be <_dtoa_r+0xb8e>
 80119c8:	e6d7      	b.n	801177a <_dtoa_r+0x94a>
 80119ca:	9a01      	ldr	r2, [sp, #4]
 80119cc:	429a      	cmp	r2, r3
 80119ce:	d184      	bne.n	80118da <_dtoa_r+0xaaa>
 80119d0:	9b00      	ldr	r3, [sp, #0]
 80119d2:	3301      	adds	r3, #1
 80119d4:	9300      	str	r3, [sp, #0]
 80119d6:	2331      	movs	r3, #49	; 0x31
 80119d8:	7013      	strb	r3, [r2, #0]
 80119da:	e6ce      	b.n	801177a <_dtoa_r+0x94a>
 80119dc:	4b09      	ldr	r3, [pc, #36]	; (8011a04 <_dtoa_r+0xbd4>)
 80119de:	f7ff ba95 	b.w	8010f0c <_dtoa_r+0xdc>
 80119e2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80119e4:	2b00      	cmp	r3, #0
 80119e6:	f47f aa6e 	bne.w	8010ec6 <_dtoa_r+0x96>
 80119ea:	4b07      	ldr	r3, [pc, #28]	; (8011a08 <_dtoa_r+0xbd8>)
 80119ec:	f7ff ba8e 	b.w	8010f0c <_dtoa_r+0xdc>
 80119f0:	9b02      	ldr	r3, [sp, #8]
 80119f2:	2b00      	cmp	r3, #0
 80119f4:	dcae      	bgt.n	8011954 <_dtoa_r+0xb24>
 80119f6:	9b06      	ldr	r3, [sp, #24]
 80119f8:	2b02      	cmp	r3, #2
 80119fa:	f73f aea8 	bgt.w	801174e <_dtoa_r+0x91e>
 80119fe:	e7a9      	b.n	8011954 <_dtoa_r+0xb24>
 8011a00:	08014a0b 	.word	0x08014a0b
 8011a04:	08014968 	.word	0x08014968
 8011a08:	0801498c 	.word	0x0801498c

08011a0c <_localeconv_r>:
 8011a0c:	4800      	ldr	r0, [pc, #0]	; (8011a10 <_localeconv_r+0x4>)
 8011a0e:	4770      	bx	lr
 8011a10:	2000035c 	.word	0x2000035c

08011a14 <__malloc_lock>:
 8011a14:	4801      	ldr	r0, [pc, #4]	; (8011a1c <__malloc_lock+0x8>)
 8011a16:	f000 bd30 	b.w	801247a <__retarget_lock_acquire_recursive>
 8011a1a:	bf00      	nop
 8011a1c:	2000265c 	.word	0x2000265c

08011a20 <__malloc_unlock>:
 8011a20:	4801      	ldr	r0, [pc, #4]	; (8011a28 <__malloc_unlock+0x8>)
 8011a22:	f000 bd2b 	b.w	801247c <__retarget_lock_release_recursive>
 8011a26:	bf00      	nop
 8011a28:	2000265c 	.word	0x2000265c

08011a2c <_Balloc>:
 8011a2c:	b570      	push	{r4, r5, r6, lr}
 8011a2e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8011a30:	4604      	mov	r4, r0
 8011a32:	460d      	mov	r5, r1
 8011a34:	b976      	cbnz	r6, 8011a54 <_Balloc+0x28>
 8011a36:	2010      	movs	r0, #16
 8011a38:	f7fe fbc0 	bl	80101bc <malloc>
 8011a3c:	4602      	mov	r2, r0
 8011a3e:	6260      	str	r0, [r4, #36]	; 0x24
 8011a40:	b920      	cbnz	r0, 8011a4c <_Balloc+0x20>
 8011a42:	4b18      	ldr	r3, [pc, #96]	; (8011aa4 <_Balloc+0x78>)
 8011a44:	4818      	ldr	r0, [pc, #96]	; (8011aa8 <_Balloc+0x7c>)
 8011a46:	2166      	movs	r1, #102	; 0x66
 8011a48:	f000 fce6 	bl	8012418 <__assert_func>
 8011a4c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8011a50:	6006      	str	r6, [r0, #0]
 8011a52:	60c6      	str	r6, [r0, #12]
 8011a54:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8011a56:	68f3      	ldr	r3, [r6, #12]
 8011a58:	b183      	cbz	r3, 8011a7c <_Balloc+0x50>
 8011a5a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8011a5c:	68db      	ldr	r3, [r3, #12]
 8011a5e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8011a62:	b9b8      	cbnz	r0, 8011a94 <_Balloc+0x68>
 8011a64:	2101      	movs	r1, #1
 8011a66:	fa01 f605 	lsl.w	r6, r1, r5
 8011a6a:	1d72      	adds	r2, r6, #5
 8011a6c:	0092      	lsls	r2, r2, #2
 8011a6e:	4620      	mov	r0, r4
 8011a70:	f000 fb60 	bl	8012134 <_calloc_r>
 8011a74:	b160      	cbz	r0, 8011a90 <_Balloc+0x64>
 8011a76:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8011a7a:	e00e      	b.n	8011a9a <_Balloc+0x6e>
 8011a7c:	2221      	movs	r2, #33	; 0x21
 8011a7e:	2104      	movs	r1, #4
 8011a80:	4620      	mov	r0, r4
 8011a82:	f000 fb57 	bl	8012134 <_calloc_r>
 8011a86:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8011a88:	60f0      	str	r0, [r6, #12]
 8011a8a:	68db      	ldr	r3, [r3, #12]
 8011a8c:	2b00      	cmp	r3, #0
 8011a8e:	d1e4      	bne.n	8011a5a <_Balloc+0x2e>
 8011a90:	2000      	movs	r0, #0
 8011a92:	bd70      	pop	{r4, r5, r6, pc}
 8011a94:	6802      	ldr	r2, [r0, #0]
 8011a96:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8011a9a:	2300      	movs	r3, #0
 8011a9c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8011aa0:	e7f7      	b.n	8011a92 <_Balloc+0x66>
 8011aa2:	bf00      	nop
 8011aa4:	08014999 	.word	0x08014999
 8011aa8:	08014a1c 	.word	0x08014a1c

08011aac <_Bfree>:
 8011aac:	b570      	push	{r4, r5, r6, lr}
 8011aae:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8011ab0:	4605      	mov	r5, r0
 8011ab2:	460c      	mov	r4, r1
 8011ab4:	b976      	cbnz	r6, 8011ad4 <_Bfree+0x28>
 8011ab6:	2010      	movs	r0, #16
 8011ab8:	f7fe fb80 	bl	80101bc <malloc>
 8011abc:	4602      	mov	r2, r0
 8011abe:	6268      	str	r0, [r5, #36]	; 0x24
 8011ac0:	b920      	cbnz	r0, 8011acc <_Bfree+0x20>
 8011ac2:	4b09      	ldr	r3, [pc, #36]	; (8011ae8 <_Bfree+0x3c>)
 8011ac4:	4809      	ldr	r0, [pc, #36]	; (8011aec <_Bfree+0x40>)
 8011ac6:	218a      	movs	r1, #138	; 0x8a
 8011ac8:	f000 fca6 	bl	8012418 <__assert_func>
 8011acc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8011ad0:	6006      	str	r6, [r0, #0]
 8011ad2:	60c6      	str	r6, [r0, #12]
 8011ad4:	b13c      	cbz	r4, 8011ae6 <_Bfree+0x3a>
 8011ad6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8011ad8:	6862      	ldr	r2, [r4, #4]
 8011ada:	68db      	ldr	r3, [r3, #12]
 8011adc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8011ae0:	6021      	str	r1, [r4, #0]
 8011ae2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8011ae6:	bd70      	pop	{r4, r5, r6, pc}
 8011ae8:	08014999 	.word	0x08014999
 8011aec:	08014a1c 	.word	0x08014a1c

08011af0 <__multadd>:
 8011af0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011af4:	690d      	ldr	r5, [r1, #16]
 8011af6:	4607      	mov	r7, r0
 8011af8:	460c      	mov	r4, r1
 8011afa:	461e      	mov	r6, r3
 8011afc:	f101 0c14 	add.w	ip, r1, #20
 8011b00:	2000      	movs	r0, #0
 8011b02:	f8dc 3000 	ldr.w	r3, [ip]
 8011b06:	b299      	uxth	r1, r3
 8011b08:	fb02 6101 	mla	r1, r2, r1, r6
 8011b0c:	0c1e      	lsrs	r6, r3, #16
 8011b0e:	0c0b      	lsrs	r3, r1, #16
 8011b10:	fb02 3306 	mla	r3, r2, r6, r3
 8011b14:	b289      	uxth	r1, r1
 8011b16:	3001      	adds	r0, #1
 8011b18:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8011b1c:	4285      	cmp	r5, r0
 8011b1e:	f84c 1b04 	str.w	r1, [ip], #4
 8011b22:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8011b26:	dcec      	bgt.n	8011b02 <__multadd+0x12>
 8011b28:	b30e      	cbz	r6, 8011b6e <__multadd+0x7e>
 8011b2a:	68a3      	ldr	r3, [r4, #8]
 8011b2c:	42ab      	cmp	r3, r5
 8011b2e:	dc19      	bgt.n	8011b64 <__multadd+0x74>
 8011b30:	6861      	ldr	r1, [r4, #4]
 8011b32:	4638      	mov	r0, r7
 8011b34:	3101      	adds	r1, #1
 8011b36:	f7ff ff79 	bl	8011a2c <_Balloc>
 8011b3a:	4680      	mov	r8, r0
 8011b3c:	b928      	cbnz	r0, 8011b4a <__multadd+0x5a>
 8011b3e:	4602      	mov	r2, r0
 8011b40:	4b0c      	ldr	r3, [pc, #48]	; (8011b74 <__multadd+0x84>)
 8011b42:	480d      	ldr	r0, [pc, #52]	; (8011b78 <__multadd+0x88>)
 8011b44:	21b5      	movs	r1, #181	; 0xb5
 8011b46:	f000 fc67 	bl	8012418 <__assert_func>
 8011b4a:	6922      	ldr	r2, [r4, #16]
 8011b4c:	3202      	adds	r2, #2
 8011b4e:	f104 010c 	add.w	r1, r4, #12
 8011b52:	0092      	lsls	r2, r2, #2
 8011b54:	300c      	adds	r0, #12
 8011b56:	f7fe fb41 	bl	80101dc <memcpy>
 8011b5a:	4621      	mov	r1, r4
 8011b5c:	4638      	mov	r0, r7
 8011b5e:	f7ff ffa5 	bl	8011aac <_Bfree>
 8011b62:	4644      	mov	r4, r8
 8011b64:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8011b68:	3501      	adds	r5, #1
 8011b6a:	615e      	str	r6, [r3, #20]
 8011b6c:	6125      	str	r5, [r4, #16]
 8011b6e:	4620      	mov	r0, r4
 8011b70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011b74:	08014a0b 	.word	0x08014a0b
 8011b78:	08014a1c 	.word	0x08014a1c

08011b7c <__hi0bits>:
 8011b7c:	0c03      	lsrs	r3, r0, #16
 8011b7e:	041b      	lsls	r3, r3, #16
 8011b80:	b9d3      	cbnz	r3, 8011bb8 <__hi0bits+0x3c>
 8011b82:	0400      	lsls	r0, r0, #16
 8011b84:	2310      	movs	r3, #16
 8011b86:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8011b8a:	bf04      	itt	eq
 8011b8c:	0200      	lsleq	r0, r0, #8
 8011b8e:	3308      	addeq	r3, #8
 8011b90:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8011b94:	bf04      	itt	eq
 8011b96:	0100      	lsleq	r0, r0, #4
 8011b98:	3304      	addeq	r3, #4
 8011b9a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8011b9e:	bf04      	itt	eq
 8011ba0:	0080      	lsleq	r0, r0, #2
 8011ba2:	3302      	addeq	r3, #2
 8011ba4:	2800      	cmp	r0, #0
 8011ba6:	db05      	blt.n	8011bb4 <__hi0bits+0x38>
 8011ba8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8011bac:	f103 0301 	add.w	r3, r3, #1
 8011bb0:	bf08      	it	eq
 8011bb2:	2320      	moveq	r3, #32
 8011bb4:	4618      	mov	r0, r3
 8011bb6:	4770      	bx	lr
 8011bb8:	2300      	movs	r3, #0
 8011bba:	e7e4      	b.n	8011b86 <__hi0bits+0xa>

08011bbc <__lo0bits>:
 8011bbc:	6803      	ldr	r3, [r0, #0]
 8011bbe:	f013 0207 	ands.w	r2, r3, #7
 8011bc2:	4601      	mov	r1, r0
 8011bc4:	d00b      	beq.n	8011bde <__lo0bits+0x22>
 8011bc6:	07da      	lsls	r2, r3, #31
 8011bc8:	d423      	bmi.n	8011c12 <__lo0bits+0x56>
 8011bca:	0798      	lsls	r0, r3, #30
 8011bcc:	bf49      	itett	mi
 8011bce:	085b      	lsrmi	r3, r3, #1
 8011bd0:	089b      	lsrpl	r3, r3, #2
 8011bd2:	2001      	movmi	r0, #1
 8011bd4:	600b      	strmi	r3, [r1, #0]
 8011bd6:	bf5c      	itt	pl
 8011bd8:	600b      	strpl	r3, [r1, #0]
 8011bda:	2002      	movpl	r0, #2
 8011bdc:	4770      	bx	lr
 8011bde:	b298      	uxth	r0, r3
 8011be0:	b9a8      	cbnz	r0, 8011c0e <__lo0bits+0x52>
 8011be2:	0c1b      	lsrs	r3, r3, #16
 8011be4:	2010      	movs	r0, #16
 8011be6:	b2da      	uxtb	r2, r3
 8011be8:	b90a      	cbnz	r2, 8011bee <__lo0bits+0x32>
 8011bea:	3008      	adds	r0, #8
 8011bec:	0a1b      	lsrs	r3, r3, #8
 8011bee:	071a      	lsls	r2, r3, #28
 8011bf0:	bf04      	itt	eq
 8011bf2:	091b      	lsreq	r3, r3, #4
 8011bf4:	3004      	addeq	r0, #4
 8011bf6:	079a      	lsls	r2, r3, #30
 8011bf8:	bf04      	itt	eq
 8011bfa:	089b      	lsreq	r3, r3, #2
 8011bfc:	3002      	addeq	r0, #2
 8011bfe:	07da      	lsls	r2, r3, #31
 8011c00:	d403      	bmi.n	8011c0a <__lo0bits+0x4e>
 8011c02:	085b      	lsrs	r3, r3, #1
 8011c04:	f100 0001 	add.w	r0, r0, #1
 8011c08:	d005      	beq.n	8011c16 <__lo0bits+0x5a>
 8011c0a:	600b      	str	r3, [r1, #0]
 8011c0c:	4770      	bx	lr
 8011c0e:	4610      	mov	r0, r2
 8011c10:	e7e9      	b.n	8011be6 <__lo0bits+0x2a>
 8011c12:	2000      	movs	r0, #0
 8011c14:	4770      	bx	lr
 8011c16:	2020      	movs	r0, #32
 8011c18:	4770      	bx	lr
	...

08011c1c <__i2b>:
 8011c1c:	b510      	push	{r4, lr}
 8011c1e:	460c      	mov	r4, r1
 8011c20:	2101      	movs	r1, #1
 8011c22:	f7ff ff03 	bl	8011a2c <_Balloc>
 8011c26:	4602      	mov	r2, r0
 8011c28:	b928      	cbnz	r0, 8011c36 <__i2b+0x1a>
 8011c2a:	4b05      	ldr	r3, [pc, #20]	; (8011c40 <__i2b+0x24>)
 8011c2c:	4805      	ldr	r0, [pc, #20]	; (8011c44 <__i2b+0x28>)
 8011c2e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8011c32:	f000 fbf1 	bl	8012418 <__assert_func>
 8011c36:	2301      	movs	r3, #1
 8011c38:	6144      	str	r4, [r0, #20]
 8011c3a:	6103      	str	r3, [r0, #16]
 8011c3c:	bd10      	pop	{r4, pc}
 8011c3e:	bf00      	nop
 8011c40:	08014a0b 	.word	0x08014a0b
 8011c44:	08014a1c 	.word	0x08014a1c

08011c48 <__multiply>:
 8011c48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011c4c:	4691      	mov	r9, r2
 8011c4e:	690a      	ldr	r2, [r1, #16]
 8011c50:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8011c54:	429a      	cmp	r2, r3
 8011c56:	bfb8      	it	lt
 8011c58:	460b      	movlt	r3, r1
 8011c5a:	460c      	mov	r4, r1
 8011c5c:	bfbc      	itt	lt
 8011c5e:	464c      	movlt	r4, r9
 8011c60:	4699      	movlt	r9, r3
 8011c62:	6927      	ldr	r7, [r4, #16]
 8011c64:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8011c68:	68a3      	ldr	r3, [r4, #8]
 8011c6a:	6861      	ldr	r1, [r4, #4]
 8011c6c:	eb07 060a 	add.w	r6, r7, sl
 8011c70:	42b3      	cmp	r3, r6
 8011c72:	b085      	sub	sp, #20
 8011c74:	bfb8      	it	lt
 8011c76:	3101      	addlt	r1, #1
 8011c78:	f7ff fed8 	bl	8011a2c <_Balloc>
 8011c7c:	b930      	cbnz	r0, 8011c8c <__multiply+0x44>
 8011c7e:	4602      	mov	r2, r0
 8011c80:	4b44      	ldr	r3, [pc, #272]	; (8011d94 <__multiply+0x14c>)
 8011c82:	4845      	ldr	r0, [pc, #276]	; (8011d98 <__multiply+0x150>)
 8011c84:	f240 115d 	movw	r1, #349	; 0x15d
 8011c88:	f000 fbc6 	bl	8012418 <__assert_func>
 8011c8c:	f100 0514 	add.w	r5, r0, #20
 8011c90:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8011c94:	462b      	mov	r3, r5
 8011c96:	2200      	movs	r2, #0
 8011c98:	4543      	cmp	r3, r8
 8011c9a:	d321      	bcc.n	8011ce0 <__multiply+0x98>
 8011c9c:	f104 0314 	add.w	r3, r4, #20
 8011ca0:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8011ca4:	f109 0314 	add.w	r3, r9, #20
 8011ca8:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8011cac:	9202      	str	r2, [sp, #8]
 8011cae:	1b3a      	subs	r2, r7, r4
 8011cb0:	3a15      	subs	r2, #21
 8011cb2:	f022 0203 	bic.w	r2, r2, #3
 8011cb6:	3204      	adds	r2, #4
 8011cb8:	f104 0115 	add.w	r1, r4, #21
 8011cbc:	428f      	cmp	r7, r1
 8011cbe:	bf38      	it	cc
 8011cc0:	2204      	movcc	r2, #4
 8011cc2:	9201      	str	r2, [sp, #4]
 8011cc4:	9a02      	ldr	r2, [sp, #8]
 8011cc6:	9303      	str	r3, [sp, #12]
 8011cc8:	429a      	cmp	r2, r3
 8011cca:	d80c      	bhi.n	8011ce6 <__multiply+0x9e>
 8011ccc:	2e00      	cmp	r6, #0
 8011cce:	dd03      	ble.n	8011cd8 <__multiply+0x90>
 8011cd0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8011cd4:	2b00      	cmp	r3, #0
 8011cd6:	d05a      	beq.n	8011d8e <__multiply+0x146>
 8011cd8:	6106      	str	r6, [r0, #16]
 8011cda:	b005      	add	sp, #20
 8011cdc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011ce0:	f843 2b04 	str.w	r2, [r3], #4
 8011ce4:	e7d8      	b.n	8011c98 <__multiply+0x50>
 8011ce6:	f8b3 a000 	ldrh.w	sl, [r3]
 8011cea:	f1ba 0f00 	cmp.w	sl, #0
 8011cee:	d024      	beq.n	8011d3a <__multiply+0xf2>
 8011cf0:	f104 0e14 	add.w	lr, r4, #20
 8011cf4:	46a9      	mov	r9, r5
 8011cf6:	f04f 0c00 	mov.w	ip, #0
 8011cfa:	f85e 2b04 	ldr.w	r2, [lr], #4
 8011cfe:	f8d9 1000 	ldr.w	r1, [r9]
 8011d02:	fa1f fb82 	uxth.w	fp, r2
 8011d06:	b289      	uxth	r1, r1
 8011d08:	fb0a 110b 	mla	r1, sl, fp, r1
 8011d0c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8011d10:	f8d9 2000 	ldr.w	r2, [r9]
 8011d14:	4461      	add	r1, ip
 8011d16:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8011d1a:	fb0a c20b 	mla	r2, sl, fp, ip
 8011d1e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8011d22:	b289      	uxth	r1, r1
 8011d24:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8011d28:	4577      	cmp	r7, lr
 8011d2a:	f849 1b04 	str.w	r1, [r9], #4
 8011d2e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8011d32:	d8e2      	bhi.n	8011cfa <__multiply+0xb2>
 8011d34:	9a01      	ldr	r2, [sp, #4]
 8011d36:	f845 c002 	str.w	ip, [r5, r2]
 8011d3a:	9a03      	ldr	r2, [sp, #12]
 8011d3c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8011d40:	3304      	adds	r3, #4
 8011d42:	f1b9 0f00 	cmp.w	r9, #0
 8011d46:	d020      	beq.n	8011d8a <__multiply+0x142>
 8011d48:	6829      	ldr	r1, [r5, #0]
 8011d4a:	f104 0c14 	add.w	ip, r4, #20
 8011d4e:	46ae      	mov	lr, r5
 8011d50:	f04f 0a00 	mov.w	sl, #0
 8011d54:	f8bc b000 	ldrh.w	fp, [ip]
 8011d58:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8011d5c:	fb09 220b 	mla	r2, r9, fp, r2
 8011d60:	4492      	add	sl, r2
 8011d62:	b289      	uxth	r1, r1
 8011d64:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8011d68:	f84e 1b04 	str.w	r1, [lr], #4
 8011d6c:	f85c 2b04 	ldr.w	r2, [ip], #4
 8011d70:	f8be 1000 	ldrh.w	r1, [lr]
 8011d74:	0c12      	lsrs	r2, r2, #16
 8011d76:	fb09 1102 	mla	r1, r9, r2, r1
 8011d7a:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8011d7e:	4567      	cmp	r7, ip
 8011d80:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8011d84:	d8e6      	bhi.n	8011d54 <__multiply+0x10c>
 8011d86:	9a01      	ldr	r2, [sp, #4]
 8011d88:	50a9      	str	r1, [r5, r2]
 8011d8a:	3504      	adds	r5, #4
 8011d8c:	e79a      	b.n	8011cc4 <__multiply+0x7c>
 8011d8e:	3e01      	subs	r6, #1
 8011d90:	e79c      	b.n	8011ccc <__multiply+0x84>
 8011d92:	bf00      	nop
 8011d94:	08014a0b 	.word	0x08014a0b
 8011d98:	08014a1c 	.word	0x08014a1c

08011d9c <__pow5mult>:
 8011d9c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011da0:	4615      	mov	r5, r2
 8011da2:	f012 0203 	ands.w	r2, r2, #3
 8011da6:	4606      	mov	r6, r0
 8011da8:	460f      	mov	r7, r1
 8011daa:	d007      	beq.n	8011dbc <__pow5mult+0x20>
 8011dac:	4c25      	ldr	r4, [pc, #148]	; (8011e44 <__pow5mult+0xa8>)
 8011dae:	3a01      	subs	r2, #1
 8011db0:	2300      	movs	r3, #0
 8011db2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8011db6:	f7ff fe9b 	bl	8011af0 <__multadd>
 8011dba:	4607      	mov	r7, r0
 8011dbc:	10ad      	asrs	r5, r5, #2
 8011dbe:	d03d      	beq.n	8011e3c <__pow5mult+0xa0>
 8011dc0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8011dc2:	b97c      	cbnz	r4, 8011de4 <__pow5mult+0x48>
 8011dc4:	2010      	movs	r0, #16
 8011dc6:	f7fe f9f9 	bl	80101bc <malloc>
 8011dca:	4602      	mov	r2, r0
 8011dcc:	6270      	str	r0, [r6, #36]	; 0x24
 8011dce:	b928      	cbnz	r0, 8011ddc <__pow5mult+0x40>
 8011dd0:	4b1d      	ldr	r3, [pc, #116]	; (8011e48 <__pow5mult+0xac>)
 8011dd2:	481e      	ldr	r0, [pc, #120]	; (8011e4c <__pow5mult+0xb0>)
 8011dd4:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8011dd8:	f000 fb1e 	bl	8012418 <__assert_func>
 8011ddc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8011de0:	6004      	str	r4, [r0, #0]
 8011de2:	60c4      	str	r4, [r0, #12]
 8011de4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8011de8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8011dec:	b94c      	cbnz	r4, 8011e02 <__pow5mult+0x66>
 8011dee:	f240 2171 	movw	r1, #625	; 0x271
 8011df2:	4630      	mov	r0, r6
 8011df4:	f7ff ff12 	bl	8011c1c <__i2b>
 8011df8:	2300      	movs	r3, #0
 8011dfa:	f8c8 0008 	str.w	r0, [r8, #8]
 8011dfe:	4604      	mov	r4, r0
 8011e00:	6003      	str	r3, [r0, #0]
 8011e02:	f04f 0900 	mov.w	r9, #0
 8011e06:	07eb      	lsls	r3, r5, #31
 8011e08:	d50a      	bpl.n	8011e20 <__pow5mult+0x84>
 8011e0a:	4639      	mov	r1, r7
 8011e0c:	4622      	mov	r2, r4
 8011e0e:	4630      	mov	r0, r6
 8011e10:	f7ff ff1a 	bl	8011c48 <__multiply>
 8011e14:	4639      	mov	r1, r7
 8011e16:	4680      	mov	r8, r0
 8011e18:	4630      	mov	r0, r6
 8011e1a:	f7ff fe47 	bl	8011aac <_Bfree>
 8011e1e:	4647      	mov	r7, r8
 8011e20:	106d      	asrs	r5, r5, #1
 8011e22:	d00b      	beq.n	8011e3c <__pow5mult+0xa0>
 8011e24:	6820      	ldr	r0, [r4, #0]
 8011e26:	b938      	cbnz	r0, 8011e38 <__pow5mult+0x9c>
 8011e28:	4622      	mov	r2, r4
 8011e2a:	4621      	mov	r1, r4
 8011e2c:	4630      	mov	r0, r6
 8011e2e:	f7ff ff0b 	bl	8011c48 <__multiply>
 8011e32:	6020      	str	r0, [r4, #0]
 8011e34:	f8c0 9000 	str.w	r9, [r0]
 8011e38:	4604      	mov	r4, r0
 8011e3a:	e7e4      	b.n	8011e06 <__pow5mult+0x6a>
 8011e3c:	4638      	mov	r0, r7
 8011e3e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011e42:	bf00      	nop
 8011e44:	08014b68 	.word	0x08014b68
 8011e48:	08014999 	.word	0x08014999
 8011e4c:	08014a1c 	.word	0x08014a1c

08011e50 <__lshift>:
 8011e50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011e54:	460c      	mov	r4, r1
 8011e56:	6849      	ldr	r1, [r1, #4]
 8011e58:	6923      	ldr	r3, [r4, #16]
 8011e5a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8011e5e:	68a3      	ldr	r3, [r4, #8]
 8011e60:	4607      	mov	r7, r0
 8011e62:	4691      	mov	r9, r2
 8011e64:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8011e68:	f108 0601 	add.w	r6, r8, #1
 8011e6c:	42b3      	cmp	r3, r6
 8011e6e:	db0b      	blt.n	8011e88 <__lshift+0x38>
 8011e70:	4638      	mov	r0, r7
 8011e72:	f7ff fddb 	bl	8011a2c <_Balloc>
 8011e76:	4605      	mov	r5, r0
 8011e78:	b948      	cbnz	r0, 8011e8e <__lshift+0x3e>
 8011e7a:	4602      	mov	r2, r0
 8011e7c:	4b2a      	ldr	r3, [pc, #168]	; (8011f28 <__lshift+0xd8>)
 8011e7e:	482b      	ldr	r0, [pc, #172]	; (8011f2c <__lshift+0xdc>)
 8011e80:	f240 11d9 	movw	r1, #473	; 0x1d9
 8011e84:	f000 fac8 	bl	8012418 <__assert_func>
 8011e88:	3101      	adds	r1, #1
 8011e8a:	005b      	lsls	r3, r3, #1
 8011e8c:	e7ee      	b.n	8011e6c <__lshift+0x1c>
 8011e8e:	2300      	movs	r3, #0
 8011e90:	f100 0114 	add.w	r1, r0, #20
 8011e94:	f100 0210 	add.w	r2, r0, #16
 8011e98:	4618      	mov	r0, r3
 8011e9a:	4553      	cmp	r3, sl
 8011e9c:	db37      	blt.n	8011f0e <__lshift+0xbe>
 8011e9e:	6920      	ldr	r0, [r4, #16]
 8011ea0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8011ea4:	f104 0314 	add.w	r3, r4, #20
 8011ea8:	f019 091f 	ands.w	r9, r9, #31
 8011eac:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8011eb0:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8011eb4:	d02f      	beq.n	8011f16 <__lshift+0xc6>
 8011eb6:	f1c9 0e20 	rsb	lr, r9, #32
 8011eba:	468a      	mov	sl, r1
 8011ebc:	f04f 0c00 	mov.w	ip, #0
 8011ec0:	681a      	ldr	r2, [r3, #0]
 8011ec2:	fa02 f209 	lsl.w	r2, r2, r9
 8011ec6:	ea42 020c 	orr.w	r2, r2, ip
 8011eca:	f84a 2b04 	str.w	r2, [sl], #4
 8011ece:	f853 2b04 	ldr.w	r2, [r3], #4
 8011ed2:	4298      	cmp	r0, r3
 8011ed4:	fa22 fc0e 	lsr.w	ip, r2, lr
 8011ed8:	d8f2      	bhi.n	8011ec0 <__lshift+0x70>
 8011eda:	1b03      	subs	r3, r0, r4
 8011edc:	3b15      	subs	r3, #21
 8011ede:	f023 0303 	bic.w	r3, r3, #3
 8011ee2:	3304      	adds	r3, #4
 8011ee4:	f104 0215 	add.w	r2, r4, #21
 8011ee8:	4290      	cmp	r0, r2
 8011eea:	bf38      	it	cc
 8011eec:	2304      	movcc	r3, #4
 8011eee:	f841 c003 	str.w	ip, [r1, r3]
 8011ef2:	f1bc 0f00 	cmp.w	ip, #0
 8011ef6:	d001      	beq.n	8011efc <__lshift+0xac>
 8011ef8:	f108 0602 	add.w	r6, r8, #2
 8011efc:	3e01      	subs	r6, #1
 8011efe:	4638      	mov	r0, r7
 8011f00:	612e      	str	r6, [r5, #16]
 8011f02:	4621      	mov	r1, r4
 8011f04:	f7ff fdd2 	bl	8011aac <_Bfree>
 8011f08:	4628      	mov	r0, r5
 8011f0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011f0e:	f842 0f04 	str.w	r0, [r2, #4]!
 8011f12:	3301      	adds	r3, #1
 8011f14:	e7c1      	b.n	8011e9a <__lshift+0x4a>
 8011f16:	3904      	subs	r1, #4
 8011f18:	f853 2b04 	ldr.w	r2, [r3], #4
 8011f1c:	f841 2f04 	str.w	r2, [r1, #4]!
 8011f20:	4298      	cmp	r0, r3
 8011f22:	d8f9      	bhi.n	8011f18 <__lshift+0xc8>
 8011f24:	e7ea      	b.n	8011efc <__lshift+0xac>
 8011f26:	bf00      	nop
 8011f28:	08014a0b 	.word	0x08014a0b
 8011f2c:	08014a1c 	.word	0x08014a1c

08011f30 <__mcmp>:
 8011f30:	b530      	push	{r4, r5, lr}
 8011f32:	6902      	ldr	r2, [r0, #16]
 8011f34:	690c      	ldr	r4, [r1, #16]
 8011f36:	1b12      	subs	r2, r2, r4
 8011f38:	d10e      	bne.n	8011f58 <__mcmp+0x28>
 8011f3a:	f100 0314 	add.w	r3, r0, #20
 8011f3e:	3114      	adds	r1, #20
 8011f40:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8011f44:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8011f48:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8011f4c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8011f50:	42a5      	cmp	r5, r4
 8011f52:	d003      	beq.n	8011f5c <__mcmp+0x2c>
 8011f54:	d305      	bcc.n	8011f62 <__mcmp+0x32>
 8011f56:	2201      	movs	r2, #1
 8011f58:	4610      	mov	r0, r2
 8011f5a:	bd30      	pop	{r4, r5, pc}
 8011f5c:	4283      	cmp	r3, r0
 8011f5e:	d3f3      	bcc.n	8011f48 <__mcmp+0x18>
 8011f60:	e7fa      	b.n	8011f58 <__mcmp+0x28>
 8011f62:	f04f 32ff 	mov.w	r2, #4294967295
 8011f66:	e7f7      	b.n	8011f58 <__mcmp+0x28>

08011f68 <__mdiff>:
 8011f68:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011f6c:	460c      	mov	r4, r1
 8011f6e:	4606      	mov	r6, r0
 8011f70:	4611      	mov	r1, r2
 8011f72:	4620      	mov	r0, r4
 8011f74:	4690      	mov	r8, r2
 8011f76:	f7ff ffdb 	bl	8011f30 <__mcmp>
 8011f7a:	1e05      	subs	r5, r0, #0
 8011f7c:	d110      	bne.n	8011fa0 <__mdiff+0x38>
 8011f7e:	4629      	mov	r1, r5
 8011f80:	4630      	mov	r0, r6
 8011f82:	f7ff fd53 	bl	8011a2c <_Balloc>
 8011f86:	b930      	cbnz	r0, 8011f96 <__mdiff+0x2e>
 8011f88:	4b3a      	ldr	r3, [pc, #232]	; (8012074 <__mdiff+0x10c>)
 8011f8a:	4602      	mov	r2, r0
 8011f8c:	f240 2132 	movw	r1, #562	; 0x232
 8011f90:	4839      	ldr	r0, [pc, #228]	; (8012078 <__mdiff+0x110>)
 8011f92:	f000 fa41 	bl	8012418 <__assert_func>
 8011f96:	2301      	movs	r3, #1
 8011f98:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8011f9c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011fa0:	bfa4      	itt	ge
 8011fa2:	4643      	movge	r3, r8
 8011fa4:	46a0      	movge	r8, r4
 8011fa6:	4630      	mov	r0, r6
 8011fa8:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8011fac:	bfa6      	itte	ge
 8011fae:	461c      	movge	r4, r3
 8011fb0:	2500      	movge	r5, #0
 8011fb2:	2501      	movlt	r5, #1
 8011fb4:	f7ff fd3a 	bl	8011a2c <_Balloc>
 8011fb8:	b920      	cbnz	r0, 8011fc4 <__mdiff+0x5c>
 8011fba:	4b2e      	ldr	r3, [pc, #184]	; (8012074 <__mdiff+0x10c>)
 8011fbc:	4602      	mov	r2, r0
 8011fbe:	f44f 7110 	mov.w	r1, #576	; 0x240
 8011fc2:	e7e5      	b.n	8011f90 <__mdiff+0x28>
 8011fc4:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8011fc8:	6926      	ldr	r6, [r4, #16]
 8011fca:	60c5      	str	r5, [r0, #12]
 8011fcc:	f104 0914 	add.w	r9, r4, #20
 8011fd0:	f108 0514 	add.w	r5, r8, #20
 8011fd4:	f100 0e14 	add.w	lr, r0, #20
 8011fd8:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8011fdc:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8011fe0:	f108 0210 	add.w	r2, r8, #16
 8011fe4:	46f2      	mov	sl, lr
 8011fe6:	2100      	movs	r1, #0
 8011fe8:	f859 3b04 	ldr.w	r3, [r9], #4
 8011fec:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8011ff0:	fa1f f883 	uxth.w	r8, r3
 8011ff4:	fa11 f18b 	uxtah	r1, r1, fp
 8011ff8:	0c1b      	lsrs	r3, r3, #16
 8011ffa:	eba1 0808 	sub.w	r8, r1, r8
 8011ffe:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8012002:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8012006:	fa1f f888 	uxth.w	r8, r8
 801200a:	1419      	asrs	r1, r3, #16
 801200c:	454e      	cmp	r6, r9
 801200e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8012012:	f84a 3b04 	str.w	r3, [sl], #4
 8012016:	d8e7      	bhi.n	8011fe8 <__mdiff+0x80>
 8012018:	1b33      	subs	r3, r6, r4
 801201a:	3b15      	subs	r3, #21
 801201c:	f023 0303 	bic.w	r3, r3, #3
 8012020:	3304      	adds	r3, #4
 8012022:	3415      	adds	r4, #21
 8012024:	42a6      	cmp	r6, r4
 8012026:	bf38      	it	cc
 8012028:	2304      	movcc	r3, #4
 801202a:	441d      	add	r5, r3
 801202c:	4473      	add	r3, lr
 801202e:	469e      	mov	lr, r3
 8012030:	462e      	mov	r6, r5
 8012032:	4566      	cmp	r6, ip
 8012034:	d30e      	bcc.n	8012054 <__mdiff+0xec>
 8012036:	f10c 0203 	add.w	r2, ip, #3
 801203a:	1b52      	subs	r2, r2, r5
 801203c:	f022 0203 	bic.w	r2, r2, #3
 8012040:	3d03      	subs	r5, #3
 8012042:	45ac      	cmp	ip, r5
 8012044:	bf38      	it	cc
 8012046:	2200      	movcc	r2, #0
 8012048:	441a      	add	r2, r3
 801204a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 801204e:	b17b      	cbz	r3, 8012070 <__mdiff+0x108>
 8012050:	6107      	str	r7, [r0, #16]
 8012052:	e7a3      	b.n	8011f9c <__mdiff+0x34>
 8012054:	f856 8b04 	ldr.w	r8, [r6], #4
 8012058:	fa11 f288 	uxtah	r2, r1, r8
 801205c:	1414      	asrs	r4, r2, #16
 801205e:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8012062:	b292      	uxth	r2, r2
 8012064:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8012068:	f84e 2b04 	str.w	r2, [lr], #4
 801206c:	1421      	asrs	r1, r4, #16
 801206e:	e7e0      	b.n	8012032 <__mdiff+0xca>
 8012070:	3f01      	subs	r7, #1
 8012072:	e7ea      	b.n	801204a <__mdiff+0xe2>
 8012074:	08014a0b 	.word	0x08014a0b
 8012078:	08014a1c 	.word	0x08014a1c

0801207c <__d2b>:
 801207c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8012080:	4689      	mov	r9, r1
 8012082:	2101      	movs	r1, #1
 8012084:	ec57 6b10 	vmov	r6, r7, d0
 8012088:	4690      	mov	r8, r2
 801208a:	f7ff fccf 	bl	8011a2c <_Balloc>
 801208e:	4604      	mov	r4, r0
 8012090:	b930      	cbnz	r0, 80120a0 <__d2b+0x24>
 8012092:	4602      	mov	r2, r0
 8012094:	4b25      	ldr	r3, [pc, #148]	; (801212c <__d2b+0xb0>)
 8012096:	4826      	ldr	r0, [pc, #152]	; (8012130 <__d2b+0xb4>)
 8012098:	f240 310a 	movw	r1, #778	; 0x30a
 801209c:	f000 f9bc 	bl	8012418 <__assert_func>
 80120a0:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80120a4:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80120a8:	bb35      	cbnz	r5, 80120f8 <__d2b+0x7c>
 80120aa:	2e00      	cmp	r6, #0
 80120ac:	9301      	str	r3, [sp, #4]
 80120ae:	d028      	beq.n	8012102 <__d2b+0x86>
 80120b0:	4668      	mov	r0, sp
 80120b2:	9600      	str	r6, [sp, #0]
 80120b4:	f7ff fd82 	bl	8011bbc <__lo0bits>
 80120b8:	9900      	ldr	r1, [sp, #0]
 80120ba:	b300      	cbz	r0, 80120fe <__d2b+0x82>
 80120bc:	9a01      	ldr	r2, [sp, #4]
 80120be:	f1c0 0320 	rsb	r3, r0, #32
 80120c2:	fa02 f303 	lsl.w	r3, r2, r3
 80120c6:	430b      	orrs	r3, r1
 80120c8:	40c2      	lsrs	r2, r0
 80120ca:	6163      	str	r3, [r4, #20]
 80120cc:	9201      	str	r2, [sp, #4]
 80120ce:	9b01      	ldr	r3, [sp, #4]
 80120d0:	61a3      	str	r3, [r4, #24]
 80120d2:	2b00      	cmp	r3, #0
 80120d4:	bf14      	ite	ne
 80120d6:	2202      	movne	r2, #2
 80120d8:	2201      	moveq	r2, #1
 80120da:	6122      	str	r2, [r4, #16]
 80120dc:	b1d5      	cbz	r5, 8012114 <__d2b+0x98>
 80120de:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80120e2:	4405      	add	r5, r0
 80120e4:	f8c9 5000 	str.w	r5, [r9]
 80120e8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80120ec:	f8c8 0000 	str.w	r0, [r8]
 80120f0:	4620      	mov	r0, r4
 80120f2:	b003      	add	sp, #12
 80120f4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80120f8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80120fc:	e7d5      	b.n	80120aa <__d2b+0x2e>
 80120fe:	6161      	str	r1, [r4, #20]
 8012100:	e7e5      	b.n	80120ce <__d2b+0x52>
 8012102:	a801      	add	r0, sp, #4
 8012104:	f7ff fd5a 	bl	8011bbc <__lo0bits>
 8012108:	9b01      	ldr	r3, [sp, #4]
 801210a:	6163      	str	r3, [r4, #20]
 801210c:	2201      	movs	r2, #1
 801210e:	6122      	str	r2, [r4, #16]
 8012110:	3020      	adds	r0, #32
 8012112:	e7e3      	b.n	80120dc <__d2b+0x60>
 8012114:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8012118:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 801211c:	f8c9 0000 	str.w	r0, [r9]
 8012120:	6918      	ldr	r0, [r3, #16]
 8012122:	f7ff fd2b 	bl	8011b7c <__hi0bits>
 8012126:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801212a:	e7df      	b.n	80120ec <__d2b+0x70>
 801212c:	08014a0b 	.word	0x08014a0b
 8012130:	08014a1c 	.word	0x08014a1c

08012134 <_calloc_r>:
 8012134:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8012136:	fba1 2402 	umull	r2, r4, r1, r2
 801213a:	b94c      	cbnz	r4, 8012150 <_calloc_r+0x1c>
 801213c:	4611      	mov	r1, r2
 801213e:	9201      	str	r2, [sp, #4]
 8012140:	f7fe f8ce 	bl	80102e0 <_malloc_r>
 8012144:	9a01      	ldr	r2, [sp, #4]
 8012146:	4605      	mov	r5, r0
 8012148:	b930      	cbnz	r0, 8012158 <_calloc_r+0x24>
 801214a:	4628      	mov	r0, r5
 801214c:	b003      	add	sp, #12
 801214e:	bd30      	pop	{r4, r5, pc}
 8012150:	220c      	movs	r2, #12
 8012152:	6002      	str	r2, [r0, #0]
 8012154:	2500      	movs	r5, #0
 8012156:	e7f8      	b.n	801214a <_calloc_r+0x16>
 8012158:	4621      	mov	r1, r4
 801215a:	f7fe f84d 	bl	80101f8 <memset>
 801215e:	e7f4      	b.n	801214a <_calloc_r+0x16>

08012160 <__ssputs_r>:
 8012160:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012164:	688e      	ldr	r6, [r1, #8]
 8012166:	429e      	cmp	r6, r3
 8012168:	4682      	mov	sl, r0
 801216a:	460c      	mov	r4, r1
 801216c:	4690      	mov	r8, r2
 801216e:	461f      	mov	r7, r3
 8012170:	d838      	bhi.n	80121e4 <__ssputs_r+0x84>
 8012172:	898a      	ldrh	r2, [r1, #12]
 8012174:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8012178:	d032      	beq.n	80121e0 <__ssputs_r+0x80>
 801217a:	6825      	ldr	r5, [r4, #0]
 801217c:	6909      	ldr	r1, [r1, #16]
 801217e:	eba5 0901 	sub.w	r9, r5, r1
 8012182:	6965      	ldr	r5, [r4, #20]
 8012184:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8012188:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801218c:	3301      	adds	r3, #1
 801218e:	444b      	add	r3, r9
 8012190:	106d      	asrs	r5, r5, #1
 8012192:	429d      	cmp	r5, r3
 8012194:	bf38      	it	cc
 8012196:	461d      	movcc	r5, r3
 8012198:	0553      	lsls	r3, r2, #21
 801219a:	d531      	bpl.n	8012200 <__ssputs_r+0xa0>
 801219c:	4629      	mov	r1, r5
 801219e:	f7fe f89f 	bl	80102e0 <_malloc_r>
 80121a2:	4606      	mov	r6, r0
 80121a4:	b950      	cbnz	r0, 80121bc <__ssputs_r+0x5c>
 80121a6:	230c      	movs	r3, #12
 80121a8:	f8ca 3000 	str.w	r3, [sl]
 80121ac:	89a3      	ldrh	r3, [r4, #12]
 80121ae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80121b2:	81a3      	strh	r3, [r4, #12]
 80121b4:	f04f 30ff 	mov.w	r0, #4294967295
 80121b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80121bc:	6921      	ldr	r1, [r4, #16]
 80121be:	464a      	mov	r2, r9
 80121c0:	f7fe f80c 	bl	80101dc <memcpy>
 80121c4:	89a3      	ldrh	r3, [r4, #12]
 80121c6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80121ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80121ce:	81a3      	strh	r3, [r4, #12]
 80121d0:	6126      	str	r6, [r4, #16]
 80121d2:	6165      	str	r5, [r4, #20]
 80121d4:	444e      	add	r6, r9
 80121d6:	eba5 0509 	sub.w	r5, r5, r9
 80121da:	6026      	str	r6, [r4, #0]
 80121dc:	60a5      	str	r5, [r4, #8]
 80121de:	463e      	mov	r6, r7
 80121e0:	42be      	cmp	r6, r7
 80121e2:	d900      	bls.n	80121e6 <__ssputs_r+0x86>
 80121e4:	463e      	mov	r6, r7
 80121e6:	6820      	ldr	r0, [r4, #0]
 80121e8:	4632      	mov	r2, r6
 80121ea:	4641      	mov	r1, r8
 80121ec:	f000 f959 	bl	80124a2 <memmove>
 80121f0:	68a3      	ldr	r3, [r4, #8]
 80121f2:	1b9b      	subs	r3, r3, r6
 80121f4:	60a3      	str	r3, [r4, #8]
 80121f6:	6823      	ldr	r3, [r4, #0]
 80121f8:	4433      	add	r3, r6
 80121fa:	6023      	str	r3, [r4, #0]
 80121fc:	2000      	movs	r0, #0
 80121fe:	e7db      	b.n	80121b8 <__ssputs_r+0x58>
 8012200:	462a      	mov	r2, r5
 8012202:	f000 f968 	bl	80124d6 <_realloc_r>
 8012206:	4606      	mov	r6, r0
 8012208:	2800      	cmp	r0, #0
 801220a:	d1e1      	bne.n	80121d0 <__ssputs_r+0x70>
 801220c:	6921      	ldr	r1, [r4, #16]
 801220e:	4650      	mov	r0, sl
 8012210:	f7fd fffa 	bl	8010208 <_free_r>
 8012214:	e7c7      	b.n	80121a6 <__ssputs_r+0x46>
	...

08012218 <_svfiprintf_r>:
 8012218:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801221c:	4698      	mov	r8, r3
 801221e:	898b      	ldrh	r3, [r1, #12]
 8012220:	061b      	lsls	r3, r3, #24
 8012222:	b09d      	sub	sp, #116	; 0x74
 8012224:	4607      	mov	r7, r0
 8012226:	460d      	mov	r5, r1
 8012228:	4614      	mov	r4, r2
 801222a:	d50e      	bpl.n	801224a <_svfiprintf_r+0x32>
 801222c:	690b      	ldr	r3, [r1, #16]
 801222e:	b963      	cbnz	r3, 801224a <_svfiprintf_r+0x32>
 8012230:	2140      	movs	r1, #64	; 0x40
 8012232:	f7fe f855 	bl	80102e0 <_malloc_r>
 8012236:	6028      	str	r0, [r5, #0]
 8012238:	6128      	str	r0, [r5, #16]
 801223a:	b920      	cbnz	r0, 8012246 <_svfiprintf_r+0x2e>
 801223c:	230c      	movs	r3, #12
 801223e:	603b      	str	r3, [r7, #0]
 8012240:	f04f 30ff 	mov.w	r0, #4294967295
 8012244:	e0d1      	b.n	80123ea <_svfiprintf_r+0x1d2>
 8012246:	2340      	movs	r3, #64	; 0x40
 8012248:	616b      	str	r3, [r5, #20]
 801224a:	2300      	movs	r3, #0
 801224c:	9309      	str	r3, [sp, #36]	; 0x24
 801224e:	2320      	movs	r3, #32
 8012250:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8012254:	f8cd 800c 	str.w	r8, [sp, #12]
 8012258:	2330      	movs	r3, #48	; 0x30
 801225a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8012404 <_svfiprintf_r+0x1ec>
 801225e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8012262:	f04f 0901 	mov.w	r9, #1
 8012266:	4623      	mov	r3, r4
 8012268:	469a      	mov	sl, r3
 801226a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801226e:	b10a      	cbz	r2, 8012274 <_svfiprintf_r+0x5c>
 8012270:	2a25      	cmp	r2, #37	; 0x25
 8012272:	d1f9      	bne.n	8012268 <_svfiprintf_r+0x50>
 8012274:	ebba 0b04 	subs.w	fp, sl, r4
 8012278:	d00b      	beq.n	8012292 <_svfiprintf_r+0x7a>
 801227a:	465b      	mov	r3, fp
 801227c:	4622      	mov	r2, r4
 801227e:	4629      	mov	r1, r5
 8012280:	4638      	mov	r0, r7
 8012282:	f7ff ff6d 	bl	8012160 <__ssputs_r>
 8012286:	3001      	adds	r0, #1
 8012288:	f000 80aa 	beq.w	80123e0 <_svfiprintf_r+0x1c8>
 801228c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801228e:	445a      	add	r2, fp
 8012290:	9209      	str	r2, [sp, #36]	; 0x24
 8012292:	f89a 3000 	ldrb.w	r3, [sl]
 8012296:	2b00      	cmp	r3, #0
 8012298:	f000 80a2 	beq.w	80123e0 <_svfiprintf_r+0x1c8>
 801229c:	2300      	movs	r3, #0
 801229e:	f04f 32ff 	mov.w	r2, #4294967295
 80122a2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80122a6:	f10a 0a01 	add.w	sl, sl, #1
 80122aa:	9304      	str	r3, [sp, #16]
 80122ac:	9307      	str	r3, [sp, #28]
 80122ae:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80122b2:	931a      	str	r3, [sp, #104]	; 0x68
 80122b4:	4654      	mov	r4, sl
 80122b6:	2205      	movs	r2, #5
 80122b8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80122bc:	4851      	ldr	r0, [pc, #324]	; (8012404 <_svfiprintf_r+0x1ec>)
 80122be:	f7ed ffaf 	bl	8000220 <memchr>
 80122c2:	9a04      	ldr	r2, [sp, #16]
 80122c4:	b9d8      	cbnz	r0, 80122fe <_svfiprintf_r+0xe6>
 80122c6:	06d0      	lsls	r0, r2, #27
 80122c8:	bf44      	itt	mi
 80122ca:	2320      	movmi	r3, #32
 80122cc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80122d0:	0711      	lsls	r1, r2, #28
 80122d2:	bf44      	itt	mi
 80122d4:	232b      	movmi	r3, #43	; 0x2b
 80122d6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80122da:	f89a 3000 	ldrb.w	r3, [sl]
 80122de:	2b2a      	cmp	r3, #42	; 0x2a
 80122e0:	d015      	beq.n	801230e <_svfiprintf_r+0xf6>
 80122e2:	9a07      	ldr	r2, [sp, #28]
 80122e4:	4654      	mov	r4, sl
 80122e6:	2000      	movs	r0, #0
 80122e8:	f04f 0c0a 	mov.w	ip, #10
 80122ec:	4621      	mov	r1, r4
 80122ee:	f811 3b01 	ldrb.w	r3, [r1], #1
 80122f2:	3b30      	subs	r3, #48	; 0x30
 80122f4:	2b09      	cmp	r3, #9
 80122f6:	d94e      	bls.n	8012396 <_svfiprintf_r+0x17e>
 80122f8:	b1b0      	cbz	r0, 8012328 <_svfiprintf_r+0x110>
 80122fa:	9207      	str	r2, [sp, #28]
 80122fc:	e014      	b.n	8012328 <_svfiprintf_r+0x110>
 80122fe:	eba0 0308 	sub.w	r3, r0, r8
 8012302:	fa09 f303 	lsl.w	r3, r9, r3
 8012306:	4313      	orrs	r3, r2
 8012308:	9304      	str	r3, [sp, #16]
 801230a:	46a2      	mov	sl, r4
 801230c:	e7d2      	b.n	80122b4 <_svfiprintf_r+0x9c>
 801230e:	9b03      	ldr	r3, [sp, #12]
 8012310:	1d19      	adds	r1, r3, #4
 8012312:	681b      	ldr	r3, [r3, #0]
 8012314:	9103      	str	r1, [sp, #12]
 8012316:	2b00      	cmp	r3, #0
 8012318:	bfbb      	ittet	lt
 801231a:	425b      	neglt	r3, r3
 801231c:	f042 0202 	orrlt.w	r2, r2, #2
 8012320:	9307      	strge	r3, [sp, #28]
 8012322:	9307      	strlt	r3, [sp, #28]
 8012324:	bfb8      	it	lt
 8012326:	9204      	strlt	r2, [sp, #16]
 8012328:	7823      	ldrb	r3, [r4, #0]
 801232a:	2b2e      	cmp	r3, #46	; 0x2e
 801232c:	d10c      	bne.n	8012348 <_svfiprintf_r+0x130>
 801232e:	7863      	ldrb	r3, [r4, #1]
 8012330:	2b2a      	cmp	r3, #42	; 0x2a
 8012332:	d135      	bne.n	80123a0 <_svfiprintf_r+0x188>
 8012334:	9b03      	ldr	r3, [sp, #12]
 8012336:	1d1a      	adds	r2, r3, #4
 8012338:	681b      	ldr	r3, [r3, #0]
 801233a:	9203      	str	r2, [sp, #12]
 801233c:	2b00      	cmp	r3, #0
 801233e:	bfb8      	it	lt
 8012340:	f04f 33ff 	movlt.w	r3, #4294967295
 8012344:	3402      	adds	r4, #2
 8012346:	9305      	str	r3, [sp, #20]
 8012348:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8012414 <_svfiprintf_r+0x1fc>
 801234c:	7821      	ldrb	r1, [r4, #0]
 801234e:	2203      	movs	r2, #3
 8012350:	4650      	mov	r0, sl
 8012352:	f7ed ff65 	bl	8000220 <memchr>
 8012356:	b140      	cbz	r0, 801236a <_svfiprintf_r+0x152>
 8012358:	2340      	movs	r3, #64	; 0x40
 801235a:	eba0 000a 	sub.w	r0, r0, sl
 801235e:	fa03 f000 	lsl.w	r0, r3, r0
 8012362:	9b04      	ldr	r3, [sp, #16]
 8012364:	4303      	orrs	r3, r0
 8012366:	3401      	adds	r4, #1
 8012368:	9304      	str	r3, [sp, #16]
 801236a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801236e:	4826      	ldr	r0, [pc, #152]	; (8012408 <_svfiprintf_r+0x1f0>)
 8012370:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8012374:	2206      	movs	r2, #6
 8012376:	f7ed ff53 	bl	8000220 <memchr>
 801237a:	2800      	cmp	r0, #0
 801237c:	d038      	beq.n	80123f0 <_svfiprintf_r+0x1d8>
 801237e:	4b23      	ldr	r3, [pc, #140]	; (801240c <_svfiprintf_r+0x1f4>)
 8012380:	bb1b      	cbnz	r3, 80123ca <_svfiprintf_r+0x1b2>
 8012382:	9b03      	ldr	r3, [sp, #12]
 8012384:	3307      	adds	r3, #7
 8012386:	f023 0307 	bic.w	r3, r3, #7
 801238a:	3308      	adds	r3, #8
 801238c:	9303      	str	r3, [sp, #12]
 801238e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012390:	4433      	add	r3, r6
 8012392:	9309      	str	r3, [sp, #36]	; 0x24
 8012394:	e767      	b.n	8012266 <_svfiprintf_r+0x4e>
 8012396:	fb0c 3202 	mla	r2, ip, r2, r3
 801239a:	460c      	mov	r4, r1
 801239c:	2001      	movs	r0, #1
 801239e:	e7a5      	b.n	80122ec <_svfiprintf_r+0xd4>
 80123a0:	2300      	movs	r3, #0
 80123a2:	3401      	adds	r4, #1
 80123a4:	9305      	str	r3, [sp, #20]
 80123a6:	4619      	mov	r1, r3
 80123a8:	f04f 0c0a 	mov.w	ip, #10
 80123ac:	4620      	mov	r0, r4
 80123ae:	f810 2b01 	ldrb.w	r2, [r0], #1
 80123b2:	3a30      	subs	r2, #48	; 0x30
 80123b4:	2a09      	cmp	r2, #9
 80123b6:	d903      	bls.n	80123c0 <_svfiprintf_r+0x1a8>
 80123b8:	2b00      	cmp	r3, #0
 80123ba:	d0c5      	beq.n	8012348 <_svfiprintf_r+0x130>
 80123bc:	9105      	str	r1, [sp, #20]
 80123be:	e7c3      	b.n	8012348 <_svfiprintf_r+0x130>
 80123c0:	fb0c 2101 	mla	r1, ip, r1, r2
 80123c4:	4604      	mov	r4, r0
 80123c6:	2301      	movs	r3, #1
 80123c8:	e7f0      	b.n	80123ac <_svfiprintf_r+0x194>
 80123ca:	ab03      	add	r3, sp, #12
 80123cc:	9300      	str	r3, [sp, #0]
 80123ce:	462a      	mov	r2, r5
 80123d0:	4b0f      	ldr	r3, [pc, #60]	; (8012410 <_svfiprintf_r+0x1f8>)
 80123d2:	a904      	add	r1, sp, #16
 80123d4:	4638      	mov	r0, r7
 80123d6:	f7fe f897 	bl	8010508 <_printf_float>
 80123da:	1c42      	adds	r2, r0, #1
 80123dc:	4606      	mov	r6, r0
 80123de:	d1d6      	bne.n	801238e <_svfiprintf_r+0x176>
 80123e0:	89ab      	ldrh	r3, [r5, #12]
 80123e2:	065b      	lsls	r3, r3, #25
 80123e4:	f53f af2c 	bmi.w	8012240 <_svfiprintf_r+0x28>
 80123e8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80123ea:	b01d      	add	sp, #116	; 0x74
 80123ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80123f0:	ab03      	add	r3, sp, #12
 80123f2:	9300      	str	r3, [sp, #0]
 80123f4:	462a      	mov	r2, r5
 80123f6:	4b06      	ldr	r3, [pc, #24]	; (8012410 <_svfiprintf_r+0x1f8>)
 80123f8:	a904      	add	r1, sp, #16
 80123fa:	4638      	mov	r0, r7
 80123fc:	f7fe fb28 	bl	8010a50 <_printf_i>
 8012400:	e7eb      	b.n	80123da <_svfiprintf_r+0x1c2>
 8012402:	bf00      	nop
 8012404:	08014b74 	.word	0x08014b74
 8012408:	08014b7e 	.word	0x08014b7e
 801240c:	08010509 	.word	0x08010509
 8012410:	08012161 	.word	0x08012161
 8012414:	08014b7a 	.word	0x08014b7a

08012418 <__assert_func>:
 8012418:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801241a:	4614      	mov	r4, r2
 801241c:	461a      	mov	r2, r3
 801241e:	4b09      	ldr	r3, [pc, #36]	; (8012444 <__assert_func+0x2c>)
 8012420:	681b      	ldr	r3, [r3, #0]
 8012422:	4605      	mov	r5, r0
 8012424:	68d8      	ldr	r0, [r3, #12]
 8012426:	b14c      	cbz	r4, 801243c <__assert_func+0x24>
 8012428:	4b07      	ldr	r3, [pc, #28]	; (8012448 <__assert_func+0x30>)
 801242a:	9100      	str	r1, [sp, #0]
 801242c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8012430:	4906      	ldr	r1, [pc, #24]	; (801244c <__assert_func+0x34>)
 8012432:	462b      	mov	r3, r5
 8012434:	f000 f80e 	bl	8012454 <fiprintf>
 8012438:	f000 faa4 	bl	8012984 <abort>
 801243c:	4b04      	ldr	r3, [pc, #16]	; (8012450 <__assert_func+0x38>)
 801243e:	461c      	mov	r4, r3
 8012440:	e7f3      	b.n	801242a <__assert_func+0x12>
 8012442:	bf00      	nop
 8012444:	20000208 	.word	0x20000208
 8012448:	08014b85 	.word	0x08014b85
 801244c:	08014b92 	.word	0x08014b92
 8012450:	08014bc0 	.word	0x08014bc0

08012454 <fiprintf>:
 8012454:	b40e      	push	{r1, r2, r3}
 8012456:	b503      	push	{r0, r1, lr}
 8012458:	4601      	mov	r1, r0
 801245a:	ab03      	add	r3, sp, #12
 801245c:	4805      	ldr	r0, [pc, #20]	; (8012474 <fiprintf+0x20>)
 801245e:	f853 2b04 	ldr.w	r2, [r3], #4
 8012462:	6800      	ldr	r0, [r0, #0]
 8012464:	9301      	str	r3, [sp, #4]
 8012466:	f000 f88f 	bl	8012588 <_vfiprintf_r>
 801246a:	b002      	add	sp, #8
 801246c:	f85d eb04 	ldr.w	lr, [sp], #4
 8012470:	b003      	add	sp, #12
 8012472:	4770      	bx	lr
 8012474:	20000208 	.word	0x20000208

08012478 <__retarget_lock_init_recursive>:
 8012478:	4770      	bx	lr

0801247a <__retarget_lock_acquire_recursive>:
 801247a:	4770      	bx	lr

0801247c <__retarget_lock_release_recursive>:
 801247c:	4770      	bx	lr

0801247e <__ascii_mbtowc>:
 801247e:	b082      	sub	sp, #8
 8012480:	b901      	cbnz	r1, 8012484 <__ascii_mbtowc+0x6>
 8012482:	a901      	add	r1, sp, #4
 8012484:	b142      	cbz	r2, 8012498 <__ascii_mbtowc+0x1a>
 8012486:	b14b      	cbz	r3, 801249c <__ascii_mbtowc+0x1e>
 8012488:	7813      	ldrb	r3, [r2, #0]
 801248a:	600b      	str	r3, [r1, #0]
 801248c:	7812      	ldrb	r2, [r2, #0]
 801248e:	1e10      	subs	r0, r2, #0
 8012490:	bf18      	it	ne
 8012492:	2001      	movne	r0, #1
 8012494:	b002      	add	sp, #8
 8012496:	4770      	bx	lr
 8012498:	4610      	mov	r0, r2
 801249a:	e7fb      	b.n	8012494 <__ascii_mbtowc+0x16>
 801249c:	f06f 0001 	mvn.w	r0, #1
 80124a0:	e7f8      	b.n	8012494 <__ascii_mbtowc+0x16>

080124a2 <memmove>:
 80124a2:	4288      	cmp	r0, r1
 80124a4:	b510      	push	{r4, lr}
 80124a6:	eb01 0402 	add.w	r4, r1, r2
 80124aa:	d902      	bls.n	80124b2 <memmove+0x10>
 80124ac:	4284      	cmp	r4, r0
 80124ae:	4623      	mov	r3, r4
 80124b0:	d807      	bhi.n	80124c2 <memmove+0x20>
 80124b2:	1e43      	subs	r3, r0, #1
 80124b4:	42a1      	cmp	r1, r4
 80124b6:	d008      	beq.n	80124ca <memmove+0x28>
 80124b8:	f811 2b01 	ldrb.w	r2, [r1], #1
 80124bc:	f803 2f01 	strb.w	r2, [r3, #1]!
 80124c0:	e7f8      	b.n	80124b4 <memmove+0x12>
 80124c2:	4402      	add	r2, r0
 80124c4:	4601      	mov	r1, r0
 80124c6:	428a      	cmp	r2, r1
 80124c8:	d100      	bne.n	80124cc <memmove+0x2a>
 80124ca:	bd10      	pop	{r4, pc}
 80124cc:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80124d0:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80124d4:	e7f7      	b.n	80124c6 <memmove+0x24>

080124d6 <_realloc_r>:
 80124d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80124da:	4680      	mov	r8, r0
 80124dc:	4614      	mov	r4, r2
 80124de:	460e      	mov	r6, r1
 80124e0:	b921      	cbnz	r1, 80124ec <_realloc_r+0x16>
 80124e2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80124e6:	4611      	mov	r1, r2
 80124e8:	f7fd befa 	b.w	80102e0 <_malloc_r>
 80124ec:	b92a      	cbnz	r2, 80124fa <_realloc_r+0x24>
 80124ee:	f7fd fe8b 	bl	8010208 <_free_r>
 80124f2:	4625      	mov	r5, r4
 80124f4:	4628      	mov	r0, r5
 80124f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80124fa:	f000 fc67 	bl	8012dcc <_malloc_usable_size_r>
 80124fe:	4284      	cmp	r4, r0
 8012500:	4607      	mov	r7, r0
 8012502:	d802      	bhi.n	801250a <_realloc_r+0x34>
 8012504:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8012508:	d812      	bhi.n	8012530 <_realloc_r+0x5a>
 801250a:	4621      	mov	r1, r4
 801250c:	4640      	mov	r0, r8
 801250e:	f7fd fee7 	bl	80102e0 <_malloc_r>
 8012512:	4605      	mov	r5, r0
 8012514:	2800      	cmp	r0, #0
 8012516:	d0ed      	beq.n	80124f4 <_realloc_r+0x1e>
 8012518:	42bc      	cmp	r4, r7
 801251a:	4622      	mov	r2, r4
 801251c:	4631      	mov	r1, r6
 801251e:	bf28      	it	cs
 8012520:	463a      	movcs	r2, r7
 8012522:	f7fd fe5b 	bl	80101dc <memcpy>
 8012526:	4631      	mov	r1, r6
 8012528:	4640      	mov	r0, r8
 801252a:	f7fd fe6d 	bl	8010208 <_free_r>
 801252e:	e7e1      	b.n	80124f4 <_realloc_r+0x1e>
 8012530:	4635      	mov	r5, r6
 8012532:	e7df      	b.n	80124f4 <_realloc_r+0x1e>

08012534 <__sfputc_r>:
 8012534:	6893      	ldr	r3, [r2, #8]
 8012536:	3b01      	subs	r3, #1
 8012538:	2b00      	cmp	r3, #0
 801253a:	b410      	push	{r4}
 801253c:	6093      	str	r3, [r2, #8]
 801253e:	da08      	bge.n	8012552 <__sfputc_r+0x1e>
 8012540:	6994      	ldr	r4, [r2, #24]
 8012542:	42a3      	cmp	r3, r4
 8012544:	db01      	blt.n	801254a <__sfputc_r+0x16>
 8012546:	290a      	cmp	r1, #10
 8012548:	d103      	bne.n	8012552 <__sfputc_r+0x1e>
 801254a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801254e:	f000 b94b 	b.w	80127e8 <__swbuf_r>
 8012552:	6813      	ldr	r3, [r2, #0]
 8012554:	1c58      	adds	r0, r3, #1
 8012556:	6010      	str	r0, [r2, #0]
 8012558:	7019      	strb	r1, [r3, #0]
 801255a:	4608      	mov	r0, r1
 801255c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012560:	4770      	bx	lr

08012562 <__sfputs_r>:
 8012562:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012564:	4606      	mov	r6, r0
 8012566:	460f      	mov	r7, r1
 8012568:	4614      	mov	r4, r2
 801256a:	18d5      	adds	r5, r2, r3
 801256c:	42ac      	cmp	r4, r5
 801256e:	d101      	bne.n	8012574 <__sfputs_r+0x12>
 8012570:	2000      	movs	r0, #0
 8012572:	e007      	b.n	8012584 <__sfputs_r+0x22>
 8012574:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012578:	463a      	mov	r2, r7
 801257a:	4630      	mov	r0, r6
 801257c:	f7ff ffda 	bl	8012534 <__sfputc_r>
 8012580:	1c43      	adds	r3, r0, #1
 8012582:	d1f3      	bne.n	801256c <__sfputs_r+0xa>
 8012584:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08012588 <_vfiprintf_r>:
 8012588:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801258c:	460d      	mov	r5, r1
 801258e:	b09d      	sub	sp, #116	; 0x74
 8012590:	4614      	mov	r4, r2
 8012592:	4698      	mov	r8, r3
 8012594:	4606      	mov	r6, r0
 8012596:	b118      	cbz	r0, 80125a0 <_vfiprintf_r+0x18>
 8012598:	6983      	ldr	r3, [r0, #24]
 801259a:	b90b      	cbnz	r3, 80125a0 <_vfiprintf_r+0x18>
 801259c:	f000 fb14 	bl	8012bc8 <__sinit>
 80125a0:	4b89      	ldr	r3, [pc, #548]	; (80127c8 <_vfiprintf_r+0x240>)
 80125a2:	429d      	cmp	r5, r3
 80125a4:	d11b      	bne.n	80125de <_vfiprintf_r+0x56>
 80125a6:	6875      	ldr	r5, [r6, #4]
 80125a8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80125aa:	07d9      	lsls	r1, r3, #31
 80125ac:	d405      	bmi.n	80125ba <_vfiprintf_r+0x32>
 80125ae:	89ab      	ldrh	r3, [r5, #12]
 80125b0:	059a      	lsls	r2, r3, #22
 80125b2:	d402      	bmi.n	80125ba <_vfiprintf_r+0x32>
 80125b4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80125b6:	f7ff ff60 	bl	801247a <__retarget_lock_acquire_recursive>
 80125ba:	89ab      	ldrh	r3, [r5, #12]
 80125bc:	071b      	lsls	r3, r3, #28
 80125be:	d501      	bpl.n	80125c4 <_vfiprintf_r+0x3c>
 80125c0:	692b      	ldr	r3, [r5, #16]
 80125c2:	b9eb      	cbnz	r3, 8012600 <_vfiprintf_r+0x78>
 80125c4:	4629      	mov	r1, r5
 80125c6:	4630      	mov	r0, r6
 80125c8:	f000 f96e 	bl	80128a8 <__swsetup_r>
 80125cc:	b1c0      	cbz	r0, 8012600 <_vfiprintf_r+0x78>
 80125ce:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80125d0:	07dc      	lsls	r4, r3, #31
 80125d2:	d50e      	bpl.n	80125f2 <_vfiprintf_r+0x6a>
 80125d4:	f04f 30ff 	mov.w	r0, #4294967295
 80125d8:	b01d      	add	sp, #116	; 0x74
 80125da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80125de:	4b7b      	ldr	r3, [pc, #492]	; (80127cc <_vfiprintf_r+0x244>)
 80125e0:	429d      	cmp	r5, r3
 80125e2:	d101      	bne.n	80125e8 <_vfiprintf_r+0x60>
 80125e4:	68b5      	ldr	r5, [r6, #8]
 80125e6:	e7df      	b.n	80125a8 <_vfiprintf_r+0x20>
 80125e8:	4b79      	ldr	r3, [pc, #484]	; (80127d0 <_vfiprintf_r+0x248>)
 80125ea:	429d      	cmp	r5, r3
 80125ec:	bf08      	it	eq
 80125ee:	68f5      	ldreq	r5, [r6, #12]
 80125f0:	e7da      	b.n	80125a8 <_vfiprintf_r+0x20>
 80125f2:	89ab      	ldrh	r3, [r5, #12]
 80125f4:	0598      	lsls	r0, r3, #22
 80125f6:	d4ed      	bmi.n	80125d4 <_vfiprintf_r+0x4c>
 80125f8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80125fa:	f7ff ff3f 	bl	801247c <__retarget_lock_release_recursive>
 80125fe:	e7e9      	b.n	80125d4 <_vfiprintf_r+0x4c>
 8012600:	2300      	movs	r3, #0
 8012602:	9309      	str	r3, [sp, #36]	; 0x24
 8012604:	2320      	movs	r3, #32
 8012606:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801260a:	f8cd 800c 	str.w	r8, [sp, #12]
 801260e:	2330      	movs	r3, #48	; 0x30
 8012610:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80127d4 <_vfiprintf_r+0x24c>
 8012614:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8012618:	f04f 0901 	mov.w	r9, #1
 801261c:	4623      	mov	r3, r4
 801261e:	469a      	mov	sl, r3
 8012620:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012624:	b10a      	cbz	r2, 801262a <_vfiprintf_r+0xa2>
 8012626:	2a25      	cmp	r2, #37	; 0x25
 8012628:	d1f9      	bne.n	801261e <_vfiprintf_r+0x96>
 801262a:	ebba 0b04 	subs.w	fp, sl, r4
 801262e:	d00b      	beq.n	8012648 <_vfiprintf_r+0xc0>
 8012630:	465b      	mov	r3, fp
 8012632:	4622      	mov	r2, r4
 8012634:	4629      	mov	r1, r5
 8012636:	4630      	mov	r0, r6
 8012638:	f7ff ff93 	bl	8012562 <__sfputs_r>
 801263c:	3001      	adds	r0, #1
 801263e:	f000 80aa 	beq.w	8012796 <_vfiprintf_r+0x20e>
 8012642:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8012644:	445a      	add	r2, fp
 8012646:	9209      	str	r2, [sp, #36]	; 0x24
 8012648:	f89a 3000 	ldrb.w	r3, [sl]
 801264c:	2b00      	cmp	r3, #0
 801264e:	f000 80a2 	beq.w	8012796 <_vfiprintf_r+0x20e>
 8012652:	2300      	movs	r3, #0
 8012654:	f04f 32ff 	mov.w	r2, #4294967295
 8012658:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801265c:	f10a 0a01 	add.w	sl, sl, #1
 8012660:	9304      	str	r3, [sp, #16]
 8012662:	9307      	str	r3, [sp, #28]
 8012664:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8012668:	931a      	str	r3, [sp, #104]	; 0x68
 801266a:	4654      	mov	r4, sl
 801266c:	2205      	movs	r2, #5
 801266e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012672:	4858      	ldr	r0, [pc, #352]	; (80127d4 <_vfiprintf_r+0x24c>)
 8012674:	f7ed fdd4 	bl	8000220 <memchr>
 8012678:	9a04      	ldr	r2, [sp, #16]
 801267a:	b9d8      	cbnz	r0, 80126b4 <_vfiprintf_r+0x12c>
 801267c:	06d1      	lsls	r1, r2, #27
 801267e:	bf44      	itt	mi
 8012680:	2320      	movmi	r3, #32
 8012682:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8012686:	0713      	lsls	r3, r2, #28
 8012688:	bf44      	itt	mi
 801268a:	232b      	movmi	r3, #43	; 0x2b
 801268c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8012690:	f89a 3000 	ldrb.w	r3, [sl]
 8012694:	2b2a      	cmp	r3, #42	; 0x2a
 8012696:	d015      	beq.n	80126c4 <_vfiprintf_r+0x13c>
 8012698:	9a07      	ldr	r2, [sp, #28]
 801269a:	4654      	mov	r4, sl
 801269c:	2000      	movs	r0, #0
 801269e:	f04f 0c0a 	mov.w	ip, #10
 80126a2:	4621      	mov	r1, r4
 80126a4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80126a8:	3b30      	subs	r3, #48	; 0x30
 80126aa:	2b09      	cmp	r3, #9
 80126ac:	d94e      	bls.n	801274c <_vfiprintf_r+0x1c4>
 80126ae:	b1b0      	cbz	r0, 80126de <_vfiprintf_r+0x156>
 80126b0:	9207      	str	r2, [sp, #28]
 80126b2:	e014      	b.n	80126de <_vfiprintf_r+0x156>
 80126b4:	eba0 0308 	sub.w	r3, r0, r8
 80126b8:	fa09 f303 	lsl.w	r3, r9, r3
 80126bc:	4313      	orrs	r3, r2
 80126be:	9304      	str	r3, [sp, #16]
 80126c0:	46a2      	mov	sl, r4
 80126c2:	e7d2      	b.n	801266a <_vfiprintf_r+0xe2>
 80126c4:	9b03      	ldr	r3, [sp, #12]
 80126c6:	1d19      	adds	r1, r3, #4
 80126c8:	681b      	ldr	r3, [r3, #0]
 80126ca:	9103      	str	r1, [sp, #12]
 80126cc:	2b00      	cmp	r3, #0
 80126ce:	bfbb      	ittet	lt
 80126d0:	425b      	neglt	r3, r3
 80126d2:	f042 0202 	orrlt.w	r2, r2, #2
 80126d6:	9307      	strge	r3, [sp, #28]
 80126d8:	9307      	strlt	r3, [sp, #28]
 80126da:	bfb8      	it	lt
 80126dc:	9204      	strlt	r2, [sp, #16]
 80126de:	7823      	ldrb	r3, [r4, #0]
 80126e0:	2b2e      	cmp	r3, #46	; 0x2e
 80126e2:	d10c      	bne.n	80126fe <_vfiprintf_r+0x176>
 80126e4:	7863      	ldrb	r3, [r4, #1]
 80126e6:	2b2a      	cmp	r3, #42	; 0x2a
 80126e8:	d135      	bne.n	8012756 <_vfiprintf_r+0x1ce>
 80126ea:	9b03      	ldr	r3, [sp, #12]
 80126ec:	1d1a      	adds	r2, r3, #4
 80126ee:	681b      	ldr	r3, [r3, #0]
 80126f0:	9203      	str	r2, [sp, #12]
 80126f2:	2b00      	cmp	r3, #0
 80126f4:	bfb8      	it	lt
 80126f6:	f04f 33ff 	movlt.w	r3, #4294967295
 80126fa:	3402      	adds	r4, #2
 80126fc:	9305      	str	r3, [sp, #20]
 80126fe:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80127e4 <_vfiprintf_r+0x25c>
 8012702:	7821      	ldrb	r1, [r4, #0]
 8012704:	2203      	movs	r2, #3
 8012706:	4650      	mov	r0, sl
 8012708:	f7ed fd8a 	bl	8000220 <memchr>
 801270c:	b140      	cbz	r0, 8012720 <_vfiprintf_r+0x198>
 801270e:	2340      	movs	r3, #64	; 0x40
 8012710:	eba0 000a 	sub.w	r0, r0, sl
 8012714:	fa03 f000 	lsl.w	r0, r3, r0
 8012718:	9b04      	ldr	r3, [sp, #16]
 801271a:	4303      	orrs	r3, r0
 801271c:	3401      	adds	r4, #1
 801271e:	9304      	str	r3, [sp, #16]
 8012720:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012724:	482c      	ldr	r0, [pc, #176]	; (80127d8 <_vfiprintf_r+0x250>)
 8012726:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801272a:	2206      	movs	r2, #6
 801272c:	f7ed fd78 	bl	8000220 <memchr>
 8012730:	2800      	cmp	r0, #0
 8012732:	d03f      	beq.n	80127b4 <_vfiprintf_r+0x22c>
 8012734:	4b29      	ldr	r3, [pc, #164]	; (80127dc <_vfiprintf_r+0x254>)
 8012736:	bb1b      	cbnz	r3, 8012780 <_vfiprintf_r+0x1f8>
 8012738:	9b03      	ldr	r3, [sp, #12]
 801273a:	3307      	adds	r3, #7
 801273c:	f023 0307 	bic.w	r3, r3, #7
 8012740:	3308      	adds	r3, #8
 8012742:	9303      	str	r3, [sp, #12]
 8012744:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012746:	443b      	add	r3, r7
 8012748:	9309      	str	r3, [sp, #36]	; 0x24
 801274a:	e767      	b.n	801261c <_vfiprintf_r+0x94>
 801274c:	fb0c 3202 	mla	r2, ip, r2, r3
 8012750:	460c      	mov	r4, r1
 8012752:	2001      	movs	r0, #1
 8012754:	e7a5      	b.n	80126a2 <_vfiprintf_r+0x11a>
 8012756:	2300      	movs	r3, #0
 8012758:	3401      	adds	r4, #1
 801275a:	9305      	str	r3, [sp, #20]
 801275c:	4619      	mov	r1, r3
 801275e:	f04f 0c0a 	mov.w	ip, #10
 8012762:	4620      	mov	r0, r4
 8012764:	f810 2b01 	ldrb.w	r2, [r0], #1
 8012768:	3a30      	subs	r2, #48	; 0x30
 801276a:	2a09      	cmp	r2, #9
 801276c:	d903      	bls.n	8012776 <_vfiprintf_r+0x1ee>
 801276e:	2b00      	cmp	r3, #0
 8012770:	d0c5      	beq.n	80126fe <_vfiprintf_r+0x176>
 8012772:	9105      	str	r1, [sp, #20]
 8012774:	e7c3      	b.n	80126fe <_vfiprintf_r+0x176>
 8012776:	fb0c 2101 	mla	r1, ip, r1, r2
 801277a:	4604      	mov	r4, r0
 801277c:	2301      	movs	r3, #1
 801277e:	e7f0      	b.n	8012762 <_vfiprintf_r+0x1da>
 8012780:	ab03      	add	r3, sp, #12
 8012782:	9300      	str	r3, [sp, #0]
 8012784:	462a      	mov	r2, r5
 8012786:	4b16      	ldr	r3, [pc, #88]	; (80127e0 <_vfiprintf_r+0x258>)
 8012788:	a904      	add	r1, sp, #16
 801278a:	4630      	mov	r0, r6
 801278c:	f7fd febc 	bl	8010508 <_printf_float>
 8012790:	4607      	mov	r7, r0
 8012792:	1c78      	adds	r0, r7, #1
 8012794:	d1d6      	bne.n	8012744 <_vfiprintf_r+0x1bc>
 8012796:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8012798:	07d9      	lsls	r1, r3, #31
 801279a:	d405      	bmi.n	80127a8 <_vfiprintf_r+0x220>
 801279c:	89ab      	ldrh	r3, [r5, #12]
 801279e:	059a      	lsls	r2, r3, #22
 80127a0:	d402      	bmi.n	80127a8 <_vfiprintf_r+0x220>
 80127a2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80127a4:	f7ff fe6a 	bl	801247c <__retarget_lock_release_recursive>
 80127a8:	89ab      	ldrh	r3, [r5, #12]
 80127aa:	065b      	lsls	r3, r3, #25
 80127ac:	f53f af12 	bmi.w	80125d4 <_vfiprintf_r+0x4c>
 80127b0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80127b2:	e711      	b.n	80125d8 <_vfiprintf_r+0x50>
 80127b4:	ab03      	add	r3, sp, #12
 80127b6:	9300      	str	r3, [sp, #0]
 80127b8:	462a      	mov	r2, r5
 80127ba:	4b09      	ldr	r3, [pc, #36]	; (80127e0 <_vfiprintf_r+0x258>)
 80127bc:	a904      	add	r1, sp, #16
 80127be:	4630      	mov	r0, r6
 80127c0:	f7fe f946 	bl	8010a50 <_printf_i>
 80127c4:	e7e4      	b.n	8012790 <_vfiprintf_r+0x208>
 80127c6:	bf00      	nop
 80127c8:	08014cec 	.word	0x08014cec
 80127cc:	08014d0c 	.word	0x08014d0c
 80127d0:	08014ccc 	.word	0x08014ccc
 80127d4:	08014b74 	.word	0x08014b74
 80127d8:	08014b7e 	.word	0x08014b7e
 80127dc:	08010509 	.word	0x08010509
 80127e0:	08012563 	.word	0x08012563
 80127e4:	08014b7a 	.word	0x08014b7a

080127e8 <__swbuf_r>:
 80127e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80127ea:	460e      	mov	r6, r1
 80127ec:	4614      	mov	r4, r2
 80127ee:	4605      	mov	r5, r0
 80127f0:	b118      	cbz	r0, 80127fa <__swbuf_r+0x12>
 80127f2:	6983      	ldr	r3, [r0, #24]
 80127f4:	b90b      	cbnz	r3, 80127fa <__swbuf_r+0x12>
 80127f6:	f000 f9e7 	bl	8012bc8 <__sinit>
 80127fa:	4b21      	ldr	r3, [pc, #132]	; (8012880 <__swbuf_r+0x98>)
 80127fc:	429c      	cmp	r4, r3
 80127fe:	d12b      	bne.n	8012858 <__swbuf_r+0x70>
 8012800:	686c      	ldr	r4, [r5, #4]
 8012802:	69a3      	ldr	r3, [r4, #24]
 8012804:	60a3      	str	r3, [r4, #8]
 8012806:	89a3      	ldrh	r3, [r4, #12]
 8012808:	071a      	lsls	r2, r3, #28
 801280a:	d52f      	bpl.n	801286c <__swbuf_r+0x84>
 801280c:	6923      	ldr	r3, [r4, #16]
 801280e:	b36b      	cbz	r3, 801286c <__swbuf_r+0x84>
 8012810:	6923      	ldr	r3, [r4, #16]
 8012812:	6820      	ldr	r0, [r4, #0]
 8012814:	1ac0      	subs	r0, r0, r3
 8012816:	6963      	ldr	r3, [r4, #20]
 8012818:	b2f6      	uxtb	r6, r6
 801281a:	4283      	cmp	r3, r0
 801281c:	4637      	mov	r7, r6
 801281e:	dc04      	bgt.n	801282a <__swbuf_r+0x42>
 8012820:	4621      	mov	r1, r4
 8012822:	4628      	mov	r0, r5
 8012824:	f000 f93c 	bl	8012aa0 <_fflush_r>
 8012828:	bb30      	cbnz	r0, 8012878 <__swbuf_r+0x90>
 801282a:	68a3      	ldr	r3, [r4, #8]
 801282c:	3b01      	subs	r3, #1
 801282e:	60a3      	str	r3, [r4, #8]
 8012830:	6823      	ldr	r3, [r4, #0]
 8012832:	1c5a      	adds	r2, r3, #1
 8012834:	6022      	str	r2, [r4, #0]
 8012836:	701e      	strb	r6, [r3, #0]
 8012838:	6963      	ldr	r3, [r4, #20]
 801283a:	3001      	adds	r0, #1
 801283c:	4283      	cmp	r3, r0
 801283e:	d004      	beq.n	801284a <__swbuf_r+0x62>
 8012840:	89a3      	ldrh	r3, [r4, #12]
 8012842:	07db      	lsls	r3, r3, #31
 8012844:	d506      	bpl.n	8012854 <__swbuf_r+0x6c>
 8012846:	2e0a      	cmp	r6, #10
 8012848:	d104      	bne.n	8012854 <__swbuf_r+0x6c>
 801284a:	4621      	mov	r1, r4
 801284c:	4628      	mov	r0, r5
 801284e:	f000 f927 	bl	8012aa0 <_fflush_r>
 8012852:	b988      	cbnz	r0, 8012878 <__swbuf_r+0x90>
 8012854:	4638      	mov	r0, r7
 8012856:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012858:	4b0a      	ldr	r3, [pc, #40]	; (8012884 <__swbuf_r+0x9c>)
 801285a:	429c      	cmp	r4, r3
 801285c:	d101      	bne.n	8012862 <__swbuf_r+0x7a>
 801285e:	68ac      	ldr	r4, [r5, #8]
 8012860:	e7cf      	b.n	8012802 <__swbuf_r+0x1a>
 8012862:	4b09      	ldr	r3, [pc, #36]	; (8012888 <__swbuf_r+0xa0>)
 8012864:	429c      	cmp	r4, r3
 8012866:	bf08      	it	eq
 8012868:	68ec      	ldreq	r4, [r5, #12]
 801286a:	e7ca      	b.n	8012802 <__swbuf_r+0x1a>
 801286c:	4621      	mov	r1, r4
 801286e:	4628      	mov	r0, r5
 8012870:	f000 f81a 	bl	80128a8 <__swsetup_r>
 8012874:	2800      	cmp	r0, #0
 8012876:	d0cb      	beq.n	8012810 <__swbuf_r+0x28>
 8012878:	f04f 37ff 	mov.w	r7, #4294967295
 801287c:	e7ea      	b.n	8012854 <__swbuf_r+0x6c>
 801287e:	bf00      	nop
 8012880:	08014cec 	.word	0x08014cec
 8012884:	08014d0c 	.word	0x08014d0c
 8012888:	08014ccc 	.word	0x08014ccc

0801288c <__ascii_wctomb>:
 801288c:	b149      	cbz	r1, 80128a2 <__ascii_wctomb+0x16>
 801288e:	2aff      	cmp	r2, #255	; 0xff
 8012890:	bf85      	ittet	hi
 8012892:	238a      	movhi	r3, #138	; 0x8a
 8012894:	6003      	strhi	r3, [r0, #0]
 8012896:	700a      	strbls	r2, [r1, #0]
 8012898:	f04f 30ff 	movhi.w	r0, #4294967295
 801289c:	bf98      	it	ls
 801289e:	2001      	movls	r0, #1
 80128a0:	4770      	bx	lr
 80128a2:	4608      	mov	r0, r1
 80128a4:	4770      	bx	lr
	...

080128a8 <__swsetup_r>:
 80128a8:	4b32      	ldr	r3, [pc, #200]	; (8012974 <__swsetup_r+0xcc>)
 80128aa:	b570      	push	{r4, r5, r6, lr}
 80128ac:	681d      	ldr	r5, [r3, #0]
 80128ae:	4606      	mov	r6, r0
 80128b0:	460c      	mov	r4, r1
 80128b2:	b125      	cbz	r5, 80128be <__swsetup_r+0x16>
 80128b4:	69ab      	ldr	r3, [r5, #24]
 80128b6:	b913      	cbnz	r3, 80128be <__swsetup_r+0x16>
 80128b8:	4628      	mov	r0, r5
 80128ba:	f000 f985 	bl	8012bc8 <__sinit>
 80128be:	4b2e      	ldr	r3, [pc, #184]	; (8012978 <__swsetup_r+0xd0>)
 80128c0:	429c      	cmp	r4, r3
 80128c2:	d10f      	bne.n	80128e4 <__swsetup_r+0x3c>
 80128c4:	686c      	ldr	r4, [r5, #4]
 80128c6:	89a3      	ldrh	r3, [r4, #12]
 80128c8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80128cc:	0719      	lsls	r1, r3, #28
 80128ce:	d42c      	bmi.n	801292a <__swsetup_r+0x82>
 80128d0:	06dd      	lsls	r5, r3, #27
 80128d2:	d411      	bmi.n	80128f8 <__swsetup_r+0x50>
 80128d4:	2309      	movs	r3, #9
 80128d6:	6033      	str	r3, [r6, #0]
 80128d8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80128dc:	81a3      	strh	r3, [r4, #12]
 80128de:	f04f 30ff 	mov.w	r0, #4294967295
 80128e2:	e03e      	b.n	8012962 <__swsetup_r+0xba>
 80128e4:	4b25      	ldr	r3, [pc, #148]	; (801297c <__swsetup_r+0xd4>)
 80128e6:	429c      	cmp	r4, r3
 80128e8:	d101      	bne.n	80128ee <__swsetup_r+0x46>
 80128ea:	68ac      	ldr	r4, [r5, #8]
 80128ec:	e7eb      	b.n	80128c6 <__swsetup_r+0x1e>
 80128ee:	4b24      	ldr	r3, [pc, #144]	; (8012980 <__swsetup_r+0xd8>)
 80128f0:	429c      	cmp	r4, r3
 80128f2:	bf08      	it	eq
 80128f4:	68ec      	ldreq	r4, [r5, #12]
 80128f6:	e7e6      	b.n	80128c6 <__swsetup_r+0x1e>
 80128f8:	0758      	lsls	r0, r3, #29
 80128fa:	d512      	bpl.n	8012922 <__swsetup_r+0x7a>
 80128fc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80128fe:	b141      	cbz	r1, 8012912 <__swsetup_r+0x6a>
 8012900:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8012904:	4299      	cmp	r1, r3
 8012906:	d002      	beq.n	801290e <__swsetup_r+0x66>
 8012908:	4630      	mov	r0, r6
 801290a:	f7fd fc7d 	bl	8010208 <_free_r>
 801290e:	2300      	movs	r3, #0
 8012910:	6363      	str	r3, [r4, #52]	; 0x34
 8012912:	89a3      	ldrh	r3, [r4, #12]
 8012914:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8012918:	81a3      	strh	r3, [r4, #12]
 801291a:	2300      	movs	r3, #0
 801291c:	6063      	str	r3, [r4, #4]
 801291e:	6923      	ldr	r3, [r4, #16]
 8012920:	6023      	str	r3, [r4, #0]
 8012922:	89a3      	ldrh	r3, [r4, #12]
 8012924:	f043 0308 	orr.w	r3, r3, #8
 8012928:	81a3      	strh	r3, [r4, #12]
 801292a:	6923      	ldr	r3, [r4, #16]
 801292c:	b94b      	cbnz	r3, 8012942 <__swsetup_r+0x9a>
 801292e:	89a3      	ldrh	r3, [r4, #12]
 8012930:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8012934:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8012938:	d003      	beq.n	8012942 <__swsetup_r+0x9a>
 801293a:	4621      	mov	r1, r4
 801293c:	4630      	mov	r0, r6
 801293e:	f000 fa05 	bl	8012d4c <__smakebuf_r>
 8012942:	89a0      	ldrh	r0, [r4, #12]
 8012944:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8012948:	f010 0301 	ands.w	r3, r0, #1
 801294c:	d00a      	beq.n	8012964 <__swsetup_r+0xbc>
 801294e:	2300      	movs	r3, #0
 8012950:	60a3      	str	r3, [r4, #8]
 8012952:	6963      	ldr	r3, [r4, #20]
 8012954:	425b      	negs	r3, r3
 8012956:	61a3      	str	r3, [r4, #24]
 8012958:	6923      	ldr	r3, [r4, #16]
 801295a:	b943      	cbnz	r3, 801296e <__swsetup_r+0xc6>
 801295c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8012960:	d1ba      	bne.n	80128d8 <__swsetup_r+0x30>
 8012962:	bd70      	pop	{r4, r5, r6, pc}
 8012964:	0781      	lsls	r1, r0, #30
 8012966:	bf58      	it	pl
 8012968:	6963      	ldrpl	r3, [r4, #20]
 801296a:	60a3      	str	r3, [r4, #8]
 801296c:	e7f4      	b.n	8012958 <__swsetup_r+0xb0>
 801296e:	2000      	movs	r0, #0
 8012970:	e7f7      	b.n	8012962 <__swsetup_r+0xba>
 8012972:	bf00      	nop
 8012974:	20000208 	.word	0x20000208
 8012978:	08014cec 	.word	0x08014cec
 801297c:	08014d0c 	.word	0x08014d0c
 8012980:	08014ccc 	.word	0x08014ccc

08012984 <abort>:
 8012984:	b508      	push	{r3, lr}
 8012986:	2006      	movs	r0, #6
 8012988:	f000 fa50 	bl	8012e2c <raise>
 801298c:	2001      	movs	r0, #1
 801298e:	f7f0 fb1b 	bl	8002fc8 <_exit>
	...

08012994 <__sflush_r>:
 8012994:	898a      	ldrh	r2, [r1, #12]
 8012996:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801299a:	4605      	mov	r5, r0
 801299c:	0710      	lsls	r0, r2, #28
 801299e:	460c      	mov	r4, r1
 80129a0:	d458      	bmi.n	8012a54 <__sflush_r+0xc0>
 80129a2:	684b      	ldr	r3, [r1, #4]
 80129a4:	2b00      	cmp	r3, #0
 80129a6:	dc05      	bgt.n	80129b4 <__sflush_r+0x20>
 80129a8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80129aa:	2b00      	cmp	r3, #0
 80129ac:	dc02      	bgt.n	80129b4 <__sflush_r+0x20>
 80129ae:	2000      	movs	r0, #0
 80129b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80129b4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80129b6:	2e00      	cmp	r6, #0
 80129b8:	d0f9      	beq.n	80129ae <__sflush_r+0x1a>
 80129ba:	2300      	movs	r3, #0
 80129bc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80129c0:	682f      	ldr	r7, [r5, #0]
 80129c2:	602b      	str	r3, [r5, #0]
 80129c4:	d032      	beq.n	8012a2c <__sflush_r+0x98>
 80129c6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80129c8:	89a3      	ldrh	r3, [r4, #12]
 80129ca:	075a      	lsls	r2, r3, #29
 80129cc:	d505      	bpl.n	80129da <__sflush_r+0x46>
 80129ce:	6863      	ldr	r3, [r4, #4]
 80129d0:	1ac0      	subs	r0, r0, r3
 80129d2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80129d4:	b10b      	cbz	r3, 80129da <__sflush_r+0x46>
 80129d6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80129d8:	1ac0      	subs	r0, r0, r3
 80129da:	2300      	movs	r3, #0
 80129dc:	4602      	mov	r2, r0
 80129de:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80129e0:	6a21      	ldr	r1, [r4, #32]
 80129e2:	4628      	mov	r0, r5
 80129e4:	47b0      	blx	r6
 80129e6:	1c43      	adds	r3, r0, #1
 80129e8:	89a3      	ldrh	r3, [r4, #12]
 80129ea:	d106      	bne.n	80129fa <__sflush_r+0x66>
 80129ec:	6829      	ldr	r1, [r5, #0]
 80129ee:	291d      	cmp	r1, #29
 80129f0:	d82c      	bhi.n	8012a4c <__sflush_r+0xb8>
 80129f2:	4a2a      	ldr	r2, [pc, #168]	; (8012a9c <__sflush_r+0x108>)
 80129f4:	40ca      	lsrs	r2, r1
 80129f6:	07d6      	lsls	r6, r2, #31
 80129f8:	d528      	bpl.n	8012a4c <__sflush_r+0xb8>
 80129fa:	2200      	movs	r2, #0
 80129fc:	6062      	str	r2, [r4, #4]
 80129fe:	04d9      	lsls	r1, r3, #19
 8012a00:	6922      	ldr	r2, [r4, #16]
 8012a02:	6022      	str	r2, [r4, #0]
 8012a04:	d504      	bpl.n	8012a10 <__sflush_r+0x7c>
 8012a06:	1c42      	adds	r2, r0, #1
 8012a08:	d101      	bne.n	8012a0e <__sflush_r+0x7a>
 8012a0a:	682b      	ldr	r3, [r5, #0]
 8012a0c:	b903      	cbnz	r3, 8012a10 <__sflush_r+0x7c>
 8012a0e:	6560      	str	r0, [r4, #84]	; 0x54
 8012a10:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8012a12:	602f      	str	r7, [r5, #0]
 8012a14:	2900      	cmp	r1, #0
 8012a16:	d0ca      	beq.n	80129ae <__sflush_r+0x1a>
 8012a18:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8012a1c:	4299      	cmp	r1, r3
 8012a1e:	d002      	beq.n	8012a26 <__sflush_r+0x92>
 8012a20:	4628      	mov	r0, r5
 8012a22:	f7fd fbf1 	bl	8010208 <_free_r>
 8012a26:	2000      	movs	r0, #0
 8012a28:	6360      	str	r0, [r4, #52]	; 0x34
 8012a2a:	e7c1      	b.n	80129b0 <__sflush_r+0x1c>
 8012a2c:	6a21      	ldr	r1, [r4, #32]
 8012a2e:	2301      	movs	r3, #1
 8012a30:	4628      	mov	r0, r5
 8012a32:	47b0      	blx	r6
 8012a34:	1c41      	adds	r1, r0, #1
 8012a36:	d1c7      	bne.n	80129c8 <__sflush_r+0x34>
 8012a38:	682b      	ldr	r3, [r5, #0]
 8012a3a:	2b00      	cmp	r3, #0
 8012a3c:	d0c4      	beq.n	80129c8 <__sflush_r+0x34>
 8012a3e:	2b1d      	cmp	r3, #29
 8012a40:	d001      	beq.n	8012a46 <__sflush_r+0xb2>
 8012a42:	2b16      	cmp	r3, #22
 8012a44:	d101      	bne.n	8012a4a <__sflush_r+0xb6>
 8012a46:	602f      	str	r7, [r5, #0]
 8012a48:	e7b1      	b.n	80129ae <__sflush_r+0x1a>
 8012a4a:	89a3      	ldrh	r3, [r4, #12]
 8012a4c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012a50:	81a3      	strh	r3, [r4, #12]
 8012a52:	e7ad      	b.n	80129b0 <__sflush_r+0x1c>
 8012a54:	690f      	ldr	r7, [r1, #16]
 8012a56:	2f00      	cmp	r7, #0
 8012a58:	d0a9      	beq.n	80129ae <__sflush_r+0x1a>
 8012a5a:	0793      	lsls	r3, r2, #30
 8012a5c:	680e      	ldr	r6, [r1, #0]
 8012a5e:	bf08      	it	eq
 8012a60:	694b      	ldreq	r3, [r1, #20]
 8012a62:	600f      	str	r7, [r1, #0]
 8012a64:	bf18      	it	ne
 8012a66:	2300      	movne	r3, #0
 8012a68:	eba6 0807 	sub.w	r8, r6, r7
 8012a6c:	608b      	str	r3, [r1, #8]
 8012a6e:	f1b8 0f00 	cmp.w	r8, #0
 8012a72:	dd9c      	ble.n	80129ae <__sflush_r+0x1a>
 8012a74:	6a21      	ldr	r1, [r4, #32]
 8012a76:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8012a78:	4643      	mov	r3, r8
 8012a7a:	463a      	mov	r2, r7
 8012a7c:	4628      	mov	r0, r5
 8012a7e:	47b0      	blx	r6
 8012a80:	2800      	cmp	r0, #0
 8012a82:	dc06      	bgt.n	8012a92 <__sflush_r+0xfe>
 8012a84:	89a3      	ldrh	r3, [r4, #12]
 8012a86:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012a8a:	81a3      	strh	r3, [r4, #12]
 8012a8c:	f04f 30ff 	mov.w	r0, #4294967295
 8012a90:	e78e      	b.n	80129b0 <__sflush_r+0x1c>
 8012a92:	4407      	add	r7, r0
 8012a94:	eba8 0800 	sub.w	r8, r8, r0
 8012a98:	e7e9      	b.n	8012a6e <__sflush_r+0xda>
 8012a9a:	bf00      	nop
 8012a9c:	20400001 	.word	0x20400001

08012aa0 <_fflush_r>:
 8012aa0:	b538      	push	{r3, r4, r5, lr}
 8012aa2:	690b      	ldr	r3, [r1, #16]
 8012aa4:	4605      	mov	r5, r0
 8012aa6:	460c      	mov	r4, r1
 8012aa8:	b913      	cbnz	r3, 8012ab0 <_fflush_r+0x10>
 8012aaa:	2500      	movs	r5, #0
 8012aac:	4628      	mov	r0, r5
 8012aae:	bd38      	pop	{r3, r4, r5, pc}
 8012ab0:	b118      	cbz	r0, 8012aba <_fflush_r+0x1a>
 8012ab2:	6983      	ldr	r3, [r0, #24]
 8012ab4:	b90b      	cbnz	r3, 8012aba <_fflush_r+0x1a>
 8012ab6:	f000 f887 	bl	8012bc8 <__sinit>
 8012aba:	4b14      	ldr	r3, [pc, #80]	; (8012b0c <_fflush_r+0x6c>)
 8012abc:	429c      	cmp	r4, r3
 8012abe:	d11b      	bne.n	8012af8 <_fflush_r+0x58>
 8012ac0:	686c      	ldr	r4, [r5, #4]
 8012ac2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012ac6:	2b00      	cmp	r3, #0
 8012ac8:	d0ef      	beq.n	8012aaa <_fflush_r+0xa>
 8012aca:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8012acc:	07d0      	lsls	r0, r2, #31
 8012ace:	d404      	bmi.n	8012ada <_fflush_r+0x3a>
 8012ad0:	0599      	lsls	r1, r3, #22
 8012ad2:	d402      	bmi.n	8012ada <_fflush_r+0x3a>
 8012ad4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8012ad6:	f7ff fcd0 	bl	801247a <__retarget_lock_acquire_recursive>
 8012ada:	4628      	mov	r0, r5
 8012adc:	4621      	mov	r1, r4
 8012ade:	f7ff ff59 	bl	8012994 <__sflush_r>
 8012ae2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8012ae4:	07da      	lsls	r2, r3, #31
 8012ae6:	4605      	mov	r5, r0
 8012ae8:	d4e0      	bmi.n	8012aac <_fflush_r+0xc>
 8012aea:	89a3      	ldrh	r3, [r4, #12]
 8012aec:	059b      	lsls	r3, r3, #22
 8012aee:	d4dd      	bmi.n	8012aac <_fflush_r+0xc>
 8012af0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8012af2:	f7ff fcc3 	bl	801247c <__retarget_lock_release_recursive>
 8012af6:	e7d9      	b.n	8012aac <_fflush_r+0xc>
 8012af8:	4b05      	ldr	r3, [pc, #20]	; (8012b10 <_fflush_r+0x70>)
 8012afa:	429c      	cmp	r4, r3
 8012afc:	d101      	bne.n	8012b02 <_fflush_r+0x62>
 8012afe:	68ac      	ldr	r4, [r5, #8]
 8012b00:	e7df      	b.n	8012ac2 <_fflush_r+0x22>
 8012b02:	4b04      	ldr	r3, [pc, #16]	; (8012b14 <_fflush_r+0x74>)
 8012b04:	429c      	cmp	r4, r3
 8012b06:	bf08      	it	eq
 8012b08:	68ec      	ldreq	r4, [r5, #12]
 8012b0a:	e7da      	b.n	8012ac2 <_fflush_r+0x22>
 8012b0c:	08014cec 	.word	0x08014cec
 8012b10:	08014d0c 	.word	0x08014d0c
 8012b14:	08014ccc 	.word	0x08014ccc

08012b18 <std>:
 8012b18:	2300      	movs	r3, #0
 8012b1a:	b510      	push	{r4, lr}
 8012b1c:	4604      	mov	r4, r0
 8012b1e:	e9c0 3300 	strd	r3, r3, [r0]
 8012b22:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8012b26:	6083      	str	r3, [r0, #8]
 8012b28:	8181      	strh	r1, [r0, #12]
 8012b2a:	6643      	str	r3, [r0, #100]	; 0x64
 8012b2c:	81c2      	strh	r2, [r0, #14]
 8012b2e:	6183      	str	r3, [r0, #24]
 8012b30:	4619      	mov	r1, r3
 8012b32:	2208      	movs	r2, #8
 8012b34:	305c      	adds	r0, #92	; 0x5c
 8012b36:	f7fd fb5f 	bl	80101f8 <memset>
 8012b3a:	4b05      	ldr	r3, [pc, #20]	; (8012b50 <std+0x38>)
 8012b3c:	6263      	str	r3, [r4, #36]	; 0x24
 8012b3e:	4b05      	ldr	r3, [pc, #20]	; (8012b54 <std+0x3c>)
 8012b40:	62a3      	str	r3, [r4, #40]	; 0x28
 8012b42:	4b05      	ldr	r3, [pc, #20]	; (8012b58 <std+0x40>)
 8012b44:	62e3      	str	r3, [r4, #44]	; 0x2c
 8012b46:	4b05      	ldr	r3, [pc, #20]	; (8012b5c <std+0x44>)
 8012b48:	6224      	str	r4, [r4, #32]
 8012b4a:	6323      	str	r3, [r4, #48]	; 0x30
 8012b4c:	bd10      	pop	{r4, pc}
 8012b4e:	bf00      	nop
 8012b50:	08012e65 	.word	0x08012e65
 8012b54:	08012e87 	.word	0x08012e87
 8012b58:	08012ebf 	.word	0x08012ebf
 8012b5c:	08012ee3 	.word	0x08012ee3

08012b60 <_cleanup_r>:
 8012b60:	4901      	ldr	r1, [pc, #4]	; (8012b68 <_cleanup_r+0x8>)
 8012b62:	f000 b8af 	b.w	8012cc4 <_fwalk_reent>
 8012b66:	bf00      	nop
 8012b68:	08012aa1 	.word	0x08012aa1

08012b6c <__sfmoreglue>:
 8012b6c:	b570      	push	{r4, r5, r6, lr}
 8012b6e:	2268      	movs	r2, #104	; 0x68
 8012b70:	1e4d      	subs	r5, r1, #1
 8012b72:	4355      	muls	r5, r2
 8012b74:	460e      	mov	r6, r1
 8012b76:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8012b7a:	f7fd fbb1 	bl	80102e0 <_malloc_r>
 8012b7e:	4604      	mov	r4, r0
 8012b80:	b140      	cbz	r0, 8012b94 <__sfmoreglue+0x28>
 8012b82:	2100      	movs	r1, #0
 8012b84:	e9c0 1600 	strd	r1, r6, [r0]
 8012b88:	300c      	adds	r0, #12
 8012b8a:	60a0      	str	r0, [r4, #8]
 8012b8c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8012b90:	f7fd fb32 	bl	80101f8 <memset>
 8012b94:	4620      	mov	r0, r4
 8012b96:	bd70      	pop	{r4, r5, r6, pc}

08012b98 <__sfp_lock_acquire>:
 8012b98:	4801      	ldr	r0, [pc, #4]	; (8012ba0 <__sfp_lock_acquire+0x8>)
 8012b9a:	f7ff bc6e 	b.w	801247a <__retarget_lock_acquire_recursive>
 8012b9e:	bf00      	nop
 8012ba0:	2000265d 	.word	0x2000265d

08012ba4 <__sfp_lock_release>:
 8012ba4:	4801      	ldr	r0, [pc, #4]	; (8012bac <__sfp_lock_release+0x8>)
 8012ba6:	f7ff bc69 	b.w	801247c <__retarget_lock_release_recursive>
 8012baa:	bf00      	nop
 8012bac:	2000265d 	.word	0x2000265d

08012bb0 <__sinit_lock_acquire>:
 8012bb0:	4801      	ldr	r0, [pc, #4]	; (8012bb8 <__sinit_lock_acquire+0x8>)
 8012bb2:	f7ff bc62 	b.w	801247a <__retarget_lock_acquire_recursive>
 8012bb6:	bf00      	nop
 8012bb8:	2000265e 	.word	0x2000265e

08012bbc <__sinit_lock_release>:
 8012bbc:	4801      	ldr	r0, [pc, #4]	; (8012bc4 <__sinit_lock_release+0x8>)
 8012bbe:	f7ff bc5d 	b.w	801247c <__retarget_lock_release_recursive>
 8012bc2:	bf00      	nop
 8012bc4:	2000265e 	.word	0x2000265e

08012bc8 <__sinit>:
 8012bc8:	b510      	push	{r4, lr}
 8012bca:	4604      	mov	r4, r0
 8012bcc:	f7ff fff0 	bl	8012bb0 <__sinit_lock_acquire>
 8012bd0:	69a3      	ldr	r3, [r4, #24]
 8012bd2:	b11b      	cbz	r3, 8012bdc <__sinit+0x14>
 8012bd4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012bd8:	f7ff bff0 	b.w	8012bbc <__sinit_lock_release>
 8012bdc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8012be0:	6523      	str	r3, [r4, #80]	; 0x50
 8012be2:	4b13      	ldr	r3, [pc, #76]	; (8012c30 <__sinit+0x68>)
 8012be4:	4a13      	ldr	r2, [pc, #76]	; (8012c34 <__sinit+0x6c>)
 8012be6:	681b      	ldr	r3, [r3, #0]
 8012be8:	62a2      	str	r2, [r4, #40]	; 0x28
 8012bea:	42a3      	cmp	r3, r4
 8012bec:	bf04      	itt	eq
 8012bee:	2301      	moveq	r3, #1
 8012bf0:	61a3      	streq	r3, [r4, #24]
 8012bf2:	4620      	mov	r0, r4
 8012bf4:	f000 f820 	bl	8012c38 <__sfp>
 8012bf8:	6060      	str	r0, [r4, #4]
 8012bfa:	4620      	mov	r0, r4
 8012bfc:	f000 f81c 	bl	8012c38 <__sfp>
 8012c00:	60a0      	str	r0, [r4, #8]
 8012c02:	4620      	mov	r0, r4
 8012c04:	f000 f818 	bl	8012c38 <__sfp>
 8012c08:	2200      	movs	r2, #0
 8012c0a:	60e0      	str	r0, [r4, #12]
 8012c0c:	2104      	movs	r1, #4
 8012c0e:	6860      	ldr	r0, [r4, #4]
 8012c10:	f7ff ff82 	bl	8012b18 <std>
 8012c14:	68a0      	ldr	r0, [r4, #8]
 8012c16:	2201      	movs	r2, #1
 8012c18:	2109      	movs	r1, #9
 8012c1a:	f7ff ff7d 	bl	8012b18 <std>
 8012c1e:	68e0      	ldr	r0, [r4, #12]
 8012c20:	2202      	movs	r2, #2
 8012c22:	2112      	movs	r1, #18
 8012c24:	f7ff ff78 	bl	8012b18 <std>
 8012c28:	2301      	movs	r3, #1
 8012c2a:	61a3      	str	r3, [r4, #24]
 8012c2c:	e7d2      	b.n	8012bd4 <__sinit+0xc>
 8012c2e:	bf00      	nop
 8012c30:	08014954 	.word	0x08014954
 8012c34:	08012b61 	.word	0x08012b61

08012c38 <__sfp>:
 8012c38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012c3a:	4607      	mov	r7, r0
 8012c3c:	f7ff ffac 	bl	8012b98 <__sfp_lock_acquire>
 8012c40:	4b1e      	ldr	r3, [pc, #120]	; (8012cbc <__sfp+0x84>)
 8012c42:	681e      	ldr	r6, [r3, #0]
 8012c44:	69b3      	ldr	r3, [r6, #24]
 8012c46:	b913      	cbnz	r3, 8012c4e <__sfp+0x16>
 8012c48:	4630      	mov	r0, r6
 8012c4a:	f7ff ffbd 	bl	8012bc8 <__sinit>
 8012c4e:	3648      	adds	r6, #72	; 0x48
 8012c50:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8012c54:	3b01      	subs	r3, #1
 8012c56:	d503      	bpl.n	8012c60 <__sfp+0x28>
 8012c58:	6833      	ldr	r3, [r6, #0]
 8012c5a:	b30b      	cbz	r3, 8012ca0 <__sfp+0x68>
 8012c5c:	6836      	ldr	r6, [r6, #0]
 8012c5e:	e7f7      	b.n	8012c50 <__sfp+0x18>
 8012c60:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8012c64:	b9d5      	cbnz	r5, 8012c9c <__sfp+0x64>
 8012c66:	4b16      	ldr	r3, [pc, #88]	; (8012cc0 <__sfp+0x88>)
 8012c68:	60e3      	str	r3, [r4, #12]
 8012c6a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8012c6e:	6665      	str	r5, [r4, #100]	; 0x64
 8012c70:	f7ff fc02 	bl	8012478 <__retarget_lock_init_recursive>
 8012c74:	f7ff ff96 	bl	8012ba4 <__sfp_lock_release>
 8012c78:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8012c7c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8012c80:	6025      	str	r5, [r4, #0]
 8012c82:	61a5      	str	r5, [r4, #24]
 8012c84:	2208      	movs	r2, #8
 8012c86:	4629      	mov	r1, r5
 8012c88:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8012c8c:	f7fd fab4 	bl	80101f8 <memset>
 8012c90:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8012c94:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8012c98:	4620      	mov	r0, r4
 8012c9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012c9c:	3468      	adds	r4, #104	; 0x68
 8012c9e:	e7d9      	b.n	8012c54 <__sfp+0x1c>
 8012ca0:	2104      	movs	r1, #4
 8012ca2:	4638      	mov	r0, r7
 8012ca4:	f7ff ff62 	bl	8012b6c <__sfmoreglue>
 8012ca8:	4604      	mov	r4, r0
 8012caa:	6030      	str	r0, [r6, #0]
 8012cac:	2800      	cmp	r0, #0
 8012cae:	d1d5      	bne.n	8012c5c <__sfp+0x24>
 8012cb0:	f7ff ff78 	bl	8012ba4 <__sfp_lock_release>
 8012cb4:	230c      	movs	r3, #12
 8012cb6:	603b      	str	r3, [r7, #0]
 8012cb8:	e7ee      	b.n	8012c98 <__sfp+0x60>
 8012cba:	bf00      	nop
 8012cbc:	08014954 	.word	0x08014954
 8012cc0:	ffff0001 	.word	0xffff0001

08012cc4 <_fwalk_reent>:
 8012cc4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012cc8:	4606      	mov	r6, r0
 8012cca:	4688      	mov	r8, r1
 8012ccc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8012cd0:	2700      	movs	r7, #0
 8012cd2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8012cd6:	f1b9 0901 	subs.w	r9, r9, #1
 8012cda:	d505      	bpl.n	8012ce8 <_fwalk_reent+0x24>
 8012cdc:	6824      	ldr	r4, [r4, #0]
 8012cde:	2c00      	cmp	r4, #0
 8012ce0:	d1f7      	bne.n	8012cd2 <_fwalk_reent+0xe>
 8012ce2:	4638      	mov	r0, r7
 8012ce4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012ce8:	89ab      	ldrh	r3, [r5, #12]
 8012cea:	2b01      	cmp	r3, #1
 8012cec:	d907      	bls.n	8012cfe <_fwalk_reent+0x3a>
 8012cee:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8012cf2:	3301      	adds	r3, #1
 8012cf4:	d003      	beq.n	8012cfe <_fwalk_reent+0x3a>
 8012cf6:	4629      	mov	r1, r5
 8012cf8:	4630      	mov	r0, r6
 8012cfa:	47c0      	blx	r8
 8012cfc:	4307      	orrs	r7, r0
 8012cfe:	3568      	adds	r5, #104	; 0x68
 8012d00:	e7e9      	b.n	8012cd6 <_fwalk_reent+0x12>

08012d02 <__swhatbuf_r>:
 8012d02:	b570      	push	{r4, r5, r6, lr}
 8012d04:	460e      	mov	r6, r1
 8012d06:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012d0a:	2900      	cmp	r1, #0
 8012d0c:	b096      	sub	sp, #88	; 0x58
 8012d0e:	4614      	mov	r4, r2
 8012d10:	461d      	mov	r5, r3
 8012d12:	da08      	bge.n	8012d26 <__swhatbuf_r+0x24>
 8012d14:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8012d18:	2200      	movs	r2, #0
 8012d1a:	602a      	str	r2, [r5, #0]
 8012d1c:	061a      	lsls	r2, r3, #24
 8012d1e:	d410      	bmi.n	8012d42 <__swhatbuf_r+0x40>
 8012d20:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8012d24:	e00e      	b.n	8012d44 <__swhatbuf_r+0x42>
 8012d26:	466a      	mov	r2, sp
 8012d28:	f000 f902 	bl	8012f30 <_fstat_r>
 8012d2c:	2800      	cmp	r0, #0
 8012d2e:	dbf1      	blt.n	8012d14 <__swhatbuf_r+0x12>
 8012d30:	9a01      	ldr	r2, [sp, #4]
 8012d32:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8012d36:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8012d3a:	425a      	negs	r2, r3
 8012d3c:	415a      	adcs	r2, r3
 8012d3e:	602a      	str	r2, [r5, #0]
 8012d40:	e7ee      	b.n	8012d20 <__swhatbuf_r+0x1e>
 8012d42:	2340      	movs	r3, #64	; 0x40
 8012d44:	2000      	movs	r0, #0
 8012d46:	6023      	str	r3, [r4, #0]
 8012d48:	b016      	add	sp, #88	; 0x58
 8012d4a:	bd70      	pop	{r4, r5, r6, pc}

08012d4c <__smakebuf_r>:
 8012d4c:	898b      	ldrh	r3, [r1, #12]
 8012d4e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8012d50:	079d      	lsls	r5, r3, #30
 8012d52:	4606      	mov	r6, r0
 8012d54:	460c      	mov	r4, r1
 8012d56:	d507      	bpl.n	8012d68 <__smakebuf_r+0x1c>
 8012d58:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8012d5c:	6023      	str	r3, [r4, #0]
 8012d5e:	6123      	str	r3, [r4, #16]
 8012d60:	2301      	movs	r3, #1
 8012d62:	6163      	str	r3, [r4, #20]
 8012d64:	b002      	add	sp, #8
 8012d66:	bd70      	pop	{r4, r5, r6, pc}
 8012d68:	ab01      	add	r3, sp, #4
 8012d6a:	466a      	mov	r2, sp
 8012d6c:	f7ff ffc9 	bl	8012d02 <__swhatbuf_r>
 8012d70:	9900      	ldr	r1, [sp, #0]
 8012d72:	4605      	mov	r5, r0
 8012d74:	4630      	mov	r0, r6
 8012d76:	f7fd fab3 	bl	80102e0 <_malloc_r>
 8012d7a:	b948      	cbnz	r0, 8012d90 <__smakebuf_r+0x44>
 8012d7c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012d80:	059a      	lsls	r2, r3, #22
 8012d82:	d4ef      	bmi.n	8012d64 <__smakebuf_r+0x18>
 8012d84:	f023 0303 	bic.w	r3, r3, #3
 8012d88:	f043 0302 	orr.w	r3, r3, #2
 8012d8c:	81a3      	strh	r3, [r4, #12]
 8012d8e:	e7e3      	b.n	8012d58 <__smakebuf_r+0xc>
 8012d90:	4b0d      	ldr	r3, [pc, #52]	; (8012dc8 <__smakebuf_r+0x7c>)
 8012d92:	62b3      	str	r3, [r6, #40]	; 0x28
 8012d94:	89a3      	ldrh	r3, [r4, #12]
 8012d96:	6020      	str	r0, [r4, #0]
 8012d98:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012d9c:	81a3      	strh	r3, [r4, #12]
 8012d9e:	9b00      	ldr	r3, [sp, #0]
 8012da0:	6163      	str	r3, [r4, #20]
 8012da2:	9b01      	ldr	r3, [sp, #4]
 8012da4:	6120      	str	r0, [r4, #16]
 8012da6:	b15b      	cbz	r3, 8012dc0 <__smakebuf_r+0x74>
 8012da8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8012dac:	4630      	mov	r0, r6
 8012dae:	f000 f8d1 	bl	8012f54 <_isatty_r>
 8012db2:	b128      	cbz	r0, 8012dc0 <__smakebuf_r+0x74>
 8012db4:	89a3      	ldrh	r3, [r4, #12]
 8012db6:	f023 0303 	bic.w	r3, r3, #3
 8012dba:	f043 0301 	orr.w	r3, r3, #1
 8012dbe:	81a3      	strh	r3, [r4, #12]
 8012dc0:	89a0      	ldrh	r0, [r4, #12]
 8012dc2:	4305      	orrs	r5, r0
 8012dc4:	81a5      	strh	r5, [r4, #12]
 8012dc6:	e7cd      	b.n	8012d64 <__smakebuf_r+0x18>
 8012dc8:	08012b61 	.word	0x08012b61

08012dcc <_malloc_usable_size_r>:
 8012dcc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8012dd0:	1f18      	subs	r0, r3, #4
 8012dd2:	2b00      	cmp	r3, #0
 8012dd4:	bfbc      	itt	lt
 8012dd6:	580b      	ldrlt	r3, [r1, r0]
 8012dd8:	18c0      	addlt	r0, r0, r3
 8012dda:	4770      	bx	lr

08012ddc <_raise_r>:
 8012ddc:	291f      	cmp	r1, #31
 8012dde:	b538      	push	{r3, r4, r5, lr}
 8012de0:	4604      	mov	r4, r0
 8012de2:	460d      	mov	r5, r1
 8012de4:	d904      	bls.n	8012df0 <_raise_r+0x14>
 8012de6:	2316      	movs	r3, #22
 8012de8:	6003      	str	r3, [r0, #0]
 8012dea:	f04f 30ff 	mov.w	r0, #4294967295
 8012dee:	bd38      	pop	{r3, r4, r5, pc}
 8012df0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8012df2:	b112      	cbz	r2, 8012dfa <_raise_r+0x1e>
 8012df4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8012df8:	b94b      	cbnz	r3, 8012e0e <_raise_r+0x32>
 8012dfa:	4620      	mov	r0, r4
 8012dfc:	f000 f830 	bl	8012e60 <_getpid_r>
 8012e00:	462a      	mov	r2, r5
 8012e02:	4601      	mov	r1, r0
 8012e04:	4620      	mov	r0, r4
 8012e06:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012e0a:	f000 b817 	b.w	8012e3c <_kill_r>
 8012e0e:	2b01      	cmp	r3, #1
 8012e10:	d00a      	beq.n	8012e28 <_raise_r+0x4c>
 8012e12:	1c59      	adds	r1, r3, #1
 8012e14:	d103      	bne.n	8012e1e <_raise_r+0x42>
 8012e16:	2316      	movs	r3, #22
 8012e18:	6003      	str	r3, [r0, #0]
 8012e1a:	2001      	movs	r0, #1
 8012e1c:	e7e7      	b.n	8012dee <_raise_r+0x12>
 8012e1e:	2400      	movs	r4, #0
 8012e20:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8012e24:	4628      	mov	r0, r5
 8012e26:	4798      	blx	r3
 8012e28:	2000      	movs	r0, #0
 8012e2a:	e7e0      	b.n	8012dee <_raise_r+0x12>

08012e2c <raise>:
 8012e2c:	4b02      	ldr	r3, [pc, #8]	; (8012e38 <raise+0xc>)
 8012e2e:	4601      	mov	r1, r0
 8012e30:	6818      	ldr	r0, [r3, #0]
 8012e32:	f7ff bfd3 	b.w	8012ddc <_raise_r>
 8012e36:	bf00      	nop
 8012e38:	20000208 	.word	0x20000208

08012e3c <_kill_r>:
 8012e3c:	b538      	push	{r3, r4, r5, lr}
 8012e3e:	4d07      	ldr	r5, [pc, #28]	; (8012e5c <_kill_r+0x20>)
 8012e40:	2300      	movs	r3, #0
 8012e42:	4604      	mov	r4, r0
 8012e44:	4608      	mov	r0, r1
 8012e46:	4611      	mov	r1, r2
 8012e48:	602b      	str	r3, [r5, #0]
 8012e4a:	f7f0 f8ad 	bl	8002fa8 <_kill>
 8012e4e:	1c43      	adds	r3, r0, #1
 8012e50:	d102      	bne.n	8012e58 <_kill_r+0x1c>
 8012e52:	682b      	ldr	r3, [r5, #0]
 8012e54:	b103      	cbz	r3, 8012e58 <_kill_r+0x1c>
 8012e56:	6023      	str	r3, [r4, #0]
 8012e58:	bd38      	pop	{r3, r4, r5, pc}
 8012e5a:	bf00      	nop
 8012e5c:	20002658 	.word	0x20002658

08012e60 <_getpid_r>:
 8012e60:	f7f0 b89a 	b.w	8002f98 <_getpid>

08012e64 <__sread>:
 8012e64:	b510      	push	{r4, lr}
 8012e66:	460c      	mov	r4, r1
 8012e68:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012e6c:	f000 f894 	bl	8012f98 <_read_r>
 8012e70:	2800      	cmp	r0, #0
 8012e72:	bfab      	itete	ge
 8012e74:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8012e76:	89a3      	ldrhlt	r3, [r4, #12]
 8012e78:	181b      	addge	r3, r3, r0
 8012e7a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8012e7e:	bfac      	ite	ge
 8012e80:	6563      	strge	r3, [r4, #84]	; 0x54
 8012e82:	81a3      	strhlt	r3, [r4, #12]
 8012e84:	bd10      	pop	{r4, pc}

08012e86 <__swrite>:
 8012e86:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012e8a:	461f      	mov	r7, r3
 8012e8c:	898b      	ldrh	r3, [r1, #12]
 8012e8e:	05db      	lsls	r3, r3, #23
 8012e90:	4605      	mov	r5, r0
 8012e92:	460c      	mov	r4, r1
 8012e94:	4616      	mov	r6, r2
 8012e96:	d505      	bpl.n	8012ea4 <__swrite+0x1e>
 8012e98:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012e9c:	2302      	movs	r3, #2
 8012e9e:	2200      	movs	r2, #0
 8012ea0:	f000 f868 	bl	8012f74 <_lseek_r>
 8012ea4:	89a3      	ldrh	r3, [r4, #12]
 8012ea6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8012eaa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8012eae:	81a3      	strh	r3, [r4, #12]
 8012eb0:	4632      	mov	r2, r6
 8012eb2:	463b      	mov	r3, r7
 8012eb4:	4628      	mov	r0, r5
 8012eb6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012eba:	f000 b817 	b.w	8012eec <_write_r>

08012ebe <__sseek>:
 8012ebe:	b510      	push	{r4, lr}
 8012ec0:	460c      	mov	r4, r1
 8012ec2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012ec6:	f000 f855 	bl	8012f74 <_lseek_r>
 8012eca:	1c43      	adds	r3, r0, #1
 8012ecc:	89a3      	ldrh	r3, [r4, #12]
 8012ece:	bf15      	itete	ne
 8012ed0:	6560      	strne	r0, [r4, #84]	; 0x54
 8012ed2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8012ed6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8012eda:	81a3      	strheq	r3, [r4, #12]
 8012edc:	bf18      	it	ne
 8012ede:	81a3      	strhne	r3, [r4, #12]
 8012ee0:	bd10      	pop	{r4, pc}

08012ee2 <__sclose>:
 8012ee2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012ee6:	f000 b813 	b.w	8012f10 <_close_r>
	...

08012eec <_write_r>:
 8012eec:	b538      	push	{r3, r4, r5, lr}
 8012eee:	4d07      	ldr	r5, [pc, #28]	; (8012f0c <_write_r+0x20>)
 8012ef0:	4604      	mov	r4, r0
 8012ef2:	4608      	mov	r0, r1
 8012ef4:	4611      	mov	r1, r2
 8012ef6:	2200      	movs	r2, #0
 8012ef8:	602a      	str	r2, [r5, #0]
 8012efa:	461a      	mov	r2, r3
 8012efc:	f7f0 f88b 	bl	8003016 <_write>
 8012f00:	1c43      	adds	r3, r0, #1
 8012f02:	d102      	bne.n	8012f0a <_write_r+0x1e>
 8012f04:	682b      	ldr	r3, [r5, #0]
 8012f06:	b103      	cbz	r3, 8012f0a <_write_r+0x1e>
 8012f08:	6023      	str	r3, [r4, #0]
 8012f0a:	bd38      	pop	{r3, r4, r5, pc}
 8012f0c:	20002658 	.word	0x20002658

08012f10 <_close_r>:
 8012f10:	b538      	push	{r3, r4, r5, lr}
 8012f12:	4d06      	ldr	r5, [pc, #24]	; (8012f2c <_close_r+0x1c>)
 8012f14:	2300      	movs	r3, #0
 8012f16:	4604      	mov	r4, r0
 8012f18:	4608      	mov	r0, r1
 8012f1a:	602b      	str	r3, [r5, #0]
 8012f1c:	f7f0 f897 	bl	800304e <_close>
 8012f20:	1c43      	adds	r3, r0, #1
 8012f22:	d102      	bne.n	8012f2a <_close_r+0x1a>
 8012f24:	682b      	ldr	r3, [r5, #0]
 8012f26:	b103      	cbz	r3, 8012f2a <_close_r+0x1a>
 8012f28:	6023      	str	r3, [r4, #0]
 8012f2a:	bd38      	pop	{r3, r4, r5, pc}
 8012f2c:	20002658 	.word	0x20002658

08012f30 <_fstat_r>:
 8012f30:	b538      	push	{r3, r4, r5, lr}
 8012f32:	4d07      	ldr	r5, [pc, #28]	; (8012f50 <_fstat_r+0x20>)
 8012f34:	2300      	movs	r3, #0
 8012f36:	4604      	mov	r4, r0
 8012f38:	4608      	mov	r0, r1
 8012f3a:	4611      	mov	r1, r2
 8012f3c:	602b      	str	r3, [r5, #0]
 8012f3e:	f7f0 f892 	bl	8003066 <_fstat>
 8012f42:	1c43      	adds	r3, r0, #1
 8012f44:	d102      	bne.n	8012f4c <_fstat_r+0x1c>
 8012f46:	682b      	ldr	r3, [r5, #0]
 8012f48:	b103      	cbz	r3, 8012f4c <_fstat_r+0x1c>
 8012f4a:	6023      	str	r3, [r4, #0]
 8012f4c:	bd38      	pop	{r3, r4, r5, pc}
 8012f4e:	bf00      	nop
 8012f50:	20002658 	.word	0x20002658

08012f54 <_isatty_r>:
 8012f54:	b538      	push	{r3, r4, r5, lr}
 8012f56:	4d06      	ldr	r5, [pc, #24]	; (8012f70 <_isatty_r+0x1c>)
 8012f58:	2300      	movs	r3, #0
 8012f5a:	4604      	mov	r4, r0
 8012f5c:	4608      	mov	r0, r1
 8012f5e:	602b      	str	r3, [r5, #0]
 8012f60:	f7f0 f891 	bl	8003086 <_isatty>
 8012f64:	1c43      	adds	r3, r0, #1
 8012f66:	d102      	bne.n	8012f6e <_isatty_r+0x1a>
 8012f68:	682b      	ldr	r3, [r5, #0]
 8012f6a:	b103      	cbz	r3, 8012f6e <_isatty_r+0x1a>
 8012f6c:	6023      	str	r3, [r4, #0]
 8012f6e:	bd38      	pop	{r3, r4, r5, pc}
 8012f70:	20002658 	.word	0x20002658

08012f74 <_lseek_r>:
 8012f74:	b538      	push	{r3, r4, r5, lr}
 8012f76:	4d07      	ldr	r5, [pc, #28]	; (8012f94 <_lseek_r+0x20>)
 8012f78:	4604      	mov	r4, r0
 8012f7a:	4608      	mov	r0, r1
 8012f7c:	4611      	mov	r1, r2
 8012f7e:	2200      	movs	r2, #0
 8012f80:	602a      	str	r2, [r5, #0]
 8012f82:	461a      	mov	r2, r3
 8012f84:	f7f0 f88a 	bl	800309c <_lseek>
 8012f88:	1c43      	adds	r3, r0, #1
 8012f8a:	d102      	bne.n	8012f92 <_lseek_r+0x1e>
 8012f8c:	682b      	ldr	r3, [r5, #0]
 8012f8e:	b103      	cbz	r3, 8012f92 <_lseek_r+0x1e>
 8012f90:	6023      	str	r3, [r4, #0]
 8012f92:	bd38      	pop	{r3, r4, r5, pc}
 8012f94:	20002658 	.word	0x20002658

08012f98 <_read_r>:
 8012f98:	b538      	push	{r3, r4, r5, lr}
 8012f9a:	4d07      	ldr	r5, [pc, #28]	; (8012fb8 <_read_r+0x20>)
 8012f9c:	4604      	mov	r4, r0
 8012f9e:	4608      	mov	r0, r1
 8012fa0:	4611      	mov	r1, r2
 8012fa2:	2200      	movs	r2, #0
 8012fa4:	602a      	str	r2, [r5, #0]
 8012fa6:	461a      	mov	r2, r3
 8012fa8:	f7f0 f818 	bl	8002fdc <_read>
 8012fac:	1c43      	adds	r3, r0, #1
 8012fae:	d102      	bne.n	8012fb6 <_read_r+0x1e>
 8012fb0:	682b      	ldr	r3, [r5, #0]
 8012fb2:	b103      	cbz	r3, 8012fb6 <_read_r+0x1e>
 8012fb4:	6023      	str	r3, [r4, #0]
 8012fb6:	bd38      	pop	{r3, r4, r5, pc}
 8012fb8:	20002658 	.word	0x20002658
 8012fbc:	00000000 	.word	0x00000000

08012fc0 <cos>:
 8012fc0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8012fc2:	ec53 2b10 	vmov	r2, r3, d0
 8012fc6:	4826      	ldr	r0, [pc, #152]	; (8013060 <cos+0xa0>)
 8012fc8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8012fcc:	4281      	cmp	r1, r0
 8012fce:	dc06      	bgt.n	8012fde <cos+0x1e>
 8012fd0:	ed9f 1b21 	vldr	d1, [pc, #132]	; 8013058 <cos+0x98>
 8012fd4:	b005      	add	sp, #20
 8012fd6:	f85d eb04 	ldr.w	lr, [sp], #4
 8012fda:	f000 bbf9 	b.w	80137d0 <__kernel_cos>
 8012fde:	4821      	ldr	r0, [pc, #132]	; (8013064 <cos+0xa4>)
 8012fe0:	4281      	cmp	r1, r0
 8012fe2:	dd09      	ble.n	8012ff8 <cos+0x38>
 8012fe4:	ee10 0a10 	vmov	r0, s0
 8012fe8:	4619      	mov	r1, r3
 8012fea:	f7ed f96d 	bl	80002c8 <__aeabi_dsub>
 8012fee:	ec41 0b10 	vmov	d0, r0, r1
 8012ff2:	b005      	add	sp, #20
 8012ff4:	f85d fb04 	ldr.w	pc, [sp], #4
 8012ff8:	4668      	mov	r0, sp
 8012ffa:	f000 f9dd 	bl	80133b8 <__ieee754_rem_pio2>
 8012ffe:	f000 0003 	and.w	r0, r0, #3
 8013002:	2801      	cmp	r0, #1
 8013004:	d00b      	beq.n	801301e <cos+0x5e>
 8013006:	2802      	cmp	r0, #2
 8013008:	d016      	beq.n	8013038 <cos+0x78>
 801300a:	b9e0      	cbnz	r0, 8013046 <cos+0x86>
 801300c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8013010:	ed9d 0b00 	vldr	d0, [sp]
 8013014:	f000 fbdc 	bl	80137d0 <__kernel_cos>
 8013018:	ec51 0b10 	vmov	r0, r1, d0
 801301c:	e7e7      	b.n	8012fee <cos+0x2e>
 801301e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8013022:	ed9d 0b00 	vldr	d0, [sp]
 8013026:	f000 ffeb 	bl	8014000 <__kernel_sin>
 801302a:	ec53 2b10 	vmov	r2, r3, d0
 801302e:	ee10 0a10 	vmov	r0, s0
 8013032:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8013036:	e7da      	b.n	8012fee <cos+0x2e>
 8013038:	ed9d 1b02 	vldr	d1, [sp, #8]
 801303c:	ed9d 0b00 	vldr	d0, [sp]
 8013040:	f000 fbc6 	bl	80137d0 <__kernel_cos>
 8013044:	e7f1      	b.n	801302a <cos+0x6a>
 8013046:	ed9d 1b02 	vldr	d1, [sp, #8]
 801304a:	ed9d 0b00 	vldr	d0, [sp]
 801304e:	2001      	movs	r0, #1
 8013050:	f000 ffd6 	bl	8014000 <__kernel_sin>
 8013054:	e7e0      	b.n	8013018 <cos+0x58>
 8013056:	bf00      	nop
	...
 8013060:	3fe921fb 	.word	0x3fe921fb
 8013064:	7fefffff 	.word	0x7fefffff

08013068 <sin>:
 8013068:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801306a:	ec53 2b10 	vmov	r2, r3, d0
 801306e:	4828      	ldr	r0, [pc, #160]	; (8013110 <sin+0xa8>)
 8013070:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8013074:	4281      	cmp	r1, r0
 8013076:	dc07      	bgt.n	8013088 <sin+0x20>
 8013078:	ed9f 1b23 	vldr	d1, [pc, #140]	; 8013108 <sin+0xa0>
 801307c:	2000      	movs	r0, #0
 801307e:	b005      	add	sp, #20
 8013080:	f85d eb04 	ldr.w	lr, [sp], #4
 8013084:	f000 bfbc 	b.w	8014000 <__kernel_sin>
 8013088:	4822      	ldr	r0, [pc, #136]	; (8013114 <sin+0xac>)
 801308a:	4281      	cmp	r1, r0
 801308c:	dd09      	ble.n	80130a2 <sin+0x3a>
 801308e:	ee10 0a10 	vmov	r0, s0
 8013092:	4619      	mov	r1, r3
 8013094:	f7ed f918 	bl	80002c8 <__aeabi_dsub>
 8013098:	ec41 0b10 	vmov	d0, r0, r1
 801309c:	b005      	add	sp, #20
 801309e:	f85d fb04 	ldr.w	pc, [sp], #4
 80130a2:	4668      	mov	r0, sp
 80130a4:	f000 f988 	bl	80133b8 <__ieee754_rem_pio2>
 80130a8:	f000 0003 	and.w	r0, r0, #3
 80130ac:	2801      	cmp	r0, #1
 80130ae:	d00c      	beq.n	80130ca <sin+0x62>
 80130b0:	2802      	cmp	r0, #2
 80130b2:	d011      	beq.n	80130d8 <sin+0x70>
 80130b4:	b9f0      	cbnz	r0, 80130f4 <sin+0x8c>
 80130b6:	ed9d 1b02 	vldr	d1, [sp, #8]
 80130ba:	ed9d 0b00 	vldr	d0, [sp]
 80130be:	2001      	movs	r0, #1
 80130c0:	f000 ff9e 	bl	8014000 <__kernel_sin>
 80130c4:	ec51 0b10 	vmov	r0, r1, d0
 80130c8:	e7e6      	b.n	8013098 <sin+0x30>
 80130ca:	ed9d 1b02 	vldr	d1, [sp, #8]
 80130ce:	ed9d 0b00 	vldr	d0, [sp]
 80130d2:	f000 fb7d 	bl	80137d0 <__kernel_cos>
 80130d6:	e7f5      	b.n	80130c4 <sin+0x5c>
 80130d8:	ed9d 1b02 	vldr	d1, [sp, #8]
 80130dc:	ed9d 0b00 	vldr	d0, [sp]
 80130e0:	2001      	movs	r0, #1
 80130e2:	f000 ff8d 	bl	8014000 <__kernel_sin>
 80130e6:	ec53 2b10 	vmov	r2, r3, d0
 80130ea:	ee10 0a10 	vmov	r0, s0
 80130ee:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80130f2:	e7d1      	b.n	8013098 <sin+0x30>
 80130f4:	ed9d 1b02 	vldr	d1, [sp, #8]
 80130f8:	ed9d 0b00 	vldr	d0, [sp]
 80130fc:	f000 fb68 	bl	80137d0 <__kernel_cos>
 8013100:	e7f1      	b.n	80130e6 <sin+0x7e>
 8013102:	bf00      	nop
 8013104:	f3af 8000 	nop.w
	...
 8013110:	3fe921fb 	.word	0x3fe921fb
 8013114:	7fefffff 	.word	0x7fefffff

08013118 <tan>:
 8013118:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801311a:	ec53 2b10 	vmov	r2, r3, d0
 801311e:	4816      	ldr	r0, [pc, #88]	; (8013178 <tan+0x60>)
 8013120:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8013124:	4281      	cmp	r1, r0
 8013126:	dc07      	bgt.n	8013138 <tan+0x20>
 8013128:	ed9f 1b11 	vldr	d1, [pc, #68]	; 8013170 <tan+0x58>
 801312c:	2001      	movs	r0, #1
 801312e:	b005      	add	sp, #20
 8013130:	f85d eb04 	ldr.w	lr, [sp], #4
 8013134:	f001 b824 	b.w	8014180 <__kernel_tan>
 8013138:	4810      	ldr	r0, [pc, #64]	; (801317c <tan+0x64>)
 801313a:	4281      	cmp	r1, r0
 801313c:	dd09      	ble.n	8013152 <tan+0x3a>
 801313e:	ee10 0a10 	vmov	r0, s0
 8013142:	4619      	mov	r1, r3
 8013144:	f7ed f8c0 	bl	80002c8 <__aeabi_dsub>
 8013148:	ec41 0b10 	vmov	d0, r0, r1
 801314c:	b005      	add	sp, #20
 801314e:	f85d fb04 	ldr.w	pc, [sp], #4
 8013152:	4668      	mov	r0, sp
 8013154:	f000 f930 	bl	80133b8 <__ieee754_rem_pio2>
 8013158:	0040      	lsls	r0, r0, #1
 801315a:	f000 0002 	and.w	r0, r0, #2
 801315e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8013162:	ed9d 0b00 	vldr	d0, [sp]
 8013166:	f1c0 0001 	rsb	r0, r0, #1
 801316a:	f001 f809 	bl	8014180 <__kernel_tan>
 801316e:	e7ed      	b.n	801314c <tan+0x34>
	...
 8013178:	3fe921fb 	.word	0x3fe921fb
 801317c:	7fefffff 	.word	0x7fefffff

08013180 <atanf>:
 8013180:	b538      	push	{r3, r4, r5, lr}
 8013182:	ee10 5a10 	vmov	r5, s0
 8013186:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 801318a:	f1b4 4fa1 	cmp.w	r4, #1350565888	; 0x50800000
 801318e:	eef0 7a40 	vmov.f32	s15, s0
 8013192:	db10      	blt.n	80131b6 <atanf+0x36>
 8013194:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 8013198:	dd04      	ble.n	80131a4 <atanf+0x24>
 801319a:	ee70 7a00 	vadd.f32	s15, s0, s0
 801319e:	eeb0 0a67 	vmov.f32	s0, s15
 80131a2:	bd38      	pop	{r3, r4, r5, pc}
 80131a4:	eddf 7a4d 	vldr	s15, [pc, #308]	; 80132dc <atanf+0x15c>
 80131a8:	ed9f 0a4d 	vldr	s0, [pc, #308]	; 80132e0 <atanf+0x160>
 80131ac:	2d00      	cmp	r5, #0
 80131ae:	bfd8      	it	le
 80131b0:	eef0 7a40 	vmovle.f32	s15, s0
 80131b4:	e7f3      	b.n	801319e <atanf+0x1e>
 80131b6:	4b4b      	ldr	r3, [pc, #300]	; (80132e4 <atanf+0x164>)
 80131b8:	429c      	cmp	r4, r3
 80131ba:	dc10      	bgt.n	80131de <atanf+0x5e>
 80131bc:	f1b4 5f44 	cmp.w	r4, #822083584	; 0x31000000
 80131c0:	da0a      	bge.n	80131d8 <atanf+0x58>
 80131c2:	ed9f 7a49 	vldr	s14, [pc, #292]	; 80132e8 <atanf+0x168>
 80131c6:	ee30 7a07 	vadd.f32	s14, s0, s14
 80131ca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80131ce:	eeb4 7ae6 	vcmpe.f32	s14, s13
 80131d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80131d6:	dce2      	bgt.n	801319e <atanf+0x1e>
 80131d8:	f04f 33ff 	mov.w	r3, #4294967295
 80131dc:	e013      	b.n	8013206 <atanf+0x86>
 80131de:	f000 f8a3 	bl	8013328 <fabsf>
 80131e2:	4b42      	ldr	r3, [pc, #264]	; (80132ec <atanf+0x16c>)
 80131e4:	429c      	cmp	r4, r3
 80131e6:	dc4f      	bgt.n	8013288 <atanf+0x108>
 80131e8:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 80131ec:	429c      	cmp	r4, r3
 80131ee:	dc41      	bgt.n	8013274 <atanf+0xf4>
 80131f0:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 80131f4:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 80131f8:	eea0 7a27 	vfma.f32	s14, s0, s15
 80131fc:	2300      	movs	r3, #0
 80131fe:	ee30 0a27 	vadd.f32	s0, s0, s15
 8013202:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8013206:	1c5a      	adds	r2, r3, #1
 8013208:	ee27 6aa7 	vmul.f32	s12, s15, s15
 801320c:	ed9f 7a38 	vldr	s14, [pc, #224]	; 80132f0 <atanf+0x170>
 8013210:	eddf 5a38 	vldr	s11, [pc, #224]	; 80132f4 <atanf+0x174>
 8013214:	ed9f 5a38 	vldr	s10, [pc, #224]	; 80132f8 <atanf+0x178>
 8013218:	ee66 6a06 	vmul.f32	s13, s12, s12
 801321c:	eee6 5a87 	vfma.f32	s11, s13, s14
 8013220:	ed9f 7a36 	vldr	s14, [pc, #216]	; 80132fc <atanf+0x17c>
 8013224:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8013228:	eddf 5a35 	vldr	s11, [pc, #212]	; 8013300 <atanf+0x180>
 801322c:	eee7 5a26 	vfma.f32	s11, s14, s13
 8013230:	ed9f 7a34 	vldr	s14, [pc, #208]	; 8013304 <atanf+0x184>
 8013234:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8013238:	eddf 5a33 	vldr	s11, [pc, #204]	; 8013308 <atanf+0x188>
 801323c:	eee7 5a26 	vfma.f32	s11, s14, s13
 8013240:	ed9f 7a32 	vldr	s14, [pc, #200]	; 801330c <atanf+0x18c>
 8013244:	eea6 5a87 	vfma.f32	s10, s13, s14
 8013248:	ed9f 7a31 	vldr	s14, [pc, #196]	; 8013310 <atanf+0x190>
 801324c:	eea5 7a26 	vfma.f32	s14, s10, s13
 8013250:	ed9f 5a30 	vldr	s10, [pc, #192]	; 8013314 <atanf+0x194>
 8013254:	eea7 5a26 	vfma.f32	s10, s14, s13
 8013258:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8013318 <atanf+0x198>
 801325c:	eea5 7a26 	vfma.f32	s14, s10, s13
 8013260:	ee27 7a26 	vmul.f32	s14, s14, s13
 8013264:	eea5 7a86 	vfma.f32	s14, s11, s12
 8013268:	ee27 7a87 	vmul.f32	s14, s15, s14
 801326c:	d121      	bne.n	80132b2 <atanf+0x132>
 801326e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8013272:	e794      	b.n	801319e <atanf+0x1e>
 8013274:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8013278:	ee30 7a67 	vsub.f32	s14, s0, s15
 801327c:	ee30 0a27 	vadd.f32	s0, s0, s15
 8013280:	2301      	movs	r3, #1
 8013282:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8013286:	e7be      	b.n	8013206 <atanf+0x86>
 8013288:	4b24      	ldr	r3, [pc, #144]	; (801331c <atanf+0x19c>)
 801328a:	429c      	cmp	r4, r3
 801328c:	dc0b      	bgt.n	80132a6 <atanf+0x126>
 801328e:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
 8013292:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8013296:	eea0 7a27 	vfma.f32	s14, s0, s15
 801329a:	2302      	movs	r3, #2
 801329c:	ee70 6a67 	vsub.f32	s13, s0, s15
 80132a0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80132a4:	e7af      	b.n	8013206 <atanf+0x86>
 80132a6:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 80132aa:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80132ae:	2303      	movs	r3, #3
 80132b0:	e7a9      	b.n	8013206 <atanf+0x86>
 80132b2:	4a1b      	ldr	r2, [pc, #108]	; (8013320 <atanf+0x1a0>)
 80132b4:	491b      	ldr	r1, [pc, #108]	; (8013324 <atanf+0x1a4>)
 80132b6:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 80132ba:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 80132be:	ed93 0a00 	vldr	s0, [r3]
 80132c2:	ee37 7a40 	vsub.f32	s14, s14, s0
 80132c6:	ed92 0a00 	vldr	s0, [r2]
 80132ca:	ee77 7a67 	vsub.f32	s15, s14, s15
 80132ce:	2d00      	cmp	r5, #0
 80132d0:	ee70 7a67 	vsub.f32	s15, s0, s15
 80132d4:	bfb8      	it	lt
 80132d6:	eef1 7a67 	vneglt.f32	s15, s15
 80132da:	e760      	b.n	801319e <atanf+0x1e>
 80132dc:	3fc90fdb 	.word	0x3fc90fdb
 80132e0:	bfc90fdb 	.word	0xbfc90fdb
 80132e4:	3edfffff 	.word	0x3edfffff
 80132e8:	7149f2ca 	.word	0x7149f2ca
 80132ec:	3f97ffff 	.word	0x3f97ffff
 80132f0:	3c8569d7 	.word	0x3c8569d7
 80132f4:	3d4bda59 	.word	0x3d4bda59
 80132f8:	bd6ef16b 	.word	0xbd6ef16b
 80132fc:	3d886b35 	.word	0x3d886b35
 8013300:	3dba2e6e 	.word	0x3dba2e6e
 8013304:	3e124925 	.word	0x3e124925
 8013308:	3eaaaaab 	.word	0x3eaaaaab
 801330c:	bd15a221 	.word	0xbd15a221
 8013310:	bd9d8795 	.word	0xbd9d8795
 8013314:	bde38e38 	.word	0xbde38e38
 8013318:	be4ccccd 	.word	0xbe4ccccd
 801331c:	401bffff 	.word	0x401bffff
 8013320:	08014d2c 	.word	0x08014d2c
 8013324:	08014d3c 	.word	0x08014d3c

08013328 <fabsf>:
 8013328:	ee10 3a10 	vmov	r3, s0
 801332c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8013330:	ee00 3a10 	vmov	s0, r3
 8013334:	4770      	bx	lr
	...

08013338 <lrintf>:
 8013338:	ee10 3a10 	vmov	r3, s0
 801333c:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8013340:	f1a2 007f 	sub.w	r0, r2, #127	; 0x7f
 8013344:	281e      	cmp	r0, #30
 8013346:	b082      	sub	sp, #8
 8013348:	dc2e      	bgt.n	80133a8 <lrintf+0x70>
 801334a:	1c41      	adds	r1, r0, #1
 801334c:	da02      	bge.n	8013354 <lrintf+0x1c>
 801334e:	2000      	movs	r0, #0
 8013350:	b002      	add	sp, #8
 8013352:	4770      	bx	lr
 8013354:	2816      	cmp	r0, #22
 8013356:	ea4f 71d3 	mov.w	r1, r3, lsr #31
 801335a:	dd09      	ble.n	8013370 <lrintf+0x38>
 801335c:	f3c3 0016 	ubfx	r0, r3, #0, #23
 8013360:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8013364:	3a96      	subs	r2, #150	; 0x96
 8013366:	4090      	lsls	r0, r2
 8013368:	2900      	cmp	r1, #0
 801336a:	d0f1      	beq.n	8013350 <lrintf+0x18>
 801336c:	4240      	negs	r0, r0
 801336e:	e7ef      	b.n	8013350 <lrintf+0x18>
 8013370:	4b10      	ldr	r3, [pc, #64]	; (80133b4 <lrintf+0x7c>)
 8013372:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 8013376:	ed93 7a00 	vldr	s14, [r3]
 801337a:	ee37 0a00 	vadd.f32	s0, s14, s0
 801337e:	ed8d 0a01 	vstr	s0, [sp, #4]
 8013382:	eddd 7a01 	vldr	s15, [sp, #4]
 8013386:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801338a:	ee17 3a90 	vmov	r3, s15
 801338e:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 8013392:	d0dc      	beq.n	801334e <lrintf+0x16>
 8013394:	f3c3 0016 	ubfx	r0, r3, #0, #23
 8013398:	f3c3 53c7 	ubfx	r3, r3, #23, #8
 801339c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80133a0:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 80133a4:	40d8      	lsrs	r0, r3
 80133a6:	e7df      	b.n	8013368 <lrintf+0x30>
 80133a8:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 80133ac:	ee17 0a90 	vmov	r0, s15
 80133b0:	e7ce      	b.n	8013350 <lrintf+0x18>
 80133b2:	bf00      	nop
 80133b4:	08014d4c 	.word	0x08014d4c

080133b8 <__ieee754_rem_pio2>:
 80133b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80133bc:	ed2d 8b02 	vpush	{d8}
 80133c0:	ec55 4b10 	vmov	r4, r5, d0
 80133c4:	4bca      	ldr	r3, [pc, #808]	; (80136f0 <__ieee754_rem_pio2+0x338>)
 80133c6:	b08b      	sub	sp, #44	; 0x2c
 80133c8:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 80133cc:	4598      	cmp	r8, r3
 80133ce:	4682      	mov	sl, r0
 80133d0:	9502      	str	r5, [sp, #8]
 80133d2:	dc08      	bgt.n	80133e6 <__ieee754_rem_pio2+0x2e>
 80133d4:	2200      	movs	r2, #0
 80133d6:	2300      	movs	r3, #0
 80133d8:	ed80 0b00 	vstr	d0, [r0]
 80133dc:	e9c0 2302 	strd	r2, r3, [r0, #8]
 80133e0:	f04f 0b00 	mov.w	fp, #0
 80133e4:	e028      	b.n	8013438 <__ieee754_rem_pio2+0x80>
 80133e6:	4bc3      	ldr	r3, [pc, #780]	; (80136f4 <__ieee754_rem_pio2+0x33c>)
 80133e8:	4598      	cmp	r8, r3
 80133ea:	dc78      	bgt.n	80134de <__ieee754_rem_pio2+0x126>
 80133ec:	9b02      	ldr	r3, [sp, #8]
 80133ee:	4ec2      	ldr	r6, [pc, #776]	; (80136f8 <__ieee754_rem_pio2+0x340>)
 80133f0:	2b00      	cmp	r3, #0
 80133f2:	ee10 0a10 	vmov	r0, s0
 80133f6:	a3b0      	add	r3, pc, #704	; (adr r3, 80136b8 <__ieee754_rem_pio2+0x300>)
 80133f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80133fc:	4629      	mov	r1, r5
 80133fe:	dd39      	ble.n	8013474 <__ieee754_rem_pio2+0xbc>
 8013400:	f7ec ff62 	bl	80002c8 <__aeabi_dsub>
 8013404:	45b0      	cmp	r8, r6
 8013406:	4604      	mov	r4, r0
 8013408:	460d      	mov	r5, r1
 801340a:	d01b      	beq.n	8013444 <__ieee754_rem_pio2+0x8c>
 801340c:	a3ac      	add	r3, pc, #688	; (adr r3, 80136c0 <__ieee754_rem_pio2+0x308>)
 801340e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013412:	f7ec ff59 	bl	80002c8 <__aeabi_dsub>
 8013416:	4602      	mov	r2, r0
 8013418:	460b      	mov	r3, r1
 801341a:	e9ca 2300 	strd	r2, r3, [sl]
 801341e:	4620      	mov	r0, r4
 8013420:	4629      	mov	r1, r5
 8013422:	f7ec ff51 	bl	80002c8 <__aeabi_dsub>
 8013426:	a3a6      	add	r3, pc, #664	; (adr r3, 80136c0 <__ieee754_rem_pio2+0x308>)
 8013428:	e9d3 2300 	ldrd	r2, r3, [r3]
 801342c:	f7ec ff4c 	bl	80002c8 <__aeabi_dsub>
 8013430:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8013434:	f04f 0b01 	mov.w	fp, #1
 8013438:	4658      	mov	r0, fp
 801343a:	b00b      	add	sp, #44	; 0x2c
 801343c:	ecbd 8b02 	vpop	{d8}
 8013440:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013444:	a3a0      	add	r3, pc, #640	; (adr r3, 80136c8 <__ieee754_rem_pio2+0x310>)
 8013446:	e9d3 2300 	ldrd	r2, r3, [r3]
 801344a:	f7ec ff3d 	bl	80002c8 <__aeabi_dsub>
 801344e:	a3a0      	add	r3, pc, #640	; (adr r3, 80136d0 <__ieee754_rem_pio2+0x318>)
 8013450:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013454:	4604      	mov	r4, r0
 8013456:	460d      	mov	r5, r1
 8013458:	f7ec ff36 	bl	80002c8 <__aeabi_dsub>
 801345c:	4602      	mov	r2, r0
 801345e:	460b      	mov	r3, r1
 8013460:	e9ca 2300 	strd	r2, r3, [sl]
 8013464:	4620      	mov	r0, r4
 8013466:	4629      	mov	r1, r5
 8013468:	f7ec ff2e 	bl	80002c8 <__aeabi_dsub>
 801346c:	a398      	add	r3, pc, #608	; (adr r3, 80136d0 <__ieee754_rem_pio2+0x318>)
 801346e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013472:	e7db      	b.n	801342c <__ieee754_rem_pio2+0x74>
 8013474:	f7ec ff2a 	bl	80002cc <__adddf3>
 8013478:	45b0      	cmp	r8, r6
 801347a:	4604      	mov	r4, r0
 801347c:	460d      	mov	r5, r1
 801347e:	d016      	beq.n	80134ae <__ieee754_rem_pio2+0xf6>
 8013480:	a38f      	add	r3, pc, #572	; (adr r3, 80136c0 <__ieee754_rem_pio2+0x308>)
 8013482:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013486:	f7ec ff21 	bl	80002cc <__adddf3>
 801348a:	4602      	mov	r2, r0
 801348c:	460b      	mov	r3, r1
 801348e:	e9ca 2300 	strd	r2, r3, [sl]
 8013492:	4620      	mov	r0, r4
 8013494:	4629      	mov	r1, r5
 8013496:	f7ec ff17 	bl	80002c8 <__aeabi_dsub>
 801349a:	a389      	add	r3, pc, #548	; (adr r3, 80136c0 <__ieee754_rem_pio2+0x308>)
 801349c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80134a0:	f7ec ff14 	bl	80002cc <__adddf3>
 80134a4:	f04f 3bff 	mov.w	fp, #4294967295
 80134a8:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80134ac:	e7c4      	b.n	8013438 <__ieee754_rem_pio2+0x80>
 80134ae:	a386      	add	r3, pc, #536	; (adr r3, 80136c8 <__ieee754_rem_pio2+0x310>)
 80134b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80134b4:	f7ec ff0a 	bl	80002cc <__adddf3>
 80134b8:	a385      	add	r3, pc, #532	; (adr r3, 80136d0 <__ieee754_rem_pio2+0x318>)
 80134ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80134be:	4604      	mov	r4, r0
 80134c0:	460d      	mov	r5, r1
 80134c2:	f7ec ff03 	bl	80002cc <__adddf3>
 80134c6:	4602      	mov	r2, r0
 80134c8:	460b      	mov	r3, r1
 80134ca:	e9ca 2300 	strd	r2, r3, [sl]
 80134ce:	4620      	mov	r0, r4
 80134d0:	4629      	mov	r1, r5
 80134d2:	f7ec fef9 	bl	80002c8 <__aeabi_dsub>
 80134d6:	a37e      	add	r3, pc, #504	; (adr r3, 80136d0 <__ieee754_rem_pio2+0x318>)
 80134d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80134dc:	e7e0      	b.n	80134a0 <__ieee754_rem_pio2+0xe8>
 80134de:	4b87      	ldr	r3, [pc, #540]	; (80136fc <__ieee754_rem_pio2+0x344>)
 80134e0:	4598      	cmp	r8, r3
 80134e2:	f300 80d9 	bgt.w	8013698 <__ieee754_rem_pio2+0x2e0>
 80134e6:	f001 f855 	bl	8014594 <fabs>
 80134ea:	ec55 4b10 	vmov	r4, r5, d0
 80134ee:	ee10 0a10 	vmov	r0, s0
 80134f2:	a379      	add	r3, pc, #484	; (adr r3, 80136d8 <__ieee754_rem_pio2+0x320>)
 80134f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80134f8:	4629      	mov	r1, r5
 80134fa:	f7ed f89d 	bl	8000638 <__aeabi_dmul>
 80134fe:	4b80      	ldr	r3, [pc, #512]	; (8013700 <__ieee754_rem_pio2+0x348>)
 8013500:	2200      	movs	r2, #0
 8013502:	f7ec fee3 	bl	80002cc <__adddf3>
 8013506:	f7ed fb47 	bl	8000b98 <__aeabi_d2iz>
 801350a:	4683      	mov	fp, r0
 801350c:	f7ed f82a 	bl	8000564 <__aeabi_i2d>
 8013510:	4602      	mov	r2, r0
 8013512:	460b      	mov	r3, r1
 8013514:	ec43 2b18 	vmov	d8, r2, r3
 8013518:	a367      	add	r3, pc, #412	; (adr r3, 80136b8 <__ieee754_rem_pio2+0x300>)
 801351a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801351e:	f7ed f88b 	bl	8000638 <__aeabi_dmul>
 8013522:	4602      	mov	r2, r0
 8013524:	460b      	mov	r3, r1
 8013526:	4620      	mov	r0, r4
 8013528:	4629      	mov	r1, r5
 801352a:	f7ec fecd 	bl	80002c8 <__aeabi_dsub>
 801352e:	a364      	add	r3, pc, #400	; (adr r3, 80136c0 <__ieee754_rem_pio2+0x308>)
 8013530:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013534:	4606      	mov	r6, r0
 8013536:	460f      	mov	r7, r1
 8013538:	ec51 0b18 	vmov	r0, r1, d8
 801353c:	f7ed f87c 	bl	8000638 <__aeabi_dmul>
 8013540:	f1bb 0f1f 	cmp.w	fp, #31
 8013544:	4604      	mov	r4, r0
 8013546:	460d      	mov	r5, r1
 8013548:	dc0d      	bgt.n	8013566 <__ieee754_rem_pio2+0x1ae>
 801354a:	4b6e      	ldr	r3, [pc, #440]	; (8013704 <__ieee754_rem_pio2+0x34c>)
 801354c:	f10b 32ff 	add.w	r2, fp, #4294967295
 8013550:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013554:	4543      	cmp	r3, r8
 8013556:	d006      	beq.n	8013566 <__ieee754_rem_pio2+0x1ae>
 8013558:	4622      	mov	r2, r4
 801355a:	462b      	mov	r3, r5
 801355c:	4630      	mov	r0, r6
 801355e:	4639      	mov	r1, r7
 8013560:	f7ec feb2 	bl	80002c8 <__aeabi_dsub>
 8013564:	e00f      	b.n	8013586 <__ieee754_rem_pio2+0x1ce>
 8013566:	462b      	mov	r3, r5
 8013568:	4622      	mov	r2, r4
 801356a:	4630      	mov	r0, r6
 801356c:	4639      	mov	r1, r7
 801356e:	f7ec feab 	bl	80002c8 <__aeabi_dsub>
 8013572:	ea4f 5328 	mov.w	r3, r8, asr #20
 8013576:	9303      	str	r3, [sp, #12]
 8013578:	f3c1 530a 	ubfx	r3, r1, #20, #11
 801357c:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 8013580:	f1b8 0f10 	cmp.w	r8, #16
 8013584:	dc02      	bgt.n	801358c <__ieee754_rem_pio2+0x1d4>
 8013586:	e9ca 0100 	strd	r0, r1, [sl]
 801358a:	e039      	b.n	8013600 <__ieee754_rem_pio2+0x248>
 801358c:	a34e      	add	r3, pc, #312	; (adr r3, 80136c8 <__ieee754_rem_pio2+0x310>)
 801358e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013592:	ec51 0b18 	vmov	r0, r1, d8
 8013596:	f7ed f84f 	bl	8000638 <__aeabi_dmul>
 801359a:	4604      	mov	r4, r0
 801359c:	460d      	mov	r5, r1
 801359e:	4602      	mov	r2, r0
 80135a0:	460b      	mov	r3, r1
 80135a2:	4630      	mov	r0, r6
 80135a4:	4639      	mov	r1, r7
 80135a6:	f7ec fe8f 	bl	80002c8 <__aeabi_dsub>
 80135aa:	4602      	mov	r2, r0
 80135ac:	460b      	mov	r3, r1
 80135ae:	4680      	mov	r8, r0
 80135b0:	4689      	mov	r9, r1
 80135b2:	4630      	mov	r0, r6
 80135b4:	4639      	mov	r1, r7
 80135b6:	f7ec fe87 	bl	80002c8 <__aeabi_dsub>
 80135ba:	4622      	mov	r2, r4
 80135bc:	462b      	mov	r3, r5
 80135be:	f7ec fe83 	bl	80002c8 <__aeabi_dsub>
 80135c2:	a343      	add	r3, pc, #268	; (adr r3, 80136d0 <__ieee754_rem_pio2+0x318>)
 80135c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80135c8:	4604      	mov	r4, r0
 80135ca:	460d      	mov	r5, r1
 80135cc:	ec51 0b18 	vmov	r0, r1, d8
 80135d0:	f7ed f832 	bl	8000638 <__aeabi_dmul>
 80135d4:	4622      	mov	r2, r4
 80135d6:	462b      	mov	r3, r5
 80135d8:	f7ec fe76 	bl	80002c8 <__aeabi_dsub>
 80135dc:	4602      	mov	r2, r0
 80135de:	460b      	mov	r3, r1
 80135e0:	4604      	mov	r4, r0
 80135e2:	460d      	mov	r5, r1
 80135e4:	4640      	mov	r0, r8
 80135e6:	4649      	mov	r1, r9
 80135e8:	f7ec fe6e 	bl	80002c8 <__aeabi_dsub>
 80135ec:	9a03      	ldr	r2, [sp, #12]
 80135ee:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80135f2:	1ad3      	subs	r3, r2, r3
 80135f4:	2b31      	cmp	r3, #49	; 0x31
 80135f6:	dc24      	bgt.n	8013642 <__ieee754_rem_pio2+0x28a>
 80135f8:	e9ca 0100 	strd	r0, r1, [sl]
 80135fc:	4646      	mov	r6, r8
 80135fe:	464f      	mov	r7, r9
 8013600:	e9da 8900 	ldrd	r8, r9, [sl]
 8013604:	4630      	mov	r0, r6
 8013606:	4642      	mov	r2, r8
 8013608:	464b      	mov	r3, r9
 801360a:	4639      	mov	r1, r7
 801360c:	f7ec fe5c 	bl	80002c8 <__aeabi_dsub>
 8013610:	462b      	mov	r3, r5
 8013612:	4622      	mov	r2, r4
 8013614:	f7ec fe58 	bl	80002c8 <__aeabi_dsub>
 8013618:	9b02      	ldr	r3, [sp, #8]
 801361a:	2b00      	cmp	r3, #0
 801361c:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8013620:	f6bf af0a 	bge.w	8013438 <__ieee754_rem_pio2+0x80>
 8013624:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8013628:	f8ca 3004 	str.w	r3, [sl, #4]
 801362c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8013630:	f8ca 8000 	str.w	r8, [sl]
 8013634:	f8ca 0008 	str.w	r0, [sl, #8]
 8013638:	f8ca 300c 	str.w	r3, [sl, #12]
 801363c:	f1cb 0b00 	rsb	fp, fp, #0
 8013640:	e6fa      	b.n	8013438 <__ieee754_rem_pio2+0x80>
 8013642:	a327      	add	r3, pc, #156	; (adr r3, 80136e0 <__ieee754_rem_pio2+0x328>)
 8013644:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013648:	ec51 0b18 	vmov	r0, r1, d8
 801364c:	f7ec fff4 	bl	8000638 <__aeabi_dmul>
 8013650:	4604      	mov	r4, r0
 8013652:	460d      	mov	r5, r1
 8013654:	4602      	mov	r2, r0
 8013656:	460b      	mov	r3, r1
 8013658:	4640      	mov	r0, r8
 801365a:	4649      	mov	r1, r9
 801365c:	f7ec fe34 	bl	80002c8 <__aeabi_dsub>
 8013660:	4602      	mov	r2, r0
 8013662:	460b      	mov	r3, r1
 8013664:	4606      	mov	r6, r0
 8013666:	460f      	mov	r7, r1
 8013668:	4640      	mov	r0, r8
 801366a:	4649      	mov	r1, r9
 801366c:	f7ec fe2c 	bl	80002c8 <__aeabi_dsub>
 8013670:	4622      	mov	r2, r4
 8013672:	462b      	mov	r3, r5
 8013674:	f7ec fe28 	bl	80002c8 <__aeabi_dsub>
 8013678:	a31b      	add	r3, pc, #108	; (adr r3, 80136e8 <__ieee754_rem_pio2+0x330>)
 801367a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801367e:	4604      	mov	r4, r0
 8013680:	460d      	mov	r5, r1
 8013682:	ec51 0b18 	vmov	r0, r1, d8
 8013686:	f7ec ffd7 	bl	8000638 <__aeabi_dmul>
 801368a:	4622      	mov	r2, r4
 801368c:	462b      	mov	r3, r5
 801368e:	f7ec fe1b 	bl	80002c8 <__aeabi_dsub>
 8013692:	4604      	mov	r4, r0
 8013694:	460d      	mov	r5, r1
 8013696:	e75f      	b.n	8013558 <__ieee754_rem_pio2+0x1a0>
 8013698:	4b1b      	ldr	r3, [pc, #108]	; (8013708 <__ieee754_rem_pio2+0x350>)
 801369a:	4598      	cmp	r8, r3
 801369c:	dd36      	ble.n	801370c <__ieee754_rem_pio2+0x354>
 801369e:	ee10 2a10 	vmov	r2, s0
 80136a2:	462b      	mov	r3, r5
 80136a4:	4620      	mov	r0, r4
 80136a6:	4629      	mov	r1, r5
 80136a8:	f7ec fe0e 	bl	80002c8 <__aeabi_dsub>
 80136ac:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80136b0:	e9ca 0100 	strd	r0, r1, [sl]
 80136b4:	e694      	b.n	80133e0 <__ieee754_rem_pio2+0x28>
 80136b6:	bf00      	nop
 80136b8:	54400000 	.word	0x54400000
 80136bc:	3ff921fb 	.word	0x3ff921fb
 80136c0:	1a626331 	.word	0x1a626331
 80136c4:	3dd0b461 	.word	0x3dd0b461
 80136c8:	1a600000 	.word	0x1a600000
 80136cc:	3dd0b461 	.word	0x3dd0b461
 80136d0:	2e037073 	.word	0x2e037073
 80136d4:	3ba3198a 	.word	0x3ba3198a
 80136d8:	6dc9c883 	.word	0x6dc9c883
 80136dc:	3fe45f30 	.word	0x3fe45f30
 80136e0:	2e000000 	.word	0x2e000000
 80136e4:	3ba3198a 	.word	0x3ba3198a
 80136e8:	252049c1 	.word	0x252049c1
 80136ec:	397b839a 	.word	0x397b839a
 80136f0:	3fe921fb 	.word	0x3fe921fb
 80136f4:	4002d97b 	.word	0x4002d97b
 80136f8:	3ff921fb 	.word	0x3ff921fb
 80136fc:	413921fb 	.word	0x413921fb
 8013700:	3fe00000 	.word	0x3fe00000
 8013704:	08014d54 	.word	0x08014d54
 8013708:	7fefffff 	.word	0x7fefffff
 801370c:	ea4f 5428 	mov.w	r4, r8, asr #20
 8013710:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 8013714:	ee10 0a10 	vmov	r0, s0
 8013718:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 801371c:	ee10 6a10 	vmov	r6, s0
 8013720:	460f      	mov	r7, r1
 8013722:	f7ed fa39 	bl	8000b98 <__aeabi_d2iz>
 8013726:	f7ec ff1d 	bl	8000564 <__aeabi_i2d>
 801372a:	4602      	mov	r2, r0
 801372c:	460b      	mov	r3, r1
 801372e:	4630      	mov	r0, r6
 8013730:	4639      	mov	r1, r7
 8013732:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8013736:	f7ec fdc7 	bl	80002c8 <__aeabi_dsub>
 801373a:	4b23      	ldr	r3, [pc, #140]	; (80137c8 <__ieee754_rem_pio2+0x410>)
 801373c:	2200      	movs	r2, #0
 801373e:	f7ec ff7b 	bl	8000638 <__aeabi_dmul>
 8013742:	460f      	mov	r7, r1
 8013744:	4606      	mov	r6, r0
 8013746:	f7ed fa27 	bl	8000b98 <__aeabi_d2iz>
 801374a:	f7ec ff0b 	bl	8000564 <__aeabi_i2d>
 801374e:	4602      	mov	r2, r0
 8013750:	460b      	mov	r3, r1
 8013752:	4630      	mov	r0, r6
 8013754:	4639      	mov	r1, r7
 8013756:	e9cd 2306 	strd	r2, r3, [sp, #24]
 801375a:	f7ec fdb5 	bl	80002c8 <__aeabi_dsub>
 801375e:	4b1a      	ldr	r3, [pc, #104]	; (80137c8 <__ieee754_rem_pio2+0x410>)
 8013760:	2200      	movs	r2, #0
 8013762:	f7ec ff69 	bl	8000638 <__aeabi_dmul>
 8013766:	e9cd 0108 	strd	r0, r1, [sp, #32]
 801376a:	ad04      	add	r5, sp, #16
 801376c:	f04f 0803 	mov.w	r8, #3
 8013770:	46a9      	mov	r9, r5
 8013772:	2600      	movs	r6, #0
 8013774:	2700      	movs	r7, #0
 8013776:	4632      	mov	r2, r6
 8013778:	463b      	mov	r3, r7
 801377a:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 801377e:	46c3      	mov	fp, r8
 8013780:	3d08      	subs	r5, #8
 8013782:	f108 38ff 	add.w	r8, r8, #4294967295
 8013786:	f7ed f9bf 	bl	8000b08 <__aeabi_dcmpeq>
 801378a:	2800      	cmp	r0, #0
 801378c:	d1f3      	bne.n	8013776 <__ieee754_rem_pio2+0x3be>
 801378e:	4b0f      	ldr	r3, [pc, #60]	; (80137cc <__ieee754_rem_pio2+0x414>)
 8013790:	9301      	str	r3, [sp, #4]
 8013792:	2302      	movs	r3, #2
 8013794:	9300      	str	r3, [sp, #0]
 8013796:	4622      	mov	r2, r4
 8013798:	465b      	mov	r3, fp
 801379a:	4651      	mov	r1, sl
 801379c:	4648      	mov	r0, r9
 801379e:	f000 f8df 	bl	8013960 <__kernel_rem_pio2>
 80137a2:	9b02      	ldr	r3, [sp, #8]
 80137a4:	2b00      	cmp	r3, #0
 80137a6:	4683      	mov	fp, r0
 80137a8:	f6bf ae46 	bge.w	8013438 <__ieee754_rem_pio2+0x80>
 80137ac:	e9da 2100 	ldrd	r2, r1, [sl]
 80137b0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80137b4:	e9ca 2300 	strd	r2, r3, [sl]
 80137b8:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 80137bc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80137c0:	e9ca 2302 	strd	r2, r3, [sl, #8]
 80137c4:	e73a      	b.n	801363c <__ieee754_rem_pio2+0x284>
 80137c6:	bf00      	nop
 80137c8:	41700000 	.word	0x41700000
 80137cc:	08014dd4 	.word	0x08014dd4

080137d0 <__kernel_cos>:
 80137d0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80137d4:	ec57 6b10 	vmov	r6, r7, d0
 80137d8:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 80137dc:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 80137e0:	ed8d 1b00 	vstr	d1, [sp]
 80137e4:	da07      	bge.n	80137f6 <__kernel_cos+0x26>
 80137e6:	ee10 0a10 	vmov	r0, s0
 80137ea:	4639      	mov	r1, r7
 80137ec:	f7ed f9d4 	bl	8000b98 <__aeabi_d2iz>
 80137f0:	2800      	cmp	r0, #0
 80137f2:	f000 8088 	beq.w	8013906 <__kernel_cos+0x136>
 80137f6:	4632      	mov	r2, r6
 80137f8:	463b      	mov	r3, r7
 80137fa:	4630      	mov	r0, r6
 80137fc:	4639      	mov	r1, r7
 80137fe:	f7ec ff1b 	bl	8000638 <__aeabi_dmul>
 8013802:	4b51      	ldr	r3, [pc, #324]	; (8013948 <__kernel_cos+0x178>)
 8013804:	2200      	movs	r2, #0
 8013806:	4604      	mov	r4, r0
 8013808:	460d      	mov	r5, r1
 801380a:	f7ec ff15 	bl	8000638 <__aeabi_dmul>
 801380e:	a340      	add	r3, pc, #256	; (adr r3, 8013910 <__kernel_cos+0x140>)
 8013810:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013814:	4682      	mov	sl, r0
 8013816:	468b      	mov	fp, r1
 8013818:	4620      	mov	r0, r4
 801381a:	4629      	mov	r1, r5
 801381c:	f7ec ff0c 	bl	8000638 <__aeabi_dmul>
 8013820:	a33d      	add	r3, pc, #244	; (adr r3, 8013918 <__kernel_cos+0x148>)
 8013822:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013826:	f7ec fd51 	bl	80002cc <__adddf3>
 801382a:	4622      	mov	r2, r4
 801382c:	462b      	mov	r3, r5
 801382e:	f7ec ff03 	bl	8000638 <__aeabi_dmul>
 8013832:	a33b      	add	r3, pc, #236	; (adr r3, 8013920 <__kernel_cos+0x150>)
 8013834:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013838:	f7ec fd46 	bl	80002c8 <__aeabi_dsub>
 801383c:	4622      	mov	r2, r4
 801383e:	462b      	mov	r3, r5
 8013840:	f7ec fefa 	bl	8000638 <__aeabi_dmul>
 8013844:	a338      	add	r3, pc, #224	; (adr r3, 8013928 <__kernel_cos+0x158>)
 8013846:	e9d3 2300 	ldrd	r2, r3, [r3]
 801384a:	f7ec fd3f 	bl	80002cc <__adddf3>
 801384e:	4622      	mov	r2, r4
 8013850:	462b      	mov	r3, r5
 8013852:	f7ec fef1 	bl	8000638 <__aeabi_dmul>
 8013856:	a336      	add	r3, pc, #216	; (adr r3, 8013930 <__kernel_cos+0x160>)
 8013858:	e9d3 2300 	ldrd	r2, r3, [r3]
 801385c:	f7ec fd34 	bl	80002c8 <__aeabi_dsub>
 8013860:	4622      	mov	r2, r4
 8013862:	462b      	mov	r3, r5
 8013864:	f7ec fee8 	bl	8000638 <__aeabi_dmul>
 8013868:	a333      	add	r3, pc, #204	; (adr r3, 8013938 <__kernel_cos+0x168>)
 801386a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801386e:	f7ec fd2d 	bl	80002cc <__adddf3>
 8013872:	4622      	mov	r2, r4
 8013874:	462b      	mov	r3, r5
 8013876:	f7ec fedf 	bl	8000638 <__aeabi_dmul>
 801387a:	4622      	mov	r2, r4
 801387c:	462b      	mov	r3, r5
 801387e:	f7ec fedb 	bl	8000638 <__aeabi_dmul>
 8013882:	e9dd 2300 	ldrd	r2, r3, [sp]
 8013886:	4604      	mov	r4, r0
 8013888:	460d      	mov	r5, r1
 801388a:	4630      	mov	r0, r6
 801388c:	4639      	mov	r1, r7
 801388e:	f7ec fed3 	bl	8000638 <__aeabi_dmul>
 8013892:	460b      	mov	r3, r1
 8013894:	4602      	mov	r2, r0
 8013896:	4629      	mov	r1, r5
 8013898:	4620      	mov	r0, r4
 801389a:	f7ec fd15 	bl	80002c8 <__aeabi_dsub>
 801389e:	4b2b      	ldr	r3, [pc, #172]	; (801394c <__kernel_cos+0x17c>)
 80138a0:	4598      	cmp	r8, r3
 80138a2:	4606      	mov	r6, r0
 80138a4:	460f      	mov	r7, r1
 80138a6:	dc10      	bgt.n	80138ca <__kernel_cos+0xfa>
 80138a8:	4602      	mov	r2, r0
 80138aa:	460b      	mov	r3, r1
 80138ac:	4650      	mov	r0, sl
 80138ae:	4659      	mov	r1, fp
 80138b0:	f7ec fd0a 	bl	80002c8 <__aeabi_dsub>
 80138b4:	460b      	mov	r3, r1
 80138b6:	4926      	ldr	r1, [pc, #152]	; (8013950 <__kernel_cos+0x180>)
 80138b8:	4602      	mov	r2, r0
 80138ba:	2000      	movs	r0, #0
 80138bc:	f7ec fd04 	bl	80002c8 <__aeabi_dsub>
 80138c0:	ec41 0b10 	vmov	d0, r0, r1
 80138c4:	b003      	add	sp, #12
 80138c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80138ca:	4b22      	ldr	r3, [pc, #136]	; (8013954 <__kernel_cos+0x184>)
 80138cc:	4920      	ldr	r1, [pc, #128]	; (8013950 <__kernel_cos+0x180>)
 80138ce:	4598      	cmp	r8, r3
 80138d0:	bfcc      	ite	gt
 80138d2:	4d21      	ldrgt	r5, [pc, #132]	; (8013958 <__kernel_cos+0x188>)
 80138d4:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 80138d8:	2400      	movs	r4, #0
 80138da:	4622      	mov	r2, r4
 80138dc:	462b      	mov	r3, r5
 80138de:	2000      	movs	r0, #0
 80138e0:	f7ec fcf2 	bl	80002c8 <__aeabi_dsub>
 80138e4:	4622      	mov	r2, r4
 80138e6:	4680      	mov	r8, r0
 80138e8:	4689      	mov	r9, r1
 80138ea:	462b      	mov	r3, r5
 80138ec:	4650      	mov	r0, sl
 80138ee:	4659      	mov	r1, fp
 80138f0:	f7ec fcea 	bl	80002c8 <__aeabi_dsub>
 80138f4:	4632      	mov	r2, r6
 80138f6:	463b      	mov	r3, r7
 80138f8:	f7ec fce6 	bl	80002c8 <__aeabi_dsub>
 80138fc:	4602      	mov	r2, r0
 80138fe:	460b      	mov	r3, r1
 8013900:	4640      	mov	r0, r8
 8013902:	4649      	mov	r1, r9
 8013904:	e7da      	b.n	80138bc <__kernel_cos+0xec>
 8013906:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 8013940 <__kernel_cos+0x170>
 801390a:	e7db      	b.n	80138c4 <__kernel_cos+0xf4>
 801390c:	f3af 8000 	nop.w
 8013910:	be8838d4 	.word	0xbe8838d4
 8013914:	bda8fae9 	.word	0xbda8fae9
 8013918:	bdb4b1c4 	.word	0xbdb4b1c4
 801391c:	3e21ee9e 	.word	0x3e21ee9e
 8013920:	809c52ad 	.word	0x809c52ad
 8013924:	3e927e4f 	.word	0x3e927e4f
 8013928:	19cb1590 	.word	0x19cb1590
 801392c:	3efa01a0 	.word	0x3efa01a0
 8013930:	16c15177 	.word	0x16c15177
 8013934:	3f56c16c 	.word	0x3f56c16c
 8013938:	5555554c 	.word	0x5555554c
 801393c:	3fa55555 	.word	0x3fa55555
 8013940:	00000000 	.word	0x00000000
 8013944:	3ff00000 	.word	0x3ff00000
 8013948:	3fe00000 	.word	0x3fe00000
 801394c:	3fd33332 	.word	0x3fd33332
 8013950:	3ff00000 	.word	0x3ff00000
 8013954:	3fe90000 	.word	0x3fe90000
 8013958:	3fd20000 	.word	0x3fd20000
 801395c:	00000000 	.word	0x00000000

08013960 <__kernel_rem_pio2>:
 8013960:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013964:	ed2d 8b02 	vpush	{d8}
 8013968:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 801396c:	f112 0f14 	cmn.w	r2, #20
 8013970:	9308      	str	r3, [sp, #32]
 8013972:	9101      	str	r1, [sp, #4]
 8013974:	4bc4      	ldr	r3, [pc, #784]	; (8013c88 <__kernel_rem_pio2+0x328>)
 8013976:	99a6      	ldr	r1, [sp, #664]	; 0x298
 8013978:	900b      	str	r0, [sp, #44]	; 0x2c
 801397a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801397e:	9302      	str	r3, [sp, #8]
 8013980:	9b08      	ldr	r3, [sp, #32]
 8013982:	f103 33ff 	add.w	r3, r3, #4294967295
 8013986:	bfa8      	it	ge
 8013988:	1ed4      	subge	r4, r2, #3
 801398a:	9306      	str	r3, [sp, #24]
 801398c:	bfb2      	itee	lt
 801398e:	2400      	movlt	r4, #0
 8013990:	2318      	movge	r3, #24
 8013992:	fb94 f4f3 	sdivge	r4, r4, r3
 8013996:	f06f 0317 	mvn.w	r3, #23
 801399a:	fb04 3303 	mla	r3, r4, r3, r3
 801399e:	eb03 0a02 	add.w	sl, r3, r2
 80139a2:	9b02      	ldr	r3, [sp, #8]
 80139a4:	9a06      	ldr	r2, [sp, #24]
 80139a6:	ed9f 8bb4 	vldr	d8, [pc, #720]	; 8013c78 <__kernel_rem_pio2+0x318>
 80139aa:	eb03 0802 	add.w	r8, r3, r2
 80139ae:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 80139b0:	1aa7      	subs	r7, r4, r2
 80139b2:	ae22      	add	r6, sp, #136	; 0x88
 80139b4:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 80139b8:	2500      	movs	r5, #0
 80139ba:	4545      	cmp	r5, r8
 80139bc:	dd13      	ble.n	80139e6 <__kernel_rem_pio2+0x86>
 80139be:	9b08      	ldr	r3, [sp, #32]
 80139c0:	ed9f 8bad 	vldr	d8, [pc, #692]	; 8013c78 <__kernel_rem_pio2+0x318>
 80139c4:	aa22      	add	r2, sp, #136	; 0x88
 80139c6:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 80139ca:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 80139ce:	f04f 0800 	mov.w	r8, #0
 80139d2:	9b02      	ldr	r3, [sp, #8]
 80139d4:	4598      	cmp	r8, r3
 80139d6:	dc2f      	bgt.n	8013a38 <__kernel_rem_pio2+0xd8>
 80139d8:	ed8d 8b04 	vstr	d8, [sp, #16]
 80139dc:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 80139e0:	462f      	mov	r7, r5
 80139e2:	2600      	movs	r6, #0
 80139e4:	e01b      	b.n	8013a1e <__kernel_rem_pio2+0xbe>
 80139e6:	42ef      	cmn	r7, r5
 80139e8:	d407      	bmi.n	80139fa <__kernel_rem_pio2+0x9a>
 80139ea:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 80139ee:	f7ec fdb9 	bl	8000564 <__aeabi_i2d>
 80139f2:	e8e6 0102 	strd	r0, r1, [r6], #8
 80139f6:	3501      	adds	r5, #1
 80139f8:	e7df      	b.n	80139ba <__kernel_rem_pio2+0x5a>
 80139fa:	ec51 0b18 	vmov	r0, r1, d8
 80139fe:	e7f8      	b.n	80139f2 <__kernel_rem_pio2+0x92>
 8013a00:	e9d7 2300 	ldrd	r2, r3, [r7]
 8013a04:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8013a08:	f7ec fe16 	bl	8000638 <__aeabi_dmul>
 8013a0c:	4602      	mov	r2, r0
 8013a0e:	460b      	mov	r3, r1
 8013a10:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8013a14:	f7ec fc5a 	bl	80002cc <__adddf3>
 8013a18:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8013a1c:	3601      	adds	r6, #1
 8013a1e:	9b06      	ldr	r3, [sp, #24]
 8013a20:	429e      	cmp	r6, r3
 8013a22:	f1a7 0708 	sub.w	r7, r7, #8
 8013a26:	ddeb      	ble.n	8013a00 <__kernel_rem_pio2+0xa0>
 8013a28:	ed9d 7b04 	vldr	d7, [sp, #16]
 8013a2c:	f108 0801 	add.w	r8, r8, #1
 8013a30:	ecab 7b02 	vstmia	fp!, {d7}
 8013a34:	3508      	adds	r5, #8
 8013a36:	e7cc      	b.n	80139d2 <__kernel_rem_pio2+0x72>
 8013a38:	9b02      	ldr	r3, [sp, #8]
 8013a3a:	aa0e      	add	r2, sp, #56	; 0x38
 8013a3c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8013a40:	930d      	str	r3, [sp, #52]	; 0x34
 8013a42:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8013a44:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8013a48:	9c02      	ldr	r4, [sp, #8]
 8013a4a:	930c      	str	r3, [sp, #48]	; 0x30
 8013a4c:	00e3      	lsls	r3, r4, #3
 8013a4e:	930a      	str	r3, [sp, #40]	; 0x28
 8013a50:	ab9a      	add	r3, sp, #616	; 0x268
 8013a52:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8013a56:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 8013a5a:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 8013a5e:	ab72      	add	r3, sp, #456	; 0x1c8
 8013a60:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 8013a64:	46c3      	mov	fp, r8
 8013a66:	46a1      	mov	r9, r4
 8013a68:	f1b9 0f00 	cmp.w	r9, #0
 8013a6c:	f1a5 0508 	sub.w	r5, r5, #8
 8013a70:	dc77      	bgt.n	8013b62 <__kernel_rem_pio2+0x202>
 8013a72:	ec47 6b10 	vmov	d0, r6, r7
 8013a76:	4650      	mov	r0, sl
 8013a78:	f000 fe16 	bl	80146a8 <scalbn>
 8013a7c:	ec57 6b10 	vmov	r6, r7, d0
 8013a80:	2200      	movs	r2, #0
 8013a82:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8013a86:	ee10 0a10 	vmov	r0, s0
 8013a8a:	4639      	mov	r1, r7
 8013a8c:	f7ec fdd4 	bl	8000638 <__aeabi_dmul>
 8013a90:	ec41 0b10 	vmov	d0, r0, r1
 8013a94:	f000 fd88 	bl	80145a8 <floor>
 8013a98:	4b7c      	ldr	r3, [pc, #496]	; (8013c8c <__kernel_rem_pio2+0x32c>)
 8013a9a:	ec51 0b10 	vmov	r0, r1, d0
 8013a9e:	2200      	movs	r2, #0
 8013aa0:	f7ec fdca 	bl	8000638 <__aeabi_dmul>
 8013aa4:	4602      	mov	r2, r0
 8013aa6:	460b      	mov	r3, r1
 8013aa8:	4630      	mov	r0, r6
 8013aaa:	4639      	mov	r1, r7
 8013aac:	f7ec fc0c 	bl	80002c8 <__aeabi_dsub>
 8013ab0:	460f      	mov	r7, r1
 8013ab2:	4606      	mov	r6, r0
 8013ab4:	f7ed f870 	bl	8000b98 <__aeabi_d2iz>
 8013ab8:	9004      	str	r0, [sp, #16]
 8013aba:	f7ec fd53 	bl	8000564 <__aeabi_i2d>
 8013abe:	4602      	mov	r2, r0
 8013ac0:	460b      	mov	r3, r1
 8013ac2:	4630      	mov	r0, r6
 8013ac4:	4639      	mov	r1, r7
 8013ac6:	f7ec fbff 	bl	80002c8 <__aeabi_dsub>
 8013aca:	f1ba 0f00 	cmp.w	sl, #0
 8013ace:	4606      	mov	r6, r0
 8013ad0:	460f      	mov	r7, r1
 8013ad2:	dd6d      	ble.n	8013bb0 <__kernel_rem_pio2+0x250>
 8013ad4:	1e62      	subs	r2, r4, #1
 8013ad6:	ab0e      	add	r3, sp, #56	; 0x38
 8013ad8:	9d04      	ldr	r5, [sp, #16]
 8013ada:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8013ade:	f1ca 0118 	rsb	r1, sl, #24
 8013ae2:	fa40 f301 	asr.w	r3, r0, r1
 8013ae6:	441d      	add	r5, r3
 8013ae8:	408b      	lsls	r3, r1
 8013aea:	1ac0      	subs	r0, r0, r3
 8013aec:	ab0e      	add	r3, sp, #56	; 0x38
 8013aee:	9504      	str	r5, [sp, #16]
 8013af0:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8013af4:	f1ca 0317 	rsb	r3, sl, #23
 8013af8:	fa40 fb03 	asr.w	fp, r0, r3
 8013afc:	f1bb 0f00 	cmp.w	fp, #0
 8013b00:	dd65      	ble.n	8013bce <__kernel_rem_pio2+0x26e>
 8013b02:	9b04      	ldr	r3, [sp, #16]
 8013b04:	2200      	movs	r2, #0
 8013b06:	3301      	adds	r3, #1
 8013b08:	9304      	str	r3, [sp, #16]
 8013b0a:	4615      	mov	r5, r2
 8013b0c:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8013b10:	4294      	cmp	r4, r2
 8013b12:	f300 809c 	bgt.w	8013c4e <__kernel_rem_pio2+0x2ee>
 8013b16:	f1ba 0f00 	cmp.w	sl, #0
 8013b1a:	dd07      	ble.n	8013b2c <__kernel_rem_pio2+0x1cc>
 8013b1c:	f1ba 0f01 	cmp.w	sl, #1
 8013b20:	f000 80c0 	beq.w	8013ca4 <__kernel_rem_pio2+0x344>
 8013b24:	f1ba 0f02 	cmp.w	sl, #2
 8013b28:	f000 80c6 	beq.w	8013cb8 <__kernel_rem_pio2+0x358>
 8013b2c:	f1bb 0f02 	cmp.w	fp, #2
 8013b30:	d14d      	bne.n	8013bce <__kernel_rem_pio2+0x26e>
 8013b32:	4632      	mov	r2, r6
 8013b34:	463b      	mov	r3, r7
 8013b36:	4956      	ldr	r1, [pc, #344]	; (8013c90 <__kernel_rem_pio2+0x330>)
 8013b38:	2000      	movs	r0, #0
 8013b3a:	f7ec fbc5 	bl	80002c8 <__aeabi_dsub>
 8013b3e:	4606      	mov	r6, r0
 8013b40:	460f      	mov	r7, r1
 8013b42:	2d00      	cmp	r5, #0
 8013b44:	d043      	beq.n	8013bce <__kernel_rem_pio2+0x26e>
 8013b46:	4650      	mov	r0, sl
 8013b48:	ed9f 0b4d 	vldr	d0, [pc, #308]	; 8013c80 <__kernel_rem_pio2+0x320>
 8013b4c:	f000 fdac 	bl	80146a8 <scalbn>
 8013b50:	4630      	mov	r0, r6
 8013b52:	4639      	mov	r1, r7
 8013b54:	ec53 2b10 	vmov	r2, r3, d0
 8013b58:	f7ec fbb6 	bl	80002c8 <__aeabi_dsub>
 8013b5c:	4606      	mov	r6, r0
 8013b5e:	460f      	mov	r7, r1
 8013b60:	e035      	b.n	8013bce <__kernel_rem_pio2+0x26e>
 8013b62:	4b4c      	ldr	r3, [pc, #304]	; (8013c94 <__kernel_rem_pio2+0x334>)
 8013b64:	2200      	movs	r2, #0
 8013b66:	4630      	mov	r0, r6
 8013b68:	4639      	mov	r1, r7
 8013b6a:	f7ec fd65 	bl	8000638 <__aeabi_dmul>
 8013b6e:	f7ed f813 	bl	8000b98 <__aeabi_d2iz>
 8013b72:	f7ec fcf7 	bl	8000564 <__aeabi_i2d>
 8013b76:	4602      	mov	r2, r0
 8013b78:	460b      	mov	r3, r1
 8013b7a:	ec43 2b18 	vmov	d8, r2, r3
 8013b7e:	4b46      	ldr	r3, [pc, #280]	; (8013c98 <__kernel_rem_pio2+0x338>)
 8013b80:	2200      	movs	r2, #0
 8013b82:	f7ec fd59 	bl	8000638 <__aeabi_dmul>
 8013b86:	4602      	mov	r2, r0
 8013b88:	460b      	mov	r3, r1
 8013b8a:	4630      	mov	r0, r6
 8013b8c:	4639      	mov	r1, r7
 8013b8e:	f7ec fb9b 	bl	80002c8 <__aeabi_dsub>
 8013b92:	f7ed f801 	bl	8000b98 <__aeabi_d2iz>
 8013b96:	e9d5 2300 	ldrd	r2, r3, [r5]
 8013b9a:	f84b 0b04 	str.w	r0, [fp], #4
 8013b9e:	ec51 0b18 	vmov	r0, r1, d8
 8013ba2:	f7ec fb93 	bl	80002cc <__adddf3>
 8013ba6:	f109 39ff 	add.w	r9, r9, #4294967295
 8013baa:	4606      	mov	r6, r0
 8013bac:	460f      	mov	r7, r1
 8013bae:	e75b      	b.n	8013a68 <__kernel_rem_pio2+0x108>
 8013bb0:	d106      	bne.n	8013bc0 <__kernel_rem_pio2+0x260>
 8013bb2:	1e63      	subs	r3, r4, #1
 8013bb4:	aa0e      	add	r2, sp, #56	; 0x38
 8013bb6:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8013bba:	ea4f 5be0 	mov.w	fp, r0, asr #23
 8013bbe:	e79d      	b.n	8013afc <__kernel_rem_pio2+0x19c>
 8013bc0:	4b36      	ldr	r3, [pc, #216]	; (8013c9c <__kernel_rem_pio2+0x33c>)
 8013bc2:	2200      	movs	r2, #0
 8013bc4:	f7ec ffbe 	bl	8000b44 <__aeabi_dcmpge>
 8013bc8:	2800      	cmp	r0, #0
 8013bca:	d13d      	bne.n	8013c48 <__kernel_rem_pio2+0x2e8>
 8013bcc:	4683      	mov	fp, r0
 8013bce:	2200      	movs	r2, #0
 8013bd0:	2300      	movs	r3, #0
 8013bd2:	4630      	mov	r0, r6
 8013bd4:	4639      	mov	r1, r7
 8013bd6:	f7ec ff97 	bl	8000b08 <__aeabi_dcmpeq>
 8013bda:	2800      	cmp	r0, #0
 8013bdc:	f000 80c0 	beq.w	8013d60 <__kernel_rem_pio2+0x400>
 8013be0:	1e65      	subs	r5, r4, #1
 8013be2:	462b      	mov	r3, r5
 8013be4:	2200      	movs	r2, #0
 8013be6:	9902      	ldr	r1, [sp, #8]
 8013be8:	428b      	cmp	r3, r1
 8013bea:	da6c      	bge.n	8013cc6 <__kernel_rem_pio2+0x366>
 8013bec:	2a00      	cmp	r2, #0
 8013bee:	f000 8089 	beq.w	8013d04 <__kernel_rem_pio2+0x3a4>
 8013bf2:	ab0e      	add	r3, sp, #56	; 0x38
 8013bf4:	f1aa 0a18 	sub.w	sl, sl, #24
 8013bf8:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 8013bfc:	2b00      	cmp	r3, #0
 8013bfe:	f000 80ad 	beq.w	8013d5c <__kernel_rem_pio2+0x3fc>
 8013c02:	4650      	mov	r0, sl
 8013c04:	ed9f 0b1e 	vldr	d0, [pc, #120]	; 8013c80 <__kernel_rem_pio2+0x320>
 8013c08:	f000 fd4e 	bl	80146a8 <scalbn>
 8013c0c:	ab9a      	add	r3, sp, #616	; 0x268
 8013c0e:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8013c12:	ec57 6b10 	vmov	r6, r7, d0
 8013c16:	00ec      	lsls	r4, r5, #3
 8013c18:	f1a3 0898 	sub.w	r8, r3, #152	; 0x98
 8013c1c:	46aa      	mov	sl, r5
 8013c1e:	f1ba 0f00 	cmp.w	sl, #0
 8013c22:	f280 80d6 	bge.w	8013dd2 <__kernel_rem_pio2+0x472>
 8013c26:	ed9f 8b14 	vldr	d8, [pc, #80]	; 8013c78 <__kernel_rem_pio2+0x318>
 8013c2a:	462e      	mov	r6, r5
 8013c2c:	2e00      	cmp	r6, #0
 8013c2e:	f2c0 8104 	blt.w	8013e3a <__kernel_rem_pio2+0x4da>
 8013c32:	ab72      	add	r3, sp, #456	; 0x1c8
 8013c34:	ed8d 8b06 	vstr	d8, [sp, #24]
 8013c38:	f8df a064 	ldr.w	sl, [pc, #100]	; 8013ca0 <__kernel_rem_pio2+0x340>
 8013c3c:	eb03 09c6 	add.w	r9, r3, r6, lsl #3
 8013c40:	f04f 0800 	mov.w	r8, #0
 8013c44:	1baf      	subs	r7, r5, r6
 8013c46:	e0ea      	b.n	8013e1e <__kernel_rem_pio2+0x4be>
 8013c48:	f04f 0b02 	mov.w	fp, #2
 8013c4c:	e759      	b.n	8013b02 <__kernel_rem_pio2+0x1a2>
 8013c4e:	f8d8 3000 	ldr.w	r3, [r8]
 8013c52:	b955      	cbnz	r5, 8013c6a <__kernel_rem_pio2+0x30a>
 8013c54:	b123      	cbz	r3, 8013c60 <__kernel_rem_pio2+0x300>
 8013c56:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8013c5a:	f8c8 3000 	str.w	r3, [r8]
 8013c5e:	2301      	movs	r3, #1
 8013c60:	3201      	adds	r2, #1
 8013c62:	f108 0804 	add.w	r8, r8, #4
 8013c66:	461d      	mov	r5, r3
 8013c68:	e752      	b.n	8013b10 <__kernel_rem_pio2+0x1b0>
 8013c6a:	1acb      	subs	r3, r1, r3
 8013c6c:	f8c8 3000 	str.w	r3, [r8]
 8013c70:	462b      	mov	r3, r5
 8013c72:	e7f5      	b.n	8013c60 <__kernel_rem_pio2+0x300>
 8013c74:	f3af 8000 	nop.w
	...
 8013c84:	3ff00000 	.word	0x3ff00000
 8013c88:	08014f20 	.word	0x08014f20
 8013c8c:	40200000 	.word	0x40200000
 8013c90:	3ff00000 	.word	0x3ff00000
 8013c94:	3e700000 	.word	0x3e700000
 8013c98:	41700000 	.word	0x41700000
 8013c9c:	3fe00000 	.word	0x3fe00000
 8013ca0:	08014ee0 	.word	0x08014ee0
 8013ca4:	1e62      	subs	r2, r4, #1
 8013ca6:	ab0e      	add	r3, sp, #56	; 0x38
 8013ca8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013cac:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8013cb0:	a90e      	add	r1, sp, #56	; 0x38
 8013cb2:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8013cb6:	e739      	b.n	8013b2c <__kernel_rem_pio2+0x1cc>
 8013cb8:	1e62      	subs	r2, r4, #1
 8013cba:	ab0e      	add	r3, sp, #56	; 0x38
 8013cbc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013cc0:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8013cc4:	e7f4      	b.n	8013cb0 <__kernel_rem_pio2+0x350>
 8013cc6:	a90e      	add	r1, sp, #56	; 0x38
 8013cc8:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8013ccc:	3b01      	subs	r3, #1
 8013cce:	430a      	orrs	r2, r1
 8013cd0:	e789      	b.n	8013be6 <__kernel_rem_pio2+0x286>
 8013cd2:	3301      	adds	r3, #1
 8013cd4:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8013cd8:	2900      	cmp	r1, #0
 8013cda:	d0fa      	beq.n	8013cd2 <__kernel_rem_pio2+0x372>
 8013cdc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8013cde:	f502 721a 	add.w	r2, r2, #616	; 0x268
 8013ce2:	446a      	add	r2, sp
 8013ce4:	3a98      	subs	r2, #152	; 0x98
 8013ce6:	920a      	str	r2, [sp, #40]	; 0x28
 8013ce8:	9a08      	ldr	r2, [sp, #32]
 8013cea:	18e3      	adds	r3, r4, r3
 8013cec:	18a5      	adds	r5, r4, r2
 8013cee:	aa22      	add	r2, sp, #136	; 0x88
 8013cf0:	f104 0801 	add.w	r8, r4, #1
 8013cf4:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 8013cf8:	9304      	str	r3, [sp, #16]
 8013cfa:	9b04      	ldr	r3, [sp, #16]
 8013cfc:	4543      	cmp	r3, r8
 8013cfe:	da04      	bge.n	8013d0a <__kernel_rem_pio2+0x3aa>
 8013d00:	461c      	mov	r4, r3
 8013d02:	e6a3      	b.n	8013a4c <__kernel_rem_pio2+0xec>
 8013d04:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8013d06:	2301      	movs	r3, #1
 8013d08:	e7e4      	b.n	8013cd4 <__kernel_rem_pio2+0x374>
 8013d0a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8013d0c:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8013d10:	f7ec fc28 	bl	8000564 <__aeabi_i2d>
 8013d14:	e8e5 0102 	strd	r0, r1, [r5], #8
 8013d18:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013d1a:	46ab      	mov	fp, r5
 8013d1c:	461c      	mov	r4, r3
 8013d1e:	f04f 0900 	mov.w	r9, #0
 8013d22:	2600      	movs	r6, #0
 8013d24:	2700      	movs	r7, #0
 8013d26:	9b06      	ldr	r3, [sp, #24]
 8013d28:	4599      	cmp	r9, r3
 8013d2a:	dd06      	ble.n	8013d3a <__kernel_rem_pio2+0x3da>
 8013d2c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013d2e:	e8e3 6702 	strd	r6, r7, [r3], #8
 8013d32:	f108 0801 	add.w	r8, r8, #1
 8013d36:	930a      	str	r3, [sp, #40]	; 0x28
 8013d38:	e7df      	b.n	8013cfa <__kernel_rem_pio2+0x39a>
 8013d3a:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 8013d3e:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 8013d42:	f7ec fc79 	bl	8000638 <__aeabi_dmul>
 8013d46:	4602      	mov	r2, r0
 8013d48:	460b      	mov	r3, r1
 8013d4a:	4630      	mov	r0, r6
 8013d4c:	4639      	mov	r1, r7
 8013d4e:	f7ec fabd 	bl	80002cc <__adddf3>
 8013d52:	f109 0901 	add.w	r9, r9, #1
 8013d56:	4606      	mov	r6, r0
 8013d58:	460f      	mov	r7, r1
 8013d5a:	e7e4      	b.n	8013d26 <__kernel_rem_pio2+0x3c6>
 8013d5c:	3d01      	subs	r5, #1
 8013d5e:	e748      	b.n	8013bf2 <__kernel_rem_pio2+0x292>
 8013d60:	ec47 6b10 	vmov	d0, r6, r7
 8013d64:	f1ca 0000 	rsb	r0, sl, #0
 8013d68:	f000 fc9e 	bl	80146a8 <scalbn>
 8013d6c:	ec57 6b10 	vmov	r6, r7, d0
 8013d70:	4ba0      	ldr	r3, [pc, #640]	; (8013ff4 <__kernel_rem_pio2+0x694>)
 8013d72:	ee10 0a10 	vmov	r0, s0
 8013d76:	2200      	movs	r2, #0
 8013d78:	4639      	mov	r1, r7
 8013d7a:	f7ec fee3 	bl	8000b44 <__aeabi_dcmpge>
 8013d7e:	b1f8      	cbz	r0, 8013dc0 <__kernel_rem_pio2+0x460>
 8013d80:	4b9d      	ldr	r3, [pc, #628]	; (8013ff8 <__kernel_rem_pio2+0x698>)
 8013d82:	2200      	movs	r2, #0
 8013d84:	4630      	mov	r0, r6
 8013d86:	4639      	mov	r1, r7
 8013d88:	f7ec fc56 	bl	8000638 <__aeabi_dmul>
 8013d8c:	f7ec ff04 	bl	8000b98 <__aeabi_d2iz>
 8013d90:	4680      	mov	r8, r0
 8013d92:	f7ec fbe7 	bl	8000564 <__aeabi_i2d>
 8013d96:	4b97      	ldr	r3, [pc, #604]	; (8013ff4 <__kernel_rem_pio2+0x694>)
 8013d98:	2200      	movs	r2, #0
 8013d9a:	f7ec fc4d 	bl	8000638 <__aeabi_dmul>
 8013d9e:	460b      	mov	r3, r1
 8013da0:	4602      	mov	r2, r0
 8013da2:	4639      	mov	r1, r7
 8013da4:	4630      	mov	r0, r6
 8013da6:	f7ec fa8f 	bl	80002c8 <__aeabi_dsub>
 8013daa:	f7ec fef5 	bl	8000b98 <__aeabi_d2iz>
 8013dae:	1c65      	adds	r5, r4, #1
 8013db0:	ab0e      	add	r3, sp, #56	; 0x38
 8013db2:	f10a 0a18 	add.w	sl, sl, #24
 8013db6:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8013dba:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 8013dbe:	e720      	b.n	8013c02 <__kernel_rem_pio2+0x2a2>
 8013dc0:	4630      	mov	r0, r6
 8013dc2:	4639      	mov	r1, r7
 8013dc4:	f7ec fee8 	bl	8000b98 <__aeabi_d2iz>
 8013dc8:	ab0e      	add	r3, sp, #56	; 0x38
 8013dca:	4625      	mov	r5, r4
 8013dcc:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8013dd0:	e717      	b.n	8013c02 <__kernel_rem_pio2+0x2a2>
 8013dd2:	ab0e      	add	r3, sp, #56	; 0x38
 8013dd4:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 8013dd8:	f7ec fbc4 	bl	8000564 <__aeabi_i2d>
 8013ddc:	4632      	mov	r2, r6
 8013dde:	463b      	mov	r3, r7
 8013de0:	f7ec fc2a 	bl	8000638 <__aeabi_dmul>
 8013de4:	4b84      	ldr	r3, [pc, #528]	; (8013ff8 <__kernel_rem_pio2+0x698>)
 8013de6:	e968 0102 	strd	r0, r1, [r8, #-8]!
 8013dea:	2200      	movs	r2, #0
 8013dec:	4630      	mov	r0, r6
 8013dee:	4639      	mov	r1, r7
 8013df0:	f7ec fc22 	bl	8000638 <__aeabi_dmul>
 8013df4:	f10a 3aff 	add.w	sl, sl, #4294967295
 8013df8:	4606      	mov	r6, r0
 8013dfa:	460f      	mov	r7, r1
 8013dfc:	e70f      	b.n	8013c1e <__kernel_rem_pio2+0x2be>
 8013dfe:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 8013e02:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 8013e06:	f7ec fc17 	bl	8000638 <__aeabi_dmul>
 8013e0a:	4602      	mov	r2, r0
 8013e0c:	460b      	mov	r3, r1
 8013e0e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8013e12:	f7ec fa5b 	bl	80002cc <__adddf3>
 8013e16:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8013e1a:	f108 0801 	add.w	r8, r8, #1
 8013e1e:	9b02      	ldr	r3, [sp, #8]
 8013e20:	4598      	cmp	r8, r3
 8013e22:	dc01      	bgt.n	8013e28 <__kernel_rem_pio2+0x4c8>
 8013e24:	45b8      	cmp	r8, r7
 8013e26:	ddea      	ble.n	8013dfe <__kernel_rem_pio2+0x49e>
 8013e28:	ed9d 7b06 	vldr	d7, [sp, #24]
 8013e2c:	ab4a      	add	r3, sp, #296	; 0x128
 8013e2e:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8013e32:	ed87 7b00 	vstr	d7, [r7]
 8013e36:	3e01      	subs	r6, #1
 8013e38:	e6f8      	b.n	8013c2c <__kernel_rem_pio2+0x2cc>
 8013e3a:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 8013e3c:	2b02      	cmp	r3, #2
 8013e3e:	dc0b      	bgt.n	8013e58 <__kernel_rem_pio2+0x4f8>
 8013e40:	2b00      	cmp	r3, #0
 8013e42:	dc35      	bgt.n	8013eb0 <__kernel_rem_pio2+0x550>
 8013e44:	d059      	beq.n	8013efa <__kernel_rem_pio2+0x59a>
 8013e46:	9b04      	ldr	r3, [sp, #16]
 8013e48:	f003 0007 	and.w	r0, r3, #7
 8013e4c:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 8013e50:	ecbd 8b02 	vpop	{d8}
 8013e54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013e58:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 8013e5a:	2b03      	cmp	r3, #3
 8013e5c:	d1f3      	bne.n	8013e46 <__kernel_rem_pio2+0x4e6>
 8013e5e:	ab4a      	add	r3, sp, #296	; 0x128
 8013e60:	4423      	add	r3, r4
 8013e62:	9306      	str	r3, [sp, #24]
 8013e64:	461c      	mov	r4, r3
 8013e66:	469a      	mov	sl, r3
 8013e68:	9502      	str	r5, [sp, #8]
 8013e6a:	9b02      	ldr	r3, [sp, #8]
 8013e6c:	2b00      	cmp	r3, #0
 8013e6e:	f1aa 0a08 	sub.w	sl, sl, #8
 8013e72:	dc6b      	bgt.n	8013f4c <__kernel_rem_pio2+0x5ec>
 8013e74:	46aa      	mov	sl, r5
 8013e76:	f1ba 0f01 	cmp.w	sl, #1
 8013e7a:	f1a4 0408 	sub.w	r4, r4, #8
 8013e7e:	f300 8085 	bgt.w	8013f8c <__kernel_rem_pio2+0x62c>
 8013e82:	9c06      	ldr	r4, [sp, #24]
 8013e84:	2000      	movs	r0, #0
 8013e86:	3408      	adds	r4, #8
 8013e88:	2100      	movs	r1, #0
 8013e8a:	2d01      	cmp	r5, #1
 8013e8c:	f300 809d 	bgt.w	8013fca <__kernel_rem_pio2+0x66a>
 8013e90:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 8013e94:	e9dd 784c 	ldrd	r7, r8, [sp, #304]	; 0x130
 8013e98:	f1bb 0f00 	cmp.w	fp, #0
 8013e9c:	f040 809b 	bne.w	8013fd6 <__kernel_rem_pio2+0x676>
 8013ea0:	9b01      	ldr	r3, [sp, #4]
 8013ea2:	e9c3 5600 	strd	r5, r6, [r3]
 8013ea6:	e9c3 7802 	strd	r7, r8, [r3, #8]
 8013eaa:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8013eae:	e7ca      	b.n	8013e46 <__kernel_rem_pio2+0x4e6>
 8013eb0:	3408      	adds	r4, #8
 8013eb2:	ab4a      	add	r3, sp, #296	; 0x128
 8013eb4:	441c      	add	r4, r3
 8013eb6:	462e      	mov	r6, r5
 8013eb8:	2000      	movs	r0, #0
 8013eba:	2100      	movs	r1, #0
 8013ebc:	2e00      	cmp	r6, #0
 8013ebe:	da36      	bge.n	8013f2e <__kernel_rem_pio2+0x5ce>
 8013ec0:	f1bb 0f00 	cmp.w	fp, #0
 8013ec4:	d039      	beq.n	8013f3a <__kernel_rem_pio2+0x5da>
 8013ec6:	4602      	mov	r2, r0
 8013ec8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8013ecc:	9c01      	ldr	r4, [sp, #4]
 8013ece:	e9c4 2300 	strd	r2, r3, [r4]
 8013ed2:	4602      	mov	r2, r0
 8013ed4:	460b      	mov	r3, r1
 8013ed6:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 8013eda:	f7ec f9f5 	bl	80002c8 <__aeabi_dsub>
 8013ede:	ae4c      	add	r6, sp, #304	; 0x130
 8013ee0:	2401      	movs	r4, #1
 8013ee2:	42a5      	cmp	r5, r4
 8013ee4:	da2c      	bge.n	8013f40 <__kernel_rem_pio2+0x5e0>
 8013ee6:	f1bb 0f00 	cmp.w	fp, #0
 8013eea:	d002      	beq.n	8013ef2 <__kernel_rem_pio2+0x592>
 8013eec:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8013ef0:	4619      	mov	r1, r3
 8013ef2:	9b01      	ldr	r3, [sp, #4]
 8013ef4:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8013ef8:	e7a5      	b.n	8013e46 <__kernel_rem_pio2+0x4e6>
 8013efa:	f504 731a 	add.w	r3, r4, #616	; 0x268
 8013efe:	eb0d 0403 	add.w	r4, sp, r3
 8013f02:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 8013f06:	2000      	movs	r0, #0
 8013f08:	2100      	movs	r1, #0
 8013f0a:	2d00      	cmp	r5, #0
 8013f0c:	da09      	bge.n	8013f22 <__kernel_rem_pio2+0x5c2>
 8013f0e:	f1bb 0f00 	cmp.w	fp, #0
 8013f12:	d002      	beq.n	8013f1a <__kernel_rem_pio2+0x5ba>
 8013f14:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8013f18:	4619      	mov	r1, r3
 8013f1a:	9b01      	ldr	r3, [sp, #4]
 8013f1c:	e9c3 0100 	strd	r0, r1, [r3]
 8013f20:	e791      	b.n	8013e46 <__kernel_rem_pio2+0x4e6>
 8013f22:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8013f26:	f7ec f9d1 	bl	80002cc <__adddf3>
 8013f2a:	3d01      	subs	r5, #1
 8013f2c:	e7ed      	b.n	8013f0a <__kernel_rem_pio2+0x5aa>
 8013f2e:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8013f32:	f7ec f9cb 	bl	80002cc <__adddf3>
 8013f36:	3e01      	subs	r6, #1
 8013f38:	e7c0      	b.n	8013ebc <__kernel_rem_pio2+0x55c>
 8013f3a:	4602      	mov	r2, r0
 8013f3c:	460b      	mov	r3, r1
 8013f3e:	e7c5      	b.n	8013ecc <__kernel_rem_pio2+0x56c>
 8013f40:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 8013f44:	f7ec f9c2 	bl	80002cc <__adddf3>
 8013f48:	3401      	adds	r4, #1
 8013f4a:	e7ca      	b.n	8013ee2 <__kernel_rem_pio2+0x582>
 8013f4c:	e9da 8900 	ldrd	r8, r9, [sl]
 8013f50:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 8013f54:	9b02      	ldr	r3, [sp, #8]
 8013f56:	3b01      	subs	r3, #1
 8013f58:	9302      	str	r3, [sp, #8]
 8013f5a:	4632      	mov	r2, r6
 8013f5c:	463b      	mov	r3, r7
 8013f5e:	4640      	mov	r0, r8
 8013f60:	4649      	mov	r1, r9
 8013f62:	f7ec f9b3 	bl	80002cc <__adddf3>
 8013f66:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8013f6a:	4602      	mov	r2, r0
 8013f6c:	460b      	mov	r3, r1
 8013f6e:	4640      	mov	r0, r8
 8013f70:	4649      	mov	r1, r9
 8013f72:	f7ec f9a9 	bl	80002c8 <__aeabi_dsub>
 8013f76:	4632      	mov	r2, r6
 8013f78:	463b      	mov	r3, r7
 8013f7a:	f7ec f9a7 	bl	80002cc <__adddf3>
 8013f7e:	ed9d 7b08 	vldr	d7, [sp, #32]
 8013f82:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8013f86:	ed8a 7b00 	vstr	d7, [sl]
 8013f8a:	e76e      	b.n	8013e6a <__kernel_rem_pio2+0x50a>
 8013f8c:	e9d4 8900 	ldrd	r8, r9, [r4]
 8013f90:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 8013f94:	4640      	mov	r0, r8
 8013f96:	4632      	mov	r2, r6
 8013f98:	463b      	mov	r3, r7
 8013f9a:	4649      	mov	r1, r9
 8013f9c:	f7ec f996 	bl	80002cc <__adddf3>
 8013fa0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8013fa4:	4602      	mov	r2, r0
 8013fa6:	460b      	mov	r3, r1
 8013fa8:	4640      	mov	r0, r8
 8013faa:	4649      	mov	r1, r9
 8013fac:	f7ec f98c 	bl	80002c8 <__aeabi_dsub>
 8013fb0:	4632      	mov	r2, r6
 8013fb2:	463b      	mov	r3, r7
 8013fb4:	f7ec f98a 	bl	80002cc <__adddf3>
 8013fb8:	ed9d 7b02 	vldr	d7, [sp, #8]
 8013fbc:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8013fc0:	ed84 7b00 	vstr	d7, [r4]
 8013fc4:	f10a 3aff 	add.w	sl, sl, #4294967295
 8013fc8:	e755      	b.n	8013e76 <__kernel_rem_pio2+0x516>
 8013fca:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8013fce:	f7ec f97d 	bl	80002cc <__adddf3>
 8013fd2:	3d01      	subs	r5, #1
 8013fd4:	e759      	b.n	8013e8a <__kernel_rem_pio2+0x52a>
 8013fd6:	9b01      	ldr	r3, [sp, #4]
 8013fd8:	9a01      	ldr	r2, [sp, #4]
 8013fda:	601d      	str	r5, [r3, #0]
 8013fdc:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 8013fe0:	605c      	str	r4, [r3, #4]
 8013fe2:	609f      	str	r7, [r3, #8]
 8013fe4:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 8013fe8:	60d3      	str	r3, [r2, #12]
 8013fea:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8013fee:	6110      	str	r0, [r2, #16]
 8013ff0:	6153      	str	r3, [r2, #20]
 8013ff2:	e728      	b.n	8013e46 <__kernel_rem_pio2+0x4e6>
 8013ff4:	41700000 	.word	0x41700000
 8013ff8:	3e700000 	.word	0x3e700000
 8013ffc:	00000000 	.word	0x00000000

08014000 <__kernel_sin>:
 8014000:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014004:	ed2d 8b04 	vpush	{d8-d9}
 8014008:	eeb0 8a41 	vmov.f32	s16, s2
 801400c:	eef0 8a61 	vmov.f32	s17, s3
 8014010:	ec55 4b10 	vmov	r4, r5, d0
 8014014:	b083      	sub	sp, #12
 8014016:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 801401a:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 801401e:	9001      	str	r0, [sp, #4]
 8014020:	da06      	bge.n	8014030 <__kernel_sin+0x30>
 8014022:	ee10 0a10 	vmov	r0, s0
 8014026:	4629      	mov	r1, r5
 8014028:	f7ec fdb6 	bl	8000b98 <__aeabi_d2iz>
 801402c:	2800      	cmp	r0, #0
 801402e:	d051      	beq.n	80140d4 <__kernel_sin+0xd4>
 8014030:	4622      	mov	r2, r4
 8014032:	462b      	mov	r3, r5
 8014034:	4620      	mov	r0, r4
 8014036:	4629      	mov	r1, r5
 8014038:	f7ec fafe 	bl	8000638 <__aeabi_dmul>
 801403c:	4682      	mov	sl, r0
 801403e:	468b      	mov	fp, r1
 8014040:	4602      	mov	r2, r0
 8014042:	460b      	mov	r3, r1
 8014044:	4620      	mov	r0, r4
 8014046:	4629      	mov	r1, r5
 8014048:	f7ec faf6 	bl	8000638 <__aeabi_dmul>
 801404c:	a341      	add	r3, pc, #260	; (adr r3, 8014154 <__kernel_sin+0x154>)
 801404e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014052:	4680      	mov	r8, r0
 8014054:	4689      	mov	r9, r1
 8014056:	4650      	mov	r0, sl
 8014058:	4659      	mov	r1, fp
 801405a:	f7ec faed 	bl	8000638 <__aeabi_dmul>
 801405e:	a33f      	add	r3, pc, #252	; (adr r3, 801415c <__kernel_sin+0x15c>)
 8014060:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014064:	f7ec f930 	bl	80002c8 <__aeabi_dsub>
 8014068:	4652      	mov	r2, sl
 801406a:	465b      	mov	r3, fp
 801406c:	f7ec fae4 	bl	8000638 <__aeabi_dmul>
 8014070:	a33c      	add	r3, pc, #240	; (adr r3, 8014164 <__kernel_sin+0x164>)
 8014072:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014076:	f7ec f929 	bl	80002cc <__adddf3>
 801407a:	4652      	mov	r2, sl
 801407c:	465b      	mov	r3, fp
 801407e:	f7ec fadb 	bl	8000638 <__aeabi_dmul>
 8014082:	a33a      	add	r3, pc, #232	; (adr r3, 801416c <__kernel_sin+0x16c>)
 8014084:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014088:	f7ec f91e 	bl	80002c8 <__aeabi_dsub>
 801408c:	4652      	mov	r2, sl
 801408e:	465b      	mov	r3, fp
 8014090:	f7ec fad2 	bl	8000638 <__aeabi_dmul>
 8014094:	a337      	add	r3, pc, #220	; (adr r3, 8014174 <__kernel_sin+0x174>)
 8014096:	e9d3 2300 	ldrd	r2, r3, [r3]
 801409a:	f7ec f917 	bl	80002cc <__adddf3>
 801409e:	9b01      	ldr	r3, [sp, #4]
 80140a0:	4606      	mov	r6, r0
 80140a2:	460f      	mov	r7, r1
 80140a4:	b9eb      	cbnz	r3, 80140e2 <__kernel_sin+0xe2>
 80140a6:	4602      	mov	r2, r0
 80140a8:	460b      	mov	r3, r1
 80140aa:	4650      	mov	r0, sl
 80140ac:	4659      	mov	r1, fp
 80140ae:	f7ec fac3 	bl	8000638 <__aeabi_dmul>
 80140b2:	a325      	add	r3, pc, #148	; (adr r3, 8014148 <__kernel_sin+0x148>)
 80140b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80140b8:	f7ec f906 	bl	80002c8 <__aeabi_dsub>
 80140bc:	4642      	mov	r2, r8
 80140be:	464b      	mov	r3, r9
 80140c0:	f7ec faba 	bl	8000638 <__aeabi_dmul>
 80140c4:	4602      	mov	r2, r0
 80140c6:	460b      	mov	r3, r1
 80140c8:	4620      	mov	r0, r4
 80140ca:	4629      	mov	r1, r5
 80140cc:	f7ec f8fe 	bl	80002cc <__adddf3>
 80140d0:	4604      	mov	r4, r0
 80140d2:	460d      	mov	r5, r1
 80140d4:	ec45 4b10 	vmov	d0, r4, r5
 80140d8:	b003      	add	sp, #12
 80140da:	ecbd 8b04 	vpop	{d8-d9}
 80140de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80140e2:	4b1b      	ldr	r3, [pc, #108]	; (8014150 <__kernel_sin+0x150>)
 80140e4:	ec51 0b18 	vmov	r0, r1, d8
 80140e8:	2200      	movs	r2, #0
 80140ea:	f7ec faa5 	bl	8000638 <__aeabi_dmul>
 80140ee:	4632      	mov	r2, r6
 80140f0:	ec41 0b19 	vmov	d9, r0, r1
 80140f4:	463b      	mov	r3, r7
 80140f6:	4640      	mov	r0, r8
 80140f8:	4649      	mov	r1, r9
 80140fa:	f7ec fa9d 	bl	8000638 <__aeabi_dmul>
 80140fe:	4602      	mov	r2, r0
 8014100:	460b      	mov	r3, r1
 8014102:	ec51 0b19 	vmov	r0, r1, d9
 8014106:	f7ec f8df 	bl	80002c8 <__aeabi_dsub>
 801410a:	4652      	mov	r2, sl
 801410c:	465b      	mov	r3, fp
 801410e:	f7ec fa93 	bl	8000638 <__aeabi_dmul>
 8014112:	ec53 2b18 	vmov	r2, r3, d8
 8014116:	f7ec f8d7 	bl	80002c8 <__aeabi_dsub>
 801411a:	a30b      	add	r3, pc, #44	; (adr r3, 8014148 <__kernel_sin+0x148>)
 801411c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014120:	4606      	mov	r6, r0
 8014122:	460f      	mov	r7, r1
 8014124:	4640      	mov	r0, r8
 8014126:	4649      	mov	r1, r9
 8014128:	f7ec fa86 	bl	8000638 <__aeabi_dmul>
 801412c:	4602      	mov	r2, r0
 801412e:	460b      	mov	r3, r1
 8014130:	4630      	mov	r0, r6
 8014132:	4639      	mov	r1, r7
 8014134:	f7ec f8ca 	bl	80002cc <__adddf3>
 8014138:	4602      	mov	r2, r0
 801413a:	460b      	mov	r3, r1
 801413c:	4620      	mov	r0, r4
 801413e:	4629      	mov	r1, r5
 8014140:	f7ec f8c2 	bl	80002c8 <__aeabi_dsub>
 8014144:	e7c4      	b.n	80140d0 <__kernel_sin+0xd0>
 8014146:	bf00      	nop
 8014148:	55555549 	.word	0x55555549
 801414c:	3fc55555 	.word	0x3fc55555
 8014150:	3fe00000 	.word	0x3fe00000
 8014154:	5acfd57c 	.word	0x5acfd57c
 8014158:	3de5d93a 	.word	0x3de5d93a
 801415c:	8a2b9ceb 	.word	0x8a2b9ceb
 8014160:	3e5ae5e6 	.word	0x3e5ae5e6
 8014164:	57b1fe7d 	.word	0x57b1fe7d
 8014168:	3ec71de3 	.word	0x3ec71de3
 801416c:	19c161d5 	.word	0x19c161d5
 8014170:	3f2a01a0 	.word	0x3f2a01a0
 8014174:	1110f8a6 	.word	0x1110f8a6
 8014178:	3f811111 	.word	0x3f811111
 801417c:	00000000 	.word	0x00000000

08014180 <__kernel_tan>:
 8014180:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014184:	ed2d 8b06 	vpush	{d8-d10}
 8014188:	ec5b ab10 	vmov	sl, fp, d0
 801418c:	4be0      	ldr	r3, [pc, #896]	; (8014510 <__kernel_tan+0x390>)
 801418e:	b083      	sub	sp, #12
 8014190:	f02b 4700 	bic.w	r7, fp, #2147483648	; 0x80000000
 8014194:	429f      	cmp	r7, r3
 8014196:	ec59 8b11 	vmov	r8, r9, d1
 801419a:	4606      	mov	r6, r0
 801419c:	f8cd b000 	str.w	fp, [sp]
 80141a0:	dc61      	bgt.n	8014266 <__kernel_tan+0xe6>
 80141a2:	ee10 0a10 	vmov	r0, s0
 80141a6:	4659      	mov	r1, fp
 80141a8:	f7ec fcf6 	bl	8000b98 <__aeabi_d2iz>
 80141ac:	4605      	mov	r5, r0
 80141ae:	2800      	cmp	r0, #0
 80141b0:	f040 8083 	bne.w	80142ba <__kernel_tan+0x13a>
 80141b4:	1c73      	adds	r3, r6, #1
 80141b6:	4652      	mov	r2, sl
 80141b8:	4313      	orrs	r3, r2
 80141ba:	433b      	orrs	r3, r7
 80141bc:	d112      	bne.n	80141e4 <__kernel_tan+0x64>
 80141be:	ec4b ab10 	vmov	d0, sl, fp
 80141c2:	f000 f9e7 	bl	8014594 <fabs>
 80141c6:	49d3      	ldr	r1, [pc, #844]	; (8014514 <__kernel_tan+0x394>)
 80141c8:	ec53 2b10 	vmov	r2, r3, d0
 80141cc:	2000      	movs	r0, #0
 80141ce:	f7ec fb5d 	bl	800088c <__aeabi_ddiv>
 80141d2:	4682      	mov	sl, r0
 80141d4:	468b      	mov	fp, r1
 80141d6:	ec4b ab10 	vmov	d0, sl, fp
 80141da:	b003      	add	sp, #12
 80141dc:	ecbd 8b06 	vpop	{d8-d10}
 80141e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80141e4:	2e01      	cmp	r6, #1
 80141e6:	d0f6      	beq.n	80141d6 <__kernel_tan+0x56>
 80141e8:	4642      	mov	r2, r8
 80141ea:	464b      	mov	r3, r9
 80141ec:	4650      	mov	r0, sl
 80141ee:	4659      	mov	r1, fp
 80141f0:	f7ec f86c 	bl	80002cc <__adddf3>
 80141f4:	4602      	mov	r2, r0
 80141f6:	460b      	mov	r3, r1
 80141f8:	460f      	mov	r7, r1
 80141fa:	2000      	movs	r0, #0
 80141fc:	49c6      	ldr	r1, [pc, #792]	; (8014518 <__kernel_tan+0x398>)
 80141fe:	f7ec fb45 	bl	800088c <__aeabi_ddiv>
 8014202:	e9cd 0100 	strd	r0, r1, [sp]
 8014206:	e9dd 2300 	ldrd	r2, r3, [sp]
 801420a:	462e      	mov	r6, r5
 801420c:	4652      	mov	r2, sl
 801420e:	462c      	mov	r4, r5
 8014210:	4630      	mov	r0, r6
 8014212:	461d      	mov	r5, r3
 8014214:	4639      	mov	r1, r7
 8014216:	465b      	mov	r3, fp
 8014218:	f7ec f856 	bl	80002c8 <__aeabi_dsub>
 801421c:	4602      	mov	r2, r0
 801421e:	460b      	mov	r3, r1
 8014220:	4640      	mov	r0, r8
 8014222:	4649      	mov	r1, r9
 8014224:	f7ec f850 	bl	80002c8 <__aeabi_dsub>
 8014228:	4632      	mov	r2, r6
 801422a:	462b      	mov	r3, r5
 801422c:	f7ec fa04 	bl	8000638 <__aeabi_dmul>
 8014230:	4632      	mov	r2, r6
 8014232:	4680      	mov	r8, r0
 8014234:	4689      	mov	r9, r1
 8014236:	462b      	mov	r3, r5
 8014238:	4630      	mov	r0, r6
 801423a:	4639      	mov	r1, r7
 801423c:	f7ec f9fc 	bl	8000638 <__aeabi_dmul>
 8014240:	4bb4      	ldr	r3, [pc, #720]	; (8014514 <__kernel_tan+0x394>)
 8014242:	2200      	movs	r2, #0
 8014244:	f7ec f842 	bl	80002cc <__adddf3>
 8014248:	4602      	mov	r2, r0
 801424a:	460b      	mov	r3, r1
 801424c:	4640      	mov	r0, r8
 801424e:	4649      	mov	r1, r9
 8014250:	f7ec f83c 	bl	80002cc <__adddf3>
 8014254:	e9dd 2300 	ldrd	r2, r3, [sp]
 8014258:	f7ec f9ee 	bl	8000638 <__aeabi_dmul>
 801425c:	4622      	mov	r2, r4
 801425e:	462b      	mov	r3, r5
 8014260:	f7ec f834 	bl	80002cc <__adddf3>
 8014264:	e7b5      	b.n	80141d2 <__kernel_tan+0x52>
 8014266:	4bad      	ldr	r3, [pc, #692]	; (801451c <__kernel_tan+0x39c>)
 8014268:	429f      	cmp	r7, r3
 801426a:	dd26      	ble.n	80142ba <__kernel_tan+0x13a>
 801426c:	9b00      	ldr	r3, [sp, #0]
 801426e:	2b00      	cmp	r3, #0
 8014270:	da09      	bge.n	8014286 <__kernel_tan+0x106>
 8014272:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8014276:	469b      	mov	fp, r3
 8014278:	ee10 aa10 	vmov	sl, s0
 801427c:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8014280:	ee11 8a10 	vmov	r8, s2
 8014284:	4699      	mov	r9, r3
 8014286:	4652      	mov	r2, sl
 8014288:	465b      	mov	r3, fp
 801428a:	a183      	add	r1, pc, #524	; (adr r1, 8014498 <__kernel_tan+0x318>)
 801428c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8014290:	f7ec f81a 	bl	80002c8 <__aeabi_dsub>
 8014294:	4642      	mov	r2, r8
 8014296:	464b      	mov	r3, r9
 8014298:	4604      	mov	r4, r0
 801429a:	460d      	mov	r5, r1
 801429c:	a180      	add	r1, pc, #512	; (adr r1, 80144a0 <__kernel_tan+0x320>)
 801429e:	e9d1 0100 	ldrd	r0, r1, [r1]
 80142a2:	f7ec f811 	bl	80002c8 <__aeabi_dsub>
 80142a6:	4622      	mov	r2, r4
 80142a8:	462b      	mov	r3, r5
 80142aa:	f7ec f80f 	bl	80002cc <__adddf3>
 80142ae:	f04f 0800 	mov.w	r8, #0
 80142b2:	4682      	mov	sl, r0
 80142b4:	468b      	mov	fp, r1
 80142b6:	f04f 0900 	mov.w	r9, #0
 80142ba:	4652      	mov	r2, sl
 80142bc:	465b      	mov	r3, fp
 80142be:	4650      	mov	r0, sl
 80142c0:	4659      	mov	r1, fp
 80142c2:	f7ec f9b9 	bl	8000638 <__aeabi_dmul>
 80142c6:	4602      	mov	r2, r0
 80142c8:	460b      	mov	r3, r1
 80142ca:	ec43 2b18 	vmov	d8, r2, r3
 80142ce:	f7ec f9b3 	bl	8000638 <__aeabi_dmul>
 80142d2:	ec53 2b18 	vmov	r2, r3, d8
 80142d6:	4604      	mov	r4, r0
 80142d8:	460d      	mov	r5, r1
 80142da:	4650      	mov	r0, sl
 80142dc:	4659      	mov	r1, fp
 80142de:	f7ec f9ab 	bl	8000638 <__aeabi_dmul>
 80142e2:	a371      	add	r3, pc, #452	; (adr r3, 80144a8 <__kernel_tan+0x328>)
 80142e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80142e8:	ec41 0b19 	vmov	d9, r0, r1
 80142ec:	4620      	mov	r0, r4
 80142ee:	4629      	mov	r1, r5
 80142f0:	f7ec f9a2 	bl	8000638 <__aeabi_dmul>
 80142f4:	a36e      	add	r3, pc, #440	; (adr r3, 80144b0 <__kernel_tan+0x330>)
 80142f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80142fa:	f7eb ffe7 	bl	80002cc <__adddf3>
 80142fe:	4622      	mov	r2, r4
 8014300:	462b      	mov	r3, r5
 8014302:	f7ec f999 	bl	8000638 <__aeabi_dmul>
 8014306:	a36c      	add	r3, pc, #432	; (adr r3, 80144b8 <__kernel_tan+0x338>)
 8014308:	e9d3 2300 	ldrd	r2, r3, [r3]
 801430c:	f7eb ffde 	bl	80002cc <__adddf3>
 8014310:	4622      	mov	r2, r4
 8014312:	462b      	mov	r3, r5
 8014314:	f7ec f990 	bl	8000638 <__aeabi_dmul>
 8014318:	a369      	add	r3, pc, #420	; (adr r3, 80144c0 <__kernel_tan+0x340>)
 801431a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801431e:	f7eb ffd5 	bl	80002cc <__adddf3>
 8014322:	4622      	mov	r2, r4
 8014324:	462b      	mov	r3, r5
 8014326:	f7ec f987 	bl	8000638 <__aeabi_dmul>
 801432a:	a367      	add	r3, pc, #412	; (adr r3, 80144c8 <__kernel_tan+0x348>)
 801432c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014330:	f7eb ffcc 	bl	80002cc <__adddf3>
 8014334:	4622      	mov	r2, r4
 8014336:	462b      	mov	r3, r5
 8014338:	f7ec f97e 	bl	8000638 <__aeabi_dmul>
 801433c:	a364      	add	r3, pc, #400	; (adr r3, 80144d0 <__kernel_tan+0x350>)
 801433e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014342:	f7eb ffc3 	bl	80002cc <__adddf3>
 8014346:	ec53 2b18 	vmov	r2, r3, d8
 801434a:	f7ec f975 	bl	8000638 <__aeabi_dmul>
 801434e:	a362      	add	r3, pc, #392	; (adr r3, 80144d8 <__kernel_tan+0x358>)
 8014350:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014354:	ec41 0b1a 	vmov	d10, r0, r1
 8014358:	4620      	mov	r0, r4
 801435a:	4629      	mov	r1, r5
 801435c:	f7ec f96c 	bl	8000638 <__aeabi_dmul>
 8014360:	a35f      	add	r3, pc, #380	; (adr r3, 80144e0 <__kernel_tan+0x360>)
 8014362:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014366:	f7eb ffb1 	bl	80002cc <__adddf3>
 801436a:	4622      	mov	r2, r4
 801436c:	462b      	mov	r3, r5
 801436e:	f7ec f963 	bl	8000638 <__aeabi_dmul>
 8014372:	a35d      	add	r3, pc, #372	; (adr r3, 80144e8 <__kernel_tan+0x368>)
 8014374:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014378:	f7eb ffa8 	bl	80002cc <__adddf3>
 801437c:	4622      	mov	r2, r4
 801437e:	462b      	mov	r3, r5
 8014380:	f7ec f95a 	bl	8000638 <__aeabi_dmul>
 8014384:	a35a      	add	r3, pc, #360	; (adr r3, 80144f0 <__kernel_tan+0x370>)
 8014386:	e9d3 2300 	ldrd	r2, r3, [r3]
 801438a:	f7eb ff9f 	bl	80002cc <__adddf3>
 801438e:	4622      	mov	r2, r4
 8014390:	462b      	mov	r3, r5
 8014392:	f7ec f951 	bl	8000638 <__aeabi_dmul>
 8014396:	a358      	add	r3, pc, #352	; (adr r3, 80144f8 <__kernel_tan+0x378>)
 8014398:	e9d3 2300 	ldrd	r2, r3, [r3]
 801439c:	f7eb ff96 	bl	80002cc <__adddf3>
 80143a0:	4622      	mov	r2, r4
 80143a2:	462b      	mov	r3, r5
 80143a4:	f7ec f948 	bl	8000638 <__aeabi_dmul>
 80143a8:	a355      	add	r3, pc, #340	; (adr r3, 8014500 <__kernel_tan+0x380>)
 80143aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80143ae:	f7eb ff8d 	bl	80002cc <__adddf3>
 80143b2:	4602      	mov	r2, r0
 80143b4:	460b      	mov	r3, r1
 80143b6:	ec51 0b1a 	vmov	r0, r1, d10
 80143ba:	f7eb ff87 	bl	80002cc <__adddf3>
 80143be:	ec53 2b19 	vmov	r2, r3, d9
 80143c2:	f7ec f939 	bl	8000638 <__aeabi_dmul>
 80143c6:	4642      	mov	r2, r8
 80143c8:	464b      	mov	r3, r9
 80143ca:	f7eb ff7f 	bl	80002cc <__adddf3>
 80143ce:	ec53 2b18 	vmov	r2, r3, d8
 80143d2:	f7ec f931 	bl	8000638 <__aeabi_dmul>
 80143d6:	4642      	mov	r2, r8
 80143d8:	464b      	mov	r3, r9
 80143da:	f7eb ff77 	bl	80002cc <__adddf3>
 80143de:	a34a      	add	r3, pc, #296	; (adr r3, 8014508 <__kernel_tan+0x388>)
 80143e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80143e4:	4604      	mov	r4, r0
 80143e6:	460d      	mov	r5, r1
 80143e8:	ec51 0b19 	vmov	r0, r1, d9
 80143ec:	f7ec f924 	bl	8000638 <__aeabi_dmul>
 80143f0:	4622      	mov	r2, r4
 80143f2:	462b      	mov	r3, r5
 80143f4:	f7eb ff6a 	bl	80002cc <__adddf3>
 80143f8:	460b      	mov	r3, r1
 80143fa:	ec41 0b18 	vmov	d8, r0, r1
 80143fe:	4602      	mov	r2, r0
 8014400:	4659      	mov	r1, fp
 8014402:	4650      	mov	r0, sl
 8014404:	f7eb ff62 	bl	80002cc <__adddf3>
 8014408:	4b44      	ldr	r3, [pc, #272]	; (801451c <__kernel_tan+0x39c>)
 801440a:	429f      	cmp	r7, r3
 801440c:	4604      	mov	r4, r0
 801440e:	460d      	mov	r5, r1
 8014410:	f340 8086 	ble.w	8014520 <__kernel_tan+0x3a0>
 8014414:	4630      	mov	r0, r6
 8014416:	f7ec f8a5 	bl	8000564 <__aeabi_i2d>
 801441a:	4622      	mov	r2, r4
 801441c:	4680      	mov	r8, r0
 801441e:	4689      	mov	r9, r1
 8014420:	462b      	mov	r3, r5
 8014422:	4620      	mov	r0, r4
 8014424:	4629      	mov	r1, r5
 8014426:	f7ec f907 	bl	8000638 <__aeabi_dmul>
 801442a:	4642      	mov	r2, r8
 801442c:	4606      	mov	r6, r0
 801442e:	460f      	mov	r7, r1
 8014430:	464b      	mov	r3, r9
 8014432:	4620      	mov	r0, r4
 8014434:	4629      	mov	r1, r5
 8014436:	f7eb ff49 	bl	80002cc <__adddf3>
 801443a:	4602      	mov	r2, r0
 801443c:	460b      	mov	r3, r1
 801443e:	4630      	mov	r0, r6
 8014440:	4639      	mov	r1, r7
 8014442:	f7ec fa23 	bl	800088c <__aeabi_ddiv>
 8014446:	ec53 2b18 	vmov	r2, r3, d8
 801444a:	f7eb ff3d 	bl	80002c8 <__aeabi_dsub>
 801444e:	4602      	mov	r2, r0
 8014450:	460b      	mov	r3, r1
 8014452:	4650      	mov	r0, sl
 8014454:	4659      	mov	r1, fp
 8014456:	f7eb ff37 	bl	80002c8 <__aeabi_dsub>
 801445a:	4602      	mov	r2, r0
 801445c:	460b      	mov	r3, r1
 801445e:	f7eb ff35 	bl	80002cc <__adddf3>
 8014462:	4602      	mov	r2, r0
 8014464:	460b      	mov	r3, r1
 8014466:	4640      	mov	r0, r8
 8014468:	4649      	mov	r1, r9
 801446a:	f7eb ff2d 	bl	80002c8 <__aeabi_dsub>
 801446e:	9b00      	ldr	r3, [sp, #0]
 8014470:	ea4f 7aa3 	mov.w	sl, r3, asr #30
 8014474:	f00a 0a02 	and.w	sl, sl, #2
 8014478:	4604      	mov	r4, r0
 801447a:	f1ca 0001 	rsb	r0, sl, #1
 801447e:	460d      	mov	r5, r1
 8014480:	f7ec f870 	bl	8000564 <__aeabi_i2d>
 8014484:	4602      	mov	r2, r0
 8014486:	460b      	mov	r3, r1
 8014488:	4620      	mov	r0, r4
 801448a:	4629      	mov	r1, r5
 801448c:	f7ec f8d4 	bl	8000638 <__aeabi_dmul>
 8014490:	e69f      	b.n	80141d2 <__kernel_tan+0x52>
 8014492:	bf00      	nop
 8014494:	f3af 8000 	nop.w
 8014498:	54442d18 	.word	0x54442d18
 801449c:	3fe921fb 	.word	0x3fe921fb
 80144a0:	33145c07 	.word	0x33145c07
 80144a4:	3c81a626 	.word	0x3c81a626
 80144a8:	74bf7ad4 	.word	0x74bf7ad4
 80144ac:	3efb2a70 	.word	0x3efb2a70
 80144b0:	32f0a7e9 	.word	0x32f0a7e9
 80144b4:	3f12b80f 	.word	0x3f12b80f
 80144b8:	1a8d1068 	.word	0x1a8d1068
 80144bc:	3f3026f7 	.word	0x3f3026f7
 80144c0:	fee08315 	.word	0xfee08315
 80144c4:	3f57dbc8 	.word	0x3f57dbc8
 80144c8:	e96e8493 	.word	0xe96e8493
 80144cc:	3f8226e3 	.word	0x3f8226e3
 80144d0:	1bb341fe 	.word	0x1bb341fe
 80144d4:	3faba1ba 	.word	0x3faba1ba
 80144d8:	db605373 	.word	0xdb605373
 80144dc:	bef375cb 	.word	0xbef375cb
 80144e0:	a03792a6 	.word	0xa03792a6
 80144e4:	3f147e88 	.word	0x3f147e88
 80144e8:	f2f26501 	.word	0xf2f26501
 80144ec:	3f4344d8 	.word	0x3f4344d8
 80144f0:	c9560328 	.word	0xc9560328
 80144f4:	3f6d6d22 	.word	0x3f6d6d22
 80144f8:	8406d637 	.word	0x8406d637
 80144fc:	3f9664f4 	.word	0x3f9664f4
 8014500:	1110fe7a 	.word	0x1110fe7a
 8014504:	3fc11111 	.word	0x3fc11111
 8014508:	55555563 	.word	0x55555563
 801450c:	3fd55555 	.word	0x3fd55555
 8014510:	3e2fffff 	.word	0x3e2fffff
 8014514:	3ff00000 	.word	0x3ff00000
 8014518:	bff00000 	.word	0xbff00000
 801451c:	3fe59427 	.word	0x3fe59427
 8014520:	2e01      	cmp	r6, #1
 8014522:	d02f      	beq.n	8014584 <__kernel_tan+0x404>
 8014524:	460f      	mov	r7, r1
 8014526:	4602      	mov	r2, r0
 8014528:	460b      	mov	r3, r1
 801452a:	4689      	mov	r9, r1
 801452c:	2000      	movs	r0, #0
 801452e:	4917      	ldr	r1, [pc, #92]	; (801458c <__kernel_tan+0x40c>)
 8014530:	f7ec f9ac 	bl	800088c <__aeabi_ddiv>
 8014534:	2600      	movs	r6, #0
 8014536:	e9cd 0100 	strd	r0, r1, [sp]
 801453a:	4652      	mov	r2, sl
 801453c:	465b      	mov	r3, fp
 801453e:	4630      	mov	r0, r6
 8014540:	4639      	mov	r1, r7
 8014542:	f7eb fec1 	bl	80002c8 <__aeabi_dsub>
 8014546:	e9dd 4500 	ldrd	r4, r5, [sp]
 801454a:	4602      	mov	r2, r0
 801454c:	460b      	mov	r3, r1
 801454e:	ec51 0b18 	vmov	r0, r1, d8
 8014552:	f7eb feb9 	bl	80002c8 <__aeabi_dsub>
 8014556:	4632      	mov	r2, r6
 8014558:	462b      	mov	r3, r5
 801455a:	f7ec f86d 	bl	8000638 <__aeabi_dmul>
 801455e:	46b0      	mov	r8, r6
 8014560:	460f      	mov	r7, r1
 8014562:	4642      	mov	r2, r8
 8014564:	462b      	mov	r3, r5
 8014566:	4634      	mov	r4, r6
 8014568:	4649      	mov	r1, r9
 801456a:	4606      	mov	r6, r0
 801456c:	4640      	mov	r0, r8
 801456e:	f7ec f863 	bl	8000638 <__aeabi_dmul>
 8014572:	4b07      	ldr	r3, [pc, #28]	; (8014590 <__kernel_tan+0x410>)
 8014574:	2200      	movs	r2, #0
 8014576:	f7eb fea9 	bl	80002cc <__adddf3>
 801457a:	4602      	mov	r2, r0
 801457c:	460b      	mov	r3, r1
 801457e:	4630      	mov	r0, r6
 8014580:	4639      	mov	r1, r7
 8014582:	e665      	b.n	8014250 <__kernel_tan+0xd0>
 8014584:	4682      	mov	sl, r0
 8014586:	468b      	mov	fp, r1
 8014588:	e625      	b.n	80141d6 <__kernel_tan+0x56>
 801458a:	bf00      	nop
 801458c:	bff00000 	.word	0xbff00000
 8014590:	3ff00000 	.word	0x3ff00000

08014594 <fabs>:
 8014594:	ec51 0b10 	vmov	r0, r1, d0
 8014598:	ee10 2a10 	vmov	r2, s0
 801459c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80145a0:	ec43 2b10 	vmov	d0, r2, r3
 80145a4:	4770      	bx	lr
	...

080145a8 <floor>:
 80145a8:	ec51 0b10 	vmov	r0, r1, d0
 80145ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80145b0:	f3c1 570a 	ubfx	r7, r1, #20, #11
 80145b4:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 80145b8:	2e13      	cmp	r6, #19
 80145ba:	ee10 5a10 	vmov	r5, s0
 80145be:	ee10 8a10 	vmov	r8, s0
 80145c2:	460c      	mov	r4, r1
 80145c4:	dc32      	bgt.n	801462c <floor+0x84>
 80145c6:	2e00      	cmp	r6, #0
 80145c8:	da14      	bge.n	80145f4 <floor+0x4c>
 80145ca:	a333      	add	r3, pc, #204	; (adr r3, 8014698 <floor+0xf0>)
 80145cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80145d0:	f7eb fe7c 	bl	80002cc <__adddf3>
 80145d4:	2200      	movs	r2, #0
 80145d6:	2300      	movs	r3, #0
 80145d8:	f7ec fabe 	bl	8000b58 <__aeabi_dcmpgt>
 80145dc:	b138      	cbz	r0, 80145ee <floor+0x46>
 80145de:	2c00      	cmp	r4, #0
 80145e0:	da57      	bge.n	8014692 <floor+0xea>
 80145e2:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 80145e6:	431d      	orrs	r5, r3
 80145e8:	d001      	beq.n	80145ee <floor+0x46>
 80145ea:	4c2d      	ldr	r4, [pc, #180]	; (80146a0 <floor+0xf8>)
 80145ec:	2500      	movs	r5, #0
 80145ee:	4621      	mov	r1, r4
 80145f0:	4628      	mov	r0, r5
 80145f2:	e025      	b.n	8014640 <floor+0x98>
 80145f4:	4f2b      	ldr	r7, [pc, #172]	; (80146a4 <floor+0xfc>)
 80145f6:	4137      	asrs	r7, r6
 80145f8:	ea01 0307 	and.w	r3, r1, r7
 80145fc:	4303      	orrs	r3, r0
 80145fe:	d01f      	beq.n	8014640 <floor+0x98>
 8014600:	a325      	add	r3, pc, #148	; (adr r3, 8014698 <floor+0xf0>)
 8014602:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014606:	f7eb fe61 	bl	80002cc <__adddf3>
 801460a:	2200      	movs	r2, #0
 801460c:	2300      	movs	r3, #0
 801460e:	f7ec faa3 	bl	8000b58 <__aeabi_dcmpgt>
 8014612:	2800      	cmp	r0, #0
 8014614:	d0eb      	beq.n	80145ee <floor+0x46>
 8014616:	2c00      	cmp	r4, #0
 8014618:	bfbe      	ittt	lt
 801461a:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 801461e:	fa43 f606 	asrlt.w	r6, r3, r6
 8014622:	19a4      	addlt	r4, r4, r6
 8014624:	ea24 0407 	bic.w	r4, r4, r7
 8014628:	2500      	movs	r5, #0
 801462a:	e7e0      	b.n	80145ee <floor+0x46>
 801462c:	2e33      	cmp	r6, #51	; 0x33
 801462e:	dd0b      	ble.n	8014648 <floor+0xa0>
 8014630:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8014634:	d104      	bne.n	8014640 <floor+0x98>
 8014636:	ee10 2a10 	vmov	r2, s0
 801463a:	460b      	mov	r3, r1
 801463c:	f7eb fe46 	bl	80002cc <__adddf3>
 8014640:	ec41 0b10 	vmov	d0, r0, r1
 8014644:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014648:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 801464c:	f04f 33ff 	mov.w	r3, #4294967295
 8014650:	fa23 f707 	lsr.w	r7, r3, r7
 8014654:	4207      	tst	r7, r0
 8014656:	d0f3      	beq.n	8014640 <floor+0x98>
 8014658:	a30f      	add	r3, pc, #60	; (adr r3, 8014698 <floor+0xf0>)
 801465a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801465e:	f7eb fe35 	bl	80002cc <__adddf3>
 8014662:	2200      	movs	r2, #0
 8014664:	2300      	movs	r3, #0
 8014666:	f7ec fa77 	bl	8000b58 <__aeabi_dcmpgt>
 801466a:	2800      	cmp	r0, #0
 801466c:	d0bf      	beq.n	80145ee <floor+0x46>
 801466e:	2c00      	cmp	r4, #0
 8014670:	da02      	bge.n	8014678 <floor+0xd0>
 8014672:	2e14      	cmp	r6, #20
 8014674:	d103      	bne.n	801467e <floor+0xd6>
 8014676:	3401      	adds	r4, #1
 8014678:	ea25 0507 	bic.w	r5, r5, r7
 801467c:	e7b7      	b.n	80145ee <floor+0x46>
 801467e:	2301      	movs	r3, #1
 8014680:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8014684:	fa03 f606 	lsl.w	r6, r3, r6
 8014688:	4435      	add	r5, r6
 801468a:	4545      	cmp	r5, r8
 801468c:	bf38      	it	cc
 801468e:	18e4      	addcc	r4, r4, r3
 8014690:	e7f2      	b.n	8014678 <floor+0xd0>
 8014692:	2500      	movs	r5, #0
 8014694:	462c      	mov	r4, r5
 8014696:	e7aa      	b.n	80145ee <floor+0x46>
 8014698:	8800759c 	.word	0x8800759c
 801469c:	7e37e43c 	.word	0x7e37e43c
 80146a0:	bff00000 	.word	0xbff00000
 80146a4:	000fffff 	.word	0x000fffff

080146a8 <scalbn>:
 80146a8:	b570      	push	{r4, r5, r6, lr}
 80146aa:	ec55 4b10 	vmov	r4, r5, d0
 80146ae:	f3c5 520a 	ubfx	r2, r5, #20, #11
 80146b2:	4606      	mov	r6, r0
 80146b4:	462b      	mov	r3, r5
 80146b6:	b99a      	cbnz	r2, 80146e0 <scalbn+0x38>
 80146b8:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80146bc:	4323      	orrs	r3, r4
 80146be:	d036      	beq.n	801472e <scalbn+0x86>
 80146c0:	4b39      	ldr	r3, [pc, #228]	; (80147a8 <scalbn+0x100>)
 80146c2:	4629      	mov	r1, r5
 80146c4:	ee10 0a10 	vmov	r0, s0
 80146c8:	2200      	movs	r2, #0
 80146ca:	f7eb ffb5 	bl	8000638 <__aeabi_dmul>
 80146ce:	4b37      	ldr	r3, [pc, #220]	; (80147ac <scalbn+0x104>)
 80146d0:	429e      	cmp	r6, r3
 80146d2:	4604      	mov	r4, r0
 80146d4:	460d      	mov	r5, r1
 80146d6:	da10      	bge.n	80146fa <scalbn+0x52>
 80146d8:	a32b      	add	r3, pc, #172	; (adr r3, 8014788 <scalbn+0xe0>)
 80146da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80146de:	e03a      	b.n	8014756 <scalbn+0xae>
 80146e0:	f240 71ff 	movw	r1, #2047	; 0x7ff
 80146e4:	428a      	cmp	r2, r1
 80146e6:	d10c      	bne.n	8014702 <scalbn+0x5a>
 80146e8:	ee10 2a10 	vmov	r2, s0
 80146ec:	4620      	mov	r0, r4
 80146ee:	4629      	mov	r1, r5
 80146f0:	f7eb fdec 	bl	80002cc <__adddf3>
 80146f4:	4604      	mov	r4, r0
 80146f6:	460d      	mov	r5, r1
 80146f8:	e019      	b.n	801472e <scalbn+0x86>
 80146fa:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80146fe:	460b      	mov	r3, r1
 8014700:	3a36      	subs	r2, #54	; 0x36
 8014702:	4432      	add	r2, r6
 8014704:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8014708:	428a      	cmp	r2, r1
 801470a:	dd08      	ble.n	801471e <scalbn+0x76>
 801470c:	2d00      	cmp	r5, #0
 801470e:	a120      	add	r1, pc, #128	; (adr r1, 8014790 <scalbn+0xe8>)
 8014710:	e9d1 0100 	ldrd	r0, r1, [r1]
 8014714:	da1c      	bge.n	8014750 <scalbn+0xa8>
 8014716:	a120      	add	r1, pc, #128	; (adr r1, 8014798 <scalbn+0xf0>)
 8014718:	e9d1 0100 	ldrd	r0, r1, [r1]
 801471c:	e018      	b.n	8014750 <scalbn+0xa8>
 801471e:	2a00      	cmp	r2, #0
 8014720:	dd08      	ble.n	8014734 <scalbn+0x8c>
 8014722:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8014726:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801472a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 801472e:	ec45 4b10 	vmov	d0, r4, r5
 8014732:	bd70      	pop	{r4, r5, r6, pc}
 8014734:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8014738:	da19      	bge.n	801476e <scalbn+0xc6>
 801473a:	f24c 3350 	movw	r3, #50000	; 0xc350
 801473e:	429e      	cmp	r6, r3
 8014740:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 8014744:	dd0a      	ble.n	801475c <scalbn+0xb4>
 8014746:	a112      	add	r1, pc, #72	; (adr r1, 8014790 <scalbn+0xe8>)
 8014748:	e9d1 0100 	ldrd	r0, r1, [r1]
 801474c:	2b00      	cmp	r3, #0
 801474e:	d1e2      	bne.n	8014716 <scalbn+0x6e>
 8014750:	a30f      	add	r3, pc, #60	; (adr r3, 8014790 <scalbn+0xe8>)
 8014752:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014756:	f7eb ff6f 	bl	8000638 <__aeabi_dmul>
 801475a:	e7cb      	b.n	80146f4 <scalbn+0x4c>
 801475c:	a10a      	add	r1, pc, #40	; (adr r1, 8014788 <scalbn+0xe0>)
 801475e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8014762:	2b00      	cmp	r3, #0
 8014764:	d0b8      	beq.n	80146d8 <scalbn+0x30>
 8014766:	a10e      	add	r1, pc, #56	; (adr r1, 80147a0 <scalbn+0xf8>)
 8014768:	e9d1 0100 	ldrd	r0, r1, [r1]
 801476c:	e7b4      	b.n	80146d8 <scalbn+0x30>
 801476e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8014772:	3236      	adds	r2, #54	; 0x36
 8014774:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8014778:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 801477c:	4620      	mov	r0, r4
 801477e:	4b0c      	ldr	r3, [pc, #48]	; (80147b0 <scalbn+0x108>)
 8014780:	2200      	movs	r2, #0
 8014782:	e7e8      	b.n	8014756 <scalbn+0xae>
 8014784:	f3af 8000 	nop.w
 8014788:	c2f8f359 	.word	0xc2f8f359
 801478c:	01a56e1f 	.word	0x01a56e1f
 8014790:	8800759c 	.word	0x8800759c
 8014794:	7e37e43c 	.word	0x7e37e43c
 8014798:	8800759c 	.word	0x8800759c
 801479c:	fe37e43c 	.word	0xfe37e43c
 80147a0:	c2f8f359 	.word	0xc2f8f359
 80147a4:	81a56e1f 	.word	0x81a56e1f
 80147a8:	43500000 	.word	0x43500000
 80147ac:	ffff3cb0 	.word	0xffff3cb0
 80147b0:	3c900000 	.word	0x3c900000

080147b4 <_init>:
 80147b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80147b6:	bf00      	nop
 80147b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80147ba:	bc08      	pop	{r3}
 80147bc:	469e      	mov	lr, r3
 80147be:	4770      	bx	lr

080147c0 <_fini>:
 80147c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80147c2:	bf00      	nop
 80147c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80147c6:	bc08      	pop	{r3}
 80147c8:	469e      	mov	lr, r3
 80147ca:	4770      	bx	lr
